{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/***\r\n * https://templeofeth.io\r\n *\r\n * Tribal Warfare.\r\n *\r\n * A timer countdown - starts 12 mins.\r\n * 6 Tribal masks flipping\r\n * Price increase by 35% per flip\r\n * TMPL tokens 10%\r\n * Dev fee: 5 %\r\n * 110% previous owner.\r\n * 5% goes into current pot.\r\n * 5% goes into next pot.\r\n * Each mask has a “time power” that adds 2,4,6,8,10,12 minutes to the timer when the card flips.\r\n * When the timer runs out the round ends and the last mask to flip wins the current pot.\r\n * Next round starts on next flip - prices are reset.\r\n *\r\n * Temple Warning: Do not play with more than you can afford to lose.\r\n */\r\n\r\ncontract TempleInterface {\r\n  function purchaseFor(address _referredBy, address _customerAddress) public payable returns (uint256);\r\n}\r\n\r\ncontract TribalWarfare {\r\n\r\n  /*=================================\r\n  =            MODIFIERS            =\r\n  =================================*/\r\n\r\n  /// @dev Access modifier for owner functions\r\n  modifier onlyOwner() {\r\n    require(msg.sender == contractOwner);\r\n    _;\r\n  }\r\n\r\n  /// @dev Prevent contract calls.\r\n  modifier notContract() {\r\n    require(tx.origin == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /// @dev notPaused\r\n  modifier notPaused() {\r\n    require(paused == false);\r\n    _;\r\n  }\r\n\r\n  /// @dev easyOnGas\r\n  modifier easyOnGas() {\r\n    require(tx.gasprice < 99999999999);\r\n    _;\r\n  }\r\n\r\n  /*==============================\r\n  =            EVENTS            =\r\n  ==============================*/\r\n\r\n  event onTokenSold(\r\n       uint256 indexed tokenId,\r\n       uint256 price,\r\n       address prevOwner,\r\n       address newOwner,\r\n       string name\r\n    );\r\n\r\n    event onRoundEnded(\r\n         uint256 indexed roundNumber,\r\n         uint256 indexed tokenId,\r\n         address owner,\r\n         uint256 winnings\r\n      );\r\n\r\n  /*==============================\r\n  =            CONSTANTS         =\r\n  ==============================*/\r\n\r\n  uint256 private increaseRatePercent =  135;\r\n  uint256 private devFeePercent =  5;\r\n  uint256 private currentPotPercent =  5;\r\n  uint256 private nextPotPercent =  5;\r\n  uint256 private exchangeTokenPercent =  10;\r\n  uint256 private previousOwnerPercent =  110;\r\n  uint256 private initialRoundDuration =  12 minutes;\r\n\r\n  /*==============================\r\n  =            STORAGE           =\r\n  ==============================*/\r\n\r\n  /// @dev A mapping from token IDs to the address that owns them.\r\n  mapping (uint256 => address) public tokenIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  // @dev The address of the owner\r\n  address public contractOwner;\r\n\r\n  // @dev Current dev fee\r\n  uint256 public currentDevFee = 0;\r\n\r\n  // @dev The address of the temple contract\r\n  address public templeOfEthaddress = 0x0e21902d93573c18fd0acbadac4a5464e9732f54; // MAINNET\r\n\r\n  /// @dev Interface to exchange\r\n  TempleInterface public templeContract;\r\n\r\n  // @dev paused\r\n  bool public paused = false;\r\n\r\n  uint256 public currentPot =  0;\r\n  uint256 public nextPot =  0;\r\n  uint256 public roundNumber =  0;\r\n  uint256 public roundEndingTime =  0;\r\n  uint256 public lastFlip =  0; // the last token to flip\r\n\r\n  /*==============================\r\n  =            DATATYPES         =\r\n  ==============================*/\r\n\r\n  struct TribalMask {\r\n    string name;\r\n    uint256 basePrice;\r\n    uint256 currentPrice;\r\n    uint256 timePowerMinutes;\r\n  }\r\n\r\n  TribalMask [6] public tribalMasks;\r\n\r\n  constructor () public {\r\n\r\n    contractOwner = msg.sender;\r\n    templeContract = TempleInterface(templeOfEthaddress);\r\n    paused=true;\r\n\r\n    TribalMask memory _Yucatec = TribalMask({\r\n            name: \"Yucatec\",\r\n            basePrice: 0.018 ether,\r\n            currentPrice: 0.018 ether,\r\n            timePowerMinutes: 12 minutes\r\n            });\r\n\r\n    tribalMasks[0] =  _Yucatec;\r\n\r\n    TribalMask memory _Chiapas = TribalMask({\r\n            name: \"Chiapas\",\r\n            basePrice: 0.020 ether,\r\n            currentPrice: 0.020 ether,\r\n            timePowerMinutes: 10 minutes\r\n            });\r\n\r\n    tribalMasks[1] =  _Chiapas;\r\n\r\n    TribalMask memory _Kekchi = TribalMask({\r\n            name: \"Kekchi\",\r\n            basePrice: 0.022 ether,\r\n            currentPrice: 0.022 ether,\r\n            timePowerMinutes: 8 minutes\r\n            });\r\n\r\n    tribalMasks[2] =  _Kekchi;\r\n\r\n    TribalMask memory _Chontal = TribalMask({\r\n            name: \"Chontal\",\r\n            basePrice: 0.024 ether,\r\n            currentPrice: 0.024 ether,\r\n            timePowerMinutes: 6 minutes\r\n            });\r\n\r\n    tribalMasks[3] =  _Chontal;\r\n\r\n    TribalMask memory _Akatek = TribalMask({\r\n            name: \"Akatek\",\r\n            basePrice: 0.028 ether,\r\n            currentPrice: 0.028 ether,\r\n            timePowerMinutes: 4 minutes\r\n            });\r\n\r\n    tribalMasks[4] =  _Akatek;\r\n\r\n    TribalMask memory _Itza = TribalMask({\r\n            name: \"Itza\",\r\n            basePrice: 0.030 ether,\r\n            currentPrice: 0.030 ether,\r\n            timePowerMinutes: 2 minutes\r\n            });\r\n\r\n    tribalMasks[5] =  _Itza;\r\n\r\n    _transfer(0x0, contractOwner, 0);\r\n    _transfer(0x0, contractOwner, 1);\r\n    _transfer(0x0, contractOwner, 2);\r\n    _transfer(0x0, contractOwner, 3);\r\n    _transfer(0x0, contractOwner, 4);\r\n    _transfer(0x0, contractOwner, 5);\r\n\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific token.\r\n  /// @param _tokenId The tokenId of the token of interest.\r\n  function getTribalMask(uint256 _tokenId) public view returns (\r\n    string maskName,\r\n    uint256 basePrice,\r\n    uint256 currentPrice,\r\n    address currentOwner\r\n  ) {\r\n    TribalMask storage mask = tribalMasks[_tokenId];\r\n    maskName = mask.name;\r\n    basePrice = mask.basePrice;\r\n    currentPrice = priceOf(_tokenId);\r\n    currentOwner = tokenIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = tokenIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  function () public payable {\r\n      // allow donations to the pots for seeding etc.\r\n      currentPot = currentPot + SafeMath.div(msg.value,2);\r\n      nextPot = nextPot + SafeMath.div(msg.value,2);\r\n  }\r\n\r\n function start() public payable onlyOwner {\r\n   roundNumber = 1;\r\n   roundEndingTime = now + initialRoundDuration;\r\n   currentPot = currentPot + SafeMath.div(msg.value,2);\r\n   nextPot = nextPot + SafeMath.div(msg.value,2);\r\n   paused = false;\r\n }\r\n\r\n function isRoundEnd() public view returns (bool){\r\n     return (now>roundEndingTime);\r\n }\r\n\r\n function newRound() internal {\r\n   // round is over\r\n   // distribute the winnings\r\n    tokenIndexToOwner[lastFlip].transfer(currentPot);\r\n   // some event\r\n   emit onRoundEnded(roundNumber, lastFlip, tokenIndexToOwner[lastFlip], currentPot);\r\n\r\n   // reset prices\r\n   tribalMasks[0].currentPrice=tribalMasks[0].basePrice;\r\n   tribalMasks[1].currentPrice=tribalMasks[1].basePrice;\r\n   tribalMasks[2].currentPrice=tribalMasks[2].basePrice;\r\n   tribalMasks[3].currentPrice=tribalMasks[3].basePrice;\r\n   tribalMasks[4].currentPrice=tribalMasks[4].basePrice;\r\n   tribalMasks[5].currentPrice=tribalMasks[5].basePrice;\r\n   roundNumber++;\r\n   roundEndingTime = now + initialRoundDuration;\r\n   currentPot = nextPot;\r\n   nextPot = 0;\r\n }\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId , address _referredBy) public payable notContract notPaused easyOnGas  {\r\n\r\n    // check if round ends\r\n    if (now >= roundEndingTime){\r\n        newRound();\r\n    }\r\n\r\n    uint256 currentPrice = tribalMasks[_tokenId].currentPrice;\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= currentPrice);\r\n\r\n    address oldOwner = tokenIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n     // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    uint256 previousOwnerGets = SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),previousOwnerPercent);\r\n    uint256 exchangeTokensAmount = SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),exchangeTokenPercent);\r\n    uint256 devFeeAmount = SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),devFeePercent);\r\n    currentPot = currentPot + SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),currentPotPercent);\r\n    nextPot = nextPot + SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),nextPotPercent);\r\n\r\n    // ovebid should be discouraged but not punished at round end.\r\n    if (msg.value > currentPrice){\r\n      if (now < roundEndingTime){\r\n        nextPot = nextPot + (msg.value - currentPrice);\r\n      }else{\r\n        // hardly fair to punish round ender\r\n        msg.sender.transfer(msg.value - currentPrice);\r\n      }\r\n    }\r\n\r\n    currentDevFee = currentDevFee + devFeeAmount;\r\n\r\n    templeContract.purchaseFor.value(exchangeTokensAmount)(_referredBy, msg.sender);\r\n\r\n    // do the sale\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // set new price\r\n    tribalMasks[_tokenId].currentPrice = SafeMath.mul(SafeMath.div(currentPrice,100),increaseRatePercent);\r\n    // extend the time\r\n    roundEndingTime = roundEndingTime + tribalMasks[_tokenId].timePowerMinutes;\r\n\r\n    lastFlip = _tokenId;\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      if (oldOwner.send(previousOwnerGets)){}\r\n    }\r\n\r\n    emit onTokenSold(_tokenId, currentPrice, oldOwner, newOwner, tribalMasks[_tokenId].name);\r\n\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n      if(isRoundEnd()){\r\n        return  tribalMasks[_tokenId].basePrice;\r\n      }\r\n    return tribalMasks[_tokenId].currentPrice;\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == tokenIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific token to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n\r\n    // no transfer to contract\r\n    uint length;\r\n    assembly { length := extcodesize(_to) }\r\n    require (length == 0);\r\n\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    tokenIndexToOwner[_tokenId] = _to;\r\n\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n    }\r\n\r\n  }\r\n\r\n  /// @dev Not a charity\r\n  function collectDevFees() public onlyOwner {\r\n      if (currentDevFee < address(this).balance){\r\n         uint256 amount = currentDevFee;\r\n         currentDevFee = 0;\r\n         contractOwner.transfer(amount);\r\n      }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTribalMask\",\"outputs\":[{\"name\":\"maskName\",\"type\":\"string\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"currentOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRoundEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastFlip\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectDevFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundEndingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"templeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"templeOfEthaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tribalMasks\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"timePowerMinutes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDevFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"onTokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnings\",\"type\":\"uint256\"}],\"name\":\"onRoundEnded\",\"type\":\"event\"}]","ContractName":"TribalWarfare","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d979a774da5ec287ab7181c6154d47074fc198f5529f4165ba53e150142f422c"}]}