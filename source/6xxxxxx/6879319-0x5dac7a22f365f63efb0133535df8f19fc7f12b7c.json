{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract eralot{\r\n    address public owner;\r\n    uint count=0;\r\n    address [] users;\r\n    address [] tempusers;\r\n    address [] winners;\r\n    uint min_bal=2;\r\n    uint totalbal=0;\r\n    uint ratio = 0;\r\n    uint inc = 0;\r\n    \r\n   struct user_details\r\n   {\r\n       uint amt;\r\n   }\r\n   \r\n   event info(address x,uint y, uint z, string temp);\r\n    mapping(address=>user_details)Details;\r\n    \r\n    constructor() public{\r\n        owner=msg.sender;\r\n    }\r\n     \r\n    function transfer_ownership(address o) public{\r\n        require(msg.sender==owner); \r\n         owner = o;\r\n    }\r\n    \r\n    function checkPlayerExists(address player) public constant returns(bool)\r\n   {\r\n      for(uint i = 0; i < users.length; i++)\r\n\t  {\r\n           if(users[i] == player) return true;\r\n      }\r\n      return false;\r\n    }\r\n    \r\n    function lottery()public payable {\r\n        require(!checkPlayerExists(msg.sender));\r\n        if((msg.value>=2 ether)&&count<1000)\r\n        {\r\n        Details[msg.sender].amt=msg.value;\r\n        address(this).transfer(msg.value);\r\n        users.push(msg.sender);\r\n        tempusers.push(msg.sender);\r\n        count++;\r\n        }\r\n        emit info(msg.sender,msg.value,count,\"successfull\");\r\n    }\r\n    \r\n    function()public payable{}\r\n    \r\n    function check_conbal() public view returns(uint){\r\n        require(msg.sender==owner);\r\n         return address(this).balance; \r\n    }\r\n    function get_profit() public view returns(uint){\r\n        require(msg.sender==owner);\r\n         uint x=address(this).balance/20;\r\n         return x;\r\n    }\r\n    \r\n    function estimate_prize() public view returns(uint){\r\n         uint x=address(this).balance/20;\r\n         uint y=address(this).balance-x;\r\n         return y; \r\n    }\r\n    function pickwinner()public payable{\r\n        require(msg.sender==owner);\r\n         uint ct = getwinners();\r\n         uint temp = ct;\r\n         uint dev = address(this).balance/20;\r\n         owner.transfer(dev);\r\n         while(ct>0){\r\n         inc =  inc + ct;\r\n         ct--;\r\n         }\r\n         uint bal = address(this).balance;\r\n         ratio = bal/inc;\r\n         while(temp>0){\r\n         uint z = temp*ratio;\r\n         uint x=random();\r\n         tempusers[x].transfer(z);\r\n         winners.push(tempusers[x]);\r\n         for (uint i = x; i<tempusers.length-1; i++){\r\n            tempusers[i] = tempusers[i+1];\r\n         }\r\n         delete tempusers[tempusers.length-1];\r\n         tempusers.length--;\r\n         temp = temp-1;\r\n        }\r\n   \r\n   //clear data      \r\n        for ( i=0;i<tempusers.length;i++)\r\n       {\r\n            delete tempusers[i];\r\n         }\r\n         \r\n         for (i=0;i<users.length;i++)\r\n         {\r\n            delete users[i];\r\n           \r\n         }\r\n        count = 0;\r\n      \r\n    }\r\n    function getwinners() internal view returns(uint){\r\n        uint x;\r\n        if(count<20){\r\n            return 1;\r\n        }\r\n        else{\r\n            x=count/10;\r\n           return x; \r\n        }\r\n    } \r\n    function random() internal view returns (uint) {\r\n         uint temp_count = tempusers.length;\r\n         uint temp=temp_count+1;\r\n         return uint(uint256(keccak256(block.timestamp, block.difficulty))%temp);\r\n    }\r\n\r\n    function refund(uint x) public payable {\r\n        require(msg.sender == owner);\r\n         if(x==111){\r\n         for(uint i =0; i< users.length ; i++){\r\n            users[i].transfer(Details[users[i]].amt);\r\n         }\r\n        }\r\n    }\r\n    \r\n    function get_winners() public view returns (address[]){\r\n        require(msg.sender == owner);\r\n         return winners;\r\n    }\r\n    \r\n    function clear_winners(uint x) public {\r\n        require(msg.sender == owner);\r\n         if(x==111){\r\n         for(uint i=0;i<winners.length;i++)\r\n         {\r\n             delete winners[i];\r\n         }\r\n         }\r\n    }\r\n    \r\n  \r\n    function get_details(address x) public view returns(uint){\r\n        require(msg.sender == owner);\r\n         return Details[x].amt;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"get_winners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_profit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"estimate_prize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"checkPlayerExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"check_conbal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickwinner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"clear_winners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"address\"}],\"name\":\"get_details\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lottery\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"o\",\"type\":\"address\"}],\"name\":\"transfer_ownership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"z\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"temp\",\"type\":\"string\"}],\"name\":\"info\",\"type\":\"event\"}]","ContractName":"eralot","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8c4acf7b1ce9b4d8cf2f62d68e82c8f11f7d9609d6259664e88624aa375198f0"}]}