{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract BidInterface {\r\n  struct BidMsg {\r\n    address account;\r\n    uint256 stake;\r\n    uint256 gasPrice;\r\n    bytes votePubKey;\r\n  }\r\n  function bid(address account, uint256 stake, uint256 gasPrice, bytes votePubKey) public;\r\n}\r\n\r\n// SingleVault is used to stake-in for a committee.\r\ncontract SingleVault {\r\n    address owner;\r\n    address operator;\r\n    address cstpc = 0x250;\r\n    address cetpc = 0x251;\r\n\r\n    constructor(address ownerAccount) public {\r\n        owner = ownerAccount;\r\n        operator = msg.sender;\r\n    }\r\n\r\n    // allow deposits\r\n    function() public payable { }\r\n\r\n    modifier isoperator() {\r\n        require(operator == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier isowner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function withdraw(uint amount) external isowner() {\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function reset(address operationalAccount) external isowner() {\r\n      operator = operationalAccount;\r\n    }\r\n\r\n    function bid(address account, uint256 stake, uint256 gasPrice, bytes votePubKey) external isoperator() {\r\n        BidInterface(cstpc).bid(account, stake, gasPrice, votePubKey);\r\n    }\r\n}\r\n\r\ncontract Proxy {\r\n    address public owner;\r\n    address public operator;\r\n    mapping(address=>bool) public children;\r\n    \r\n    address[] public vaults;\r\n    \r\n    constructor(address ownerAccount) public {\r\n        owner = ownerAccount;\r\n        operator = msg.sender;\r\n    }\r\n\r\n    // allow deposits\r\n    function() public payable { }\r\n\r\n    modifier isoperator() {\r\n        require(operator == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier isowner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function withdraw(uint amount) external isowner() {\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function reset(address operationalAccount) external isowner() {\r\n        operator = operationalAccount;\r\n    }\r\n\r\n    function create() external isoperator() {\r\n        SingleVault child = new SingleVault(this);\r\n        children[child] = true;\r\n    }\r\n\r\n    function fund(address child, uint amount) external isoperator() {\r\n        require(children[child]);\r\n        child.transfer(amount);    \r\n    }\r\n\r\n    function refund(address child, uint amount) external isoperator() {\r\n        require(children[child]);\r\n        SingleVault(child).withdraw(amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"child\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operationalAccount\",\"type\":\"address\"}],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"child\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"children\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownerAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Proxy","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000908ad4cab7de80bb3a5144a2c911eb1df95f5a5a","Library":"","SwarmSource":"bzzr://a7f8d3f327cc39ade29f8987dcc6e00d7bb096e3287e89aaaa694852f52eb2bb"}]}