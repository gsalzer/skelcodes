{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\ncontract PreSale is Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) public unconfirmedMap;\r\n    mapping(address => uint256) public confirmedMap;\r\n    mapping(address => address) public holderReferrer;\r\n    mapping(address => uint256) public holdersOrder;\r\n    address[] public holders;\r\n    uint256 public holdersCount;\r\n    mapping(address => uint256) public bonusMap;\r\n    mapping(address => uint256) public topMap;\r\n    uint256 public confirmedAmount;\r\n    uint256 public bonusAmount;\r\n    uint256 lastOf10 = 0;\r\n    uint256 lastOf15 = 0;\r\n    mapping(address => bool) _isConfirmed;\r\n    uint256 public totalSupply;\r\n    uint256 REF_BONUS_PERCENT = 50;\r\n    uint256 MIN_AMOUNT = 9 * 10e15;\r\n    uint256 OPERATIONS_FEE = 10e15;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    //48 hours\r\n    uint256 public confirmTime = 48 * 3600;\r\n    bool internal _isGoalReached = false;\r\n    ERC20 token;\r\n    constructor(\r\n        uint256 _totalSupply,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        ERC20 _token\r\n    ) public {\r\n        require(_startTime >= now);\r\n        require(_startTime < _endTime);\r\n        totalSupply = _totalSupply;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        token = _token;\r\n    }\r\n    modifier pending() {\r\n        require(now >= startTime && now < endTime);\r\n        _;\r\n    }\r\n    modifier isAbleConfirmation() {\r\n        require(now >= startTime && now < endTime + confirmTime);\r\n        _;\r\n    }\r\n    modifier hasClosed() {\r\n        require(now >= endTime + confirmTime);\r\n        _;\r\n    }\r\n    modifier isGoalReached() {\r\n        require(_isGoalReached);\r\n        _;\r\n    }\r\n    modifier onlyConfirmed() {\r\n        require(_isConfirmed[msg.sender]);\r\n        _;\r\n    }\r\n    function() payable public pending {\r\n        _buyTokens(msg.sender, msg.value);\r\n    }\r\n    function buyTokens(address holder) payable public pending {\r\n        _buyTokens(holder, msg.value);\r\n    }\r\n    function buyTokensByReferrer(address holder, address referrer) payable public pending {\r\n        if (_canSetReferrer(holder, referrer)) {\r\n            _setReferrer(holder, referrer);\r\n        }\r\n        uint256 amount = msg.value - OPERATIONS_FEE;\r\n        holder.transfer(OPERATIONS_FEE);\r\n        _buyTokens(holder, amount);\r\n    }\r\n    function _buyTokens(address holder, uint256 amount) private {\r\n        require(amount >= MIN_AMOUNT);\r\n        if (_isConfirmed[holder]) {\r\n            confirmedMap[holder] = confirmedMap[holder].add(amount);\r\n            confirmedAmount = confirmedAmount.add(amount);\r\n        } else {\r\n            unconfirmedMap[holder] = unconfirmedMap[holder].add(amount);\r\n        }\r\n        if (holdersOrder[holder] == 0) {\r\n            holders.push(holder);\r\n            holdersOrder[holder] = holders.length;\r\n            holdersCount++;\r\n        }\r\n        _addBonus(holder, amount);\r\n    }\r\n    function _addBonus(address holder, uint256 amount) internal {\r\n        _addBonusOfTop(holder, amount);\r\n        _topBonus();\r\n        _addBonusOfReferrer(holder, amount);\r\n    }\r\n    function _addBonusOfTop(address holder, uint256 amount) internal {\r\n        uint256 bonusOf = 0;\r\n        if (holdersOrder[holder] <= holdersCount.div(10)) {\r\n            bonusOf = amount.div(10);\r\n        } else if (holdersOrder[holder] <= holdersCount.mul(15).div(100)) {\r\n            bonusOf = amount.mul(5).div(100);\r\n        }\r\n        if (bonusOf == 0) {\r\n            return;\r\n        }\r\n        topMap[holder] = topMap[holder].add(bonusOf);\r\n        if (_isConfirmed[holder]) {\r\n            bonusAmount = bonusAmount.add(bonusOf);\r\n        }\r\n    }\r\n    function _topBonus() internal {\r\n        uint256 bonusFor = 0;\r\n        address holder;\r\n        uint256 currentAmount;\r\n        if (lastOf10 < holdersCount.div(10)) {\r\n            holder = holders[lastOf10++];\r\n            currentAmount = _isConfirmed[holder] ? confirmedMap[holder] : unconfirmedMap[holder];\r\n            bonusFor = currentAmount.div(10);\r\n        } else if (lastOf15 < holdersCount.mul(15).div(100)) {\r\n            holder = holders[lastOf15++];\r\n            currentAmount = _isConfirmed[holder] ? confirmedMap[holder] : unconfirmedMap[holder];\r\n            bonusFor = currentAmount.div(20);\r\n        } else {\r\n            return;\r\n        }\r\n        if (bonusFor <= topMap[holder]) {\r\n            return;\r\n        }\r\n        if (_isConfirmed[holder]) {\r\n            uint256 diff = bonusFor - topMap[holder];\r\n            bonusAmount = bonusAmount.add(diff);\r\n        }\r\n        topMap[holder] = bonusFor;\r\n    }\r\n    function _addBonusOfReferrer(address holder, uint256 amount) internal {\r\n        if (holderReferrer[holder] == 0x0) {\r\n            return;\r\n        }\r\n        address referrer = holderReferrer[holder];\r\n        uint256 bonus = amount.div(2);\r\n        bonusMap[holder] = bonusMap[holder].add(bonus);\r\n        bonusMap[referrer] = bonusMap[referrer].add(bonus);\r\n        if (_isConfirmed[holder]) {\r\n            bonusAmount = bonusAmount.add(bonus);\r\n        }\r\n        if (_isConfirmed[referrer]) {\r\n            bonusAmount = bonusAmount.add(bonus);\r\n        }\r\n    }\r\n    function _canSetReferrer(address holder, address referrer) view private returns (bool) {\r\n        return holderReferrer[holder] == 0x0\r\n        && holder != referrer\r\n        && referrer != 0x0\r\n        && holderReferrer[referrer] != holder;\r\n    }\r\n    function _setReferrer(address holder, address referrer) private {\r\n        holderReferrer[holder] = referrer;\r\n        if (_isConfirmed[holder]) {\r\n            _addBonusOfReferrer(holder, confirmedMap[holder]);\r\n        } else {\r\n            _addBonusOfReferrer(holder, unconfirmedMap[holder]);\r\n        }\r\n    }\r\n    function setReferrer(address referrer) public pending {\r\n        require(_canSetReferrer(msg.sender, referrer));\r\n        _setReferrer(msg.sender, referrer);\r\n    }\r\n    function _confirm(address holder) private {\r\n        confirmedMap[holder] = unconfirmedMap[holder];\r\n        unconfirmedMap[holder] = 0;\r\n        confirmedAmount = confirmedAmount.add(confirmedMap[holder]);\r\n        bonusAmount = bonusAmount.add(bonusMap[holder]).add(topMap[holder]);\r\n        _isConfirmed[holder] = true;\r\n    }\r\n    function isConfirmed(address holder) public view returns (bool) {\r\n        return _isConfirmed[holder];\r\n    }\r\n    function getTokens() public hasClosed isGoalReached onlyConfirmed returns (uint256) {\r\n        uint256 tokens = calculateTokens(msg.sender);\r\n        require(tokens > 0);\r\n        confirmedMap[msg.sender] = 0;\r\n        bonusMap[msg.sender] = 0;\r\n        topMap[msg.sender] = 0;\r\n        require(token.transfer(msg.sender, tokens));\r\n    }\r\n    function getRefund() public hasClosed {\r\n        address holder = msg.sender;\r\n        uint256 funds = 0;\r\n        if (_isConfirmed[holder]) {\r\n            require(_isGoalReached == false);\r\n            funds = confirmedMap[holder];\r\n            require(funds > 0);\r\n            confirmedMap[holder] = 0;\r\n        } else {\r\n            funds = unconfirmedMap[holder];\r\n            require(funds > 0);\r\n            unconfirmedMap[holder] = 0;\r\n        }\r\n        holder.transfer(funds);\r\n    }\r\n    function calculateTokens(address holder) public view returns (uint256) {\r\n        return totalSupply.mul(calculateHolderPiece(holder)).div(calculatePie());\r\n    }\r\n    function calculatePie() public view returns (uint256) {\r\n        return confirmedAmount.add(bonusAmount);\r\n    }\r\n    function getCurrentPrice() public view returns (uint256) {\r\n        return calculatePie().div(totalSupply);\r\n    }\r\n    function calculateHolderPiece(address holder) public view returns (uint256){\r\n        return confirmedMap[holder].add(bonusMap[holder]).add(topMap[holder]);\r\n    }\r\n    //***** admin ***\r\n    function confirm(address holder) public isAbleConfirmation onlyOwner {\r\n        require(!_isConfirmed[holder]);\r\n        _confirm(holder);\r\n    }\r\n    function confirmBatch(address[] _holders) public isAbleConfirmation onlyOwner {\r\n        for (uint i = 0; i < _holders.length; i++) {\r\n            if (!_isConfirmed[_holders[i]]) {\r\n                _confirm(_holders[i]);\r\n            }\r\n        }\r\n    }\r\n    function setReached(bool _isIt) public onlyOwner isAbleConfirmation {\r\n        _isGoalReached = _isIt;\r\n        if (!_isIt) {\r\n            token.transfer(owner, totalSupply);\r\n        }\r\n    }\r\n    function getRaised() public hasClosed isGoalReached onlyOwner {\r\n        owner.transfer(confirmedAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmedMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculatePie\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyTokensByReferrer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isIt\",\"type\":\"bool\"}],\"name\":\"setReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"calculateHolderPiece\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdersOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRaised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unconfirmedMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"topMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"confirm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"confirmBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PreSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000052b7d7330124f733400000000000000000000000000000000000000000000000000000000000005b6613d0000000000000000000000000000000000000000000000000000000005b77b5e0000000000000000000000000adedc4897d8f51cb374b5eb9c959e636e56b6cca","Library":"","SwarmSource":"bzzr://3aa3e380e2dd8b5059bfd516db4dabcc83903317711fc5b54ed84dfbc5cf769d"}]}