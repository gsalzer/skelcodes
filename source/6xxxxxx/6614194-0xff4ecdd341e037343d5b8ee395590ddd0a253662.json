{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract TwoHundredPercent {\r\n    mapping(address => uint) public balance;\r\n    mapping(address => uint) public time;\r\n    mapping(address => uint) public percentWithdraw;\r\n    mapping(address => uint) public allPercentWithdraw;\r\n}\r\n\r\ncontract TwoHundredPercentEstimator {\r\n    using SafeMath for uint;\r\n    \r\n    TwoHundredPercent ponzi = TwoHundredPercent(0xa3296436f6e85a7e8bfc485e64f05e35c9047c92);\r\n\r\n    uint public stepTime = 1 hours;\r\n    uint public countOfInvestors = 0;\r\n    address public ownerAddress = 0xC24ddFFaaCEB94f48D2771FE47B85b49818204Be;\r\n    uint projectPercent = 10;\r\n\r\n    function percentRate() public view returns(uint) {\r\n        uint contractBalance = address(ponzi).balance;\r\n\r\n        if (contractBalance < 1000 ether) {\r\n            return 60;\r\n        }\r\n        if (contractBalance < 2500 ether) {\r\n            return 72;\r\n        }\r\n        if (contractBalance < 5000 ether) {\r\n            return 84;\r\n        }\r\n        return 90;\r\n    }\r\n\r\n    function payoutAmount(address addr) public view returns(int256) {\r\n        uint256 percent = percentRate();\r\n        uint256 rate = ponzi.balance(addr).mul(percent).div(1000);\r\n        int256 withdrawalAmount = int256(rate.mul(now.sub(ponzi.time(addr))).div(24).div(stepTime)) - int256(ponzi.percentWithdraw(addr));\r\n\r\n        return withdrawalAmount;\r\n    }\r\n\r\n    function estimateSecondsUntilPercents(address addr) public view returns(uint256) {\r\n        uint256 percent = percentRate();\r\n        uint256 dailyIncrement = ponzi.balance(addr).mul(percent).div(1000);\r\n        int256 amount = payoutAmount(addr);\r\n        if (amount > 0) {\r\n            return 0;\r\n        }\r\n        \r\n        return uint256(-amount) * 60 * 60 * 24 / dailyIncrement;\r\n    }\r\n    \r\n    function estimateMinutesUntilPercents(address addr) public view returns(uint256) {\r\n       return estimateSecondsUntilPercents(addr)/60;\r\n    }\r\n    \r\n    function estimateHoursUntilPercents(address addr) public view returns(uint256) {\r\n       return estimateMinutesUntilPercents(addr)/60;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"estimateHoursUntilPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"estimateSecondsUntilPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"estimateMinutesUntilPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TwoHundredPercentEstimator","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://544345ef2325326b0e26b8a43ba6ce1adcea25b9f058eacdadfa3f52b649dae8"}]}