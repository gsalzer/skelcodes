{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 _a, uint256 _b) pure internal returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        assert(c >= _a && c >= _b);\r\n        \r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) pure internal returns (uint256) {\r\n        assert(_b <= _a);\r\n\r\n        return _a - _b;\r\n    }\r\n\r\n    function mul(uint256 _a, uint256 _b) pure internal returns (uint256) {\r\n        uint256 c = _a * _b;\r\n        assert(_a == 0 || c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) pure internal returns (uint256) {\r\n        assert(_b > 0);\r\n\r\n        return _a / _b;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool _success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success);\r\n    function approve(address _spender, uint256 _value) public returns (bool _success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StrictToken is Token {\r\n    bool public strict = true;\r\n    mapping (address => uint256) public rate;\r\n\r\n    function getRate(address _address) public view returns (uint256);\r\n    function getStrict() public pure returns (bool);\r\n}\r\n\r\ncontract TrexDexMain {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    address public feeAddress;\r\n    mapping (address => mapping (address => uint256)) public makeFees;\r\n    mapping (address => mapping (address => uint256)) public takeFees;\r\n    mapping (address => uint256) public depositFees;\r\n    mapping (address => uint256) public withdrawFees;\r\n    mapping (address => bool) public strictTokens;\r\n    mapping (address => bool) public tokenDeposits;\r\n    mapping (address => bool) public tokenWithdraws;\r\n    mapping (address => mapping (address => bool)) public tokenTrades;\r\n    mapping (address => mapping (address => uint256)) public deposits;\r\n    mapping (address => mapping (bytes32 => bool)) public orders;\r\n    mapping (address => mapping (bytes32 => uint256)) public orderFills;\r\n\r\n    event Order(address buyTokenAddress, uint256 buyAmount, address sellTokenAddress, uint256 sellAmount, address takeAddress, address baseTokenAddress, uint256 expireBlock, uint256 nonce, address makeAddress);\r\n    event Cancel(bytes32 orderHash);\r\n    event Trade(bytes32 orderHash, uint256 buyAmount, uint256 sellAmount, uint256 takeFee, uint256 makeFee, address takeAddress);\r\n    event Deposit(address tokenAddress, address userAddress, uint256 amount, uint256 fee, uint256 balance);\r\n    event Withdraw(address tokenAddress, address userAddress, uint256 amount, uint256 fee, uint256 balance);\r\n    event TransferIn(address tokenAddress, address userAddress, uint256 amount, uint256 balance);\r\n    event TransferOut(address tokenAddress, address userAddress, uint256 amount, uint256 balance);\r\n\r\n    modifier isOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier hasPayloadSize(uint256 size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }    \r\n\r\n    constructor(address _feeAddress) public {\r\n        owner = msg.sender;\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function() public {\r\n        revert();\r\n    }\r\n\r\n    function transfer(address _tokenAddress, address _userAddress, uint256 _amount) public isOwner {\r\n        require (deposits[_tokenAddress][msg.sender] >= _amount);\r\n        deposits[_tokenAddress][_userAddress] = deposits[_tokenAddress][_userAddress].add(_amount);\r\n        deposits[_tokenAddress][msg.sender] = deposits[_tokenAddress][msg.sender].sub(_amount);\r\n\r\n        emit TransferIn(_tokenAddress, _userAddress, _amount, deposits[_tokenAddress][_userAddress]);\r\n        emit TransferOut(_tokenAddress, msg.sender, _amount, deposits[_tokenAddress][msg.sender]);\r\n    }\r\n\r\n    function setOwner(address _owner) public isOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) public isOwner {\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function setStrictToken(address _tokenAddress, bool _isStrict) public isOwner {\r\n        strictTokens[_tokenAddress] = _isStrict;\r\n    }\r\n\r\n    function setTokenTransfers(address[] _tokenAddress, bool[] _depositEnabled, bool[] _withdrawEnabled, uint256[] _depositFee, uint256[] _withdrawFee) public isOwner {\r\n        for (uint256 i = 0; i < _tokenAddress.length; i++) {\r\n            setTokenTransfer(_tokenAddress[i], _depositEnabled[i], _withdrawEnabled[i], _depositFee[i], _withdrawFee[i]);\r\n        }\r\n    }\r\n\r\n    function setTokenTransfer(address _tokenAddress, bool _depositEnabled, bool _withdrawEnabled, uint256 _depositFee, uint256 _withdrawFee) public isOwner {\r\n        tokenDeposits[_tokenAddress] = _depositEnabled;\r\n        tokenWithdraws[_tokenAddress] = _withdrawEnabled;\r\n        depositFees[_tokenAddress] = _depositFee;\r\n        withdrawFees[_tokenAddress] = _withdrawFee;\r\n    }\r\n\r\n    function setTokenTrades(address[] _tokenAddress, address[] _baseTokenAddress, bool[] _tradeEnabled, uint256[] _makeFee, uint256[] _takeFee) public isOwner {\r\n        for (uint256 i = 0; i < _tokenAddress.length; i++) {\r\n            setTokenTrade(_tokenAddress[i], _baseTokenAddress[i], _tradeEnabled[i], _makeFee[i], _takeFee[i]);\r\n        }\r\n    }\r\n\r\n    function setTokenTrade(address _tokenAddress, address _baseTokenAddress, bool _tradeEnabled, uint256 _makeFee, uint256 _takeFee) public isOwner {\r\n        tokenTrades[_baseTokenAddress][_tokenAddress] = _tradeEnabled;\r\n        makeFees[_baseTokenAddress][_tokenAddress] = _makeFee;\r\n        takeFees[_baseTokenAddress][_tokenAddress] = _takeFee;\r\n    }\r\n\r\n    function deposit() payable public {\r\n        uint256 fee = _depositToken(0x0, msg.sender, msg.value);\r\n\r\n        emit Deposit(0x0, msg.sender, msg.value, fee, deposits[0x0][msg.sender]);\r\n    }\r\n\r\n    function depositToken(address _tokenAddress, uint256 _amount) public hasPayloadSize(2 * 32) {\r\n        require (_tokenAddress != 0x0 && tokenDeposits[_tokenAddress]);\r\n        require (Token(_tokenAddress).transferFrom(msg.sender, this, _amount));\r\n        uint256 fee = _depositToken(_tokenAddress, msg.sender, _amount);\r\n\r\n        emit Deposit(_tokenAddress, msg.sender, _amount, fee, deposits[_tokenAddress][msg.sender]);\r\n    }\r\n\r\n    function _depositToken(address _tokenAddress, address _userAddress, uint256 _amount) private returns (uint256 fee) {\r\n        fee = _amount.mul(depositFees[_tokenAddress]).div(1 ether);\r\n        deposits[_tokenAddress][_userAddress] = deposits[_tokenAddress][_userAddress].add(_amount.sub(fee));\r\n        deposits[_tokenAddress][feeAddress] = deposits[_tokenAddress][feeAddress].add(fee);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public hasPayloadSize(32) {\r\n        require (deposits[0x0][msg.sender] >= _amount);\r\n        uint256 fee = _withdrawToken(0x0, msg.sender, _amount);\r\n        msg.sender.transfer(_amount - fee);\r\n\r\n        emit Withdraw(0x0, msg.sender, _amount, fee, deposits[0x0][msg.sender]);\r\n    }\r\n\r\n    function withdrawToken(address _tokenAddress, uint256 _amount) public hasPayloadSize(2 * 32) {\r\n        require (_tokenAddress != 0x0 && tokenWithdraws[_tokenAddress]);\r\n        require (deposits[_tokenAddress][msg.sender] >= _amount);\r\n        uint256 fee = _withdrawToken(_tokenAddress, msg.sender, _amount);\r\n        if (!Token(_tokenAddress).transfer(msg.sender, _amount - fee)) {\r\n            revert();\r\n        }\r\n\r\n        emit Withdraw(_tokenAddress, msg.sender, _amount, fee, deposits[_tokenAddress][msg.sender]);\r\n    }\r\n\r\n    function _withdrawToken(address _tokenAddress, address _userAddress, uint256 _amount) private returns (uint256 fee) {\r\n        fee = _amount.mul(withdrawFees[_tokenAddress]).div(1 ether);\r\n        deposits[_tokenAddress][_userAddress] = deposits[_tokenAddress][_userAddress].sub(_amount);\r\n        deposits[_tokenAddress][feeAddress] = deposits[_tokenAddress][feeAddress].add(fee);\r\n    }\r\n\r\n    function balanceOf(address _tokenAddress, address _userAddress) view public returns (uint256) {\r\n        return deposits[_tokenAddress][_userAddress];\r\n    }\r\n\r\n    function order(address _buyTokenAddress, uint256 _buyAmount, address _sellTokenAddress, uint256 _sellAmount, address _takeAddress, address _baseTokenAddress, uint256 _expireBlock, uint256 _nonce) public hasPayloadSize(8 * 32) {\r\n        require (_checkTrade(_buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _baseTokenAddress));\r\n        bytes32 hash = _buildHash(_buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _takeAddress, _baseTokenAddress, _expireBlock, _nonce);\r\n        require (!orders[msg.sender][hash]);\r\n        orders[msg.sender][hash] = true;\r\n\r\n        emit Order(_buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _takeAddress, _baseTokenAddress, _expireBlock, _nonce, msg.sender);\r\n    }\r\n\r\n    function tradeMulti(address[] _buyTokenAddress, uint256[] _buyAmount, address[] _sellTokenAddress, uint256[] _sellAmount, address[] _takeAddress, address[] _baseTokenAddress, uint256[] _expireBlock, uint256[] _nonce, address[] _makeAddress, uint256[] _amount, uint8[] _v, bytes32[] _r, bytes32[] _s) public {\r\n        for (uint256 i = 0; i < _buyTokenAddress.length; i++) {\r\n            trade(_buyTokenAddress[i], _buyAmount[i], _sellTokenAddress[i], _sellAmount[i], _takeAddress[i], _baseTokenAddress[i], _expireBlock[i], _nonce[i], _makeAddress[i], _amount[i], _v[i], _r[i], _s[i]);\r\n        }\r\n    }\r\n\r\n    function trade(address _buyTokenAddress, uint256 _buyAmount, address _sellTokenAddress, uint256 _sellAmount, address _takeAddress, address _baseTokenAddress, uint256 _expireBlock, uint256 _nonce, address _makeAddress, uint256 _amount, uint8 _v, bytes32 _r, bytes32 _s) public {\r\n        assert(msg.data.length >= 13 * 32 + 4);\r\n        require (_checkTrade(_buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _baseTokenAddress));\r\n        require (_takeAddress == 0x0 || msg.sender == _takeAddress);\r\n        bytes32 hash = _buildHash(_buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _takeAddress, _baseTokenAddress, _expireBlock, _nonce);\r\n        require (_checkHash(hash, _makeAddress, _v, _r, _s));\r\n        require (block.number <= _expireBlock);\r\n        require (orderFills[_makeAddress][hash] + _amount <= _buyAmount);\r\n        _trade(hash, _buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _baseTokenAddress, _makeAddress, _amount);\r\n    }\r\n\r\n    function _trade(bytes32 hash, address _buyTokenAddress, uint256 _buyAmount, address _sellTokenAddress, uint256 _sellAmount, address _baseTokenAddress, address _makeAddress, uint256 _amount) private {\r\n        address tokenAddress = (_baseTokenAddress == _buyTokenAddress ? _sellTokenAddress : _buyTokenAddress);\r\n        uint256 makeFee = _amount.mul(makeFees[_baseTokenAddress][tokenAddress]).div(1 ether);\r\n        uint256 takeFee = _amount.mul(takeFees[_baseTokenAddress][tokenAddress]).div(1 ether);\r\n        if (_buyAmount == 0) {\r\n            _buyAmount = _calcStrictAmount(_sellTokenAddress, _sellAmount, _buyTokenAddress);\r\n        }\r\n        else if (_sellAmount == 0) {\r\n            _sellAmount = _calcStrictAmount(_buyTokenAddress, _buyAmount, _sellTokenAddress);\r\n        }\r\n        uint256 tradeAmount = _sellAmount.mul(_amount).div(_buyAmount);\r\n        deposits[_buyTokenAddress][msg.sender] = deposits[_buyTokenAddress][msg.sender].sub(_amount.add(takeFee));\r\n        deposits[_buyTokenAddress][_makeAddress] = deposits[_buyTokenAddress][_makeAddress].add(_amount.sub(makeFee));\r\n        deposits[_buyTokenAddress][feeAddress] = deposits[_buyTokenAddress][feeAddress].add(makeFee.add(takeFee));\r\n        deposits[_sellTokenAddress][_makeAddress] = deposits[_sellTokenAddress][_makeAddress].sub(tradeAmount);\r\n        deposits[_sellTokenAddress][msg.sender] = deposits[_sellTokenAddress][msg.sender].add(tradeAmount);\r\n        orderFills[_makeAddress][hash] = orderFills[_makeAddress][hash].add(_amount);\r\n\r\n        emit Trade(hash, _amount, tradeAmount, takeFee, makeFee, msg.sender);\r\n    }\r\n\r\n    function _calcStrictAmount(address _tokenAddress, uint256 _amount, address _strictTokenAddress) private view returns (uint256) {\r\n        uint256 rate = StrictToken(_strictTokenAddress).getRate(_tokenAddress);\r\n        require(rate > 0);\r\n\r\n        return rate.mul(_amount).div(1 ether);\r\n    }\r\n\r\n    function _checkTrade(address _buyTokenAddress, uint256 _buyAmount, address _sellTokenAddress, uint256 _sellAmount, address _baseTokenAddress) private view returns (bool) {\r\n        if (!_checkTradeAddress(_buyTokenAddress, _sellTokenAddress, _baseTokenAddress)) {\r\n            return false;\r\n        }\r\n        else if (_buyAmount != 0 && strictTokens[_buyTokenAddress]) {\r\n            return false;\r\n        }\r\n        else if (_sellAmount != 0 && strictTokens[_sellTokenAddress]) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _checkTradeAddress(address _buyTokenAddress, address _sellTokenAddress, address _baseTokenAddress) private view returns (bool) {\r\n        return _baseTokenAddress == _buyTokenAddress ? tokenTrades[_buyTokenAddress][_sellTokenAddress] : tokenTrades[_sellTokenAddress][_buyTokenAddress];\r\n    }\r\n\r\n    function testTrade(address _buyTokenAddress, uint256 _buyAmount, address _sellTokenAddress, uint256 _sellAmount, address _takeAddress, address _baseTokenAddress, uint256 _expireBlock, uint256 _nonce, address _makeAddress, uint256 _amount, uint8 _v, bytes32 _r, bytes32 _s) constant public returns (bool) {\r\n        if (!_checkTrade(_buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _baseTokenAddress)) {\r\n            return false;\r\n        }\r\n        else if (!(_takeAddress == 0x0 || msg.sender == _takeAddress)) {\r\n            return false;\r\n        }\r\n        else if (!_hasDeposit(_buyTokenAddress, _takeAddress, _amount)) {\r\n            return false;\r\n        }\r\n        else if (availableVolume(_buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _takeAddress, _baseTokenAddress, _expireBlock, _nonce, _makeAddress, _v, _r, _s) > _amount) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    function _hasDeposit(address _buyTokenAddress, address _userAddress, uint256 _amount) private view returns (bool) {\r\n        return deposits[_buyTokenAddress][_userAddress] >= _amount;\r\n    }\r\n\r\n    function availableVolume(address _buyTokenAddress, uint256 _buyAmount, address _sellTokenAddress, uint256 _sellAmount, address _takeAddress, address _baseTokenAddress, uint256 _expireBlock, uint256 _nonce, address _makeAddress, uint8 _v, bytes32 _r, bytes32 _s) constant public returns (uint256) {\r\n        bytes32 hash = _buildHash(_buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _takeAddress, _baseTokenAddress, _expireBlock, _nonce);\r\n        if (!_checkHash(hash, _makeAddress, _v, _r, _s)) {\r\n            return 0;\r\n        }\r\n\r\n        return _availableVolume(hash, _buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _makeAddress);\r\n    }\r\n\r\n    function _availableVolume(bytes32 hash, address _buyTokenAddress, uint256 _buyAmount, address _sellTokenAddress, uint256 _sellAmount, address _makeAddress) private view returns (uint256) {\r\n        if (_buyAmount == 0) {\r\n            _buyAmount = _calcStrictAmount(_sellTokenAddress, _sellAmount, _buyTokenAddress);\r\n        }\r\n        else if (_sellAmount == 0) {\r\n            _sellAmount = _calcStrictAmount(_buyTokenAddress, _buyAmount, _sellTokenAddress);\r\n        }\r\n        uint256 available1 = _buyAmount.sub(orderFills[_makeAddress][hash]);\r\n        uint256 available2 = deposits[_sellTokenAddress][_makeAddress].mul(_buyAmount).div(_sellAmount);\r\n\r\n        return available1 < available2 ? available1 : available2;\r\n    }\r\n\r\n    function amountFilled(address _buyTokenAddress, uint256 _buyAmount, address _sellTokenAddress, uint256 _sellAmount, address _takeAddress, address _baseTokenAddress, uint256 _expireBlock, uint256 _nonce, address _makeAddress) constant public returns (uint256) {\r\n        bytes32 hash = _buildHash(_buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _takeAddress, _baseTokenAddress, _expireBlock, _nonce);\r\n\r\n        return orderFills[_makeAddress][hash];\r\n    }\r\n\r\n    function cancelOrder(address _buyTokenAddress, uint256 _buyAmount, address _sellTokenAddress, uint256 _sellAmount, address _takeAddress, address _baseTokenAddress, uint256 _expireBlock, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) public hasPayloadSize(11 * 32) {\r\n        bytes32 hash = _buildHash(_buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _takeAddress, _baseTokenAddress, _expireBlock, _nonce);\r\n        require (_checkHash(hash, msg.sender, _v, _r, _s));\r\n        orderFills[msg.sender][hash] = _buyAmount;\r\n\r\n        emit Cancel(hash);\r\n    }\r\n\r\n    function _buildHash(address _buyTokenAddress, uint256 _buyAmount, address _sellTokenAddress, uint256 _sellAmount, address _takeAddress, address _baseTokenAddress, uint256 _expireBlock, uint256 _nonce) private view returns (bytes32) {\r\n        return sha256(abi.encodePacked(this, _buyTokenAddress, _buyAmount, _sellTokenAddress, _sellAmount, _takeAddress, _baseTokenAddress, _expireBlock, _nonce));\r\n    }\r\n\r\n    function _checkHash(bytes32 _hash, address _makeAddress, uint8 _v, bytes32 _r, bytes32 _s) private view returns (bool) {\r\n        return (orders[_makeAddress][_hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)), _v, _r, _s) == _makeAddress);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"strictTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"makeFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buyTokenAddress\",\"type\":\"address\"},{\"name\":\"_buyAmount\",\"type\":\"uint256\"},{\"name\":\"_sellTokenAddress\",\"type\":\"address\"},{\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"name\":\"_takeAddress\",\"type\":\"address\"},{\"name\":\"_baseTokenAddress\",\"type\":\"address\"},{\"name\":\"_expireBlock\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_makeAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"testTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buyTokenAddress\",\"type\":\"address\"},{\"name\":\"_buyAmount\",\"type\":\"uint256\"},{\"name\":\"_sellTokenAddress\",\"type\":\"address\"},{\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"name\":\"_takeAddress\",\"type\":\"address\"},{\"name\":\"_baseTokenAddress\",\"type\":\"address\"},{\"name\":\"_expireBlock\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_makeAddress\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"availableVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyTokenAddress\",\"type\":\"address[]\"},{\"name\":\"_buyAmount\",\"type\":\"uint256[]\"},{\"name\":\"_sellTokenAddress\",\"type\":\"address[]\"},{\"name\":\"_sellAmount\",\"type\":\"uint256[]\"},{\"name\":\"_takeAddress\",\"type\":\"address[]\"},{\"name\":\"_baseTokenAddress\",\"type\":\"address[]\"},{\"name\":\"_expireBlock\",\"type\":\"uint256[]\"},{\"name\":\"_nonce\",\"type\":\"uint256[]\"},{\"name\":\"_makeAddress\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"name\":\"_v\",\"type\":\"uint8[]\"},{\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"name\":\"_s\",\"type\":\"bytes32[]\"}],\"name\":\"tradeMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address[]\"},{\"name\":\"_baseTokenAddress\",\"type\":\"address[]\"},{\"name\":\"_tradeEnabled\",\"type\":\"bool[]\"},{\"name\":\"_makeFee\",\"type\":\"uint256[]\"},{\"name\":\"_takeFee\",\"type\":\"uint256[]\"}],\"name\":\"setTokenTrades\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_baseTokenAddress\",\"type\":\"address\"},{\"name\":\"_tradeEnabled\",\"type\":\"bool\"},{\"name\":\"_makeFee\",\"type\":\"uint256\"},{\"name\":\"_takeFee\",\"type\":\"uint256\"}],\"name\":\"setTokenTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTrades\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyTokenAddress\",\"type\":\"address\"},{\"name\":\"_buyAmount\",\"type\":\"uint256\"},{\"name\":\"_sellTokenAddress\",\"type\":\"address\"},{\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"name\":\"_takeAddress\",\"type\":\"address\"},{\"name\":\"_baseTokenAddress\",\"type\":\"address\"},{\"name\":\"_expireBlock\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"order\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address[]\"},{\"name\":\"_depositEnabled\",\"type\":\"bool[]\"},{\"name\":\"_withdrawEnabled\",\"type\":\"bool[]\"},{\"name\":\"_depositFee\",\"type\":\"uint256[]\"},{\"name\":\"_withdrawFee\",\"type\":\"uint256[]\"}],\"name\":\"setTokenTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_isStrict\",\"type\":\"bool\"}],\"name\":\"setStrictToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_depositEnabled\",\"type\":\"bool\"},{\"name\":\"_withdrawEnabled\",\"type\":\"bool\"},{\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyTokenAddress\",\"type\":\"address\"},{\"name\":\"_buyAmount\",\"type\":\"uint256\"},{\"name\":\"_sellTokenAddress\",\"type\":\"address\"},{\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"name\":\"_takeAddress\",\"type\":\"address\"},{\"name\":\"_baseTokenAddress\",\"type\":\"address\"},{\"name\":\"_expireBlock\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWithdraws\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buyTokenAddress\",\"type\":\"address\"},{\"name\":\"_buyAmount\",\"type\":\"uint256\"},{\"name\":\"_sellTokenAddress\",\"type\":\"address\"},{\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"name\":\"_takeAddress\",\"type\":\"address\"},{\"name\":\"_baseTokenAddress\",\"type\":\"address\"},{\"name\":\"_expireBlock\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_makeAddress\",\"type\":\"address\"}],\"name\":\"amountFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyTokenAddress\",\"type\":\"address\"},{\"name\":\"_buyAmount\",\"type\":\"uint256\"},{\"name\":\"_sellTokenAddress\",\"type\":\"address\"},{\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"name\":\"_takeAddress\",\"type\":\"address\"},{\"name\":\"_baseTokenAddress\",\"type\":\"address\"},{\"name\":\"_expireBlock\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_makeAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_feeAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"takeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"baseTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expireBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"makeAddress\",\"type\":\"address\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"takeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"makeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"takeAddress\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TransferIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TransferOut\",\"type\":\"event\"}]","ContractName":"TrexDexMain","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000004af3b747614879ec1db4e80c941dc8dc40839c4","Library":"","SwarmSource":"bzzr://67923ad6243986a3072344afa2767e8b43b6799c98aec79cec55ece40a2e612e"}]}