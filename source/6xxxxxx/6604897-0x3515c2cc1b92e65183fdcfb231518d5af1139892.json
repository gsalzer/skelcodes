{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/***\r\n *     __   __   ___      ___    ___   \r\n *     \\ \\ / /  / _ \\    | _ \\  / _ \\  \r\n *      \\ V /  | (_) |   |  _/ | (_) | \r\n *      _|_|_   \\___/   _|_|_   \\___/  \r\n *    _| \"\"\" |_|\"\"\"\"\"|_| \"\"\" |_|\"\"\"\"\"| \r\n *    \"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-' \r\n *   \r\n *\r\n * https://easyinvest10.app\r\n * \r\n * YOPO Lucky Investment Contract\r\n *  - GAIN 3.3%-10% PER 24 HOURS! LUCKY PEOPLE GAINS LUCKY RATE!\r\n *  - Different investors gain different division rates (see who the lucky guy is)\r\n *  - 10% chance to win extra 10% ETH while investing 0.5 ETH or higher\r\n *  - 1% chance to win double ETH while investing 0.1 ETH or higher\r\n *\r\n * How to use:\r\n *  1. Send any amount of ether to make an investment\r\n *  2a. Claim your profit by sending 0 ether transaction  (1 time per hour)\r\n *  OR\r\n *  2b. Send more ether to reinvest AND get your profit at the same time\r\n *  3. If you earn more than 200%, you can withdraw only one finish time\r\n *\r\n * RECOMMENDED GAS LIMIT: 140000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n *\r\n * Contract reviewed and approved by pros!\r\n *\r\n */\r\n\r\ncontract YopoInvest {\r\n\r\n    using SafeMath for uint;\r\n    mapping(address => uint) public rates;\r\n    mapping(address => uint) public balance;\r\n    mapping(address => uint) public time;\r\n    mapping(address => uint) public percentWithdraw;\r\n    mapping(address => uint) public allPercentWithdraw;\r\n    uint public stepTime = 1 hours;\r\n    uint public countOfInvestors = 0;\r\n    address public ownerAddress = 0xe79b84906aBb7ddE4CC81bD27BC89A7E97366C0C;\r\n    \r\n    uint public projectPercent = 10;\r\n    uint public floatRate = 50;\r\n    uint public startTime = now;\r\n    uint public lastTime = now;\r\n\r\n\tstruct Bet {\r\n\t\taddress addr;\r\n\t\tuint256 eth;\r\n\t\tuint256 rate;\r\n\t\tuint256 date;\r\n\t}\r\n\t\r\n\tBet[] private _bets;\r\n\tuint256 public numberOfBets = 0;\r\n\tuint256[] public topRates;\r\n\taddress[] public bonusAcounts;\r\n\tuint256 public numberOfbonusAcounts = 0;\r\n\tbool public enabledBonus = true;\r\n\t\r\n    address[] public promotors = new address[](8);\r\n    uint256 public numberOfPromo = 0;\r\n\t\r\n    event Invest(address investor, uint256 amount, uint256 rate);\r\n    event Withdraw(address investor, uint256 amount);\r\n    event OnBonus(address investor, uint256 amount, uint256 bonus);\r\n\r\n    modifier userExist {\r\n        require(balance[msg.sender] > 0, \"Address not found\");\r\n        _;\r\n    }\r\n\r\n    modifier checkTime {\r\n        require(now >= time[msg.sender].add(stepTime), \"Too fast payout request\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == ownerAddress, \"OnlyOwner methods called by non-owner.\");\r\n        _;\r\n    }\r\n\r\n    constructor() public{\r\n        addPromotor(0x56C4ECf7fBB1B828319d8ba6033f8F3836772FA9) ;\r\n    }\r\n\r\n    function() external payable {\r\n        deposit();\r\n    }\r\n    \r\n    function deposit() private {\r\n        if (msg.value > 0) {\r\n            lastTime = now;\r\n            uint bal = balance[msg.sender];\r\n            if (bal == 0) {\r\n                countOfInvestors += 1;\r\n            }\r\n            if (bal > 0 && now > time[msg.sender].add(stepTime)) {\r\n                collectDivision();\r\n                percentWithdraw[msg.sender] = 0;\r\n            }\r\n             \r\n            // update division rate in first investment or reinvesting higher than current balance\r\n            if(msg.value>=bal){\r\n                // update rates\r\n                (uint _rate, uint _floatRate) = luckyrate();\r\n                floatRate = _floatRate;\r\n                rates[msg.sender] = _rate;\r\n                _bets.push(Bet(msg.sender, msg.value, _rate, now)); \r\n                numberOfBets++;\r\n                updateTopRates(numberOfBets-1);\r\n            }else{\r\n                _bets.push(Bet(msg.sender, msg.value, rates[msg.sender], now)); \r\n                numberOfBets++;\r\n            }\r\n            \r\n            balance[msg.sender] = balance[msg.sender].add(msg.value);\r\n            time[msg.sender] = now;\r\n            \r\n            luckybonus();\r\n            shareProfit();\r\n            emit Invest(msg.sender, msg.value, rates[msg.sender]);\r\n        } else {\r\n            collectDivision();\r\n        }\r\n    }\r\n    \r\n    function collectDivision() userExist checkTime internal {\r\n        if ((balance[msg.sender].mul(2)) <= allPercentWithdraw[msg.sender]) {\r\n            balance[msg.sender] = 0;\r\n            time[msg.sender] = 0;\r\n            percentWithdraw[msg.sender] = 0;\r\n        } else {\r\n            uint payout = payoutAmount();\r\n            percentWithdraw[msg.sender] = percentWithdraw[msg.sender].add(payout);\r\n            allPercentWithdraw[msg.sender] = allPercentWithdraw[msg.sender].add(payout);\r\n            msg.sender.transfer(payout);\r\n            emit Withdraw(msg.sender, payout);\r\n        }\r\n    }\r\n\r\n    function payoutAmount() public view returns(uint256) {\r\n        uint256 percent = rates[msg.sender];\r\n        uint256 different = now.sub(time[msg.sender]).div(stepTime);\r\n        uint256 rate = balance[msg.sender].mul(percent).div(1000);\r\n        uint256 withdrawalAmount = rate.mul(different).div(24).sub(percentWithdraw[msg.sender]);\r\n\r\n        return withdrawalAmount;\r\n    }\r\n\r\n    function luckyrate() public view returns (uint256, uint256){\r\n\t\tuint256 _seed = rand();\r\n       \r\n        // longer gap time, higher bonus\r\n        uint bonusRate = now.sub(lastTime).div(1 minutes);\r\n        \r\n        (uint minRate, uint maxRate) = rateRange();\r\n        uint rate = (_seed % (floatRate.sub(minRate)+1)).add(minRate).add(bonusRate);\r\n        if(rate> maxRate){\r\n            rate = maxRate;\r\n        }\r\n        \r\n        uint _floatRate = (maxRate.sub(rate).add(minRate));\r\n        \r\n        if(_floatRate > maxRate){\r\n            _floatRate = maxRate;\r\n        }\r\n        if(_floatRate < minRate){\r\n            _floatRate = minRate;\r\n        }\r\n        \r\n        return (rate, _floatRate);\r\n    }\r\n    \r\n    function luckybonus() private {        \r\n        // check if you're a lucky guy\r\n        if(enabledBonus && msg.value>= (0.1 ether)){\r\n            uint256 _seed = rand();\r\n            uint256 _bonus = 0;\r\n            if(msg.value>= (0.5 ether) && (_seed % 10)==9){\r\n                // Congratulation! you win extra 10% \r\n                _bonus = msg.value/10;\r\n            }else if((_seed % 100)==99){\r\n                // Congratulation! you win DOUBLE!\r\n                _bonus = msg.value;\r\n            } \r\n            \r\n            if(_bonus>0){\r\n                if(_bonus > 1 ether){ \r\n                    /*1 ether is the highest bonus*/\r\n                    _bonus = 1 ether;\r\n                }\r\n                balance[msg.sender] = balance[msg.sender].add(_bonus);  \r\n                bonusAcounts.push(msg.sender);\r\n                numberOfbonusAcounts++;\r\n                emit OnBonus(msg.sender, msg.value, _bonus);\r\n            }\r\n        } \r\n    }\r\n\r\n    function shareProfit() private {\r\n        uint256 projectShare = msg.value.mul(projectPercent).div(100);\r\n        uint256 promoFee = msg.value.div(100);\r\n        uint256 i = 0;\r\n        while(i<numberOfPromo && i<8){\r\n            address promo = promotors[i];\r\n            balance[promo] = balance[promo].add(promoFee);\r\n            projectShare = projectShare.sub(promoFee);\r\n            i++;\r\n        }\r\n        ownerAddress.transfer(projectShare);\r\n    }\r\n\r\n    function rand() private view returns(uint256) {\r\n        return uint256(keccak256(abi.encodePacked(\r\n                (block.timestamp) +\r\n                (block.difficulty) +\r\n                ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)) +\r\n                (block.gaslimit) +\r\n                ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)) +\r\n                (block.number)\r\n        ))); \r\n    }\r\n    \r\n    function rateRange() public view returns (uint256, uint256){\r\n        uint contractBalance = address(this).balance;\r\n\r\n        if (contractBalance < 100 ether) {\r\n            return (33, 60);\r\n        }\r\n        else if (contractBalance < 500 ether) {\r\n            return (40, 70);\r\n        }\r\n        else if (contractBalance < 1000 ether) {\r\n            return (46, 78);\r\n        }\r\n        else if (contractBalance < 2000 ether) {\r\n            return (51, 85);\r\n        }\r\n        else if (contractBalance < 2500 ether) {\r\n            return (55, 90);\r\n        }\r\n        else if (contractBalance < 5000 ether) {\r\n            return (59, 95);\r\n        }\r\n        else{\r\n            return (62, 100);\r\n        }\r\n    }\r\n    \r\n    function getTopRatedBets() public view returns(\r\n\t\taddress[],\r\n\t\tuint256[],\r\n\t\tuint256[],\r\n\t\tuint256[]){\r\n\t    \r\n        uint256 i = 0;\r\n        uint256 len = topRates.length;\r\n\t\taddress[] memory _addrs = new address[](len);\r\n\t\tuint256[] memory _eths = new uint256[](len);  \r\n\t\tuint256[] memory _rates = new uint256[](len);\r\n\t\tuint256[] memory _dates = new uint256[](len);\r\n\t\t\r\n\t\twhile (i< len) {\r\n            Bet memory b = _bets[topRates[i]];\r\n            _addrs[i] = b.addr;\r\n            _eths[i] = b.eth;\r\n            _rates[i] = b.rate;\r\n            _dates[i] = b.date;\r\n            i++;\r\n        }\r\n        \r\n        return(_addrs, _eths,  _rates, _dates);\r\n\t}\r\n\r\n    function getBets(uint256 _len) public view returns(\r\n\t\taddress[],\r\n\t\tuint256[],\r\n\t\tuint256[],\r\n\t\tuint256[]){\r\n\t    \r\n        uint256 i = 0;\r\n        uint256 len = _len> _bets.length? _bets.length: _len;\r\n\t\taddress[] memory _addrs = new address[](len);\r\n\t\tuint256[] memory _eths = new uint256[](len);  \r\n\t\tuint256[] memory _rates = new uint256[](len);\r\n\t\tuint256[] memory _dates = new uint256[](len);\r\n\t\t\r\n\t\twhile (i< len) {\r\n            Bet memory b = _bets[i];\r\n            _addrs[i] = b.addr;\r\n            _eths[i] = b.eth;\r\n            _rates[i] = b.rate;\r\n            _dates[i] = b.date;\r\n            i++;\r\n        }\r\n        \r\n        return(_addrs, _eths,  _rates, _dates);\r\n\t}\r\n    \r\n    /** sort rates */\r\n    function updateTopRates(uint256 indexOfBet) private{\r\n        if(indexOfBet<_bets.length){ \r\n            uint256 maxLen = 20; /* only sort top 20 rates */\r\n            uint256 currentRate = _bets[indexOfBet].rate;\r\n            uint256 len = topRates.length> maxLen ? maxLen: topRates.length;\r\n            uint256 i = 0;\r\n            while (i< len) {\r\n                if(currentRate > _bets[topRates[i]].rate){\r\n                    uint256 j = len.sub(1);\r\n                    if(j<maxLen-1){\r\n                        topRates.push(topRates[topRates.length-1]);\r\n                    }\r\n                    while(j>i){\r\n                        topRates[j]= topRates[j-1];\r\n                        j--;\r\n                    }\r\n                    break;\r\n                }\r\n                i++;\r\n            }\r\n            if(i<maxLen){\r\n                if(i< topRates.length){\r\n                    topRates[i] = indexOfBet;\r\n                }else{\r\n                    topRates.push(indexOfBet);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setEnabledBonus(bool _enabledBonus) public payable{\r\n        require(msg.sender == ownerAddress, \"auth fails\");\r\n        enabledBonus = _enabledBonus;\r\n    }\r\n\r\n    function getTopRates() public view returns (uint256[]){\r\n        return topRates;\r\n    }\r\n\r\n    function getBonusAccounts() public view returns (address[]){\r\n        return bonusAcounts;\r\n    }\r\n    \r\n    function getPromotors() public view returns (address[]){\r\n        address[] memory _promotors = new address[](numberOfPromo);\r\n        uint i = 0;\r\n        while(i<numberOfPromo){\r\n            _promotors[i] = promotors[i];\r\n            i++;\r\n        }\r\n        return _promotors;\r\n    }\r\n\r\n    function addPromotor(address addr) onlyOwner public payable { \r\n        require(numberOfPromo<8, \"no more than 8 promotors\");\r\n        promotors[numberOfPromo++] = addr;\r\n    }\r\n\r\n    function removePromotor(address addr) onlyOwner public payable {  \r\n        uint i = 0;\r\n        bool found = false;\r\n        while(i<numberOfPromo){\r\n            if(promotors[i] == addr){\r\n                found = true;\r\n            }\r\n            if(found){\r\n               promotors[i] = (i<numberOfPromo-1 ? promotors[i+1]: 0x0) ;\r\n            }\r\n            i++;\r\n        } \r\n\r\n        if(found){\r\n            numberOfPromo--;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addPromotor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"topRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_len\",\"type\":\"uint256\"}],\"name\":\"getBets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTopRatedBets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfbonusAcounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonusAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allPercentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removePromotor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enabledBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPromo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"floatRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTopRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPromotors\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabledBonus\",\"type\":\"bool\"}],\"name\":\"setEnabledBonus\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"promotors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusAcounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckyrate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"OnBonus\",\"type\":\"event\"}]","ContractName":"YopoInvest","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://169af3b8d4a192d0718a67f82434aec742b4b56071c5ccaa6b9aa0e106e09271"}]}