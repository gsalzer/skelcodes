{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// AddrSet is an address set based on http://solidity.readthedocs.io/en/develop/contracts.html#libraries\r\nlibrary AddrSet {\r\n    // We define a new struct datatype that will be used to\r\n    // hold its data in the calling contract.\r\n    struct Data { mapping(address => bool) flags; }\r\n\r\n    // Note that the first parameter is of type \"storage\r\n    // reference\" and thus only its storage address and not\r\n    // its contents is passed as part of the call.  This is a\r\n    // special feature of library functions.  It is idiomatic\r\n    // to call the first parameter `self`, if the function can\r\n    // be seen as a method of that object.\r\n    function insert(Data storage self, address value) internal returns (bool) {\r\n        if (self.flags[value]) {\r\n            return false; // already there\r\n        }\r\n        self.flags[value] = true;\r\n        return true;\r\n    }\r\n\r\n    function remove(Data storage self, address value) internal returns (bool) {\r\n        if (!self.flags[value]) {\r\n            return false; // not there\r\n        }\r\n        self.flags[value] = false;\r\n        return true;\r\n    }\r\n\r\n    function contains(Data storage self, address value) internal view returns (bool) {\r\n        return self.flags[value];\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    \r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// Copyright 2017, 2018 Tensigma Ltd. All rights reserved.\r\n// Use of this source code is governed by Microsoft Reference Source\r\n// License (MS-RSL) that can be found in the LICENSE file.\r\n\r\n// KYC implements \"Know Your Customer\" storage for identity approvals by KYC providers.\r\ncontract KYC is Owned {\r\n\r\n    // Status corresponding to the state of approvement:\r\n    // * Unknown when an address has not been processed yet;\r\n    // * Approved when an address has been approved by contract owner or 3rd party KYC provider;\r\n    // * Suspended means a temporary or permanent suspension of all operations, any KYC providers may\r\n    // set this status when account needs to be re-verified due to legal events or blocked because of fraud.\r\n    enum Status {\r\n        unknown,\r\n        approved,\r\n        suspended\r\n    }\r\n\r\n    // Events emitted by this contract\r\n    event ProviderAdded(address indexed addr);\r\n    event ProviderRemoved(address indexed addr);\r\n    event AddrApproved(address indexed addr, address indexed by);\r\n    event AddrSuspended(address indexed addr, address indexed by);\r\n\r\n    // Contract state\r\n    AddrSet.Data private kycProviders;\r\n    mapping(address => Status) public kycStatus;\r\n\r\n    // registerProvider adds a new 3rd-party provider that is authorized to perform KYC.\r\n    function registerProvider(address addr) public onlyOwner {\r\n        require(AddrSet.insert(kycProviders, addr));\r\n        emit ProviderAdded(addr);\r\n    }\r\n\r\n    // removeProvider removes a 3rd-party provider that was authorized to perform KYC.\r\n    function removeProvider(address addr) public onlyOwner {\r\n        require(AddrSet.remove(kycProviders, addr));\r\n        emit ProviderRemoved(addr);\r\n    }\r\n\r\n    // isProvider returns true if the given address was authorized to perform KYC.\r\n    function isProvider(address addr) public view returns (bool) {\r\n        return addr == owner || AddrSet.contains(kycProviders, addr);\r\n    }\r\n\r\n    // getStatus returns the KYC status for a given address.\r\n    function getStatus(address addr) public view returns (Status) {\r\n        return kycStatus[addr];\r\n    }\r\n\r\n    // approveAddr sets the address status to Approved, see Status for details.\r\n    // Can be invoked by owner or authorized KYC providers only.\r\n    function approveAddr(address addr) public onlyAuthorized {\r\n        Status status = kycStatus[addr];\r\n        require(status != Status.approved);\r\n        kycStatus[addr] = Status.approved;\r\n        emit AddrApproved(addr, msg.sender);\r\n    }\r\n\r\n    // suspendAddr sets the address status to Suspended, see Status for details.\r\n    // Can be invoked by owner or authorized KYC providers only.\r\n    function suspendAddr(address addr) public onlyAuthorized {\r\n        Status status = kycStatus[addr];\r\n        require(status != Status.suspended);\r\n        kycStatus[addr] = Status.suspended;\r\n        emit AddrSuspended(addr, msg.sender);\r\n    }\r\n\r\n    // onlyAuthorized modifier restricts write access to contract owner and authorized KYC providers.\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == owner || AddrSet.contains(kycProviders, msg.sender));\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"approveAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"registerProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"kycStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"suspendAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"AddrApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"AddrSuspended\",\"type\":\"event\"}]","ContractName":"KYC","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://66807ec6504b12e37244e13a941342eb1485bdb7256a7d8b2f89bb3dc16c5ff6"}]}