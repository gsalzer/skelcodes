{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract Blockgame {\r\n\r\n  uint public ENTRY_FEE = 0.075 ether;\r\n  uint public POINTS_TO_SPEND = 150;\r\n  uint public TEAMS_PER_ENTRY = 6;\r\n  uint public MAX_ENTRIES = 200;\r\n\r\n  address public owner;\r\n  uint[6] public payoutPercentages;\r\n  uint public debt;\r\n\r\n  uint[] public allTeamsCosts;\r\n  uint[] public allTeamsScores;\r\n\r\n  DailyGame[] public allTimeGames;\r\n  mapping(uint => bool) public gamesList;\r\n  mapping(uint => DailyGame) public gameRecords; // uint == dateOfGame\r\n  mapping(address => uint) public availableWinnings;\r\n\r\n  event NewEntry(address indexed player, uint[] selectedTeams);\r\n\r\n  struct Entry {\r\n    uint timestamp;\r\n    uint[] teamsSelected;\r\n    address player;\r\n    uint entryIndex;\r\n  }\r\n\r\n  // Pre and post summary\r\n  struct DailyGame {\r\n    uint numPlayers;\r\n    uint pool;\r\n    uint date;\r\n    uint closedTime;\r\n    uint[] playerScores; // A\r\n    uint[] topPlayersScores; // B\r\n    uint[] winnerAmounts; // C\r\n    address[] players; // A\r\n    uint[] topPlayersIndices; // B\r\n    address[] topPlayersAddresses; // B\r\n    address[] winnerAddresses; // C\r\n    Entry[] entries;\r\n  }\r\n\r\n  constructor(){\r\n    owner = msg.sender;\r\n\r\n    payoutPercentages[0] = 0;\r\n    payoutPercentages[1] = 50;\r\n    payoutPercentages[2] = 16;\r\n    payoutPercentages[3] = 12;\r\n    payoutPercentages[4] = 8;\r\n    payoutPercentages[5] = 4;\r\n  }\r\n\r\n\r\n  //UTILITIES\r\n  function() external payable { }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function changeEntryFee(uint _value) onlyOwner {\r\n    ENTRY_FEE = _value;\r\n  }\r\n\r\n  function changeMaxEntries(uint _value) onlyOwner {\r\n    MAX_ENTRIES = _value;\r\n  }\r\n\r\n  //submit alphabetically\r\n  function changeTeamCosts(uint[] _costs) onlyOwner {\r\n    allTeamsCosts = _costs;\r\n  }\r\n\r\n  function changeAvailableSpend(uint _value) onlyOwner {\r\n    POINTS_TO_SPEND = _value;\r\n  }\r\n\r\n  // _closedTime == Unix timestamp\r\n  function createGame(uint _gameDate, uint _closedTime) onlyOwner {\r\n    gamesList[_gameDate] = true;\r\n    gameRecords[_gameDate].closedTime = _closedTime;\r\n  }\r\n\r\n  function withdraw(uint amount) onlyOwner returns(bool) {\r\n    require(amount <= (address(this).balance - debt));\r\n    owner.transfer(amount);\r\n    return true;\r\n  }\r\n\r\n  function selfDestruct() onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n\r\n  // SUBMITTING AN ENTRY\r\n\r\n  // Verify that game exists\r\n  modifier gameOpen(uint _gameDate) {\r\n    require(gamesList[_gameDate] == true);\r\n    _;\r\n  }\r\n\r\n  // Verify that teams selection is within cost\r\n  modifier withinCost(uint[] teamIndices) {\r\n      require(teamIndices.length == 6);\r\n      uint sum = 0;\r\n\r\n      for(uint i = 0;i < 6; i++){\r\n        uint cost = allTeamsCosts[teamIndices[i]];\r\n        sum += cost;\r\n      }\r\n\r\n      require(sum <= POINTS_TO_SPEND);\r\n      _;\r\n  }\r\n\r\n  // Verify that constest hasn't closed\r\n  modifier beforeCutoff(uint _date) {\r\n    require(gameRecords[_date].closedTime > currentTime());\r\n    _;\r\n  }\r\n\r\n  function createEntry(uint date, uint[] teamIndices) payable\r\n                       withinCost(teamIndices)\r\n                       gameOpen(date)\r\n                       beforeCutoff(date)\r\n                       external {\r\n\r\n    require(msg.value == ENTRY_FEE);\r\n    require(gameRecords[date].numPlayers < MAX_ENTRIES);\r\n\r\n    Entry memory entry;\r\n    entry.timestamp = currentTime();\r\n    entry.player = msg.sender;\r\n    entry.teamsSelected = teamIndices;\r\n\r\n    gameRecords[date].entries.push(entry);\r\n    gameRecords[date].numPlayers++;\r\n    gameRecords[date].pool += ENTRY_FEE;\r\n\r\n    uint entryIndex = gameRecords[date].players.push(msg.sender) - 1;\r\n    gameRecords[date].entries[entryIndex].entryIndex = entryIndex;\r\n\r\n    emit NewEntry(msg.sender, teamIndices);\r\n  }\r\n\r\n\r\n  // ANALYZING SCORES\r\n\r\n  // Register teams (alphabetically) points total for each game\r\n  function registerTeamScores(uint[] _scores) onlyOwner {\r\n    allTeamsScores = _scores;\r\n  }\r\n\r\n  function registerTopPlayers(uint _date, uint[] _topPlayersIndices, uint[] _topScores) onlyOwner {\r\n    gameRecords[_date].topPlayersIndices = _topPlayersIndices;\r\n    for(uint i = 0; i < _topPlayersIndices.length; i++){\r\n      address player = gameRecords[_date].entries[_topPlayersIndices[i]].player;\r\n      gameRecords[_date].topPlayersAddresses.push(player);\r\n    }\r\n    gameRecords[_date].topPlayersScores = _topScores;\r\n  }\r\n\r\n  // Allocate winnings to top 5 (or 5+ if ties) players\r\n  function generateWinners(uint _date) onlyOwner {\r\n    require(gameRecords[_date].closedTime < currentTime());\r\n    uint place = 1;\r\n    uint iterator = 0;\r\n    uint placeCount = 1;\r\n    uint currentScore = 1;\r\n    uint percentage = 0;\r\n    uint amount = 0;\r\n\r\n    while(place <= 5){\r\n      currentScore = gameRecords[_date].topPlayersScores[iterator];\r\n      if(gameRecords[_date].topPlayersScores[iterator + 1] == currentScore){\r\n        placeCount++;\r\n        iterator++;\r\n      } else {\r\n        amount = 0;\r\n\r\n        if(placeCount > 1){\r\n          percentage = 0;\r\n          for(uint n = place; n <= (place + placeCount);n++){\r\n            if(n <= 5){\r\n              percentage += payoutPercentages[n];\r\n            }\r\n          }\r\n          amount = gameRecords[_date].pool / placeCount * percentage / 100;\r\n        } else {\r\n          amount = gameRecords[_date].pool * payoutPercentages[place] / 100;\r\n        }\r\n\r\n\r\n        for(uint i = place - 1; i < (place + placeCount - 1); i++){\r\n          address winnerAddress = gameRecords[_date].entries[gameRecords[_date].topPlayersIndices[i]].player;\r\n          gameRecords[_date].winnerAddresses.push(winnerAddress);\r\n          gameRecords[_date].winnerAmounts.push(amount);\r\n        }\r\n\r\n        iterator++;\r\n        place += placeCount;\r\n        placeCount = 1;\r\n      }\r\n\r\n    }\r\n    allTimeGames.push(gameRecords[_date]);\r\n  }\r\n\r\n  function assignWinnings(uint _date) onlyOwner {\r\n    address[] storage winners = gameRecords[_date].winnerAddresses;\r\n    uint[] storage winnerAmounts = gameRecords[_date].winnerAmounts;\r\n\r\n    for(uint z = 0; z < winners.length; z++){\r\n      address currentWinner = winners[z];\r\n      uint currentRedeemable = availableWinnings[currentWinner];\r\n      uint newRedeemable = currentRedeemable + winnerAmounts[z];\r\n      availableWinnings[currentWinner] = newRedeemable;\r\n      debt += winnerAmounts[z];\r\n    }\r\n  }\r\n\r\n  function redeem() external returns(bool success) {\r\n    require(availableWinnings[msg.sender] > 0);\r\n    uint amount = availableWinnings[msg.sender];\r\n    availableWinnings[msg.sender] = 0;\r\n    debt -= amount;\r\n    msg.sender.transfer(amount);\r\n    return true;\r\n  }\r\n\r\n  function getAvailableWinnings(address _address) view returns(uint amount){\r\n    return availableWinnings[_address];\r\n  }\r\n\r\n\r\n  // OTHER USEFUL FUNCTIONS / TESTING\r\n\r\n  function currentTime() view returns (uint _currentTime) {\r\n    return now;\r\n  }\r\n\r\n  function getPointsToSpend() view returns(uint _POINTS_TO_SPEND) {\r\n    return POINTS_TO_SPEND;\r\n  }\r\n\r\n  function getGameNumberOfEntries(uint _date) view returns(uint _length){\r\n    return gameRecords[_date].entries.length;\r\n  }\r\n\r\n  function getCutoffTime(uint _date) view returns(uint cutoff){\r\n    return gameRecords[_date].closedTime;\r\n  }\r\n\r\n  function getTeamScore(uint _teamIndex) view returns(uint score){\r\n    return allTeamsScores[_teamIndex];\r\n  }\r\n\r\n  function getAllTeamScores() view returns(uint[] scores){\r\n    return allTeamsScores;\r\n  }\r\n\r\n  function getAllPlayers(uint _date) view returns(address[] _players){\r\n    return gameRecords[_date].players;\r\n  }\r\n\r\n  function getTopPlayerScores(uint _date) view returns(uint[] scores){\r\n    return gameRecords[_date].topPlayersScores;\r\n  }\r\n\r\n  function getTopPlayers(uint _date) view returns(address[] _players){\r\n    return gameRecords[_date].topPlayersAddresses;\r\n  }\r\n\r\n  function getWinners(uint _date) view returns(uint[] _amounts, address[] _players){\r\n    return (gameRecords[_date].winnerAmounts, gameRecords[_date].winnerAddresses);\r\n  }\r\n\r\n  function getNumEntries(uint _date) view returns(uint _num){\r\n    return gameRecords[_date].numPlayers;\r\n  }\r\n\r\n  function getPoolValue(uint _date) view returns(uint amount){\r\n    return gameRecords[_date].pool;\r\n  }\r\n\r\n  function getBalance() view returns(uint _amount) {\r\n    return address(this).balance;\r\n  }\r\n\r\n  function getTeamCost(uint _index) constant returns(uint cost){\r\n    return allTeamsCosts[_index];\r\n  }\r\n\r\n  function getAllTeamCosts() view returns(uint[] costs){\r\n    return allTeamsCosts;\r\n  }\r\n\r\n  function getPastGameResults(uint _gameIndex) view returns(address[] topPlayers,\r\n                                                            uint[] topPlayersScores,\r\n                                                            uint[] winnings){\r\n    return (allTimeGames[_gameIndex].topPlayersAddresses,\r\n            allTimeGames[_gameIndex].topPlayersScores,\r\n            allTimeGames[_gameIndex].winnerAmounts\r\n    );\r\n  }\r\n\r\n  function getPastGamesLength() view returns(uint _length){\r\n    return allTimeGames.length;\r\n  }\r\n\r\n  function getEntry(uint _date, uint _index) view returns(\r\n    address playerAddress,\r\n    uint[] teamsSelected,\r\n    uint entryIndex\r\n  ){\r\n    return (gameRecords[_date].entries[_index].player,\r\n            gameRecords[_date].entries[_index].teamsSelected,\r\n            gameRecords[_date].entries[_index].entryIndex);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"},{\"name\":\"_topPlayersIndices\",\"type\":\"uint256[]\"},{\"name\":\"_topScores\",\"type\":\"uint256[]\"}],\"name\":\"registerTopPlayers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"generateWinners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getCutoffTime\",\"outputs\":[{\"name\":\"cutoff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getNumEntries\",\"outputs\":[{\"name\":\"_num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTimeGames\",\"outputs\":[{\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"closedTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameIndex\",\"type\":\"uint256\"}],\"name\":\"getPastGameResults\",\"outputs\":[{\"name\":\"topPlayers\",\"type\":\"address[]\"},{\"name\":\"topPlayersScores\",\"type\":\"uint256[]\"},{\"name\":\"winnings\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payoutPercentages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameRecords\",\"outputs\":[{\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"closedTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_costs\",\"type\":\"uint256[]\"}],\"name\":\"changeTeamCosts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameDate\",\"type\":\"uint256\"},{\"name\":\"_closedTime\",\"type\":\"uint256\"}],\"name\":\"createGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTeamsScores\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getWinners\",\"outputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_players\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_teamIndex\",\"type\":\"uint256\"}],\"name\":\"getTeamScore\",\"outputs\":[{\"name\":\"score\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeAvailableSpend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ENTRIES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTeamCost\",\"outputs\":[{\"name\":\"cost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableWinnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getPoolValue\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getEntry\",\"outputs\":[{\"name\":\"playerAddress\",\"type\":\"address\"},{\"name\":\"teamsSelected\",\"type\":\"uint256[]\"},{\"name\":\"entryIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POINTS_TO_SPEND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTeamScores\",\"outputs\":[{\"name\":\"scores\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getAllPlayers\",\"outputs\":[{\"name\":\"_players\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getTopPlayers\",\"outputs\":[{\"name\":\"_players\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeMaxEntries\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTeamsCosts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAvailableWinnings\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getTopPlayerScores\",\"outputs\":[{\"name\":\"scores\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getGameNumberOfEntries\",\"outputs\":[{\"name\":\"_length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAMS_PER_ENTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"teamIndices\",\"type\":\"uint256[]\"}],\"name\":\"createEntry\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPastGamesLength\",\"outputs\":[{\"name\":\"_length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_scores\",\"type\":\"uint256[]\"}],\"name\":\"registerTeamScores\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"assignWinnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPointsToSpend\",\"outputs\":[{\"name\":\"_POINTS_TO_SPEND\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTeamCosts\",\"outputs\":[{\"name\":\"costs\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ENTRY_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeEntryFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"selectedTeams\",\"type\":\"uint256[]\"}],\"name\":\"NewEntry\",\"type\":\"event\"}]","ContractName":"Blockgame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e346c09aa5e96a703bce37ecdb71e60f019a6a0dfe04e7727260057855cd2b88"}]}