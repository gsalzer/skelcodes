{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Registry is Ownable {\r\n\r\n    struct ModuleForSale {\r\n        uint price;\r\n        bytes32 sellerUsername;\r\n        bytes32 moduleName;\r\n        address sellerAddress;\r\n        bytes4 licenseId;\r\n    }\r\n\r\n    mapping(string => uint) internal moduleIds;\r\n    mapping(uint => ModuleForSale) public modules;\r\n\r\n    uint public numModules;\r\n    uint public version;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor, establishes ownership because contract is owned\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        numModules = 0;\r\n        version = 1;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Lets a user list a software module for sale in this registry\r\n    // ------------------------------------------------------------------------\r\n    function listModule(uint price, bytes32 sellerUsername, bytes32 moduleName, string usernameAndProjectName, bytes4 licenseId) public {\r\n        // make sure input params are valid\r\n        require(price != 0 && sellerUsername != \"\" && moduleName != \"\" && bytes(usernameAndProjectName).length != 0 && licenseId != 0);\r\n\r\n        // make sure the name isn't already taken\r\n        require(moduleIds[usernameAndProjectName] == 0);\r\n\r\n        numModules += 1;\r\n        moduleIds[usernameAndProjectName] = numModules;\r\n\r\n        ModuleForSale storage module = modules[numModules];\r\n\r\n        module.price = price;\r\n        module.sellerUsername = sellerUsername;\r\n        module.moduleName = moduleName;\r\n        module.sellerAddress = msg.sender;\r\n        module.licenseId = licenseId;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the ID number of a module given the username and project name of that module\r\n    // ------------------------------------------------------------------------\r\n    function getModuleId(string usernameAndProjectName) public view returns (uint) {\r\n        return moduleIds[usernameAndProjectName];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get info stored for a module by id\r\n    // ------------------------------------------------------------------------\r\n    function getModuleById(\r\n        uint moduleId\r\n    ) \r\n        public \r\n        view \r\n        returns (\r\n            uint price, \r\n            bytes32 sellerUsername, \r\n            bytes32 moduleName, \r\n            address sellerAddress, \r\n            bytes4 licenseId\r\n        ) \r\n    {\r\n        ModuleForSale storage module = modules[moduleId];\r\n        \r\n\r\n        if (module.sellerAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        price = module.price;\r\n        sellerUsername = module.sellerUsername;\r\n        moduleName = module.moduleName;\r\n        sellerAddress = module.sellerAddress;\r\n        licenseId = module.licenseId;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // get info stored for a module by name\r\n    // ------------------------------------------------------------------------\r\n    function getModuleByName(\r\n        string usernameAndProjectName\r\n    ) \r\n        public \r\n        view\r\n        returns (\r\n            uint price, \r\n            bytes32 sellerUsername, \r\n            bytes32 moduleName, \r\n            address sellerAddress, \r\n            bytes4 licenseId\r\n        ) \r\n    {\r\n        uint moduleId = moduleIds[usernameAndProjectName];\r\n        if (moduleId == 0) {\r\n            return;\r\n        }\r\n        ModuleForSale storage module = modules[moduleId];\r\n\r\n        price = module.price;\r\n        sellerUsername = module.sellerUsername;\r\n        moduleName = module.moduleName;\r\n        sellerAddress = module.sellerAddress;\r\n        licenseId = module.licenseId;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Edit a module listing\r\n    // ------------------------------------------------------------------------\r\n    function editModule(uint moduleId, uint price, address sellerAddress, bytes4 licenseId) public {\r\n        // Make sure input params are valid\r\n        require(moduleId != 0 && price != 0 && sellerAddress != address(0) && licenseId != 0);\r\n\r\n        ModuleForSale storage module = modules[moduleId];\r\n\r\n        // prevent editing an empty module (effectively listing a module)\r\n        require(\r\n            module.price != 0 && module.sellerUsername != \"\" && module.moduleName != \"\" && module.licenseId != 0 && module.sellerAddress != address(0)\r\n        );\r\n\r\n        // require that sender is the original module lister, or the contract owner\r\n        // the contract owner clause lets us recover a module listing if a dev loses access to their privkey\r\n        require(msg.sender == module.sellerAddress || msg.sender == owner);\r\n\r\n        module.price = price;\r\n        module.sellerAddress = sellerAddress;\r\n        module.licenseId = licenseId;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"moduleId\",\"type\":\"uint256\"}],\"name\":\"getModuleById\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"sellerUsername\",\"type\":\"bytes32\"},{\"name\":\"moduleName\",\"type\":\"bytes32\"},{\"name\":\"sellerAddress\",\"type\":\"address\"},{\"name\":\"licenseId\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"sellerUsername\",\"type\":\"bytes32\"},{\"name\":\"moduleName\",\"type\":\"bytes32\"},{\"name\":\"usernameAndProjectName\",\"type\":\"string\"},{\"name\":\"licenseId\",\"type\":\"bytes4\"}],\"name\":\"listModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"usernameAndProjectName\",\"type\":\"string\"}],\"name\":\"getModuleId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"modules\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"sellerUsername\",\"type\":\"bytes32\"},{\"name\":\"moduleName\",\"type\":\"bytes32\"},{\"name\":\"sellerAddress\",\"type\":\"address\"},{\"name\":\"licenseId\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numModules\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"moduleId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"sellerAddress\",\"type\":\"address\"},{\"name\":\"licenseId\",\"type\":\"bytes4\"}],\"name\":\"editModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"usernameAndProjectName\",\"type\":\"string\"}],\"name\":\"getModuleByName\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"sellerUsername\",\"type\":\"bytes32\"},{\"name\":\"moduleName\",\"type\":\"bytes32\"},{\"name\":\"sellerAddress\",\"type\":\"address\"},{\"name\":\"licenseId\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Registry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://077b390b966456c73f2ff4fdc5be821e4c0a14348c045254fb6dccd64b70a004"}]}