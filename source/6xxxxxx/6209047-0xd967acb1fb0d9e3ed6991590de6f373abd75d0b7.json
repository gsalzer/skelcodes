{"status":"1","message":"OK","result":[{"SourceCode":"/* \r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN8OOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN8OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOODNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO8NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO8NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOODNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNMOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNDOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOODNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO7=~~~~~~+$OOOOOOOOOOOOOOOOOOOOOOO8NNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO?~~~~~~~~~~~~~~~~~~~~~~+OOOOOOOOOOOOOOOOOOO8NNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOO==~~~~~~~~~~~~~~~~~~~~~~~~~~~~=$OOOOOOOOOOOOOOOOMNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOI~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~8OOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OOOOOOOOOOONNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOI=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OOOOOOOOONNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOZ=~~~~~~~~~~~~~~~+NMMMMMO?~~~~~~~~~~~~~~~~~~~~~~~~~~~ZOOOOOONNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~NN==~~~~~~~~~~~~~~~~~~~~$ZOOOONNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOO7~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OOOONNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNDOOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OODNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNMMMMMMM8OOOOOOOO=~~~~~~~~~~~~~~~~~~~~~~ONMMMMMMMMMMMMM?==~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNMMMMMMMMMMMMMDZ~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMM==~~~~~~~~~~M=~==DMMMMMNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNOOOODMMMMMMMMMMMMMMMMMI~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~~~~7MMMMMMMMMMMNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNOOOOOOOOOOONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN~~~~NNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNDOOOOOOOOOOOOOO===~IMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM8~=~~~~~~~~~NNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOO~~~~~~~~~~==~~=$MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM?~~~~~~~~~~~~~~~~~~=~NNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNOOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~~~~~~~~~~~~~~~~~~~~?NNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNOOOOOOOOOOOOOO$=~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM8~~~~~~~~~~~~~~~~~~~~~~~~+NNNNNNNNNNN\r\nNNNNNNNNNNNNNNNOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNN\r\nNNNNNNNNNNNNNNNOOOOOOOOOOOOOI~~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNN\r\nNNNNNNNNNNNNNNNOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM=~~~:...........=8MM+=~~~~~~NNNNNNNNNN\r\nNNNNNNNNNNNNNNNNOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~=MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~.....MM?............DN~~MNNNNNNNNN\r\nNNNNNNNNNNNNNNNNOOOOOOOOOOO+~~~~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM=~~~~........................MNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~?MMMMMMMMMMMMMMMMMMMMMMMMMMMMD~~~~~........................NNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNDOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~DMMMMMMMMMMMMMMMMMMMMMMMMMMZ~~~~~~........................NNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~=IMMMMMMMMMMMMMMMMMMMMMMMMO~~~~~~~.......................~NNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNOOOOOOOO7~~~~~~~~~~~~~~~~~~~~~~~~~~~=MMMMMMMMMMMMMMMMMMMMMM~~~~~~~~~=......................NNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNOOOOOO$~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ZMMMMMMMMMMMMMMMMMM~~~~~~~~~~~~,....................NNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NMMMMMMMMMMMMMM=~~~~~~~~~~~~~~,..................NNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNOOO+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~8MMMMMMMI~~~~~~~~~~~~~~~~M~~~,..............MNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNMOO=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~N~~~~~~........~~~NNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNN8~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~M~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$~~~~~~~M~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MI~~~N~~~~~~~~~~~~~~~~MNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNZ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNDO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNZ=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~~~~~~~~~~~~~~~~~~=~NNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=+DM8~~~~~~~$MN~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNZ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNZ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~8NNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=MNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN7~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~DNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNND~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN$~~~~~~~~~~~~~~~~==~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN:~~~~~~~~~~~~~~~~~~~~~~~~~=~~~~~~~~~~~~~=~~~~~NNNNNNNNNNNNNNNNNNNNWE&ARE&LEGIONNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNWE&DO&NOT&FORGIVENNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN8~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNWE&DO&NOT&FORGETNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNEXPECT&USNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~?NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\r\n */\r\n\r\n/**\r\n * @title Microverse\r\n * Given the fact that most of the blockchaaaaains are dogshit wrapped in catshit, we've decided to come down from the\r\n * highland, just for a while, though.\r\n * Being smart is lonely, being nice is a compromise.\r\n * Hello human, we are Evil Morty Fund.\r\n * Decentralization is great, while balance must be kept.\r\n * Order will change, but never disappear.\r\n * We are not building another chain, we are forming a soceity, never seen, never have been.\r\n */\r\n\r\n // \\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\r\n // \\ (•◡•) / █   █ █░░█ █▀▀▄ █▀▀█ █░░ █░░█ █▀▀▄ █▀▀█ █▀▀▄ █░░█ █▀▀▄ █▀▀▄ █░░█ █▀▀▄  \\ (•◡•) /\r\n // \\ (•◡•) / █ █ █ █░░█ █▀▀▄ █▄▄█ █░░ █░░█ █▀▀▄ █▄▄█ █░░█ █░░█ █▀▀▄ █░░█ █░░█ █▀▀▄  \\ (•◡•) /\r\n // \\ (•◡•) / █▄▀▄█ ░▀▀▀ ▀▀▀░ ▀░░▀ ▀▀▀ ░▀▀▀ ▀▀▀░ ▀░░▀ ▀▀▀░ ░▀▀▀ ▀▀▀░ ▀▀▀░ ░▀▀▀ ▀▀▀░  \\ (•◡•) /\r\n // \\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\r\n\r\n/**\r\n * Created on 2018-08-21 03:28\r\n * @summary: \r\n * @author: yong\r\n */\r\npragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * @dev Supports unlimited numbers of roles and addresses.\r\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    emit RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    emit RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Superuser\r\n * @dev The Superuser contract defines a single superuser who can transfer the ownership \r\n * @dev of a contract to a new address, even if he is not the owner. \r\n * @dev A superuser can transfer his role to a new address. \r\n */\r\ncontract Superuser is Ownable, RBAC {\r\n  string public constant ROLE_SUPERUSER = \"superuser\";\r\n\r\n  constructor () public {\r\n    addRole(msg.sender, ROLE_SUPERUSER);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account that's not a superuser.\r\n   */\r\n  modifier onlySuperuser() {\r\n    checkRole(msg.sender, ROLE_SUPERUSER);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOrSuperuser() {\r\n    require(msg.sender == owner || isSuperuser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address has superuser role\r\n   */\r\n  function isSuperuser(address _addr)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(_addr, ROLE_SUPERUSER);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current superuser to transfer his role to a newSuperuser.\r\n   * @param _newSuperuser The address to transfer ownership to.\r\n   */\r\n  function transferSuperuser(address _newSuperuser) public onlyOwner {\r\n    require(_newSuperuser != address(0));\r\n    removeRole(msg.sender, ROLE_SUPERUSER);\r\n    addRole(_newSuperuser, ROLE_SUPERUSER);\r\n  }\r\n}\r\n\r\n/**\r\n * @title MicroverseBase\r\n * @dev You are still with us? im almost surprised.\r\n * @dev Basic params are defined in this base.\r\n */\r\ncontract MicroverseBase is Superuser {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event OpenWormhole();\r\n    event CloseWormhole();\r\n    event SystemChangePercentWeiDividend(uint256 oldValue, uint256 newValue);\r\n    event SystemChangePercentWeiJackpot(uint256 oldValue, uint256 newValue);\r\n    event SystemChangePercentWeiMC(uint256 oldValue, uint256 newValue);\r\n\r\n    uint256 public previousWeiBalance;\r\n    uint256 public nextSeedHashed;\r\n    uint256 public percentWeiDividend = 40; // 40%\r\n    uint256 public percentWeiJackpot = 10; // 10%\r\n    uint256 public percentWeiMC = 10; // 10%\r\n    uint256 public FACTOR = 100;\r\n\r\n    // We think it makes perfectly sense that only the owner can open or close the wormhole.\r\n    bool public wormholeIsOpen = true;\r\n\r\n    modifier wormholeOpened() {\r\n        require (wormholeIsOpen == true);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev start game\r\n     */\r\n    function openWormhole() external onlyOwner {\r\n        wormholeIsOpen = true;\r\n        emit OpenWormhole();\r\n    }\r\n\r\n    /**\r\n     * @dev stop game\r\n     */\r\n    function closeWormhole() external onlyOwner {\r\n        wormholeIsOpen = false;\r\n        emit CloseWormhole();\r\n    }\r\n\r\n    /**\r\n     * @dev reveal the hashed seed to general public\r\n     * @dev the seed will be hashed twice using keccak256\r\n     * @param seedHash The result of keccak256(keccak256(seed))\r\n     */\r\n    function setNextSeedHash(uint256 seedHash)\r\n        external\r\n        onlyOwner {\r\n        nextSeedHashed = seedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Update  dividend percentage, a system event\r\n     * is sent to capture this change.\r\n     * @param _value new value\r\n     */\r\n    function setPercentWeiDividend(uint256 _value)\r\n        external\r\n        onlyOwner {\r\n        emit SystemChangePercentWeiDividend(percentWeiDividend, _value);\r\n        percentWeiDividend = _value;\r\n    }\r\n\r\n    /**\r\n     * @dev Update jackpot percentage, a system event\r\n     * is sent to capture this change.\r\n     * @param _value new value\r\n     */\r\n    function setPercentWeiJackpot(uint256 _value)\r\n        external\r\n        onlyOwner {\r\n        emit SystemChangePercentWeiJackpot(percentWeiJackpot, _value);\r\n        percentWeiJackpot = _value;\r\n    }\r\n\r\n    /**\r\n     * @dev Update mutual constructor percentage, a system event\r\n     * is sent to capture this change.\r\n     * @param _value new value\r\n     */\r\n    function setPercentWeiMC(uint256 _value)\r\n        external\r\n        onlyOwner {\r\n        emit SystemChangePercentWeiMC(percentWeiMC, _value);\r\n        percentWeiMC = _value;\r\n    }\r\n}\r\n\r\n/**\r\n * Microverse is made up of four components, together managing three ERC223 tokens.\r\n * Let us explain.\r\n *\r\n * ░█▀▀█ █▀▀█ █▀▀█ █▀▀█ █▀▀▀ █▀▀ \r\n * ░█─▄▄ █▄▄█ █▄▄▀ █▄▄█ █─▀█ █▀▀ \r\n * ░█▄▄█ ▀──▀ ▀─▀▀ ▀──▀ ▀▀▀▀ ▀▀▀ \r\n * \r\n * Garage manages Evil Morty token (Morty)\r\n * It tracks and updates the price, manage the total balance, and timestamp in this universe.\r\n *\r\n * ░█▀▀█ █▀▀█ █▀▀█ ▀▀█▀▀ █▀▀█ █── 　 ░█▀▀█ █──█ █▀▀▄ \r\n * ░█▄▄█ █──█ █▄▄▀ ──█── █▄▄█ █── 　 ░█─▄▄ █──█ █──█ \r\n * ░█─── ▀▀▀▀ ▀─▀▀ ──▀── ▀──▀ ▀▀▀ 　 ░█▄▄█ ─▀▀▀ ▀──▀ \r\n *\r\n * Portal Gun manages Evil Morty token (Morty), Rick C137 token (Rick), and Flurbo token (FLB)\r\n * It takes care of the random process happened in this universe, in which the sender gets\r\n * 20% chance to get Rick, 30% chance to get double Morty, and 50% chance to get FLB, if,\r\n * he/she sends EM to the address of this contract.\r\n *\r\n * ▒█▀▀▀█ █▀▀█ █▀▀█ █▀▀ █▀▀ 　 ▒█▀▀█ █▀▀█ █░░█ ░▀░ █▀▀ █▀▀ \r\n * ░▀▀▀▄▄ █░░█ █▄▄█ █░░ █▀▀ 　 ▒█░░░ █▄▄▀ █░░█ ▀█▀ ▀▀█ █▀▀ \r\n * ▒█▄▄▄█ █▀▀▀ ▀░░▀ ▀▀▀ ▀▀▀ 　 ▒█▄▄█ ▀░▀▀ ░▀▀▀ ▀▀▀ ▀▀▀ ▀▀▀ \r\n *\r\n * Spaceship manages Rick C137 tokens (Rick)\r\n * It is responsible for sending the dividends.\r\n *\r\n * ▒█▀▀█ ░▀░ █▀▀█ █▀▀▄ █▀▄▀█ █▀▀█ █▀▀▄ \r\n * ▒█▀▀▄ ▀█▀ █▄▄▀ █░░█ █░▀░█ █▄▄█ █░░█ \r\n * ▒█▄▄█ ▀▀▀ ▀░▀▀ ▀▀▀░ ▀░░░▀ ▀░░▀ ▀░░▀ \r\n *\r\n * Birdman helps grow the Microverse community.\r\n * This contract sends the fund to birdmen.\r\n *\r\n */\r\n\r\n/**\r\n * @title GarageInterface\r\n * @dev Housekeeper for Evil Morty token.\r\n */\r\ncontract GarageInterface {\r\n    /**\r\n     * @dev getter for token address\r\n     */\r\n    function getEvilMortyAddress() external view returns (address);\r\n\r\n    /**\r\n     * @dev proxy/agent to purchase morties on behalf of senders\r\n     * @param weiAmount The ether amount\r\n     * @param beneficiary The buyer's address\r\n     */\r\n    function citadelBuy(uint256 weiAmount, address beneficiary) external returns (uint256);\r\n}\r\n\r\n/**\r\n * @title PortalGunInterface\r\n * @dev Random oracle in this world.\r\n */\r\ncontract PortalGunInterFace {\r\n\r\n    uint256 public numTickets;\r\n\r\n    /**\r\n     * @dev Give us morty, let there be rick\r\n     * @param player The player's address\r\n     * @param amount Amount morty sent\r\n     */\r\n    function participate(address player, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev getter to check EM balance\r\n     * @param sender The sender's address\r\n     */\r\n    function balanceOfMorty(address sender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev getter to check C137 balance\r\n     * @param sender The sender's address\r\n     */\r\n    function balanceOfRick(address sender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev getter to check FLB balance\r\n     * @param sender The sender's address\r\n     */\r\n    function balanceOfFlurbo(address sender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Give back EM, C137, or FLB\r\n     * @param seed A UUID in expressed in integer\r\n     */\r\n    function redeem(uint256 seed) external;\r\n\r\n    /**\r\n     * @dev Wake Rick up\r\n     */\r\n    function startRick() external returns (bool);\r\n\r\n    /**\r\n     * @dev Clean all ricks\r\n     * @dev Remember, for a given period of time, Rick C137 holders are eligible for receiving ETH dividends.\r\n     * @dev When the period ends, all ricks will be gone, C137 balance will be reset to zero.\r\n     * @dev Our strategy is, get ricks as early as possible!\r\n     */\r\n    function resetRick() external;\r\n\r\n    /**\r\n     * @dev Make portal gun back on fire\r\n     */\r\n    function startPortalGun() external;\r\n\r\n    /**\r\n     * @dev Cease fire and make Rick drunk\r\n     */\r\n    function stopPortalGunAndRick() external;\r\n\r\n    /**\r\n     * @dev getter of number of C137 holders\r\n     */\r\n    function getNumOfRickHolders() external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title SpaceshipInterface\r\n */\r\ncontract SpaceshipInterface {\r\n\r\n    /**\r\n     * @dev What more can i say @jeff? It starts the spaceship\r\n     */\r\n    function startSpaceship() external returns (bool);\r\n    \r\n    /**\r\n     * @dev Send the eth funds to all C137 holders\r\n     */\r\n    function sendDividends() external;\r\n    \r\n    /**\r\n     * @dev getter of number of dividend rounds\r\n     */\r\n    function getNumDividends() external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev updates the status, that's it\r\n     */\r\n    function updateSpaceshipStatus() external;    \r\n}\r\n\r\n\r\n/**\r\n * ╔═╗╔═╦══╦═══╦═══╦═══╦╗░░╔╦═══╦═══╦═══╦═══╗\r\n * ║║╚╝║╠╣╠╣╔═╗║╔═╗║╔═╗║╚╗╔╝║╔══╣╔═╗║╔═╗║╔══╝\r\n * ║╔╗╔╗║║║║║░╚╣╚═╝║║░║╠╗║║╔╣╚══╣╚═╝║╚══╣╚══╗\r\n * ║║║║║║║║║║░╔╣╔╗╔╣║░║║║╚╝║║╔══╣╔╗╔╩══╗║╔══╝\r\n * ║║║║║╠╣╠╣╚═╝║║║╚╣╚═╝║╚╗╔╝║╚══╣║║╚╣╚═╝║╚══╗\r\n * ╚╝╚╝╚╩══╩═══╩╝╚═╩═══╝░╚╝░╚═══╩╝╚═╩═══╩═══╝\r\n *\r\n * It's been a great pleasure coding in solidity!\r\n *\r\n * @title Microverse\r\n * @dev secret: 981ea44275dc95cb74b8f768f82d6debfd2f934adc0125de71762051\r\n *\r\n * ██████┼────────────────────────────────────────────────────────────┼██████\r\n * ██████│░░░Ryan░░░░░░░░░░░░░░░░░░░░░░░░░Dan░░░░░░░░░░░░░░░░Justin░░░│██████\r\n * ██████│░Einstein░░░░░░░░░░░░░Satoshi░░░░░░░░░░░░░░░░░Stephen░░░░░░░│██████\r\n * ██████│░░░░░░░░░Shannon░░░░░░░░░░░░░░░░░RSA░░░░░░░░░░░░░░░░░░░░░░░░│██████\r\n * ██████│░░░░░░░░░░░Vitalik░░░░░░░░░░░░░░░░░░░░░All Team Members░░░░░│██████\r\n * ██████│░░░░░░Steve░░░░░░░░░░Mandela░░░░░░░░░░Lennon░░░░░░░░░░░░░░░░│██████\r\n * ██████│░░░░░░░░░░░░░░░░Gabriel░░░░░░░░░Haruki░░░░░░░░░░░░░THANKS░TO│██████\r\n * ██████┼────────────────────────────────────────────────────────────┼██████\r\n * ██████████████████████████████████████████████████████████████████████████\r\n * █████████████████████████ https://microverse.club ████████████████████████\r\n * ██████████████████████████████████████████████████████████████████████████\r\n * ██████████████████████████████████████████████████████████████████████████\r\n */\r\ncontract Microverse is MicroverseBase {\r\n\r\n    event Refund(address indexed receiver, uint256 value);\r\n    event Withdraw(address indexed receiver, uint256 value);\r\n\r\n    GarageInterface internal garageInstance;\r\n    PortalGunInterFace internal portalGunInstance;\r\n    SpaceshipInterface internal spaceshipInstance;\r\n\r\n    address internal EvilMortyAddress;\r\n    address internal MCAddress;\r\n\r\n    modifier isEvilMortyToken() {\r\n        require(msg.sender == EvilMortyAddress);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address garageAddress,\r\n        address portalGunAddress,\r\n        address spaceshipAddress,\r\n        address MutualConstructorAddress)\r\n        public {\r\n\r\n        garageInstance = GarageInterface(garageAddress);\r\n        portalGunInstance = PortalGunInterFace(portalGunAddress);\r\n        spaceshipInstance = SpaceshipInterface(spaceshipAddress);\r\n        EvilMortyAddress = garageInstance.getEvilMortyAddress();\r\n        MCAddress = MutualConstructorAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Enable sending eth directly\r\n     */\r\n    function ()\r\n        public\r\n        payable {\r\n        if (msg.sender == owner) {\r\n            return;\r\n        }\r\n        buyMorty();\r\n    }\r\n\r\n    /**\r\n     * @dev Respond to Evil Morty token transfer\r\n     * @param _from address\r\n     * @param _value address\r\n     * @param _data extra data\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes _data)\r\n        public\r\n        wormholeOpened\r\n        isEvilMortyToken {\r\n        if (_from == owner) {\r\n            return;\r\n        }\r\n        portalGunInstance.participate(_from, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Check morty balance of a given address \r\n     * @param sender address\r\n     */\r\n    function balanceOfMorty(address sender)\r\n        external\r\n        view\r\n        returns (uint256) {\r\n        return portalGunInstance.balanceOfMorty(sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Check rick balance of a given address\r\n     * @param sender address\r\n     */\r\n    function balanceOfRick(address sender)\r\n        external\r\n        view\r\n        returns (uint256) {\r\n        return portalGunInstance.balanceOfRick(sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Check flurbo of a given address\r\n     * @param sender address\r\n     */\r\n    function balanceOfFlurbo(address sender)\r\n        external\r\n        view\r\n        returns (uint256) {\r\n        return portalGunInstance.balanceOfFlurbo(sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Agent for buying morties\r\n     * if the user sends more eth fund than needed, the exceedings will be sent back\r\n     * i.e., if there are only 1000 morties left, each morty costs 0.001 eth, and the\r\n     * user sends 3 eth, then, after the purchase (1000 * 0.001 = 1 eth), the remaining\r\n     * 2 eth will be refunded.\r\n     */\r\n    function buyMorty()\r\n        public\r\n        wormholeOpened\r\n        payable {\r\n\r\n        uint256 weiReturn = garageInstance.citadelBuy(msg.value, msg.sender);\r\n\r\n        if (weiReturn > 0) {\r\n            msg.sender.transfer(weiReturn);\r\n            emit Refund(msg.sender, weiReturn);\r\n        }\r\n\r\n        _addWeiAmount(address(this).balance.sub(previousWeiBalance));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer jackpot to the winner\r\n     * @param winner address\r\n     */\r\n    function transferJackpot(address winner)\r\n        external\r\n        onlyOwner\r\n        returns (bool) {\r\n        uint256 weiJackpot = address(this).balance;\r\n        emit Withdraw(winner, weiJackpot);\r\n        winner.transfer(weiJackpot);\r\n        previousWeiBalance = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Consume tickets to generate morty, rick, or flurbo\r\n     * @param seed A uuid4 in int format\r\n     */\r\n    function redeemLottery(uint256 seed)\r\n        external\r\n        onlyOwnerOrSuperuser {\r\n        return portalGunInstance.redeem(seed);\r\n    }\r\n\r\n    /**\r\n     * @dev Get number of tickets onhold\r\n     */\r\n    function getNumOfLotteryTickets()\r\n        external\r\n        view\r\n        returns (uint256) {\r\n        return portalGunInstance.numTickets();\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to update funds for jackpot and dividends\r\n     * @param weiAmount eth amount in wei\r\n     */\r\n    function _addWeiAmount(uint256 weiAmount)\r\n        internal\r\n        returns (bool) {\r\n\r\n        uint256 weiDividendPart = weiAmount.mul(percentWeiDividend).div(FACTOR); // 40%\r\n        uint256 weiJackpotPart = weiAmount.mul(percentWeiJackpot).div(FACTOR); // 10%\r\n        uint256 weiMCPart = weiAmount.mul(percentWeiMC).div(FACTOR); // 10%\r\n        uint256 weiEMFPart = weiAmount.sub(weiDividendPart).sub(weiJackpotPart).sub(weiMCPart);\r\n\r\n        address(spaceshipInstance).transfer(weiDividendPart);\r\n        MCAddress.transfer(weiMCPart);\r\n        address(owner).transfer(weiEMFPart);\r\n\r\n        previousWeiBalance = address(this).balance;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Before sending dividends, there are some preparations to be made.\r\n     * Spaceship needs to know the number of current Rick holders and \r\n     * the number of total Ricks. Any events causing changes in balance of Ricks\r\n     * need to be stopped, which means, the Portal Gun service is paused and,\r\n     * transferring of Ricks are paused.\r\n     */\r\n    function prepareDividends()\r\n        external\r\n        onlyOwnerOrSuperuser {\r\n\r\n        spaceshipInstance.updateSpaceshipStatus();\r\n        portalGunInstance.stopPortalGunAndRick();\r\n    }\r\n\r\n    /**\r\n     * @dev Send eth to all Rick holders\r\n     */\r\n    function transferDividends()\r\n        external\r\n        onlyOwnerOrSuperuser {\r\n        return spaceshipInstance.sendDividends();\r\n    }\r\n\r\n    /**\r\n     * @dev Get number of Rick holders in Spaceship\r\n     */\r\n    function getNumDividends()\r\n        external\r\n        view\r\n        returns (uint256) {\r\n        return spaceshipInstance.getNumDividends();\r\n    }\r\n\r\n    /**\r\n     * @dev Once the distribution of dividends is finished\r\n     * the system will be started\r\n     */\r\n    function finishDividends()\r\n        external\r\n        onlyOwnerOrSuperuser {\r\n        spaceshipInstance.startSpaceship();\r\n        portalGunInstance.startPortalGun();\r\n        portalGunInstance.startRick();\r\n    }\r\n\r\n    /**\r\n     * @dev Reset all Rick holders\r\n     */\r\n    function resetDividends()\r\n        external\r\n        onlyOwnerOrSuperuser {\r\n        return portalGunInstance.resetRick();\r\n    }\r\n\r\n    /**\r\n     * @dev Get number of Rick holders in Portal Gun\r\n     */\r\n    function getNumOfRickHolders()\r\n        external\r\n        view\r\n        returns (uint256) {\r\n        return portalGunInstance.getNumOfRickHolders();\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade Microverse's components\r\n     * in case of upgrade needed\r\n     */\r\n    function upgradeComponent(\r\n        uint256 _componentIndex,\r\n        address _address)\r\n        external\r\n        onlyOwner {\r\n\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(_address)\r\n        }\r\n\r\n        if (codeLength == 0) {\r\n            return;\r\n        }\r\n\r\n        if (_componentIndex == 1) {\r\n            garageInstance = GarageInterface(_address);\r\n            return;\r\n        }\r\n\r\n        if (_componentIndex == 2) {\r\n            portalGunInstance = PortalGunInterFace(_address);\r\n            return;\r\n        }\r\n\r\n        if (_componentIndex == 3) {\r\n            spaceshipInstance = SpaceshipInterface(_address);\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev refresh evil morty's address\r\n     */\r\n    function upgradeEvilMorty()\r\n        external\r\n        onlyOwner {\r\n        EvilMortyAddress = garageInstance.getEvilMortyAddress();\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextSeedHashed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyMorty\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPercentWeiMC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"transferJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentWeiDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumOfLotteryTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seedHash\",\"type\":\"uint256\"}],\"name\":\"setNextSeedHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentWeiMC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSuperuser\",\"type\":\"address\"}],\"name\":\"transferSuperuser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentWeiJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"prepareDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wormholeIsOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPercentWeiDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openWormhole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"balanceOfFlurbo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isSuperuser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousWeiBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumOfRickHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_componentIndex\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"upgradeComponent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgradeEvilMorty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeWormhole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPercentWeiJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"redeemLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_SUPERUSER\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"balanceOfMorty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"balanceOfRick\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"garageAddress\",\"type\":\"address\"},{\"name\":\"portalGunAddress\",\"type\":\"address\"},{\"name\":\"spaceshipAddress\",\"type\":\"address\"},{\"name\":\"MutualConstructorAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OpenWormhole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CloseWormhole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SystemChangePercentWeiDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SystemChangePercentWeiJackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SystemChangePercentWeiMC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Microverse","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a9a1b2b98da05023fca797cfa614c6552a9d1a680000000000000000000000000d5fc1bc6b61cf1931b75adfe4e235a47442b5800000000000000000000000008e3fa603db5624265c3c0902b68e7362a9f33dcc0000000000000000000000003a3c995ecc24d6605ecc41548ecfec6467ad611b","Library":"","SwarmSource":"bzzr://d712ec8042a28b76659d6b00993e3fe89d1794f3409b029e8e5e1bf7a6a21f83"}]}