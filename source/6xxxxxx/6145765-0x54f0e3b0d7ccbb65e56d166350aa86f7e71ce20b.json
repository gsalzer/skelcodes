{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/*\r\n\r\n    Copyright 2018, All rights reserved.\r\n     _      _\r\n    \\ \\    / / ___   ___  _ __\r\n     \\ \\  / / / _ \\ / _ \\| '_ \\\r\n      \\ \\/ / |  __/|  __/| | | |\r\n       \\__/   \\___| \\___||_| |_|\r\n\r\n    @title SafeMath\r\n    @author OpenZeppelin\r\n    @dev Math operations with safety checks that throw on error\r\n\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  using SafeMath for uint256;\r\n  uint256 public startdate;\r\n\r\n  function Ownable() public {\r\n\r\n    owner = msg.sender;\r\n    startdate = now;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n  mapping(address => uint256) private _lock_list_period;\r\n  mapping(address => bool) private _lock_list;\r\n  bool public paused = false;\r\n  mapping(address => uint256) internal _balances;\r\n  uint256 internal _tokenSupply;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n  /**\r\n   *\r\n   */\r\n\r\n\r\n\r\n  modifier isLockAddress() {\r\n    check_lock_period(msg.sender);\r\n    if(_lock_list[msg.sender]){\r\n        revert();\r\n    }\r\n\r\n    _;\r\n\r\n  }\r\n\r\n  function check_lock_period(address check_address) {\r\n      if(now > _lock_list_period[check_address] && _lock_list[check_address]){\r\n        _lock_list[check_address] = false;\r\n        _tokenSupply = _tokenSupply.add(_balances[check_address]);\r\n      }\r\n\r\n  }\r\n\r\n  function check_period(address check_address) constant public returns(uint256){\r\n      return _lock_list_period[check_address];\r\n\r\n  }\r\n\r\n  function check_lock(address check_address) constant public returns(bool){\r\n\r\n      return _lock_list[check_address];\r\n\r\n  }\r\n  /**\r\n   *\r\n   */\r\n  function set_lock_list(address lock_address, uint period) onlyOwner external {\r\n      _lock_list_period[lock_address] = startdate + (period * 1 days);\r\n      _lock_list[lock_address]  = true;\r\n      _tokenSupply = _tokenSupply.sub(_balances[lock_address]);\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/ERC20Token.sol\r\n\r\n/*\r\n\r\n    Copyright 2018, All rights reserved.\r\n     _      _\r\n    \\ \\    / / ___   ___  _ __\r\n     \\ \\  / / / _ \\ / _ \\| '_ \\\r\n      \\ \\/ / |  __/|  __/| | | |\r\n       \\__/   \\___| \\___||_| |_|\r\n\r\n    @title Veen Token Contract.\r\n    @description ERC-20 Interface\r\n\r\n*/\r\n\r\ninterface ERC20Token {\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// File: contracts/ERC223.sol\r\n\r\ninterface ERC223 {\r\n\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/Receiver_Interface.sol\r\n\r\n/*\r\n * Contract that is working with ERC223 tokens\r\n */\r\n\r\n contract ContractReceiver {\r\n\r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n\r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n      TKN memory tkn;\r\n      tkn.sender = _from;\r\n      tkn.value = _value;\r\n      tkn.data = _data;\r\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n      tkn.sig = bytes4(u);\r\n\r\n      /* tkn variable is analogue of msg variable of Ether transaction\r\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n      *  tkn.data is data of token transaction   (analogue of msg.data)\r\n      *  tkn.sig is 4 bytes signature of function\r\n      *  if data of token transaction is a function execution\r\n      */\r\n    }\r\n}\r\n\r\n// File: contracts/Veen.sol\r\n\r\n/*\r\n    Copyright 2018, All rights reserved.\r\n     _      _\r\n    \\ \\    / / ___   ___  _ __\r\n     \\ \\  / / / _ \\ / _ \\| '_ \\\r\n      \\ \\/ / |  __/|  __/| | | |\r\n       \\__/   \\___| \\___||_| |_|\r\n\r\n    @title Veen Token Contract.\r\n    @description Veen token is a ERC20-compliant token.\r\n\r\n*/\r\n\r\ncontract Veen is ERC20Token, Pausable, ERC223{\r\n\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = \"Veen\";\r\n    string public constant symbol = \"VEEN\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint private _totalSupply;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowed;\r\n    event MintedLog(address to, uint256 amount);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\r\n    function Veen() public {\r\n        _tokenSupply = 0;\r\n        _totalSupply = 15000000000 * (uint256(10) ** decimals);\r\n\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return _tokenSupply;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) onlyOwner public returns (bool){\r\n\r\n        amount = amount * (uint256(10) ** decimals);\r\n        if(_totalSupply + 1 > (_tokenSupply+amount)){\r\n            _tokenSupply = _tokenSupply.add(amount);\r\n            _balances[to]= _balances[to].add(amount);\r\n            emit MintedLog(to, amount);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function dist_list_set(address[] dist_list, uint256[] token_list) onlyOwner external{\r\n\r\n        for(uint i=0; i < dist_list.length ;i++){\r\n            transfer(dist_list[i],token_list[i]);\r\n        }\r\n\r\n    }\r\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {\r\n        return _balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address to, uint tokens) whenNotPaused isLockAddress public returns(bool success){\r\n    bytes memory empty;\r\n    \tif(isContract(to)) {\r\n        \treturn transferToContract(to, tokens, empty);\r\n    \t}\r\n    \telse {\r\n        \treturn transferToAddress(to, tokens, empty);\r\n    \t}\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 tokens) public returns (bool success) {\r\n\r\n        if (tokens > 0 && balanceOf(msg.sender) >= tokens) {\r\n            _allowed[msg.sender][spender] = tokens;\r\n            emit Approval(msg.sender, spender, tokens);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return _allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\r\n        if (tokens > 0 && balanceOf(from) >= tokens && _allowed[from][msg.sender] >= tokens) {\r\n            _balances[from] = _balances[from].sub(tokens);\r\n            _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokens);\r\n            _balances[to] = _balances[to].add(tokens);\r\n            emit Transfer(msg.sender, to, tokens);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function burn(uint256 tokens) public returns (bool success) {\r\n        if ( tokens > 0 && balanceOf(msg.sender) >= tokens ) {\r\n            _balances[msg.sender] = _balances[msg.sender].sub(tokens);\r\n            _tokenSupply = _tokenSupply.sub(tokens);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    _balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    _balances[_to] = balanceOf(_to).add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    _balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    _balances[_to] = balanceOf(_to).add(_value);\r\n    ContractReceiver receiver = ContractReceiver(_to);\r\n    receiver.tokenFallback(msg.sender, _value, _data);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n}\r\n\r\n\r\n\r\n    function isContract(address _addr) view returns (bool is_contract){\r\n      uint length;\r\n      assembly {\r\n            length := extcodesize(_addr)\r\n      }\r\n      return (length>0);\r\n    }\r\n\r\n    function () public payable {\r\n        throw;\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"is_contract\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lock_address\",\"type\":\"address\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"set_lock_list\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"check_address\",\"type\":\"address\"}],\"name\":\"check_lock_period\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"check_address\",\"type\":\"address\"}],\"name\":\"check_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dist_list\",\"type\":\"address[]\"},{\"name\":\"token_list\",\"type\":\"uint256[]\"}],\"name\":\"dist_list_set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"check_address\",\"type\":\"address\"}],\"name\":\"check_lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Veen","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://774ddee1f786e93a9ee8d8e42a45fd71c3b1627270af7179a64059df0d43ba5e"}]}