{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n    Trust based betting system, affiliated with NeutrinoTokenStandard contract.\r\n    Rules:\r\n        Welcome Fee                      -  25%, including:\r\n            Boss                         -  10%\r\n            Yearly jackpot               -   2%\r\n            Referral bonus               -   8%\r\n            NTS funding                  -   5%\r\n        Exit Fee                         - FREE\r\n*/\r\n\r\ncontract NeutrinoTokenStandard {\r\n    function fund() external payable;\r\n}\r\n\r\ncontract ReferralPayStation {\r\n    event OnGotRef (\r\n        address indexed ref,\r\n        uint256 value,\r\n        uint256 timestamp,\r\n        address indexed player\r\n    );\r\n    \r\n    event OnWithdraw (\r\n        address indexed ref,\r\n        uint256 value,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    event OnRob (\r\n        address indexed ref,\r\n        uint256 value,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    event OnRobAll (\r\n        uint256 value,\r\n        uint256 timestamp  \r\n    );\r\n    \r\n    address owner;\r\n    mapping(address => uint256) public refBalance;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function put(address ref, address player) public payable {\r\n        require(msg.value > 0);\r\n        refBalance[ref] += msg.value;\r\n        \r\n        emit OnGotRef(ref, msg.value, now, player);\r\n    }\r\n    \r\n    function withdraw() public {\r\n        require(refBalance[msg.sender] > 0);\r\n        uint256 value = refBalance[msg.sender];\r\n        refBalance[msg.sender] = 0;\r\n        msg.sender.transfer(value);\r\n        emit OnWithdraw(msg.sender, value, now);\r\n    }\r\n    \r\n    /* admin */\r\n    function rob(address ref) onlyOwner public {\r\n        require(refBalance[ref] > 0);\r\n        uint256 value = refBalance[ref];\r\n        refBalance[ref] = 0;\r\n        owner.transfer(value);\r\n        emit OnRob(ref, value, now);\r\n    }\r\n    \r\n    function robAll() onlyOwner public {\r\n        uint256 balance = address(this).balance;\r\n        owner.transfer(balance);\r\n        emit OnRobAll(balance, now);\r\n    }\r\n}\r\n\r\ncontract BitcoinPriceBetM {\r\n    event OnBet (\r\n        address indexed player,\r\n        address indexed ref,\r\n        uint256 indexed timestamp,\r\n        uint256 value,\r\n        uint256 betPrice,\r\n        uint256 extra,\r\n        uint256 refBonus,\r\n        uint256 amount\r\n    );\r\n    \r\n    event OnWithdraw (\r\n        address indexed referrer,\r\n        uint256 value\r\n    );\r\n    \r\n    event OnWithdrawWin (\r\n        address indexed player,\r\n        uint256 value\r\n    );\r\n    \r\n    event OnPrizePayed (\r\n        address indexed player,\r\n        uint256 value,\r\n        uint8 place,\r\n        uint256 betPrice,\r\n        uint256 amount,\r\n        uint256 betValue\r\n    );\r\n    \r\n    event OnNTSCharged (\r\n        uint256 value\r\n    );\r\n    \r\n    event OnYJPCharged (\r\n        uint256 value  \r\n    );\r\n    \r\n    event OnGotMoney (\r\n        address indexed source,\r\n        uint256 value\r\n    );\r\n    \r\n    event OnCorrect (\r\n        uint256 value\r\n    );\r\n    \r\n    event OnPrizeFunded (\r\n        uint256 value\r\n    );\r\n    \r\n    event OnSendRef (\r\n        address indexed ref,\r\n        uint256 value,\r\n        uint256 timestamp,\r\n        address indexed player,\r\n        address indexed payStation\r\n    );\r\n    \r\n    event OnNewRefPayStation (\r\n        address newAddress,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnBossPayed (\r\n        address indexed boss,\r\n        uint256 value,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    string constant public name = \"BitcoinPrice.Bet Monthly\";\r\n    string constant public symbol = \"BPBM\";\r\n    address public owner;\r\n    address constant internal boss1 = 0x42cF5e102dECCf8d89E525151c5D5bbEAc54200d;\r\n    address constant internal boss2 = 0x8D86E611ef0c054FdF04E1c744A8cEFc37F00F81;\r\n    NeutrinoTokenStandard constant internal neutrino = NeutrinoTokenStandard(0xad0a61589f3559026F00888027beAc31A5Ac4625); \r\n    ReferralPayStation public refPayStation = ReferralPayStation(0x4100dAdA0D80931008a5f7F5711FFEb60A8071BA);\r\n    \r\n    uint256 constant public betStep = 0.1 ether;\r\n    uint256 public betStart;\r\n    uint256 public betFinish;\r\n    \r\n    uint8 constant bossFee = 10;\r\n    uint8 constant yjpFee = 2;\r\n    uint8 constant refFee = 8;\r\n    uint8 constant ntsFee = 5;\r\n    \r\n    mapping(address => uint256) public winBalance;\r\n    uint256 public winBalanceTotal = 0;\r\n    uint256 public bossBalance = 0;\r\n    uint256 public jackpotBalance = 0;\r\n    uint256 public ntsBalance = 0;\r\n    uint256 public prizeBalance = 0;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor(uint256 _betStart, uint256 _betFinish) public payable {\r\n        owner = msg.sender;\r\n        prizeBalance = msg.value;\r\n        betStart = _betStart;   // 1545581345 == 23 Dec 2018\r\n        betFinish = _betFinish; // 1546290000 == 1 Jan 2019 GMT 00:00:00\r\n    }\r\n    \r\n    function() public payable {\r\n        emit OnGotMoney(msg.sender, msg.value);\r\n    }\r\n    \r\n    function canMakeBet() public view returns (bool) {\r\n        return now >= betStart && now <= betFinish;\r\n    }\r\n    \r\n    function makeBet(uint256 betPrice, address ref) public payable {\r\n        require(now >= betStart && now <= betFinish);\r\n        \r\n        uint256 value = (msg.value / betStep) * betStep;\r\n        uint256 extra = msg.value - value;\r\n        \r\n        require(value > 0);\r\n        jackpotBalance += extra;\r\n        \r\n        uint8 welcomeFee = bossFee + yjpFee + ntsFee;\r\n        uint256 refBonus = 0;\r\n        if (ref != 0x0) {\r\n            welcomeFee += refFee;\r\n            refBonus = value * refFee / 100;\r\n\r\n            refPayStation.put.value(refBonus)(ref, msg.sender);\r\n            emit OnSendRef(ref, refBonus, now, msg.sender, address(refPayStation));\r\n        }\r\n        \r\n        uint256 taxedValue = value - value * welcomeFee / 100;\r\n        prizeBalance += taxedValue;\r\n    \r\n        bossBalance += value * bossFee / 100;\r\n        jackpotBalance += value * yjpFee / 100;\r\n        ntsBalance += value * ntsFee / 100;\r\n            \r\n        emit OnBet(msg.sender, ref, block.timestamp, value, betPrice, extra, refBonus, value / betStep);\r\n    }\r\n    \r\n    function withdrawWin() public {\r\n        require(winBalance[msg.sender] > 0);\r\n        uint256 value = winBalance[msg.sender];\r\n        winBalance[msg.sender] = 0;\r\n        winBalanceTotal -= value;\r\n        msg.sender.transfer(value);\r\n        emit OnWithdrawWin(msg.sender, value);\r\n    }\r\n    \r\n    /* Admin */\r\n    function payPrize(address player, uint256 value, uint8 place, uint256 betPrice, uint256 amount, uint256 betValue) onlyOwner public {\r\n        require(value <= prizeBalance);\r\n        \r\n        winBalance[player] += value;\r\n        winBalanceTotal += value;\r\n        prizeBalance -= value;\r\n        emit OnPrizePayed(player, value, place, betPrice, amount, betValue);   \r\n    }\r\n    \r\n    function payPostDrawRef(address ref, address player, uint256 value) onlyOwner public {\r\n        require(value <= prizeBalance);\r\n        \r\n        prizeBalance -= value;\r\n        \r\n        refPayStation.put.value(value)(ref, player);\r\n        emit OnSendRef(ref, value, now, player, address(refPayStation));\r\n    }\r\n    \r\n    function payBoss(uint256 value) onlyOwner public {\r\n        require(value <= bossBalance);\r\n        if (value == 0) value = bossBalance;\r\n        uint256 value1 = value * 90 / 100;\r\n        uint256 value2 = value * 10 / 100;\r\n        \r\n        if (boss1.send(value1)) {\r\n            bossBalance -= value1;\r\n            emit OnBossPayed(boss1, value1, now);\r\n        }\r\n        \r\n        if (boss2.send(value2)) {\r\n            bossBalance -= value2;\r\n            emit OnBossPayed(boss2, value2, now);\r\n        }\r\n    }\r\n    \r\n    function payNTS() onlyOwner public {\r\n        require(ntsBalance > 0);\r\n        uint256 _ntsBalance = ntsBalance;\r\n        \r\n        neutrino.fund.value(ntsBalance)();\r\n        ntsBalance = 0;\r\n        emit OnNTSCharged(_ntsBalance);\r\n    }\r\n    \r\n    function payYearlyJackpot(address yearlyContract) onlyOwner public {\r\n        require(jackpotBalance > 0);\r\n\r\n        if (yearlyContract.call.value(jackpotBalance).gas(50000)()) {\r\n            jackpotBalance = 0;\r\n            emit OnYJPCharged(jackpotBalance);\r\n        }\r\n    }\r\n    \r\n    function correct() onlyOwner public {\r\n        uint256 counted = winBalanceTotal + bossBalance + jackpotBalance + ntsBalance + prizeBalance;\r\n        uint256 uncounted = address(this).balance - counted;\r\n        \r\n        require(uncounted > 0);\r\n        \r\n        bossBalance += uncounted;\r\n        emit OnCorrect(uncounted);\r\n    }\r\n    \r\n    function fundPrize() onlyOwner public {\r\n        uint256 counted = winBalanceTotal + bossBalance + jackpotBalance + ntsBalance + prizeBalance;\r\n        uint256 uncounted = address(this).balance - counted;\r\n        \r\n        require(uncounted > 0);\r\n        \r\n        prizeBalance += uncounted;\r\n        emit OnPrizeFunded(uncounted);\r\n    }\r\n    \r\n    function newRefPayStation(address newAddress) onlyOwner public {\r\n        refPayStation = ReferralPayStation(newAddress);\r\n        \r\n        emit OnNewRefPayStation(newAddress, now);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"rob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"robAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"put\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"OnGotRef\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnRob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnRobAll\",\"type\":\"event\"}]","ContractName":"ReferralPayStation","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1a94189c27452e0f1d45c34a7524b21fa9c7e87ba51b143eaff136d46831be98"}]}