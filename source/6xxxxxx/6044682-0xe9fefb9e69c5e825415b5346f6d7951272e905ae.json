{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**************************************************************\r\n * @title Scale Token Contract\r\n * @file Scale.sol\r\n * @author Jared Downing and Kane Thomas of the Scale Network\r\n * @version 1.0\r\n *\r\n * @section DESCRIPTION\r\n *\r\n * This is an ERC20-based token with staking and inflationary functionality.\r\n *\r\n *************************************************************/\r\n\r\n//////////////////////////////////\r\n/// OpenZeppelin library imports\r\n//////////////////////////////////\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n * Modified to allow minting for non-owner addresses\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) internal returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Ether\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\r\n * in the contract, it will allow the owner to reclaim this ether.\r\n * @notice Ether can still be send to this contract by:\r\n * calling functions labeled `payable`\r\n * `selfdestruct(contract_address)`\r\n * mining directly to the contract address\r\n*/\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  constructor() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    assert(owner.send(address(this).balance));\r\n  }\r\n}\r\n\r\n//////////////////////////////////\r\n/// Scale Token\r\n//////////////////////////////////\r\n\r\ncontract Scale is MintableToken, HasNoEther {\r\n\r\n    // Libraries\r\n    using SafeMath for uint;\r\n\r\n    //////////////////////\r\n    // Token Information\r\n    //////////////////////\r\n    string public constant name = \"SCALE\";\r\n    string public constant symbol = \"SCALE\";\r\n    uint8 public constant  decimals = 18;\r\n\r\n    ///////////////////////////////////////////////////////////\r\n    // Variables For Staking and Pooling\r\n    ///////////////////////////////////////////////////////////\r\n\r\n    // -- Pool Minting Rates and Percentages -- //\r\n    // Pool for Scale distribution to rewards pool\r\n    // Set to 0 to prohibit issuing to the pool before it is assigned\r\n    address public pool = address(0);\r\n\r\n    // Pool and Owner minted tokens per second\r\n    uint public poolMintRate;\r\n    uint public ownerMintRate;\r\n\r\n    // Amount of Scale to be staked to the pool, staking, and mint, as calculated through their percentages\r\n    uint public poolMintAmount;\r\n    uint public stakingMintAmount;\r\n    uint public ownerMintAmount;\r\n\r\n    // Scale distribution percentages\r\n    uint public poolPercentage = 70;\r\n    uint public ownerPercentage = 5;\r\n    uint public stakingPercentage = 25;\r\n\r\n    // Last time minted for owner and pool\r\n    uint public ownerTimeLastMinted;\r\n    uint public poolTimeLastMinted;\r\n\r\n    // -- Staking -- //\r\n    // Minted tokens per second\r\n    uint public stakingMintRate;\r\n\r\n    // Total Scale currently staked\r\n    uint public totalScaleStaked;\r\n\r\n    // Mapping of the timestamp => totalStaking that is created each time an address stakes or unstakes\r\n    mapping (uint => uint) totalStakingHistory;\r\n\r\n    // Variable for staking accuracy. Set to 86400 for seconds in a day so that staking gains are based on the day an account begins staking.\r\n    uint timingVariable = 86400;\r\n\r\n    // Address staking information\r\n    struct AddressStakeData {\r\n        uint stakeBalance;\r\n        uint initialStakeTime;\r\n    }\r\n\r\n    // Track all tokens staked\r\n    mapping (address => AddressStakeData) public stakeBalances;\r\n\r\n    // -- Inflation -- //\r\n    // Inflation rate begins at 100% per year and decreases by 15% per year until it reaches 10% where it decreases by 0.5% per year\r\n    uint256 inflationRate = 1000;\r\n\r\n    // Used to manage when to inflate. Allowed to inflate once per year until the rate reaches 1%.\r\n    uint256 public lastInflationUpdate;\r\n\r\n    // -- Events -- //\r\n    // Fired when tokens are staked\r\n    event Stake(address indexed staker, uint256 value);\r\n    // Fired when tokens are unstaked\r\n    event Unstake(address indexed unstaker, uint256 stakedAmount, uint256 stakingGains);\r\n\r\n    //////////////////////////////////////////////////\r\n    /// Scale Token Functionality\r\n    //////////////////////////////////////////////////\r\n\r\n    /// @dev Scale token constructor\r\n    constructor() public {\r\n        // Assign owner\r\n        owner = msg.sender;\r\n\r\n        // Assign initial owner supply\r\n        uint _initOwnerSupply = 10000000 ether;\r\n        // Mint given to owner only one-time\r\n        bool _success = mint(msg.sender, _initOwnerSupply);\r\n        // Require minting success\r\n        require(_success);\r\n\r\n        // Set pool and owner last minted to ensure extra coins are not minted by either\r\n        ownerTimeLastMinted = now;\r\n        poolTimeLastMinted = now;\r\n\r\n        // Set minting amount for pool, staking, and owner over the course of 1 year\r\n        poolMintAmount = _initOwnerSupply.mul(poolPercentage).div(100);\r\n        ownerMintAmount = _initOwnerSupply.mul(ownerPercentage).div(100);\r\n        stakingMintAmount = _initOwnerSupply.mul(stakingPercentage).div(100);\r\n\r\n        // One year in seconds\r\n        uint _oneYearInSeconds = 31536000 ether;\r\n\r\n        // Set the rate of coins minted per second for the pool, owner, and global staking\r\n        poolMintRate = calculateFraction(poolMintAmount, _oneYearInSeconds, decimals);\r\n        ownerMintRate = calculateFraction(ownerMintAmount, _oneYearInSeconds, decimals);\r\n        stakingMintRate = calculateFraction(stakingMintAmount, _oneYearInSeconds, decimals);\r\n\r\n        // Set the last time inflation was update to now so that the next time it can be updated is 1 year from now\r\n        lastInflationUpdate = now;\r\n    }\r\n\r\n    /////////////\r\n    // Inflation\r\n    /////////////\r\n\r\n    /// @dev the inflation rate begins at 100% and decreases by 15% every year until it reaches 10%\r\n    /// at 10% the rate begins to decrease by 0.5% until it reaches 1%\r\n    function adjustInflationRate() private {\r\n\r\n\r\n      // Make sure adjustInflationRate cannot be called for at least another year\r\n      lastInflationUpdate = now;\r\n\r\n      // Decrease inflation rate by 15% each year\r\n      if (inflationRate > 100) {\r\n\r\n        inflationRate = inflationRate.sub(300);\r\n      }\r\n      // Inflation rate reaches 10%. Decrease inflation rate by 0.5% from here on out until it reaches 1%.\r\n      else if (inflationRate > 10) {\r\n\r\n        inflationRate = inflationRate.sub(5);\r\n      }\r\n\r\n      // Calculate new mint amount of Scale that should be created per year.\r\n      // Example Inflation Past Year 1 for the poolMintAmount: 16M * 0.85 * 0.7 = 9,520,000\r\n      poolMintAmount = totalSupply.mul(inflationRate).div(1000).mul(poolPercentage).div(100);\r\n      ownerMintAmount = totalSupply.mul(inflationRate).div(1000).mul(ownerPercentage).div(100);\r\n      stakingMintAmount = totalSupply.mul(inflationRate).div(1000).mul(stakingPercentage).div(100);\r\n\r\n        // Adjust Scale created per-second for each rate\r\n        poolMintRate = calculateFraction(poolMintAmount, 31536000 ether, decimals);\r\n        ownerMintRate = calculateFraction(ownerMintAmount, 31536000 ether, decimals);\r\n        stakingMintRate = calculateFraction(stakingMintAmount, 31536000 ether, decimals);\r\n    }\r\n\r\n    /// @dev anyone can call this function to update the inflation rate yearly\r\n    function updateInflationRate() public {\r\n\r\n      // Require 1 year to have passed for every inflation adjustment\r\n      require(now.sub(lastInflationUpdate) >= 31536000);\r\n\r\n      adjustInflationRate();\r\n\r\n    }\r\n\r\n    /////////////\r\n    // Staking\r\n    /////////////\r\n\r\n    /// @dev staking function which allows users to stake an amount of tokens to gain interest for up to 30 days\r\n    /// @param _stakeAmount how many tokens a user wants to stake\r\n    function stakeScale(uint _stakeAmount) external {\r\n\r\n        // Require that tokens are staked successfully\r\n        require(stake(msg.sender, _stakeAmount));\r\n    }\r\n\r\n    /// @dev stake for a seperate address\r\n    /// @param _stakeAmount how many tokens a user wants to stake\r\n    function stakeFor(address _user, uint _stakeAmount) external {\r\n\r\n      // You can only stake tokens for another user if they have not already staked tokens\r\n      require(stakeBalances[_user].stakeBalance == 0);\r\n\r\n      // Transfer Scale from to the user\r\n      transfer( _user, _stakeAmount);\r\n\r\n      // Stake for the user\r\n      stake(_user, _stakeAmount);\r\n    }\r\n\r\n    /// @dev stake function reduces the user's total available balance and adds it to their staking balance\r\n    /// @param _value how many tokens a user wants to stake\r\n    function stake(address _user, uint256 _value) private returns (bool success) {\r\n\r\n        // You can only stake as many tokens as you have\r\n        require(_value <= balances[_user]);\r\n        // You can only stake tokens if you have not already staked tokens\r\n        require(stakeBalances[_user].stakeBalance == 0);\r\n\r\n        // Subtract stake amount from regular token balance\r\n        balances[_user] = balances[_user].sub(_value);\r\n\r\n        // Add stake amount to staked balance\r\n        stakeBalances[_user].stakeBalance = _value;\r\n\r\n        // Increment the staking staked tokens value\r\n        totalScaleStaked = totalScaleStaked.add(_value);\r\n\r\n        // Save the time that the stake started\r\n        stakeBalances[_user].initialStakeTime = now.div(timingVariable);\r\n\r\n        // Set the new staking history\r\n        setTotalStakingHistory();\r\n\r\n        // Fire an event to tell the world of the newly staked tokens\r\n        emit Stake(_user, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev returns how much Scale a user has earned so far\r\n    /// @param _now is passed in to allow for a gas-free analysis\r\n    /// @return staking gains based on the amount of time passed since staking began\r\n    function getStakingGains(uint _now) view public returns (uint) {\r\n\r\n        if (stakeBalances[msg.sender].stakeBalance == 0) {\r\n\r\n          return 0;\r\n        }\r\n\r\n        return calculateStakeGains(_now);\r\n    }\r\n\r\n    /// @dev allows users to reclaim any staked tokens\r\n    /// @return bool on success\r\n    function unstake() external returns (bool) {\r\n\r\n        // Require that there was some amount vested\r\n        require(stakeBalances[msg.sender].stakeBalance > 0);\r\n\r\n        // Require that at least 7 timing variables have passed (days)\r\n        require(now.div(timingVariable).sub(stakeBalances[msg.sender].initialStakeTime) >= 7);\r\n\r\n        // Calculate tokens to mint\r\n        uint _tokensToMint = calculateStakeGains(now);\r\n\r\n        balances[msg.sender] = balances[msg.sender].add(stakeBalances[msg.sender].stakeBalance);\r\n\r\n        // Subtract stake balance from totalScaleStaked\r\n        totalScaleStaked = totalScaleStaked.sub(stakeBalances[msg.sender].stakeBalance);\r\n\r\n        // Mint the new tokens to the sender\r\n        mint(msg.sender, _tokensToMint);\r\n\r\n        // Scale unstaked event\r\n        emit Unstake(msg.sender, stakeBalances[msg.sender].stakeBalance, _tokensToMint);\r\n\r\n        // Clear out stored data from mapping\r\n        stakeBalances[msg.sender].stakeBalance = 0;\r\n        stakeBalances[msg.sender].initialStakeTime = 0;\r\n\r\n        // Set this every time someone adjusts the totalScaleStaking amount\r\n        setTotalStakingHistory();\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Helper function to claimStake that modularizes the minting via staking calculation\r\n    /// @param _now when the user stopped staking. Passed in as a variable to allow for checking without using gas from the getStakingGains function.\r\n    /// @return uint for total coins to be minted\r\n    function calculateStakeGains(uint _now) view private returns (uint mintTotal)  {\r\n\r\n      uint _nowAsTimingVariable = _now.div(timingVariable);    // Today as a unique value in unix time\r\n      uint _initialStakeTimeInVariable = stakeBalances[msg.sender].initialStakeTime; // When the user started staking as a unique day in unix time\r\n      uint _timePassedSinceStakeInVariable = _nowAsTimingVariable.sub(_initialStakeTimeInVariable); // How much time has passed, in days, since the user started staking.\r\n      uint _stakePercentages = 0; // Keeps an additive track of the user's staking percentages over time\r\n      uint _tokensToMint = 0; // How many new Scale tokens to create\r\n      uint _lastUsedVariable;  // Last day the totalScaleStaked was updated\r\n\r\n      // Average this msg.sender's relative percentage ownership of totalScaleStaked throughout each day since they started staking\r\n      for (uint i = _initialStakeTimeInVariable; i < _nowAsTimingVariable; i++) {\r\n\r\n        // If the day exists add it to the percentages\r\n        if (totalStakingHistory[i] != 0) {\r\n\r\n           // If the day does exist add it to the number to be later averaged as a total average percentage of total staking\r\n          _stakePercentages = _stakePercentages.add(calculateFraction(stakeBalances[msg.sender].stakeBalance, totalStakingHistory[i], decimals));\r\n\r\n          // Set this as the last day someone staked\r\n          _lastUsedVariable = totalStakingHistory[i];\r\n        }\r\n        else {\r\n\r\n          // Use the last day found in the totalStakingHistory mapping\r\n          _stakePercentages = _stakePercentages.add(calculateFraction(stakeBalances[msg.sender].stakeBalance, _lastUsedVariable, decimals));\r\n        }\r\n\r\n      }\r\n\r\n        // Get the account's average percentage staked of the total stake over the course of all days they have been staking\r\n        uint _stakePercentageAverage = calculateFraction(_stakePercentages, _timePassedSinceStakeInVariable, 0);\r\n\r\n        // Calculate this account's mint rate per second while staking\r\n        uint _finalMintRate = stakingMintRate.mul(_stakePercentageAverage);\r\n\r\n        // Account for 18 decimals when calculating the amount of tokens to mint\r\n        _finalMintRate = _finalMintRate.div(1 ether);\r\n\r\n        // Calculate total tokens to be minted. Multiply by timingVariable to convert back to seconds.\r\n        if (_timePassedSinceStakeInVariable >= 365) {\r\n\r\n          // Tokens were staked for the maximum amount of time, one year. Give them one year's worth of tokens. ( this limit is placed to avoid gas limits)\r\n          _tokensToMint = calculateMintTotal(timingVariable.mul(365), _finalMintRate);\r\n        }\r\n        else {\r\n\r\n          // Tokens were staked for less than the maximum amount of time\r\n          _tokensToMint = calculateMintTotal(_timePassedSinceStakeInVariable.mul(timingVariable), _finalMintRate);\r\n        }\r\n\r\n        return  _tokensToMint;\r\n    }\r\n\r\n    /// @dev set the new totalStakingHistory mapping to the current timestamp and totalScaleStaked\r\n    function setTotalStakingHistory() private {\r\n\r\n      // Get now in terms of the variable staking accuracy (days in Scale's case)\r\n      uint _nowAsTimingVariable = now.div(timingVariable);\r\n\r\n      // Set the totalStakingHistory as a timestamp of the totalScaleStaked today\r\n      totalStakingHistory[_nowAsTimingVariable] = totalScaleStaked;\r\n    }\r\n\r\n    /// @dev Allows user to check their staked balance\r\n    /// @return staked balance\r\n    function getStakedBalance() view external returns (uint stakedBalance) {\r\n\r\n        return stakeBalances[msg.sender].stakeBalance;\r\n    }\r\n\r\n    /////////////\r\n    // Scale Owner Claiming\r\n    /////////////\r\n\r\n    /// @dev allows contract owner to claim their mint\r\n    function ownerClaim() external onlyOwner {\r\n\r\n        require(now > ownerTimeLastMinted);\r\n\r\n        uint _timePassedSinceLastMint; // The amount of time passed since the owner claimed in seconds\r\n        uint _tokenMintCount; // The amount of new tokens to mint\r\n        bool _mintingSuccess; // The success of minting the new Scale tokens\r\n\r\n        // Calculate the number of seconds that have passed since the owner last took a claim\r\n        _timePassedSinceLastMint = now.sub(ownerTimeLastMinted);\r\n\r\n        assert(_timePassedSinceLastMint > 0);\r\n\r\n        // Determine the token mint amount, determined from the number of seconds passed and the ownerMintRate\r\n        _tokenMintCount = calculateMintTotal(_timePassedSinceLastMint, ownerMintRate);\r\n\r\n        // Mint the owner's tokens; this also increases totalSupply\r\n        _mintingSuccess = mint(msg.sender, _tokenMintCount);\r\n\r\n        require(_mintingSuccess);\r\n\r\n        // New minting was a success. Set last time minted to current block.timestamp (now)\r\n        ownerTimeLastMinted = now;\r\n    }\r\n\r\n    ////////////////////////////////\r\n    // Scale Pool Distribution\r\n    ////////////////////////////////\r\n\r\n    /// @dev anyone can call this function that mints Scale to the pool dedicated to Scale distribution to rewards pool\r\n    function poolIssue() public {\r\n\r\n        // Do not allow tokens to be minted to the pool until the pool is set\r\n        require(pool != address(0));\r\n\r\n        // Make sure time has passed since last minted to pool\r\n        require(now > poolTimeLastMinted);\r\n        require(pool != address(0));\r\n\r\n        uint _timePassedSinceLastMint; // The amount of time passed since the pool claimed in seconds\r\n        uint _tokenMintCount; // The amount of new tokens to mint\r\n        bool _mintingSuccess; // The success of minting the new Scale tokens\r\n\r\n        // Calculate the number of seconds that have passed since the owner last took a claim\r\n        _timePassedSinceLastMint = now.sub(poolTimeLastMinted);\r\n\r\n        assert(_timePassedSinceLastMint > 0);\r\n\r\n        // Determine the token mint amount, determined from the number of seconds passed and the ownerMintRate\r\n        _tokenMintCount = calculateMintTotal(_timePassedSinceLastMint, poolMintRate);\r\n\r\n        // Mint the owner's tokens; this also increases totalSupply\r\n        _mintingSuccess = mint(pool, _tokenMintCount);\r\n\r\n        require(_mintingSuccess);\r\n\r\n        // New minting was a success! Set last time minted to current block.timestamp (now)\r\n        poolTimeLastMinted = now;\r\n    }\r\n\r\n    /// @dev sets the address for the rewards pool\r\n    /// @param _newAddress pool Address\r\n    function setPool(address _newAddress) public onlyOwner {\r\n\r\n        pool = _newAddress;\r\n    }\r\n\r\n    ////////////////////////////////\r\n    // Helper Functions\r\n    ////////////////////////////////\r\n\r\n    /// @dev calculateFraction allows us to better handle the Solidity ugliness of not having decimals as a native type\r\n    /// @param _numerator is the top part of the fraction we are calculating\r\n    /// @param _denominator is the bottom part of the fraction we are calculating\r\n    /// @param _precision tells the function how many significant digits to calculate out to\r\n    /// @return quotient returns the result of our fraction calculation\r\n    function calculateFraction(uint _numerator, uint _denominator, uint _precision) pure private returns(uint quotient) {\r\n        // Take passed value and expand it to the required precision\r\n        _numerator = _numerator.mul(10 ** (_precision + 1));\r\n        // Handle last-digit rounding\r\n        uint _quotient = ((_numerator.div(_denominator)) + 5) / 10;\r\n        return (_quotient);\r\n    }\r\n\r\n    /// @dev Determines the amount of Scale to create based on the number of seconds that have passed\r\n    /// @param _timeInSeconds is the time passed in seconds to mint for\r\n    /// @return uint with the calculated number of new tokens to mint\r\n    function calculateMintTotal(uint _timeInSeconds, uint _mintRate) pure private returns(uint mintAmount) {\r\n        // Calculates the amount of tokens to mint based upon the number of seconds passed\r\n        return(_timeInSeconds.mul(_mintRate));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"stakingMintAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"stakeScale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unstake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeBalances\",\"outputs\":[{\"name\":\"stakeBalance\",\"type\":\"uint256\"},{\"name\":\"initialStakeTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolTimeLastMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateInflationRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingMintRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"getStakingGains\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"poolIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInflationUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakedBalance\",\"outputs\":[{\"name\":\"stakedBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolMintAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolMintRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerMintRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTimeLastMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerMintAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalScaleStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unstaker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakingGains\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Scale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://63ca74021b19bc63ba944ea970b189efacfa43fc38bcd4f517f4ea998858b6b3"}]}