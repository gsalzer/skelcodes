{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 public releaseTime;\r\n\r\n  constructor(\r\n    ERC20Basic _token,\r\n    address _beneficiary,\r\n    uint256 _releaseTime\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_releaseTime > block.timestamp);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function release() public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(address(this));\r\n    require(amount > 0);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title DiscoperiTokenVesting\r\n * @dev DiscoperiTokenVesting mixin that gives possibility for token holders to have vested amounts of tokens on their balances. \r\n * Token should check a balance spot for transfer and transferFrom functions to use this feature.\r\n */\r\ncontract DiscoperiTokenVesting {\r\n    using SafeMath for uint256;  \r\n\r\n    // vesting parts count\r\n    uint256 public constant VESTING_PARTS = 4;\r\n\r\n    // vesting releases timestamps\r\n    uint256[VESTING_PARTS] public vestingReleases;\r\n\r\n    // list of vested amounts by beneficiary\r\n    mapping (address => uint256) public vestedAmount;\r\n    \r\n    // vesting event logging\r\n    event Vesting(address indexed to, uint256 amount);    \r\n\r\n    /**\r\n     * @dev Find out if the address has vested amounts\r\n     * @param _who address Address checked for vested amounts\r\n     * @return bool Returns true if address has vested amounts     \r\n     */  \r\n    function hasVested(address _who) public view returns (bool) {\r\n        return balanceVested(_who) > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Get balance vested to the current moment of time\r\n     * @param _who address Address owns vested amounts\r\n     * @return uint256 Balance vested to the current moment of time     \r\n     */       \r\n    function balanceVested(address _who) public view returns (uint256) {\r\n        for (uint256 i = 0; i < VESTING_PARTS; i++) {\r\n            if (now < vestingReleases[i]) // solium-disable-line security/no-block-members\r\n               return vestedAmount[_who].mul(VESTING_PARTS - i).div(VESTING_PARTS);\r\n        }\r\n    } \r\n \r\n    /**\r\n     * @dev Make vesting for the amount using contract with vesting rules\r\n     * @param _who address Address gets the vested amount\r\n     * @param _amount uint256 Amount to vest\r\n     */ \r\n    function _vest(address _who, uint256 _amount) internal {\r\n        require(_who != address(0), \"Vesting target address can't be zero.\");\r\n        require(_amount > 0, \"Vesting amount should be > 0.\");\r\n        vestedAmount[_who] = vestedAmount[_who].add(_amount);\r\n        emit Vesting(_who, _amount);\r\n    }        \r\n}\r\n\r\n/**\r\n * @title DiscoperiTokenLockup\r\n * @dev This contract gives possibility for token holders to have locked up (till release time) amounts of tokens on their balances. \r\n */\r\ncontract DiscoperiTokenLockup {\r\n    using SafeMath for uint256;  \r\n\r\n    // LockedUp struct\r\n    struct LockedUp {\r\n        uint256 amount; // lockedup amount\r\n        uint256 release; // release timestamp\r\n    }\r\n\r\n    // list of lockedup amounts and release timestamps\r\n    mapping (address => LockedUp[]) public lockedup;\r\n\r\n    // lockup event logging\r\n    event Lockup(address indexed to, uint256 amount, uint256 release);\r\n\r\n    /**\r\n     * @dev Find out if the address has locked up amounts\r\n     * @param _who address Address checked for lockedup amounts\r\n     * @return bool Returns true if address has lockedup amounts     \r\n     */    \r\n    function hasLockedUp(address _who) public view returns (bool) {\r\n        return balanceLockedUp(_who) > 0;\r\n    }    \r\n\r\n    /**\r\n     * @dev Get balance locked up to the current moment of time\r\n     * @param _who address Address owns lockedup amounts\r\n     * @return uint256 Balance locked up to the current moment of time     \r\n     */       \r\n    function balanceLockedUp(address _who) public view returns (uint256) {\r\n        uint256 _balanceLockedUp = 0;\r\n        for (uint256 i = 0; i < lockedup[_who].length; i++) {\r\n            if (lockedup[_who][i].release > block.timestamp) // solium-disable-line security/no-block-members\r\n                _balanceLockedUp = _balanceLockedUp.add(lockedup[_who][i].amount);\r\n        }\r\n        return _balanceLockedUp;\r\n    }    \r\n    \r\n    /**\r\n     * @dev Lockup amount till release time\r\n     * @param _who address Address gets the lockedup amount\r\n     * @param _amount uint256 Amount to lockup\r\n     * @param _release uint256 Release timestamp     \r\n     */     \r\n    function _lockup(address _who, uint256 _amount, uint256 _release) internal {\r\n        if (_release != 0) {\r\n            require(_who != address(0), \"Lockup target address can't be zero.\");\r\n            require(_amount > 0, \"Lockup amount should be > 0.\");   \r\n            require(_release > block.timestamp, \"Lockup release time should be > now.\"); // solium-disable-line security/no-block-members \r\n            lockedup[_who].push(LockedUp(_amount, _release));\r\n            emit Lockup(_who, _amount, _release);\r\n        }\r\n    }      \r\n\r\n}\r\n\r\n/**\r\n * @title IDiscoperiSale\r\n * @dev IDiscoperiSale is a ..\r\n */\r\ncontract IDiscoperiSale {\r\n    \r\n    /**\r\n     * @dev Order tokens for beneficiary\r\n     * @param _collector  collector id\r\n     * @param _tx hash of the transaction\r\n     * @param _beneficiary beneficiary who has paid coins for tokens\r\n     * @param _funds amount of coins beneficiary has paid \r\n     */\r\n    function acquireTokens(uint256 _collector, uint256 _tx, address _beneficiary, uint256 _funds) external payable;\r\n\r\n}\r\n\r\n/**\r\n * @title IDiscoperiToken\r\n * @dev IDiscoperiToken is a ..\r\n */\r\ncontract IDiscoperiToken {\r\n\r\n    /**\r\n     * @dev Burn tokens from sale contract\r\n     */\r\n    function burnSaleTokens() external;\r\n\r\n     /**\r\n     * @dev Transfer tokens from one address to another with westing\r\n     * @param _to address which you want to transfer to\r\n     * @param _value the amount of tokens to be transferred\r\n     * @return true if the transfer was succeeded\r\n     */\r\n    function transferWithVesting(address _to, uint256 _value) external returns (bool); \r\n\r\n}\r\n\r\n/**\r\n * @title DiscoperiToken\r\n * @dev Discoperi Token contract\r\n */\r\ncontract DiscoperiToken is  \r\n    IDiscoperiToken,\r\n    StandardToken, \r\n    Ownable,\r\n    DiscoperiTokenLockup,\r\n    DiscoperiTokenVesting\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    // token constants\r\n    string public constant name = \"Discoperi Token\"; // solium-disable-line uppercase\r\n    string public constant symbol = \"DISC\"; // solium-disable-line uppercase\r\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n    // total tokens supply\r\n    uint256 public constant TOTAL_SUPPLY = 200000000000 * (10 ** uint256(decimals)); // 200,000,000,000 DISCs\r\n\r\n    // TOTAL_SUPPLY is distributed as follows\r\n    uint256 public constant SALES_SUPPLY = 50000000000 * (10 ** uint256(decimals)); // 50,000,000,000 DISCs - 25%\r\n    uint256 public constant INVESTORS_SUPPLY = 50000000000 * (10 ** uint256(decimals)); // 50,000,000,000 DISCs - 25%\r\n    uint256 public constant TEAM_SUPPLY = 30000000000 * (10 ** uint256(decimals)); // 30,000,000,000 DISCs - 15%\r\n    uint256 public constant RESERVE_SUPPLY = 22000000000 * (10 ** uint256(decimals)); // 22,000,000,000 DISCs - 11%\r\n    uint256 public constant MARKET_DEV_SUPPLY = 20000000000 * (10 ** uint256(decimals)); // 20,000,000,000 DISCs - 10%    \r\n    uint256 public constant PR_ADVERSTISING_SUPPLY = 15000000000 * (10 ** uint256(decimals)); // 15,000,000,000 DISCs - 7.5%\r\n    uint256 public constant REFERRAL_SUPPLY = 8000000000 * (10 ** uint256(decimals)); // 8,000,000,000 DISCs - 4%\r\n    uint256 public constant ANGEL_INVESTORS_SUPPLY = 5000000000 * (10 ** uint256(decimals)); // 5,000,000,000 DISCs - 2.5%\r\n    \r\n    // fund wallets\r\n    address public constant MARKET_DEV_ADDRESS = 0x3f272f26C2322cB38781D0C6C42B1c2531Ec79Be;\r\n    address public constant TEAM_ADDRESS = 0xD8069C8c24D10023DBC5823156994aC2A638dBBd;\r\n    address public constant RESERVE_ADDRESS = 0x7656Cee371A812775A5E0Fb98a565Cc731aCC44B;\r\n    address public constant INVESTORS_ADDRESS= 0x25230591492198b6DD4363d03a7dAa5aD7590D2d;\r\n    address public constant PR_ADVERSTISING_ADDRESS = 0xC36d70AE6ddBE87F973bf4248Df52d0370FBb7E7;\r\n\r\n    // sale address\r\n    address public sale;\r\n\r\n    // restrict execution only for sale address\r\n    modifier onlySale() {\r\n        require(msg.sender == sale, \"Attemp to execute by not sale address\");\r\n        _;\r\n    }\r\n\r\n    // restrict execution only for authorized address\r\n    modifier onlyLockupAuthorized() {\r\n        require(msg.sender == INVESTORS_ADDRESS, \"Attemp to lockup tokens by not authorized address\");\r\n        _;\r\n    }\r\n\r\n    // check balance spot on transfer\r\n    modifier spotTransfer(address _from, uint256 _value) {\r\n        require(_value <= balanceSpot(_from), \"Attempt to transfer more than balance spot\");\r\n        _;\r\n    }\r\n\r\n    // burn event\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * CONSTRUCTOR\r\n     * @dev Allocate investors tokens supply\r\n     */\r\n    constructor() public { \r\n        balances[INVESTORS_ADDRESS] = balances[INVESTORS_ADDRESS].add(INVESTORS_SUPPLY);\r\n        totalSupply_ = totalSupply_.add(INVESTORS_SUPPLY);\r\n        emit Transfer(address(0), INVESTORS_ADDRESS, INVESTORS_SUPPLY);\r\n\r\n        balances[INVESTORS_ADDRESS] = balances[INVESTORS_ADDRESS].add(ANGEL_INVESTORS_SUPPLY);\r\n        totalSupply_ = totalSupply_.add(ANGEL_INVESTORS_SUPPLY);\r\n        emit Transfer(address(0), INVESTORS_ADDRESS, ANGEL_INVESTORS_SUPPLY);\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize token contract and allocate tokens supply\r\n     * @param _sale address of the sale contract\r\n     * @param _teamRelease team tokens release timestamp\r\n     * @param _vestingFirstRelease first release timestamp of tokens vesting\r\n     * @param _vestingSecondRelease second release timestamp of tokens vesting\r\n     * @param _vestingThirdRelease third release timestamp of tokens vesting\r\n     * @param _vestingFourthRelease fourth release timestamp of tokens vesting\r\n     */\r\n    function init(\r\n        address _sale, \r\n        uint256 _teamRelease, \r\n        uint256 _vestingFirstRelease,\r\n        uint256 _vestingSecondRelease,\r\n        uint256 _vestingThirdRelease,\r\n        uint256 _vestingFourthRelease\r\n    ) \r\n        external \r\n        onlyOwner \r\n    {\r\n        require(sale == address(0), \"cannot execute init function twice\");\r\n        require(_sale != address(0), \"cannot set zero address as sale\");\r\n        require(_teamRelease > now, \"team tokens release date should be > now\"); // solium-disable-line security/no-block-members\r\n        require(_vestingFirstRelease > now, \"vesting first release date should be > now\"); // solium-disable-line security/no-block-members\r\n        require(_vestingSecondRelease > now, \"vesting second release date should be > now\"); // solium-disable-line security/no-block-members\r\n        require(_vestingThirdRelease > now, \"vesting third release date should be > now\"); // solium-disable-line security/no-block-members\r\n        require(_vestingFourthRelease > now, \"vesting fourth release date should be > now\"); // solium-disable-line security/no-block-members\r\n\r\n        sale = _sale;\r\n\r\n        balances[sale] = balances[sale].add(SALES_SUPPLY);\r\n        totalSupply_ = totalSupply_.add(SALES_SUPPLY);\r\n        emit Transfer(address(0), sale, SALES_SUPPLY);\r\n\r\n        balances[sale] = balances[sale].add(REFERRAL_SUPPLY);\r\n        totalSupply_ = totalSupply_.add(REFERRAL_SUPPLY);\r\n        emit Transfer(address(0), sale, REFERRAL_SUPPLY);\r\n\r\n        TokenTimelock teamTimelock = new TokenTimelock(this, TEAM_ADDRESS, _teamRelease);\r\n        balances[teamTimelock] = balances[teamTimelock].add(TEAM_SUPPLY);\r\n        totalSupply_ = totalSupply_.add(TEAM_SUPPLY);\r\n        emit Transfer(address(0), teamTimelock, TEAM_SUPPLY);\r\n         \r\n        balances[MARKET_DEV_ADDRESS] = balances[MARKET_DEV_ADDRESS].add(MARKET_DEV_SUPPLY);\r\n        totalSupply_ = totalSupply_.add(MARKET_DEV_SUPPLY);\r\n        emit Transfer(address(0), MARKET_DEV_ADDRESS, MARKET_DEV_SUPPLY);\r\n\r\n        balances[RESERVE_ADDRESS] = balances[RESERVE_ADDRESS].add(RESERVE_SUPPLY);\r\n        totalSupply_ = totalSupply_.add(RESERVE_SUPPLY);\r\n        emit Transfer(address(0), RESERVE_ADDRESS, RESERVE_SUPPLY);\r\n       \r\n        balances[PR_ADVERSTISING_ADDRESS] = balances[PR_ADVERSTISING_ADDRESS].add(PR_ADVERSTISING_SUPPLY);\r\n        totalSupply_ = totalSupply_.add(PR_ADVERSTISING_SUPPLY);\r\n        emit Transfer(address(0), PR_ADVERSTISING_ADDRESS, PR_ADVERSTISING_SUPPLY);\r\n\r\n        vestingReleases[0] = _vestingFirstRelease;\r\n        vestingReleases[1] = _vestingSecondRelease;\r\n        vestingReleases[2] = _vestingThirdRelease;\r\n        vestingReleases[3] = _vestingFourthRelease;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another with vesting\r\n     * @param _to address which you want to transfer to\r\n     * @param _value the amount of tokens to be transferred\r\n     * @return true if the transfer was succeeded\r\n     */\r\n    function transferWithVesting(address _to, uint256 _value) external onlySale returns (bool) {    \r\n        _vest(_to, _value);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer  tokens from one address to another with locking up\r\n     * @param _to address which you want to transfer to\r\n     * @param _value the amount of tokens to be transferred\r\n     * @param _release the amount of tokens to be transferred\r\n     * @return true if the transfer was succeeded\r\n     */\r\n    function transferWithLockup(address _to, uint256 _value, uint256 _release) external onlyLockupAuthorized returns (bool) {    \r\n        _lockup(_to, _value, _release);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn all tokens, remaining on sale contract\r\n     */\r\n    function burnSaleTokens() external onlySale {\r\n        uint256 _amount = balances[sale];\r\n        balances[sale] = 0;\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n        emit Burn(sale, _amount);\r\n        emit Transfer(sale, address(0), _amount);        \r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _to address which you want to transfer to\r\n     * @param _value the amount of tokens to be transferred\r\n     * @return true if the transfer was succeeded\r\n     */\r\n    function transfer(address _to, uint256 _value) public spotTransfer(msg.sender, _value) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from the address which you want to send tokens from\r\n     * @param _to the address which you want to transfer to\r\n     * @param _value the amount of tokens to be transferred\r\n     * @return true if the transfer was succeeded\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public spotTransfer(_from, _value) returns (bool) {    \r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Get balance spot for the current moment of time\r\n     * @param _who address owns balance spot\r\n     * @return balance spot for the current moment of time     \r\n     */   \r\n    function balanceSpot(address _who) public view returns (uint256) {\r\n        return balanceOf(_who).sub(balanceVested(_who)).sub(balanceLockedUp(_who));\r\n    }     \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceLockedUp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ANGEL_INVESTORS_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_release\",\"type\":\"uint256\"}],\"name\":\"transferWithLockup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedup\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"release\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceSpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferWithVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALES_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVESTORS_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"hasLockedUp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnSaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_DEV_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingReleases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceVested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"hasVested\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VESTING_PARTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVE_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PR_ADVERSTISING_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVESTORS_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PR_ADVERSTISING_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_DEV_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"},{\"name\":\"_teamRelease\",\"type\":\"uint256\"},{\"name\":\"_vestingFirstRelease\",\"type\":\"uint256\"},{\"name\":\"_vestingSecondRelease\",\"type\":\"uint256\"},{\"name\":\"_vestingThirdRelease\",\"type\":\"uint256\"},{\"name\":\"_vestingFourthRelease\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"release\",\"type\":\"uint256\"}],\"name\":\"Lockup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DiscoperiToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7cf3a95f06c7b74d2260a9ad03ff280d42cdd1b06dbe1ea16c58b3bbfa6b2bd1"}]}