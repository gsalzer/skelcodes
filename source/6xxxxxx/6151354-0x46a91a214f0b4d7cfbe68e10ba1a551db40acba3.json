{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n    }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\ncontract DVPlock is Ownable{\r\n  using SafeERC20 for ERC20;\r\n  using SafeMath for uint256;\r\n\r\n  ERC20 public token;\r\n  address public sponsor;\r\n  mapping (address => uint256) public balances;\r\n  mapping (address => uint256) public withdrawAmounts;\r\n  uint256 public tokenTotal;\r\n  uint256 public releaseTime;\r\n\r\n  constructor() public{\r\n    releaseTime = 0;\r\n    tokenTotal = 0;\r\n    sponsor = msg.sender;    \r\n  }\r\n\r\n  function setToken(ERC20 _token) onlyOwner public{\r\n    //Only allowed once\r\n    if(token!=address(0)){\r\n      revert();\r\n    }\r\n    token = _token;\r\n  }\r\n\r\n\r\n  function setReleaseTime(uint256 _releaseTime) onlyOwner public{\r\n      require(releaseTime==0);\r\n      releaseTime = _releaseTime;\r\n      require(addSponsor(sponsor));\r\n  }\r\n\r\n\r\n  // for sponsor 20% tokens\r\n  function addSponsor(address _sponsor) internal returns(bool result){\r\n      uint256 _amount =token.totalSupply()/5;\r\n      return addInvestor(_sponsor,_amount);\r\n  }\r\n\r\n  function addInvestor(address investor,uint256 amount) onlyOwner public returns(bool result){\r\n      if(releaseTime!=0){\r\n          require(block.timestamp < releaseTime);\r\n      }\r\n      require(tokenTotal == token.balanceOf(this));\r\n      balances[investor] = balances[investor].add(amount);\r\n      tokenTotal = tokenTotal.add(amount);\r\n\r\n      if(tokenTotal>token.balanceOf(this)){\r\n          token.safeTransferFrom(msg.sender,this,amount);\r\n      }\r\n      return true;\r\n  }\r\n\r\n  \r\n  \r\n  function release() public {\r\n    require(releaseTime!=0);\r\n    require(block.timestamp >= releaseTime);\r\n    require(balances[msg.sender] > 0);\r\n\r\n    //60*60*24*30*3 second = 1 quarter,If the time difference is more than 1 quarters, it means that it has been released 1 times.\r\n    uint256 released_times = (block.timestamp-releaseTime).div(60*60*24*30*3); \r\n    uint256 _amount = 0;\r\n    uint256 lock_quarter = 0;\r\n    \r\n    if(msg.sender!=sponsor){\r\n        //The white paper stipulates that investors' balance needs to be locked up for 1.5 years and released on a quarterly average.So 1.5 years =18 months =6 quarter\r\n        lock_quarter = 6 ;\r\n    }else{\r\n         //The white paper stipulates that sponsor' balance needs to be locked up for 3 years and released on a quarterly average.So 3 years =36 months =12 quarter\r\n        lock_quarter = 12;\r\n    }\r\n    \r\n    if(withdrawAmounts[msg.sender]==0){\r\n        withdrawAmounts[msg.sender]= balances[msg.sender].div(lock_quarter);\r\n    }\r\n    \r\n    if(released_times>=lock_quarter){\r\n        _amount = balances[msg.sender];\r\n    }else{\r\n        _amount = balances[msg.sender].sub(withdrawAmounts[msg.sender].mul(lock_quarter.sub(released_times+1)));\r\n    }\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    tokenTotal = tokenTotal.sub(_amount);\r\n    token.safeTransfer(msg.sender, _amount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sponsor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"setReleaseTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addInvestor\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DVPlock","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b637a4bc88f7a75051da9ea60fc5de90284e6211e22fd0f53f7733be59d64e73"}]}