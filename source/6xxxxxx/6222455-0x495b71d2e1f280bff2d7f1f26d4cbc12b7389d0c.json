{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// THE LAST SMART CONTRACT HAD SOME SECURITY HOLES\r\n// THIS IS THE SECOND SMART CONTRACT FOR THE LIKE FEATURE\r\n// OLD CONTRACT CAN BE SEEN AT https://etherscan.io/address/0x6acd16200a2a046bf207d1b263202ec1a75a7d51\r\n// DATA IS IMPORTED FROM THE LAST CONTRACT\r\n// BIG SHOUTOUT TO CASTILLO NETWORK FOR FINDING THE SECURITY HOLE AND PERFORMING AN AUDIT ON THE LAST CONTRACT\r\n// https://github.com/EthereumCommonwealth/Auditing\r\n\r\n// Old contract data\r\ncontract dappVolumeHearts {\r\n\t// map dapp ids with heart totals\r\n\tmapping(uint256 => uint256) public totals;\r\n\t// get total hearts by id\r\n\tfunction getTotalHeartsByDappId(uint256 dapp_id) public view returns(uint256) {\r\n\t\treturn totals[dapp_id];\r\n\t}\r\n}\r\n\r\n// Allows users to \"heart\" (like) a DAPP by dapp id\r\n// 1 Like = XXXXX eth will be set on front end of site\r\n// 50% of each transaction gets sent to the last liker\r\n\r\ncontract DappVolumeHearts {\r\n\r\n\tdappVolumeHearts firstContract;\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\t// set contract owner\r\n\taddress public contractOwner;\r\n\t// set last address transacted\r\n\taddress public lastAddress;\r\n\t// set first contracts address\r\n\taddress constant public firstContractAddress = 0x6ACD16200a2a046bf207D1B263202ec1A75a7D51;\r\n\t// map dapp ids with heart totals ( does not count first contract )\r\n\tmapping(uint256 => uint256) public totals;\r\n\r\n\t// only contract owner\r\n\tmodifier onlyContractOwner {\r\n\t\trequire(msg.sender == contractOwner);\r\n\t\t_;\r\n\t}\r\n\r\n\t// set constructor\r\n\tconstructor() public {\r\n\t\tcontractOwner = msg.sender;\r\n\t\tlastAddress = msg.sender;\r\n\t\tfirstContract = dappVolumeHearts(firstContractAddress);\r\n\t}\r\n\r\n\r\n\t// withdraw funds to contract creator\r\n\tfunction withdraw() public onlyContractOwner {\r\n\t\tcontractOwner.transfer(address(this).balance);\r\n\t}\r\n\r\n\t// update heart count\r\n\tfunction update(uint256 dapp_id) public payable {\r\n\t\trequire(msg.value >= 2000000000000000);\r\n\t\trequire(dapp_id > 0);\r\n\t\ttotals[dapp_id] = totals[dapp_id].add(msg.value);\r\n\t\t// send 50% of the money to the last person\r\n\t\tlastAddress.send(msg.value.div(2));\r\n\t\tlastAddress = msg.sender;\r\n\t}\r\n\r\n\t// get total hearts by id with legacy contract totaled in\r\n\tfunction getTotalHeartsByDappId(uint256 dapp_id) public view returns(uint256) {\r\n\t\treturn totals[dapp_id].add(firstContract.getTotalHeartsByDappId(dapp_id));\r\n\t}\r\n\r\n\t// get contract balance\r\n\tfunction getBalance() public view returns(uint256){\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t// uint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dapp_id\",\"type\":\"uint256\"}],\"name\":\"getTotalHeartsByDappId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dapp_id\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DappVolumeHearts","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://55382dfd6b9ea5d9b163271e1a05d72cde6d1971ef81acb2fdbcf7fef939d76e"}]}