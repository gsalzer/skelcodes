{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity^0.4.24;\r\n\r\n/// A completely standalone nickname registrar\r\n/// https://M2D.win\r\n/// Laughing Man\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract NicknameRegistrar is DSAuth {\r\n    uint public namePrice = 10 finney;\r\n\r\n    mapping (address => string) public names;\r\n    mapping (bytes32 => address) internal _addresses;\r\n    mapping (address => string) public pendingNameTransfers;\r\n    mapping (bytes32 => bool) internal _inTransfer;\r\n\r\n    modifier onlyUniqueName(string name) {\r\n        require(!nameTaken(name), \"Name taken!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPaid() {\r\n        require(msg.value >= namePrice, \"Not enough value sent!\");\r\n        _;\r\n    }\r\n\r\n    modifier limitedLength(string s) {\r\n        require(bytes(s).length <= 32, \"Name too long!\");\r\n        require(bytes(s).length >= 1, \"Name too short!\");\r\n        _;\r\n    }\r\n\r\n    event NameSet(address addr, string name);\r\n    event NameUnset(address addr);\r\n    event NameTransferRequested(address from, address to, string name);\r\n    event NameTransferAccepted(address by, string name);\r\n\r\n    function nameTaken(string name) public view returns(bool) {\r\n        return _addresses[stringToBytes32(name)] != address(0x0) ||\r\n        _inTransfer[stringToBytes32(name)];\r\n    }\r\n\r\n    function hasName(address addr) public view returns(bool) {\r\n        return bytes(names[addr]).length > 0;\r\n    }\r\n\r\n    function addresses(string name) public view returns(address) {\r\n        return _addresses[stringToBytes32(name)];\r\n    }\r\n    \r\n    function setMyName(string newName) public payable\r\n    onlyUniqueName(newName)\r\n    limitedLength(newName) \r\n    onlyPaid\r\n    {\r\n        names[msg.sender] = newName;\r\n        _addresses[stringToBytes32(newName)] = msg.sender;\r\n        emit NameSet(msg.sender, newName);\r\n    }\r\n\r\n    function unsetMyName() public {\r\n        _addresses[stringToBytes32(names[msg.sender])] = address(0x0);\r\n        names[msg.sender] = \"\";      \r\n        emit NameUnset(msg.sender);  \r\n    }\r\n\r\n    function transferMyName(address to) public payable onlyPaid {\r\n        require(hasName(msg.sender), \"You don't have a name to transfer!\");\r\n        pendingNameTransfers[to] = names[msg.sender];\r\n        _inTransfer[stringToBytes32(names[msg.sender])] = true;\r\n        \r\n        emit NameTransferRequested(msg.sender, to, names[msg.sender]);\r\n        names[msg.sender] = \"\";\r\n    }\r\n\r\n    function acceptNameTranfer() public\r\n    limitedLength(pendingNameTransfers[msg.sender]) {\r\n        names[msg.sender] = pendingNameTransfers[msg.sender];\r\n        _addresses[stringToBytes32(pendingNameTransfers[msg.sender])] = msg.sender;\r\n        \r\n        _inTransfer[stringToBytes32(pendingNameTransfers[msg.sender])] = false;\r\n        pendingNameTransfers[msg.sender] = \"\";\r\n        emit NameTransferAccepted(msg.sender, names[msg.sender]);\r\n    }\r\n\r\n    function getMoney() public auth {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n        // solium-disable security/no-inline-assembly\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingNameTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferMyName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"names\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"nameTaken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNameTranfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"namePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setMyName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unsetMyName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"NameUnset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameTransferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"NicknameRegistrar","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bad0ea3e4af2a1794a84ed7619a8412b6ca3e1fbf401c545271a8ae1f874fc64"}]}