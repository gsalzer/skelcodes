{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/// @title   Token\r\n/// @author  Jose Perez - <jose.perez@diginex.com>\r\n/// @notice  ERC20 token\r\n/// @dev     The contract allows to perform a number of token sales in different periods in time.\r\n///          allowing participants in previous token sales to transfer tokens to other accounts.\r\n///          Additionally, token locking logic for KYC/AML compliance checking is supported.\r\n\r\ncontract Token is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"ZwoopToken\";\r\n    string public constant symbol = \"ZWP\";\r\n    uint256 public constant decimals = 18;\r\n\r\n    // Using same number of decimal figures as ETH (i.e. 18).\r\n    uint256 public constant TOKEN_UNIT = 10 ** uint256(decimals);\r\n\r\n    // Maximum number of tokens in circulation\r\n    uint256 public constant MAX_TOKEN_SUPPLY = 2000000000 * TOKEN_UNIT;\r\n\r\n    // Maximum number of tokens sales to be performed.\r\n    uint256 public constant MAX_TOKEN_SALES = 1;\r\n\r\n    // Maximum size of the batch functions input arrays.\r\n    uint256 public constant MAX_BATCH_SIZE = 400;\r\n\r\n    address public assigner;    // The address allowed to assign or mint tokens during token sale.\r\n    address public locker;      // The address allowed to lock/unlock addresses.\r\n\r\n    mapping(address => bool) public locked;        // If true, address' tokens cannot be transferred.\r\n\r\n    uint256 public currentTokenSaleId = 0;           // The id of the current token sale.\r\n    mapping(address => uint256) public tokenSaleId;  // In which token sale the address participated.\r\n\r\n    bool public tokenSaleOngoing = false;\r\n\r\n    event TokenSaleStarting(uint indexed tokenSaleId);\r\n    event TokenSaleEnding(uint indexed tokenSaleId);\r\n    event Lock(address indexed addr);\r\n    event Unlock(address indexed addr);\r\n    event Assign(address indexed to, uint256 amount);\r\n    event Mint(address indexed to, uint256 amount);\r\n    event LockerTransferred(address indexed previousLocker, address indexed newLocker);\r\n    event AssignerTransferred(address indexed previousAssigner, address indexed newAssigner);\r\n\r\n    /// @dev Constructor that initializes the contract.\r\n    /// @param _assigner The assigner account.\r\n    /// @param _locker The locker account.\r\n    constructor(address _assigner, address _locker) public {\r\n        require(_assigner != address(0));\r\n        require(_locker != address(0));\r\n\r\n        assigner = _assigner;\r\n        locker = _locker;\r\n    }\r\n\r\n    /// @dev True if a token sale is ongoing.\r\n    modifier tokenSaleIsOngoing() {\r\n        require(tokenSaleOngoing);\r\n        _;\r\n    }\r\n\r\n    /// @dev True if a token sale is not ongoing.\r\n    modifier tokenSaleIsNotOngoing() {\r\n        require(!tokenSaleOngoing);\r\n        _;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the assigner.\r\n    modifier onlyAssigner() {\r\n        require(msg.sender == assigner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the locker.\r\n    modifier onlyLocker() {\r\n        require(msg.sender == locker);\r\n        _;\r\n    }\r\n\r\n    /// @dev Starts a new token sale. Only the owner can start a new token sale. If a token sale\r\n    ///      is ongoing, it has to be ended before a new token sale can be started.\r\n    ///      No more than `MAX_TOKEN_SALES` sales can be carried out.\r\n    /// @return True if the operation was successful.\r\n    function tokenSaleStart() external onlyOwner tokenSaleIsNotOngoing returns(bool) {\r\n        require(currentTokenSaleId < MAX_TOKEN_SALES);\r\n        currentTokenSaleId++;\r\n        tokenSaleOngoing = true;\r\n        emit TokenSaleStarting(currentTokenSaleId);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Ends the current token sale. Only the owner can end a token sale.\r\n    /// @return True if the operation was successful.\r\n    function tokenSaleEnd() external onlyOwner tokenSaleIsOngoing returns(bool) {\r\n        emit TokenSaleEnding(currentTokenSaleId);\r\n        tokenSaleOngoing = false;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Returns whether or not a token sale is ongoing.\r\n    /// @return True if a token sale is ongoing.\r\n    function isTokenSaleOngoing() external view returns(bool) {\r\n        return tokenSaleOngoing;\r\n    }\r\n\r\n    /// @dev Getter of the variable `currentTokenSaleId`.\r\n    /// @return Returns the current token sale id.\r\n    function getCurrentTokenSaleId() external view returns(uint256) {\r\n        return currentTokenSaleId;\r\n    }\r\n\r\n    /// @dev Getter of the variable `tokenSaleId[]`.\r\n    /// @param _address The address of the participant.\r\n    /// @return Returns the id of the token sale the address participated in.\r\n    function getAddressTokenSaleId(address _address) external view returns(uint256) {\r\n        return tokenSaleId[_address];\r\n    }\r\n\r\n    /// @dev Allows the current owner to change the assigner.\r\n    /// @param _newAssigner The address of the new assigner.\r\n    /// @return True if the operation was successful.\r\n    function transferAssigner(address _newAssigner) external onlyOwner returns(bool) {\r\n        require(_newAssigner != address(0));\r\n\r\n        emit AssignerTransferred(assigner, _newAssigner);\r\n        assigner = _newAssigner;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Function to mint tokens. It can only be called by the assigner during an ongoing token sale.\r\n    /// @param _to The address that will receive the minted tokens.\r\n    /// @param _amount The amount of tokens to mint.\r\n    /// @return A boolean that indicates if the operation was successful.\r\n    function mint(address _to, uint256 _amount) public onlyAssigner tokenSaleIsOngoing returns(bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        require(totalSupply_ <= MAX_TOKEN_SUPPLY);\r\n\r\n        if (tokenSaleId[_to] == 0) {\r\n            tokenSaleId[_to] = currentTokenSaleId;\r\n        }\r\n        require(tokenSaleId[_to] == currentTokenSaleId);\r\n\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Mints tokens for several addresses in one single call.\r\n    /// @param _to address[] The addresses that get the tokens.\r\n    /// @param _amount address[] The number of tokens to be minted.\r\n    /// @return A boolean that indicates if the operation was successful.\r\n    function mintInBatches(address[] _to, uint256[] _amount) external onlyAssigner tokenSaleIsOngoing returns(bool) {\r\n        require(_to.length > 0);\r\n        require(_to.length == _amount.length);\r\n        require(_to.length <= MAX_BATCH_SIZE);\r\n\r\n        for (uint i = 0; i < _to.length; i++) {\r\n            mint(_to[i], _amount[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Function to assign any number of tokens to a given address.\r\n    ///      Compared to the `mint` function, the `assign` function allows not just to increase but also to decrease\r\n    ///      the number of tokens of an address by assigning a lower value than the address current balance.\r\n    ///      This function can only be executed during initial token sale.\r\n    /// @param _to The address that will receive the assigned tokens.\r\n    /// @param _amount The amount of tokens to assign.\r\n    /// @return True if the operation was successful.\r\n    function assign(address _to, uint256 _amount) public onlyAssigner tokenSaleIsOngoing returns(bool) {\r\n        require(currentTokenSaleId == 1);\r\n\r\n        // The desired value to assign (`_amount`) can be either higher or lower than the current number of tokens\r\n        // of the address (`balances[_to]`). To calculate the new `totalSupply_` value, the difference between `_amount`\r\n        // and `balances[_to]` (`delta`) is calculated first, and then added or substracted to `totalSupply_` accordingly.\r\n        uint256 delta = 0;\r\n        if (balances[_to] < _amount) {\r\n            // balances[_to] will be increased, so totalSupply_ should be increased\r\n            delta = _amount.sub(balances[_to]);\r\n            totalSupply_ = totalSupply_.add(delta);\r\n        } else {\r\n            // balances[_to] will be decreased, so totalSupply_ should be decreased\r\n            delta = balances[_to].sub(_amount);\r\n            totalSupply_ = totalSupply_.sub(delta);\r\n        }\r\n        require(totalSupply_ <= MAX_TOKEN_SUPPLY);\r\n\r\n        balances[_to] = _amount;\r\n        tokenSaleId[_to] = currentTokenSaleId;\r\n\r\n        emit Assign(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Assigns tokens to several addresses in one call.\r\n    /// @param _to address[] The addresses that get the tokens.\r\n    /// @param _amount address[] The number of tokens to be assigned.\r\n    /// @return True if the operation was successful.\r\n    function assignInBatches(address[] _to, uint256[] _amount) external onlyAssigner tokenSaleIsOngoing returns(bool) {\r\n        require(_to.length > 0);\r\n        require(_to.length == _amount.length);\r\n        require(_to.length <= MAX_BATCH_SIZE);\r\n\r\n        for (uint i = 0; i < _to.length; i++) {\r\n            assign(_to[i], _amount[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows the current owner to change the locker.\r\n    /// @param _newLocker The address of the new locker.\r\n    /// @return True if the operation was successful.\r\n    function transferLocker(address _newLocker) external onlyOwner returns(bool) {\r\n        require(_newLocker != address(0));\r\n\r\n        emit LockerTransferred(locker, _newLocker);\r\n        locker = _newLocker;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Locks an address. A locked address cannot transfer its tokens or other addresses' tokens out.\r\n    ///      Only addresses participating in the current token sale can be locked.\r\n    ///      Only the locker account can lock addresses and only during the token sale.\r\n    /// @param _address address The address to lock.\r\n    /// @return True if the operation was successful.\r\n    function lockAddress(address _address) public onlyLocker tokenSaleIsOngoing returns(bool) {\r\n        require(tokenSaleId[_address] == currentTokenSaleId);\r\n        require(!locked[_address]);\r\n\r\n        locked[_address] = true;\r\n        emit Lock(_address);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Unlocks an address so that its owner can transfer tokens out again.\r\n    ///      Addresses can be unlocked any time. Only the locker account can unlock addresses\r\n    /// @param _address address The address to unlock.\r\n    /// @return True if the operation was successful.\r\n    function unlockAddress(address _address) public onlyLocker returns(bool) {\r\n        require(locked[_address]);\r\n\r\n        locked[_address] = false;\r\n        emit Unlock(_address);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Locks several addresses in one single call.\r\n    /// @param _addresses address[] The addresses to lock.\r\n    /// @return True if the operation was successful.\r\n    function lockInBatches(address[] _addresses) external onlyLocker returns(bool) {\r\n        require(_addresses.length > 0);\r\n        require(_addresses.length <= MAX_BATCH_SIZE);\r\n\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            lockAddress(_addresses[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Unlocks several addresses in one single call.\r\n    /// @param _addresses address[] The addresses to unlock.\r\n    /// @return True if the operation was successful.\r\n    function unlockInBatches(address[] _addresses) external onlyLocker returns(bool) {\r\n        require(_addresses.length > 0);\r\n        require(_addresses.length <= MAX_BATCH_SIZE);\r\n\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            unlockAddress(_addresses[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Checks whether or not the given address is locked.\r\n    /// @param _address address The address to be checked.\r\n    /// @return Boolean indicating whether or not the address is locked.\r\n    function isLocked(address _address) external view returns(bool) {\r\n        return locked[_address];\r\n    }\r\n\r\n    /// @dev Transfers tokens to the specified address. It prevents transferring tokens from a locked address.\r\n    ///      Locked addresses can receive tokens.\r\n    ///      Current token sale's addresses cannot receive or send tokens until the token sale ends.\r\n    /// @param _to The address to transfer tokens to.\r\n    /// @param _value The number of tokens to be transferred.\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(!locked[msg.sender]);\r\n\r\n        if (tokenSaleOngoing) {\r\n            require(tokenSaleId[msg.sender] < currentTokenSaleId);\r\n            require(tokenSaleId[_to] < currentTokenSaleId);\r\n        }\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /// @dev Transfers tokens from one address to another. It prevents transferring tokens if the caller is locked or\r\n    ///      if the allowed address is locked.\r\n    ///      Locked addresses can receive tokens.\r\n    ///      Current token sale's addresses cannot receive or send tokens until the token sale ends.\r\n    /// @param _from address The address to transfer tokens from.\r\n    /// @param _to address The address to transfer tokens to.\r\n    /// @param _value The number of tokens to be transferred.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(!locked[msg.sender]);\r\n        require(!locked[_from]);\r\n\r\n        if (tokenSaleOngoing) {\r\n            require(tokenSaleId[msg.sender] < currentTokenSaleId);\r\n            require(tokenSaleId[_from] < currentTokenSaleId);\r\n            require(tokenSaleId[_to] < currentTokenSaleId);\r\n        }\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n\r\n/// @title  ExchangeRate\r\n/// @author Jose Perez - <jose.perez@diginex.com>\r\n/// @notice Tamper-proof record of exchange rates e.g. BTC/USD, ETC/USD, etc.\r\n/// @dev    Exchange rates are updated from off-chain server periodically. Rates are taken from a\r\n//          publicly available third-party provider, such as Coinbase, CoinMarketCap, etc.\r\ncontract ExchangeRate is Ownable {\r\n    event RateUpdated(string id, uint256 rate);\r\n    event UpdaterTransferred(address indexed previousUpdater, address indexed newUpdater);\r\n\r\n    address public updater;\r\n\r\n    mapping(string => uint256) internal currentRates;\r\n\r\n    /// @dev The ExchangeRate constructor.\r\n    /// @param _updater Account which can update the rates.\r\n    constructor(address _updater) public {\r\n        require(_updater != address(0));\r\n        updater = _updater;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the updater.\r\n    modifier onlyUpdater() {\r\n        require(msg.sender == updater);\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to change the updater.\r\n    /// @param _newUpdater The address of the new updater.\r\n    function transferUpdater(address _newUpdater) external onlyOwner {\r\n        require(_newUpdater != address(0));\r\n        emit UpdaterTransferred(updater, _newUpdater);\r\n        updater = _newUpdater;\r\n    }\r\n\r\n    /// @dev Allows the current updater account to update a single rate.\r\n    /// @param _id The rate identifier.\r\n    /// @param _rate The exchange rate.\r\n    function updateRate(string _id, uint256 _rate) external onlyUpdater {\r\n        require(_rate != 0);\r\n        currentRates[_id] = _rate;\r\n        emit RateUpdated(_id, _rate);\r\n    }\r\n\r\n    /// @dev Allows anyone to read the current rate.\r\n    /// @param _id The rate identifier.\r\n    /// @return The current rate.\r\n    function getRate(string _id) external view returns(uint256) {\r\n        return currentRates[_id];\r\n    }\r\n}\r\n\r\n\r\n/// @title  VestingTrustee\r\n/// @author Jose Perez - <jose.perez@diginex.com>\r\n/// @notice Vesting trustee contract for Diginex ERC20 tokens. Tokens are granted to specific\r\n///         addresses and vested under certain criteria (vesting period, cliff period, etc.)\r\n///         Tokens must be transferred to the VestingTrustee contract address prior to granting them.\r\ncontract VestingTrustee is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // ERC20 contract.\r\n    Token public token;\r\n\r\n    // The address allowed to grant and revoke tokens.\r\n    address public vester;\r\n\r\n    // Vesting grant for a specific holder.\r\n    struct Grant {\r\n        uint256 value;\r\n        uint256 start;\r\n        uint256 cliff;\r\n        uint256 end;\r\n        uint256 installmentLength; // In seconds.\r\n        uint256 transferred;\r\n        bool revocable;\r\n    }\r\n\r\n    // Holder to grant information mapping.\r\n    mapping (address => Grant) public grants;\r\n\r\n    // Total tokens available for vesting.\r\n    uint256 public totalVesting;\r\n\r\n    event NewGrant(address indexed _from, address indexed _to, uint256 _value);\r\n    event TokensUnlocked(address indexed _to, uint256 _value);\r\n    event GrantRevoked(address indexed _holder, uint256 _refund);\r\n    event VesterTransferred(address indexed previousVester, address indexed newVester);\r\n\r\n    /// @dev Constructor that initializes the VestingTrustee contract.\r\n    /// @param _diginexCoin The address of the previously deployed ERC20 token contract.\r\n    /// @param _vester The vester address.\r\n    constructor(Token _diginexCoin, address _vester) public {\r\n        require(_diginexCoin != address(0));\r\n        require(_vester != address(0));\r\n\r\n        token = _diginexCoin;\r\n        vester = _vester;\r\n    }\r\n\r\n    // @dev Prevents being called by any account other than the vester.\r\n    modifier onlyVester() {\r\n        require(msg.sender == vester);\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the owner to change the vester.\r\n    /// @param _newVester The address of the new vester.\r\n    /// @return True if the operation was successful.\r\n    function transferVester(address _newVester) external onlyOwner returns(bool) {\r\n        require(_newVester != address(0));\r\n\r\n        emit VesterTransferred(vester, _newVester);\r\n        vester = _newVester;\r\n        return true;\r\n    }\r\n    \r\n\r\n    /// @dev Grant tokens to a specified address. All time units are in seconds since Unix epoch.\r\n    ///      Tokens must be transferred to the VestingTrustee contract address prior to calling this\r\n    ///      function. The number of tokens assigned to the VestingTrustee contract address must\r\n    //       always be equal or greater than the total number of vested tokens.\r\n    /// @param _to address The holder address.\r\n    /// @param _value uint256 The amount of tokens to be granted.\r\n    /// @param _start uint256 The beginning of the vesting period.\r\n    /// @param _cliff uint256 Time, between _start and _end, when the first installment is made.\r\n    /// @param _end uint256 The end of the vesting period.\r\n    /// @param _installmentLength uint256 The length of each vesting installment.\r\n    /// @param _revocable bool Whether the grant is revocable or not.\r\n    function grant(address _to, uint256 _value, uint256 _start, uint256 _cliff, uint256 _end,\r\n        uint256 _installmentLength, bool _revocable)\r\n        external onlyVester {\r\n\r\n        require(_to != address(0));\r\n        require(_to != address(this)); // Don't allow holder to be this contract.\r\n        require(_value > 0);\r\n\r\n        // Require that every holder can be granted tokens only once.\r\n        require(grants[_to].value == 0);\r\n\r\n        // Require for time ranges to be consistent and valid.\r\n        require(_start <= _cliff && _cliff <= _end);\r\n\r\n        // Require installment length to be valid and no longer than (end - start).\r\n        require(_installmentLength > 0 && _installmentLength <= _end.sub(_start));\r\n\r\n        // Grant must not exceed the total amount of tokens currently available for vesting.\r\n        require(totalVesting.add(_value) <= token.balanceOf(address(this)));\r\n\r\n        // Assign a new grant.\r\n        grants[_to] = Grant({\r\n            value: _value,\r\n            start: _start,\r\n            cliff: _cliff,\r\n            end: _end,\r\n            installmentLength: _installmentLength,\r\n            transferred: 0,\r\n            revocable: _revocable\r\n        });\r\n\r\n        // Since tokens have been granted, increase the total amount of vested tokens.\r\n        // This indirectly reduces the total amount available for vesting.\r\n        totalVesting = totalVesting.add(_value);\r\n\r\n        emit NewGrant(msg.sender, _to, _value);\r\n    }\r\n\r\n    /// @dev Revoke the grant of tokens of a specified grantee address.\r\n    ///      The vester can arbitrarily revoke the tokens of a revocable grant anytime.\r\n    ///      However, the grantee owns `calculateVestedTokens` number of tokens, even if some of them\r\n    ///      have not been transferred to the grantee yet. Therefore, the `revoke` function should\r\n    ///      transfer all non-transferred tokens to their rightful owner. The rest of the granted tokens\r\n    ///      should be transferred to the vester.\r\n    /// @param _holder The address which will have its tokens revoked.\r\n    function revoke(address _holder) public onlyVester {\r\n        Grant storage holderGrant = grants[_holder];\r\n\r\n        // Grant must be revocable.\r\n        require(holderGrant.revocable);\r\n\r\n        // Calculate number of tokens to be transferred to vester and to holder:\r\n        // holderGrant.value = toVester + vested = toVester + ( toHolder + holderGrant.transferred )\r\n        uint256 vested = calculateVestedTokens(holderGrant, now);\r\n        uint256 toVester = holderGrant.value.sub(vested);\r\n        uint256 toHolder = vested.sub(holderGrant.transferred);\r\n\r\n        // Remove grant information.\r\n        delete grants[_holder];\r\n\r\n        // Update totalVesting.\r\n        totalVesting = totalVesting.sub(toHolder);\r\n        totalVesting = totalVesting.sub(toVester);\r\n\r\n        // Transfer tokens.\r\n        token.transfer(_holder, toHolder);\r\n        token.transfer(vester, toVester);\r\n        \r\n        emit GrantRevoked(_holder, toVester);\r\n    }\r\n\r\n    /// @dev Calculate amount of vested tokens at a specifc time.\r\n    /// @param _grant Grant The vesting grant.\r\n    /// @param _time uint256 The time to be checked\r\n    /// @return a uint256 Representing the amount of vested tokens of a specific grant.\r\n    function calculateVestedTokens(Grant _grant, uint256 _time) private pure returns (uint256) {\r\n        // If we're before the cliff, then nothing is vested.\r\n        if (_time < _grant.cliff) {\r\n            return 0;\r\n        }\r\n\r\n        // If we're after the end of the vesting period - everything is vested;\r\n        if (_time >= _grant.end) {\r\n            return _grant.value;\r\n        }\r\n\r\n        // Calculate amount of installments past until now.\r\n        // NOTE: result gets floored because of integer division.\r\n        uint256 installmentsPast = _time.sub(_grant.start).div(_grant.installmentLength);\r\n\r\n        // Calculate amount of days in entire vesting period.\r\n        uint256 vestingDays = _grant.end.sub(_grant.start);\r\n\r\n        // Calculate and return installments that have passed according to vesting days that have passed.\r\n        return _grant.value.mul(installmentsPast.mul(_grant.installmentLength)).div(vestingDays);\r\n    }\r\n\r\n    /// @dev Calculate the total amount of vested tokens of a holder at a given time.\r\n    /// @param _holder address The address of the holder.\r\n    /// @param _time uint256 The specific time to calculate against.\r\n    /// @return a uint256 Representing a holder's total amount of vested tokens.\r\n    function vestedTokens(address _holder, uint256 _time) external view returns (uint256) {\r\n        Grant memory holderGrant = grants[_holder];\r\n\r\n        if (holderGrant.value == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return calculateVestedTokens(holderGrant, _time);\r\n    }\r\n\r\n    /// @dev Unlock vested tokens and transfer them to their holder.\r\n    /// @param _holder address The address of the holder.\r\n    function unlockVestedTokens(address _holder) external {\r\n        Grant storage holderGrant = grants[_holder];\r\n\r\n        // Require that there will be funds left in grant to transfer to holder.\r\n        require(holderGrant.value.sub(holderGrant.transferred) > 0);\r\n\r\n        // Get the total amount of vested tokens, according to grant.\r\n        uint256 vested = calculateVestedTokens(holderGrant, now);\r\n        if (vested == 0) {\r\n            return;\r\n        }\r\n\r\n        // Make sure the holder doesn't transfer more than what he already has.\r\n        uint256 transferable = vested.sub(holderGrant.transferred);\r\n        if (transferable == 0) {\r\n            return;\r\n        }\r\n\r\n        // Update transferred and total vesting amount, then transfer remaining vested funds to holder.\r\n        holderGrant.transferred = holderGrant.transferred.add(transferable);\r\n        totalVesting = totalVesting.sub(transferable);\r\n        token.transfer(_holder, transferable);\r\n\r\n        emit TokensUnlocked(_holder, transferable);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"mintInBatches\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"lockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenSaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"unlockInBatches\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTokenSaleOngoing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAssigner\",\"type\":\"address\"}],\"name\":\"transferAssigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAddressTokenSaleId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"assignInBatches\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenSaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTokenSaleId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOKEN_SALES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLocker\",\"type\":\"address\"}],\"name\":\"transferLocker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"lockInBatches\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unlockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"assign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BATCH_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSaleId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleOngoing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenSaleId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOKEN_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_assigner\",\"type\":\"address\"},{\"name\":\"_locker\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenSaleId\",\"type\":\"uint256\"}],\"name\":\"TokenSaleStarting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenSaleId\",\"type\":\"uint256\"}],\"name\":\"TokenSaleEnding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Assign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousLocker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newLocker\",\"type\":\"address\"}],\"name\":\"LockerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAssigner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAssigner\",\"type\":\"address\"}],\"name\":\"AssignerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ca32761791b28e60df8ca03fbcd10b93aa18f3aa0000000000000000000000008581a9b439344c4d9c426595ce70cb40fd234353","Library":"","SwarmSource":"bzzr://d01e5d9fc63658b1f428c9cc0240e1ed5f3f4e8c065c99f27cb3fcb0dc310957"}]}