{"status":"1","message":"OK","result":[{"SourceCode":"// The list below in the array listTINAmotley is recited in the video\r\n// \"List, Glory\" by Greg Smith. The elements of listTINAmotley can be \r\n// claimed, transferred, bought, and sold. Users can also add to the \r\n// original list.\r\n\r\n// Code is based on CryptoPunks, by Larva Labs.\r\n\r\n// List elements in listTINAmotley contain text snippets from \r\n// Margaret Thatcher, Donna Haraway (A Cyborg Manfesto), Francois \r\n// Rabelias (Gargantua and Pantagruel), Walt Whitman (Germs), and \r\n// Miguel de Cervantes (Don Quixote).\r\n\r\n// This is part of exhibitions at the John Michael Kohler Art Center in\r\n// Sheboygan, WI, and at Susan Inglett Gallery in New York, NY.\r\n\r\n// A list element associated with _index can be claimed if \r\n// gift_CanBeClaimed(_index) returns true. For inquiries\r\n// about receiving lines owned by info_ownerOfContract for free, \r\n// email ListTINAmotley@gmail.com. \r\n\r\n// In general, the functions that begin with \"gift_\" are used for \r\n// claiming, transferring, and creating script lines without cost beyond \r\n// the transaction fee. For example, to claim an available list element \r\n// associated with _index, execute the gift_ClaimTINAmotleyLine(_index) \r\n// function.\r\n\r\n// The functions that begin with \"info_\" are used to obtain information \r\n// about aspects of the program state, including the address that owns \r\n// a list element, and the \"for sale\" or \"bid\" status of a list element. \r\n\r\n// The functions that begin with \"market_\" are used for buying, selling, and\r\n// placing bids on a list element. For example, to bid on the list element\r\n// associated with _index, send the bid (in wei, not ether) along with\r\n// the function execution of market_DeclareBid(_index).\r\n\r\n// Note that if there's a transaction involving ether (successful sale, \r\n// accepted bid, etc..), the ether (don't forget: in units of wei) is not\r\n// automatically credited to an account; it has to be withdrawn by\r\n// calling market_WithdrawWei().\r\n\r\n// Source code and code used to test the contract are available at \r\n// https://github.com/ListTINAmotley/_List_Glory_\r\n\r\n// EVERYTHING IS IN UNITS OF WEI, NOT ETHER!\r\n\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract _List_Glory_{\r\n\r\n    string public info_Name;\r\n    string public info_Symbol;\r\n\r\n    address public info_OwnerOfContract;\r\n    // Contains the list\r\n    string[] private listTINAmotley;\r\n    // Contains the total number of elements in the list\r\n    uint256 private listTINAmotleyTotalSupply;\r\n    \r\n    mapping (uint => address) private listTINAmotleyIndexToAddress;\r\n    mapping(address => uint256) private listTINAmotleyBalanceOf;\r\n \r\n    // Put list element up for sale by owner. Can be linked to specific \r\n    // potential buyer\r\n    struct forSaleInfo {\r\n        bool isForSale;\r\n        uint256 tokenIndex;\r\n        address seller;\r\n        uint256 minValue;          //in wei.... everything in wei\r\n        address onlySellTo;     // specify to sell only to a specific person\r\n    }\r\n\r\n    // Place bid for specific list element\r\n    struct bidInfo {\r\n        bool hasBid;\r\n        uint256 tokenIndex;\r\n        address bidder;\r\n        uint256 value;\r\n    }\r\n\r\n    // Public info about tokens for sale.\r\n    mapping (uint256 => forSaleInfo) public info_ForSaleInfoByIndex;\r\n    // Public info about highest bid for each token.\r\n    mapping (uint256 => bidInfo) public info_BidInfoByIndex;\r\n    // Information about withdrawals (in units of wei) available  \r\n    //  ... for addresses due to failed bids, successful sales, etc...\r\n    mapping (address => uint256) public info_PendingWithdrawals;\r\n\r\n//Events\r\n\r\n\r\n    event Claim(uint256 tokenId, address indexed to);\r\n    event Transfer(uint256 tokenId, address indexed from, address indexed to);\r\n    event ForSaleDeclared(uint256 indexed tokenId, address indexed from, \r\n        uint256 minValue,address indexed to);\r\n    event ForSaleWithdrawn(uint256 indexed tokenId, address indexed from);\r\n    event ForSaleBought(uint256 indexed tokenId, uint256 value, \r\n        address indexed from, address indexed to);\r\n    event BidDeclared(uint256 indexed tokenId, uint256 value, \r\n        address indexed from);\r\n    event BidWithdrawn(uint256 indexed tokenId, uint256 value, \r\n        address indexed from);\r\n    event BidAccepted(uint256 indexed tokenId, uint256 value, \r\n        address indexed from, address indexed to);\r\n    \r\n    constructor () public {\r\n        info_OwnerOfContract = msg.sender;\r\n\t    info_Name = \"List, Glory\";\r\n\t    info_Symbol = \"L, G\";\r\n        listTINAmotley.push(\"Now that, that there, that's for everyone\");\r\n        listTINAmotleyIndexToAddress[0] = address(0);\r\n        listTINAmotley.push(\"Everyone's invited\");\r\n        listTINAmotleyIndexToAddress[1] = address(0);\r\n        listTINAmotley.push(\"Just bring your lists\");\r\n        listTINAmotleyIndexToAddress[2] = address(0);\r\n \tlistTINAmotley.push(\"The for godsakes of surveillance\");\r\n        listTINAmotleyIndexToAddress[3] = address(0);\r\n \tlistTINAmotley.push(\"The shitabranna of there is no alternative\");\r\n        listTINAmotleyIndexToAddress[4] = address(0);\r\n \tlistTINAmotley.push(\"The clew-bottom of trustless memorials\");\r\n        listTINAmotleyIndexToAddress[5] = address(0);\r\n\tlistTINAmotley.push(\"The churning ballock of sadness\");\r\n        listTINAmotleyIndexToAddress[6] = address(0);\r\n\tlistTINAmotley.push(\"The bagpiped bravado of TINA\");\r\n        listTINAmotleyIndexToAddress[7] = address(0);\r\n\tlistTINAmotley.push(\"There T\");\r\n        listTINAmotleyIndexToAddress[8] = address(0);\r\n\tlistTINAmotley.push(\"Is I\");\r\n        listTINAmotleyIndexToAddress[9] = address(0);\r\n\tlistTINAmotley.push(\"No N\");\r\n        listTINAmotleyIndexToAddress[10] = address(0);\r\n\tlistTINAmotley.push(\"Alternative A\");\r\n        listTINAmotleyIndexToAddress[11] = address(0);\r\n\tlistTINAmotley.push(\"TINA TINA TINA\");\r\n        listTINAmotleyIndexToAddress[12] = address(0);\r\n\tlistTINAmotley.push(\"Motley\");\r\n        listTINAmotleyIndexToAddress[13] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"There is no alternative\");\r\n        listTINAmotleyIndexToAddress[14] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Machines made of sunshine\");\r\n        listTINAmotleyIndexToAddress[15] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Infidel heteroglossia\");\r\n        listTINAmotleyIndexToAddress[16] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"TINA and the cyborg, Margaret and motley\");\r\n        listTINAmotleyIndexToAddress[17] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Motley fecundity, be fruitful and multiply\");\r\n        listTINAmotleyIndexToAddress[18] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Perverts! Mothers! Leninists!\");\r\n        listTINAmotleyIndexToAddress[19] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Space!\");\r\n        listTINAmotleyIndexToAddress[20] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Over the exosphere\");\r\n        listTINAmotleyIndexToAddress[21] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"On top of the stratosphere\");\r\n        listTINAmotleyIndexToAddress[22] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"On top of the troposphere\");\r\n        listTINAmotleyIndexToAddress[23] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Over the chandelier\");\r\n        listTINAmotleyIndexToAddress[24] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"On top of the lithosphere\");\r\n        listTINAmotleyIndexToAddress[25] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Over the crust\");\r\n        listTINAmotleyIndexToAddress[26] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"You're the top\");\r\n        listTINAmotleyIndexToAddress[27] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"You're the top\");\r\n        listTINAmotleyIndexToAddress[28] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Be fruitful!\");\r\n        listTINAmotleyIndexToAddress[29] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Fill the atmosphere, the heavens, the ether\");\r\n        listTINAmotleyIndexToAddress[30] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Glory! Glory. TINA TINA Glory.\");\r\n        listTINAmotleyIndexToAddress[31] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Over the stratosphere\");\r\n        listTINAmotleyIndexToAddress[32] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Over the mesosphere\");\r\n        listTINAmotleyIndexToAddress[33] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Over the troposphere\");\r\n        listTINAmotleyIndexToAddress[34] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"On top of bags of space\");\r\n        listTINAmotleyIndexToAddress[35] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Over backbones and bags of ether\");\r\n        listTINAmotleyIndexToAddress[36] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Now TINA, TINA has a backbone\");\r\n        listTINAmotleyIndexToAddress[37] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"And motley confetti lists\");\r\n        listTINAmotleyIndexToAddress[38] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Confetti arms, confetti feet, confetti mouths, confetti faces\");\r\n        listTINAmotleyIndexToAddress[39] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Confetti assholes\");\r\n        listTINAmotleyIndexToAddress[40] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Confetti cunts and confetti cocks\");\r\n        listTINAmotleyIndexToAddress[41] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Confetti offspring, splendid suns\");\r\n        listTINAmotleyIndexToAddress[42] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"The moon and rings, the countless combinations and effects\");\r\n        listTINAmotleyIndexToAddress[43] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Such-like, and good as such-like\");\r\n        listTINAmotleyIndexToAddress[44] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"(Mumbled)\");\r\n        listTINAmotleyIndexToAddress[45] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Everything's for sale\");\r\n        listTINAmotleyIndexToAddress[46] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Just bring your lists\");\r\n        listTINAmotleyIndexToAddress[47] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Micro resurrections\");\r\n        listTINAmotleyIndexToAddress[48] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Paddle steamers\");\r\n        listTINAmotleyIndexToAddress[49] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Windmills\");\r\n        listTINAmotleyIndexToAddress[50] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Anti-anti-utopias\");\r\n        listTINAmotleyIndexToAddress[51] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"Rocinante lists\");\r\n        listTINAmotleyIndexToAddress[52] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"In memoriam lists\");\r\n        listTINAmotleyIndexToAddress[53] = info_OwnerOfContract;\r\n\tlistTINAmotley.push(\"TINA TINA TINA\");\r\n        listTINAmotleyIndexToAddress[54] = info_OwnerOfContract;\r\n       \r\n\r\n        listTINAmotleyBalanceOf[info_OwnerOfContract] = 42;\r\n        listTINAmotleyBalanceOf[address(0)] = 13;\r\n        listTINAmotleyTotalSupply = 55;\r\n     }\r\n     \r\n    function info_TotalSupply() public view returns (uint256 total){\r\n        total = listTINAmotleyTotalSupply;\r\n        return total;\r\n    }\r\n\r\n    //Number of list elements owned by an account.\r\n    function info_BalanceOf(address _owner) public view \r\n            returns (uint256 balance){\r\n        balance = listTINAmotleyBalanceOf[_owner];\r\n        return balance;\r\n    }\r\n    \r\n    //Shows text of a list element.\r\n    function info_SeeTINAmotleyLine(uint256 _tokenId) external view \r\n            returns(string){\r\n        require(_tokenId < listTINAmotleyTotalSupply);\r\n        return listTINAmotley[_tokenId];\r\n    }\r\n    \r\n    function info_OwnerTINAmotleyLine(uint256 _tokenId) external view \r\n            returns (address owner){\r\n        require(_tokenId < listTINAmotleyTotalSupply);\r\n        owner = listTINAmotleyIndexToAddress[_tokenId];\r\n        return owner;\r\n    }\r\n\r\n    // Is the line available to be claimed?\r\n    function info_CanBeClaimed(uint256 _tokenId) external view returns(bool){\r\n \trequire(_tokenId < listTINAmotleyTotalSupply);\r\n\tif (listTINAmotleyIndexToAddress[_tokenId] == address(0))\r\n\t  return true;\r\n\telse\r\n\t  return false;\r\n\t  }\r\n\t\r\n    // Claim line owned by address(0).\r\n    function gift_ClaimTINAmotleyLine(uint256 _tokenId) external returns(bool){\r\n        require(_tokenId < listTINAmotleyTotalSupply);\r\n        require(listTINAmotleyIndexToAddress[_tokenId] == address(0));\r\n        listTINAmotleyIndexToAddress[_tokenId] = msg.sender;\r\n        listTINAmotleyBalanceOf[msg.sender]++;\r\n        listTINAmotleyBalanceOf[address(0)]--;\r\n        emit Claim(_tokenId, msg.sender);\r\n        return true;\r\n    }\r\n\r\n   // Create new list element. \r\n    function gift_CreateTINAmotleyLine(string _text) external returns(bool){ \r\n        require (msg.sender != address(0));\r\n        uint256  oldTotalSupply = listTINAmotleyTotalSupply;\r\n        listTINAmotleyTotalSupply++;\r\n        require (listTINAmotleyTotalSupply > oldTotalSupply);\r\n        listTINAmotley.push(_text);\r\n        uint256 _tokenId = listTINAmotleyTotalSupply - 1;\r\n        listTINAmotleyIndexToAddress[_tokenId] = msg.sender;\r\n        listTINAmotleyBalanceOf[msg.sender]++;\r\n        return true;\r\n    }\r\n\r\n    // Transfer by owner to address. Transferring to address(0) will\r\n    // make line available to be claimed.\r\n    function gift_Transfer(address _to, uint256 _tokenId) public returns(bool) {\r\n        address initialOwner = listTINAmotleyIndexToAddress[_tokenId];\r\n        require (initialOwner == msg.sender);\r\n        require (_tokenId < listTINAmotleyTotalSupply);\r\n        // Remove for sale.\r\n        market_WithdrawForSale(_tokenId);\r\n        rawTransfer (initialOwner, _to, _tokenId);\r\n        // Remove new owner's bid, if it exists.\r\n        clearNewOwnerBid(_to, _tokenId);\r\n        return true;\r\n    }\r\n\r\n    // Let anyone interested know that the owner put a token up for sale. \r\n    // Anyone can obtain it by sending an amount of wei equal to or\r\n    // larger than  _minPriceInWei. \r\n    function market_DeclareForSale(uint256 _tokenId, uint256 _minPriceInWei) \r\n            external returns (bool){\r\n        require (_tokenId < listTINAmotleyTotalSupply);\r\n        address tokenOwner = listTINAmotleyIndexToAddress[_tokenId];\r\n        require (msg.sender == tokenOwner);\r\n        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(true, _tokenId, \r\n            msg.sender, _minPriceInWei, address(0));\r\n        emit ForSaleDeclared(_tokenId, msg.sender, _minPriceInWei, address(0));\r\n        return true;\r\n    }\r\n    \r\n    // Let anyone interested know that the owner put a token up for sale. \r\n    // Only the address _to can obtain it by sending an amount of wei equal \r\n    // to or larger than _minPriceInWei.\r\n    function market_DeclareForSaleToAddress(uint256 _tokenId, uint256 \r\n            _minPriceInWei, address _to) external returns(bool){\r\n        require (_tokenId < listTINAmotleyTotalSupply);\r\n        address tokenOwner = listTINAmotleyIndexToAddress[_tokenId];\r\n        require (msg.sender == tokenOwner);\r\n        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(true, _tokenId, \r\n            msg.sender, _minPriceInWei, _to);\r\n        emit ForSaleDeclared(_tokenId, msg.sender, _minPriceInWei, _to);\r\n        return true;\r\n    }\r\n\r\n    // Owner no longer wants token for sale, or token has changed owner, \r\n    // so previously posted for sale is no longer valid.\r\n    function market_WithdrawForSale(uint256 _tokenId) public returns(bool){\r\n        require (_tokenId < listTINAmotleyTotalSupply);\r\n        require (msg.sender == listTINAmotleyIndexToAddress[_tokenId]);\r\n        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(false, _tokenId, \r\n            address(0), 0, address(0));\r\n        emit ForSaleWithdrawn(_tokenId, msg.sender);\r\n        return true;\r\n    }\r\n    \r\n    // I'll take it. Must send at least as many wei as minValue in \r\n    // forSale structure.\r\n    function market_BuyForSale(uint256 _tokenId) payable external returns(bool){\r\n        require (_tokenId < listTINAmotleyTotalSupply);\r\n        forSaleInfo storage existingForSale = info_ForSaleInfoByIndex[_tokenId];\r\n        require(existingForSale.isForSale);\r\n        require(existingForSale.onlySellTo == address(0) || \r\n            existingForSale.onlySellTo == msg.sender);\r\n        require(msg.value >= existingForSale.minValue); \r\n        require(existingForSale.seller == \r\n            listTINAmotleyIndexToAddress[_tokenId]); \r\n        address seller = listTINAmotleyIndexToAddress[_tokenId];\r\n        rawTransfer(seller, msg.sender, _tokenId);\r\n        // must withdrawal for sale after transfer to make sure msg.sender\r\n        //  is the current owner.\r\n        market_WithdrawForSale(_tokenId);\r\n        // clear bid of new owner, if it exists\r\n        clearNewOwnerBid(msg.sender, _tokenId);\r\n        info_PendingWithdrawals[seller] += msg.value;\r\n        emit ForSaleBought(_tokenId, msg.value, seller, msg.sender);\r\n        return true;\r\n    }\r\n    \r\n    // Let anyone interested know that potential buyer put up money for a token.\r\n    function market_DeclareBid(uint256 _tokenId) payable external returns(bool){\r\n        require (_tokenId < listTINAmotleyTotalSupply);\r\n        require (listTINAmotleyIndexToAddress[_tokenId] != address(0));\r\n        require (listTINAmotleyIndexToAddress[_tokenId] != msg.sender);\r\n        require (msg.value > 0);\r\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\r\n        // Keep only the highest bid.\r\n        require (msg.value > existingBid.value);\r\n        if (existingBid.value > 0){\r\n            info_PendingWithdrawals[existingBid.bidder] += existingBid.value;\r\n        }\r\n        info_BidInfoByIndex[_tokenId] = bidInfo(true, _tokenId, \r\n            msg.sender, msg.value);\r\n        emit BidDeclared(_tokenId, msg.value, msg.sender);\r\n        return true;\r\n    }\r\n    \r\n    // Potential buyer changes mind and withdrawals bid.\r\n    function market_WithdrawBid(uint256 _tokenId) external returns(bool){\r\n        require (_tokenId < listTINAmotleyTotalSupply);\r\n        require (listTINAmotleyIndexToAddress[_tokenId] != address(0));\r\n        require (listTINAmotleyIndexToAddress[_tokenId] != msg.sender);\r\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\r\n        require (existingBid.hasBid);\r\n        require (existingBid.bidder == msg.sender);\r\n        uint256 amount = existingBid.value;\r\n        // Refund\r\n        info_PendingWithdrawals[existingBid.bidder] += amount;\r\n        info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, address(0), 0);\r\n        emit BidWithdrawn(_tokenId, amount, msg.sender);\r\n        return true;\r\n    }\r\n    \r\n    // Accept bid, and transfer money and token. All money in wei.\r\n    function market_AcceptBid(uint256 _tokenId, uint256 minPrice) \r\n            external returns(bool){\r\n        require (_tokenId < listTINAmotleyTotalSupply);\r\n        address seller = listTINAmotleyIndexToAddress[_tokenId];\r\n        require (seller == msg.sender);\r\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\r\n        require (existingBid.hasBid);\r\n        //Bid must be larger than minPrice\r\n        require (existingBid.value > minPrice);\r\n        address buyer = existingBid.bidder;\r\n        // Remove for sale.\r\n        market_WithdrawForSale(_tokenId);\r\n        rawTransfer (seller, buyer, _tokenId);\r\n        uint256 amount = existingBid.value;\r\n        // Remove bid.\r\n        info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, address(0),0);\r\n        info_PendingWithdrawals[seller] += amount;\r\n        emit BidAccepted(_tokenId, amount, seller, buyer);\r\n        return true;\r\n    }\r\n    \r\n    // Retrieve money to successful sale, failed bid, withdrawn bid, etc.\r\n    //  All in wei. Note that refunds, income, etc. are NOT automatically\r\n    // deposited in the user's address. The user must withdraw the funds.\r\n    function market_WithdrawWei() external returns(bool) {\r\n       uint256 amount = info_PendingWithdrawals[msg.sender];\r\n       require (amount > 0);\r\n       info_PendingWithdrawals[msg.sender] = 0;\r\n       msg.sender.transfer(amount);\r\n       return true;\r\n    } \r\n    \r\n    function clearNewOwnerBid(address _to, uint256 _tokenId) internal {\r\n        // clear bid when become owner via transfer or forSaleBuy\r\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\r\n        if (existingBid.bidder == _to){\r\n            uint256 amount = existingBid.value;\r\n            info_PendingWithdrawals[_to] += amount;\r\n            info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, \r\n                address(0), 0);\r\n            emit BidWithdrawn(_tokenId, amount, _to);\r\n        }\r\n      \r\n    }\r\n    \r\n    function rawTransfer(address _from, address _to, uint256 _tokenId) \r\n            internal {\r\n        listTINAmotleyBalanceOf[_from]--;\r\n        listTINAmotleyBalanceOf[_to]++;\r\n        listTINAmotleyIndexToAddress[_tokenId] = _to;\r\n        emit Transfer(_tokenId, _from, _to);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_minPriceInWei\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"market_DeclareForSaleToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"info_BidInfoByIndex\",\"outputs\":[{\"name\":\"hasBid\",\"type\":\"bool\"},{\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"info_BalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"info_CanBeClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"info_TotalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"info_OwnerOfContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"info_Symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"market_AcceptBid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"market_DeclareBid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"market_WithdrawWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"market_WithdrawBid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"gift_CreateTINAmotleyLine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"market_BuyForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"gift_Transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"info_PendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_minPriceInWei\",\"type\":\"uint256\"}],\"name\":\"market_DeclareForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"info_SeeTINAmotleyLine\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"info_ForSaleInfoByIndex\",\"outputs\":[{\"name\":\"isForSale\",\"type\":\"bool\"},{\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"minValue\",\"type\":\"uint256\"},{\"name\":\"onlySellTo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"gift_ClaimTINAmotleyLine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"info_OwnerTINAmotleyLine\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"market_WithdrawForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"info_Name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ForSaleDeclared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ForSaleWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ForSaleBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"BidDeclared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"BidAccepted\",\"type\":\"event\"}]","ContractName":"_List_Glory_","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://eb08783e7a9639131f932ac3e0fa958c001135dfcc14ff8413c376ab390166cf"}]}