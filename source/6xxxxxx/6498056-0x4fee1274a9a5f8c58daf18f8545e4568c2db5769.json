{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract EtherLife is Ownable\r\n{   \r\n    using SafeMath for uint;\r\n    \r\n    struct deposit {\r\n        uint time;\r\n        uint value;\r\n        uint timeOfLastWithdraw;\r\n    }\r\n    \r\n    mapping(address => deposit) public deposits;\r\n    mapping(address => address) public parents;\r\n    address[] public investors;\r\n    \r\n    uint public constant withdrawPeriod = 1 days;\r\n    \r\n    uint public constant minDepositSum = 100 finney; // 0.1 ether;\r\n    \r\n    event Deposit(address indexed from, uint256 value);\r\n    event Withdraw(address indexed from, uint256 value);\r\n    event ReferrerBonus(address indexed from, address indexed to, uint8 level, uint256 value);\r\n    \r\n    \r\n    modifier checkSender() \r\n    {\r\n        require(msg.sender != address(0));\r\n        _;\r\n    }\r\n\r\n    \r\n    function bytesToAddress(bytes source) internal pure returns(address parsedAddress) \r\n    {\r\n        assembly {\r\n            parsedAddress := mload(add(source,0x14))\r\n        }\r\n        return parsedAddress;\r\n    }\r\n\r\n    function () checkSender public payable \r\n    {\r\n        if(msg.value == 0)\r\n        {\r\n            withdraw();\r\n            return;\r\n        }\r\n        \r\n        require(msg.value >= minDepositSum);\r\n        \r\n        checkReferrer(msg.sender);\r\n        \r\n        payFee(msg.value);\r\n        addDeposit(msg.sender, msg.value);\r\n        \r\n        emit Deposit(msg.sender, msg.value);\r\n        \r\n        payRewards(msg.sender, msg.value);\r\n    }\r\n    \r\n    function getInvestorsLength() public view returns (uint)\r\n    {\r\n        return investors.length;\r\n    }\r\n    \r\n    function getParents(address investorAddress) public view returns (address[])\r\n    {\r\n        address[] memory refLevels = new address[](5);\r\n        address current = investorAddress;\r\n        \r\n        for(uint8 i = 0; i < 5; i++)\r\n        {\r\n             current = parents[current];\r\n             if(current == address(0)) break;\r\n             refLevels[i] = current;\r\n        }\r\n        \r\n        return refLevels;\r\n    }\r\n    \r\n    function calculateRewardForLevel(uint8 level, uint value) public pure returns (uint)\r\n    {\r\n        if(level == 1) return value.div(50);           // 2%\r\n        if(level == 2) return value.div(100);          // 1%\r\n        if(level == 3) return value.div(200);          // 0.5%\r\n        if(level == 4) return value.div(400);          // 0.25%\r\n        if(level == 5) return value.div(400);          // 0.25%\r\n        \r\n        return 0;\r\n    }\r\n    \r\n    function calculatWithdrawForPeriod(uint8 period, uint depositValue, uint periodsCount) public pure returns (uint)\r\n    {\r\n        if(period == 1)\r\n        {\r\n            return depositValue.div(25).mul(periodsCount);          // 4%\r\n        }\r\n        else if(period == 2)\r\n        {\r\n            return depositValue.mul(3).div(100).mul(periodsCount);  // 3%\r\n        }\r\n        else if(period == 3)\r\n        {\r\n            return depositValue.div(50).mul(periodsCount);          // 2%\r\n        }\r\n        else if(period == 4)\r\n        {\r\n            return depositValue.div(100).mul(periodsCount);         // 1%\r\n        }\r\n        else if(period == 5)\r\n        {\r\n            return depositValue.div(200).mul(periodsCount);         // 0.5%\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    \r\n    function calculateWithdraw(uint currentTime, uint depositTime, uint depositValue, uint timeOfLastWithdraw) public pure returns (uint)\r\n    {\r\n        if(currentTime - timeOfLastWithdraw < withdrawPeriod)\r\n        {\r\n            return 0;\r\n        }\r\n        \r\n        uint timeEndOfPeriod1 = depositTime + 30 days;\r\n        uint timeEndOfPeriod2 = depositTime + 60 days;\r\n        uint timeEndOfPeriod3 = depositTime + 90 days;\r\n        uint timeEndOfPeriod4 = depositTime + 120 days;\r\n        \r\n\r\n        uint sum = 0;\r\n        uint timeEnd = 0;\r\n        uint periodsCount = 0;\r\n            \r\n        if(timeOfLastWithdraw < timeEndOfPeriod1)\r\n        {\r\n            timeEnd = currentTime > timeEndOfPeriod1 ? timeEndOfPeriod1 : currentTime;\r\n            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\r\n            sum = calculatWithdrawForPeriod(1, depositValue, periodsCount);\r\n        }\r\n        \r\n        if(timeOfLastWithdraw < timeEndOfPeriod2)\r\n        {\r\n            timeEnd = currentTime > timeEndOfPeriod2 ? timeEndOfPeriod2 : currentTime;\r\n            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\r\n            sum = sum.add(calculatWithdrawForPeriod(2, depositValue, periodsCount));\r\n        }\r\n        \r\n        if(timeOfLastWithdraw < timeEndOfPeriod3)\r\n        {\r\n            timeEnd = currentTime > timeEndOfPeriod3 ? timeEndOfPeriod3 : currentTime;\r\n            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\r\n            sum = sum.add(calculatWithdrawForPeriod(3, depositValue, periodsCount));\r\n        }\r\n        \r\n        if(timeOfLastWithdraw < timeEndOfPeriod4)\r\n        {\r\n            timeEnd = currentTime > timeEndOfPeriod4 ? timeEndOfPeriod4 : currentTime;\r\n            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\r\n            sum = sum.add(calculatWithdrawForPeriod(4, depositValue, periodsCount));\r\n        }\r\n        \r\n        if(timeOfLastWithdraw >= timeEndOfPeriod4)\r\n        {\r\n            timeEnd = currentTime;\r\n            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\r\n            sum = sum.add(calculatWithdrawForPeriod(5, depositValue, periodsCount));\r\n        }\r\n         \r\n        return sum;\r\n    }\r\n    \r\n    function checkReferrer(address investorAddress) internal\r\n    {\r\n        if(deposits[investorAddress].value == 0 && msg.data.length == 20)\r\n        {\r\n            address referrerAddress = bytesToAddress(bytes(msg.data));\r\n            require(referrerAddress != investorAddress);     \r\n            require(deposits[referrerAddress].value > 0);        \r\n            \r\n            parents[investorAddress] = referrerAddress;\r\n            investors.push(investorAddress);\r\n        }\r\n    }\r\n    \r\n    function payRewards(address investorAddress, uint depositValue) internal\r\n    {   \r\n        address[] memory parentAddresses = getParents(investorAddress);\r\n        for(uint8 i = 0; i < parentAddresses.length; i++)\r\n        {\r\n            address parent = parentAddresses[i];\r\n            if(parent == address(0)) break;\r\n            \r\n            uint rewardValue = calculateRewardForLevel(i + 1, depositValue);\r\n            parent.transfer(rewardValue);\r\n            \r\n            emit ReferrerBonus(investorAddress, parent, i + 1, rewardValue);\r\n        }\r\n    }\r\n    \r\n    function addDeposit(address investorAddress, uint weiAmount) internal\r\n    {   \r\n        if(deposits[investorAddress].value == 0)\r\n        {\r\n            deposits[investorAddress].time = now;\r\n            deposits[investorAddress].timeOfLastWithdraw = now;\r\n            deposits[investorAddress].value = weiAmount;\r\n        }\r\n        else\r\n        {\r\n            if(now - deposits[investorAddress].timeOfLastWithdraw >= withdrawPeriod)\r\n            {\r\n                payWithdraw(investorAddress);\r\n            }\r\n            \r\n            deposits[investorAddress].value = deposits[investorAddress].value.add(weiAmount);\r\n            deposits[investorAddress].timeOfLastWithdraw = now;\r\n        }\r\n    }\r\n    \r\n    function payFee(uint weiAmount) internal\r\n    {\r\n        uint fee = weiAmount.mul(16).div(100); // 16%\r\n        owner.transfer(fee);\r\n    }\r\n    \r\n    function calculateNewTime(uint startTime, uint endTime) public pure returns (uint) \r\n    {\r\n        uint periodsCount = endTime.sub(startTime).div(withdrawPeriod);\r\n        return startTime.add(withdrawPeriod.mul(periodsCount));\r\n    }\r\n    \r\n    function calculatePeriodsCountAndNewTime(uint startTime, uint endTime) public pure returns (uint, uint) \r\n    {\r\n        uint periodsCount = endTime.sub(startTime).div(withdrawPeriod);\r\n        uint newTime = startTime.add(withdrawPeriod.mul(periodsCount));\r\n        return (periodsCount, newTime);\r\n    }\r\n    \r\n    function payWithdraw(address to) internal\r\n    {\r\n        require(deposits[to].value > 0);\r\n        \r\n        uint sum = calculateWithdraw(now, deposits[to].time, deposits[to].value, deposits[to].timeOfLastWithdraw);\r\n        require(sum > 0);\r\n        \r\n        deposits[to].timeOfLastWithdraw = calculateNewTime(deposits[to].time, now);\r\n        \r\n        to.transfer(sum);\r\n        emit Withdraw(to, sum);\r\n    }\r\n    \r\n    \r\n    function withdraw() checkSender public returns (bool)\r\n    {\r\n        payWithdraw(msg.sender);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function batchWithdraw(address[] to) onlyOwner public \r\n    {\r\n        for(uint i = 0; i < to.length; i++)\r\n        {\r\n            payWithdraw(to[i]);\r\n        }\r\n    }\r\n    \r\n    function batchWithdraw(uint startIndex, uint length) onlyOwner public \r\n    {\r\n        for(uint i = startIndex; i < length; i++)\r\n        {\r\n            payWithdraw(investors[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"withdrawPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"parents\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startIndex\",\"type\":\"uint256\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"batchWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"batchWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDepositSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"calculatePeriodsCountAndNewTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"calculateNewTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentTime\",\"type\":\"uint256\"},{\"name\":\"depositTime\",\"type\":\"uint256\"},{\"name\":\"depositValue\",\"type\":\"uint256\"},{\"name\":\"timeOfLastWithdraw\",\"type\":\"uint256\"}],\"name\":\"calculateWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"getParents\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"calculateRewardForLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint8\"},{\"name\":\"depositValue\",\"type\":\"uint256\"},{\"name\":\"periodsCount\",\"type\":\"uint256\"}],\"name\":\"calculatWithdrawForPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timeOfLastWithdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReferrerBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EtherLife","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://486c2cd2c04e7afd7e5083b352de29cda69d5c9581df4365a267546049c6a6f1"}]}