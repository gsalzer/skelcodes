{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: contracts/utils/Ownable.sol\r\n\r\n/*\r\n* Ownable\r\n*\r\n* Base contract with an owner.\r\n* Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n*/\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner)\r\n        public\r\n        onlyOwner\r\n    {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/tokens/EIP20Interface.sol\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\ncontract EIP20Interface is Ownable {\r\n    /* This is a slight change to the ERC20 base standard.\r\n    function totalSupply() constant returns (uint256 supply);\r\n    is replaced with:\r\n    uint256 public totalSupply;\r\n    This automatically creates a getter function for the totalSupply.\r\n    This is moved to the base contract since public getter functions are not\r\n    currently recognised as an implementation of the matching abstract\r\n    function by the compiler.\r\n    */\r\n    /// total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Token is EIP20Interface {}\r\n\r\n// File: contracts/exchange/TokenTransferProxy.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 ZeroEx Intl.\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n\r\n/// @title TokenTransferProxy - Transfers tokens on behalf of contracts that have been approved via decentralized governance.\r\n/// @author Amir Bandeali - <amir@0xProject.com>, Will Warren - <will@0xProject.com>\r\ncontract TokenTransferProxy is Ownable {\r\n\r\n    /// @dev Only authorized addresses can invoke functions with this modifier.\r\n    modifier onlyAuthorized {\r\n        require(authorized[msg.sender], \"TOKEN_TRANSFER_PROXY_UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier targetAuthorized(address target) {\r\n        require(authorized[target], \"TOKEN_TRANSFER_PROXY_TARGET_UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier targetNotAuthorized(address target) {\r\n        require(!authorized[target], \"TOKEN_TRANSFER_PROXY_TARGET_ALREADY_AUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    mapping (address => bool) public authorized;\r\n    address[] public authorities;\r\n\r\n    event TokenTransferProxyLogAuthorizedAddressAdded(address indexed target, address indexed caller);\r\n    event TokenTransferProxyLogAuthorizedAddressRemoved(address indexed target, address indexed caller);\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Authorizes an address.\r\n    /// @param target Address to authorize.\r\n    function addAuthorizedAddress(address target)\r\n        public\r\n        onlyOwner\r\n        targetNotAuthorized(target)\r\n    {\r\n        authorized[target] = true;\r\n        authorities.push(target);\r\n        emit TokenTransferProxyLogAuthorizedAddressAdded(target, msg.sender);\r\n    }\r\n\r\n    /// @dev Removes authorizion of an address.\r\n    /// @param target Address to remove authorization from.\r\n    function removeAuthorizedAddress(address target)\r\n        public\r\n        onlyOwner\r\n        targetAuthorized(target)\r\n    {\r\n        delete authorized[target];\r\n        for (uint i = 0; i < authorities.length; i++) {\r\n            if (authorities[i] == target) {\r\n                authorities[i] = authorities[authorities.length - 1];\r\n                authorities.length -= 1;\r\n                break;\r\n            }\r\n        }\r\n        emit TokenTransferProxyLogAuthorizedAddressRemoved(target, msg.sender);\r\n    }\r\n\r\n    /// @dev Calls into ERC20 Token contract, invoking transferFrom.\r\n    /// @param token Address of token to transfer.\r\n    /// @param from Address to transfer token from.\r\n    /// @param to Address to transfer token to.\r\n    /// @param value Amount of token to transfer.\r\n    /// @return Success of transfer.\r\n    function transferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint value)\r\n        public\r\n        onlyAuthorized\r\n        returns (bool)\r\n    {\r\n        return Token(token).transferFrom(from, to, value);\r\n    }\r\n\r\n    /*\r\n     * Public constant functions\r\n     */\r\n    /// @dev Gets all authorized addresses.\r\n    /// @return Array of authorized addresses.\r\n    function getAuthorizedAddresses()\r\n        public\r\n        constant\r\n        returns (address[])\r\n    {\r\n        return authorities;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b, \"SAFE_MATH_INVALID_MUL\");\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SAFE_MATH_INVALID_SUB\");\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint c = a + b;\r\n        require(c >= a, \"SAFE_MATH_INVALID_ADD\");\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/SafeMathLibrary.sol\r\n\r\nlibrary SafeMathLibrary {\r\n    function safeMul(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b, \"SAFE_MATH_INVALID_MUL\");\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SAFE_MATH_INVALID_SUB\");\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint c = a + b;\r\n        require(c >= a, \"SAFE_MATH_INVALID_ADD\");\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n// File: contracts/tokens/RewardService.sol\r\n\r\ncontract RewardService is TokenTransferProxy {\r\n\r\n    using SafeMathLibrary for uint;\r\n\r\n    address public token;\r\n    uint public rateDivider;\r\n    uint public rateMultiplier;\r\n\r\n    mapping (address => uint) public balances;\r\n\r\n    event RewardDeposit(address indexed _to, uint256 _value);\r\n    event RewardWithdraw(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    function RewardService(address _token, uint _rateMultiplier, uint _rateDivider) public {\r\n        require(_token != address(0), \"REWARDS_INVALID_TOKEN_ADDRESS\");\r\n\r\n        token = _token;\r\n        setRate(_rateMultiplier, _rateDivider);\r\n    }\r\n\r\n    function setRate(uint _rateMultiplier, uint _rateDivider) public onlyOwner {\r\n        require(_rateMultiplier != 0 && _rateDivider != 0, \"REWARDS_INVALID_RATE\");\r\n\r\n        rateMultiplier = _rateMultiplier;\r\n        rateDivider = _rateDivider;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function deposit(address _to, uint _value) public onlyAuthorized returns (bool success) {\r\n        uint amount = _value.safeMul(rateMultiplier).safeDiv(rateDivider);\r\n        balances[_to] = balances[_to].safeAdd(amount);\r\n        emit RewardDeposit(_to, amount);\r\n        return true;\r\n    }\r\n\r\n    function reward(address _to, uint _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value, \"REWARDS_INSUFFICIENT_BALANCE\");\r\n        balances[msg.sender] -= _value;\r\n\r\n        require(Token(token).transfer(_to, _value), \"REWARDS_TRANSFER_FAILURE\");\r\n\r\n        emit RewardWithdraw(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-shared-lib/contracts/ERC20Interface.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n/// @title Defines an interface for EIP20 token smart contract\r\ncontract ERC20Interface {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    string public symbol;\r\n\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n}\r\n\r\n// File: @laborx/solidity-shared-lib/contracts/Owned.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\n/// @title Owned contract with safe ownership pass.\r\n///\r\n/// Note: all the non constant functions return false instead of throwing in case if state change\r\n/// didn't happen yet.\r\ncontract Owned {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address public contractOwner;\r\n    address public pendingContractOwner;\r\n\r\n    modifier onlyContractOwner {\r\n        if (msg.sender == contractOwner) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    constructor()\r\n    public\r\n    {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    /// @notice Prepares ownership pass.\r\n    /// Can only be called by current owner.\r\n    /// @param _to address of the next owner.\r\n    /// @return success.\r\n    function changeContractOwnership(address _to)\r\n    public\r\n    onlyContractOwner\r\n    returns (bool)\r\n    {\r\n        if (_to == 0x0) {\r\n            return false;\r\n        }\r\n        pendingContractOwner = _to;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Finalize ownership pass.\r\n    /// Can only be called by pending owner.\r\n    /// @return success.\r\n    function claimContractOwnership()\r\n    public\r\n    returns (bool)\r\n    {\r\n        if (msg.sender != pendingContractOwner) {\r\n            return false;\r\n        }\r\n\r\n        emit OwnershipTransferred(contractOwner, pendingContractOwner);\r\n        contractOwner = pendingContractOwner;\r\n        delete pendingContractOwner;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Allows the current owner to transfer control of the contract to a newOwner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(address newOwner)\r\n    public\r\n    onlyContractOwner\r\n    returns (bool)\r\n    {\r\n        if (newOwner == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        emit OwnershipTransferred(contractOwner, newOwner);\r\n        contractOwner = newOwner;\r\n        delete pendingContractOwner;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Allows the current owner to transfer control of the contract to a newOwner.\r\n    /// @dev Backward compatibility only.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferContractOwnership(address newOwner)\r\n    public\r\n    returns (bool)\r\n    {\r\n        return transferOwnership(newOwner);\r\n    }\r\n\r\n    /// @notice Withdraw given tokens from contract to owner.\r\n    /// This method is only allowed for contact owner.\r\n    function withdrawTokens(address[] tokens)\r\n    public\r\n    onlyContractOwner\r\n    {\r\n        address _contractOwner = contractOwner;\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            ERC20Interface token = ERC20Interface(tokens[i]);\r\n            uint balance = token.balanceOf(this);\r\n            if (balance > 0) {\r\n                token.transfer(_contractOwner, balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraw ether from contract to owner.\r\n    /// This method is only allowed for contact owner.\r\n    function withdrawEther()\r\n    public\r\n    onlyContractOwner\r\n    {\r\n        uint balance = address(this).balance;\r\n        if (balance > 0)  {\r\n            contractOwner.transfer(balance);\r\n        }\r\n    }\r\n\r\n    /// @notice Transfers ether to another address.\r\n    /// Allowed only for contract owners.\r\n    /// @param _to recepient address\r\n    /// @param _value wei to transfer; must be less or equal to total balance on the contract\r\n    function transferEther(address _to, uint256 _value)\r\n    public\r\n    onlyContractOwner\r\n    {\r\n        require(_to != 0x0, \"INVALID_ETHER_RECEPIENT_ADDRESS\");\r\n        if (_value > address(this).balance) {\r\n            revert(\"INVALID_VALUE_TO_TRANSFER_ETHER\");\r\n        }\r\n\r\n        _to.transfer(_value);\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-storage-lib/contracts/Storage.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\ncontract Manager {\r\n    function isAllowed(address _actor, bytes32 _role) public view returns (bool);\r\n    function hasAccess(address _actor) public view returns (bool);\r\n}\r\n\r\n\r\ncontract Storage is Owned {\r\n    struct Crate {\r\n        mapping(bytes32 => uint) uints;\r\n        mapping(bytes32 => address) addresses;\r\n        mapping(bytes32 => bool) bools;\r\n        mapping(bytes32 => int) ints;\r\n        mapping(bytes32 => uint8) uint8s;\r\n        mapping(bytes32 => bytes32) bytes32s;\r\n        mapping(bytes32 => AddressUInt8) addressUInt8s;\r\n        mapping(bytes32 => string) strings;\r\n    }\r\n\r\n    struct AddressUInt8 {\r\n        address _address;\r\n        uint8 _uint8;\r\n    }\r\n\r\n    mapping(bytes32 => Crate) internal crates;\r\n    Manager public manager;\r\n\r\n    modifier onlyAllowed(bytes32 _role) {\r\n        if (!(msg.sender == address(this) || manager.isAllowed(msg.sender, _role))) {\r\n            revert(\"STORAGE_FAILED_TO_ACCESS_PROTECTED_FUNCTION\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setManager(Manager _manager)\r\n    external\r\n    onlyContractOwner\r\n    returns (bool)\r\n    {\r\n        manager = _manager;\r\n        return true;\r\n    }\r\n\r\n    function setUInt(bytes32 _crate, bytes32 _key, uint _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setUInt(_crate, _key, _value);\r\n    }\r\n\r\n    function _setUInt(bytes32 _crate, bytes32 _key, uint _value)\r\n    internal\r\n    {\r\n        crates[_crate].uints[_key] = _value;\r\n    }\r\n\r\n\r\n    function getUInt(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return crates[_crate].uints[_key];\r\n    }\r\n\r\n    function setAddress(bytes32 _crate, bytes32 _key, address _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setAddress(_crate, _key, _value);\r\n    }\r\n\r\n    function _setAddress(bytes32 _crate, bytes32 _key, address _value)\r\n    internal\r\n    {\r\n        crates[_crate].addresses[_key] = _value;\r\n    }\r\n\r\n    function getAddress(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        return crates[_crate].addresses[_key];\r\n    }\r\n\r\n    function setBool(bytes32 _crate, bytes32 _key, bool _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setBool(_crate, _key, _value);\r\n    }\r\n\r\n    function _setBool(bytes32 _crate, bytes32 _key, bool _value)\r\n    internal\r\n    {\r\n        crates[_crate].bools[_key] = _value;\r\n    }\r\n\r\n    function getBool(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        return crates[_crate].bools[_key];\r\n    }\r\n\r\n    function setInt(bytes32 _crate, bytes32 _key, int _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setInt(_crate, _key, _value);\r\n    }\r\n\r\n    function _setInt(bytes32 _crate, bytes32 _key, int _value)\r\n    internal\r\n    {\r\n        crates[_crate].ints[_key] = _value;\r\n    }\r\n\r\n    function getInt(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (int)\r\n    {\r\n        return crates[_crate].ints[_key];\r\n    }\r\n\r\n    function setUInt8(bytes32 _crate, bytes32 _key, uint8 _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setUInt8(_crate, _key, _value);\r\n    }\r\n\r\n    function _setUInt8(bytes32 _crate, bytes32 _key, uint8 _value)\r\n    internal\r\n    {\r\n        crates[_crate].uint8s[_key] = _value;\r\n    }\r\n\r\n    function getUInt8(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (uint8)\r\n    {\r\n        return crates[_crate].uint8s[_key];\r\n    }\r\n\r\n    function setBytes32(bytes32 _crate, bytes32 _key, bytes32 _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setBytes32(_crate, _key, _value);\r\n    }\r\n\r\n    function _setBytes32(bytes32 _crate, bytes32 _key, bytes32 _value)\r\n    internal\r\n    {\r\n        crates[_crate].bytes32s[_key] = _value;\r\n    }\r\n\r\n    function getBytes32(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (bytes32)\r\n    {\r\n        return crates[_crate].bytes32s[_key];\r\n    }\r\n\r\n    function setAddressUInt8(bytes32 _crate, bytes32 _key, address _value, uint8 _value2)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setAddressUInt8(_crate, _key, _value, _value2);\r\n    }\r\n\r\n    function _setAddressUInt8(bytes32 _crate, bytes32 _key, address _value, uint8 _value2)\r\n    internal\r\n    {\r\n        crates[_crate].addressUInt8s[_key] = AddressUInt8(_value, _value2);\r\n    }\r\n\r\n    function getAddressUInt8(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (address, uint8)\r\n    {\r\n        return (crates[_crate].addressUInt8s[_key]._address, crates[_crate].addressUInt8s[_key]._uint8);\r\n    }\r\n\r\n    function setString(bytes32 _crate, bytes32 _key, string _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setString(_crate, _key, _value);\r\n    }\r\n\r\n    function _setString(bytes32 _crate, bytes32 _key, string _value)\r\n    internal\r\n    {\r\n        crates[_crate].strings[_key] = _value;\r\n    }\r\n\r\n    function getString(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (string)\r\n    {\r\n        return crates[_crate].strings[_key];\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-storage-lib/contracts/StorageInterface.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\nlibrary StorageInterface {\r\n    struct Config {\r\n        Storage store;\r\n        bytes32 crate;\r\n    }\r\n\r\n    struct UInt {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct UInt8 {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Int {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Address {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Bool {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Bytes32 {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct String {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Mapping {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct StringMapping {\r\n        String id;\r\n    }\r\n\r\n    struct UIntBoolMapping {\r\n        Bool innerMapping;\r\n    }\r\n\r\n    struct UIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntBytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntEnumMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBoolMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUInt8Mapping {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct AddressUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressAddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UInt8Mapping {\r\n        UInt8 innerMapping;\r\n    }\r\n\r\n    struct Bytes32BoolMapping {\r\n        Bool innerMapping;\r\n    }\r\n\r\n    struct Bytes32Bytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32AddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UIntBoolMapping {\r\n        Bool innerMapping;\r\n    }\r\n\r\n    struct AddressAddressUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressAddressUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBytes32Bytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBytes4BoolMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBytes4Bytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressAddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressBoolMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntUIntAddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntUIntBytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntUIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntStructAddressUInt8Mapping {\r\n        AddressUInt8Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntStructAddressUInt8Mapping {\r\n        AddressUInt8Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntUIntStructAddressUInt8Mapping {\r\n        AddressUInt8Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntUIntUIntStructAddressUInt8Mapping {\r\n        AddressUInt8Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntAddressUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntAddressUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntUIntAddressUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressAddressBoolMapping {\r\n        Bool innerMapping;\r\n    }\r\n\r\n    struct UIntUIntUIntBytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UIntUIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    bytes32 constant SET_IDENTIFIER = \"set\";\r\n\r\n    struct Set {\r\n        UInt count;\r\n        Mapping indexes;\r\n        Mapping values;\r\n    }\r\n\r\n    struct AddressesSet {\r\n        Set innerSet;\r\n    }\r\n\r\n    struct CounterSet {\r\n        Set innerSet;\r\n    }\r\n\r\n    bytes32 constant ORDERED_SET_IDENTIFIER = \"ordered_set\";\r\n\r\n    struct OrderedSet {\r\n        UInt count;\r\n        Bytes32 first;\r\n        Bytes32 last;\r\n        Mapping nextValues;\r\n        Mapping previousValues;\r\n    }\r\n\r\n    struct OrderedUIntSet {\r\n        OrderedSet innerSet;\r\n    }\r\n\r\n    struct OrderedAddressesSet {\r\n        OrderedSet innerSet;\r\n    }\r\n\r\n    struct Bytes32SetMapping {\r\n        Set innerMapping;\r\n    }\r\n\r\n    struct AddressesSetMapping {\r\n        Bytes32SetMapping innerMapping;\r\n    }\r\n\r\n    struct UIntSetMapping {\r\n        Bytes32SetMapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32OrderedSetMapping {\r\n        OrderedSet innerMapping;\r\n    }\r\n\r\n    struct UIntOrderedSetMapping {\r\n        Bytes32OrderedSetMapping innerMapping;\r\n    }\r\n\r\n    struct AddressOrderedSetMapping {\r\n        Bytes32OrderedSetMapping innerMapping;\r\n    }\r\n\r\n    // Can't use modifier due to a Solidity bug.\r\n    function sanityCheck(bytes32 _currentId, bytes32 _newId) internal pure {\r\n        if (_currentId != 0 || _newId == 0) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function init(Config storage self, Storage _store, bytes32 _crate) internal {\r\n        self.store = _store;\r\n        self.crate = _crate;\r\n    }\r\n\r\n    function init(UInt8 storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(UInt storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Int storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Address storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Bool storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Bytes32 storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(String storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Mapping storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(StringMapping storage self, bytes32 _id) internal {\r\n        init(self.id, _id);\r\n    }\r\n\r\n    function init(UIntAddressMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntEnumMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressAddressUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBytes32Bytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntAddressUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntAddressBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntAddressMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntAddressAddressMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntAddressAddressBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntUIntBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UIntUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(AddressUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressAddressMapping  storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBytes4BoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBytes4Bytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntUIntUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntUIntAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32BoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32Bytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32AddressMapping  storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UIntBoolMapping  storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Set storage self, bytes32 _id) internal {\r\n        init(self.count, keccak256(abi.encodePacked(_id, \"count\")));\r\n        init(self.indexes, keccak256(abi.encodePacked(_id, \"indexes\")));\r\n        init(self.values, keccak256(abi.encodePacked(_id, \"values\")));\r\n    }\r\n\r\n    function init(AddressesSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(CounterSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(OrderedSet storage self, bytes32 _id) internal {\r\n        init(self.count, keccak256(abi.encodePacked(_id, \"uint/count\")));\r\n        init(self.first, keccak256(abi.encodePacked(_id, \"uint/first\")));\r\n        init(self.last, keccak256(abi.encodePacked(_id, \"uint/last\")));\r\n        init(self.nextValues, keccak256(abi.encodePacked(_id, \"uint/next\")));\r\n        init(self.previousValues, keccak256(abi.encodePacked(_id, \"uint/prev\")));\r\n    }\r\n\r\n    function init(OrderedUIntSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(OrderedAddressesSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(Bytes32SetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressesSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32OrderedSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntOrderedSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressOrderedSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    /** `set` operation */\r\n\r\n    function set(Config storage self, UInt storage item, uint _value) internal {\r\n        self.store.setUInt(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, UInt storage item, bytes32 _salt, uint _value) internal {\r\n        self.store.setUInt(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, UInt8 storage item, uint8 _value) internal {\r\n        self.store.setUInt8(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, UInt8 storage item, bytes32 _salt, uint8 _value) internal {\r\n        self.store.setUInt8(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Int storage item, int _value) internal {\r\n        self.store.setInt(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, Int storage item, bytes32 _salt, int _value) internal {\r\n        self.store.setInt(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Address storage item, address _value) internal {\r\n        self.store.setAddress(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, Address storage item, bytes32 _salt, address _value) internal {\r\n        self.store.setAddress(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bool storage item, bool _value) internal {\r\n        self.store.setBool(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bool storage item, bytes32 _salt, bool _value) internal {\r\n        self.store.setBool(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32 storage item, bytes32 _value) internal {\r\n        self.store.setBytes32(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32 storage item, bytes32 _salt, bytes32 _value) internal {\r\n        self.store.setBytes32(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, String storage item, string _value) internal {\r\n        self.store.setString(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, String storage item, bytes32 _salt, string _value) internal {\r\n        self.store.setString(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Mapping storage item, uint _key, uint _value) internal {\r\n        self.store.setUInt(self.crate, keccak256(abi.encodePacked(item.id, _key)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Mapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        self.store.setBytes32(self.crate, keccak256(abi.encodePacked(item.id, _key)), _value);\r\n    }\r\n\r\n    function set(Config storage self, StringMapping storage item, bytes32 _key, string _value) internal {\r\n        set(self, item.id, _key, _value);\r\n    }\r\n\r\n    function set(Config storage self, AddressUInt8Mapping storage item, bytes32 _key, address _value1, uint8 _value2) internal {\r\n        self.store.setAddressUInt8(self.crate, keccak256(abi.encodePacked(item.id, _key)), _value1, _value2);\r\n    }\r\n\r\n    function set(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _value) internal {\r\n        set(self, item, keccak256(abi.encodePacked(_key, _key2)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _key3, bytes32 _value) internal {\r\n        set(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bool storage item, bytes32 _key, bytes32 _key2, bytes32 _key3, bool _value) internal {\r\n        set(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)), _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressMapping storage item, uint _key, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntMapping storage item, uint _key, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntBoolMapping storage item, uint _key, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntEnumMapping storage item, uint _key, uint8 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntBytes32Mapping storage item, uint _key, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UIntMapping storage item, bytes32 _key, uint _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UInt8Mapping storage item, bytes32 _key, uint8 _value) internal {\r\n        set(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32BoolMapping storage item, bytes32 _key, bool _value) internal {\r\n        set(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32Bytes32Mapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        set(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32AddressMapping storage item, bytes32 _key, address _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UIntBoolMapping storage item, bytes32 _key, uint _key2, bool _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)), _value);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntMapping storage item, address _key, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBoolMapping storage item, address _key, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), toBytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBytes32Mapping storage item, address _key, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _value);\r\n    }\r\n\r\n    function set(Config storage self, AddressAddressMapping storage item, address _key, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressAddressUIntMapping storage item, address _key, address _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntMapping storage item, address _key, uint _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressAddressUInt8Mapping storage item, address _key, address _key2, uint8 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUInt8Mapping storage item, address _key, uint _key2, uint8 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBytes32Bytes32Mapping storage item, address _key, bytes32 _key2, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _key2, _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressUIntMapping storage item, uint _key, address _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressBoolMapping storage item, uint _key, address _key2, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), toBytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressAddressMapping storage item, uint _key, address _key2, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntAddressMapping storage item, uint _key, uint _key2, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntBytes32Mapping storage item, uint _key, uint _key2, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntUIntMapping storage item, uint _key, uint _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressAddressBoolMapping storage item, uint _key, address _key2, address _key3, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntUIntBytes32Mapping storage item, uint _key, uint _key2,  uint _key3, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UIntUIntMapping storage item, bytes32 _key, uint _key2, uint _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UIntUIntUIntMapping storage item, bytes32 _key, uint _key2,  uint _key3, uint _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_key2), bytes32(_key3), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntUIntMapping storage item, address _key, uint _key2,  uint _key3, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)), _value, _value2);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)), _value, _value2);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2,  uint _key3, uint _key4, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4)), _value, _value2);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2,  uint _key3, uint _key4, uint _key5, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5)), _value, _value2);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntAddressUInt8Mapping storage item, address _key, uint _key2, address _key3, uint8 _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _key4, uint8 _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4)), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2,  uint _key3, uint _key4, address _key5, uint8 _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5)), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBytes4BoolMapping storage item, address _key, bytes4 _key2, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), toBytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBytes4Bytes32Mapping storage item, address _key, bytes4 _key2, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), _value);\r\n    }\r\n\r\n\r\n    /** `add` operation */\r\n\r\n    function add(Config storage self, Set storage item, bytes32 _value) internal {\r\n        add(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function add(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (includes(self, item, _salt, _value)) {\r\n            return;\r\n        }\r\n        uint newCount = count(self, item, _salt) + 1;\r\n        set(self, item.values, _salt, bytes32(newCount), _value);\r\n        set(self, item.indexes, _salt, _value, bytes32(newCount));\r\n        set(self, item.count, _salt, newCount);\r\n    }\r\n\r\n    function add(Config storage self, AddressesSet storage item, address _value) internal {\r\n        add(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, CounterSet storage item) internal {\r\n        add(self, item.innerSet, bytes32(count(self, item) + 1));\r\n    }\r\n\r\n    function add(Config storage self, OrderedSet storage item, bytes32 _value) internal {\r\n        add(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function add(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (_value == 0x0) { revert(); }\r\n\r\n        if (includes(self, item, _salt, _value)) { return; }\r\n\r\n        if (count(self, item, _salt) == 0x0) {\r\n            set(self, item.first, _salt, _value);\r\n        }\r\n\r\n        if (get(self, item.last, _salt) != 0x0) {\r\n            _setOrderedSetLink(self, item.nextValues, _salt, get(self, item.last, _salt), _value);\r\n            _setOrderedSetLink(self, item.previousValues, _salt, _value, get(self, item.last, _salt));\r\n        }\r\n\r\n        _setOrderedSetLink(self, item.nextValues, _salt,  _value, 0x0);\r\n        set(self, item.last, _salt, _value);\r\n        set(self, item.count, _salt, get(self, item.count, _salt) + 1);\r\n    }\r\n\r\n    function add(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        add(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function add(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        add(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function add(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, OrderedUIntSet storage item, uint _value) internal {\r\n        add(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, OrderedAddressesSet storage item, address _value) internal {\r\n        add(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, Set storage item, bytes32 _oldValue, bytes32 _newValue) internal {\r\n        set(self, item, SET_IDENTIFIER, _oldValue, _newValue);\r\n    }\r\n\r\n    function set(Config storage self, Set storage item, bytes32 _salt, bytes32 _oldValue, bytes32 _newValue) private {\r\n        if (!includes(self, item, _salt, _oldValue)) {\r\n            return;\r\n        }\r\n        uint index = uint(get(self, item.indexes, _salt, _oldValue));\r\n        set(self, item.values, _salt, bytes32(index), _newValue);\r\n        set(self, item.indexes, _salt, _newValue, bytes32(index));\r\n        set(self, item.indexes, _salt, _oldValue, bytes32(0));\r\n    }\r\n\r\n    function set(Config storage self, AddressesSet storage item, address _oldValue, address _newValue) internal {\r\n        set(self, item.innerSet, bytes32(_oldValue), bytes32(_newValue));\r\n    }\r\n\r\n    /** `remove` operation */\r\n\r\n    function remove(Config storage self, Set storage item, bytes32 _value) internal {\r\n        remove(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function remove(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (!includes(self, item, _salt, _value)) {\r\n            return;\r\n        }\r\n        uint lastIndex = count(self, item, _salt);\r\n        bytes32 lastValue = get(self, item.values, _salt, bytes32(lastIndex));\r\n        uint index = uint(get(self, item.indexes, _salt, _value));\r\n        if (index < lastIndex) {\r\n            set(self, item.indexes, _salt, lastValue, bytes32(index));\r\n            set(self, item.values, _salt, bytes32(index), lastValue);\r\n        }\r\n        set(self, item.indexes, _salt, _value, bytes32(0));\r\n        set(self, item.values, _salt, bytes32(lastIndex), bytes32(0));\r\n        set(self, item.count, _salt, lastIndex - 1);\r\n    }\r\n\r\n    function remove(Config storage self, AddressesSet storage item, address _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, CounterSet storage item, uint _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, OrderedSet storage item, bytes32 _value) internal {\r\n        remove(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function remove(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (!includes(self, item, _salt, _value)) { return; }\r\n\r\n        _setOrderedSetLink(self, item.nextValues, _salt, get(self, item.previousValues, _salt, _value), get(self, item.nextValues, _salt, _value));\r\n        _setOrderedSetLink(self, item.previousValues, _salt, get(self, item.nextValues, _salt, _value), get(self, item.previousValues, _salt, _value));\r\n\r\n        if (_value == get(self, item.first, _salt)) {\r\n            set(self, item.first, _salt, get(self, item.nextValues, _salt, _value));\r\n        }\r\n\r\n        if (_value == get(self, item.last, _salt)) {\r\n            set(self, item.last, _salt, get(self, item.previousValues, _salt, _value));\r\n        }\r\n\r\n        _deleteOrderedSetLink(self, item.nextValues, _salt, _value);\r\n        _deleteOrderedSetLink(self, item.previousValues, _salt, _value);\r\n\r\n        set(self, item.count, _salt, get(self, item.count, _salt) - 1);\r\n    }\r\n\r\n    function remove(Config storage self, OrderedUIntSet storage item, uint _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, OrderedAddressesSet storage item, address _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        remove(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function remove(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        remove(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function remove(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    /** 'copy` operation */\r\n\r\n    function copy(Config storage self, Set storage source, Set storage dest) internal {\r\n        uint _destCount = count(self, dest);\r\n        bytes32[] memory _toRemoveFromDest = new bytes32[](_destCount);\r\n        uint _idx;\r\n        uint _pointer = 0;\r\n        for (_idx = 0; _idx < _destCount; ++_idx) {\r\n            bytes32 _destValue = get(self, dest, _idx);\r\n            if (!includes(self, source, _destValue)) {\r\n                _toRemoveFromDest[_pointer++] = _destValue;\r\n            }\r\n        }\r\n\r\n        uint _sourceCount = count(self, source);\r\n        for (_idx = 0; _idx < _sourceCount; ++_idx) {\r\n            add(self, dest, get(self, source, _idx));\r\n        }\r\n\r\n        for (_idx = 0; _idx < _pointer; ++_idx) {\r\n            remove(self, dest, _toRemoveFromDest[_idx]);\r\n        }\r\n    }\r\n\r\n    function copy(Config storage self, AddressesSet storage source, AddressesSet storage dest) internal {\r\n        copy(self, source.innerSet, dest.innerSet);\r\n    }\r\n\r\n    function copy(Config storage self, CounterSet storage source, CounterSet storage dest) internal {\r\n        copy(self, source.innerSet, dest.innerSet);\r\n    }\r\n\r\n    /** `get` operation */\r\n\r\n    function get(Config storage self, UInt storage item) internal view returns (uint) {\r\n        return self.store.getUInt(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, UInt storage item, bytes32 salt) internal view returns (uint) {\r\n        return self.store.getUInt(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, UInt8 storage item) internal view returns (uint8) {\r\n        return self.store.getUInt8(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, UInt8 storage item, bytes32 salt) internal view returns (uint8) {\r\n        return self.store.getUInt8(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Int storage item) internal view returns (int) {\r\n        return self.store.getInt(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, Int storage item, bytes32 salt) internal view returns (int) {\r\n        return self.store.getInt(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Address storage item) internal view returns (address) {\r\n        return self.store.getAddress(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, Address storage item, bytes32 salt) internal view returns (address) {\r\n        return self.store.getAddress(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Bool storage item) internal view returns (bool) {\r\n        return self.store.getBool(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, Bool storage item, bytes32 salt) internal view returns (bool) {\r\n        return self.store.getBool(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32 storage item) internal view returns (bytes32) {\r\n        return self.store.getBytes32(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, Bytes32 storage item, bytes32 salt) internal view returns (bytes32) {\r\n        return self.store.getBytes32(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, String storage item) internal view returns (string) {\r\n        return self.store.getString(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, String storage item, bytes32 salt) internal view returns (string) {\r\n        return self.store.getString(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Mapping storage item, uint _key) internal view returns (uint) {\r\n        return self.store.getUInt(self.crate, keccak256(abi.encodePacked(item.id, _key)));\r\n    }\r\n\r\n    function get(Config storage self, Mapping storage item, bytes32 _key) internal view returns (bytes32) {\r\n        return self.store.getBytes32(self.crate, keccak256(abi.encodePacked(item.id, _key)));\r\n    }\r\n\r\n    function get(Config storage self, StringMapping storage item, bytes32 _key) internal view returns (string) {\r\n        return get(self, item.id, _key);\r\n    }\r\n\r\n    function get(Config storage self, AddressUInt8Mapping storage item, bytes32 _key) internal view returns (address, uint8) {\r\n        return self.store.getAddressUInt8(self.crate, keccak256(abi.encodePacked(item.id, _key)));\r\n    }\r\n\r\n    function get(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2) internal view returns (bytes32) {\r\n        return get(self, item, keccak256(abi.encodePacked(_key, _key2)));\r\n    }\r\n\r\n    function get(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _key3) internal view returns (bytes32) {\r\n        return get(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)));\r\n    }\r\n\r\n    function get(Config storage self, Bool storage item, bytes32 _key, bytes32 _key2, bytes32 _key3) internal view returns (bool) {\r\n        return get(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)));\r\n    }\r\n\r\n    function get(Config storage self, UIntBoolMapping storage item, uint _key) internal view returns (bool) {\r\n        return get(self, item.innerMapping, bytes32(_key));\r\n    }\r\n\r\n    function get(Config storage self, UIntEnumMapping storage item, uint _key) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntMapping storage item, uint _key) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressMapping storage item, uint _key) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UIntMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32AddressMapping storage item, bytes32 _key) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UInt8Mapping storage item, bytes32 _key) internal view returns (uint8) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, Bytes32BoolMapping storage item, bytes32 _key) internal view returns (bool) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, Bytes32Bytes32Mapping storage item, bytes32 _key) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UIntBoolMapping storage item, bytes32 _key, uint _key2) internal view returns (bool) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntBytes32Mapping storage item, uint _key) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntMapping storage item, address _key) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, AddressBoolMapping storage item, address _key) internal view returns (bool) {\r\n        return toBool(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, AddressAddressMapping storage item, address _key) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, AddressBytes32Mapping storage item, address _key) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntBytes32Mapping storage item, uint _key, uint _key2) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntAddressMapping storage item, uint _key, uint _key2) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntUIntMapping storage item, uint _key, uint _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UIntUIntMapping storage item, bytes32 _key, uint _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key, bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UIntUIntUIntMapping storage item, bytes32 _key, uint _key2, uint _key3) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key, bytes32(_key2), bytes32(_key3)));\r\n    }\r\n\r\n    function get(Config storage self, AddressAddressUIntMapping storage item, address _key, address _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressAddressUInt8Mapping storage item, address _key, address _key2) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntMapping storage item, address _key, uint _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUInt8Mapping storage item, address _key, uint _key2) internal view returns (uint) {\r\n        return uint8(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressBytes32Bytes32Mapping storage item, address _key, bytes32 _key2) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), _key2);\r\n    }\r\n\r\n    function get(Config storage self, AddressBytes4BoolMapping storage item, address _key, bytes4 _key2) internal view returns (bool) {\r\n        return toBool(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressBytes4Bytes32Mapping storage item, address _key, bytes4 _key2) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressUIntMapping storage item, uint _key, address _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressBoolMapping storage item, uint _key, address _key2) internal view returns (bool) {\r\n        return toBool(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressAddressMapping storage item, uint _key, address _key2) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressAddressBoolMapping storage item, uint _key, address _key2, address _key3) internal view returns (bool) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntUIntBytes32Mapping storage item, uint _key, uint _key2, uint _key3) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntUIntMapping storage item, address _key, uint _key2, uint _key3) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntStructAddressUInt8Mapping storage item, address _key, uint _key2) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, uint _key4) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, uint _key4, uint _key5) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntAddressUInt8Mapping storage item, address _key, uint _key2, address _key3) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3))));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _key4) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4))));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, uint _key4, address _key5) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5))));\r\n    }\r\n\r\n    /** `includes` operation */\r\n\r\n    function includes(Config storage self, Set storage item, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function includes(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) internal view returns (bool) {\r\n        return get(self, item.indexes, _salt, _value) != 0;\r\n    }\r\n\r\n    function includes(Config storage self, AddressesSet storage item, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, CounterSet storage item, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, OrderedSet storage item, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function includes(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private view returns (bool) {\r\n        return _value != 0x0 && (get(self, item.nextValues, _salt, _value) != 0x0 || get(self, item.last, _salt) == _value);\r\n    }\r\n\r\n    function includes(Config storage self, OrderedUIntSet storage item, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, OrderedAddressesSet storage item, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function includes(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function includes(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(Config storage self, Set storage item, bytes32 _value) internal view returns (uint) {\r\n        return getIndex(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function getIndex(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) private view returns (uint) {\r\n        return uint(get(self, item.indexes, _salt, _value));\r\n    }\r\n\r\n    function getIndex(Config storage self, AddressesSet storage item, address _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(Config storage self, CounterSet storage item, uint _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function getIndex(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    /** `count` operation */\r\n\r\n    function count(Config storage self, Set storage item) internal view returns (uint) {\r\n        return count(self, item, SET_IDENTIFIER);\r\n    }\r\n\r\n    function count(Config storage self, Set storage item, bytes32 _salt) internal view returns (uint) {\r\n        return get(self, item.count, _salt);\r\n    }\r\n\r\n    function count(Config storage self, AddressesSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(Config storage self, CounterSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(Config storage self, OrderedSet storage item) internal view returns (uint) {\r\n        return count(self, item, ORDERED_SET_IDENTIFIER);\r\n    }\r\n\r\n    function count(Config storage self, OrderedSet storage item, bytes32 _salt) private view returns (uint) {\r\n        return get(self, item.count, _salt);\r\n    }\r\n\r\n    function count(Config storage self, OrderedUIntSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(Config storage self, OrderedAddressesSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(Config storage self, Bytes32SetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, AddressesSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, UIntSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, Set storage item) internal view returns (bytes32[] result) {\r\n        result = get(self, item, SET_IDENTIFIER);\r\n    }\r\n\r\n    function get(Config storage self, Set storage item, bytes32 _salt) private view returns (bytes32[] result) {\r\n        uint valuesCount = count(self, item, _salt);\r\n        result = new bytes32[](valuesCount);\r\n        for (uint i = 0; i < valuesCount; i++) {\r\n            result[i] = get(self, item, _salt, i);\r\n        }\r\n    }\r\n\r\n    function get(Config storage self, AddressesSet storage item) internal view returns (address[]) {\r\n        return toAddresses(get(self, item.innerSet));\r\n    }\r\n\r\n    function get(Config storage self, CounterSet storage item) internal view returns (uint[]) {\r\n        return toUInt(get(self, item.innerSet));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32SetMapping storage item, bytes32 _key) internal view returns (bytes32[]) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, AddressesSetMapping storage item, bytes32 _key) internal view returns (address[]) {\r\n        return toAddresses(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(Config storage self, UIntSetMapping storage item, bytes32 _key) internal view returns (uint[]) {\r\n        return toUInt(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(Config storage self, Set storage item, uint _index) internal view returns (bytes32) {\r\n        return get(self, item, SET_IDENTIFIER, _index);\r\n    }\r\n\r\n    function get(Config storage self, Set storage item, bytes32 _salt, uint _index) private view returns (bytes32) {\r\n        return get(self, item.values, _salt, bytes32(_index+1));\r\n    }\r\n\r\n    function get(Config storage self, AddressesSet storage item, uint _index) internal view returns (address) {\r\n        return address(get(self, item.innerSet, _index));\r\n    }\r\n\r\n    function get(Config storage self, CounterSet storage item, uint _index) internal view returns (uint) {\r\n        return uint(get(self, item.innerSet, _index));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32SetMapping storage item, bytes32 _key, uint _index) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, _key, _index);\r\n    }\r\n\r\n    function get(Config storage self, AddressesSetMapping storage item, bytes32 _key, uint _index) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, _key, _index));\r\n    }\r\n\r\n    function get(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _index) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key, _index));\r\n    }\r\n\r\n    function getNextValue(Config storage self, OrderedSet storage item, bytes32 _value) internal view returns (bytes32) {\r\n        return getNextValue(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function getNextValue(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private view returns (bytes32) {\r\n        return get(self, item.nextValues, _salt, _value);\r\n    }\r\n\r\n    function getNextValue(Config storage self, OrderedUIntSet storage item, uint _value) internal view returns (uint) {\r\n        return uint(getNextValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function getNextValue(Config storage self, OrderedAddressesSet storage item, address _value) internal view returns (address) {\r\n        return address(getNextValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function getPreviousValue(Config storage self, OrderedSet storage item, bytes32 _value) internal view returns (bytes32) {\r\n        return getPreviousValue(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function getPreviousValue(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private view returns (bytes32) {\r\n        return get(self, item.previousValues, _salt, _value);\r\n    }\r\n\r\n    function getPreviousValue(Config storage self, OrderedUIntSet storage item, uint _value) internal view returns (uint) {\r\n        return uint(getPreviousValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function getPreviousValue(Config storage self, OrderedAddressesSet storage item, address _value) internal view returns (address) {\r\n        return address(getPreviousValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function toBool(bytes32 self) internal pure returns (bool) {\r\n        return self != bytes32(0);\r\n    }\r\n\r\n    function toBytes32(bool self) internal pure returns (bytes32) {\r\n        return bytes32(self ? 1 : 0);\r\n    }\r\n\r\n    function toAddresses(bytes32[] memory self) internal pure returns (address[]) {\r\n        address[] memory result = new address[](self.length);\r\n        for (uint i = 0; i < self.length; i++) {\r\n            result[i] = address(self[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function toUInt(bytes32[] memory self) internal pure returns (uint[]) {\r\n        uint[] memory result = new uint[](self.length);\r\n        for (uint i = 0; i < self.length; i++) {\r\n            result[i] = uint(self[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function _setOrderedSetLink(Config storage self, Mapping storage link, bytes32 _salt, bytes32 from, bytes32 to) private {\r\n        if (from != 0x0) {\r\n            set(self, link, _salt, from, to);\r\n        }\r\n    }\r\n\r\n    function _deleteOrderedSetLink(Config storage self, Mapping storage link, bytes32 _salt, bytes32 from) private {\r\n        if (from != 0x0) {\r\n            set(self, link, _salt, from, 0x0);\r\n        }\r\n    }\r\n\r\n    /** @title Structure to incapsulate and organize iteration through different kinds of collections */\r\n    struct Iterator {\r\n        uint limit;\r\n        uint valuesLeft;\r\n        bytes32 currentValue;\r\n        bytes32 anchorKey;\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item, bytes32 anchorKey, bytes32 startValue, uint limit) internal view returns (Iterator) {\r\n        if (startValue == 0x0) {\r\n            return listIterator(self, item, anchorKey, limit);\r\n        }\r\n\r\n        return createIterator(anchorKey, startValue, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item, bytes32 anchorKey, uint startValue, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, bytes32(startValue), limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item, bytes32 anchorKey, address startValue, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, bytes32(startValue), limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item, ORDERED_SET_IDENTIFIER, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item, bytes32 anchorKey, uint limit) internal view returns (Iterator) {\r\n        return createIterator(anchorKey, get(self, item.first, anchorKey), limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item, bytes32 anchorKey, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item, uint limit, bytes32 anchorKey) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item) internal view returns (Iterator) {\r\n        return listIterator(self, item, ORDERED_SET_IDENTIFIER);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item, bytes32 anchorKey) internal view returns (Iterator) {\r\n        return listIterator(self, item, anchorKey, get(self, item.count, anchorKey));\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item, bytes32 anchorKey) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item, bytes32 anchorKey) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey);\r\n    }\r\n\r\n    function listIterator(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function listIterator(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function listIterator(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function createIterator(bytes32 anchorKey, bytes32 startValue, uint limit) internal pure returns (Iterator) {\r\n        return Iterator({\r\n            currentValue: startValue,\r\n            limit: limit,\r\n            valuesLeft: limit,\r\n            anchorKey: anchorKey\r\n        });\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, OrderedSet storage item, Iterator iterator) internal view returns (bytes32 _nextValue) {\r\n        if (!canGetNextWithIterator(self, item, iterator)) { revert(); }\r\n\r\n        _nextValue = iterator.currentValue;\r\n\r\n        iterator.currentValue = getNextValue(self, item, iterator.anchorKey, iterator.currentValue);\r\n        iterator.valuesLeft -= 1;\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, OrderedUIntSet storage item, Iterator iterator) internal view returns (uint _nextValue) {\r\n        return uint(getNextWithIterator(self, item.innerSet, iterator));\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, OrderedAddressesSet storage item, Iterator iterator) internal view returns (address _nextValue) {\r\n        return address(getNextWithIterator(self, item.innerSet, iterator));\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, Bytes32OrderedSetMapping storage item, Iterator iterator) internal view returns (bytes32 _nextValue) {\r\n        return getNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, UIntOrderedSetMapping storage item, Iterator iterator) internal view returns (uint _nextValue) {\r\n        return uint(getNextWithIterator(self, item.innerMapping, iterator));\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, AddressOrderedSetMapping storage item, Iterator iterator) internal view returns (address _nextValue) {\r\n        return address(getNextWithIterator(self, item.innerMapping, iterator));\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, OrderedSet storage item, Iterator iterator) internal view returns (bool) {\r\n        if (iterator.valuesLeft == 0 || !includes(self, item, iterator.anchorKey, iterator.currentValue)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, OrderedUIntSet storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerSet, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, OrderedAddressesSet storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerSet, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, Bytes32OrderedSetMapping storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, UIntOrderedSetMapping storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, AddressOrderedSetMapping storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function count(Iterator iterator) internal pure returns (uint) {\r\n        return iterator.valuesLeft;\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-storage-lib/contracts/StorageAdapter.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\ncontract StorageAdapter {\r\n\r\n    using StorageInterface for *;\r\n\r\n    StorageInterface.Config internal store;\r\n\r\n    constructor(Storage _store, bytes32 _crate) public {\r\n        store.init(_store, _crate);\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-roles-lib/contracts/Roles2LibraryAdapter.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\ninterface Roles2LibraryInterface {\r\n    function addUserRole(address _user, uint8 _role) external returns (uint);\r\n    function canCall(address _src, address _code, bytes4 _sig) external view returns (bool);\r\n}\r\n\r\n\r\n/// @title Base smart contract for those contracts that wants to be integrated into roles-based\r\n/// system built on Roles2Library contract.\r\n/// Provides internal variable to store roles2Library address and have protection modifier\r\n/// which allows users to guard selected functions for role access.\r\ncontract Roles2LibraryAdapter {\r\n\r\n    uint constant UNAUTHORIZED = 0;\r\n    uint constant OK = 1;\r\n\r\n    event AuthFailedError(address code, address sender, bytes4 sig);\r\n\r\n    /// @dev Roles2Library address\r\n    Roles2LibraryInterface internal roles2Library;\r\n\r\n    /// @dev Guards selected method for role-only access.\r\n    /// Emits AuthFailedError event.\r\n    modifier auth {\r\n        if (!_isAuthorized(msg.sender, msg.sig)) {\r\n            emit AuthFailedError(this, msg.sender, msg.sig);\r\n            return;\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(address _roles2Library) public {\r\n        require(_roles2Library != 0x0);\r\n        roles2Library = Roles2LibraryInterface(_roles2Library);\r\n    }\r\n\r\n    /// @notice Updates link to roles2Library contract.\r\n    /// Allowed only for authorized by roles2Library callers\r\n    /// @param _roles2Library new instance of roles2Library contract\r\n    /// @return result of an operation\r\n    function setRoles2Library(Roles2LibraryInterface _roles2Library) \r\n    auth \r\n    external \r\n    returns (uint) \r\n    {\r\n        roles2Library = _roles2Library;\r\n        return OK;\r\n    }\r\n\r\n    function _isAuthorized(address _src, bytes4 _sig) \r\n    internal \r\n    view \r\n    returns (bool) \r\n    {\r\n        if (_src == address(this)) {\r\n            return true;\r\n        }\r\n\r\n        if (address(roles2Library) == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        return roles2Library.canCall(_src, this, _sig);\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-eventshistory-lib/contracts/EventsHistorySourceAdapter.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title EventsHistory Source Adapter.\r\n */\r\ncontract EventsHistorySourceAdapter {\r\n\r\n    // It is address of MultiEventsHistory caller assuming we are inside of delegate call.\r\n    function _self()\r\n    internal\r\n    view\r\n    returns (address)\r\n    {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-eventshistory-lib/contracts/MultiEventsHistoryAdapter.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n/**\r\n * @title General MultiEventsHistory user.\r\n */\r\ncontract MultiEventsHistoryAdapter is EventsHistorySourceAdapter {\r\n\r\n    address internal localEventsHistory;\r\n\r\n    event ErrorCode(address indexed self, uint errorCode);\r\n\r\n    function getEventsHistory()\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        address _eventsHistory = localEventsHistory;\r\n        return _eventsHistory != 0x0 ? _eventsHistory : this;\r\n    }\r\n\r\n    function emitErrorCode(uint _errorCode) public {\r\n        emit ErrorCode(_self(), _errorCode);\r\n    }\r\n\r\n    function _setEventsHistory(address _eventsHistory) internal returns (bool) {\r\n        localEventsHistory = _eventsHistory;\r\n        return true;\r\n    }\r\n    \r\n    function _emitErrorCode(uint _errorCode) internal returns (uint) {\r\n        MultiEventsHistoryAdapter(getEventsHistory()).emitErrorCode(_errorCode);\r\n        return _errorCode;\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-user-lib/contracts/UserOwnershipListenerInterface.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n/// @title Defines an interface for those who wants to trigger and log events related with\r\n/// ownership changes. Supported by UserRegistry contract.\r\ninterface UserOwnershipListenerInterface {\r\n\tfunction userOwnershipChanged(address _contract, address _from) external;\r\n}\r\n\r\n// File: @laborx/solidity-user-lib/contracts/MultiSig.sol\r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract MultiSig {\r\n\r\n    uint constant public MAX_OWNER_COUNT = 50;\r\n\r\n    bytes constant SIGNATURE_PREFIX = \"\\x19Ethereum Signed Message:\\n32\";\r\n\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId);\r\n    event Execution(uint indexed transactionId);\r\n    event ExecutionFailure(uint indexed transactionId);\r\n    event Cancelled(uint indexed transactionId);\r\n    event Deposit(address indexed sender, uint value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint required);\r\n\r\n    uint8 constant STATUS_NOT_INITIALIZED = 0;\r\n    uint8 constant STATUS_PENDING = 1 << 0;\r\n    uint8 constant STATUS_READY = 1 << 1;\r\n    uint8 constant STATUS_EXECUTED = 1 << 2;\r\n    uint8 constant STATUS_CANCELLED = 1 << 3;\r\n\r\n    mapping (uint => Transaction) public transactions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] internal owners;\r\n    uint public required;\r\n    uint public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        uint8 status;\r\n    }\r\n\r\n    modifier onlySelf() {\r\n        if (msg.sender != address(this)) {\r\n            revert(\"[MultiSig]: Only 'this' allowed to call\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        if (isOwner[owner]) {\r\n            revert(\"[MultiSig]: Owner should not exist\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        if (!isOwner[owner]) {\r\n            revert(\"[MultiSig]: owner should not exist\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        if (transactions[transactionId].status == STATUS_NOT_INITIALIZED) {\r\n            revert(\"[MultiSig]: tx should exist\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        if (!confirmations[transactionId][owner]) {\r\n            revert(\"[MultiSig]: tx should be confirmed\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        if (confirmations[transactionId][owner]) {\r\n            revert(\"[MultiSig]: tx should not be confirmed\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        uint8 _status = transactions[transactionId].status;\r\n        if ((_status & (STATUS_EXECUTED | STATUS_CANCELLED)) != 0) {\r\n            revert(\"[MultiSig]: tx should not be executed\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        if (_address == 0x0) {\r\n            revert(\"[MultiSig]: address should not be 0x0\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        if (ownerCount > MAX_OWNER_COUNT\r\n            || _required > ownerCount\r\n            || _required == 0\r\n            || ownerCount == 0\r\n        ) {\r\n            revert(\"[MultiSig]: valid multisig requirement is not met\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function()\r\n    payable\r\n    external\r\n    {\r\n        if (msg.value > 0) {\r\n            emit Deposit(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    function _initMultiSig(address[] _owners, uint _required)\r\n    validRequirement(_owners.length, _required)\r\n    internal\r\n    {\r\n        require(required == 0, \"[MultiSig]: 'required' should not be initialized\");\r\n        owners.length = 0;\r\n\r\n        for (uint i = 0; i < _owners.length; ++i) {\r\n            if (isOwner[_owners[i]] || _owners[i] == 0) {\r\n                revert(\"[MultiSig]: owner should not be skipped\");\r\n            }\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n    onlySelf\r\n    ownerDoesNotExist(owner)\r\n    notNull(owner)\r\n    validRequirement(owners.length + 1, required)\r\n    public\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n    onlySelf\r\n    ownerExists(owner)\r\n    public\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i = 0; i < owners.length - 1; ++i) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        }\r\n\r\n        owners.length -= 1;\r\n        if (required > owners.length) {\r\n            changeRequirement(owners.length);\r\n        }\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param owner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n    onlySelf\r\n    ownerExists(owner)\r\n    ownerDoesNotExist(newOwner)\r\n    public\r\n    {\r\n        for (uint i = 0; i < owners.length; ++i) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint _required)\r\n    onlySelf\r\n    validRequirement(owners.length, _required)\r\n    public\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, bytes data)\r\n    public\r\n    payable\r\n    returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @notice Allows anyone with correctly signed message to submit a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @param signerParams array with v,r,s data of signed transaction\r\n    /// @return Returns transaction ID.\r\n    function submitTransactionWithVRS(\r\n        address destination,\r\n        uint value,\r\n        bytes data,\r\n        bytes pass,\r\n        bytes32[3] signerParams\r\n    )\r\n    public\r\n    payable\r\n    returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransactionWithVRS(transactionId, pass, uint8(signerParams[0]), signerParams[1], signerParams[2]);\r\n    }\r\n\r\n    function submitDoubleConfirmTransactionWithVRS(\r\n        address destination,\r\n        uint value,\r\n        bytes data,\r\n        bytes pass,\r\n        bytes32[3] signerParams\r\n    )\r\n    public\r\n    payable\r\n    returns (uint transactionId)\r\n    {\r\n        // submit a transaction by original owner at first and\r\n        transactionId = submitTransaction(destination, value, data);\r\n        // and second confirmation by an owner who has signed the message\r\n        confirmTransactionWithVRS(transactionId, pass, uint8(signerParams[0]), signerParams[1], signerParams[2]);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n    public\r\n    {\r\n        _confirmTransaction(transactionId, msg.sender);\r\n    }\r\n\r\n    function _confirmTransaction(uint transactionId, address sender)\r\n    internal\r\n    ownerExists(sender)\r\n    transactionExists(transactionId)\r\n    notConfirmed(transactionId, sender)\r\n    {\r\n        confirmations[transactionId][sender] = true;\r\n        emit Confirmation(sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @notice Confirms a transaction for any owner with signed message.\r\n    /// Message composition: keccak256(pass, transactionId, multisig contract address)\r\n    /// @param transactionId transaction identifier to confirm\r\n    /// @param pass temporary given random generated bytes\r\n    /// @param v part of the signature\r\n    /// @param r part of the signature\r\n    /// @param s part of the signature\r\n    function confirmTransactionWithVRS(uint transactionId, bytes pass, uint8 v, bytes32 r, bytes32 s)\r\n    public\r\n    transactionExists(transactionId)\r\n    {\r\n        bytes32 _message = getMessageForTransaction(transactionId, pass);\r\n        address _owner = getSigner(_message, v, r, s);\r\n        _confirmTransaction(transactionId, _owner);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n    ownerExists(msg.sender)\r\n    confirmed(transactionId, msg.sender)\r\n    notExecuted(transactionId)\r\n    public\r\n    {\r\n        delete confirmations[transactionId][msg.sender];\r\n        emit Revocation(msg.sender, transactionId);\r\n        uint _count = getConfirmationCount(transactionId);\r\n        if (_count == 0) {\r\n            Transaction storage _tx = transactions[transactionId];\r\n            _tx.status = STATUS_CANCELLED;\r\n            emit Cancelled(transactionId);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n    notExecuted(transactionId)\r\n    public\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage _tx = transactions[transactionId];\r\n            _tx.status = STATUS_EXECUTED;\r\n            // solium-disable security/no-call-value\r\n            if (_tx.destination.call.value(_tx.value)(_tx.data)) {\r\n                emit Execution(transactionId);\r\n            }\r\n            else {\r\n                emit ExecutionFailure(transactionId);\r\n                _tx.status = STATUS_READY;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        uint count = getConfirmationCount(transactionId);\r\n        if (count == required) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint value, bytes data)\r\n    notNull(destination)\r\n    internal\r\n    returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            status: STATUS_PENDING\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n    public\r\n    view\r\n    returns (uint count)\r\n    {\r\n        for (uint i = 0; i < owners.length; ++i) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                count += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param statusMask mask of statuses that should be included in a fetch\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(uint8 statusMask)\r\n    public\r\n    view\r\n    returns (uint count)\r\n    {\r\n        for (uint i = 0; i < transactionCount; ++i) {\r\n            if ((transactions[i].status & statusMask) != 0) {\r\n                count += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n    public\r\n    view\r\n    returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n    public\r\n    view\r\n    returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i = 0; i < owners.length; ++i) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        }\r\n\r\n        _confirmations = new address[](count);\r\n        for (i = 0; i < count; ++i) {\r\n            _confirmations[i] = confirmationsTemp[i];\r\n        }\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param statusMask mask of statuses that should be included in a fetch\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, uint8 statusMask)\r\n    public\r\n    view\r\n    returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i = 0; i < transactionCount; ++i) {\r\n            if ((transactions[i].status & statusMask) != 0) {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        }\r\n\r\n        _transactionIds = new uint[](to - from);\r\n        for (i = from; i < to; ++i) {\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n        }\r\n    }\r\n\r\n    function getSigner(bytes32 _message, uint8 v, bytes32 r, bytes32 s)\r\n    public\r\n    pure\r\n    returns (address)\r\n    {\r\n        return ecrecover(\r\n            keccak256(abi.encodePacked(SIGNATURE_PREFIX, _message)),\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n    }\r\n\r\n    function getMessageForTransaction(uint transactionId, bytes pass)\r\n    public\r\n    view\r\n    returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(pass, transactionId, address(this)));\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-user-lib/contracts/lib/RolesLib.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/// @title TODO:\r\nlibrary RolesLib {\r\n    struct Roles {\r\n        mapping (address => uint) roles;\r\n    }\r\n\r\n    function add(Roles storage _roles, address _user, uint _roleMask) internal {\r\n        _assertAddress(_user);\r\n        _roles.roles[_user] |= _roleMask;\r\n    }\r\n\r\n    function remove(Roles storage _roles, address _user, uint _roleMask) internal {\r\n        _assertAddress(_user);\r\n        _roles.roles[_user] &= ~_roleMask;\r\n    }\r\n\r\n    function set(Roles storage _roles, address _user, uint _role) internal {\r\n        _assertAddress(_user);\r\n        _roles.roles[_user] = _role;\r\n    }\r\n\r\n    function removeAll(Roles storage _roles, address _user) internal {\r\n        _assertAddress(_user);\r\n        delete _roles.roles[_user];\r\n    }\r\n\r\n    function hasAny(Roles storage _roles, address _user, uint _roleMask) internal view returns (bool) {\r\n        return (_roles.roles[_user] & _roleMask) > 0;\r\n    }\r\n\r\n    function hasAll(Roles storage _roles, address _user, uint _roleMask) internal view returns (bool) {\r\n        return (_roles.roles[_user] & _roleMask) == _roleMask;\r\n    }\r\n\r\n    function hasEqual(Roles storage _roles, address _user, uint _role) internal view returns (bool) {\r\n        return _roles.roles[_user] == _role;\r\n    }\r\n\r\n    function _assertAddress(address _user) private pure {\r\n        require(_user != 0x0, \"ROLES_INVALID_USER_ADDRESS\");\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-user-lib/contracts/lib/BytesLib.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\nlibrary BytesLib {\r\n\r\n    function getSig(bytes data) internal pure returns (bytes4 sig) {\r\n        bytes32 prefix;\r\n        assembly {\r\n            prefix := mload(add(data,0x20))\r\n        }\r\n        sig = bytes4(prefix);\r\n    }\r\n\r\n    function getNonZeroCalldataBytesCount() internal pure returns (uint nonZeroBytesCount) {\r\n        for (uint _byteIdx = 0; _byteIdx < msg.data.length; ++_byteIdx) {\r\n            if (msg.data[_byteIdx] != byte(0)) {\r\n                nonZeroBytesCount += 1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-user-lib/contracts/TwoFactorAuthenticationSig.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n\r\n\r\n/// @title Intermediat contract that organizes two-factor authentication based on\r\n/// MultiSig smart contract. Contract should be initialized (_init() function called)\r\n/// before using any multisig-protected operations. It assumes that oracle will be stored\r\n/// as the second owner (at index 1).\r\ncontract TwoFactorAuthenticationSig is MultiSig {\r\n\r\n    using RolesLib for RolesLib.Roles;\r\n\r\n    RolesLib.Roles internal ownerRoles;\r\n\r\n    modifier onlyAllowedInitiator(bytes4 _sig) {\r\n        _assertMultisigInitiator(msg.sender, _sig);\r\n        _;\r\n    }\r\n\r\n    uint constant TWO_FACTOR_RESERVED_OWNERS_LENGTH = 2;\r\n    uint constant ROLE_ORIGINAL_OWNER = 0x0001; // b0001\r\n    uint constant ROLE_ORACLE = 0x0002; // b0010\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, bytes data)\r\n    public\r\n    payable\r\n    onlyAllowedInitiator(BytesLib.getSig(data))\r\n    returns (uint transactionId)\r\n    {\r\n        return super.submitTransaction(destination, value, data);\r\n    }\r\n\r\n    /// @notice Allows anyone with correctly signed message to submit a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @param signerParams array with v,r,s data of signed transaction\r\n    /// @return Returns transaction ID.\r\n    function submitTransactionWithVRS(\r\n        address destination,\r\n        uint value,\r\n        bytes data,\r\n        bytes pass,\r\n        bytes32[3] signerParams\r\n    )\r\n    public\r\n    payable\r\n    returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        bytes32 _message = getMessageForTransaction(transactionId, pass);\r\n        address _owner = getSigner(_message, uint8(signerParams[0]), signerParams[1], signerParams[2]);\r\n        _assertMultisigInitiator(_owner, BytesLib.getSig(data));\r\n        confirmTransactionWithVRS(transactionId, pass, uint8(signerParams[0]), signerParams[1], signerParams[2]);\r\n    }\r\n\r\n    function _init(address _initiator, address _oracle)\r\n    internal\r\n    {\r\n        uint _required = TWO_FACTOR_RESERVED_OWNERS_LENGTH;\r\n        address[] memory _owners = new address[](_required);\r\n        _owners[0] = _initiator;\r\n        ownerRoles.set(_initiator, ROLE_ORIGINAL_OWNER);\r\n        _owners[1] = _oracle;\r\n        ownerRoles.set(_oracle, ROLE_ORACLE);\r\n\r\n        MultiSig._initMultiSig(_owners, _required);\r\n    }\r\n\r\n    function _setOracleImpl(address _oracle)\r\n    internal\r\n    {\r\n        require(_oracle != 0x0, \"TWO_FACTOR_AUTH_INVALID_ORACLE_ADDRESS\");\r\n\r\n        address _oldOracle = owners[1];\r\n        this.replaceOwner(_oldOracle, _oracle);\r\n        ownerRoles.removeAll(_oldOracle);\r\n        ownerRoles.set(_oracle, ROLE_ORACLE);\r\n    }\r\n\r\n    /// @notice Gets owner's address that is used to confirm txs.\r\n    /// @return address of an owner\r\n    function getOwner()\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        return owners[0];\r\n    }\r\n\r\n    /// @notice Gets oracle address that is used to confirm txs.\r\n    /// @return address of an oracle\r\n    function getOracle()\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        return owners[1];\r\n    }\r\n\r\n    /* INTERNAL */\r\n\r\n    function _assertMultisigInitiator(address _sender, bytes4 /* _sig */) internal view {\r\n        require(ownerRoles.hasAny(_sender, ROLE_ORIGINAL_OWNER), \"TWO_FACTOR_AUTH_INVALID_SUBMIT_INITIATOR\");\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-user-lib/contracts/ThirdPartyMultiSig.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n/// @title Intermediate contract that organizes access to 3rd party remote addresses that\r\n/// have equal rights for signing functions but key functionality still requires an owner.\r\ncontract ThirdPartyMultiSig is TwoFactorAuthenticationSig {\r\n\r\n    uint constant ROLE_THIRDPARTY_OWNER = 0x0004; // b0100\r\n\r\n    /// @notice Checks if an address `_address` is one of 3rd party owners (origin owner is not included)\r\n    /// @param _address account address to check\r\n    function isThirdPartyOwner(address _address)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        return ownerRoles.hasEqual(_address, ROLE_THIRDPARTY_OWNER);\r\n    }\r\n\r\n    /// @notice Gets a list of 3rd party owners (if such exist).\r\n    function getThirdPartyOwners()\r\n    public\r\n    view\r\n    returns (address[] _owners)\r\n    {\r\n        if (owners.length <= TWO_FACTOR_RESERVED_OWNERS_LENGTH) {\r\n            return;\r\n        }\r\n\r\n        _owners = new address[](owners.length - TWO_FACTOR_RESERVED_OWNERS_LENGTH);\r\n        uint _pointer = 0;\r\n        for (uint _ownerIdx = TWO_FACTOR_RESERVED_OWNERS_LENGTH; _ownerIdx < owners.length; ++_ownerIdx) {\r\n            _owners[_pointer++] = owners[_ownerIdx];\r\n        }\r\n    }\r\n\r\n    /* MULTISIG */\r\n\r\n    function confirmTransaction(uint transactionId)\r\n    public\r\n    {\r\n        _assertConfirmationConsistency(transactionId, msg.sender);\r\n\r\n        super.confirmTransaction(transactionId);\r\n    }\r\n\r\n    function confirmTransactionWithVRS(uint transactionId, bytes pass, uint8 v, bytes32 r, bytes32 s)\r\n    public\r\n    {\r\n        bytes32 _message = getMessageForTransaction(transactionId, pass);\r\n        address _signer = getSigner(_message, v, r, s);\r\n        _assertConfirmationConsistency(transactionId, _signer);\r\n\r\n        super.confirmTransactionWithVRS(transactionId, pass, v, r, s);\r\n    }\r\n\r\n    /* TWO FACTOR AUTHENTICATION */\r\n\r\n    function _assertMultisigInitiator(address _sender, bytes4)\r\n    internal\r\n    view\r\n    {\r\n        require(ownerRoles.hasAny(_sender, ROLE_ORIGINAL_OWNER | ROLE_THIRDPARTY_OWNER), \"THIRDPARTY_MULTISIG_AUTH_INVALID_SUBMIT_INITIATOR\");\r\n    }\r\n\r\n    /* INTERNAL */\r\n\r\n    function _addThirdPartyOwnerImpl(address _owner)\r\n    internal\r\n    returns (uint)\r\n    {\r\n        this.addOwner(_owner);\r\n        ownerRoles.set(_owner, ROLE_THIRDPARTY_OWNER);\r\n    }\r\n\r\n    function _revokeThirdPartyOwnerImpl(address _owner)\r\n    internal\r\n    {\r\n        require(isThirdPartyOwner(_owner), \"THIRDPARTY_MULTISIG_SHOULD_NOT_BE_OWNER_OR_ORACLE_ADDRESS\");\r\n        this.removeOwner(_owner);\r\n        ownerRoles.removeAll(_owner);\r\n    }\r\n\r\n    /* PRIVATE */\r\n\r\n    function _assertConfirmationConsistency(uint transactionId, address sender)\r\n    private\r\n    view\r\n    {\r\n        uint _confirmationsCount = getConfirmationCount(transactionId);\r\n        // Prevents from being confirmed by owner and 3rd party service at once (only one of them is allowed to confirm tx)\r\n        if (_confirmationsCount > 0) {\r\n            address _owner = getOwner();\r\n            address _oracle = getOracle();\r\n            if ((confirmations[transactionId][_owner] && sender != _oracle) ||\r\n                (!confirmations[transactionId][_oracle] && sender == _owner)\r\n            ) {\r\n                revert(\"THIRDPARTY_MULTISIG_INVALID_CONFIRMATION\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-user-lib/contracts/UserEmitter.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\ncontract UserEmitter {\r\n\r\n    event User2FAChanged(address indexed self, address indexed initiator, address user, address indexed proxy, bool enabled);\r\n\r\n    function emitUser2FAChanged(address _initiator, address _user, address _proxy, bool _enabled) public {\r\n        emit User2FAChanged(msg.sender, _initiator, _user, _proxy, _enabled);\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-user-lib/contracts/UserInterface.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n\r\n/// @title Interface of a User that is created by UserFactory. Supports multisig operations.\r\ncontract UserInterface is ThirdPartyMultiSig, UserEmitter {\r\n    function init(\r\n        address _oracle,\r\n        bool _enable2FA,\r\n        address[] _thirdparties,\r\n        uint _minThirdPartyPayThreshold\r\n        ) external returns (uint);\r\n    function getUserProxy() external view returns (address);\r\n    function setUserProxy(address _userProxy) external returns (uint);\r\n    function use2FA() external view returns (bool);\r\n    function set2FA(bool _enabled) external returns (uint);\r\n    function setOracle(address _oracle) external returns (uint);\r\n    function getMinThirdPartyPayThreshold() external view returns (uint);\r\n    function setMinThirdPartyPayThreshold(uint _minPay) external returns (uint);\r\n    function addThirdPartyOwnerAndPay(address _owner) external payable returns (uint);\r\n    function addThirdPartyOwner(address _owner) external returns (uint);\r\n    function revokeThirdPartyOwner(address _owner) external returns (uint);\r\n    function updateBackendProvider(address _newBackend) external returns (uint);\r\n    function setRecoveryContract(address _recovery) external returns (uint);\r\n    function getRecoveryContract() external view returns (address);\r\n    function recoverUser(address _newAddess) external returns (uint);\r\n    function forward(\r\n        address _destination,\r\n        bytes _data,\r\n        uint _value,\r\n        bool _throwOnFailedCall\r\n        ) external returns (bytes32);\r\n    function forwardWithVRS(\r\n        address _destination,\r\n        bytes _data,\r\n        uint _value,\r\n        bool _throwOnFailedCall,\r\n        bytes _pass,\r\n        bytes32[3] _signerParams\r\n        ) external returns (bytes32);\r\n}\r\n\r\n// File: @laborx/solidity-user-lib/contracts/UserRegistry.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Acts like a registry for existed users across a system.\r\n/// Upgradable (thanks to Storage contract), protected by roles access.\r\n/// Allows to keep records about who owns which contracts and update these records\r\n/// accordingly. Contracts should use UserOwnershipListenerInterface to sign about\r\n/// ownership changes and if this contract was added to the registry then the record\r\n/// will be updated, otherwise nothing happen.\r\ncontract UserRegistry is StorageAdapter, Roles2LibraryAdapter, MultiEventsHistoryAdapter, UserOwnershipListenerInterface {\r\n\r\n    uint constant USER_REGISTRY_SCOPE = 30000;\r\n    uint constant USER_REGISTRY_USER_CONTRACT_ALREADY_EXISTS = USER_REGISTRY_SCOPE + 1;\r\n    uint constant USER_REGISTRY_NO_USER_CONTRACT_FOUND = USER_REGISTRY_SCOPE + 2;\r\n    uint constant USER_REGISTRY_CANNOT_CHANGE_TO_THE_SAME_OWNER = USER_REGISTRY_SCOPE + 3;\r\n\r\n    event UserContractAdded(address indexed self, address indexed userContract, address indexed owner);\r\n    event UserContractRemoved(address indexed self, address indexed userContract, address indexed owner);\r\n    event UserContractChanged(address indexed self, address indexed userContract, address oldOwner, address indexed owner);\r\n\r\n    /// @dev mapping(owner => (set of user's contracts)\r\n    StorageInterface.AddressesSetMapping internal ownedUsersStorage;\r\n\r\n    constructor(Storage _store, bytes32 _crate, address _roles2Library)\r\n    StorageAdapter(_store, _crate)\r\n    Roles2LibraryAdapter(_roles2Library)\r\n    public\r\n    {\r\n        ownedUsersStorage.init(\"ownedUsersStorage\");\r\n    }\r\n\r\n    /// @notice Sets up events history address\r\n    /// Allowed only for authorized roles.\r\n    /// @param _eventsHistory address of events history contract\r\n    /// @return result of an operation\r\n    function setupEventsHistory(address _eventsHistory)\r\n    external\r\n    auth\r\n    returns (uint)\r\n    {\r\n        require(_eventsHistory != 0x0);\r\n\r\n        _setEventsHistory(_eventsHistory);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Gets a list of contracts that are associated with provided user\r\n    /// @param _account user address to seek\r\n    /// @return array of contracts owned by a user\r\n    function getUserContracts(address _account)\r\n    public\r\n    view\r\n    returns (address[] _users)\r\n    {\r\n        _users = store.get(ownedUsersStorage, bytes32(_account));\r\n    }\r\n\r\n    /// @notice Registers a contract and associate it with its owner. Contract passed\r\n    /// here should be compatible with Owned contract interface.\r\n    /// Allowed only for authorized roles.\r\n    /// Emits UserContractAdded event.\r\n    /// @param _contract contract address to register; should support Owned interface\r\n    /// @return result of an operation\r\n    function addUserContract(address _contract)\r\n    external\r\n    auth\r\n    returns (uint)\r\n    {\r\n        address _owner = Owned(_contract).contractOwner();\r\n        if (!_addUserContract(_contract, _owner)) {\r\n            return _emitErrorCode(USER_REGISTRY_USER_CONTRACT_ALREADY_EXISTS);\r\n        }\r\n\r\n        _emitter().emitUserContractAdded(_contract, _owner);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Removes a contract from provided user association.\r\n    /// Mostly used to clean up unrelevant connections.\r\n    /// Allowed only for authorized roles.\r\n    /// Emits UserContractRemoved event.\r\n    /// @param _contract contract address to remove\r\n    /// @return result of an operation\r\n    function removeUserContractFrom(address _contract, address _from)\r\n    external\r\n    auth\r\n    returns (uint)\r\n    {\r\n        if (!_removeUserContract(_contract, _from)) {\r\n            return _emitErrorCode(USER_REGISTRY_NO_USER_CONTRACT_FOUND);\r\n        }\r\n\r\n        _emitter().emitUserContractRemoved(_contract, _from);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Removes a contract from msg.sender association.\r\n    /// Not protected by a role auth, so any user who has record with\r\n    /// his contract could remove his contracts.\r\n    /// @param _contract contract address to remove\r\n    /// @return result of an operation\r\n    function removeUserContract(address _contract)\r\n    external\r\n    returns (uint)\r\n    {\r\n        return this.removeUserContractFrom(_contract, msg.sender);\r\n    }\r\n\r\n    /// @notice Listener function. Updates records when contract owner changed\r\n    /// in a stored contract. Does not allow to add a contract record through this function.\r\n    /// Emits UserContractChanged event.\r\n    /// @param _contract contract address that have a new owner\r\n    /// @param _from old contract owner address\r\n    function userOwnershipChanged(address _contract, address _from)\r\n    external\r\n    {\r\n        address _owner = Owned(_contract).contractOwner();\r\n        if (_owner == _from) {\r\n            _emitErrorCode(USER_REGISTRY_CANNOT_CHANGE_TO_THE_SAME_OWNER);\r\n            return;\r\n        }\r\n\r\n        if (!_removeUserContract(_contract, _from)) {\r\n            _emitErrorCode(USER_REGISTRY_NO_USER_CONTRACT_FOUND);\r\n            return;\r\n        }\r\n\r\n        if (_addUserContract(_contract, _owner)) {\r\n            _emitter().emitUserContractChanged(_contract, _from, _owner);\r\n        } else {\r\n            _emitter().emitUserContractRemoved(_contract, _from);\r\n        }\r\n    }\r\n\r\n    /// @notice Says if user account `_account` owns a user proxy contract `_accountProxy`\r\n    /// and could manage it through UserInterface interface.\r\n    /// Checks if UserInterface#getUserProxy() == _accountProxy && UserInterface#contractOwner == _account\r\n    /// @param _account user account that he has private key access\r\n    /// @param _accountProxy user proxy contract or UserInterface#getUserProxy()\r\n    /// @return 'true' if an account has access to user proxy, 'false' otherwise\r\n    function isManagingProxy(address _account, address _accountProxy)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        address _userRouter = Owned(_accountProxy).contractOwner();\r\n        return _account == Owned(_userRouter).contractOwner();\r\n    }\r\n\r\n    /// @notice Gets if provided `_thirdpartyOwner` is actually a third-party address that manages\r\n    ///     `_accountProxy` proxy address. It is supposed that userRouter implements\r\n    ///     ThirdPartyMultiSig#isThirdPartyOwner(address) function.\r\n    /// @param _thirdpartyOwner server account that could manage user's operations\r\n    /// @param _accountProxy user proxy contract or UserInterface#getUserProxy()\r\n    /// @return 'true' if an account has third-party access to user proxy, 'false' otherwise\r\n    function isThirdPartyManagingProxy(address _thirdpartyOwner, address _accountProxy)\r\n    public\r\n    view\r\n    returns (bool) {\r\n        address _userRouter = Owned(_accountProxy).contractOwner();\r\n        return UserInterface(_userRouter).isThirdPartyOwner(_thirdpartyOwner);\r\n    }\r\n\r\n    /* EVENTS EMITTING (for events history) */\r\n\r\n    function emitUserContractAdded(address _contract, address _owner) external {\r\n        emit UserContractAdded(_self(), _contract, _owner);\r\n    }\r\n\r\n    function emitUserContractRemoved(address _contract, address _owner) external {\r\n        emit UserContractRemoved(_self(), _contract, _owner);\r\n    }\r\n\r\n    function emitUserContractChanged(address _contract, address _oldOwner, address _owner) external {\r\n        emit UserContractChanged(_self(), _contract, _oldOwner, _owner);\r\n    }\r\n\r\n    /* INTERNAL */\r\n\r\n    function _addUserContract(address _contract, address _owner) private returns (bool) {\r\n        if (!store.includes(ownedUsersStorage, bytes32(_owner), _contract)) {\r\n            store.add(ownedUsersStorage, bytes32(_owner), _contract);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _removeUserContract(address _contract, address _from) private returns (bool) {\r\n        if (store.includes(ownedUsersStorage, bytes32(_from), _contract)) {\r\n            store.remove(ownedUsersStorage, bytes32(_from), _contract);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _emitter() private view returns (UserRegistry) {\r\n        return UserRegistry(getEventsHistory());\r\n    }\r\n}\r\n\r\n// File: contracts/exchange/Exchange.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 ZeroEx Intl.\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Exchange - Facilitates exchange of ERC20 tokens.\r\n/// @author Amir Bandeali - <amir@0xProject.com>, Will Warren - <will@0xProject.com>\r\ncontract Exchange is SafeMath, Ownable {\r\n\r\n    // Error Codes\r\n    enum Errors {\r\n        ORDER_EXPIRED,                    // Order has already expired\r\n        ORDER_FULLY_FILLED_OR_CANCELLED,  // Order has already been fully filled or cancelled\r\n        ROUNDING_ERROR_TOO_LARGE,         // Rounding error too large\r\n        INSUFFICIENT_BALANCE_OR_ALLOWANCE // Insufficient balance or allowance for token transfer\r\n    }\r\n\r\n    string constant public VERSION = \"1.1.0\";\r\n    uint16 constant public EXTERNAL_QUERY_GAS_LIMIT = 50000;    // Changes to state require at least 5000 gas\r\n\r\n    address public FEE_TOKEN_CONTRACT;\r\n    address public TOKEN_TRANSFER_PROXY_CONTRACT;\r\n    address public USER_REGISTRY;\r\n    address public REWARD_SERVICE;\r\n\r\n    // Mappings of orderHash => amounts of takerTokenAmount filled or cancelled.\r\n    mapping (bytes32 => uint) public filled;\r\n    mapping (bytes32 => uint) public cancelled;\r\n\r\n    event ExchangeLogFill(\r\n        address indexed maker,\r\n        address indexed taker,\r\n        address indexed feeRecipient,\r\n        address makerToken,\r\n        address takerToken,\r\n        uint filledMakerTokenAmount,\r\n        uint filledTakerTokenAmount,\r\n        uint paidMakerFee,\r\n        uint paidTakerFee,\r\n        bytes32 tokens, // keccak256(makerToken, takerToken), allows subscribing to a token pair\r\n        bytes32 orderHash\r\n    );\r\n\r\n    event ExchangeLogCancel(\r\n        address indexed maker,\r\n        address indexed feeRecipient,\r\n        address makerToken,\r\n        address takerToken,\r\n        uint cancelledMakerTokenAmount,\r\n        uint cancelledTakerTokenAmount,\r\n        bytes32 indexed tokens,\r\n        bytes32 orderHash\r\n    );\r\n\r\n    event ExchangeLogError(uint8 errorId, bytes32 orderHash, address indexed maker, address indexed taker);\r\n\r\n    struct Order {\r\n        address maker;\r\n        address taker;\r\n        address makerToken;\r\n        address takerToken;\r\n        address feeRecipient;\r\n        uint makerTokenAmount;\r\n        uint takerTokenAmount;\r\n        uint makerFee;\r\n        uint takerFee;\r\n        uint expirationTimestampInSec;\r\n        bytes32 orderHash;\r\n    }\r\n\r\n    function Exchange(\r\n        address _feeToken,\r\n        address _tokenTransferProxy,\r\n        address _rewardService,\r\n        address _userRegistry\r\n    ) public {\r\n        require(_feeToken != address(0), \"EXCHANGE_INVALID_FEE_TOKEN_ADDRESS\");\r\n        require(_tokenTransferProxy != address(0), \"EXCHANGE_INVALID_TOKEN_TRANSFER_PROXY_ADDRESS\");\r\n\r\n        FEE_TOKEN_CONTRACT = _feeToken;\r\n        TOKEN_TRANSFER_PROXY_CONTRACT = _tokenTransferProxy;\r\n        setRewardContract(_rewardService);\r\n        setUserRegistryContract(_userRegistry);\r\n    }\r\n\r\n    function setRewardContract (address _rewardService) public onlyOwner {\r\n        require(_rewardService != address(0), \"EXCHANGE_INVALID_REWARD_ADDRESS\");\r\n        REWARD_SERVICE = _rewardService;\r\n    }\r\n\r\n    function setUserRegistryContract (address _userRegistry) public onlyOwner {\r\n        require(_userRegistry != address(0), \"EXCHANGE_INVALID_USER_REGISTRY_ADDRESS\");\r\n        USER_REGISTRY = _userRegistry;\r\n    }\r\n\r\n    /*\r\n    * Core exchange functions\r\n    */\r\n    /// @dev Fills the input order.\r\n    /// @param orderAddresses Array of order's maker, taker, makerToken, takerToken, and feeRecipient.\r\n    /// @param orderValues Array of order's makerTokenAmount, takerTokenAmount, makerFee, takerFee, expirationTimestampInSec, and salt.\r\n    /// @param fillTakerTokenAmount Desired amount of takerToken to fill.\r\n    /// @param shouldThrowOnInsufficientBalanceOrAllowance Test if transfer will fail before attempting.\r\n    /// @param v ECDSA signature parameter v.\r\n    /// @param r ECDSA signature parameters r.\r\n    /// @param s ECDSA signature parameters s.\r\n    /// @return Total amount of takerToken filled in trade.\r\n    function fillOrder(\r\n        address[5] orderAddresses,\r\n        uint[6] orderValues,\r\n        uint fillTakerTokenAmount,\r\n        bool shouldThrowOnInsufficientBalanceOrAllowance,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public returns (uint filledTakerTokenAmount) {\r\n        Order memory order = Order({\r\n            maker: orderAddresses[0],\r\n            taker: orderAddresses[1],\r\n            makerToken: orderAddresses[2],\r\n            takerToken: orderAddresses[3],\r\n            feeRecipient: orderAddresses[4],\r\n            makerTokenAmount: orderValues[0],\r\n            takerTokenAmount: orderValues[1],\r\n            makerFee: orderValues[2],\r\n            takerFee: orderValues[3],\r\n            expirationTimestampInSec: orderValues[4],\r\n            orderHash: getOrderHash(orderAddresses, orderValues)\r\n        });\r\n\r\n        require(order.taker == address(0) || order.taker == msg.sender, \"EXCHANGE_INVALID_ORDER_TAKER_ADDRESS\");\r\n        require(order.makerTokenAmount > 0 && order.takerTokenAmount > 0 && fillTakerTokenAmount > 0, \"EXCHANGE_INVALID_ORDER_TOKEN_AMOUNT\");\r\n        require(isValidSignature(\r\n            order.maker,\r\n            order.orderHash,\r\n            v,\r\n            r,\r\n            s\r\n        ), \"EXCHANGE_INVALID_MAKER_SIGNATURE\");\r\n\r\n        if (block.timestamp >= order.expirationTimestampInSec) {\r\n            emit ExchangeLogError(uint8(Errors.ORDER_EXPIRED), order.orderHash, order.maker, msg.sender);\r\n            return 0;\r\n        }\r\n\r\n        uint remainingTakerTokenAmount = safeSub(order.takerTokenAmount, getUnavailableTakerTokenAmount(order.orderHash));\r\n        filledTakerTokenAmount = min256(fillTakerTokenAmount, remainingTakerTokenAmount);\r\n        if (filledTakerTokenAmount == 0) {\r\n            emit ExchangeLogError(uint8(Errors.ORDER_FULLY_FILLED_OR_CANCELLED), order.orderHash, order.maker, msg.sender);\r\n            return 0;\r\n        }\r\n\r\n        if (isRoundingError(filledTakerTokenAmount, order.takerTokenAmount, order.makerTokenAmount)) {\r\n            emit ExchangeLogError(uint8(Errors.ROUNDING_ERROR_TOO_LARGE), order.orderHash, order.maker, msg.sender);\r\n            return 0;\r\n        }\r\n\r\n        if (!shouldThrowOnInsufficientBalanceOrAllowance && !isTransferable(order, filledTakerTokenAmount)) {\r\n            emit ExchangeLogError(uint8(Errors.INSUFFICIENT_BALANCE_OR_ALLOWANCE), order.orderHash, order.maker, msg.sender);\r\n            return 0;\r\n        }\r\n\r\n        uint filledMakerTokenAmount = getPartialAmount(filledTakerTokenAmount, order.takerTokenAmount, order.makerTokenAmount);\r\n        uint paidMakerFee;\r\n        uint paidTakerFee;\r\n        filled[order.orderHash] = safeAdd(filled[order.orderHash], filledTakerTokenAmount);\r\n        require(transferViaTokenTransferProxy(\r\n            order.makerToken,\r\n            order.maker,\r\n            msg.sender,\r\n            filledMakerTokenAmount\r\n        ), \"EXCHANGE_TRANSFER_FROM_MAKER_VIA_PROXY_FAILURE\");\r\n        require(transferViaTokenTransferProxy(\r\n            order.takerToken,\r\n            msg.sender,\r\n            order.maker,\r\n            filledTakerTokenAmount\r\n        ), \"EXCHANGE_TRANSFER_TO_TAKER_VIA_PROXY_FAILURE\");\r\n        if (order.feeRecipient != address(0)) {\r\n            if (order.makerFee > 0) {\r\n                paidMakerFee = getPartialAmount(filledTakerTokenAmount, order.takerTokenAmount, order.makerFee);\r\n                require(transferViaTokenTransferProxy(\r\n                    FEE_TOKEN_CONTRACT,\r\n                    order.maker,\r\n                    order.feeRecipient,\r\n                    paidMakerFee\r\n                ), \"EXCHANGE_TRANSFER_FEE_FROM_MAKER_VIA_PROXY_FAILURE\");\r\n            }\r\n            if (order.takerFee > 0) {\r\n                paidTakerFee = getPartialAmount(filledTakerTokenAmount, order.takerTokenAmount, order.takerFee);\r\n                require(transferViaTokenTransferProxy(\r\n                    FEE_TOKEN_CONTRACT,\r\n                    msg.sender,\r\n                    order.feeRecipient,\r\n                    paidTakerFee\r\n                ), \"EXCHANGE_TRANSFER_FEE_FROM_TAKER_VIA_PROXY_FAILURE\");\r\n                require(depositReward(order.maker, paidTakerFee), \"EXCHANGE_DEPOSIT_REWARDS_FAILURE\");\r\n            }\r\n        }\r\n\r\n        emit ExchangeLogFill(\r\n            order.maker,\r\n            msg.sender,\r\n            order.feeRecipient,\r\n            order.makerToken,\r\n            order.takerToken,\r\n            filledMakerTokenAmount,\r\n            filledTakerTokenAmount,\r\n            paidMakerFee,\r\n            paidTakerFee,\r\n            keccak256(order.makerToken, order.takerToken),\r\n            order.orderHash\r\n        );\r\n        return filledTakerTokenAmount;\r\n    }\r\n\r\n    /// @dev Cancels the input order.\r\n    /// @param orderAddresses Array of order's maker, taker, makerToken, takerToken, and feeRecipient.\r\n    /// @param orderValues Array of order's makerTokenAmount, takerTokenAmount, makerFee, takerFee, expirationTimestampInSec, and salt.\r\n    /// @param cancelTakerTokenAmount Desired amount of takerToken to cancel in order.\r\n    /// @return Amount of takerToken cancelled.\r\n    function cancelOrder(\r\n        address[5] orderAddresses,\r\n        uint[6] orderValues,\r\n        uint cancelTakerTokenAmount)\r\n        public\r\n        returns (uint)\r\n    {\r\n        Order memory order = Order({\r\n            maker: orderAddresses[0],\r\n            taker: orderAddresses[1],\r\n            makerToken: orderAddresses[2],\r\n            takerToken: orderAddresses[3],\r\n            feeRecipient: orderAddresses[4],\r\n            makerTokenAmount: orderValues[0],\r\n            takerTokenAmount: orderValues[1],\r\n            makerFee: orderValues[2],\r\n            takerFee: orderValues[3],\r\n            expirationTimestampInSec: orderValues[4],\r\n            orderHash: getOrderHash(orderAddresses, orderValues)\r\n        });\r\n\r\n        require(order.maker == msg.sender, \"EXCHANGE_INVALID_ORDER_MAKER_SENDER_ADDRESS\");\r\n        require(order.makerTokenAmount > 0 && order.takerTokenAmount > 0 && cancelTakerTokenAmount > 0, \"EXCHANGE_INVALID_TOKEN_AMOUNT\");\r\n\r\n        if (block.timestamp >= order.expirationTimestampInSec) {\r\n            emit ExchangeLogError(uint8(Errors.ORDER_EXPIRED), order.orderHash, order.maker, msg.sender);\r\n            return 0;\r\n        }\r\n\r\n        uint remainingTakerTokenAmount = safeSub(order.takerTokenAmount, getUnavailableTakerTokenAmount(order.orderHash));\r\n        uint cancelledTakerTokenAmount = min256(cancelTakerTokenAmount, remainingTakerTokenAmount);\r\n        if (cancelledTakerTokenAmount == 0) {\r\n            emit ExchangeLogError(uint8(Errors.ORDER_FULLY_FILLED_OR_CANCELLED), order.orderHash, order.maker, msg.sender);\r\n            return 0;\r\n        }\r\n\r\n        cancelled[order.orderHash] = safeAdd(cancelled[order.orderHash], cancelledTakerTokenAmount);\r\n\r\n        emit ExchangeLogCancel(\r\n            order.maker,\r\n            order.feeRecipient,\r\n            order.makerToken,\r\n            order.takerToken,\r\n            getPartialAmount(cancelledTakerTokenAmount, order.takerTokenAmount, order.makerTokenAmount),\r\n            cancelledTakerTokenAmount,\r\n            keccak256(order.makerToken, order.takerToken),\r\n            order.orderHash\r\n        );\r\n        return cancelledTakerTokenAmount;\r\n    }\r\n\r\n    /*\r\n    * Wrapper functions\r\n    */\r\n    /// @dev Fills an order with specified parameters and ECDSA signature, throws if specified amount not filled entirely.\r\n    /// @param orderAddresses Array of order's maker, taker, makerToken, takerToken, and feeRecipient.\r\n    /// @param orderValues Array of order's makerTokenAmount, takerTokenAmount, makerFee, takerFee, expirationTimestampInSec, and salt.\r\n    /// @param fillTakerTokenAmount Desired amount of takerToken to fill.\r\n    /// @param v ECDSA signature parameter v.\r\n    /// @param r ECDSA signature parameters r.\r\n    /// @param s ECDSA signature parameters s.\r\n    function fillOrKillOrder(\r\n        address[5] orderAddresses,\r\n        uint[6] orderValues,\r\n        uint fillTakerTokenAmount,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s)\r\n        public\r\n    {\r\n        require(fillOrder(\r\n            orderAddresses,\r\n            orderValues,\r\n            fillTakerTokenAmount,\r\n            true,\r\n            v,\r\n            r,\r\n            s\r\n        ) == fillTakerTokenAmount,\r\n\t\t\"EXCHANGE_INVALID_FILL_TAKER_TOKEN_AMOUNT\");\r\n    }\r\n\r\n    /// @dev Synchronously executes multiple fill orders in a single transaction.\r\n    /// @param orderAddresses Array of address arrays containing individual order addresses.\r\n    /// @param orderValues Array of uint arrays containing individual order values.\r\n    /// @param fillTakerTokenAmounts Array of desired amounts of takerToken to fill in orders.\r\n    /// @param shouldThrowOnInsufficientBalanceOrAllowance Test if transfers will fail before attempting.\r\n    /// @param v Array ECDSA signature v parameters.\r\n    /// @param r Array of ECDSA signature r parameters.\r\n    /// @param s Array of ECDSA signature s parameters.\r\n    function batchFillOrders(\r\n        address[5][] orderAddresses,\r\n        uint[6][] orderValues,\r\n        uint[] fillTakerTokenAmounts,\r\n        bool shouldThrowOnInsufficientBalanceOrAllowance,\r\n        uint8[] v,\r\n        bytes32[] r,\r\n        bytes32[] s)\r\n        public\r\n    {\r\n        for (uint i = 0; i < orderAddresses.length; i++) {\r\n            fillOrder(\r\n                orderAddresses[i],\r\n                orderValues[i],\r\n                fillTakerTokenAmounts[i],\r\n                shouldThrowOnInsufficientBalanceOrAllowance,\r\n                v[i],\r\n                r[i],\r\n                s[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev Synchronously executes multiple fillOrKill orders in a single transaction.\r\n    /// @param orderAddresses Array of address arrays containing individual order addresses.\r\n    /// @param orderValues Array of uint arrays containing individual order values.\r\n    /// @param fillTakerTokenAmounts Array of desired amounts of takerToken to fill in orders.\r\n    /// @param v Array ECDSA signature v parameters.\r\n    /// @param r Array of ECDSA signature r parameters.\r\n    /// @param s Array of ECDSA signature s parameters.\r\n    function batchFillOrKillOrders(\r\n        address[5][] orderAddresses,\r\n        uint[6][] orderValues,\r\n        uint[] fillTakerTokenAmounts,\r\n        uint8[] v,\r\n        bytes32[] r,\r\n        bytes32[] s)\r\n        public\r\n    {\r\n        for (uint i = 0; i < orderAddresses.length; i++) {\r\n            fillOrKillOrder(\r\n                orderAddresses[i],\r\n                orderValues[i],\r\n                fillTakerTokenAmounts[i],\r\n                v[i],\r\n                r[i],\r\n                s[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total fillTakerTokenAmount filled.\r\n    /// @param orderAddresses Array of address arrays containing individual order addresses.\r\n    /// @param orderValues Array of uint arrays containing individual order values.\r\n    /// @param fillTakerTokenAmount Desired total amount of takerToken to fill in orders.\r\n    /// @param shouldThrowOnInsufficientBalanceOrAllowance Test if transfers will fail before attempting.\r\n    /// @param v Array ECDSA signature v parameters.\r\n    /// @param r Array of ECDSA signature r parameters.\r\n    /// @param s Array of ECDSA signature s parameters.\r\n    /// @return Total amount of fillTakerTokenAmount filled in orders.\r\n    function fillOrdersUpTo(\r\n        address[5][] orderAddresses,\r\n        uint[6][] orderValues,\r\n        uint fillTakerTokenAmount,\r\n        bool shouldThrowOnInsufficientBalanceOrAllowance,\r\n        uint8[] v,\r\n        bytes32[] r,\r\n        bytes32[] s)\r\n        public\r\n        returns (uint)\r\n    {\r\n        uint filledTakerTokenAmount = 0;\r\n        for (uint i = 0; i < orderAddresses.length; i++) {\r\n            require(orderAddresses[i][3] == orderAddresses[0][3], \"EXCHANGE_TAKER_TOKEN_SHOULD_BE_THE_SAME\"); // takerToken must be the same for each order\r\n            filledTakerTokenAmount = safeAdd(filledTakerTokenAmount, fillOrder(\r\n                orderAddresses[i],\r\n                orderValues[i],\r\n                safeSub(fillTakerTokenAmount, filledTakerTokenAmount),\r\n                shouldThrowOnInsufficientBalanceOrAllowance,\r\n                v[i],\r\n                r[i],\r\n                s[i]\r\n            ));\r\n            if (filledTakerTokenAmount == fillTakerTokenAmount) break;\r\n        }\r\n        return filledTakerTokenAmount;\r\n    }\r\n\r\n    /// @dev Synchronously cancels multiple orders in a single transaction.\r\n    /// @param orderAddresses Array of address arrays containing individual order addresses.\r\n    /// @param orderValues Array of uint arrays containing individual order values.\r\n    /// @param cancelTakerTokenAmounts Array of desired amounts of takerToken to cancel in orders.\r\n    function batchCancelOrders(\r\n        address[5][] orderAddresses,\r\n        uint[6][] orderValues,\r\n        uint[] cancelTakerTokenAmounts)\r\n        public\r\n    {\r\n        for (uint i = 0; i < orderAddresses.length; i++) {\r\n            cancelOrder(\r\n                orderAddresses[i],\r\n                orderValues[i],\r\n                cancelTakerTokenAmounts[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Constant public functions\r\n    */\r\n    /// @dev Calculates Keccak-256 hash of order with specified parameters.\r\n    /// @param orderAddresses Array of order's maker, taker, makerToken, takerToken, and feeRecipient.\r\n    /// @param orderValues Array of order's makerTokenAmount, takerTokenAmount, makerFee, takerFee, expirationTimestampInSec, and salt.\r\n    /// @return Keccak-256 hash of order.\r\n    function getOrderHash(address[5] orderAddresses, uint[6] orderValues)\r\n        public\r\n        constant\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            address(this),\r\n            orderAddresses[0], // maker\r\n            orderAddresses[1], // taker\r\n            orderAddresses[2], // makerToken\r\n            orderAddresses[3], // takerToken\r\n            orderAddresses[4], // feeRecipient\r\n            orderValues[0],    // makerTokenAmount\r\n            orderValues[1],    // takerTokenAmount\r\n            orderValues[2],    // makerFee\r\n            orderValues[3],    // takerFee\r\n            orderValues[4],    // expirationTimestampInSec\r\n            orderValues[5]     // salt\r\n        );\r\n    }\r\n\r\n    /// @dev Verifies that an order signature is valid.\r\n    /// @param signer address of signer.\r\n    /// @param hash Signed Keccak-256 hash.\r\n    /// @param v ECDSA signature parameter v.\r\n    /// @param r ECDSA signature parameters r.\r\n    /// @param s ECDSA signature parameters s.\r\n    /// @return Validity of order signature.\r\n    function isValidSignature(\r\n        address signer,\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s)\r\n        public\r\n        returns (bool)\r\n    {\r\n        address recovered = ecrecover(\r\n            keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash),\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        if (signer == recovered) {\r\n            return true;\r\n        }\r\n\r\n        return UserRegistry(USER_REGISTRY).isManagingProxy(recovered, signer)\r\n          || UserRegistry(USER_REGISTRY).isThirdPartyManagingProxy(recovered, signer);\r\n    }\r\n\r\n    /// @dev Checks if rounding error > 0.1%.\r\n    /// @param numerator Numerator.\r\n    /// @param denominator Denominator.\r\n    /// @param target Value to multiply with numerator/denominator.\r\n    /// @return Rounding error is present.\r\n    function isRoundingError(uint numerator, uint denominator, uint target)\r\n        public\r\n        pure\r\n        returns (bool)\r\n    {\r\n        uint remainder = mulmod(target, numerator, denominator);\r\n        if (remainder == 0) return false; // No rounding error.\r\n\r\n        uint errPercentageTimes1000000 = safeDiv(\r\n            safeMul(remainder, 1000000),\r\n            safeMul(numerator, target)\r\n        );\r\n        return errPercentageTimes1000000 > 1000;\r\n    }\r\n\r\n    /// @dev Calculates partial value given a numerator and denominator.\r\n    /// @param numerator Numerator.\r\n    /// @param denominator Denominator.\r\n    /// @param target Value to calculate partial of.\r\n    /// @return Partial value of target.\r\n    function getPartialAmount(uint numerator, uint denominator, uint target)\r\n        public\r\n        pure\r\n        returns (uint)\r\n    {\r\n        return safeDiv(safeMul(numerator, target), denominator);\r\n    }\r\n\r\n    /// @dev Calculates the sum of values already filled and cancelled for a given order.\r\n    /// @param orderHash The Keccak-256 hash of the given order.\r\n    /// @return Sum of values already filled and cancelled.\r\n    function getUnavailableTakerTokenAmount(bytes32 orderHash)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return safeAdd(filled[orderHash], cancelled[orderHash]);\r\n    }\r\n\r\n    /*\r\n    * Internal functions\r\n    */\r\n    /// @dev Transfers a token using TokenTransferProxy transferFrom function.\r\n    /// @param token Address of token to transferFrom.\r\n    /// @param from Address transfering token.\r\n    /// @param to Address receiving token.\r\n    /// @param value Amount of token to transfer.\r\n    /// @return Success of token transfer.\r\n    function transferViaTokenTransferProxy(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return TokenTransferProxy(TOKEN_TRANSFER_PROXY_CONTRACT).transferFrom(token, from, to, value);\r\n    }\r\n\r\n    function depositReward(address to, uint value) internal returns (bool) {\r\n        return RewardService(REWARD_SERVICE).deposit(to, value);\r\n    }\r\n\r\n    /// @dev Checks if any order transfers will fail.\r\n    /// @param order Order struct of params that will be checked.\r\n    /// @param fillTakerTokenAmount Desired amount of takerToken to fill.\r\n    /// @return Predicted result of transfers.\r\n    function isTransferable(Order order, uint fillTakerTokenAmount)\r\n        internal\r\n        constant  // The called token contracts may attempt to change state, but will not be able to due to gas limits on getBalance and getAllowance.\r\n        returns (bool)\r\n    {\r\n        address taker = msg.sender;\r\n        uint fillMakerTokenAmount = getPartialAmount(fillTakerTokenAmount, order.takerTokenAmount, order.makerTokenAmount);\r\n\r\n        if (order.feeRecipient != address(0)) {\r\n            bool isMakerTokenFee = order.makerToken == FEE_TOKEN_CONTRACT;\r\n            bool isTakerTokenFee = order.takerToken == FEE_TOKEN_CONTRACT;\r\n            uint paidMakerFee = getPartialAmount(fillTakerTokenAmount, order.takerTokenAmount, order.makerFee);\r\n            uint paidTakerFee = getPartialAmount(fillTakerTokenAmount, order.takerTokenAmount, order.takerFee);\r\n            uint requiredMakerFee = isMakerTokenFee ? safeAdd(fillMakerTokenAmount, paidMakerFee) : paidMakerFee;\r\n            uint requiredTakerFee = isTakerTokenFee ? safeAdd(fillTakerTokenAmount, paidTakerFee) : paidTakerFee;\r\n\r\n            if (getBalance(FEE_TOKEN_CONTRACT, order.maker) < requiredMakerFee\r\n                || getAllowance(FEE_TOKEN_CONTRACT, order.maker) < requiredMakerFee\r\n                || getBalance(FEE_TOKEN_CONTRACT, taker) < requiredTakerFee\r\n                || getAllowance(FEE_TOKEN_CONTRACT, taker) < requiredTakerFee) {\r\n                return false;\r\n            }\r\n\r\n            if (!isMakerTokenFee && (getBalance(order.makerToken, order.maker) < fillMakerTokenAmount // Don't double check makerToken if Fee\r\n                || getAllowance(order.makerToken, order.maker) < fillMakerTokenAmount)) {\r\n                return false;\r\n            }\r\n            if (!isTakerTokenFee && (getBalance(order.takerToken, taker) < fillTakerTokenAmount // Don't double check takerToken if Fee\r\n                || getAllowance(order.takerToken, taker) < fillTakerTokenAmount)) {\r\n                return false;\r\n            }\r\n        } else if (getBalance(order.makerToken, order.maker) < fillMakerTokenAmount\r\n                   || getAllowance(order.makerToken, order.maker) < fillMakerTokenAmount\r\n                   || getBalance(order.takerToken, taker) < fillTakerTokenAmount\r\n                   || getAllowance(order.takerToken, taker) < fillTakerTokenAmount) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Get token balance of an address.\r\n    /// @param token Address of token.\r\n    /// @param owner Address of owner.\r\n    /// @return Token balance of owner.\r\n    function getBalance(address token, address owner)\r\n        internal\r\n        constant  // The called token contract may attempt to change state, but will not be able to due to an added gas limit.\r\n        returns (uint)\r\n    {\r\n        return Token(token).balanceOf.gas(EXTERNAL_QUERY_GAS_LIMIT)(owner); // Limit gas to prevent reentrancy\r\n    }\r\n\r\n    /// @dev Get allowance of token given to TokenTransferProxy by an address.\r\n    /// @param token Address of token.\r\n    /// @param owner Address of owner.\r\n    /// @return Allowance of token given to TokenTransferProxy by owner.\r\n    function getAllowance(address token, address owner)\r\n        internal\r\n        constant  // The called token contract may attempt to change state, but will not be able to due to an added gas limit.\r\n        returns (uint)\r\n    {\r\n        return Token(token).allowance.gas(EXTERNAL_QUERY_GAS_LIMIT)(owner, TOKEN_TRANSFER_PROXY_CONTRACT); // Limit gas to prevent reentrancy\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"},{\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"isRoundingError\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_TOKEN_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[5][]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6][]\"},{\"name\":\"fillTakerTokenAmount\",\"type\":\"uint256\"},{\"name\":\"shouldThrowOnInsufficientBalanceOrAllowance\",\"type\":\"bool\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"fillOrdersUpTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[5]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"cancelTakerTokenAmount\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[5][]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6][]\"},{\"name\":\"fillTakerTokenAmounts\",\"type\":\"uint256[]\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"batchFillOrKillOrders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REWARD_SERVICE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewardService\",\"type\":\"address\"}],\"name\":\"setRewardContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[5]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"fillTakerTokenAmount\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"fillOrKillOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"getUnavailableTakerTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USER_REGISTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"},{\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"getPartialAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_TRANSFER_PROXY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userRegistry\",\"type\":\"address\"}],\"name\":\"setUserRegistryContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[5][]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6][]\"},{\"name\":\"fillTakerTokenAmounts\",\"type\":\"uint256[]\"},{\"name\":\"shouldThrowOnInsufficientBalanceOrAllowance\",\"type\":\"bool\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"batchFillOrders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[5][]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6][]\"},{\"name\":\"cancelTakerTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"batchCancelOrders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[5]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"fillTakerTokenAmount\",\"type\":\"uint256\"},{\"name\":\"shouldThrowOnInsufficientBalanceOrAllowance\",\"type\":\"bool\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"fillOrder\",\"outputs\":[{\"name\":\"filledTakerTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[5]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"}],\"name\":\"getOrderHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXTERNAL_QUERY_GAS_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_feeToken\",\"type\":\"address\"},{\"name\":\"_tokenTransferProxy\",\"type\":\"address\"},{\"name\":\"_rewardService\",\"type\":\"address\"},{\"name\":\"_userRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"makerToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"takerToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"filledMakerTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"filledTakerTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidMakerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidTakerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"ExchangeLogFill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"makerToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"takerToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cancelledMakerTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cancelledTakerTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokens\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"ExchangeLogCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"errorId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"ExchangeLogError\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006531f133e6deebe7f2dce5a0441aa7ef330b4e530000000000000000000000008c496ffea0d408ee1687d77e5bd1b916f7d9b5fa0000000000000000000000007dac4a23e7987c9b4f30574728c4674f01680461000000000000000000000000daf04228139649e73a13d08ba581be6265ea195a","Library":"","SwarmSource":"bzzr://39302902c424989ecf55ffbf1e322b5a0d63e1b8ff9f75536fd69347c7de6fce"}]}