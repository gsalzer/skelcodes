{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n\r\n  /**\r\n   * @param _owner The address from which the balance will be retrieved\r\n   * @return The balance\r\n   */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n  /**\r\n   * @notice send `_value` token to `_to` from `msg.sender`\r\n   * @param _to The address of the recipient\r\n   * @param _value The amount of token to be transferred\r\n   * @return Whether the transfer was successful or not\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n  /**\r\n   * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n   * @param _from The address of the sender\r\n   * @param _to The address of the recipient\r\n   * @param _value The amount of token to be transferred\r\n   * @return Whether the transfer was successful or not\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n  /**\r\n   * @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n   * @param _spender The address of the account able to transfer the tokens\r\n   * @param _value The amount of tokens to be approved for transfer\r\n   * @return Whether the approval was successful or not\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n  /**\r\n   * @param _owner The address of the account owning tokens\r\n   * @param _spender The address of the account able to transfer the tokens\r\n   * @return Amount of remaining tokens allowed to spent\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n  /**\r\n   * MUST trigger when tokens are transferred, including zero value transfers.\r\n   */\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * MUST trigger on any successful call to approve(address _spender, uint256 _value)\r\n   */\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\t/**\r\n\t* @notice Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(\r\n\t\tuint256 a,\r\n\t\tuint256 b\r\n\t)\r\n\t\tinternal pure returns (uint256 c)\r\n\t{\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(\r\n\t\tuint256 a,\r\n\t\tuint256 b\r\n\t)\r\n\t\tinternal pure returns (uint256)\r\n\t{\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* @notice Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(\r\n\t\tuint256 a,\r\n\t\tuint256 b\r\n\t)\r\n\t\tinternal pure returns (uint256 c)\r\n\t{\r\n\t\tif (a == 0) {\r\n\t\t\t\treturn 0;\r\n\t\t}\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(\r\n\t\tuint256 a,\r\n\t\tuint256 b\r\n\t)\r\n\t\tinternal pure returns (uint256)\r\n\t{\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t// uint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn a / b;\r\n\t}\r\n}\r\n\r\ncontract F2KToken is ERC20, Ownable {\r\n\t// Adding safe calculation methods to uint256\r\n\tusing SafeMath for uint256;\r\n\r\n\t// Defining balances mapping (ERC20)\r\n\tmapping(address => uint256) balances;\r\n\r\n\t// Defining allowances mapping (ERC20)\r\n\tmapping(address => mapping(address => uint256)) allowed;\r\n\r\n\t// Defining addresses allowed to bypass global freeze\r\n\tmapping(address => bool) public freezeBypassing;\r\n\r\n\t// Defining addresses that have custom lockups periods\r\n\tmapping(address => uint256) public lockupExpirations;\r\n\r\n\t// Token Symbol\r\n\tstring public constant symbol = \"F2K\";\r\n\r\n\t// Token Name\r\n\tstring public constant name = \"Farm2Kitchen Token\";\r\n\r\n\t// Token Decimals\r\n\tuint8 public constant decimals = 2;\r\n\r\n\t// global freeze one-way toggle\r\n\tbool public tradingLive;\r\n\r\n\t// Total supply of token\r\n\tuint256 public totalSupply;\r\n\r\n    constructor() public {\r\n        totalSupply = 280000000 * (10 ** uint256(decimals));\r\n        balances[owner] = totalSupply;\r\n        emit Transfer(address(0), owner, totalSupply);\r\n    }\r\n\r\n\t/**\r\n\t * @notice Event for Lockup period applied to address\r\n\t * @param owner Specific lockup address target\r\n\t * @param until Timestamp when lockup end (seconds since epoch)\r\n\t */\r\n\tevent LockupApplied(\r\n\t\taddress indexed owner,\r\n\t\tuint256 until\r\n\t);\r\n\t\r\n\t/**\r\n\t * @notice distribute tokens to an address\r\n\t * @param to Who will receive the token\r\n\t * @param tokenAmount How much token will be sent\r\n\t */\r\n\tfunction distribute(\r\n\t\t\taddress to,\r\n\t\t\tuint256 tokenAmount\r\n\t)\r\n\t\t\tpublic onlyOwner\r\n\t{\r\n\t\t\trequire(tokenAmount > 0);\r\n\t\t\trequire(tokenAmount <= balances[msg.sender]);\r\n\r\n\t\t\tbalances[msg.sender] = balances[msg.sender].sub(tokenAmount);\r\n\t\t\tbalances[to] = balances[to].add(tokenAmount);\r\n\r\n\t\t\temit Transfer(owner, to, tokenAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Prevents the given wallet to transfer its token for the given duration.\r\n\t *      This methods resets the lock duration if one is already in place.\r\n\t * @param wallet The wallet address to lock\r\n\t * @param duration How much time is the token locked from now (in sec)\r\n\t */\r\n\tfunction lockup(\r\n\t\t\taddress wallet,\r\n\t\t\tuint256 duration\r\n\t)\r\n\t\t\tpublic onlyOwner\r\n\t{\r\n\t\t\tuint256 lockupExpiration = duration.add(now);\r\n\t\t\tlockupExpirations[wallet] = lockupExpiration;\r\n\t\t\temit LockupApplied(wallet, lockupExpiration);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice choose if an address is allowed to bypass the global freeze\r\n\t * @param to Target of the freeze bypass status update\r\n\t * @param status New status (if true will bypass)\r\n\t */\r\n\tfunction setBypassStatus(\r\n\t\t\taddress to,\r\n\t\t\tbool status\r\n\t)\r\n\t\t\tpublic onlyOwner\r\n\t{\r\n\t\t\tfreezeBypassing[to] = status;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice One-way toggle to allow trading (remove global freeze)\r\n\t * @param status New status (if true will bypass)\r\n\t */\r\n\tfunction setTrading(\r\n\t\t\tbool status\r\n\t) \r\n\t\tpublic onlyOwner \r\n\t{\r\n\t\t\ttradingLive = status;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Modifier that checks if the conditions are met for a token to be\r\n\t * tradable. To be so, it must :\r\n\t *  - Global Freeze must be removed, or, \"from\" must be allowed to bypass it\r\n\t *  - \"from\" must not be in a custom lockup period\r\n\t * @param from Who to check the status\r\n\t */\r\n\tmodifier tradable(address from) {\r\n\t\t\trequire(\r\n\t\t\t\t\t(tradingLive || freezeBypassing[from]) && //solium-disable-line indentation\r\n\t\t\t\t\t(lockupExpirations[from] <= now)\r\n\t\t\t);\r\n\t\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Return the total supply of the token\r\n\t * @dev This function is part of the ERC20 standard \r\n\t * @return {\"totalSupply\": \"The token supply\"}\r\n\t */\r\n\tfunction totalSupply() public view returns (uint256 supply) {\r\n\t\t\treturn totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Get the token balance of `owner`\r\n\t * @dev This function is part of the ERC20 standard\r\n\t * @param owner The wallet to get the balance of\r\n\t * @return {\"balance\": \"The balance of `owner`\"}\r\n\t */\r\n\tfunction balanceOf(\r\n\t\t\taddress owner\r\n\t)\r\n\t\t\tpublic view returns (uint256 balance)\r\n\t{\r\n\t\t\treturn balances[owner];\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Transfers `amount` from msg.sender to `destination`\r\n\t * @dev This function is part of the ERC20 standard\r\n\t * @param to The address that receives the tokens\r\n\t * @param tokenAmount Token amount to transfer\r\n\t * @return {\"success\": \"If the operation completed successfuly\"}\r\n\t */\r\n\tfunction transfer(\r\n\t\t\taddress to,\r\n\t\t\tuint256 tokenAmount\r\n\t)\r\n\t\t\tpublic tradable(msg.sender) returns (bool success)\r\n\t{\r\n\t\t\trequire(tokenAmount > 0);\r\n\t\t\trequire(tokenAmount <= balances[msg.sender]);\r\n\r\n\t\t\tbalances[msg.sender] = balances[msg.sender].sub(tokenAmount);\r\n\t\t\tbalances[to] = balances[to].add(tokenAmount);\r\n\t\t\temit Transfer(msg.sender, to, tokenAmount);\r\n\t\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Transfer tokens from an address to another one\r\n\t * through an allowance made before\r\n\t * @dev This function is part of the ERC20 standard\r\n\t * @param from The address that sends the tokens\r\n\t * @param to The address that receives the tokens\r\n\t * @param tokenAmount Token amount to transfer\r\n\t * @return {\"success\": \"If the operation completed successfuly\"}\r\n\t */\r\n\tfunction transferFrom(\r\n\t\t\taddress from,\r\n\t\t\taddress to,\r\n\t\t\tuint256 tokenAmount\r\n\t)\r\n\t\t\tpublic tradable(from) returns (bool success)\r\n\t{\r\n\t\t\trequire(tokenAmount > 0);\r\n\t\t\trequire(tokenAmount <= balances[from]);\r\n\t\t\trequire(tokenAmount <= allowed[from][msg.sender]);\r\n\t\t\t\r\n\t\t\tbalances[from] = balances[from].sub(tokenAmount);\r\n\t\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokenAmount);\r\n\t\t\tbalances[to] = balances[to].add(tokenAmount);\r\n\t\t\t\r\n\t\t\temit Transfer(from, to, tokenAmount);\r\n\t\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @notice Approve an address to send `tokenAmount` tokens to `msg.sender` (make an allowance)\r\n\t * @dev This function is part of the ERC20 standard\r\n\t * @param spender The allowed address\r\n\t * @param tokenAmount The maximum amount allowed to spend\r\n\t * @return {\"success\": \"If the operation completed successfuly\"}\r\n\t */\r\n\tfunction approve(\r\n\t\t\taddress spender,\r\n\t\t\tuint256 tokenAmount\r\n\t)\r\n\t\t\tpublic returns (bool success)\r\n\t{\r\n\t\t\tallowed[msg.sender][spender] = tokenAmount;\r\n\t\t\temit Approval(msg.sender, spender, tokenAmount);\r\n\t\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Increase the amount of tokens that an owner allowed to a spender.\r\n\t* To increment allowed value it is better to use this function to avoid double withdrawal attack. \r\n\t* @param spender The address which will spend the funds.\r\n\t* @param tokenAmount The amount of tokens to increase the allowance by.\r\n\t*/\r\n\tfunction increaseApproval(\r\n\t\t\taddress spender,\r\n\t\t\tuint tokenAmount\r\n\t)\r\n\t\t\tpublic returns (bool)\r\n\t{\r\n\t\t\tallowed[msg.sender][spender] = (allowed[msg.sender][spender].add(tokenAmount));\r\n\t\t\temit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Decrease the amount of tokens that an owner allowed to a spender.\r\n\t* To decrease the allowed value it is better to use this function to avoid double withdrawal attack. \r\n\t* @param spender The address which will spend the funds.\r\n\t* @param tokenAmount The amount of tokens to decrease the allowance by.\r\n\t*/\r\n\tfunction decreaseApproval(\r\n\t\t\taddress spender,\r\n\t\t\tuint tokenAmount\r\n\t)\r\n\t\t\tpublic returns (bool)\r\n\t{\r\n\t\t\tuint oldValue = allowed[msg.sender][spender];\r\n\t\t\tif (tokenAmount > oldValue) {\r\n\t\t\t\tallowed[msg.sender][spender] = 0;\r\n\t\t\t} else {\r\n\t\t\t\tallowed[msg.sender][spender] = oldValue.sub(tokenAmount);\r\n\t\t\t}\r\n\t\t\temit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @notice Get the remaining allowance for a spender on a given address\r\n\t * @dev This function is part of the ERC20 standard\r\n\t * @param tokenOwner The address that owns the tokens\r\n\t * @param spender The spender\r\n\t * @return {\"remaining\": \"The amount of tokens remaining in the allowance\"}\r\n\t */\r\n\tfunction allowance(\r\n\t\t\taddress tokenOwner,\r\n\t\t\taddress spender\r\n\t)\r\n\t\t\tpublic view returns (uint256 remaining)\r\n\t{\r\n\t\t\treturn allowed[tokenOwner][spender];\r\n\t}\r\n\r\n\tfunction burn(\r\n\t\t\tuint tokenAmount\r\n\t) \r\n\t\t\tpublic onlyOwner returns (bool)\r\n\t{\r\n\t\trequire(balances[msg.sender] >= tokenAmount);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(tokenAmount);\r\n\t\ttotalSupply = totalSupply.sub(tokenAmount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Permits to withdraw any ERC20 tokens that have been mistakingly sent to this contract\r\n\t * @param tokenAddress The received ERC20 token address\r\n\t * @param tokenAmount The amount of ERC20 tokens to withdraw from this contract\r\n\t * @return {\"success\": \"If the operation completed successfuly\"}\r\n\t */\r\n\tfunction withdrawERC20Token(\r\n\t\t\taddress tokenAddress,\r\n\t\t\tuint256 tokenAmount\r\n\t)\r\n\t\t\tpublic onlyOwner returns (bool success)\r\n\t{\r\n\t\t\treturn ERC20(tokenAddress).transfer(owner, tokenAmount);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingLive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setBypassStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockupExpirations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeBypassing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"lockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"LockupApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"F2KToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://78a9d0c807035dfc71acba655128b56f3c6bb97b72ca4369080391f90561e020"}]}