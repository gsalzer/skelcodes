{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n\tevent Pause();\r\n\tevent Unpause();\r\n\r\n\tbool public paused = false;\r\n\r\n\r\n\t/**\r\n\t * @dev modifier to allow actions only when the contract IS paused\r\n\t */\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev modifier to allow actions only when the contract IS NOT paused\r\n\t */\r\n\tmodifier whenPaused {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev called by the owner to pause, triggers stopped state\r\n\t */\r\n\tfunction pause() onlyOwner whenNotPaused public returns (bool) {\r\n\t\tpaused = true;\r\n\t\temit Pause();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev called by the owner to unpause, returns to normal state\r\n\t */\r\n\tfunction unpause() onlyOwner whenPaused public returns (bool) {\r\n\t\tpaused = false;\r\n\t\temit Unpause();\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary ContractLib {\r\n\t//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n\tfunction isContract(address _addr) internal view returns (bool) {\r\n\t\tuint length;\r\n\t\tassembly {\r\n\t\t\t//retrieve the size of the code on target address, this needs assembly\r\n\t\t\tlength := extcodesize(_addr)\r\n\t\t}\r\n\t\treturn (length>0);\r\n\t}\r\n}\r\n\r\n/*\r\n* Contract that is working with ERC223 tokens\r\n*/\r\n \r\ncontract ContractReceiver {\r\n\tfunction tokenFallback(address _from, uint _value, bytes _data) public pure;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\tfunction totalSupply() public constant returns (uint);\r\n\tfunction balanceOf(address tokenOwner) public constant returns (uint);\r\n\tfunction allowance(address tokenOwner, address spender) public constant returns (uint);\r\n\tfunction transfer(address to, uint tokens) public returns (bool);\r\n\tfunction approve(address spender, uint tokens) public returns (bool);\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool);\r\n\r\n\tfunction name() public constant returns (string);\r\n\tfunction symbol() public constant returns (string);\r\n\tfunction decimals() public constant returns (uint8);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n /**\r\n * ERC223 token by Dexaran\r\n *\r\n * https://github.com/Dexaran/ERC223-token-standard\r\n */\r\n \r\n\r\n /* New ERC223 contract interface */\r\n \r\ncontract ERC223 is ERC20Interface {\r\n\tfunction transfer(address to, uint value, bytes data) public returns (bool);\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\n \r\ncontract NXX is ERC223, Pausable {\r\n\r\n\tusing SafeMath for uint256;\r\n\tusing ContractLib for address;\r\n\r\n\tmapping(address => uint) balances;\r\n\tmapping(address => mapping(address => uint)) allowed;\r\n\t\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals;\r\n\tuint256 public totalSupply;\r\n\r\n\tevent Burn(address indexed from, uint256 value);\r\n\t\r\n\t// ------------------------------------------------------------------------\r\n\t// Constructor\r\n\t// ------------------------------------------------------------------------\r\n\tfunction NXX() public {\r\n\t\tsymbol = \"NASHXX\";\r\n\t\tname = \"XXXX CASH\";\r\n\t\tdecimals = 18;\r\n\t\ttotalSupply = 100000000000 * 10**uint(decimals);\r\n\t\tbalances[msg.sender] = totalSupply;\r\n\t\temit Transfer(address(0), msg.sender, totalSupply);\r\n\t}\r\n\t\r\n\t\r\n\t// Function to access name of token .\r\n\tfunction name() public constant returns (string) {\r\n\t\treturn name;\r\n\t}\r\n\t// Function to access symbol of token .\r\n\tfunction symbol() public constant returns (string) {\r\n\t\treturn symbol;\r\n\t}\r\n\t// Function to access decimals of token .\r\n\tfunction decimals() public constant returns (uint8) {\r\n\t\treturn decimals;\r\n\t}\r\n\t// Function to access total supply of tokens .\r\n\tfunction totalSupply() public constant returns (uint256) {\r\n\t\treturn totalSupply;\r\n\t}\r\n\t\r\n\t// Function that is called when a user or another contract wants to transfer funds .\r\n\tfunction transfer(address _to, uint _value, bytes _data) public whenNotPaused returns (bool) {\r\n\t\trequire(_to != 0x0);\r\n\t\tif(_to.isContract()) {\r\n\t\t\treturn transferToContract(_to, _value, _data);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn transferToAddress(_to, _value, _data);\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Standard function transfer similar to ERC20 transfer with no _data .\r\n\t// Added due to backwards compatibility reasons .\r\n\tfunction transfer(address _to, uint _value) public whenNotPaused returns (bool) {\r\n\t\t//standard function transfer similar to ERC20 transfer with no _data\r\n\t\t//added due to backwards compatibility reasons\r\n\t\trequire(_to != 0x0);\r\n\r\n\t\tbytes memory empty;\r\n\t\tif(_to.isContract()) {\r\n\t\t\treturn transferToContract(_to, _value, empty);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn transferToAddress(_to, _value, empty);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t//function that is called when transaction target is an address\r\n\tfunction transferToAddress(address _to, uint _value, bytes _data) private returns (bool) {\r\n\t\tbalances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n\t\tbalances[_to] = balanceOf(_to).add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\temit Transfer(msg.sender, _to, _value, _data);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n\t    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n\t    balances[_to] = balanceOf(_to).add(_value);\r\n\t    ContractReceiver receiver = ContractReceiver(_to);\r\n\t    receiver.tokenFallback(msg.sender, _value, _data);\r\n\t    emit Transfer(msg.sender, _to, _value);\r\n\t    emit Transfer(msg.sender, _to, _value, _data);\r\n\t    return true;\r\n\t}\r\n\t\r\n\tfunction balanceOf(address _owner) public constant returns (uint) {\r\n\t\treturn balances[_owner];\r\n\t}  \r\n\r\n\tfunction burn(uint256 _value) public whenNotPaused returns (bool) {\r\n\t\trequire (_value > 0); \r\n\t\trequire (balanceOf(msg.sender) >= _value);            // Check if the sender has enough\r\n\t\tbalances[msg.sender] = balanceOf(msg.sender).sub(_value);                      // Subtract from the sender\r\n\t\ttotalSupply = totalSupply.sub(_value);                                // Updates totalSupply\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n\t// from the token owner's account\r\n\t//\r\n\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\t// recommends that there are no checks for the approval double-spend attack\r\n\t// as this should be implemented in user interfaces \r\n\t// ------------------------------------------------------------------------\r\n\tfunction approve(address spender, uint tokens) public whenNotPaused returns (bool) {\r\n\t\tallowed[msg.sender][spender] = tokens;\r\n\t\temit Approval(msg.sender, spender, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseApproval (address _spender, uint _addedValue) public whenNotPaused\r\n\t    returns (bool success) {\r\n\t    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t    return true;\r\n\t}\r\n\r\n\tfunction decreaseApproval (address _spender, uint _subtractedValue) public whenNotPaused\r\n\t    returns (bool success) {\r\n\t    uint oldValue = allowed[msg.sender][_spender];\r\n\t    if (_subtractedValue > oldValue) {\r\n\t      allowed[msg.sender][_spender] = 0;\r\n\t    } else {\r\n\t      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t    }\r\n\t    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t    return true;\r\n\t}\t\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Transfer `tokens` from the `from` account to the `to` account\r\n\t// \r\n\t// The calling account must already have sufficient tokens approve(...)-d\r\n\t// for spending from the `from` account and\r\n\t// - From account must have sufficient balance to transfer\r\n\t// - Spender must have sufficient allowance to transfer\r\n\t// - 0 value transfers are allowed\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transferFrom(address from, address to, uint tokens) public whenNotPaused returns (bool) {\r\n\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n\t\tbalances[from] = balances[from].sub(tokens);\r\n\t\tbalances[to] = balances[to].add(tokens);\r\n\t\temit Transfer(from, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Returns the amount of tokens approved by the owner that can be\r\n\t// transferred to the spender's account\r\n\t// ------------------------------------------------------------------------\r\n\tfunction allowance(address tokenOwner, address spender) public constant returns (uint) {\r\n\t\treturn allowed[tokenOwner][spender];\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Don't accept ETH\r\n\t// ------------------------------------------------------------------------\r\n\tfunction () public payable {\r\n\t\trevert();\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Owner can transfer out any accidentally sent ERC20 tokens\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool) {\r\n\t\treturn ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n\t}\r\n\r\n\t/* RO Token 预售 */\r\n\taddress[] supportedERC20Token;\r\n\tmapping (address => uint256) prices;\r\n\tmapping (address => uint256) starttime;\r\n\tmapping (address => uint256) endtime;\r\n\r\n\tuint256 maxTokenCountPerTrans = 10000;\r\n\tuint256 nashInPool;\r\n\r\n\tevent AddSupportedToken(\r\n\t\taddress _address, \r\n\t\tuint256 _price, \r\n\t\tuint256 _startTime, \r\n\t\tuint256 _endTime);\r\n\r\n\tevent RemoveSupportedToken(\r\n\t\taddress _address\r\n\t);\r\n\r\n\tfunction addSupportedToken(\r\n\t\taddress _address, \r\n\t\tuint256 _price, \r\n\t\tuint256 _startTime, \r\n\t\tuint256 _endTime\r\n\t) public onlyOwner returns (bool) {\r\n\t\t\r\n\t\trequire(_address != 0x0);\r\n\t\trequire(_address.isContract());\r\n\t\trequire(_startTime < _endTime);\r\n\t\trequire(_endTime > block.timestamp);\r\n\r\n\t\tsupportedERC20Token.push(_address);\r\n\t\tprices[_address] = _price;\r\n\t\tstarttime[_address] = _startTime;\r\n\t\tendtime[_address] = _endTime;\r\n\r\n\t\temit AddSupportedToken(_address, _price, _startTime, _endTime);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction removeSupportedToken(address _address) public onlyOwner returns (bool) {\r\n\t\trequire(_address != 0x0);\r\n\t\tuint256 length = supportedERC20Token.length;\r\n\t\tfor (uint256 i = 0; i < length; i++) {\r\n\t\t\tif (supportedERC20Token[i] == _address) {\r\n\t\t\t\tif (i != length - 1) {\r\n\t\t\t\t\tsupportedERC20Token[i] = supportedERC20Token[length - 1];\r\n\t\t\t\t}\r\n                delete supportedERC20Token[length-1];\r\n\t\t\t\tsupportedERC20Token.length--;\r\n\r\n\t\t\t\tprices[_address] = 0;\r\n\t\t\t\tstarttime[_address] = 0;\r\n\t\t\t\tendtime[_address] = 0;\r\n\r\n\t\t\t\temit RemoveSupportedToken(_address);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tmodifier canBuy(address _address) { \r\n\t\tbool found = false;\r\n\t\tuint256 length = supportedERC20Token.length;\r\n\t\tfor (uint256 i = 0; i < length; i++) {\r\n\t\t\tif (supportedERC20Token[i] == _address) {\r\n\t\t\t\trequire(block.timestamp > starttime[_address]);\r\n\t\t\t\trequire(block.timestamp < endtime[_address]);\r\n\t\t\t\tfound = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\trequire (found); \r\n\t\t_; \r\n\t}\r\n\r\n\tfunction joinPreSale(address _tokenAddress, uint256 _tokenCount) public canBuy(_tokenAddress) returns (bool) {\r\n\t\trequire(_tokenCount <= maxTokenCountPerTrans); \r\n\t\tuint256 total = _tokenCount * prices[_tokenAddress]; // will not overflow here since the price will not be high\r\n\t\tbalances[msg.sender].sub(total);\r\n\t\tnashInPool.add(total);\r\n\r\n\t\temit Transfer(_tokenAddress, this, total);\r\n\r\n\t\treturn ERC20Interface(_tokenCount).transfer(msg.sender, _tokenCount);\r\n\t}\r\n\r\n\tfunction transferNashOut(address _to, uint256 count) public onlyOwner returns(bool) {\r\n\t\trequire(_to != 0x0);\r\n\t\tnashInPool.sub(count);\r\n\t\tbalances[_to].add(count);\r\n\r\n\t\temit Transfer(this, _to, count);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"name\":\"joinPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeSupportedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"addSupportedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"transferNashOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"AddSupportedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemoveSupportedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"NXX","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0e6c9f6d5558d666abacd9370fec7cf2011adf11e71396163927277bf88ff576"}]}