{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title KYC contract interface\r\n */\r\ncontract KYC {\r\n    \r\n    /**\r\n     * Get KYC expiration timestamp in second.\r\n     *\r\n     * @param _who Account address\r\n     * @return KYC expiration timestamp in second\r\n     */\r\n    function expireOf(address _who) external view returns (uint256);\r\n\r\n    /**\r\n     * Get KYC level.\r\n     * Level is ranging from 0 (lowest, no KYC) to 255 (highest, toughest).\r\n     *\r\n     * @param _who Account address\r\n     * @return KYC level\r\n     */\r\n    function kycLevelOf(address _who) external view returns (uint8);\r\n\r\n    /**\r\n     * Get encoded nationalities (country list).\r\n     * The uint256 is represented by 256 bits (0 or 1).\r\n     * Every bit can represent a country.\r\n     * For each listed country, set the corresponding bit to 1.\r\n     * To do so, up to 256 countries can be encoded in an uint256 variable.\r\n     * Further, if country blacklist of an ICO was encoded by the same way,\r\n     * it is able to use bitwise AND to check whether the investor can invest\r\n     * the ICO by the crowdsale.\r\n     *\r\n     * @param _who Account address\r\n     * @return Encoded nationalities\r\n     */\r\n    function nationalitiesOf(address _who) external view returns (uint256);\r\n\r\n    /**\r\n     * Set KYC status to specific account address.\r\n     *\r\n     * @param _who Account address\r\n     * @param _expiresAt Expire timestamp in seconds\r\n     * @param _level KYC level\r\n     * @param _nationalities Encoded nationalities\r\n     */\r\n    function setKYC(\r\n        address _who, uint256 _expiresAt, uint8 _level, uint256 _nationalities) \r\n        external;\r\n\r\n    event KYCSet (\r\n        address indexed _setter,\r\n        address indexed _who,\r\n        uint256 _expiresAt,\r\n        uint8 _level,\r\n        uint256 _nationalities\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * @title Fusions KYC contract\r\n */\r\ncontract FusionsKYC is KYC, Ownable {\r\n\r\n    struct KYCStatus {\r\n        uint256 expires;\r\n        uint8 kycLevel;\r\n        uint256 nationalities;\r\n    }\r\n\r\n    mapping(address => KYCStatus) public kycStatuses;\r\n\r\n    function expireOf(address _who) \r\n        external view returns (uint256)\r\n    {\r\n        return kycStatuses[_who].expires;\r\n    }\r\n\r\n    function kycLevelOf(address _who)\r\n        external view returns (uint8)\r\n    {\r\n        return kycStatuses[_who].kycLevel;\r\n    }\r\n\r\n    function nationalitiesOf(address _who) \r\n        external view returns (uint256)\r\n    {\r\n        return kycStatuses[_who].nationalities;\r\n    }    \r\n    \r\n    function setKYC(\r\n        address _who, \r\n        uint256 _expiresAt,\r\n        uint8 _level,\r\n        uint256 _nationalities\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _who != address(0),\r\n            \"Failed to set expiration due to address is 0x0.\"\r\n        );\r\n\r\n        emit KYCSet(\r\n            msg.sender,\r\n            _who,\r\n            _expiresAt,\r\n            _level,\r\n            _nationalities\r\n        );\r\n\r\n        kycStatuses[_who].expires = _expiresAt;\r\n        kycStatuses[_who].kycLevel = _level;\r\n        kycStatuses[_who].nationalities = _nationalities;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"kycLevelOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"nationalitiesOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_expiresAt\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_nationalities\",\"type\":\"uint256\"}],\"name\":\"setKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"expireOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"kycStatuses\",\"outputs\":[{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"kycLevel\",\"type\":\"uint8\"},{\"name\":\"nationalities\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_setter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_expiresAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_nationalities\",\"type\":\"uint256\"}],\"name\":\"KYCSet\",\"type\":\"event\"}]","ContractName":"FusionsKYC","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d6bdbf63e49814c821af8ca872e4fdce231469f7c7e10191ed0f9a93f8ce783f"}]}