{"status":"1","message":"OK","result":[{"SourceCode":"// loosely based on Bryn Bellomy code\r\n// https://medium.com/@bryn.bellomy/solidity-tutorial-building-a-simple-auction-contract-fcc918b0878a\r\n//\r\n// updated to 0.4.25 standard, replaced blocks with time, converted to hot potato style by Chibi Fighters\r\n// https://chibifighters.io\r\n//\r\n\r\npragma solidity ^0.4.25;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, returns 0 if it would go into minus range.\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b >= a) {\r\n            return 0;\r\n        }\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract AuctionPotato is Ownable {\r\n    using SafeMath for uint256; \r\n\r\n    string name;\r\n    uint public startTime;\r\n    uint public endTime;\r\n    uint auctionDuration;\r\n\r\n    // pototo\r\n    uint public potato;\r\n    uint oldPotato;\r\n    uint oldHighestBindingBid;\r\n    \r\n    // state\r\n    bool public canceled;\r\n    uint public highestBindingBid;\r\n    address public highestBidder;\r\n    \r\n    // used to immidiately block placeBids\r\n    bool blockerPay;\r\n    bool blockerWithdraw;\r\n    \r\n    mapping(address => uint256) public fundsByBidder;\r\n    bool ownerHasWithdrawn;\r\n\r\n    // couple events\r\n    event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid);\r\n    event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount);\r\n    event LogCanceled();\r\n    event Withdraw(address owner, uint amount);\r\n    \r\n    \r\n    constructor() public {\r\n        \r\n        blockerWithdraw = false;\r\n        blockerPay = false;\r\n        \r\n        // 0.003 ETH\r\n        highestBindingBid = 3000000000000000;\r\n        potato = 0;\r\n        \r\n        // set to 3 hours\r\n        auctionDuration = 3 hours;\r\n\r\n        // 12/31/2018 @ 5:00pm (UTC) 1546275600 Glen Weyl\r\n        // 01/03/2019 @ 5:00pm (UTC) 1546534800 Glen Weyl 2\r\n        // 01/06/2019 @ 5:00pm (UTC) 1546794000 Glen Weyl 3\r\n        \r\n        // 12/31/2018 @ 6:00pm (UTC) 1546279200 Brenna Sparks\r\n        // 01/03/2019 @ 6:00pm (UTC) 1546538400 Brenna Sparks 2\r\n        // 01/06/2019 @ 6:00pm (UTC) 1546797600 Brenna Sparks 3\r\n\r\n        startTime = 1546279200;\r\n        endTime = startTime + auctionDuration;\r\n\r\n        name = \"Brenna Sparks\";\r\n\r\n    }\r\n    \r\n    \r\n    function setStartTime(uint _time) onlyOwner public \r\n    {\r\n        require(now < startTime);\r\n        startTime = _time;\r\n        endTime = startTime + auctionDuration;\r\n    }\r\n\r\n\r\n    // calculates the next bid amount to you can have a oneclick buy button\r\n    function nextBid() public view returns (uint _nextBid) {\r\n        return highestBindingBid.add(potato);\r\n    }\r\n    \r\n    \r\n    // calculates the bid after the current bid so nifty hackers can skip the queue\r\n    // this is not in our frontend and no one knows if it actually works\r\n    function nextNextBid() public view returns (uint _nextBid) {\r\n        return highestBindingBid.add(potato).add((highestBindingBid.add(potato)).mul(4).div(9));\r\n    }\r\n    \r\n    \r\n    function queryAuction() public view returns (string, uint, address, uint, uint, uint)\r\n    {\r\n        \r\n        return (name, nextBid(), highestBidder, highestBindingBid, startTime, endTime);\r\n        \r\n    }\r\n\r\n\r\n    function placeBid() public\r\n        payable\r\n        onlyAfterStart\r\n        onlyBeforeEnd\r\n        onlyNotCanceled\r\n    {   \r\n        // we are only allowing to increase in bidIncrements to make for true hot potato style\r\n        require(msg.value == highestBindingBid.add(potato));\r\n        require(msg.sender != highestBidder);\r\n        require(now > startTime);\r\n        require(blockerPay == false);\r\n        blockerPay = true;\r\n        \r\n        // calculate the user's total bid based on the current amount they've sent to the contract\r\n        // plus whatever has been sent with this transaction\r\n\r\n        fundsByBidder[msg.sender] = fundsByBidder[msg.sender].add(highestBindingBid);\r\n        fundsByBidder[highestBidder] = fundsByBidder[highestBidder].add(potato);\r\n\r\n        highestBidder.transfer(fundsByBidder[highestBidder]);\r\n        fundsByBidder[highestBidder] = 0;\r\n        \r\n        oldHighestBindingBid = highestBindingBid;\r\n        \r\n        // set new highest bidder\r\n        highestBidder = msg.sender;\r\n        highestBindingBid = highestBindingBid.add(potato);\r\n\r\n        oldPotato = potato;\r\n        potato = highestBindingBid.mul(4).div(9);\r\n        \r\n        emit LogBid(msg.sender, highestBidder, oldHighestBindingBid, highestBindingBid);\r\n        \r\n        blockerPay = false;\r\n    }\r\n\r\n\r\n    function cancelAuction() public\r\n        onlyOwner\r\n        onlyBeforeEnd\r\n        onlyNotCanceled\r\n    {\r\n        canceled = true;\r\n        emit LogCanceled();\r\n        \r\n        emit Withdraw(highestBidder, address(this).balance);\r\n        highestBidder.transfer(address(this).balance);\r\n        \r\n    }\r\n\r\n\r\n    function withdraw() public onlyOwner {\r\n        require(now > endTime);\r\n        \r\n        emit Withdraw(msg.sender, address(this).balance);\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    function balance() public view returns (uint _balance) {\r\n        return address(this).balance;\r\n    }\r\n\r\n\r\n    modifier onlyAfterStart {\r\n        if (now < startTime) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyBeforeEnd {\r\n        if (now > endTime) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotCanceled {\r\n        if (canceled) revert();\r\n        _;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"nextNextBid\",\"outputs\":[{\"name\":\"_nextBid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextBid\",\"outputs\":[{\"name\":\"_nextBid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canceled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundsByBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"placeBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBindingBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potato\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"highestBidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldHighestBindingBid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"highestBindingBid\",\"type\":\"uint256\"}],\"name\":\"LogBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawalAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AuctionPotato","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c62912fb277429cbcfd2758ea3dd9b305c043ae25c6e9f3f2c1c609449f3939d"}]}