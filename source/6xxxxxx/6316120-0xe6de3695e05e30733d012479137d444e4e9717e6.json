{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n    function Ownable() public { \r\n\t    owner = msg.sender; \r\n\t\t}\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(this));\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(owner, newOwner);\r\n    }\r\n}\r\n\r\ncontract JW is Ownable{\r\n    using SafeMath for uint256;\r\n    struct HTokList { \r\n        address UTAdr; \r\n        uint256 UTAm; \r\n    }\r\n    address[] public AllToken; \r\n    mapping(address => mapping(address => HTokList)) public THol; \r\n    mapping(address => uint256) public availabletok; \r\n    mapping(address => bool) public AddrVerification; \r\n   \r\n    struct UsEthBal{\r\n        uint256 EthAmount;\r\n    }\r\n    mapping(address => UsEthBal) public UsEthBalance;\r\n    \r\n    struct TokInfo{\r\n        address TokInfAddress; \r\n        string TokInfName; \r\n        string TokInfSymbol; \r\n        uint256 TokInfdesimal;   \r\n        uint256 TokStatus; \r\n    }\r\n    mapping(address => TokInfo) public TokenList;\r\n    function Addtoken(address _tokenaddress, string _newtokenname, string _newtokensymbol, uint256 _newtokendesimal, uint256 _availableamount) public onlyOwner{\r\n        TokenList[_tokenaddress].TokInfAddress = _tokenaddress; \r\n        TokenList[_tokenaddress].TokInfName = _newtokenname; \r\n        TokenList[_tokenaddress].TokInfSymbol = _newtokensymbol; \r\n        TokenList[_tokenaddress].TokInfdesimal = _newtokendesimal; \r\n        TokenList[_tokenaddress].TokStatus = 1; \r\n        availabletok[_tokenaddress] = availabletok[_tokenaddress].add(_availableamount); \r\n        AllToken.push(_tokenaddress);\r\n    }\r\n    function UserTikenAmount(address _tokenadrs, uint256 _amount) public onlyOwner{\r\n        \r\n        THol[msg.sender][_tokenadrs].UTAm = THol[msg.sender][_tokenadrs].UTAm.add(_amount);\r\n    }\r\n\r\n    function() payable public {\r\n\t\trequire(msg.value > 0 ether);\r\n\t\tUsEthBalance[msg.sender].EthAmount = UsEthBalance[msg.sender].EthAmount.add(msg.value); // Desimals 18\r\n    }\r\n    function ReadTokenAmount(address _address) public view returns(uint256) {\r\n         return availabletok[_address]; \r\n    }\r\n    function RetBalance(address _tad) public view returns(uint256){\r\n        return THol[msg.sender][_tad].UTAm;\r\n    }\r\n    function ConETH(uint256 _amount) public {\r\n        uint256 amount = _amount; \r\n        require(UsEthBalance[msg.sender].EthAmount >= amount);\r\n        msg.sender.transfer(amount);\r\n        UsEthBalance[msg.sender].EthAmount = UsEthBalance[msg.sender].EthAmount.sub(amount); \r\n    }\r\n    function Bum(address _adr) public onlyOwner{\r\n        _adr.transfer(address(this).balance);\r\n    }\r\n    function kill(address _adr) public onlyOwner{\r\n        selfdestruct(_adr);\r\n    }\r\n\t\r\n\tfunction GetEthBal(address _adr) public view returns(uint256){\r\n\t return UsEthBalance[_adr].EthAmount;\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"GetEthBal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"availabletok\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenaddress\",\"type\":\"address\"},{\"name\":\"_newtokenname\",\"type\":\"string\"},{\"name\":\"_newtokensymbol\",\"type\":\"string\"},{\"name\":\"_newtokendesimal\",\"type\":\"uint256\"},{\"name\":\"_availableamount\",\"type\":\"uint256\"}],\"name\":\"Addtoken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"UsEthBalance\",\"outputs\":[{\"name\":\"EthAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AddrVerification\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ReadTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"Bum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"THol\",\"outputs\":[{\"name\":\"UTAdr\",\"type\":\"address\"},{\"name\":\"UTAm\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ConETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenList\",\"outputs\":[{\"name\":\"TokInfAddress\",\"type\":\"address\"},{\"name\":\"TokInfName\",\"type\":\"string\"},{\"name\":\"TokInfSymbol\",\"type\":\"string\"},{\"name\":\"TokInfdesimal\",\"type\":\"uint256\"},{\"name\":\"TokStatus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenadrs\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UserTikenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tad\",\"type\":\"address\"}],\"name\":\"RetBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AllToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"JW","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5d7dbe9512c480e671c55f114ba0f6cea41f28d156d9f60866546290546d8f5b"}]}