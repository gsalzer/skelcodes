{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// Searcher is an interface for contracts that want to be notified of incoming data\r\n//\r\ncontract Searcher {\r\n\r\n    // poke is called when new data arrives\r\n    //\r\n    function poke() public;\r\n\r\n    // this is called to ensure that only valid Searchers can be added to the Lighthouse - returns an arbitrarily chosen number\r\n    //\r\n    function identify() external pure returns(uint) {\r\n        return 0xda4b055; \r\n    }\r\n}\r\n\r\n// for operation of this contract see the readme file.\r\n//\r\ncontract Lighthouse {\r\n    \r\n    address public auth = msg.sender; // ownable model. No real value in making it transferrable.\r\n\r\n    Searcher seeker;                  // a single contract that can be notified of data changes\r\n\r\n    uint value;                       // holds all the data bit fiddled into a single 32 byte word.\r\n\r\n    uint maxAge;                      // if non zero, sets a limit to data validity\r\n\r\n    // admin functions\r\n    \r\n    modifier onlyAuth {\r\n        require(auth == msg.sender, \"Unauthorised access\");\r\n        _;\r\n    }\r\n\r\n    function changeAuth(address newAuth) public onlyAuth {\r\n        auth = newAuth;\r\n    }\r\n\r\n    function changeSearcher(Searcher newSeeker) public onlyAuth {\r\n        seeker = newSeeker;\r\n        require(seeker.identify() == 0xda4b055,\"invalid searcher\");\r\n    }\r\n\r\n    function setMaxAge(uint newMaxAge) public onlyAuth {\r\n        maxAge = newMaxAge;\r\n    }\r\n    \r\n    function notTooLongSinceUpdated() public view returns (bool) {\r\n        uint since = now - ((value >> 128) & \r\n        0x000000000000000000000000000000000000000000000000ffffffffffffffff);\r\n        return (since < maxAge) || (maxAge == 0);\r\n    }\r\n    \r\n    function peekData() external view returns (uint128 v,bool b) {\r\n        v = uint128(value);\r\n        b = notTooLongSinceUpdated() && value != 0;\r\n        return;\r\n    }\r\n    \r\n    function peekUpdated()  external view returns (uint32 v,bool b) {\r\n        uint v2 = value >> 128;\r\n        v = uint32(v2);\r\n        b = notTooLongSinceUpdated() && value != 0;\r\n        return;\r\n    }\r\n    \r\n    function peekLastNonce() external view returns (uint32 v,bool b) {\r\n        uint v2 = value >> 192;\r\n        v = uint32(v2);\r\n        b = notTooLongSinceUpdated() && value != 0;\r\n        return;\r\n    }\r\n\r\n    function peek() external view returns (bytes32 v ,bool ok) {\r\n        v = bytes32(value & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff);\r\n        ok = notTooLongSinceUpdated() && value != 0;\r\n        return;\r\n    }\r\n    \r\n    function read() external view returns (bytes32 x) {\r\n        require(notTooLongSinceUpdated() && value != 0, \"Invalid data stored\");\r\n        return bytes32(value & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff);\r\n    }\r\n    \r\n    function write(uint  DataValue, uint nonce) external onlyAuth {\r\n        require ((DataValue >> 128) == 0, \"Value too large\");\r\n        require ((nonce >> 32) == 0, \"Nonce too large\");\r\n        value = DataValue + (nonce << 192) + (now << 128) ;\r\n        if (address(seeker) != address(0)) {\r\n            seeker.poke();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newAuth\",\"type\":\"address\"}],\"name\":\"changeAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peekData\",\"outputs\":[{\"name\":\"v\",\"type\":\"uint128\"},{\"name\":\"b\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peek\",\"outputs\":[{\"name\":\"v\",\"type\":\"bytes32\"},{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxAge\",\"type\":\"uint256\"}],\"name\":\"setMaxAge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"DataValue\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"write\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peekUpdated\",\"outputs\":[{\"name\":\"v\",\"type\":\"uint32\"},{\"name\":\"b\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peekLastNonce\",\"outputs\":[{\"name\":\"v\",\"type\":\"uint32\"},{\"name\":\"b\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSeeker\",\"type\":\"address\"}],\"name\":\"changeSearcher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notTooLongSinceUpdated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Lighthouse","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5dca79bc6ab7d02d47bb4127d4f2cb4ddf33771c7ba6c7b13ca8bf584586376c"}]}