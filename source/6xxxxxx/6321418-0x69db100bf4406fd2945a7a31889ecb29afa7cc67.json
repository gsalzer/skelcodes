{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath \r\n{\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n\r\n  /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two numbers, throws on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable \r\n{\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n  \r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable \r\n{\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpauseunpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic \r\n{\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic \r\n{\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  \r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic \r\n{\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken \r\n{\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable \r\n{\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Frozenable Token\r\n * @dev Illegal address that can be frozened.\r\n */\r\ncontract FrozenableToken is Ownable \r\n{\r\n    \r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    event FrozenFunds(address indexed to, bool frozen);\r\n\r\n    modifier whenNotFrozen(address _who) {\r\n      require(!frozenAccount[msg.sender] && !frozenAccount[_who]);\r\n      _;\r\n    }\r\n\r\n    function freezeAccount(address _to, bool _freeze) public onlyOwner {\r\n        require(_to != address(0));\r\n        frozenAccount[_to] = _freeze;\r\n        emit FrozenFunds(_to, _freeze);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Colorbay Token\r\n * @dev Global digital painting asset platform token.\r\n * @author colorbay.org \r\n */\r\ncontract Colorbay is PausableToken, FrozenableToken \r\n{\r\n\r\n    string public name = \"Colorbay Token\";\r\n    string public symbol = \"CLOB\";\r\n    uint256 public decimals = 18;\r\n    uint256 INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\r\n\r\n    /**\r\n     * @dev Initializes the total release\r\n     */\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = totalSupply_;\r\n        emit Transfer(address(0), msg.sender, totalSupply_);\r\n    }\r\n\r\n    /**\r\n     * if ether is sent to this address, send it back.\r\n     */\r\n    function() public payable {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public whenNotFrozen(_to) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotFrozen(_from) returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }        \r\n    \r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\ncontract TokenVesting is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20Basic;\r\n  \r\n    ERC20Basic public token;\r\n\r\n    uint256 public planCount = 0;\r\n    uint256 public payPool = 0;\r\n    \r\n    //A token holder's plan\r\n    struct Plan {\r\n      //beneficiary of tokens after they are released\r\n      address beneficiary; \r\n      \r\n      //Lock start time\r\n      uint256 startTime;\r\n      \r\n      //Lock deadline\r\n      uint256 locktoTime;\r\n      \r\n      //Number of installments of release time\r\n      uint256 releaseStages; \r\n      \r\n      //Release completion time\r\n      uint256 endTime;\r\n      \r\n      //Allocated token balance\r\n      uint256 totalToken;\r\n      \r\n      //Current release quantity\r\n      uint256 releasedAmount;\r\n      \r\n      //Whether the token can be revoked\r\n      bool revocable;\r\n      \r\n      //Whether the token has been revoked\r\n      bool isRevoked;\r\n      \r\n      //Remarks for a plan\r\n      string remark;\r\n    }\r\n    \r\n    //Token holder's plan set\r\n    mapping (address => Plan) public plans;\r\n    \r\n    event Released(address indexed beneficiary, uint256 amount);\r\n    event Revoked(address indexed beneficiary, uint256 refund);\r\n    event AddPlan(address indexed beneficiary, uint256 startTime, uint256 locktoTime, uint256 releaseStages, uint256 endTime, uint256 totalToken, uint256 releasedAmount, bool revocable, bool isRevoked, string remark);\r\n    \r\n    /**\r\n     * @param _token ERC20 token which is being vested\r\n     */\r\n    constructor(address _token) public {\r\n        token = ERC20Basic(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if the payment amount of the contract is sufficient\r\n     */\r\n    modifier checkPayPool(uint256 _totalToken) {\r\n        require(token.balanceOf(this) >= payPool.add(_totalToken));\r\n        payPool = payPool.add(_totalToken);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if the plan exists\r\n     */\r\n    modifier whenPlanExist(address _beneficiary) {\r\n        require(_beneficiary != address(0));\r\n        require(plans[_beneficiary].beneficiary != address(0));\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Add a token holder's plan\r\n     */\r\n    function addPlan(address _beneficiary, uint256 _startTime, uint256 _locktoTime, uint256 _releaseStages, uint256 _endTime, uint256 _totalToken, bool _revocable, string _remark) public onlyOwner checkPayPool(_totalToken) {\r\n        require(_beneficiary != address(0));\r\n        require(plans[_beneficiary].beneficiary == address(0));\r\n\r\n        require(_startTime > 0 && _locktoTime > 0 && _releaseStages > 0 && _totalToken > 0);\r\n        require(_locktoTime > block.timestamp && _locktoTime >= _startTime  && _endTime > _locktoTime);\r\n\r\n        plans[_beneficiary] = Plan(_beneficiary, _startTime, _locktoTime, _releaseStages, _endTime, _totalToken, 0, _revocable, false, _remark);\r\n        planCount = planCount.add(1);\r\n        emit AddPlan(_beneficiary, _startTime, _locktoTime, _releaseStages, _endTime, _totalToken, 0, _revocable, false, _remark);\r\n    }\r\n    \r\n    /**\r\n    * @notice Transfers vested tokens to beneficiary.\r\n    */\r\n    function release(address _beneficiary) public whenPlanExist(_beneficiary) {\r\n\r\n        require(!plans[_beneficiary].isRevoked);\r\n        \r\n        uint256 unreleased = releasableAmount(_beneficiary);\r\n\r\n        if(unreleased > 0 && unreleased <= plans[_beneficiary].totalToken) {\r\n            plans[_beneficiary].releasedAmount = plans[_beneficiary].releasedAmount.add(unreleased);\r\n            payPool = payPool.sub(unreleased);\r\n            token.safeTransfer(_beneficiary, unreleased);\r\n            emit Released(_beneficiary, unreleased);\r\n        }        \r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     */\r\n    function releasableAmount(address _beneficiary) public view whenPlanExist(_beneficiary) returns (uint256) {\r\n        return vestedAmount(_beneficiary).sub(plans[_beneficiary].releasedAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     */\r\n    function vestedAmount(address _beneficiary) public view whenPlanExist(_beneficiary) returns (uint256) {\r\n\r\n        if (block.timestamp <= plans[_beneficiary].locktoTime) {\r\n            return 0;\r\n        } else if (plans[_beneficiary].isRevoked) {\r\n            return plans[_beneficiary].releasedAmount;\r\n        } else if (block.timestamp > plans[_beneficiary].endTime && plans[_beneficiary].totalToken == plans[_beneficiary].releasedAmount) {\r\n            return plans[_beneficiary].totalToken;\r\n        }\r\n        \r\n        uint256 totalTime = plans[_beneficiary].endTime.sub(plans[_beneficiary].locktoTime);\r\n        uint256 totalToken = plans[_beneficiary].totalToken;\r\n        uint256 releaseStages = plans[_beneficiary].releaseStages;\r\n        uint256 endTime = block.timestamp > plans[_beneficiary].endTime ? plans[_beneficiary].endTime : block.timestamp;\r\n        uint256 passedTime = endTime.sub(plans[_beneficiary].locktoTime);\r\n        \r\n        uint256 unitStageTime = totalTime.div(releaseStages);\r\n        uint256 unitToken = totalToken.div(releaseStages);\r\n        uint256 currStage = passedTime.div(unitStageTime);\r\n\r\n        uint256 totalBalance = 0;        \r\n        if(currStage > 0 && releaseStages == currStage && (totalTime % releaseStages) > 0 && block.timestamp < plans[_beneficiary].endTime) {\r\n            totalBalance = unitToken.mul(releaseStages.sub(1));\r\n        } else if(currStage > 0 && releaseStages == currStage) {\r\n            totalBalance = totalToken;\r\n        } else if(currStage > 0) {\r\n            totalBalance = unitToken.mul(currStage);\r\n        }\r\n        return totalBalance;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n     * remain in the contract, the rest are returned to the owner.\r\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n     */\r\n    function revoke(address _beneficiary) public onlyOwner whenPlanExist(_beneficiary) {\r\n\r\n        require(plans[_beneficiary].revocable && !plans[_beneficiary].isRevoked);\r\n        \r\n        //Transfer the attribution token to the beneficiary before revoking.\r\n        release(_beneficiary);\r\n\r\n        uint256 refund = revokeableAmount(_beneficiary);\r\n    \r\n        plans[_beneficiary].isRevoked = true;\r\n        payPool = payPool.sub(refund);\r\n        \r\n        token.safeTransfer(owner, refund);\r\n        emit Revoked(_beneficiary, refund);\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculates the amount that recoverable token.\r\n     */\r\n    function revokeableAmount(address _beneficiary) public view whenPlanExist(_beneficiary) returns (uint256) {\r\n\r\n        uint256 totalBalance = 0;\r\n        \r\n        if(plans[_beneficiary].isRevoked) {\r\n            totalBalance = 0;\r\n        } else if (block.timestamp <= plans[_beneficiary].locktoTime) {\r\n            totalBalance = plans[_beneficiary].totalToken;\r\n        } else {\r\n            totalBalance = plans[_beneficiary].totalToken.sub(vestedAmount(_beneficiary));\r\n        }\r\n        return totalBalance;\r\n    }\r\n    \r\n    /**\r\n     * Current token balance of the contract\r\n     */\r\n    function thisTokenBalance() public view returns (uint256) {\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"planCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"revokeableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"plans\",\"outputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"locktoTime\",\"type\":\"uint256\"},{\"name\":\"releaseStages\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"totalToken\",\"type\":\"uint256\"},{\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"name\":\"revocable\",\"type\":\"bool\"},{\"name\":\"isRevoked\",\"type\":\"bool\"},{\"name\":\"remark\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_locktoTime\",\"type\":\"uint256\"},{\"name\":\"_releaseStages\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_totalToken\",\"type\":\"uint256\"},{\"name\":\"_revocable\",\"type\":\"bool\"},{\"name\":\"_remark\",\"type\":\"string\"}],\"name\":\"addPlan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"locktoTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseStages\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revocable\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"isRevoked\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"AddPlan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000590e2bd2eeec98d22a564679d545cff30577e1f4","Library":"","SwarmSource":"bzzr://c87d91f0c6509a42669a1e0da3a6a3981b023a89666e0698a3e4d654362f8c3e"}]}