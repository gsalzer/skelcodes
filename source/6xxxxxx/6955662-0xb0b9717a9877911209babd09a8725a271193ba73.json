{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n\r\n  /// @dev counter to allow mutex lock with only one SSTORE operation\r\n  uint256 private _guardCounter;\r\n\r\n  constructor() internal {\r\n    // The counter starts at one to prevent changing it from zero to a non-zero\r\n    // value, which is a more expensive operation.\r\n    _guardCounter = 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    _guardCounter += 1;\r\n    uint256 localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter);\r\n  }\r\n\r\n}\r\n\r\ncontract Presale is Ownable, ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n\r\n  struct ReferralData {\r\n    uint256 referrals; // number of referrals\r\n    uint256 bonusSum;  // sum of all bonuses - this is just for showing the total amount - for payouts the referralBonuses mapping will be used\r\n    address[] children; // child referrals\r\n  }\r\n\r\n  uint256 public currentPrice = 0;\r\n\r\n  bool public isActive = false;\r\n\r\n  uint256 public currentDiscountSum = 0;                       // current sum of all discounts (have to stay in the contract for payout)\r\n  uint256 public overallDiscountSum = 0;                       // sum of all discounts given since beginning\r\n\r\n  bool public referralsEnabled = true;                      // are referrals enabled in general\r\n\r\n  mapping(address => uint) private referralBonuses;\r\n\r\n  uint256 public referralBonusMaxDepth = 3;                                  // used to ensure the max depth\r\n  mapping(uint256 => uint) public currentReferralCommissionPercentages;      // commission levels\r\n  uint256 public currentReferralBuyerDiscountPercentage = 5;                 // discount percentage if a buyer uses a valid affiliate link\r\n\r\n  mapping(address => address) private parentReferrals;    // parent relationship\r\n  mapping(address => ReferralData) private referralData;  // referral data for this address\r\n  mapping(address => uint) private nodesBought;           // number of bought nodes\r\n\r\n  event MasternodeSold(address buyer, uint256 price, string coinsTargetAddress, bool referral);\r\n  event MasternodePriceChanged(uint256 price);\r\n  event ReferralAdded(address buyer, address parent);\r\n\r\n  constructor() public {\r\n    currentReferralCommissionPercentages[0] = 10;\r\n    currentReferralCommissionPercentages[1] = 5;\r\n    currentReferralCommissionPercentages[2] = 3;\r\n  }\r\n\r\n  function () external payable {\r\n      // nothing to do\r\n  }\r\n\r\n  function buyMasternode(string memory coinsTargetAddress) public nonReentrant payable {\r\n    _buyMasternode(coinsTargetAddress, false, owner());\r\n  }\r\n\r\n  function buyMasternodeReferral(string memory coinsTargetAddress, address referral) public nonReentrant payable {\r\n    _buyMasternode(coinsTargetAddress, referralsEnabled, referral);\r\n  }\r\n\r\n  function _buyMasternode(string memory coinsTargetAddress, bool useReferral, address referral) internal {\r\n    require(isActive, \"Buying is currently deactivated.\");\r\n    require(currentPrice > 0, \"There was no MN price set so far.\");\r\n\r\n    uint256 nodePrice = currentPrice;\r\n\r\n    // nodes can be bought cheaper if the user uses a valid referral address\r\n    if (useReferral && isValidReferralAddress(referral)) {\r\n      nodePrice = getDiscountedNodePrice();\r\n    }\r\n\r\n    require(msg.value >= nodePrice, \"Sent amount of ETH was too low.\");\r\n\r\n    // check target address\r\n    uint256 length = bytes(coinsTargetAddress).length;\r\n    require(length >= 30 && length <= 42 , \"Coins target address invalid\");\r\n\r\n    if (useReferral && isValidReferralAddress(referral)) {\r\n\r\n      require(msg.sender != referral, \"You can't be your own referral.\");\r\n\r\n      // set parent/child relations (only if there is no connection/parent yet available)\r\n      // --> this also means that a referral structure can't be changed\r\n      address parent = parentReferrals[msg.sender];\r\n      if (referralData[parent].referrals == 0) {\r\n        referralData[referral].referrals = referralData[referral].referrals.add(1);\r\n        referralData[referral].children.push(msg.sender);\r\n        parentReferrals[msg.sender] = referral;\r\n      }\r\n\r\n      // iterate over commissionLevels and calculate commissions\r\n      uint256 discountSumForThisPayment = 0;\r\n      address currentReferral = referral;\r\n\r\n      for (uint256 level=0; level < referralBonusMaxDepth; level++) {\r\n        // only apply discount if referral address is valid (or as long we can step up the hierarchy)\r\n        if(isValidReferralAddress(currentReferral)) {\r\n\r\n          require(msg.sender != currentReferral, \"Invalid referral structure (you can't be in your own tree)\");\r\n\r\n          // do not take node price here since it could be already dicounted\r\n          uint256 referralBonus = currentPrice.div(100).mul(currentReferralCommissionPercentages[level]);\r\n\r\n          // set payout bonus\r\n          referralBonuses[currentReferral] = referralBonuses[currentReferral].add(referralBonus);\r\n\r\n          // set stats/counters\r\n          referralData[currentReferral].bonusSum = referralData[currentReferral].bonusSum.add(referralBonus);\r\n          discountSumForThisPayment = discountSumForThisPayment.add(referralBonus);\r\n\r\n          // step up one hierarchy level\r\n          currentReferral = parentReferrals[currentReferral];\r\n        } else {\r\n          // we can't find any parent - stop hierarchy calculation\r\n          break;\r\n        }\r\n      }\r\n\r\n      require(discountSumForThisPayment < nodePrice, \"Wrong calculation of bonuses/discounts - would be higher than the price itself\");\r\n\r\n      currentDiscountSum = currentDiscountSum.add(discountSumForThisPayment);\r\n      overallDiscountSum = overallDiscountSum.add(discountSumForThisPayment);\r\n    }\r\n\r\n    // set the node bought counter\r\n    nodesBought[msg.sender] = nodesBought[msg.sender].add(1);\r\n\r\n    emit MasternodeSold(msg.sender, currentPrice, coinsTargetAddress, useReferral);\r\n  }\r\n\r\n  function setActiveState(bool active) public onlyOwner {\r\n    isActive = active;\r\n  }\r\n\r\n  function setPrice(uint256 price) public onlyOwner {\r\n    require(price > 0, \"Price has to be greater than zero.\");\r\n\r\n    currentPrice = price;\r\n\r\n    emit MasternodePriceChanged(price);\r\n  }\r\n\r\n  function setReferralsEnabledState(bool _referralsEnabled) public onlyOwner {\r\n    referralsEnabled = _referralsEnabled;\r\n  }\r\n\r\n  function setReferralCommissionPercentageLevel(uint256 level, uint256 percentage) public onlyOwner {\r\n    require(percentage >= 0 && percentage <= 20, \"Percentage has to be between 0 and 20.\");\r\n    require(level >= 0 && level < referralBonusMaxDepth, \"Invalid depth level\");\r\n\r\n    currentReferralCommissionPercentages[level] = percentage;\r\n  }\r\n\r\n  function setReferralBonusMaxDepth(uint256 depth) public onlyOwner {\r\n    require(depth >= 0 && depth <= 10, \"Referral bonus depth too high.\");\r\n\r\n    referralBonusMaxDepth = depth;\r\n  }\r\n\r\n  function setReferralBuyerDiscountPercentage(uint256 percentage) public onlyOwner {\r\n    require(percentage >= 0 && percentage <= 20, \"Percentage has to be between 0 and 20.\");\r\n\r\n    currentReferralBuyerDiscountPercentage = percentage;\r\n  }\r\n\r\n  function withdraw(uint256 amount) public onlyOwner {\r\n    owner().transfer(amount);\r\n  }\r\n\r\n  function withdrawReferralBonus() public nonReentrant returns (bool) {\r\n    uint256 amount = referralBonuses[msg.sender];\r\n\r\n    if (amount > 0) {\r\n        referralBonuses[msg.sender] = 0;\r\n        currentDiscountSum = currentDiscountSum.sub(amount);\r\n\r\n        if (!msg.sender.send(amount)) {\r\n            referralBonuses[msg.sender] = amount;\r\n            currentDiscountSum = currentDiscountSum.add(amount);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function checkReferralBonusHeight(address addr) public view returns (uint) {\r\n      return referralBonuses[addr];\r\n  }\r\n\r\n  function getNrOfReferrals(address addr) public view returns (uint) {\r\n      return referralData[addr].referrals;\r\n  }\r\n\r\n  function getReferralBonusSum(address addr) public view returns (uint) {\r\n      return referralData[addr].bonusSum;\r\n  }\r\n\r\n  function getReferralChildren(address addr) public view returns (address[] memory) {\r\n      return referralData[addr].children;\r\n  }\r\n\r\n  function getReferralChild(address addr, uint256 idx) public view returns (address) {\r\n      return referralData[addr].children[idx];\r\n  }\r\n\r\n  function isValidReferralAddress(address addr) public view returns (bool) {\r\n      return nodesBought[addr] > 0;\r\n  }\r\n\r\n  function getNodesBoughtCountForAddress(address addr) public view returns (uint256) {\r\n      return nodesBought[addr];\r\n  }\r\n\r\n  function getDiscountedNodePrice() public view returns (uint256) {\r\n      return currentPrice.sub(currentPrice.div(100).mul(currentReferralBuyerDiscountPercentage));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setReferralCommissionPercentageLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentReferralCommissionPercentages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referralsEnabled\",\"type\":\"bool\"}],\"name\":\"setReferralsEnabledState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReferralBonusSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReferralChildren\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getReferralChild\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkReferralBonusHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getNrOfReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setReferralBuyerDiscountPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralBonusMaxDepth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDiscountedNodePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReferralBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"overallDiscountSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isValidReferralAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDiscountSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinsTargetAddress\",\"type\":\"string\"}],\"name\":\"buyMasternode\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinsTargetAddress\",\"type\":\"string\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyMasternodeReferral\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReferralBuyerDiscountPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setActiveState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralsEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depth\",\"type\":\"uint256\"}],\"name\":\"setReferralBonusMaxDepth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getNodesBoughtCountForAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coinsTargetAddress\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"referral\",\"type\":\"bool\"}],\"name\":\"MasternodeSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MasternodePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parent\",\"type\":\"address\"}],\"name\":\"ReferralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://589bb6ef58be172fa069bb37937c370a7de1bddb2fa26af0947a86651d97da73"}]}