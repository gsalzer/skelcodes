{"status":"1","message":"OK","result":[{"SourceCode":"// mock class using ERC20\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract EdxToken is ERC20 {\r\n  using SafeMath for uint256;\r\n\tstring public name = \"Enterprise Decentralized Token\";\r\n\tstring public symbol = \"EDX\";\r\n\tuint8 public decimals = 18;\r\n\r\n\tstruct VestInfo { // Struct\r\n\t\t\tuint256 vested;\r\n\t\t\tuint256 remain;\r\n\t}\r\n\tstruct CoinInfo {\r\n\t\tuint256 bsRemain;\r\n\t\tuint256 tmRemain;\r\n\t\tuint256 peRemain;\r\n\t\tuint256 remains;\r\n\t}\r\n\tstruct GrantInfo {\r\n\t\taddress holder;\r\n\t\tuint256 remain;\r\n\t}\r\n  mapping (address => uint256) private _balances;\t\t //balance of transferrable\r\n  mapping (address => VestInfo) private _bs_balance; //info of vested\r\n  mapping (address => VestInfo) private _pe_balance;\r\n  mapping (address => VestInfo) private _tm_balance;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint    _releaseTime;\r\n  bool    mainnet;\r\n  uint256 private _totalSupply;\r\n  address _owner;\r\n\tGrantInfo _bsholder;\r\n\tGrantInfo _peholder;\r\n\tGrantInfo _tmholder;\r\n  CoinInfo supplies;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Mint(uint8 mtype,uint256 value);\r\n  event Burn(uint8 mtype,uint256 value);\r\n\tevent Invest( address indexed account, uint indexed mtype, uint256 vested);\r\n  event Migrate(address indexed account,uint8 indexed mtype,uint256 vested,uint256 remain);\r\n\r\n  constructor() public {\r\n\t\t// 450 million , other 1.05 billion will be minted\r\n\t\t_totalSupply = 450*(10**6)*(10**18);\r\n\t\t_owner = msg.sender;\r\n\r\n\t\tsupplies.bsRemain = 80*1000000*(10**18);\r\n\t\tsupplies.peRemain = 200*1000000*(10**18);\r\n\t\tsupplies.tmRemain = 75*1000000*(10**18);\r\n\t\tsupplies.remains =  95*1000000*(10**18);\r\n\t\t//_balances[_owner] = supplies.remains;\r\n\t\tmainnet = false;\r\n\t}\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\tfunction getSupplies() public view returns (uint256,uint256,uint256,uint256) {\r\n\t    require(msg.sender == _owner);\r\n\r\n\t    return (supplies.remains,supplies.bsRemain,supplies.peRemain,supplies.tmRemain);\r\n\r\n\t}\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n\t\tuint256 result = 0;\r\n\t\tresult = result.add(_balances[owner]).add(_bs_balance[owner].remain).add(_pe_balance[owner].remain).add(_tm_balance[owner].remain);\r\n\r\n    return result;\r\n  }\r\n    function  detailedBalance(address account, uint dtype) public view returns(uint256,uint256) {\r\n\r\n        if (dtype == 0 || dtype == 1) {\r\n\t\t\t\t\t  uint256 result = balanceOf(account);\r\n\t\t\t\t\t\tuint256 locked = getBSBalance(account).add(getPEBalance(account)).add(getTMBalance(account));\r\n\t\t\t\t\t\tif(dtype == 0){\r\n\t\t\t\t\t\t   return (result,locked);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t return (result,result.sub(locked));\r\n\t\t\t\t\t\t}\r\n\r\n        } else if( dtype ==  2 ) {\r\n            return  (_bs_balance[account].vested,getBSBalance(account));\r\n        }else if (dtype ==  3){\r\n\t\t\t\t\t  return (_pe_balance[account].vested,getPEBalance(account));\r\n\t\t}else if (dtype ==  4){\r\n\t\t\t\t\t  return (_tm_balance[account].vested,getTMBalance(account));\r\n\t\t}else {\r\n\t\t    return (0,0);\r\n\t\t }\r\n\r\n    }\r\n\t//set rol for account\r\n\tfunction grantRole(address account,uint8 mtype,uint256 amount) public{\r\n\t\trequire(msg.sender == _owner);\r\n\r\n\t\t\tif(_bsholder.holder == account) {\r\n\t\t\t\t_bsholder.holder = address(0);\r\n\t\t\t}\r\n\t\t\tif(_peholder.holder == account){\r\n\t\t\t\t_peholder.holder = address(0);\r\n\t\t\t}\r\n\t\t\tif(_tmholder.holder == account){\r\n\t\t\t\t\t_tmholder.holder = address(0);\r\n\t\t\t}\r\n\t\t if(mtype == 2) {\r\n\t\t\t require(supplies.bsRemain >= amount);\r\n\t\t\t _bsholder.holder = account;\r\n\t\t\t _bsholder.remain = amount;\r\n\r\n\t\t}else if(mtype == 3){\r\n\t\t\trequire(supplies.peRemain >= amount);\r\n\t\t\t_peholder.holder = account;\r\n\t\t\t_peholder.remain = amount;\r\n\t\t}else if(mtype == 4){\r\n\t\t\trequire(supplies.tmRemain >= amount);\r\n\t\t\t_tmholder.holder = account;\r\n\t\t\t_tmholder.remain = amount;\r\n\t\t}\r\n\t}\r\n\tfunction roleInfo(uint8 mtype)  public view returns(address,uint256) {\r\n\t\tif(mtype == 2) {\r\n\t\t\treturn (_bsholder.holder,_bsholder.remain);\r\n\t\t} else if(mtype == 3) {\r\n\t\t\treturn (_peholder.holder,_peholder.remain);\r\n\t\t}else if(mtype == 4) {\r\n\t\t\treturn (_tmholder.holder,_tmholder.remain);\r\n\t\t}else {\r\n\t\t\treturn (address(0),0);\r\n\t\t}\r\n\t}\r\n\tfunction  transferBasestone(address account, uint256 value) public {\r\n\t\trequire(msg.sender == _owner);\r\n\t\t_transferBasestone(account,value);\r\n\r\n\t}\r\n\tfunction  _transferBasestone(address account, uint256 value) internal {\r\n\r\n\t\trequire(supplies.bsRemain > value);\r\n\t\tsupplies.bsRemain = supplies.bsRemain.sub(value);\r\n\t\t_bs_balance[account].vested = _bs_balance[account].vested.add(value);\r\n\t\t_bs_balance[account].remain = _bs_balance[account].remain.add(value);\r\n\r\n\t}\r\n\tfunction  transferPE(address account, uint256 value) public {\r\n\t\trequire(msg.sender == _owner);\r\n\t\t_transferPE(account,value);\r\n\t}\r\n\tfunction  _transferPE(address account, uint256 value) internal {\r\n\t\trequire(supplies.peRemain > value);\r\n\t\tsupplies.peRemain = supplies.peRemain.sub(value);\r\n\t\t_pe_balance[account].vested = _pe_balance[account].vested.add(value);\r\n\t\t_pe_balance[account].remain = _pe_balance[account].remain.add(value);\r\n\t}\r\n\tfunction  transferTM(address account, uint256 value) public {\r\n\t\trequire(msg.sender == _owner);\r\n\t\t_transferTM(account,value);\r\n\t}\r\n\tfunction  _transferTM(address account, uint256 value) internal {\r\n\t\trequire(supplies.tmRemain > value);\r\n\t\tsupplies.tmRemain = supplies.tmRemain.sub(value);\r\n\t\t_tm_balance[account].vested = _tm_balance[account].vested.add(value);\r\n\t\t_tm_balance[account].remain = _tm_balance[account].remain.add(value);\r\n\t}\r\n\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n\t\tif(msg.sender == _owner){\r\n\t\t\trequire(supplies.remains >= value);\r\n\t\t\trequire(to != address(0));\r\n\t\t\tsupplies.remains = supplies.remains.sub(value);\r\n\t\t\t_balances[to] = _balances[to].add(value);\r\n\t\t\temit Transfer(address(0), to, value);\r\n\t\t}else if(msg.sender == _bsholder.holder ){\r\n\t\t\trequire(_bsholder.remain >= value);\r\n\t\t\t_bsholder.remain = _bsholder.remain.sub(value);\r\n\t\t\t_transferBasestone(to,value);\r\n\r\n\t\t}else if(msg.sender == _peholder.holder) {\r\n\t\t\trequire(_peholder.remain >= value);\r\n\t\t\t_peholder.remain = _peholder.remain.sub(value);\r\n\t\t\t_transferPE(to,value);\r\n\r\n\t\t}else if(msg.sender == _tmholder.holder){\r\n\t\t\trequire(_tmholder.remain >= value);\r\n\t\t\t_tmholder.remain = _tmholder.remain.sub(value);\r\n\t\t\t_transferTM(to,value);\r\n\r\n\t\t}else{\r\n    \t_transfer(msg.sender, to, value);\r\n\t\t}\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n    _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n    _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n\r\n\t\t_moveBSBalance(from);\r\n\t\t_movePEBalance(from);\r\n\t\t_moveTMBalance(from);\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n\r\n\r\n//上所，开始分发\r\n\tfunction release() public {\r\n\t\trequire(msg.sender == _owner);\r\n\t\tif(_releaseTime == 0) {\r\n\t\t\t_releaseTime = now;\r\n\t\t}\r\n\t}\r\n\tfunction getBSBalance(address account) public view returns(uint256){\r\n\t\tuint  elasped = now - _releaseTime;\r\n\t\tuint256 shouldRemain = _bs_balance[account].remain;\r\n\t\tif( _releaseTime !=  0 && now > _releaseTime && _bs_balance[account].remain > 0){\r\n\r\n\t\t\tif(elasped < 180 days) { //\r\n\t\t\t\tshouldRemain = _bs_balance[account].vested.mul(9).div(10);\r\n\t\t\t} else if(elasped < 420 days) {\r\n\t\t\t\t\tshouldRemain = _bs_balance[account].vested .mul(6).div(10);\r\n\t\t\t} else if( elasped < 720 days) {\r\n\t\t\t\t\tshouldRemain = _bs_balance[account].vested .mul(3).div(10);\r\n\t\t\t}else {\r\n\t\t\t\tshouldRemain = 0;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\treturn shouldRemain;\r\n\t}\r\n\t//基石代币释放\r\n\tfunction _moveBSBalance(address account) internal {\r\n\t\tuint256 shouldRemain = getBSBalance(account);\r\n\t\tif(_bs_balance[account].remain > shouldRemain) {\r\n\t\t\tuint256 toMove = _bs_balance[account].remain.sub(shouldRemain);\r\n\t\t\t_bs_balance[account].remain = shouldRemain;\r\n\t\t\t_balances[account] = _balances[account].add(toMove);\r\n\t\t}\r\n\t}\r\n\tfunction getPEBalance(address account) public view returns(uint256) {\r\n\t\tuint  elasped = now - _releaseTime;\r\n\t\tuint256 shouldRemain = _pe_balance[account].remain;\r\n\t\tif( _releaseTime !=  0 && _pe_balance[account].remain > 0){\r\n\r\n\r\n\t\t\tif(elasped < 150 days) { //首先释放10%\r\n\t\t\t\tshouldRemain = _pe_balance[account].vested.mul(9).div(10);\r\n\r\n\t\t\t} else if(elasped < 330 days) {//5-11个月\r\n\t\t\t\t\tshouldRemain = _pe_balance[account].vested .mul(6).div(10);\r\n\t\t\t} else if( elasped < 540 days) {//11-18个月\r\n\t\t\t\t\tshouldRemain = _pe_balance[account].vested .mul(3).div(10);\r\n\t\t\t} else {\r\n\t\t\t\t\tshouldRemain = 0;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\treturn shouldRemain;\r\n\t}\r\n\t//私募代币释放\r\n\tfunction _movePEBalance(address account) internal {\r\n\t\tuint256 shouldRemain = getPEBalance(account);\r\n\t\tif(_pe_balance[account].remain > shouldRemain) {\r\n\t\t\tuint256 toMove = _pe_balance[account].remain.sub(shouldRemain);\r\n\t\t\t_pe_balance[account].remain = shouldRemain;\r\n\t\t\t_balances[account] = _balances[account].add(toMove);\r\n\t\t}\r\n\t}\r\n\tfunction getTMBalance(address account ) public view returns(uint256){\r\n\t\tuint  elasped = now - _releaseTime;\r\n\t\tuint256 shouldRemain = _tm_balance[account].remain;\r\n\t\tif( _releaseTime !=  0 && _tm_balance[account].remain > 0){\r\n\t\t\t//三个月起，每天释放千分之一，\r\n\t\t\tif(elasped < 90 days) { //release 10%\r\n\t\t\t\tshouldRemain = _tm_balance[account].vested;\r\n\t\t\t} else {\r\n\t\t\t\t\t//release other 90% linearly\r\n\t\t\t\t\telasped = elasped / 1 days;\r\n\t\t\t\t\tif(elasped <= 1090){\r\n\t\t\t\t\t\t\tshouldRemain = _tm_balance[account].vested.mul(1090-elasped).div(1000);\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\tshouldRemain = 0;\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn shouldRemain;\r\n\t}\r\n\tfunction _moveTMBalance(address account ) internal {\r\n\t\tuint256 shouldRemain = getTMBalance(account);\r\n\t\tif(_tm_balance[account].remain > shouldRemain) {\r\n\t\t\tuint256 toMove = _tm_balance[account].remain.sub(shouldRemain);\r\n\t\t\t_tm_balance[account].remain = shouldRemain;\r\n\t\t\t_balances[account] = _balances[account].add(toMove);\r\n\t\t}\r\n\t}\r\n\t//增发\r\n function _mint(uint256 value) public {\r\n\t require(msg.sender == _owner);\r\n\t require(mainnet == false); //主网上线后冻结代币\r\n\t _totalSupply = _totalSupply.add(value);\r\n\t //增发的部分总是可以自由转移的\r\n\t supplies.remains = supplies.remains.add(value);\r\n\t \t\temit Mint(1,value);\r\n }\r\n //增发\r\n function _mintBS(uint256 value) public {\r\n\trequire(msg.sender == _owner);\r\n\t\trequire(mainnet == false); //主网上线后冻结代币\r\n\t_totalSupply = _totalSupply.add(value);\r\n\t//增发的部分总是可以自由转移的\r\n\tsupplies.bsRemain = supplies.bsRemain.add(value);\r\n\t\t\temit Mint(2,value);\r\n }\r\n //增发\r\n function _mintPE(uint256 value) public {\r\n\trequire(msg.sender == _owner);\r\n\t\trequire(mainnet == false); //主网上线后冻结代币\r\n\t_totalSupply = _totalSupply.add(value);\r\n\t//增发的部分总是可以自由转移的\r\n\tsupplies.peRemain = supplies.peRemain.add(value);\r\n\t\temit Mint(3,value);\r\n }\r\n //销毁\r\n function _burn(uint256 value) public {\r\n\trequire(msg.sender == _owner);\r\n\trequire(mainnet == false); //主网上线后冻结代币\r\n\trequire(supplies.remains >= value);\r\n\t_totalSupply = _totalSupply.sub(value);\r\n\tsupplies.remains = supplies.remains.sub(value);\r\n\temit Burn(0,value);\r\n }\r\n  //销毁团队的\r\n function _burnTM(uint256 value) public {\r\n\trequire(msg.sender == _owner);\r\n\trequire(mainnet == false); //主网上线后冻结代币\r\n\trequire(supplies.remains >= value);\r\n\t_totalSupply = _totalSupply.sub(value);\r\n\tsupplies.tmRemain = supplies.tmRemain.sub(value);\r\n  emit Burn(3,value);\r\n }\r\n //主网上线，允许迁移代币\r\n function startupMainnet() public {\r\n     require(msg.sender == _owner);\r\n\r\n     mainnet = true;\r\n }\r\n //migrate to mainnet, erc20 will be destoryed, and coin will be created at same address on mainnet\r\n function migrate() public {\r\n     //only runnable after mainnet started up\r\n     require(mainnet == true);\r\n     require(msg.sender != _owner);\r\n     uint256 value;\r\n     if( _balances[msg.sender] > 0) {\r\n         value = _balances[msg.sender];\r\n         _balances[msg.sender] = 0;\r\n         emit Migrate(msg.sender,0,value,value);\r\n     }\r\n     if( _bs_balance[msg.sender].remain > 0) {\r\n         value = _bs_balance[msg.sender].remain;\r\n         _bs_balance[msg.sender].remain = 0;\r\n         emit Migrate(msg.sender,1,_bs_balance[msg.sender].vested,value);\r\n     }\r\n     if( _pe_balance[msg.sender].remain > 0) {\r\n         value = _pe_balance[msg.sender].remain;\r\n         _pe_balance[msg.sender].remain = 0;\r\n         emit Migrate(msg.sender,2,_pe_balance[msg.sender].vested,value);\r\n     }\r\n     if( _tm_balance[msg.sender].remain > 0){\r\n          value = _tm_balance[msg.sender].remain;\r\n         _tm_balance[msg.sender].remain = 0;\r\n         emit Migrate(msg.sender,3,_pe_balance[msg.sender].vested,value);\r\n     }\r\n\r\n }\r\n //团队的奖励，分批逐步发送，可以撤回未发放的\r\n\tfunction revokeTMBalance(address account) public {\r\n\t        require(msg.sender == _owner);\r\n\t\t\tif(_tm_balance[account].remain > 0  && _tm_balance[account].vested >= _tm_balance[account].remain ){\r\n\t\t\t\t_tm_balance[account].vested = _tm_balance[account].vested.sub(_tm_balance[account].remain);\r\n\t\t\t\t_tm_balance[account].remain = 0;\r\n\t\t\t\tsupplies.tmRemain = supplies.tmRemain.add(_tm_balance[account].remain);\r\n\t\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_mintPE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startupMainnet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"mtype\",\"type\":\"uint8\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"grantRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"mtype\",\"type\":\"uint8\"}],\"name\":\"roleInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPEBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferTM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTMBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"dtype\",\"type\":\"uint256\"}],\"name\":\"detailedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_burnTM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferPE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSupplies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferBasestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeTMBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_mintBS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBSBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"mtype\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"mtype\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"mtype\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vested\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"mtype\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"vested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"remain\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EdxToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://155ebae11c25b362b236f48ab1419c414e3972d3f264732c5329a557c1445a74"}]}