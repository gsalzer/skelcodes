{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title Contractus contract\r\n * Funds distribution:\r\n * 90% - deposit funds\r\n * 3%  - support\r\n * 7% -  marketing\r\n * Allows you to receive income up to 2 deposit amounts and above if you continue to keep the deposit. \r\n * You can receive income 200% or more only once. In this case the deposit is closed. \r\n * Thus, the longer you keep the deposit open and do not withdraw your income, the more your potential gain becomes.\r\n *Payments are terminated after the completion of 200%. To re-enter the game, you must replenish your deposit.\r\n * You can receive your income at any time, based on a 2.5% per day calculation to 200%\r\n * \r\n * This contract is a game - a lottery, in which prizes - payments on the deposit. \r\n * The contract is not a pyramid, since all deposits have a finite period of validity of payments. \r\n * You should not use this contract for investment purposes. Only for the game - lottery.\r\n * By sending funds to this contract, you should understand that it is possible that the balance \r\n * of the contract will not be enough to pay all players. \r\n * Contract developers have not left themselves any functions for the withdrawal of players' funds, \r\n * but this is just a game - remember this.\r\n */\r\n\r\n\r\n\r\npragma solidity ^0.4.24;\r\ncontract Contractus {\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => uint256) public timestamp;\r\n    mapping (address => uint256) public receiveFunds;\r\n    uint256 internal totalFunds;\r\n    \r\n    address support;\r\n    address marketing;\r\n\r\n    constructor() public {\r\n        support = msg.sender;\r\n        marketing = 0x53B83d7be0D19b9935363Af1911b7702Cc73805e;\r\n    }\r\n\r\n    function showTotal() public view returns (uint256) {\r\n        return totalFunds;\r\n    }\r\n\r\n    function showProfit(address _investor) public view returns (uint256) {\r\n        return receiveFunds[_investor];\r\n    }\r\n\r\n    function showBalance(address _investor) public view returns (uint256) {\r\n        return balances[_investor];\r\n    }\r\n\r\n    /**\r\n     * The function will show you whether your deposit will remain in the game after the withdrawal of revenue or close after reaching 200%\r\n     * A value of \"true\" means that your deposit will be closed after withdrawal of funds\r\n     */\r\n    function isLastWithdraw(address _investor) public view returns(bool) {\r\n        address investor = _investor;\r\n        uint256 profit = calcProfit(investor);\r\n        bool result = !((balances[investor] == 0) || (balances[investor] * 2 > receiveFunds[investor] + profit));\r\n        return result;\r\n    }\r\n\r\n    function calcProfit(address _investor) internal view returns (uint256) {\r\n        uint256 profit = balances[_investor]*25/1000*(now-timestamp[_investor])/86400; // a seconds in one day\r\n        return profit;\r\n    }\r\n\r\n\r\n    function () external payable {\r\n        require(msg.value > 0,\"Zero. Access denied.\");\r\n        totalFunds +=msg.value;\r\n        address investor = msg.sender;\r\n        support.transfer(msg.value * 3 / 100);\r\n        marketing.transfer(msg.value * 7 / 100);\r\n\r\n        uint256 profit = calcProfit(investor);\r\n        investor.transfer(profit);\r\n\r\n        if (isLastWithdraw(investor)){\r\n            /**\r\n             * @title Closing of the deposit\r\n             * \r\n             *  You have received 200% (or more) of your contribution.\r\n             *  Under the terms of the game, your contribution is closed, the statistics are reset.\r\n             *  You can start playing again. We wish you good luck!\r\n             */\r\n            balances[investor] = 0;\r\n            receiveFunds[investor] = 0;\r\n           \r\n        }\r\n        else {\r\n        receiveFunds[investor] += profit;\r\n        balances[investor] += msg.value;\r\n            \r\n        }\r\n        timestamp[investor] = now;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"showTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"showProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"isLastWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"showBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiveFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Contractus","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5e99e3f5e87e1d72bf5cfaed6dc6875fbb0ab3c014a5889dd88ab841eee45b80"}]}