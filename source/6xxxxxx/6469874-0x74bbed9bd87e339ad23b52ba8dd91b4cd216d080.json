{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/HarbergerTaxable.sol\r\n\r\ncontract HarbergerTaxable is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public taxPercentage;\r\n  address public taxCollector;\r\n  address public ethFoundation;\r\n  uint256 public currentFoundationContribution;\r\n  uint256 public ethFoundationPercentage;\r\n  uint256 public taxCollectorPercentage;\r\n\r\n  event UpdateCollector(address indexed newCollector);\r\n  event UpdateTaxPercentages(uint256 indexed newEFPercentage, uint256 indexed newTaxCollectorPercentage);\r\n\r\n  constructor(uint256 _taxPercentage, address _taxCollector) public {\r\n    taxPercentage = _taxPercentage;\r\n    taxCollector = _taxCollector;\r\n    ethFoundation = 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359;\r\n    ethFoundationPercentage = 20;\r\n    taxCollectorPercentage = 80;\r\n  }\r\n\r\n  // The total self-assessed value of user's assets\r\n  mapping(address => uint256) public valueHeld;\r\n\r\n  // Timestamp for the last time taxes were deducted from a user's account\r\n  mapping(address => uint256) public lastPaidTaxes;\r\n\r\n  // The amount of ETH a user can withdraw at the last time taxes were deducted from their account\r\n  mapping(address => uint256) public userBalanceAtLastPaid;\r\n\r\n  /**\r\n   * Modifiers\r\n   */\r\n\r\n  modifier hasPositveBalance(address user) {\r\n    require(userHasPositveBalance(user) == true, \"User has a negative balance\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Public functions\r\n   */\r\n\r\n  function updateCollector(address _newCollector)\r\n    public\r\n    onlyOwner\r\n  {\r\n    require(_newCollector != address(0));\r\n    taxCollector == _newCollector;\r\n    emit UpdateCollector(_newCollector);\r\n  }\r\n\r\n  function updateTaxPercentages(uint256 _newEFPercentage, uint256 _newTaxCollectorPercentage)\r\n    public\r\n    onlyOwner\r\n  {\r\n    require(_newEFPercentage < 100);\r\n    require(_newTaxCollectorPercentage < 100);\r\n    require(_newEFPercentage.add(_newTaxCollectorPercentage) == 100);\r\n\r\n    ethFoundationPercentage = _newEFPercentage;\r\n    taxCollectorPercentage = _newTaxCollectorPercentage;\r\n    emit UpdateTaxPercentages(_newEFPercentage, _newTaxCollectorPercentage);\r\n  }\r\n\r\n  function addFunds()\r\n    public\r\n    payable\r\n  {\r\n    userBalanceAtLastPaid[msg.sender] = userBalanceAtLastPaid[msg.sender].add(msg.value);\r\n  }\r\n\r\n  function withdraw(uint256 value) public onlyOwner {\r\n    // Settle latest taxes\r\n    require(transferTaxes(msg.sender, false), \"User has a negative balance\");\r\n\r\n    // Subtract the withdrawn value from the user's account\r\n    userBalanceAtLastPaid[msg.sender] = userBalanceAtLastPaid[msg.sender].sub(value);\r\n\r\n    // Transfer remaining balance to msg.sender\r\n    msg.sender.transfer(value);\r\n  }\r\n\r\n  function userHasPositveBalance(address user) public view returns (bool) {\r\n    return userBalanceAtLastPaid[user] >= _taxesDue(user);\r\n  }\r\n\r\n  function userBalance(address user) public view returns (uint256) {\r\n    return userBalanceAtLastPaid[user].sub(_taxesDue(user));\r\n  }\r\n\r\n  // Transfers the taxes a user owes from their account to the taxCollector and resets lastPaidTaxes to now\r\n  function transferTaxes(address user, bool isInAuction) public returns (bool) {\r\n\r\n    if (isInAuction) {\r\n      return true;\r\n    }\r\n\r\n    uint256 taxesDue = _taxesDue(user);\r\n\r\n    // Make sure the user has enough funds to pay the taxesDue\r\n    if (userBalanceAtLastPaid[user] < taxesDue) {\r\n        return false;\r\n    }\r\n\r\n    // Transfer taxes due from this contract to the tax collector\r\n    _payoutTaxes(taxesDue);\r\n    // Update the user's lastPaidTaxes\r\n    lastPaidTaxes[user] = now;\r\n    // subtract the taxes paid from the user's balance\r\n    userBalanceAtLastPaid[user] = userBalanceAtLastPaid[user].sub(taxesDue);\r\n\r\n    return true;\r\n  }\r\n\r\n  function payoutEF()\r\n    public\r\n  {\r\n    uint256 uincornsRequirement = 2.014 ether;\r\n    require(currentFoundationContribution >= uincornsRequirement);\r\n\r\n    currentFoundationContribution = currentFoundationContribution.sub(uincornsRequirement);\r\n    ethFoundation.transfer(uincornsRequirement);\r\n  }\r\n\r\n  /**\r\n   * Internal functions\r\n   */\r\n\r\n  function _payoutTaxes(uint256 _taxesDue)\r\n    internal\r\n  {\r\n    uint256 foundationContribution = _taxesDue.mul(ethFoundationPercentage).div(100);\r\n    uint256 taxCollectorContribution = _taxesDue.mul(taxCollectorPercentage).div(100);\r\n\r\n    currentFoundationContribution += foundationContribution;\r\n\r\n    taxCollector.transfer(taxCollectorContribution);\r\n  }\r\n\r\n  // Calculate taxes due since the last time they had taxes deducted\r\n  // from their account or since they bought their first token.\r\n  function _taxesDue(address user) internal view returns (uint256) {\r\n    // Make sure user owns tokens\r\n    if (lastPaidTaxes[user] == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 timeElapsed = now.sub(lastPaidTaxes[user]);\r\n    return (valueHeld[user].mul(timeElapsed).div(365 days)).mul(taxPercentage).div(100);\r\n  }\r\n\r\n  function _addToValueHeld(address user, uint256 value) internal {\r\n    require(transferTaxes(user, false), \"User has a negative balance\");\r\n    require(userBalanceAtLastPaid[user] > 0);\r\n    valueHeld[user] = valueHeld[user].add(value);\r\n  }\r\n\r\n  function _subFromValueHeld(address user, uint256 value, bool isInAuction) internal {\r\n    require(transferTaxes(user, isInAuction), \"User has a negative balance\");\r\n    valueHeld[user] = valueHeld[user].sub(value);\r\n  }\r\n}\r\n\r\n// File: contracts/RadicalPixels.sol\r\n\r\n/**\r\n * @title RadicalPixels\r\n */\r\ncontract RadicalPixels is HarbergerTaxable, ERC721Token {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public   xMax;\r\n  uint256 public   yMax;\r\n  uint256 constant clearLow = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;\r\n  uint256 constant clearHigh = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\r\n  uint256 constant factor = 0x100000000000000000000000000000000;\r\n\r\n  struct Pixel {\r\n    // Id of the pixel block\r\n    bytes32 id;\r\n    // Owner of the pixel block\r\n    address seller;\r\n    // Pixel block x coordinate\r\n    uint256 x;\r\n    // Pixel block y coordinate\r\n    uint256 y;\r\n    // Pixel block price\r\n    uint256 price;\r\n    // Auction Id\r\n    bytes32 auctionId;\r\n    // Content data\r\n    bytes32 contentData;\r\n  }\r\n\r\n  struct Auction {\r\n    // Id of the auction\r\n    bytes32 auctionId;\r\n    // Id of the pixel block\r\n    bytes32 blockId;\r\n    // Pixel block x coordinate\r\n    uint256 x;\r\n    // Pixel block y coordinate\r\n    uint256 y;\r\n    // Current price\r\n    uint256 currentPrice;\r\n    // Current Leader\r\n    address currentLeader;\r\n    // End Time\r\n    uint256 endTime;\r\n  }\r\n\r\n  mapping(uint256 => mapping(uint256 => Pixel)) public pixelByCoordinate;\r\n  mapping(bytes32 => Auction) public auctionById;\r\n\r\n  /**\r\n   * Modifiers\r\n   */\r\n   modifier validRange(uint256 _x, uint256 _y)\r\n  {\r\n    require(_x < xMax, \"X coordinate is out of range\");\r\n    require(_y < yMax, \"Y coordinate is out of range\");\r\n    _;\r\n  }\r\n\r\n  modifier auctionNotOngoing(uint256 _x, uint256 _y)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n    require(pixel.auctionId == 0);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Events\r\n   */\r\n\r\n  event BuyPixel(\r\n    bytes32 indexed id,\r\n    address indexed seller,\r\n    address indexed buyer,\r\n    uint256 x,\r\n    uint256 y,\r\n    uint256 price,\r\n    bytes32 contentData\r\n  );\r\n\r\n  event SetPixelPrice(\r\n    bytes32 indexed id,\r\n    address indexed seller,\r\n    uint256 x,\r\n    uint256 y,\r\n    uint256 price\r\n  );\r\n\r\n  event BeginDutchAuction(\r\n    bytes32 indexed pixelId,\r\n    uint256 indexed tokenId,\r\n    bytes32 indexed auctionId,\r\n    address initiator,\r\n    uint256 x,\r\n    uint256 y,\r\n    uint256 startTime,\r\n    uint256 endTime\r\n  );\r\n\r\n  event UpdateAuctionBid(\r\n    bytes32 indexed pixelId,\r\n    uint256 indexed tokenId,\r\n    bytes32 indexed auctionId,\r\n    address bidder,\r\n    uint256 amountBet,\r\n    uint256 timeBet\r\n  );\r\n\r\n  event EndDutchAuction(\r\n    bytes32 indexed pixelId,\r\n    uint256 indexed tokenId,\r\n    address indexed claimer,\r\n    uint256 x,\r\n    uint256 y\r\n  );\r\n\r\n  event UpdateContentData(\r\n    bytes32 indexed pixelId,\r\n    address indexed owner,\r\n    uint256 x,\r\n    uint256 y,\r\n    bytes32 newContentData\r\n  );\r\n\r\n  constructor(uint256 _xMax, uint256 _yMax, uint256 _taxPercentage, address _taxCollector)\r\n    public\r\n    ERC721Token(\"Radical Pixels\", \"RPX\")\r\n    HarbergerTaxable(_taxPercentage, _taxCollector)\r\n  {\r\n    require(_xMax > 0, \"xMax must be a valid number\");\r\n    require(_yMax > 0, \"yMax must be a valid number\");\r\n\r\n    xMax = _xMax;\r\n    yMax = _yMax;\r\n  }\r\n\r\n  /**\r\n   * Public Functions\r\n   */\r\n\r\n  /**\r\n   * @dev Overwrite ERC721 transferFrom with our specific needs\r\n   * @notice This transfer has to be approved and then triggered by the _to\r\n   * address in order to avoid sending unwanted pixels\r\n   * @param _from Address sending token\r\n   * @param _to Address receiving token\r\n   * @param _tokenId ID of the transacting token\r\n   * @param _price Price of the token being transfered\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _tokenId, uint256 _price, uint256 _x, uint256 _y)\r\n    public\r\n    auctionNotOngoing(_x, _y)\r\n  {\r\n    _subFromValueHeld(msg.sender, _price, false);\r\n    _addToValueHeld(_to, _price);\r\n    require(_to == msg.sender);\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n\r\n    super.transferFrom(_from, _to, _tokenId);\r\n  }\r\n\r\n   /**\r\n   * @dev Buys pixel block\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   * @param _price New price of the pixel block\r\n   * @param _contentData Data for the pixel\r\n   */\r\n   function buyUninitializedPixelBlock(uint256 _x, uint256 _y, uint256 _price, bytes32 _contentData)\r\n     public\r\n   {\r\n     require(_price > 0);\r\n     _buyUninitializedPixelBlock(_x, _y, _price, _contentData);\r\n   }\r\n\r\n  /**\r\n  * @dev Buys pixel blocks\r\n  * @param _x X coordinates of the desired blocks\r\n  * @param _y Y coordinates of the desired blocks\r\n  * @param _price New prices of the pixel blocks\r\n  * @param _contentData Data for the pixel\r\n  */\r\n  function buyUninitializedPixelBlocks(uint256[] _x, uint256[] _y, uint256[] _price, bytes32[] _contentData)\r\n    public\r\n  {\r\n    require(_x.length == _y.length && _x.length == _price.length && _x.length == _contentData.length);\r\n    for (uint i = 0; i < _x.length; i++) {\r\n      require(_price[i] > 0);\r\n      _buyUninitializedPixelBlock(_x[i], _y[i], _price[i], _contentData[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Buys pixel block\r\n  * @param _x X coordinate of the desired block\r\n  * @param _y Y coordinate of the desired block\r\n  * @param _price New price of the pixel block\r\n  * @param _contentData Data for the pixel\r\n  */\r\n  function buyPixelBlock(uint256 _x, uint256 _y, uint256 _price, bytes32 _contentData)\r\n    public\r\n    payable\r\n  {\r\n    require(_price > 0);\r\n    uint256 _ = _buyPixelBlock(_x, _y, _price, msg.value, _contentData);\r\n  }\r\n\r\n  /**\r\n  * @dev Buys pixel block\r\n  * @param _x X coordinates of the desired blocks\r\n  * @param _y Y coordinates of the desired blocks\r\n  * @param _price New prices of the pixel blocks\r\n  * @param _contentData Data for the pixel\r\n  */\r\n  function buyPixelBlocks(uint256[] _x, uint256[] _y, uint256[] _price, bytes32[] _contentData)\r\n    public\r\n    payable\r\n  {\r\n    require(_x.length == _y.length && _x.length == _price.length && _x.length == _contentData.length);\r\n    uint256 currentValue = msg.value;\r\n    for (uint i = 0; i < _x.length; i++) {\r\n      require(_price[i] > 0);\r\n      currentValue = _buyPixelBlock(_x[i], _y[i], _price[i], currentValue, _contentData[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Set prices for specific blocks\r\n  * @param _x X coordinate of the desired block\r\n  * @param _y Y coordinate of the desired block\r\n  * @param _price New price of the pixel block\r\n  */\r\n  function setPixelBlockPrice(uint256 _x, uint256 _y, uint256 _price)\r\n    public\r\n    payable\r\n  {\r\n    require(_price > 0);\r\n    _setPixelBlockPrice(_x, _y, _price);\r\n  }\r\n\r\n  /**\r\n  * @dev Set prices for specific blocks\r\n  * @param _x X coordinates of the desired blocks\r\n  * @param _y Y coordinates of the desired blocks\r\n  * @param _price New prices of the pixel blocks\r\n  */\r\n  function setPixelBlockPrices(uint256[] _x, uint256[] _y, uint256[] _price)\r\n    public\r\n    payable\r\n  {\r\n    require(_x.length == _y.length && _x.length == _price.length);\r\n    for (uint i = 0; i < _x.length; i++) {\r\n      require(_price[i] > 0);\r\n      _setPixelBlockPrice(_x[i], _y[i], _price[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger a dutch auction\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function beginDutchAuction(uint256 _x, uint256 _y)\r\n    public\r\n    auctionNotOngoing(_x, _y)\r\n    validRange(_x, _y)\r\n  {\r\n    Pixel storage pixel = pixelByCoordinate[_x][_y];\r\n\r\n    require(!userHasPositveBalance(pixel.seller));\r\n    require(pixel.auctionId == 0);\r\n\r\n    // Start a dutch auction\r\n    pixel.auctionId = _generateDutchAuction(_x, _y);\r\n    uint256 tokenId = _encodeTokenId(_x, _y);\r\n\r\n    _updatePixelMapping(pixel.seller, _x, _y, pixel.price, pixel.auctionId, \"\");\r\n\r\n    emit BeginDutchAuction(\r\n      pixel.id,\r\n      tokenId,\r\n      pixel.auctionId,\r\n      msg.sender,\r\n      _x,\r\n      _y,\r\n      block.timestamp,\r\n      block.timestamp.add(1 days)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Allow a user to bid in an auction\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   * @param _bid Desired bid of the user\r\n   */\r\n  function bidInAuction(uint256 _x, uint256 _y, uint256 _bid)\r\n    public\r\n    validRange(_x, _y)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n    Auction storage auction = auctionById[pixel.auctionId];\r\n\r\n    uint256 _tokenId = _encodeTokenId(_x, _y);\r\n    require(pixel.auctionId != 0);\r\n    require(auction.currentPrice < _bid);\r\n    require(block.timestamp < auction.endTime);\r\n\r\n    auction.currentPrice = _bid;\r\n    auction.currentLeader = msg.sender;\r\n\r\n    emit UpdateAuctionBid(\r\n      pixel.id,\r\n      _tokenId,\r\n      auction.auctionId,\r\n      msg.sender,\r\n      _bid,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  /**\r\n   * End the auction\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function endDutchAuction(uint256 _x, uint256 _y)\r\n    public\r\n    validRange(_x, _y)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n    Auction memory auction = auctionById[pixel.auctionId];\r\n\r\n    require(pixel.auctionId != 0);\r\n    require(auction.endTime < block.timestamp);\r\n\r\n    // End dutch auction\r\n    address winner = _endDutchAuction(_x, _y);\r\n    _updatePixelMapping(winner, _x, _y, auction.currentPrice, 0, \"\");\r\n\r\n    // Update user values\r\n    _subFromValueHeld(pixel.seller, pixel.price, true);\r\n    _addToValueHeld(winner, auction.currentPrice);\r\n\r\n    uint256 tokenId = _encodeTokenId(_x, _y);\r\n    removeTokenFrom(pixel.seller, tokenId);\r\n    addTokenTo(winner, tokenId);\r\n    emit Transfer(pixel.seller, winner, tokenId);\r\n\r\n    emit EndDutchAuction(\r\n      pixel.id,\r\n      tokenId,\r\n      winner,\r\n      _x,\r\n      _y\r\n    );\r\n  }\r\n\r\n  /**\r\n  * @dev Change content data of a pixel\r\n  * @param _x X coordinates of the desired blocks\r\n  * @param _y Y coordinates of the desired blocks\r\n  * @param _contentData Data for the pixel\r\n  */\r\n  function changeContentData(uint256 _x, uint256 _y, bytes32 _contentData)\r\n    public\r\n  {\r\n    Pixel storage pixel = pixelByCoordinate[_x][_y];\r\n\r\n    require(msg.sender == pixel.seller);\r\n\r\n    pixel.contentData = _contentData;\r\n\r\n    emit UpdateContentData(\r\n      pixel.id,\r\n      pixel.seller,\r\n      _x,\r\n      _y,\r\n      _contentData\r\n  );\r\n\r\n  }\r\n\r\n  /**\r\n   * Encode a token ID for transferability\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function encodeTokenId(uint256 _x, uint256 _y)\r\n    public\r\n    view\r\n    validRange(_x, _y)\r\n    returns (uint256)\r\n  {\r\n    return _encodeTokenId(_x, _y);\r\n  }\r\n\r\n  /**\r\n   * Internal Functions\r\n   */\r\n\r\n  /**\r\n  * @dev Buys an uninitialized pixel block for 0 ETH\r\n  * @param _x X coordinate of the desired block\r\n  * @param _y Y coordinate of the desired block\r\n  * @param _price New price for the pixel\r\n  * @param _contentData Data for the pixel\r\n  */\r\n  function _buyUninitializedPixelBlock(uint256 _x, uint256 _y, uint256 _price, bytes32 _contentData)\r\n    internal\r\n    validRange(_x, _y)\r\n    hasPositveBalance(msg.sender)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n\r\n    require(pixel.seller == address(0), \"Pixel must not be initialized\");\r\n\r\n    uint256 tokenId = _encodeTokenId(_x, _y);\r\n    bytes32 pixelId = _updatePixelMapping(msg.sender, _x, _y, _price, 0, _contentData);\r\n\r\n    _addToValueHeld(msg.sender, _price);\r\n    _mint(msg.sender, tokenId);\r\n\r\n    emit BuyPixel(\r\n      pixelId,\r\n      address(0),\r\n      msg.sender,\r\n      _x,\r\n      _y,\r\n      _price,\r\n      _contentData\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Buys a pixel block\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   * @param _price New price of the pixel block\r\n   * @param _currentValue Current value of the transaction\r\n   * @param _contentData Data for the pixel\r\n   */\r\n  function _buyPixelBlock(uint256 _x, uint256 _y, uint256 _price, uint256 _currentValue, bytes32 _contentData)\r\n    internal\r\n    validRange(_x, _y)\r\n    hasPositveBalance(msg.sender)\r\n    returns (uint256)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n    require(pixel.auctionId == 0);  // Stack to deep if this is a modifier\r\n    uint256 _taxOnPrice = _calculateTax(_price);\r\n\r\n    require(pixel.seller != address(0), \"Pixel must be initialized\");\r\n    require(userBalanceAtLastPaid[msg.sender] >= _taxOnPrice);\r\n    require(pixel.price <= _currentValue, \"Must have sent sufficient funds\");\r\n\r\n    uint256 tokenId = _encodeTokenId(_x, _y);\r\n\r\n    removeTokenFrom(pixel.seller, tokenId);\r\n    addTokenTo(msg.sender, tokenId);\r\n    emit Transfer(pixel.seller, msg.sender, tokenId);\r\n\r\n    _addToValueHeld(msg.sender, _price);\r\n    _subFromValueHeld(pixel.seller, pixel.price, false);\r\n\r\n    _updatePixelMapping(msg.sender, _x, _y, _price, 0, _contentData);\r\n    pixel.seller.transfer(pixel.price);\r\n\r\n    emit BuyPixel(\r\n      pixel.id,\r\n      pixel.seller,\r\n      msg.sender,\r\n      _x,\r\n      _y,\r\n      pixel.price,\r\n      _contentData\r\n    );\r\n\r\n    return _currentValue.sub(pixel.price);\r\n  }\r\n\r\n  /**\r\n  * @dev Set prices for a specific block\r\n  * @param _x X coordinate of the desired block\r\n  * @param _y Y coordinate of the desired block\r\n  * @param _price New price of the pixel block\r\n  */\r\n  function _setPixelBlockPrice(uint256 _x, uint256 _y, uint256 _price)\r\n    internal\r\n    auctionNotOngoing(_x, _y)\r\n    validRange(_x, _y)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n\r\n    require(pixel.seller == msg.sender, \"Sender must own the block\");\r\n    _addToValueHeld(msg.sender, _price);\r\n\r\n    delete pixelByCoordinate[_x][_y];\r\n\r\n    bytes32 pixelId = _updatePixelMapping(msg.sender, _x, _y, _price, 0, \"\");\r\n\r\n    emit SetPixelPrice(\r\n      pixelId,\r\n      pixel.seller,\r\n      _x,\r\n      _y,\r\n      pixel.price\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Generate a dutch auction\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function _generateDutchAuction(uint256 _x, uint256 _y)\r\n    internal\r\n    returns (bytes32)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n\r\n    bytes32 _auctionId = keccak256(\r\n      abi.encodePacked(\r\n        block.timestamp,\r\n        _x,\r\n        _y\r\n      )\r\n    );\r\n\r\n    auctionById[_auctionId] = Auction({\r\n      auctionId: _auctionId,\r\n      blockId: pixel.id,\r\n      x: _x,\r\n      y: _y,\r\n      currentPrice: 0,\r\n      currentLeader: msg.sender,\r\n      endTime: block.timestamp.add(1 days)\r\n    });\r\n\r\n    return _auctionId;\r\n  }\r\n\r\n  /**\r\n   * End a finished dutch auction\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function _endDutchAuction(uint256 _x, uint256 _y)\r\n    internal\r\n    returns (address)\r\n  {\r\n    Pixel memory pixel = pixelByCoordinate[_x][_y];\r\n    Auction memory auction = auctionById[pixel.auctionId];\r\n\r\n    address _winner = auction.currentLeader;\r\n\r\n    delete auctionById[auction.auctionId];\r\n\r\n    return _winner;\r\n  }\r\n  /**\r\n    * @dev Update pixel mapping every time it is purchase or the price is\r\n    * changed\r\n    * @param _seller Seller of the pixel block\r\n    * @param _x X coordinate of the desired block\r\n    * @param _y Y coordinate of the desired block\r\n    * @param _price Price of the pixel block\r\n    * @param _contentData Data for the pixel\r\n    */\r\n  function _updatePixelMapping\r\n  (\r\n    address _seller,\r\n    uint256 _x,\r\n    uint256 _y,\r\n    uint256 _price,\r\n    bytes32 _auctionId,\r\n    bytes32 _contentData\r\n  )\r\n    internal\r\n    returns (bytes32)\r\n  {\r\n    bytes32 pixelId = keccak256(\r\n      abi.encodePacked(\r\n        _x,\r\n        _y\r\n      )\r\n    );\r\n\r\n    pixelByCoordinate[_x][_y] = Pixel({\r\n      id: pixelId,\r\n      seller: _seller,\r\n      x: _x,\r\n      y: _y,\r\n      price: _price,\r\n      auctionId: _auctionId,\r\n      contentData: _contentData\r\n    });\r\n\r\n    return pixelId;\r\n  }\r\n\r\n  function _calculateTax(uint256 _price)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _price.mul(taxPercentage).div(100);\r\n  }\r\n  /**\r\n   * Encode token ID\r\n   * @param _x X coordinate of the desired block\r\n   * @param _y Y coordinate of the desired block\r\n   */\r\n  function _encodeTokenId(uint256 _x, uint256 _y)\r\n    internal\r\n    pure\r\n    returns (uint256 result)\r\n  {\r\n    return ((_x * factor) & clearLow) | (_y & clearHigh);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pixelByCoordinate\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"name\":\"contentData\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEFPercentage\",\"type\":\"uint256\"},{\"name\":\"_newTaxCollectorPercentage\",\"type\":\"uint256\"}],\"name\":\"updateTaxPercentages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256[]\"},{\"name\":\"_y\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256[]\"},{\"name\":\"_contentData\",\"type\":\"bytes32[]\"}],\"name\":\"buyUninitializedPixelBlocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPaidTaxes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"auctionById\",\"outputs\":[{\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"name\":\"blockId\",\"type\":\"bytes32\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"currentLeader\",\"type\":\"address\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"isInAuction\",\"type\":\"bool\"}],\"name\":\"transferTaxes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalanceAtLastPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256[]\"},{\"name\":\"_y\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256[]\"}],\"name\":\"setPixelBlockPrices\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"valueHeld\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256[]\"},{\"name\":\"_y\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256[]\"},{\"name\":\"_contentData\",\"type\":\"bytes32[]\"}],\"name\":\"buyPixelBlocks\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFoundation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPixelBlockPrice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_contentData\",\"type\":\"bytes32\"}],\"name\":\"buyUninitializedPixelBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentFoundationContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFoundationPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxCollectorPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxCollector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"bidInAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"updateCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_contentData\",\"type\":\"bytes32\"}],\"name\":\"changeContentData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_contentData\",\"type\":\"bytes32\"}],\"name\":\"buyPixelBlock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userHasPositveBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"encodeTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"endDutchAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutEF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"beginDutchAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_xMax\",\"type\":\"uint256\"},{\"name\":\"_yMax\",\"type\":\"uint256\"},{\"name\":\"_taxPercentage\",\"type\":\"uint256\"},{\"name\":\"_taxCollector\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contentData\",\"type\":\"bytes32\"}],\"name\":\"BuyPixel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetPixelPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pixelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"BeginDutchAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pixelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountBet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeBet\",\"type\":\"uint256\"}],\"name\":\"UpdateAuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pixelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"EndDutchAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pixelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newContentData\",\"type\":\"bytes32\"}],\"name\":\"UpdateContentData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"UpdateCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newEFPercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newTaxCollectorPercentage\",\"type\":\"uint256\"}],\"name\":\"UpdateTaxPercentages\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RadicalPixels","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000140000000000000000000000005e0a1c878f4809b7d51a7ec6a259b50dd5b2c3cd","Library":"","SwarmSource":"bzzr://a96176ff4e5138ab43d61cbb44cc0c7379f7036c871d64505e164b6515e22d66"}]}