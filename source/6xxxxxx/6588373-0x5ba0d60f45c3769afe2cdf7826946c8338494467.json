{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n  Multiplier contract: returns 123% of each investment!\r\n  Automatic payouts!\r\n  No bugs, no backdoors, NO OWNER - fully automatic!\r\n  Made and checked by professionals!\r\n\r\n  1. Send any sum to smart contract address\r\n     - sum from 0.01 to 10 ETH\r\n     - min 250000 gas limit\r\n     - you are added to a queue\r\n  2. Wait a little bit\r\n  3. ...\r\n  4. PROFIT! You have got 123%\r\n\r\n  How is that?\r\n  1. The first investor in the queue (you will become the\r\n     first in some time) receives next investments until\r\n     it become 123% of his initial investment.\r\n  2. You will receive payments in several parts or all at once\r\n  3. Once you receive 123% of your initial investment you are\r\n     removed from the queue.\r\n  4. You can make multiple deposits\r\n  5. The balance of this contract should normally be 0 because\r\n     all the money are immediately go to payouts\r\n\r\n\r\n     So the last pays to the first (or to several first ones\r\n     if the deposit big enough) and the investors paid 123% are removed from the queue\r\n\r\n                new investor --|               brand new investor --|\r\n                 investor5     |                 new investor       |\r\n                 investor4     |     =======>      investor5        |\r\n                 investor3     |                   investor4        |\r\n    (part. paid) investor2    <|                   investor3        |\r\n    (fully paid) investor1   <-|                   investor2   <----|  (pay until 123%)\r\n\r\n\r\n  Контракт Умножитель: возвращает 123% от вашего депозита!\r\n  Автоматические выплаты!\r\n  Без ошибок, дыр, автоматический - для выплат НЕ НУЖНА администрация!\r\n  Создан и проверен профессионалами!\r\n\r\n  1. Пошлите любую ненулевую сумму на адрес контракта\r\n     - сумма от 0.01 до 10 ETH\r\n     - gas limit минимум 250000\r\n     - вы встанете в очередь\r\n  2. Немного подождите\r\n  3. ...\r\n  4. PROFIT! Вам пришло 123% от вашего депозита.\r\n\r\n  Как это возможно?\r\n  1. Первый инвестор в очереди (вы станете первым очень скоро) получает выплаты от\r\n     новых инвесторов до тех пор, пока не получит 123% от своего депозита\r\n  2. Выплаты могут приходить несколькими частями или все сразу\r\n  3. Как только вы получаете 123% от вашего депозита, вы удаляетесь из очереди\r\n  4. Вы можете делать несколько депозитов сразу\r\n  5. Баланс этого контракта должен обычно быть в районе 0, потому что все поступления\r\n     сразу же направляются на выплаты\r\n\r\n     Таким образом, последние платят первым, и инвесторы, достигшие выплат 123% от депозита,\r\n     удаляются из очереди, уступая место остальным\r\n\r\n              новый инвестор --|            совсем новый инвестор --|\r\n                 инвестор5     |                новый инвестор      |\r\n                 инвестор4     |     =======>      инвестор5        |\r\n                 инвестор3     |                   инвестор4        |\r\n (част. выплата) инвестор2    <|                   инвестор3        |\r\n(полная выплата) инвестор1   <-|                   инвестор2   <----|  (доплата до 123%)\r\n\r\n*/\r\n\r\ncontract Multiplier {\r\n    //Address for promo expences\r\n    address constant private PROMO1 = 0x44fF136480768B6Ee57BC8c26c7658667A6ceb0F;\r\n\taddress constant private PROMO2 = 0xB97Fd03Cf90E7b45451e9Bb9cB904a0862c5f251;\r\n\taddress constant private TECH = 0x0365d67E339B09e59E0b56aB336140c02Ef172DC;\r\n    //Percent for promo/tech expences\r\n    uint constant public PROMO_PERCENT1 = 2; //4 for advertizing, 2 for techsupport\r\n\tuint constant public PROMO_PERCENT2 = 2;\r\n\tuint constant public TECH_PERCENT = 2;\r\n    //How many percent for your deposit to be multiplied\r\n    uint constant public MULTIPLIER = 123;\r\n\r\n    //The deposit structure holds all the info about the deposit made\r\n    struct Deposit {\r\n        address depositor; //The depositor address\r\n        uint128 deposit;   //The deposit amount\r\n        uint128 expect;    //How much we should pay out (initially it is 124% of deposit)\r\n    }\r\n\r\n    Deposit[] private queue;  //The queue\r\n    uint public currentReceiverIndex = 0; //The index of the first depositor in the queue. The receiver of investments!\r\n\r\n    //This function receives all the deposits\r\n    //stores them and make immediate payouts\r\n    function () public payable {\r\n        if(msg.value > 0){\r\n            require(gasleft() >= 220000, \"We require more gas!\"); //We need gas to process queue\r\n            require(msg.value <= 10 ether); //Do not allow too big investments to stabilize payouts\r\n\r\n            //Add the investor into the queue. Mark that he expects to receive 124% of deposit back\r\n            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value*MULTIPLIER/100)));\r\n\r\n            //Send some promo to enable this contract to leave long-long time\r\n            uint promo1 = msg.value*PROMO_PERCENT1/100;\r\n            PROMO1.send(promo1);\r\n\t\t\tuint promo2 = msg.value*PROMO_PERCENT2/100;\r\n            PROMO2.send(promo2);\r\n\t\t\tuint tech = msg.value*TECH_PERCENT/100;\r\n            TECH.send(tech);\r\n\r\n            //Pay to first investors in line\r\n            pay();\r\n        }\r\n    }\r\n\r\n    //Used to pay to current investors\r\n    //Each new transaction processes 1 - 4+ investors in the head of queue \r\n    //depending on balance and gas left\r\n    function pay() private {\r\n        //Try to send all the money on contract to the first investors in line\r\n        uint128 money = uint128(address(this).balance);\r\n\r\n        //We will do cycle on the queue\r\n        for(uint i=0; i<queue.length; i++){\r\n\r\n            uint idx = currentReceiverIndex + i;  //get the index of the currently first investor\r\n\r\n            Deposit storage dep = queue[idx]; //get the info of the first investor\r\n\r\n            if(money >= dep.expect){  //If we have enough money on the contract to fully pay to investor\r\n                dep.depositor.send(dep.expect); //Send money to him\r\n                money -= dep.expect;            //update money left\r\n\r\n                //this investor is fully paid, so remove him\r\n                delete queue[idx];\r\n            }else{\r\n                //Here we don't have enough money so partially pay to investor\r\n                dep.depositor.send(money); //Send to him everything we have\r\n                dep.expect -= money;       //Update the expected amount\r\n                break;                     //Exit cycle\r\n            }\r\n\r\n            if(gasleft() <= 50000)         //Check the gas left. If it is low, exit the cycle\r\n                break;                     //The next investor will process the line further\r\n        }\r\n\r\n        currentReceiverIndex += i; //Update the index of the current first investor\r\n    }\r\n\r\n    //Get the deposit info by its index\r\n    //You can get deposit index from\r\n    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\r\n        Deposit storage dep = queue[idx];\r\n        return (dep.depositor, dep.deposit, dep.expect);\r\n    }\r\n\r\n    //Get the count of deposits of specific investor\r\n    function getDepositsCount(address depositor) public view returns (uint) {\r\n        uint c = 0;\r\n        for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n            if(queue[i].depositor == depositor)\r\n                c++;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    //Get all deposits (index, deposit, expect) of a specific investor\r\n    function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\r\n        uint c = getDepositsCount(depositor);\r\n\r\n        idxs = new uint[](c);\r\n        deposits = new uint128[](c);\r\n        expects = new uint128[](c);\r\n\r\n        if(c > 0) {\r\n            uint j = 0;\r\n            for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n                Deposit storage dep = queue[i];\r\n                if(dep.depositor == depositor){\r\n                    idxs[j] = i;\r\n                    deposits[j] = dep.deposit;\r\n                    expects[j] = dep.expect;\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    //Get current queue size\r\n    function getQueueLength() public view returns (uint) {\r\n        return queue.length - currentReceiverIndex;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReceiverIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_PERCENT2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"name\":\"idxs\",\"type\":\"uint256[]\"},{\"name\":\"deposits\",\"type\":\"uint128[]\"},{\"name\":\"expects\",\"type\":\"uint128[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"expect\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TECH_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_PERCENT1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Multiplier","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e5c70bdbc0b71691d35705b8cc886458ac2b765e8a5a380167952f99fbfef669"}]}