{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow.\r\n    */\r\n    function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        assert(y <= x);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x + y;\r\n        assert(z >= x);\r\n        return z;\r\n    }\r\n\t\r\n\t/**\r\n    * @dev Integer division of two numbers, reverts on division by zero.\r\n    */\r\n    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x / y;\r\n        return z;\r\n    }\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\t\r\n    function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {    \r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n    \r\n        uint256 z = x * y;\r\n        assert(z / x == y);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the integer percentage of the number.\r\n    */\r\n    function safePerc(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 z = x * y;\r\n        assert(z / x == y);    \r\n        z = z / 10000; // percent to hundredths\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the minimum value of two numbers.\r\n    */\t\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x <= y ? x : y;\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the maximum value of two numbers.\r\n    */\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x >= y ? x : y;\r\n        return z;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable contract - base contract with an owner\r\n */\r\ncontract Ownable {\r\n  \r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n  \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    assert(_newOwner != address(0));      \r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Accept transferOwnership.\r\n   */\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Agent contract - base contract with an agent\r\n */\r\ncontract Agent is Ownable {\r\n\r\n  address public defAgent;\r\n\r\n  mapping(address => bool) public Agents;  \r\n\r\n  event UpdatedAgent(address _agent, bool _status);\r\n\r\n  constructor() public {\r\n    defAgent = msg.sender;\r\n    Agents[msg.sender] = true;\r\n  }\r\n  \r\n  modifier onlyAgent() {\r\n    assert(Agents[msg.sender]);\r\n    _;\r\n  }\r\n  \r\n  function updateAgent(address _agent, bool _status) public onlyOwner {\r\n    assert(_agent != address(0));\r\n    Agents[_agent] = _status;\r\n\r\n    emit UpdatedAgent(_agent, _status);\r\n  }  \r\n}\r\n\r\n\r\n/**\r\n * @title CryptoDuel game\r\n */\r\ncontract CryptoDuel is Agent, SafeMath {\r\n\r\n    uint public fee = 100;            //  1% from bet\r\n    uint public refGroupFee = 5000;   // 50% from profit\r\n    uint public refLevel1Fee = 1000;  // 10% from profit\r\n    uint public refLevel2Fee = 500;   //  5% from profit\r\n    uint public min = 1000000000000000;       // 0.001 ETH\r\n    uint public max = 1000000000000000000000;  // 1000 ETH\r\n\r\n    uint256 public start = 0;         // Must be equal to the date of issue tokens\r\n    uint256 public period = 30 days;  // By default, the dividend accrual period is 30 days\r\n\r\n    /** State\r\n     *\r\n     * - New: 0\r\n     * - Deleted: 1\r\n     * - OnGoing: 2\r\n     * - Closed: 3\r\n     */\r\n    enum State{New, Deleted, OnGoing, Closed}\r\n\r\n    struct _duel {\r\n        address creator;\r\n        address responder;\r\n        uint bet;\r\n        uint blocknumber;\r\n        int refID;\r\n        State state;\r\n    }\r\n\r\n    _duel[] public Duels;\r\n    mapping(int => address) public RefGroup;                 // RefGroup[id group] = address referrer\r\n    mapping(address => address) public RefAddr;              // RefAddr[address referal] = address referrer\r\n\r\n    mapping(uint => uint) public reward;                     // reward[period] = amount\r\n    mapping(address => uint) public rewardGroup;             // rewardGroup[address] = amount\r\n    mapping(address => uint) public rewardAddr;              // rewardAddr[address] = amount\r\n\r\n    mapping(uint => bool) public AlreadyReward;              // AlreadyReward[period] = true/false\r\n\r\n    event newDuel(uint duel, address indexed creator, address indexed responder, uint bet, int refID);\r\n    event deleteDuel(uint duel);\r\n    event respondDuel(uint duel, address indexed responder);\r\n\r\n    event refundDuel(uint duel);\r\n    event resultDuel(uint duel, address indexed winner, uint sum);\r\n\r\n    event changeMin(uint min);\r\n    event changeMax(uint max);\r\n    \r\n    event changeRefGroup(int ID, address referrer);\r\n    event changeRefAddr(address referal, address referrer);\r\n\r\n    event changeFee(uint fee);\r\n    event changeRefGroupFee(uint refGroupFee);\r\n    event changeRefLevel1Fee(uint refLevel1Fee);\r\n    event changeRefLevel2Fee(uint refLevel2Fee);    \r\n    \r\n    event withdrawProfit(uint fee, address RefGroup);\r\n\r\n    event UpdatedPeriod(uint _period);\r\n\r\n    constructor() public {\r\n        RefGroup[0] = msg.sender;\r\n        emit changeRefGroup(0, msg.sender);\r\n    }\r\n\r\n    function CreateDuel(address _responder) payable external {\r\n\r\n        require(msg.value >= min && msg.value <= max);        \r\n\r\n        Duels.push(_duel({\r\n            creator : msg.sender,\r\n            responder : _responder,\r\n            bet : msg.value,\r\n            blocknumber : 0,\r\n            state : State.New,\r\n            refID : 0\r\n            }));\r\n\r\n        emit newDuel(Duels.length - 1, msg.sender, _responder, msg.value, 0);\r\n    }\r\n\r\n    function CreateDuel(address _responder, int _refID) payable external {\r\n\r\n        require(msg.value >= min && msg.value <= max);\r\n        require(RefGroup[_refID] != address(0));\r\n\r\n        Duels.push(_duel({\r\n            creator : msg.sender,\r\n            responder : _responder,\r\n            bet : msg.value,\r\n            blocknumber : 0,\r\n            state : State.New,\r\n            refID : _refID\r\n            }));\r\n\r\n        emit newDuel(Duels.length - 1, msg.sender, _responder, msg.value, _refID);\r\n    }\r\n\r\n    function RespondDuel(uint _duelID) payable external {\r\n\r\n        _duel storage duel = Duels[_duelID];\r\n\r\n        require(duel.state == State.New);\r\n        require(duel.bet == msg.value);\r\n        require(duel.responder == msg.sender || duel.responder == address(0));\r\n\r\n        duel.state = State.OnGoing;\r\n        duel.responder = msg.sender;\r\n        duel.blocknumber = block.number;\r\n\r\n        emit respondDuel(_duelID, msg.sender);\r\n    }\r\n\r\n\r\n    function DeleteDuel(uint _duelID) external {\r\n\r\n        _duel storage duel = Duels[_duelID];\r\n\r\n        require(duel.creator == msg.sender);\r\n        require(duel.state == State.New);\r\n\r\n        duel.state = State.Deleted;\r\n\r\n        uint duel_fee = safePerc(duel.bet, fee);\r\n\r\n        uint256 N = 1;\r\n        if (block.timestamp > start) {\r\n            N = (block.timestamp - start) / period + 1;\r\n        }\r\n\r\n        reward[N] = safeAdd(reward[N], duel_fee);\r\n\r\n        duel.creator.transfer(safeSub(duel.bet, duel_fee));\r\n\r\n        emit deleteDuel(_duelID);\r\n    }\r\n\r\n\r\n    function GetWin(uint _duelID) external {\r\n\r\n        _duel storage duel = Duels[_duelID];\r\n\r\n        require(duel.state == State.OnGoing);\r\n        require(duel.creator == msg.sender || duel.responder == msg.sender);\r\n        require(block.number > duel.blocknumber + 1);\r\n\r\n        duel.state = State.Closed;\r\n        uint duel_fee = 0;\r\n\r\n        uint256 N = 1;\r\n        if (block.timestamp > start) {\r\n            N = (block.timestamp - start) / period + 1;\r\n        }\r\n\r\n        if (blockhash(duel.blocknumber) == 0 || (block.number - duel.blocknumber) > 256) {\r\n\r\n            duel_fee = safePerc(duel.bet, fee);\r\n\r\n            duel.creator.transfer(safeSub(duel.bet, duel_fee));\r\n            duel.responder.transfer(safeSub(duel.bet, duel_fee));\r\n\r\n            reward[N] = safeAdd(reward[N], safeMul(2, duel_fee));\r\n\r\n            emit refundDuel(_duelID);\r\n\r\n        } else {\r\n\r\n            uint hash = uint(keccak256(abi.encodePacked(blockhash(duel.blocknumber + 1), duel.creator, duel.responder, duel.bet)));\r\n\r\n            uint duel_bet_common = safeMul(2, duel.bet);\r\n            duel_fee = safePerc(duel_bet_common, fee);\r\n\r\n            uint refFee = 0;\r\n            uint sum = safeSub(duel_bet_common, duel_fee);\r\n\r\n            address winner;\r\n\r\n            if (hash % 2 == 0) {\r\n                duel.creator.transfer(sum);\r\n                winner = duel.creator;\r\n                emit resultDuel(_duelID, duel.creator, sum);\r\n\r\n            } else {                \r\n                duel.responder.transfer(sum);\r\n                winner = duel.responder;\r\n                emit resultDuel(_duelID, duel.responder, sum);\r\n            }\r\n\r\n            // ref level 1\r\n            if (RefAddr[winner] != address(0)) {                \r\n                refFee = refLevel1Fee;\r\n                rewardAddr[RefAddr[winner]] = safeAdd(rewardAddr[RefAddr[winner]], safePerc(duel_fee, refLevel1Fee));\r\n\r\n                // ref level 2\r\n                if (RefAddr[RefAddr[winner]] != address(0)) {\r\n                    refFee = safeAdd(refFee, refLevel2Fee);\r\n                    rewardAddr[RefAddr[RefAddr[winner]]] = safeAdd(rewardAddr[RefAddr[RefAddr[winner]]], safePerc(duel_fee, refLevel2Fee));\r\n                }\r\n            }\r\n            \r\n            // ref group\r\n            if (duel.refID != 0) {\r\n                refFee = safeSub(refGroupFee, refFee);\r\n                rewardGroup[RefGroup[duel.refID]] = safeAdd(rewardGroup[RefGroup[duel.refID]], safePerc(duel_fee, refFee));\r\n                reward[N] = safeAdd(reward[N], safeSub(duel_fee, safePerc(duel_fee, refGroupFee)));\r\n            } else {\r\n                reward[N] = safeAdd(reward[N], safeSub(duel_fee, safePerc(duel_fee, refFee)));\r\n            }            \r\n        }\r\n    }\r\n\r\n    function setMin(uint _min) external onlyOwner {\r\n        min = _min;\r\n        emit changeMin(_min);\r\n    }\r\n\r\n    function setMax(uint _max) external onlyOwner {\r\n        max = _max;\r\n        emit changeMax(_max);\r\n    }\r\n\r\n    function setFee(uint _fee) external onlyOwner {\r\n        fee = _fee;\r\n        emit changeFee(_fee);\r\n    }\r\n\r\n    function setRefGroupFee(uint _refGroupFee) external onlyOwner {\r\n        refGroupFee = _refGroupFee;        \r\n        emit changeRefGroupFee(_refGroupFee);\r\n    }\r\n    \r\n    function setRefLevel1Fee(uint _refLevel1Fee) external onlyOwner {\r\n        refLevel1Fee = _refLevel1Fee;\r\n        emit changeRefLevel1Fee(_refLevel1Fee);\r\n    }\r\n\r\n    function setRefLevel2Fee(uint _refLevel2Fee) external onlyOwner {\r\n        refLevel2Fee = _refLevel2Fee;\r\n        emit changeRefLevel2Fee(_refLevel2Fee);\r\n    }\r\n    \r\n    function setRefGroup(int _ID, address _referrer) external onlyAgent {\r\n        RefGroup[_ID] = _referrer;\r\n        emit changeRefGroup(_ID, _referrer);\r\n    }\r\n    \r\n    function setRefAddr(address _referral, address _referrer) external onlyAgent {\r\n        RefAddr[_referral] = _referrer;\r\n        emit changeRefAddr(_referral, _referrer);\r\n    }\r\n\r\n    function withdraw() external onlyOwner returns (bool success) {        \r\n        uint256 N = 1;\r\n        if (block.timestamp > start) {\r\n            N = (block.timestamp - start) / period;\r\n        }\r\n\r\n        if (!AlreadyReward[N]) {\r\n            uint amount = reward[N];\r\n            AlreadyReward[N] = true;\r\n            msg.sender.transfer(amount);\r\n            emit withdrawProfit(amount, msg.sender);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function withdrawRefGroup() external returns (bool success) {\r\n        require(rewardGroup[msg.sender] > 0);\r\n        uint amount = rewardGroup[msg.sender];\r\n        rewardGroup[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        emit withdrawProfit(amount, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function withdrawRefAddr() external returns (bool success) {\r\n        require(rewardAddr[msg.sender] > 0);\r\n        uint amount = rewardAddr[msg.sender];\r\n        rewardAddr[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        emit withdrawProfit(amount, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function withdrawRefBoth() external returns (bool success) {\r\n        require(rewardAddr[msg.sender] > 0 || rewardGroup[msg.sender] > 0);\r\n        uint amount = safeAdd(rewardAddr[msg.sender], rewardGroup[msg.sender]);\r\n        rewardAddr[msg.sender] = 0;\r\n        rewardGroup[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        emit withdrawProfit(amount, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Owner can change period\r\n    */\r\n    function setPeriod(uint _period) external onlyOwner {\r\n        period = _period;\r\n        emit UpdatedPeriod(_period);\r\n    }\r\n\r\n    /**\r\n    * Owner can change start\r\n    */\r\n    function setStart(uint _start) external onlyOwner {        \r\n        start = _start;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"RefGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefBoth\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefGroup\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AlreadyReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refGroupFee\",\"type\":\"uint256\"}],\"name\":\"setRefGroupFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ID\",\"type\":\"int256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setRefGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duelID\",\"type\":\"uint256\"}],\"name\":\"DeleteDuel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refLevel1Fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Agents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refLevel2Fee\",\"type\":\"uint256\"}],\"name\":\"setRefLevel2Fee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Duels\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"responder\",\"type\":\"address\"},{\"name\":\"bet\",\"type\":\"uint256\"},{\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"name\":\"refID\",\"type\":\"int256\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_responder\",\"type\":\"address\"}],\"name\":\"CreateDuel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refLevel2Fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duelID\",\"type\":\"uint256\"}],\"name\":\"GetWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refGroupFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"RefAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refLevel1Fee\",\"type\":\"uint256\"}],\"name\":\"setRefLevel1Fee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referral\",\"type\":\"address\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setRefAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duelID\",\"type\":\"uint256\"}],\"name\":\"RespondDuel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefAddr\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_responder\",\"type\":\"address\"},{\"name\":\"_refID\",\"type\":\"int256\"}],\"name\":\"CreateDuel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"duel\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"responder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refID\",\"type\":\"int256\"}],\"name\":\"newDuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"duel\",\"type\":\"uint256\"}],\"name\":\"deleteDuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"duel\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"responder\",\"type\":\"address\"}],\"name\":\"respondDuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"duel\",\"type\":\"uint256\"}],\"name\":\"refundDuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"duel\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"}],\"name\":\"resultDuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"changeMin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"changeMax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ID\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"changeRefGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"referal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"changeRefAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refGroupFee\",\"type\":\"uint256\"}],\"name\":\"changeRefGroupFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refLevel1Fee\",\"type\":\"uint256\"}],\"name\":\"changeRefLevel1Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refLevel2Fee\",\"type\":\"uint256\"}],\"name\":\"changeRefLevel2Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"RefGroup\",\"type\":\"address\"}],\"name\":\"withdrawProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"UpdatedPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_agent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"UpdatedAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoDuel","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cd7a53a79ea5e16dce3fa3c211aed24928f6374177f28cd458709c73e90366ad"}]}