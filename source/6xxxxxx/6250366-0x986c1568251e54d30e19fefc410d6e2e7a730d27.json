{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/*\r\n* NamiMultiSigWallet smart contract-------------------------------\r\n*/\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\ncontract NamiMultiSigWallet {\r\n\r\n    uint constant public MAX_OWNER_COUNT = 50;\r\n\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId);\r\n    event Execution(uint indexed transactionId);\r\n    event ExecutionFailure(uint indexed transactionId);\r\n    event Deposit(address indexed sender, uint value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint required);\r\n\r\n    mapping (uint => Transaction) public transactions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] public owners;\r\n    uint public required;\r\n    uint public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    modifier onlyWallet() {\r\n        require(msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        require(!isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        require(isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        require(transactions[transactionId].destination != 0);\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        require(confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        require(!confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        require(!transactions[transactionId].executed);\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != 0);\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        require(!(ownerCount > MAX_OWNER_COUNT\r\n            || _required > ownerCount\r\n            || _required == 0\r\n            || ownerCount == 0));\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function() public payable {\r\n        if (msg.value > 0)\r\n            emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    constructor(address[] _owners, uint _required)\r\n        public\r\n        validRequirement(_owners.length, _required)\r\n    {\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            require(!(isOwner[_owners[i]] || _owners[i] == 0));\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param owner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint _required)\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, bytes data)\r\n        public\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n        public\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            // Transaction tx = transactions[transactionId];\r\n            transactions[transactionId].executed = true;\r\n            // tx.executed = true;\r\n            if (transactions[transactionId].destination.call.value(transactions[transactionId].value)(transactions[transactionId].data)) {\r\n                emit Execution(transactionId);\r\n            } else {\r\n                emit ExecutionFailure(transactionId);\r\n                transactions[transactionId].executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint value, bytes data)\r\n        internal\r\n        notNull(destination)\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination, \r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i = 0; i < transactionCount; i++) {\r\n            if (pending && !transactions[i].executed || executed && transactions[i].executed)\r\n                count += 1;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n        public\r\n        constant\r\n        returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n        public\r\n        constant\r\n        returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        }\r\n        _confirmations = new address[](count);\r\n        for (i = 0; i < count; i++) {\r\n            _confirmations[i] = confirmationsTemp[i];\r\n        }\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i = 0; i < transactionCount; i++) {\r\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i = from; i < to; i++) {\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n        }\r\n    }\r\n}\r\ncontract PresaleToken {\r\n    mapping (address => uint256) public balanceOf;\r\n    function burnTokens(address _owner) public;\r\n}\r\n /*\r\n * Contract that is working with ERC223 tokens\r\n */\r\n \r\n /**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\n \r\ncontract ERC223ReceivingContract {\r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool success);\r\n    function tokenFallbackBuyer(address _from, uint _value, address _buyer) public returns (bool success);\r\n    function tokenFallbackExchange(address _from, uint _value, uint _price) public returns (bool success);\r\n}\r\n// ERC20 token interface is implemented only partially.\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract NamiCrowdSale {\r\n    using SafeMath for uint256;\r\n\r\n    /// NAC Broker Presale Token\r\n    /// @dev Constructor\r\n    constructor(address _escrow, address _namiMultiSigWallet, address _namiPresale) public {\r\n        require(_namiMultiSigWallet != 0x0);\r\n        escrow = _escrow;\r\n        namiMultiSigWallet = _namiMultiSigWallet;\r\n        namiPresale = _namiPresale;\r\n    }\r\n\r\n\r\n    /*/\r\n     *  Constants\r\n    /*/\r\n\r\n    string public name = \"Nami ICO\";\r\n    string public  symbol = \"NAC\";\r\n    uint   public decimals = 18;\r\n\r\n    bool public TRANSFERABLE = false; // default not transferable\r\n\r\n    uint public constant TOKEN_SUPPLY_LIMIT = 1000000000 * (1 ether / 1 wei);\r\n    \r\n    uint public binary = 0;\r\n\r\n    /*/\r\n     *  Token state\r\n    /*/\r\n\r\n    enum Phase {\r\n        Created,\r\n        Running,\r\n        Paused,\r\n        Migrating,\r\n        Migrated\r\n    }\r\n\r\n    Phase public currentPhase = Phase.Created;\r\n    uint public totalSupply = 0; // amount of tokens already sold\r\n\r\n    // escrow has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public escrow;\r\n\r\n    // Gathered funds can be withdraw only to namimultisigwallet's address.\r\n    address public namiMultiSigWallet;\r\n\r\n    // nami presale contract\r\n    address public namiPresale;\r\n\r\n    // Crowdsale manager has exclusive priveleges to burn presale tokens.\r\n    address public crowdsaleManager;\r\n    \r\n    // binary option address\r\n    address public binaryAddress;\r\n    \r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    modifier onlyCrowdsaleManager() {\r\n        require(msg.sender == crowdsaleManager); \r\n        _; \r\n    }\r\n\r\n    modifier onlyEscrow() {\r\n        require(msg.sender == escrow);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyTranferable() {\r\n        require(TRANSFERABLE);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNamiMultisig() {\r\n        require(msg.sender == namiMultiSigWallet);\r\n        _;\r\n    }\r\n    \r\n    /*/\r\n     *  Events\r\n    /*/\r\n\r\n    event LogBuy(address indexed owner, uint value);\r\n    event LogBurn(address indexed owner, uint value);\r\n    event LogPhaseSwitch(Phase newPhase);\r\n    // Log migrate token\r\n    event LogMigrate(address _from, address _to, uint256 amount);\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /*/\r\n     *  Public functions\r\n    /*/\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    // only escrow can send token (to send token private sale)\r\n    function transferForTeam(address _to, uint256 _value) public\r\n        onlyEscrow\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public\r\n        onlyTranferable\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n       /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) \r\n        public\r\n        onlyTranferable\r\n        returns (bool success)\r\n    {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        onlyTranferable\r\n        returns (bool success) \r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        onlyTranferable\r\n        returns (bool success) \r\n    {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // allows transfer token\r\n    function changeTransferable () public\r\n        onlyEscrow\r\n    {\r\n        TRANSFERABLE = !TRANSFERABLE;\r\n    }\r\n    \r\n    // change escrow\r\n    function changeEscrow(address _escrow) public\r\n        onlyNamiMultisig\r\n    {\r\n        require(_escrow != 0x0);\r\n        escrow = _escrow;\r\n    }\r\n    \r\n    // change binary value\r\n    function changeBinary(uint _binary)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        binary = _binary;\r\n    }\r\n    \r\n    // change binary address\r\n    function changeBinaryAddress(address _binaryAddress)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(_binaryAddress != 0x0);\r\n        binaryAddress = _binaryAddress;\r\n    }\r\n    \r\n    /*\r\n    * price in ICO:\r\n    * first week: 1 ETH = 2400 NAC\r\n    * second week: 1 ETH = 23000 NAC\r\n    * 3rd week: 1 ETH = 2200 NAC\r\n    * 4th week: 1 ETH = 2100 NAC\r\n    * 5th week: 1 ETH = 2000 NAC\r\n    * 6th week: 1 ETH = 1900 NAC\r\n    * 7th week: 1 ETH = 1800 NAC\r\n    * 8th week: 1 ETH = 1700 nac\r\n    * time: \r\n    * 1517443200: Thursday, February 1, 2018 12:00:00 AM\r\n    * 1518048000: Thursday, February 8, 2018 12:00:00 AM\r\n    * 1518652800: Thursday, February 15, 2018 12:00:00 AM\r\n    * 1519257600: Thursday, February 22, 2018 12:00:00 AM\r\n    * 1519862400: Thursday, March 1, 2018 12:00:00 AM\r\n    * 1520467200: Thursday, March 8, 2018 12:00:00 AM\r\n    * 1521072000: Thursday, March 15, 2018 12:00:00 AM\r\n    * 1521676800: Thursday, March 22, 2018 12:00:00 AM\r\n    * 1522281600: Thursday, March 29, 2018 12:00:00 AM\r\n    */\r\n    function getPrice() public view returns (uint price) {\r\n        if (now < 1517443200) {\r\n            // presale\r\n            return 3450;\r\n        } else if (1517443200 < now && now <= 1518048000) {\r\n            // 1st week\r\n            return 2400;\r\n        } else if (1518048000 < now && now <= 1518652800) {\r\n            // 2nd week\r\n            return 2300;\r\n        } else if (1518652800 < now && now <= 1519257600) {\r\n            // 3rd week\r\n            return 2200;\r\n        } else if (1519257600 < now && now <= 1519862400) {\r\n            // 4th week\r\n            return 2100;\r\n        } else if (1519862400 < now && now <= 1520467200) {\r\n            // 5th week\r\n            return 2000;\r\n        } else if (1520467200 < now && now <= 1521072000) {\r\n            // 6th week\r\n            return 1900;\r\n        } else if (1521072000 < now && now <= 1521676800) {\r\n            // 7th week\r\n            return 1800;\r\n        } else if (1521676800 < now && now <= 1522281600) {\r\n            // 8th week\r\n            return 1700;\r\n        } else {\r\n            return binary;\r\n        }\r\n    }\r\n\r\n\r\n    function() payable public {\r\n        buy(msg.sender);\r\n    }\r\n    \r\n    \r\n    function buy(address _buyer) payable public {\r\n        // Available only if presale is running.\r\n        require(currentPhase == Phase.Running);\r\n        // require ICO time or binary option\r\n        require(now <= 1522281600 || msg.sender == binaryAddress);\r\n        require(msg.value != 0);\r\n        uint newTokens = msg.value * getPrice();\r\n        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);\r\n        // add new token to buyer\r\n        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);\r\n        // add new token to totalSupply\r\n        totalSupply = totalSupply.add(newTokens);\r\n        emit LogBuy(_buyer,newTokens);\r\n        emit Transfer(this,_buyer,newTokens);\r\n    }\r\n    \r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function burnTokens(address _owner) public\r\n        onlyCrowdsaleManager\r\n    {\r\n        // Available only during migration phase\r\n        require(currentPhase == Phase.Migrating);\r\n\r\n        uint tokens = balanceOf[_owner];\r\n        require(tokens != 0);\r\n        balanceOf[_owner] = 0;\r\n        totalSupply -= tokens;\r\n        emit LogBurn(_owner, tokens);\r\n        emit Transfer(_owner, crowdsaleManager, tokens);\r\n\r\n        // Automatically switch phase when migration is done.\r\n        if (totalSupply == 0) {\r\n            currentPhase = Phase.Migrated;\r\n            emit LogPhaseSwitch(Phase.Migrated);\r\n        }\r\n    }\r\n\r\n\r\n    /*/\r\n     *  Administrative functions\r\n    /*/\r\n    function setPresalePhase(Phase _nextPhase) public\r\n        onlyEscrow\r\n    {\r\n        bool canSwitchPhase\r\n            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\r\n            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\r\n                // switch to migration phase only if crowdsale manager is set\r\n            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\r\n                && _nextPhase == Phase.Migrating\r\n                && crowdsaleManager != 0x0)\r\n            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\r\n                // switch to migrated only if everyting is migrated\r\n            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\r\n                && totalSupply == 0);\r\n\r\n        require(canSwitchPhase);\r\n        currentPhase = _nextPhase;\r\n        emit LogPhaseSwitch(_nextPhase);\r\n    }\r\n\r\n\r\n    function withdrawEther(uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != 0x0);\r\n        // Available at any phase.\r\n        if (address(this).balance > 0) {\r\n            namiMultiSigWallet.transfer(_amount);\r\n        }\r\n    }\r\n    \r\n    function safeWithdraw(address _withdraw, uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\r\n        if (namiWallet.isOwner(_withdraw)) {\r\n            _withdraw.transfer(_amount);\r\n        }\r\n    }\r\n\r\n\r\n    function setCrowdsaleManager(address _mgr) public\r\n        onlyEscrow\r\n    {\r\n        // You can't change crowdsale contract when migration is in progress.\r\n        require(currentPhase != Phase.Migrating);\r\n        crowdsaleManager = _mgr;\r\n    }\r\n\r\n    // internal migrate migration tokens\r\n    function _migrateToken(address _from, address _to)\r\n        internal\r\n    {\r\n        PresaleToken presale = PresaleToken(namiPresale);\r\n        uint256 newToken = presale.balanceOf(_from);\r\n        require(newToken > 0);\r\n        // burn old token\r\n        presale.burnTokens(_from);\r\n        // add new token to _to\r\n        balanceOf[_to] = balanceOf[_to].add(newToken);\r\n        // add new token to totalSupply\r\n        totalSupply = totalSupply.add(newToken);\r\n        emit LogMigrate(_from, _to, newToken);\r\n        emit Transfer(this,_to,newToken);\r\n    }\r\n\r\n    // migate token function for Nami Team\r\n    function migrateToken(address _from, address _to) public\r\n        onlyEscrow\r\n    {\r\n        _migrateToken(_from, _to);\r\n    }\r\n\r\n    // migrate token for investor\r\n    function migrateForInvestor() public {\r\n        _migrateToken(msg.sender, msg.sender);\r\n    }\r\n\r\n    // Nami internal exchange\r\n    \r\n    // event for Nami exchange\r\n    event TransferToBuyer(address indexed _from, address indexed _to, uint _value, address indexed _seller);\r\n    event TransferToExchange(address indexed _from, address indexed _to, uint _value, uint _price);\r\n    \r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the NamiExchange address.\r\n     *      Invokes the `tokenFallbackExchange` function.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallbackExchange` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _price price to sell token.\r\n     */\r\n     \r\n    function transferToExchange(address _to, uint _value, uint _price) public {\r\n        uint codeLength;\r\n        \r\n        assembly {\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender,_to,_value);\r\n        if (codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallbackExchange(msg.sender, _value, _price);\r\n            emit TransferToExchange(msg.sender, _to, _value, _price);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the NamiExchange address.\r\n     *      Invokes the `tokenFallbackBuyer` function.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallbackBuyer` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _buyer address of seller.\r\n     */\r\n     \r\n    function transferToBuyer(address _to, uint _value, address _buyer) public {\r\n        uint codeLength;\r\n        \r\n        assembly {\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender,_to,_value);\r\n        if (codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallbackBuyer(msg.sender, _value, _buyer);\r\n            emit TransferToBuyer(msg.sender, _to, _value, _buyer);\r\n        }\r\n    }\r\n//-------------------------------------------------------------------------------------------------------\r\n}\r\ncontract NamiTrade{\r\n    using SafeMath for uint256;\r\n\r\n    uint public minNac = 0; // min NAC deposit\r\n    uint public minWithdraw =  2000 * 10**18;\r\n    uint public maxWithdraw = 50000 * 10**18; // max NAC withdraw one time\r\n\r\n    constructor(address _escrow, address _namiMultiSigWallet, address _namiAddress) public {\r\n        require(_namiMultiSigWallet != 0x0);\r\n        escrow = _escrow;\r\n        namiMultiSigWallet = _namiMultiSigWallet;\r\n        NamiAddr = _namiAddress;\r\n        // init for migration\r\n        balanceOf[_escrow] = 7850047931491270769372792;\r\n    }\r\n\r\n\r\n    // balance of pool\r\n    uint public NetfBalance;\r\n    /**\r\n     * NetfRevenueBalance:      NetfRevenue[_roundIndex].currentNAC\r\n     * NlfBalance:              NLFunds[currentRound].currentNAC\r\n     * NlfRevenueBalance:       listSubRoundNLF[currentRound][_subRoundIndex].totalNacInSubRound\r\n     */\r\n\r\n\r\n    // escrow has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public escrow;\r\n\r\n    // Gathered funds can be withdraw only to namimultisigwallet's address.\r\n    address public namiMultiSigWallet;\r\n\r\n    /// address of Nami token\r\n    address public NamiAddr;\r\n\r\n    modifier onlyEscrow() {\r\n        require(msg.sender == escrow);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNami {\r\n        require(msg.sender == NamiAddr);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNamiMultisig {\r\n        require(msg.sender == namiMultiSigWallet);\r\n        _;\r\n    }\r\n\r\n    modifier onlyController {\r\n        require(isController[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n\r\n    /*\r\n    *\r\n    * list setting function\r\n    */\r\n    mapping(address => bool) public isController;\r\n\r\n\r\n\r\n    // set controller address\r\n    /**\r\n     * make new controller\r\n     * require input address is not a controller\r\n     * execute any time in sc state\r\n     */\r\n    function setController(address _controller)\r\n    public\r\n    onlyEscrow\r\n    {\r\n        require(!isController[_controller]);\r\n        isController[_controller] = true;\r\n    }\r\n\r\n    /**\r\n     * remove controller\r\n     * require input address is a controller\r\n     * execute any time in sc state\r\n     */\r\n    function removeController(address _controller)\r\n    public\r\n    onlyEscrow\r\n    {\r\n        require(isController[_controller]);\r\n        isController[_controller] = false;\r\n    }\r\n\r\n\r\n    // change minimum nac to deposit\r\n    function changeMinNac(uint _minNAC) public\r\n    onlyEscrow\r\n    {\r\n        require(_minNAC != 0);\r\n        minNac = _minNAC;\r\n    }\r\n\r\n    // change escrow\r\n    function changeEscrow(address _escrow) public\r\n    onlyNamiMultisig\r\n    {\r\n        require(_escrow != 0x0);\r\n        escrow = _escrow;\r\n    }\r\n\r\n\r\n    // min and max for withdraw nac\r\n    function changeMinWithdraw(uint _minWithdraw) public\r\n    onlyEscrow\r\n    {\r\n        require(_minWithdraw != 0);\r\n        minWithdraw = _minWithdraw;\r\n    }\r\n\r\n    function changeMaxWithdraw(uint _maxNac) public\r\n    onlyEscrow\r\n    {\r\n        require(_maxNac != 0);\r\n        maxWithdraw = _maxNac;\r\n    }\r\n\r\n    /// @dev withdraw ether to nami multisignature wallet, only escrow can call\r\n    /// @param _amount value ether in wei to withdraw\r\n    function withdrawEther(uint _amount) public\r\n    onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != 0x0);\r\n        // Available at any phase.\r\n        if (address(this).balance > 0) {\r\n            namiMultiSigWallet.transfer(_amount);\r\n        }\r\n    }\r\n\r\n\r\n    /// @dev withdraw NAC to nami multisignature wallet, only escrow can call\r\n    /// @param _amount value NAC to withdraw\r\n    function withdrawNac(uint _amount) public\r\n    onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != 0x0);\r\n        // Available at any phase.\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        if (namiToken.balanceOf(address(this)) > 0) {\r\n            namiToken.transfer(namiMultiSigWallet, _amount);\r\n        }\r\n    }\r\n\r\n    /*\r\n    *\r\n    *\r\n    * List event\r\n    */\r\n    event Deposit(address indexed user, uint amount, uint timeDeposit);\r\n    event Withdraw(address indexed user, uint amount, uint timeWithdraw);\r\n\r\n    event PlaceBuyFciOrder(address indexed investor, uint amount, uint timePlaceOrder);\r\n    event PlaceSellFciOrder(address indexed investor, uint amount, uint timePlaceOrder);\r\n    event InvestToNLF(address indexed investor, uint amount, uint timeInvest);\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //////////////////////////////////////////////////////fci token function///////////////////////////////////////////////////////////////\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    string public name = \"Nami Trade\";\r\n    string public symbol = \"FCI\";\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    //  paus phrase to compute ratio fci\r\n    bool public isPause;\r\n\r\n    // time expires of price fci\r\n    uint256 public timeExpires;\r\n\r\n    // price fci : if 1 fci = 2 nac => priceFci = 2000000\r\n    uint public fciDecimals = 1000000;\r\n    uint256 public priceFci;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies someone buy fci by NAC\r\n    event BuyFci(address investor, uint256 valueNac, uint256 valueFci, uint timeBuyFci);\r\n    event SellFci(address investor, uint256 valueNac, uint256 valueFci, uint timeSellFci);\r\n    event WithdrawRound(address investor, uint256 valueNac, uint timeWithdraw);\r\n    \r\n    modifier onlyRunning {\r\n        require(isPause == false);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * controller update balance of Netf to smart contract\r\n     */\r\n    function addNacToNetf(uint _valueNac) public onlyController {\r\n        NetfBalance = NetfBalance.add(_valueNac);\r\n    }\r\n\r\n\r\n    /**\r\n     * controller update balance of Netf to smart contract\r\n     */\r\n    function removeNacFromNetf(uint _valueNac) public onlyController {\r\n        NetfBalance = NetfBalance.sub(_valueNac);\r\n    }\r\n\r\n    //////////////////////////////////////////////////////buy and sell fci function//////////////////////////////////////////////////////////\r\n    /**\r\n    *  Setup pause phrase\r\n    */\r\n    function changePause() public onlyController {\r\n        isPause = !isPause;\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * update price fci daily\r\n     */\r\n    function updatePriceFci(uint _price, uint _timeExpires) onlyController public {\r\n        require(now > timeExpires);\r\n        priceFci = _price;\r\n        timeExpires = _timeExpires;\r\n    }\r\n\r\n    /**\r\n     * before buy users need to place buy Order\r\n     * function buy fci\r\n     * only controller can execute in phrase running\r\n     */\r\n    function buyFci(address _buyer, uint _valueNac) onlyController public {\r\n        // require fci is Running\r\n        require(isPause == false && now < timeExpires);\r\n        // require buyer not is 0x0 address\r\n        require(_buyer != 0x0);\r\n        require( _valueNac * fciDecimals > priceFci);\r\n        uint fciReceive = (_valueNac.mul(fciDecimals))/priceFci;\r\n\r\n        // construct fci\r\n        balanceOf[_buyer] = balanceOf[_buyer].add(fciReceive);\r\n        totalSupply = totalSupply.add(fciReceive);\r\n        NetfBalance = NetfBalance.add(_valueNac);\r\n\r\n        emit Transfer(address(this), _buyer, fciReceive);\r\n        emit BuyFci(_buyer, _valueNac, fciReceive, now);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * before controller buy fci for user\r\n     * user nead to place sell order\r\n     */\r\n    function placeSellFciOrder(uint _valueFci) onlyRunning public {\r\n        require(balanceOf[msg.sender] >= _valueFci && _valueFci > 0);\r\n        _transfer(msg.sender, address(this), _valueFci);\r\n        emit PlaceSellFciOrder(msg.sender, _valueFci, now);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * function sellFci\r\n     * only controller can execute in phare running\r\n     */\r\n    function sellFci(address _seller, uint _valueFci) onlyController public {\r\n        // require fci is Running\r\n        require(isPause == false && now < timeExpires);\r\n        // require buyer not is 0x0 address\r\n        require(_seller != 0x0);\r\n        require(_valueFci * priceFci > fciDecimals);\r\n        uint nacReturn = (_valueFci.mul(priceFci))/fciDecimals;\r\n\r\n        // destroy fci\r\n        balanceOf[address(this)] = balanceOf[address(this)].sub(_valueFci);\r\n        totalSupply = totalSupply.sub(_valueFci);\r\n\r\n        // update NETF balance\r\n        NetfBalance = NetfBalance.sub(nacReturn);\r\n\r\n        // send NAC\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        namiToken.transfer(_seller, nacReturn);\r\n\r\n        emit SellFci(_seller, nacReturn, _valueFci, now);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////NETF Revenue function///////////////////////////////////////////////////////////////\r\n    struct ShareHolderNETF {\r\n        uint stake;\r\n        bool isWithdrawn;\r\n    }\r\n\r\n    struct RoundNetfRevenue {\r\n        bool isOpen;\r\n        uint currentNAC;\r\n        uint totalFci;\r\n        bool withdrawable;\r\n    }\r\n\r\n    uint public currentNetfRound;\r\n\r\n    mapping (uint => RoundNetfRevenue) public NetfRevenue;\r\n    mapping (uint => mapping(address => ShareHolderNETF)) public usersNETF;\r\n\r\n    // 1. open Netf round\r\n    /**\r\n     * first controller open one round for netf revenue\r\n     */\r\n    function openNetfRevenueRound(uint _roundIndex) onlyController public {\r\n        require(NetfRevenue[_roundIndex].isOpen == false);\r\n        currentNetfRound = _roundIndex;\r\n        NetfRevenue[_roundIndex].isOpen = true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * this function update balance of NETF revenue funds add NAC to funds\r\n     * only executable if round open and round not withdraw yet\r\n     */\r\n    function depositNetfRevenue(uint _valueNac) onlyController public {\r\n        require(NetfRevenue[currentNetfRound].isOpen == true && NetfRevenue[currentNetfRound].withdrawable == false);\r\n        NetfRevenue[currentNetfRound].currentNAC = NetfRevenue[currentNetfRound].currentNAC.add(_valueNac);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * this function update balance of NETF Funds remove NAC from funds\r\n     * only executable if round open and round not withdraw yet\r\n     */\r\n    function withdrawNetfRevenue(uint _valueNac) onlyController public {\r\n        require(NetfRevenue[currentNetfRound].isOpen == true && NetfRevenue[currentNetfRound].withdrawable == false);\r\n        NetfRevenue[currentNetfRound].currentNAC = NetfRevenue[currentNetfRound].currentNAC.sub(_valueNac);\r\n    }\r\n\r\n    // switch to pause phrase here\r\n\r\n    /**\r\n     * after pause all investor to buy, sell and exchange fci on the market\r\n     * controller or investor latch final fci of current round\r\n     */\r\n    function latchTotalFci(uint _roundIndex) onlyController public {\r\n        require(isPause == true && NetfRevenue[_roundIndex].isOpen == true);\r\n        require(NetfRevenue[_roundIndex].withdrawable == false);\r\n        NetfRevenue[_roundIndex].totalFci = totalSupply;\r\n    }\r\n\r\n    function latchFciUserController(uint _roundIndex, address _investor) onlyController public {\r\n        require(isPause == true && NetfRevenue[_roundIndex].isOpen == true);\r\n        require(NetfRevenue[_roundIndex].withdrawable == false);\r\n        require(balanceOf[_investor] > 0);\r\n        usersNETF[_roundIndex][_investor].stake = balanceOf[_investor];\r\n    }\r\n\r\n    /**\r\n     * investor can latch Fci by themself\r\n     */\r\n    function latchFciUser(uint _roundIndex) public {\r\n        require(isPause == true && NetfRevenue[_roundIndex].isOpen == true);\r\n        require(NetfRevenue[_roundIndex].withdrawable == false);\r\n        require(balanceOf[msg.sender] > 0);\r\n        usersNETF[_roundIndex][msg.sender].stake = balanceOf[msg.sender];\r\n    }\r\n\r\n    /**\r\n     * after all investor latch fci, controller change round state withdrawable\r\n     * now investor can withdraw NAC from NetfRevenue funds of this round\r\n     * and auto switch to unpause phrase\r\n     */\r\n    function changeWithdrawableNetfRe(uint _roundIndex) onlyController public {\r\n        require(isPause == true && NetfRevenue[_roundIndex].isOpen == true);\r\n        NetfRevenue[_roundIndex].withdrawable = true;\r\n        isPause = false;\r\n    }\r\n\r\n    // after latch all investor, unpause here\r\n    /**\r\n     * withdraw NAC for\r\n     * run by controller\r\n     */\r\n    function withdrawNacNetfReController(uint _roundIndex, address _investor) onlyController public {\r\n        require(NetfRevenue[_roundIndex].withdrawable == true && isPause == false && _investor != 0x0);\r\n        require(usersNETF[_roundIndex][_investor].stake > 0 && usersNETF[_roundIndex][_investor].isWithdrawn == false);\r\n        require(NetfRevenue[_roundIndex].totalFci > 0);\r\n        // withdraw NAC\r\n        uint nacReturn = ( NetfRevenue[_roundIndex].currentNAC.mul(usersNETF[_roundIndex][_investor].stake) ) / NetfRevenue[_roundIndex].totalFci;\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        namiToken.transfer(_investor, nacReturn);\r\n\r\n        usersNETF[_roundIndex][_investor].isWithdrawn = true;\r\n    }\r\n\r\n    /**\r\n     * withdraw NAC for\r\n     * run by investor\r\n     */\r\n    function withdrawNacNetfRe(uint _roundIndex) public {\r\n        require(NetfRevenue[_roundIndex].withdrawable == true && isPause == false);\r\n        require(usersNETF[_roundIndex][msg.sender].stake > 0 && usersNETF[_roundIndex][msg.sender].isWithdrawn == false);\r\n        require(NetfRevenue[_roundIndex].totalFci > 0);\r\n        // withdraw NAC\r\n        uint nacReturn = ( NetfRevenue[_roundIndex].currentNAC.mul(usersNETF[_roundIndex][msg.sender].stake) ) / NetfRevenue[_roundIndex].totalFci;\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        namiToken.transfer(msg.sender, nacReturn);\r\n\r\n        usersNETF[_roundIndex][msg.sender].isWithdrawn = true;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////token fci function//////////////////////////////////////////////////////////////////\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public onlyRunning {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyRunning returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public onlyRunning\r\n    returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    public onlyRunning\r\n    returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //////////////////////////////////////////////////////end fci token function///////////////////////////////////////////////////////////\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //////////////////////////////////////////////////////pool function////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    uint public currentRound = 1;\r\n    uint public currentSubRound = 1;\r\n\r\n    struct shareHolderNLF {\r\n        uint fciNLF;\r\n        bool isWithdrawnRound;\r\n    }\r\n\r\n    struct SubRound {\r\n        uint totalNacInSubRound;\r\n        bool isOpen;\r\n        bool isCloseNacPool;\r\n    }\r\n\r\n    struct Round {\r\n        bool isOpen;\r\n        bool isActivePool;\r\n        bool withdrawable;\r\n        uint currentNAC;\r\n        uint finalNAC;\r\n    }\r\n\r\n    // NLF Funds\r\n    mapping(uint => Round) public NLFunds;\r\n    mapping(uint => mapping(address => mapping(uint => bool))) public isWithdrawnSubRoundNLF;\r\n    mapping(uint => mapping(uint => SubRound)) public listSubRoundNLF;\r\n    mapping(uint => mapping(address => shareHolderNLF)) public membersNLF;\r\n\r\n\r\n    event ActivateRound(uint RoundIndex, uint TimeActive);\r\n    event ActivateSubRound(uint RoundIndex, uint TimeActive);\r\n    // ------------------------------------------------\r\n    /**\r\n     * Admin function\r\n     * Open and Close Round\r\n     */\r\n    function activateRound(uint _roundIndex)\r\n    onlyEscrow\r\n    public\r\n    {\r\n        // require round not open\r\n        require(NLFunds[_roundIndex].isOpen == false);\r\n        NLFunds[_roundIndex].isOpen = true;\r\n        currentRound = _roundIndex;\r\n        emit ActivateRound(_roundIndex, now);\r\n    }\r\n\r\n    ///////////////////////deposit to NLF funds in tokenFallbackExchange///////////////////////////////\r\n    /**\r\n     * after all user deposit to NLF pool\r\n     */\r\n    function deactivateRound(uint _roundIndex)\r\n    onlyEscrow\r\n    public\r\n    {\r\n        // require round id is openning\r\n        require(NLFunds[_roundIndex].isOpen == true);\r\n        NLFunds[_roundIndex].isActivePool = true;\r\n        NLFunds[_roundIndex].isOpen = false;\r\n        NLFunds[_roundIndex].finalNAC = NLFunds[_roundIndex].currentNAC;\r\n    }\r\n\r\n    /**\r\n     * before send NAC to subround controller need active subround\r\n     */\r\n    function activateSubRound(uint _subRoundIndex)\r\n    onlyController\r\n    public\r\n    {\r\n        // require current round is not open and pool active\r\n        require(NLFunds[currentRound].isOpen == false && NLFunds[currentRound].isActivePool == true);\r\n        // require sub round not open\r\n        require(listSubRoundNLF[currentRound][_subRoundIndex].isOpen == false);\r\n        //\r\n        currentSubRound = _subRoundIndex;\r\n        require(listSubRoundNLF[currentRound][_subRoundIndex].isCloseNacPool == false);\r\n\r\n        listSubRoundNLF[currentRound][_subRoundIndex].isOpen = true;\r\n        emit ActivateSubRound(_subRoundIndex, now);\r\n    }\r\n\r\n\r\n    /**\r\n     * every week controller deposit to subround to send NAC to all user have NLF fci\r\n     */\r\n    function depositToSubRound(uint _value)\r\n    onlyController\r\n    public\r\n    {\r\n        // require sub round is openning\r\n        require(currentSubRound != 0);\r\n        require(listSubRoundNLF[currentRound][currentSubRound].isOpen == true);\r\n        require(listSubRoundNLF[currentRound][currentSubRound].isCloseNacPool == false);\r\n\r\n        // modify total NAC in each subround\r\n        listSubRoundNLF[currentRound][currentSubRound].totalNacInSubRound = listSubRoundNLF[currentRound][currentSubRound].totalNacInSubRound.add(_value);\r\n    }\r\n\r\n\r\n    /**\r\n     * every week controller deposit to subround to send NAC to all user have NLF fci\r\n     */\r\n    function withdrawFromSubRound(uint _value)\r\n    onlyController\r\n    public\r\n    {\r\n        // require sub round is openning\r\n        require(currentSubRound != 0);\r\n        require(listSubRoundNLF[currentRound][currentSubRound].isOpen == true);\r\n        require(listSubRoundNLF[currentRound][currentSubRound].isCloseNacPool == false);\r\n\r\n        // modify total NAC in each subround\r\n        listSubRoundNLF[currentRound][currentSubRound].totalNacInSubRound = listSubRoundNLF[currentRound][currentSubRound].totalNacInSubRound.sub(_value);\r\n    }\r\n\r\n\r\n    /**\r\n     * controller close deposit subround phrase and user can withdraw NAC from subround\r\n     */\r\n    function closeDepositSubRound()\r\n    onlyController\r\n    public\r\n    {\r\n        require(listSubRoundNLF[currentRound][currentSubRound].isOpen == true);\r\n        require(listSubRoundNLF[currentRound][currentSubRound].isCloseNacPool == false);\r\n\r\n        listSubRoundNLF[currentRound][currentSubRound].isCloseNacPool = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * user withdraw NAC from each subround of NLF funds for investor\r\n     */\r\n    function withdrawSubRound(uint _roundIndex, uint _subRoundIndex) public {\r\n        // require close deposit to subround\r\n        require(listSubRoundNLF[_roundIndex][_subRoundIndex].isCloseNacPool == true);\r\n\r\n        // user not ever withdraw nac in this subround\r\n        require(isWithdrawnSubRoundNLF[_roundIndex][msg.sender][_subRoundIndex] == false);\r\n\r\n        // require user have fci\r\n        require(membersNLF[_roundIndex][msg.sender].fciNLF > 0);\r\n\r\n        // withdraw token\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n\r\n        uint nacReturn = (listSubRoundNLF[_roundIndex][_subRoundIndex].totalNacInSubRound.mul(membersNLF[_roundIndex][msg.sender].fciNLF)).div(NLFunds[_roundIndex].finalNAC);\r\n        namiToken.transfer(msg.sender, nacReturn);\r\n\r\n        isWithdrawnSubRoundNLF[_roundIndex][msg.sender][_subRoundIndex] = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * controller of NLF add NAC to update NLF balance\r\n     * this NAC come from 10% trading revenue\r\n     */\r\n    function addNacToNLF(uint _value) public onlyController {\r\n        require(NLFunds[currentRound].isActivePool == true);\r\n        require(NLFunds[currentRound].withdrawable == false);\r\n\r\n        NLFunds[currentRound].currentNAC = NLFunds[currentRound].currentNAC.add(_value);\r\n    }\r\n\r\n    /**\r\n     * controller get NAC from NLF pool to send to trader\r\n     */\r\n\r\n    function removeNacFromNLF(uint _value) public onlyController {\r\n        require(NLFunds[currentRound].isActivePool == true);\r\n        require(NLFunds[currentRound].withdrawable == false);\r\n\r\n        NLFunds[currentRound].currentNAC = NLFunds[currentRound].currentNAC.sub(_value);\r\n    }\r\n\r\n    /**\r\n     * end of round escrow run this to allow user sell fci to receive NAC\r\n     */\r\n    function changeWithdrawableRound(uint _roundIndex)\r\n    public\r\n    onlyEscrow\r\n    {\r\n        require(NLFunds[_roundIndex].isActivePool == true);\r\n        require(NLFunds[_roundIndex].withdrawable == false && NLFunds[_roundIndex].isOpen == false);\r\n\r\n        NLFunds[_roundIndex].withdrawable = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Internal Withdraw round, only can be called by this contract\r\n     */\r\n    function _withdrawRound(uint _roundIndex, address _investor) internal {\r\n        require(NLFunds[_roundIndex].withdrawable == true);\r\n        require(membersNLF[_roundIndex][_investor].isWithdrawnRound == false);\r\n        require(membersNLF[_roundIndex][_investor].fciNLF > 0);\r\n\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        uint nacReturn = NLFunds[_roundIndex].currentNAC.mul(membersNLF[_roundIndex][_investor].fciNLF).div(NLFunds[_roundIndex].finalNAC);\r\n        namiToken.transfer(msg.sender, nacReturn);\r\n\r\n        // update status round\r\n        membersNLF[_roundIndex][_investor].isWithdrawnRound = true;\r\n        membersNLF[_roundIndex][_investor].fciNLF = 0;\r\n        emit WithdrawRound(_investor, nacReturn, now);\r\n    }\r\n\r\n    /**\r\n     * end of round user sell fci to receive NAC from NLF funds\r\n     * function for investor\r\n     */\r\n    function withdrawRound(uint _roundIndex) public {\r\n        _withdrawRound(_roundIndex, msg.sender);\r\n    }\r\n\r\n    function withdrawRoundController(uint _roundIndex, address _investor) public onlyController {\r\n        _withdrawRound(_roundIndex, _investor);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * fall back function call from nami crawsale smart contract\r\n     * deposit NAC to NAMI TRADE broker, invest to NETF and NLF funds\r\n     */\r\n    function tokenFallbackExchange(address _from, uint _value, uint _choose) onlyNami public returns (bool success) {\r\n        require(_choose <= 2);\r\n        if (_choose == 0) {\r\n            // deposit NAC to nami trade broker\r\n            require(_value >= minNac);\r\n            emit Deposit(_from, _value, now);\r\n        } else if(_choose == 1) {\r\n            require(_value >= minNac && NLFunds[currentRound].isOpen == true);\r\n            // invest to NLF funds\r\n            membersNLF[currentRound][_from].fciNLF = membersNLF[currentRound][_from].fciNLF.add(_value);\r\n            NLFunds[currentRound].currentNAC = NLFunds[currentRound].currentNAC.add(_value);\r\n\r\n            emit InvestToNLF(_from, _value, now);\r\n        } else if(_choose == 2) {\r\n            // invest NAC to NETF Funds\r\n            require(_value >= minNac); // msg.value >= 0.1 ether\r\n            emit PlaceBuyFciOrder(_from, _value, now);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    /////////////////////////////////////////////////////////////////////////////end pool function///////////////////////////////////////////////////////////////////\r\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // withdraw token\r\n    function withdrawToken(address _account, uint _amount)\r\n    public\r\n    onlyController\r\n    {\r\n        require(_amount >= minWithdraw && _amount <= maxWithdraw);\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n\r\n        uint previousBalances = namiToken.balanceOf(address(this));\r\n        require(previousBalances >= _amount);\r\n\r\n        // transfer token\r\n        namiToken.transfer(_account, _amount);\r\n\r\n        // emit event\r\n        emit Withdraw(_account, _amount, now);\r\n        assert(previousBalances >= namiToken.balanceOf(address(this)));\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_valueNac\",\"type\":\"uint256\"}],\"name\":\"withdrawNetfRevenue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"namiMultiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSubRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNac\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"activateRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxNac\",\"type\":\"uint256\"}],\"name\":\"changeMaxWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFci\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_timeExpires\",\"type\":\"uint256\"}],\"name\":\"updatePriceFci\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"openNetfRevenueRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valueNac\",\"type\":\"uint256\"}],\"name\":\"removeNacFromNetf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"changeWithdrawableRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_valueFci\",\"type\":\"uint256\"}],\"name\":\"sellFci\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"},{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"latchFciUserController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minNAC\",\"type\":\"uint256\"}],\"name\":\"changeMinNac\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersNETF\",\"outputs\":[{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"isWithdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isWithdrawnSubRoundNLF\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NamiAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"removeNacFromNLF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeExpires\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valueNac\",\"type\":\"uint256\"}],\"name\":\"addNacToNetf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listSubRoundNLF\",\"outputs\":[{\"name\":\"totalNacInSubRound\",\"type\":\"uint256\"},{\"name\":\"isOpen\",\"type\":\"bool\"},{\"name\":\"isCloseNacPool\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeDepositSubRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addNacToNLF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawNacNetfRe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNac\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NetfRevenue\",\"outputs\":[{\"name\":\"isOpen\",\"type\":\"bool\"},{\"name\":\"currentNAC\",\"type\":\"uint256\"},{\"name\":\"totalFci\",\"type\":\"uint256\"},{\"name\":\"withdrawable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"membersNLF\",\"outputs\":[{\"name\":\"fciNLF\",\"type\":\"uint256\"},{\"name\":\"isWithdrawnRound\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositToSubRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSubRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"},{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"withdrawNacNetfReController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valueFci\",\"type\":\"uint256\"}],\"name\":\"placeSellFciOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"},{\"name\":\"_subRoundIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawSubRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valueNac\",\"type\":\"uint256\"}],\"name\":\"depositNetfRevenue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minWithdraw\",\"type\":\"uint256\"}],\"name\":\"changeMinWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"},{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"withdrawRoundController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_choose\",\"type\":\"uint256\"}],\"name\":\"tokenFallbackExchange\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"changeEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NLFunds\",\"outputs\":[{\"name\":\"isOpen\",\"type\":\"bool\"},{\"name\":\"isActivePool\",\"type\":\"bool\"},{\"name\":\"withdrawable\",\"type\":\"bool\"},{\"name\":\"currentNAC\",\"type\":\"uint256\"},{\"name\":\"finalNAC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fciDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_valueNac\",\"type\":\"uint256\"}],\"name\":\"buyFci\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"latchFciUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentNetfRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"deactivateRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_subRoundIndex\",\"type\":\"uint256\"}],\"name\":\"activateSubRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"latchTotalFci\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"changeWithdrawableNetfRe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NetfBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_namiMultiSigWallet\",\"type\":\"address\"},{\"name\":\"_namiAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeWithdraw\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timePlaceOrder\",\"type\":\"uint256\"}],\"name\":\"PlaceBuyFciOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timePlaceOrder\",\"type\":\"uint256\"}],\"name\":\"PlaceSellFciOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeInvest\",\"type\":\"uint256\"}],\"name\":\"InvestToNLF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueNac\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"valueFci\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeBuyFci\",\"type\":\"uint256\"}],\"name\":\"BuyFci\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueNac\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"valueFci\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeSellFci\",\"type\":\"uint256\"}],\"name\":\"SellFci\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueNac\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeWithdraw\",\"type\":\"uint256\"}],\"name\":\"WithdrawRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"RoundIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TimeActive\",\"type\":\"uint256\"}],\"name\":\"ActivateRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"RoundIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TimeActive\",\"type\":\"uint256\"}],\"name\":\"ActivateSubRound\",\"type\":\"event\"}]","ContractName":"NamiTrade","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000591c1bfac76a5a5a61fafc6d17489916112119820000000000000000000000004e237f139582708a592a14034b3c1a5b38da45a60000000000000000000000008d80de8a78198396329dfa769ad54d24bf90e7aa","Library":"","SwarmSource":"bzzr://bb0eb5c975e7b56866354ee829e5a3e15c96f349f4900d6f16449b9a62614986"}]}