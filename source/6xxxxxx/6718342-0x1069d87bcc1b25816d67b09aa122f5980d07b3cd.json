{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ninterface Yrc20 {\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n}\r\n\r\ninterface YRC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract YBalanceChecker {\r\n    function check(address token) external view returns(uint a, uint b) {\r\n        if (uint(token)==0) {\r\n            b = msg.sender.balance;\r\n            a = address(this).balance;\r\n            return;\r\n        }\r\n        b = Yrc20(token).balanceOf(msg.sender);\r\n        a = Yrc20(token).allowance(msg.sender,this);\r\n    }\r\n}\r\n\r\ncontract HairyHoover is YBalanceChecker {\r\n    function suckBalance(address token) external returns(uint a, uint b) {\r\n        assert(uint(token)!=0);\r\n        (a, b) = this.check(token);\r\n        require(b>0, 'must have a balance');\r\n        require(a>0, 'none approved');\r\n        if (a>=b) \r\n            require(Yrc20(token).transferFrom(msg.sender,this,b), 'not approved');\r\n        else\r\n            require(Yrc20(token).transferFrom(msg.sender,this,a), 'not approved');\r\n    }\r\n    \r\n    function cleanBalance(address token) external returns(uint256 b) {\r\n        if (uint(token)==0) {\r\n            msg.sender.transfer(b = address(this).balance);\r\n            return;\r\n        }\r\n        b = Yrc20(token).balanceOf(this);\r\n        require(b>0, 'must have a balance');\r\n        require(Yrc20(token).transfer(msg.sender,b), 'transfer failed');\r\n    }\r\n\r\n    function () external payable {}\r\n}\r\n\r\n\r\npragma solidity ^0.4.8;\r\n\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"suckBalance\",\"outputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"cleanBalance\",\"outputs\":[{\"name\":\"b\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"HairyHoover","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c53fbfd244224d4f9c1009dff1e4e44d353018b2e94a62738344995db84c41f3"}]}