{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\n\r\ncontract Utils {\r\n\tfunction Utils() public {\r\n\t}\r\n\r\n\t// function compareStrings (string a, string b) view returns (bool){\r\n\t// \treturn keccak256(a) == keccak256(b);\r\n\t// }\r\n\r\n\t// // verifies that an amount is greater than zero\r\n\t// modifier greaterThanZero(uint256 _amount) {\r\n\t//     require(_amount > 0);\r\n\t//     _;\r\n\t// }\r\n\r\n\t// validates an address - currently only checks that it isn't null\r\n\tmodifier validAddress(address _address) {\r\n\t    require(_address != address(0));\r\n\t    _;\r\n\t}\r\n\r\n\t// verifies that the address is different than this contract address\r\n\tmodifier notThis(address _address) {\r\n\t    require(_address != address(this));\r\n\t    _;\r\n\t}\r\n\r\n\tfunction strlen(string s) internal pure returns (uint) {\r\n\t\t// Starting here means the LSB will be the byte we care about\r\n\t\tuint ptr;\r\n\t\tuint end;\r\n\t\tassembly {\r\n\t\t\tptr := add(s, 1)\r\n\t\t\tend := add(mload(s), ptr)\r\n\t\t}\r\n\r\n\t\tfor (uint len = 0; ptr < end; len++) {\r\n\t\t\tuint8 b;\r\n\t\t\tassembly { b := and(mload(ptr), 0xFF) }\r\n\t\t\tif (b < 0x80) {\r\n\t\t\t\tptr += 1;\r\n\t\t\t} else if(b < 0xE0) {\r\n\t\t\t\tptr += 2;\r\n\t\t\t} else if(b < 0xF0) {\r\n\t\t\t\tptr += 3;\r\n\t\t\t} else if(b < 0xF8) {\r\n\t\t\t\tptr += 4;\r\n\t\t\t} else if(b < 0xFC) {\r\n\t\t\t\tptr += 5;\r\n\t\t\t} else {\r\n\t\t\t\tptr += 6;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn len;\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\ncontract SafeMath {\r\n\tfunction SafeMath() {\r\n\t}\r\n\r\n\tfunction safeAdd(uint256 _x, uint256 _y) internal returns (uint256) {\r\n\t\tuint256 z = _x + _y;\r\n\t\tassert(z >= _x);\r\n\t\treturn z;\r\n\t}\r\n\r\n\tfunction safeSub(uint256 _x, uint256 _y) internal returns (uint256) {\r\n\t\tassert(_x >= _y);\r\n\t\treturn _x - _y;\r\n\t}\r\n\r\n\tfunction safeMul(uint256 _x, uint256 _y) internal returns (uint256) {\r\n\t\tuint256 z = _x * _y;\r\n\t\tassert(_x == 0 || z / _x == _y);\r\n\t\treturn z;\r\n\t}\r\n\r\n\tfunction safeDiv(uint a, uint b) internal returns (uint256) {\r\n\t\tassert(b > 0);\r\n\t\treturn a / b;\r\n\t}\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n    // function totalSupply() public constant returns (uint);\r\n    // function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    // function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*\r\n    Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the contract ownership\r\n        the new owner still needs to accept the transfer\r\n        can only be called by the contract owner\r\n\r\n        @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n        @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract bundinha is Utils {\r\n\tuint N;\r\n\tstring bundinha;\r\n\r\n\r\n\tfunction setN(uint x) public {\r\n\t\tN = x;\r\n\t}\r\n\r\n\tfunction getN() constant public returns (uint) {\r\n\t\treturn N;\r\n\t}\r\n\r\n\tfunction setBundinha(string x) public {\r\n\t\trequire(strlen(x) <= 32);\r\n\t\tbundinha = x;\r\n\t}\r\n\r\n\tfunction getBundinha() constant public returns (string){\r\n\t\treturn bundinha;\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract SomeCoin is Utils, ERC20Interface, Owned, SafeMath, bundinha {\r\n\tuint myVariable;\r\n\tstring bundinha;\r\n\r\n\tstring public name = '';\r\n\tstring public symbol = '';\r\n\tuint8 public decimals = 0;\r\n\tuint256 public totalSupply = 0;\r\n\tuint256 public maxSupply = 50000000000000000000000;\r\n\t\t\t\t\t\t\t// 50000.\r\n\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Issuance(uint256 _amount);\r\n\r\n\t// function SomeCoin(string _name, string _symbol, uint8 _decimals, uint256 supply) {\r\n\tfunction SomeCoin(string _name, string _symbol, uint8 _decimals) {\r\n\t\trequire(bytes(_name).length > 0 && bytes(_symbol).length > 0); // validate input\r\n\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tdecimals = _decimals;\r\n\t\t// totalSupply = supply;\r\n\t}\r\n\r\n\tfunction validSupply() private returns(bool) {\r\n\t\treturn totalSupply <= maxSupply;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value)\r\n\t\tpublic\r\n\t\tvalidAddress(_to)\r\n\t\treturns (bool success)\r\n\t{\r\n\t\tbalanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\r\n\t\tbalanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value)\r\n\t\tpublic\r\n\t\tvalidAddress(_from)\r\n\t\tvalidAddress(_to)\r\n\t\treturns (bool success)\r\n\t{\r\n\t\tallowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\r\n\t\tbalanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n\t\tbalanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _value)\r\n\t\tpublic\r\n\t\tvalidAddress(_spender)\r\n\t\treturns (bool success)\r\n\t{\r\n\t\trequire(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction issue(address _to, uint256 _amount)\r\n\t    public\r\n\t    ownerOnly\r\n\t    validAddress(_to)\r\n\t    notThis(_to)\r\n\t{\r\n\t    totalSupply = safeAdd(totalSupply, _amount);\r\n\t    balanceOf[_to] = safeAdd(balanceOf[_to], _amount);\r\n\r\n\t    require(validSupply());\r\n\r\n\t    Issuance(_amount);\r\n\t    Transfer(this, _to, _amount);\r\n\t}\r\n\r\n\tfunction transferAnyERC20Token(address _token, address _to, uint256 _amount)\r\n\t\tpublic\r\n\t\townerOnly\r\n\t    validAddress(_token)\r\n\t\treturns (bool success)\r\n\t{\r\n\t\treturn ERC20Interface(_token).transfer(_to, _amount);\r\n\t}\r\n\r\n\t// Don't accept ETH\r\n\tfunction () payable {\r\n\t\trevert();\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"string\"}],\"name\":\"setBundinha\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"setN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBundinha\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"SomeCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000e4f67726f4d61676963546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f4d540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://4fa448560a38582156c142c1c548d8a58f3a1b6f12e407c316a251bef707d88a"}]}