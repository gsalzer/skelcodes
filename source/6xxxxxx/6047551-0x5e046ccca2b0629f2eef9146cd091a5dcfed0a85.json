{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// Gives the owner the ability to transfer ownership of the contract to a new\r\n/// address and it requires the owner of the new address to accept the transfer.\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n\r\n/// @title Admin functionality for TRVLToken.sol contracts.\r\ncontract Admin is Claimable{\r\n    mapping(address => bool) public admins;\r\n\r\n    event AdminAdded(address added);\r\n    event AdminRemoved(address removed);\r\n\r\n    /// @dev Verifies the msg.sender is a member of the admins mapping. Owner is by default an admin.\r\n    modifier onlyAdmin() {\r\n        require(admins[msg.sender] || msg.sender == owner, \"msg.sender is not an admin!\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Adds a list of addresses to the admins list.\r\n    /// @dev Requires that the msg.sender is the Owner. Emits an event on success.\r\n    /// @param _admins The list of addresses to add to the admins mapping.\r\n    function addAddressesToAdmins(address[] _admins) external onlyOwner {\r\n        require(_admins.length > 0, \"Cannot add an empty list to admins!\");\r\n        for (uint256 i = 0; i < _admins.length; ++i) {\r\n            address user = _admins[i];\r\n            require(user != address(0), \"Cannot add the zero address to admins!\");\r\n\r\n            if (!admins[user]) {\r\n                admins[user] = true;\r\n\r\n                emit AdminAdded(user);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Removes a list of addresses from the admins list.\r\n    /// @dev Requires that the msg.sender is an Owner. It is possible for the admins list to be empty, this is a fail safe\r\n    /// in the event the admin accounts are compromised. The owner has the ability to lockout the server access from which\r\n    /// TravelBlock is processing payments. Emits an event on success.\r\n    /// @param _admins The list of addresses to remove from the admins mapping.\r\n    function removeAddressesFromAdmins(address[] _admins) external onlyOwner {\r\n        require(_admins.length > 0, \"Cannot remove an empty list to admins!\");\r\n        for (uint256 i = 0; i < _admins.length; ++i) {\r\n            address user = _admins[i];\r\n\r\n            if (admins[user]) {\r\n                admins[user] = false;\r\n\r\n                emit AdminRemoved(user);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/// @title Whitelist configurations for the TRVL Token contract.\r\ncontract Whitelist is Admin {\r\n    mapping(address => bool) public whitelist;\r\n\r\n    event WhitelistAdded(address added);\r\n    event WhitelistRemoved(address removed);\r\n\r\n    /// @dev Verifies the user is whitelisted.\r\n    modifier isWhitelisted(address _user) {\r\n        require(whitelist[_user] != false, \"User is not whitelisted!\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Adds a list of addresses to the whitelist.\r\n    /// @dev Requires that the msg.sender is the Admin. Emits an event on success.\r\n    /// @param _users The list of addresses to add to the whitelist.\r\n    function addAddressesToWhitelist(address[] _users) external onlyAdmin {\r\n        require(_users.length > 0, \"Cannot add an empty list to whitelist!\");\r\n        for (uint256 i = 0; i < _users.length; ++i) {\r\n            address user = _users[i];\r\n            require(user != address(0), \"Cannot add the zero address to whitelist!\");\r\n\r\n            if (!whitelist[user]) {\r\n                whitelist[user] = true;\r\n\r\n                emit WhitelistAdded(user);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Removes a list of addresses from the whitelist.\r\n    /// @dev Requires that the msg.sender is an Admin. Emits an event on success.\r\n    /// @param _users The list of addresses to remove from the whitelist.\r\n    function removeAddressesFromWhitelist(address[] _users) external onlyAdmin {\r\n        require(_users.length > 0, \"Cannot remove an empty list to whitelist!\");\r\n        for (uint256 i = 0; i < _users.length; ++i) {\r\n            address user = _users[i];\r\n\r\n            if (whitelist[user]) {\r\n                whitelist[user] = false;\r\n\r\n                emit WhitelistRemoved(user);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// Standard ERC20 token with the ability to freeze and unfreeze token transfer.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n\r\n/// Blocks ERC223 tokens and allows the smart contract to transfer ownership of\r\n/// ERC20 tokens that are sent to the contract address.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Contracts that should not own Tokens\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\r\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\r\n * owner to reclaim the tokens.\r\n */\r\ncontract HasNoTokens is CanReclaimToken {\r\n\r\n /**\r\n  * @dev Reject all ERC223 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ uint256 the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint256 value_, bytes data_) external {\r\n    from_;\r\n    value_;\r\n    data_;\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/// @title Reward Token contract that contains all reward token configurations.\r\ncontract RewardToken is PausableToken, Whitelist, HasNoTokens{\r\n    /// @dev Any token balances added here must be removed from the balances map.\r\n    mapping(address => uint256) public rewardBalances;\r\n\r\n    uint256[] public rewardPercentage;\r\n    uint256 public rewardPercentageDecimals;\r\n    uint256 public rewardPercentageDivisor;\r\n\r\n    event RewardPercentage(uint256 index, uint256 percentage);\r\n\r\n    /// @dev Verifies the reward index is valid.\r\n    modifier isValidRewardIndex(uint256 _index) {\r\n        require(_index < rewardPercentage.length, \"The reward percentage index does not exist!\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Verifies the reward percentage is valid.\r\n    modifier isValidRewardPercentage(uint256 _percentage) {\r\n        require(_percentage <= rewardPercentageDivisor, \"Cannot have a reward percentage greater than 100%!\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _rewardPercentageDecimals) public {\r\n        rewardPercentageDecimals = _rewardPercentageDecimals;\r\n        rewardPercentageDivisor = (10 ** uint256(_rewardPercentageDecimals)).mul(100);\r\n    }\r\n\r\n    /// @notice Adds a reward percentage to the list of available reward percentages, specific to 18 decimals.\r\n    /// @dev To achieve an affective 5% bonus, the sender needs to use 5 x 10^18.\r\n    /// Requires:\r\n    ///     - Msg.sender is an admin\r\n    ///     - Percentage is <= 100%\r\n    /// @param _percentage The new percentage specific to 18 decimals.\r\n    /// @return The index of the percentage added in the rewardPercentage array.\r\n    function addRewardPercentage(uint256 _percentage) public onlyAdmin isValidRewardPercentage(_percentage) returns (uint256 _index) {\r\n        _index = rewardPercentage.length;\r\n        rewardPercentage.push(_percentage);\r\n\r\n        emit RewardPercentage(_index, _percentage);\r\n    }\r\n\r\n    /// @notice Edits the contents of the percentage array, with the specified parameters.\r\n    /// @dev Allows the owner to edit percentage array contents for a given index.\r\n    /// Requires:\r\n    ///     - Msg.sender is an admin\r\n    ///     - The index must be within the bounds of the rewardPercentage array\r\n    ///     - The new percentage must be <= 100%\r\n    /// @param _index The index of the percentage to be edited.\r\n    /// @param _percentage The new percentage to be used for the given index.\r\n    function updateRewardPercentageByIndex(uint256 _index, uint256 _percentage)\r\n        public\r\n        onlyAdmin\r\n        isValidRewardIndex(_index)\r\n        isValidRewardPercentage(_percentage)\r\n    {\r\n        rewardPercentage[_index] = _percentage;\r\n\r\n        emit RewardPercentage(_index, _percentage);\r\n    }\r\n\r\n    /// @dev Calculates the reward based on the reward percentage index.\r\n    /// Requires:\r\n    ///     - The index must be within the bounds of the rewardPercentage array\r\n    /// @param _amount The amount tokens to be converted to rewards.\r\n    /// @param _rewardPercentageIndex The location of reward percentage to be applied.\r\n    /// @return The amount of tokens converted to reward tokens.\r\n    function getRewardToken(uint256 _amount, uint256 _rewardPercentageIndex)\r\n        internal\r\n        view\r\n        isValidRewardIndex(_rewardPercentageIndex)\r\n        returns(uint256 _rewardToken)\r\n    {\r\n        _rewardToken = _amount.mul(rewardPercentage[_rewardPercentageIndex]).div(rewardPercentageDivisor);\r\n    }\r\n}\r\n\r\n\r\n\r\n/// @title TRVLToken smart contract\r\ncontract TRVLToken is RewardToken {\r\n    string public constant name = \"TRVL Token\";\r\n    string public constant symbol = \"TRVL\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant TOTAL_CAP = 600000000 * (10 ** uint256(decimals));\r\n\r\n    event TransferReward(address from, address to, uint256 value);\r\n\r\n    /// @dev Verifies the user has enough tokens to cover the payment.\r\n    modifier senderHasEnoughTokens(uint256 _regularTokens, uint256 _rewardTokens) {\r\n        require(rewardBalances[msg.sender] >= _rewardTokens, \"User does not have enough reward tokens!\");\r\n        require(balances[msg.sender] >= _regularTokens, \"User does not have enough regular tokens!\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Verifies the amount is > 0.\r\n    modifier validAmount(uint256 _amount) {\r\n        require(_amount > 0, \"The amount specified is 0!\");\r\n        _;\r\n    }\r\n\r\n    /// @dev The TRVL Token is an ERC20 complaint token with a built in reward system that\r\n    /// gives users back a percentage of tokens spent on travel. These tokens are\r\n    /// non-transferable and can only be spent on travel through the TravelBlock website.\r\n    /// The percentages are defined in the rewardPercentage array and can be modified by\r\n    /// the TravelBlock team. The token is created with the entire balance being owned by the address that deploys.\r\n    constructor() RewardToken(decimals) public {\r\n        totalSupply_ = TOTAL_CAP;\r\n        balances[owner] = totalSupply_;\r\n        emit Transfer(0x0, owner, totalSupply_);\r\n    }\r\n\r\n    /// @notice Process a payment that prioritizes the use of regular tokens.\r\n    /// @dev Uses up all of the available regular tokens, before using rewards tokens to cover a payment. Pushes the calculated amounts\r\n    /// into their respective function calls.\r\n    /// @param _amount The total tokens to be paid.\r\n    function paymentRegularTokensPriority (uint256 _amount, uint256 _rewardPercentageIndex) public {\r\n        uint256 regularTokensAvailable = balances[msg.sender];\r\n\r\n        if (regularTokensAvailable >= _amount) {\r\n            paymentRegularTokens(_amount, _rewardPercentageIndex);\r\n\r\n        } else {\r\n            if (regularTokensAvailable > 0) {\r\n                uint256 amountOfRewardsTokens = _amount.sub(regularTokensAvailable);\r\n                paymentMixed(regularTokensAvailable, amountOfRewardsTokens, _rewardPercentageIndex);\r\n            } else {\r\n                paymentRewardTokens(_amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Process a payment that prioritizes the use of reward tokens.\r\n    /// @dev Uses up all of the available reward tokens, before using regular tokens to cover a payment. Pushes the calculated amounts\r\n    /// into their respective function calls.\r\n    /// @param _amount The total tokens to be paid.\r\n    function paymentRewardTokensPriority (uint256 _amount, uint256 _rewardPercentageIndex) public {\r\n        uint256 rewardTokensAvailable = rewardBalances[msg.sender];\r\n\r\n        if (rewardTokensAvailable >= _amount) {\r\n            paymentRewardTokens(_amount);\r\n        } else {\r\n            if (rewardTokensAvailable > 0) {\r\n                uint256 amountOfRegularTokens = _amount.sub(rewardTokensAvailable);\r\n                paymentMixed(amountOfRegularTokens, rewardTokensAvailable, _rewardPercentageIndex);\r\n            } else {\r\n                paymentRegularTokens(_amount, _rewardPercentageIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Process a TRVL tokens payment with a combination of regular and rewards tokens.\r\n    /// @dev calls the regular/rewards payment methods respectively.\r\n    /// @param _regularTokenAmount The amount of regular tokens to be processed.\r\n    /// @param _rewardTokenAmount The amount of reward tokens to be processed.\r\n    function paymentMixed (uint256 _regularTokenAmount, uint256 _rewardTokenAmount, uint256 _rewardPercentageIndex) public {\r\n        paymentRewardTokens(_rewardTokenAmount);\r\n        paymentRegularTokens(_regularTokenAmount, _rewardPercentageIndex);\r\n    }\r\n\r\n    /// @notice Process a payment using only regular TRVL Tokens with a specified reward percentage.\r\n    /// @dev Adjusts the balances accordingly and applies a reward token bonus. The accounts must be whitelisted because the travel team must own the address\r\n    /// to make transfers on their behalf.\r\n    /// Requires:\r\n    ///     - The contract is not paused\r\n    ///     - The amount being processed is greater than 0\r\n    ///     - The reward index being passed is valid\r\n    ///     - The sender has enough tokens to cover the payment\r\n    ///     - The sender is a whitelisted address\r\n    /// @param _regularTokenAmount The amount of regular tokens being used for the payment.\r\n    /// @param _rewardPercentageIndex The index pointing to the percentage of reward tokens to be applied.\r\n    function paymentRegularTokens (uint256 _regularTokenAmount, uint256 _rewardPercentageIndex)\r\n        public\r\n        validAmount(_regularTokenAmount)\r\n        isValidRewardIndex(_rewardPercentageIndex)\r\n        senderHasEnoughTokens(_regularTokenAmount, 0)\r\n        isWhitelisted(msg.sender)\r\n        whenNotPaused\r\n    {\r\n        // 1. Pay the specified amount with from the balance of the user/sender.\r\n        balances[msg.sender] = balances[msg.sender].sub(_regularTokenAmount);\r\n\r\n        // 2. distribute reward tokens to the user.\r\n        uint256 rewardAmount = getRewardToken(_regularTokenAmount, _rewardPercentageIndex);\r\n        rewardBalances[msg.sender] = rewardBalances[msg.sender].add(rewardAmount);\r\n        emit TransferReward(owner, msg.sender, rewardAmount);\r\n\r\n        // 3. Update the owner balance minus the reward tokens.\r\n        balances[owner] = balances[owner].add(_regularTokenAmount.sub(rewardAmount));\r\n        emit Transfer(msg.sender, owner, _regularTokenAmount.sub(rewardAmount));\r\n    }\r\n\r\n    /// @notice Process a payment using only reward TRVL Tokens.\r\n    /// @dev Adjusts internal balances accordingly. The accounts must be whitelisted because the travel team must own the address\r\n    /// to make transfers on their behalf.\r\n    /// Requires:\r\n    ///     - The contract is not paused\r\n    ///     - The amount being processed is greater than 0\r\n    ///     - The sender has enough tokens to cover the payment\r\n    ///     - The sender is a whitelisted address\r\n    /// @param _rewardTokenAmount The amount of reward tokens being used for the payment.\r\n    function paymentRewardTokens (uint256 _rewardTokenAmount)\r\n        public\r\n        validAmount(_rewardTokenAmount)\r\n        senderHasEnoughTokens(0, _rewardTokenAmount)\r\n        isWhitelisted(msg.sender)\r\n        whenNotPaused\r\n    {\r\n        rewardBalances[msg.sender] = rewardBalances[msg.sender].sub(_rewardTokenAmount);\r\n        rewardBalances[owner] = rewardBalances[owner].add(_rewardTokenAmount);\r\n\r\n        emit TransferReward(msg.sender, owner, _rewardTokenAmount);\r\n    }\r\n\r\n    /// @notice Convert a specific amount of regular TRVL tokens from the owner, into reward tokens for a user.\r\n    /// @dev Converts the regular tokens into reward tokens at a 1-1 ratio.\r\n    /// Requires:\r\n    ///     - Owner has enough tokens to convert\r\n    ///     - The specified user is whitelisted\r\n    ///     - The amount being converted is greater than 0\r\n    /// @param _user The user receiving the converted tokens.\r\n    /// @param _amount The amount of tokens to be converted.\r\n    function convertRegularToRewardTokens(address _user, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n        validAmount(_amount)\r\n        senderHasEnoughTokens(_amount, 0)\r\n        isWhitelisted(_user)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        rewardBalances[_user] = rewardBalances[_user].add(_amount);\r\n\r\n        emit TransferReward(msg.sender, _user, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPercentageDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_rewardPercentageIndex\",\"type\":\"uint256\"}],\"name\":\"paymentRegularTokensPriority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"updateRewardPercentageByIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regularTokenAmount\",\"type\":\"uint256\"},{\"name\":\"_rewardPercentageIndex\",\"type\":\"uint256\"}],\"name\":\"paymentRegularTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewardTokenAmount\",\"type\":\"uint256\"}],\"name\":\"paymentRewardTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admins\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromAdmins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"addRewardPercentage\",\"outputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admins\",\"type\":\"address[]\"}],\"name\":\"addAddressesToAdmins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_rewardPercentageIndex\",\"type\":\"uint256\"}],\"name\":\"paymentRewardTokensPriority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regularTokenAmount\",\"type\":\"uint256\"},{\"name\":\"_rewardTokenAmount\",\"type\":\"uint256\"},{\"name\":\"_rewardPercentageIndex\",\"type\":\"uint256\"}],\"name\":\"paymentMixed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertRegularToRewardTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPercentageDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"RewardPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"added\",\"type\":\"address\"}],\"name\":\"WhitelistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"removed\",\"type\":\"address\"}],\"name\":\"WhitelistRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"added\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"removed\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TRVLToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://efed9ed6db8c31ddf4f8c355fcba182f5637fb9fb6bc544ebfe4822ab93c46d1"}]}