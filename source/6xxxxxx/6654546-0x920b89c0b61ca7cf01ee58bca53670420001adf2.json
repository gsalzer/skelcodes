{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/*\r\n * Базовый контракт, который поддерживает остановку продаж\r\n */\r\n\r\ncontract Haltable is Ownable {\r\n    bool public halted;\r\n\r\n    modifier stopInEmergency {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    /* Модификатор, который вызывается в потомках */\r\n    modifier onlyInEmergency {\r\n        require(halted);\r\n        _;\r\n    }\r\n\r\n    /* Вызов функции прервет продажи, вызывать может только владелец */\r\n    function halt() external onlyOwner {\r\n        halted = true;\r\n    }\r\n\r\n    /* Вызов возвращает режим продаж */\r\n    function unhalt() external onlyOwner onlyInEmergency {\r\n        halted = false;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Контракт лута\r\n */\r\n\r\ncontract ImpLoot is Haltable {\r\n\r\n    struct TemplateState {\r\n        uint weiAmount;\r\n        mapping (address => address) owners;\r\n    }\r\n\r\n    address private destinationWallet;\r\n\r\n    // Мапа id шаблона лута => стейт лута\r\n    mapping (uint => TemplateState) private templatesState;\r\n\r\n    // Событие покупки\r\n    event Bought(address _receiver, uint _lootTemplateId, uint _weiAmount);\r\n\r\n    constructor(address _destinationWallet) public {\r\n        require(_destinationWallet != address(0));\r\n        destinationWallet = _destinationWallet;\r\n    }\r\n\r\n    function buy(uint _lootTemplateId) payable stopInEmergency{\r\n        uint weiAmount = msg.value;\r\n        address receiver = msg.sender;\r\n\r\n        require(destinationWallet != address(0));\r\n        require(weiAmount != 0);\r\n        require(templatesState[_lootTemplateId].owners[receiver] != receiver);\r\n        require(templatesState[_lootTemplateId].weiAmount == weiAmount);\r\n\r\n        templatesState[_lootTemplateId].owners[receiver] = receiver;\r\n\r\n        destinationWallet.transfer(weiAmount);\r\n\r\n        emit Bought(receiver, _lootTemplateId, weiAmount);\r\n    }\r\n\r\n    function getPrice(uint _lootTemplateId) constant returns (uint weiAmount) {\r\n        return templatesState[_lootTemplateId].weiAmount;\r\n    }\r\n\r\n    function setPrice(uint _lootTemplateId, uint _weiAmount) external onlyOwner {\r\n        templatesState[_lootTemplateId].weiAmount = _weiAmount;\r\n    }\r\n\r\n    function isOwner(uint _lootTemplateId, address _owner) constant returns (bool isOwner){\r\n        return templatesState[_lootTemplateId].owners[_owner] == _owner;\r\n    }\r\n\r\n    function setDestinationWallet(address _walletAddress) external onlyOwner {\r\n        require(_walletAddress != address(0));\r\n\r\n        destinationWallet = _walletAddress;\r\n    }\r\n\r\n    function getDestinationWallet() constant returns (address wallet) {\r\n        return destinationWallet;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"setDestinationWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lootTemplateId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"isOwner\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDestinationWallet\",\"outputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lootTemplateId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lootTemplateId\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lootTemplateId\",\"type\":\"uint256\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_destinationWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_lootTemplateId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ImpLoot","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007a50e3210ba376c08f920f12d7441f37a20ee0e5","Library":"","SwarmSource":"bzzr://fd584baca293aaac55a681792f89e4e81f2a1fabd7a48288f7b73f3e7300bbd0"}]}