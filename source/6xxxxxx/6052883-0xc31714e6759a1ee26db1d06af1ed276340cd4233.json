{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Interface for the polymath ticker registry contract\r\n */\r\ncontract ITickerRegistry {\r\n    /**\r\n    * @notice Check the validity of the symbol\r\n    * @param _symbol token symbol\r\n    * @param _owner address of the owner\r\n    * @param _tokenName Name of the token\r\n    * @return bool\r\n    */\r\n    function checkValidity(string _symbol, address _owner, string _tokenName) public returns(bool);\r\n\r\n    /**\r\n    * @notice Returns the owner and timestamp for a given symbol\r\n    * @param _symbol symbol\r\n    */\r\n    function getDetails(string _symbol) public view returns (address, uint256, string, bytes32, bool);\r\n\r\n    /**\r\n     * @notice Check the symbol is reserved or not\r\n     * @param _symbol Symbol of the token\r\n     * @return bool\r\n     */\r\n     function isReserved(string _symbol, address _owner, string _tokenName, bytes32 _swarmHash) public returns(bool);\r\n\r\n}\r\n\r\n/**\r\n * @title Utility contract for reusable code\r\n */\r\ncontract Util {\r\n\r\n   /**\r\n    * @notice changes a string to upper case\r\n    * @param _base string to change\r\n    */\r\n    function upper(string _base) internal pure returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        for (uint i = 0; i < _baseBytes.length; i++) {\r\n            bytes1 b1 = _baseBytes[i];\r\n            if (b1 >= 0x61 && b1 <= 0x7A) {\r\n                b1 = bytes1(uint8(b1)-32);\r\n            }\r\n            _baseBytes[i] = b1;\r\n        }\r\n        return string(_baseBytes);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Utility contract to allow pausing and unpausing of certain functions\r\n */\r\ncontract Pausable {\r\n\r\n    event Pause(uint256 _timestammp);\r\n    event Unpause(uint256 _timestamp);\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n   /**\r\n    * @notice called by the owner to pause, triggers stopped state\r\n    */\r\n    function _pause() internal {\r\n        require(!paused);\r\n        paused = true;\r\n        emit Pause(now);\r\n    }\r\n\r\n    /**\r\n    * @notice called by the owner to unpause, returns to normal state\r\n    */\r\n    function _unpause() internal {\r\n        require(paused);\r\n        paused = false;\r\n        emit Unpause(now);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Utility contract to allow owner to retreive any ERC20 sent to the contract\r\n */\r\ncontract ReclaimTokens is Ownable {\r\n\r\n    /**\r\n    * @notice Reclaim all ERC20Basic compatible tokens\r\n    * @param _tokenContract The address of the token contract\r\n    */\r\n    function reclaimERC20(address _tokenContract) external onlyOwner {\r\n        require(_tokenContract != address(0));\r\n        ERC20Basic token = ERC20Basic(_tokenContract);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(token.transfer(owner, balance));\r\n    }\r\n}\r\n\r\n/**\r\n * @title Core functionality for registry upgradability\r\n */\r\ncontract PolymathRegistry is ReclaimTokens {\r\n\r\n    mapping (bytes32 => address) public storedAddresses;\r\n\r\n    event LogChangeAddress(string _nameKey, address indexed _oldAddress, address indexed _newAddress);\r\n\r\n    /**\r\n     * @notice Get the contract address\r\n     * @param _nameKey is the key for the contract address mapping\r\n     * @return address\r\n     */\r\n    function getAddress(string _nameKey) view public returns(address) {\r\n        bytes32 key = keccak256(bytes(_nameKey));\r\n        require(storedAddresses[key] != address(0), \"Invalid address key\");\r\n        return storedAddresses[key];\r\n    }\r\n\r\n    /**\r\n     * @notice change the contract address\r\n     * @param _nameKey is the key for the contract address mapping\r\n     * @param _newAddress is the new contract address\r\n     */\r\n    function changeAddress(string _nameKey, address _newAddress) public onlyOwner {\r\n        bytes32 key = keccak256(bytes(_nameKey));\r\n        emit LogChangeAddress(_nameKey, storedAddresses[key], _newAddress);\r\n        storedAddresses[key] = _newAddress;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract RegistryUpdater is Ownable {\r\n\r\n    address public polymathRegistry;\r\n    address public moduleRegistry;\r\n    address public securityTokenRegistry;\r\n    address public tickerRegistry;\r\n    address public polyToken;\r\n\r\n    constructor (address _polymathRegistry) public {\r\n        require(_polymathRegistry != address(0));\r\n        polymathRegistry = _polymathRegistry;\r\n    }\r\n\r\n    function updateFromRegistry() onlyOwner public {\r\n        moduleRegistry = PolymathRegistry(polymathRegistry).getAddress(\"ModuleRegistry\");\r\n        securityTokenRegistry = PolymathRegistry(polymathRegistry).getAddress(\"SecurityTokenRegistry\");\r\n        tickerRegistry = PolymathRegistry(polymathRegistry).getAddress(\"TickerRegistry\");\r\n        polyToken = PolymathRegistry(polymathRegistry).getAddress(\"PolyToken\");\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Registry contract for issuers to reserve their security token symbols\r\n * @notice Allows issuers to reserve their token symbols ahead of actually generating their security token.\r\n * @dev SecurityTokenRegistry would reference this contract and ensure that a token symbol exists here and only its owner can deploy the token with that symbol.\r\n */\r\ncontract TickerRegistry is ITickerRegistry, Util, Pausable, RegistryUpdater, ReclaimTokens {\r\n\r\n    using SafeMath for uint256;\r\n    // constant variable to check the validity to use the symbol\r\n    // For now it's value is 15 days;\r\n    uint256 public expiryLimit = 15 * 1 days;\r\n\r\n    // Details of the symbol that get registered with the polymath platform\r\n    struct SymbolDetails {\r\n        address owner;\r\n        uint256 timestamp;\r\n        string tokenName;\r\n        bytes32 swarmHash;\r\n        bool status;\r\n    }\r\n\r\n    // Storage of symbols correspond to their details.\r\n    mapping(string => SymbolDetails) registeredSymbols;\r\n\r\n    // Emit after the symbol registration\r\n    event LogRegisterTicker(address indexed _owner, string _symbol, string _name, bytes32 _swarmHash, uint256 indexed _timestamp);\r\n    // Emit when the token symbol expiry get changed\r\n    event LogChangeExpiryLimit(uint256 _oldExpiry, uint256 _newExpiry);\r\n\r\n    // Registration fee in POLY base 18 decimals\r\n    uint256 public registrationFee;\r\n    // Emit when changePolyRegisterationFee is called\r\n    event LogChangePolyRegisterationFee(uint256 _oldFee, uint256 _newFee);\r\n\r\n    constructor (address _polymathRegistry, uint256 _registrationFee) public\r\n    RegistryUpdater(_polymathRegistry)\r\n    {\r\n        registrationFee = _registrationFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Register the token symbol for its particular owner\r\n     * @notice Once the token symbol is registered to its owner then no other issuer can claim\r\n     * @notice its ownership. If the symbol expires and its issuer hasn't used it, then someone else can take it.\r\n     * @param _symbol token symbol\r\n     * @param _tokenName Name of the token\r\n     * @param _owner Address of the owner of the token\r\n     * @param _swarmHash Off-chain details of the issuer and token\r\n     */\r\n    function registerTicker(address _owner, string _symbol, string _tokenName, bytes32 _swarmHash) public whenNotPaused {\r\n        require(_owner != address(0), \"Owner should not be 0x\");\r\n        require(bytes(_symbol).length > 0 && bytes(_symbol).length <= 10, \"Ticker length should always between 0 & 10\");\r\n        if(registrationFee > 0)\r\n            require(ERC20(polyToken).transferFrom(msg.sender, this, registrationFee), \"Failed transferFrom because of sufficent Allowance is not provided\");\r\n        string memory symbol = upper(_symbol);\r\n        require(expiryCheck(symbol), \"Ticker is already reserved\");\r\n        registeredSymbols[symbol] = SymbolDetails(_owner, now, _tokenName, _swarmHash, false);\r\n        emit LogRegisterTicker (_owner, symbol, _tokenName, _swarmHash, now);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the expiry time for the token symbol\r\n     * @param _newExpiry new time period for token symbol expiry\r\n     */\r\n    function changeExpiryLimit(uint256 _newExpiry) public onlyOwner {\r\n        require(_newExpiry >= 1 days, \"Expiry should greater than or equal to 1 day\");\r\n        uint256 _oldExpiry = expiryLimit;\r\n        expiryLimit = _newExpiry;\r\n        emit LogChangeExpiryLimit(_oldExpiry, _newExpiry);\r\n    }\r\n\r\n    /**\r\n     * @notice Check the validity of the symbol\r\n     * @param _symbol token symbol\r\n     * @param _owner address of the owner\r\n     * @param _tokenName Name of the token\r\n     * @return bool\r\n     */\r\n    function checkValidity(string _symbol, address _owner, string _tokenName) public returns(bool) {\r\n        string memory symbol = upper(_symbol);\r\n        require(msg.sender == securityTokenRegistry, \"msg.sender should be SecurityTokenRegistry contract\");\r\n        require(registeredSymbols[symbol].status != true, \"Symbol status should not equal to true\");\r\n        require(registeredSymbols[symbol].owner == _owner, \"Owner of the symbol should matched with the requested issuer address\");\r\n        require(registeredSymbols[symbol].timestamp.add(expiryLimit) >= now, \"Ticker should not be expired\");\r\n        registeredSymbols[symbol].tokenName = _tokenName;\r\n        registeredSymbols[symbol].status = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Check the symbol is reserved or not\r\n     * @param _symbol Symbol of the token\r\n     * @param _owner Owner of the token\r\n     * @param _tokenName Name of the token\r\n     * @param _swarmHash off-chain hash\r\n     * @return bool\r\n     */\r\n     function isReserved(string _symbol, address _owner, string _tokenName, bytes32 _swarmHash) public returns(bool) {\r\n        string memory symbol = upper(_symbol);\r\n        require(msg.sender == securityTokenRegistry, \"msg.sender should be SecurityTokenRegistry contract\");\r\n        if (registeredSymbols[symbol].owner == _owner && !expiryCheck(_symbol)) {\r\n            registeredSymbols[symbol].status = true;\r\n            return false;\r\n        }\r\n        else if (registeredSymbols[symbol].owner == address(0) || expiryCheck(symbol)) {\r\n            registeredSymbols[symbol] = SymbolDetails(_owner, now, _tokenName, _swarmHash, true);\r\n            emit LogRegisterTicker (_owner, symbol, _tokenName, _swarmHash, now);\r\n            return false;\r\n        } else\r\n            return true;\r\n     }\r\n\r\n    /**\r\n     * @notice Returns the owner and timestamp for a given symbol\r\n     * @param _symbol symbol\r\n     * @return address\r\n     * @return uint256\r\n     * @return string\r\n     * @return bytes32\r\n     * @return bool\r\n     */\r\n    function getDetails(string _symbol) public view returns (address, uint256, string, bytes32, bool) {\r\n        string memory symbol = upper(_symbol);\r\n        if (registeredSymbols[symbol].status == true||registeredSymbols[symbol].timestamp.add(expiryLimit) > now) {\r\n            return\r\n            (\r\n                registeredSymbols[symbol].owner,\r\n                registeredSymbols[symbol].timestamp,\r\n                registeredSymbols[symbol].tokenName,\r\n                registeredSymbols[symbol].swarmHash,\r\n                registeredSymbols[symbol].status\r\n            );\r\n        }else\r\n            return (address(0), uint256(0), \"\", bytes32(0), false);\r\n    }\r\n\r\n    /**\r\n     * @notice To re-initialize the token symbol details if symbol validity expires\r\n     * @param _symbol token symbol\r\n     * @return bool\r\n     */\r\n    function expiryCheck(string _symbol) internal returns(bool) {\r\n        if (registeredSymbols[_symbol].owner != address(0)) {\r\n            if (now > registeredSymbols[_symbol].timestamp.add(expiryLimit) && registeredSymbols[_symbol].status != true) {\r\n                registeredSymbols[_symbol] = SymbolDetails(address(0), uint256(0), \"\", bytes32(0), false);\r\n                return true;\r\n            }else\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice set the ticker registration fee in POLY tokens\r\n     * @param _registrationFee registration fee in POLY tokens (base 18 decimals)\r\n     */\r\n    function changePolyRegisterationFee(uint256 _registrationFee) public onlyOwner {\r\n        require(registrationFee != _registrationFee);\r\n        emit LogChangePolyRegisterationFee(registrationFee, _registrationFee);\r\n        registrationFee = _registrationFee;\r\n    }\r\n\r\n     /**\r\n     * @notice pause registration function\r\n     */\r\n    function unpause() public onlyOwner  {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice unpause registration function\r\n     */\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"expiryLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newExpiry\",\"type\":\"uint256\"}],\"name\":\"changeExpiryLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tickerRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polymathRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"reclaimERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registrationFee\",\"type\":\"uint256\"}],\"name\":\"changePolyRegisterationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"}],\"name\":\"checkValidity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moduleRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_swarmHash\",\"type\":\"bytes32\"}],\"name\":\"registerTicker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityTokenRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_swarmHash\",\"type\":\"bytes32\"}],\"name\":\"isReserved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateFromRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_polymathRegistry\",\"type\":\"address\"},{\"name\":\"_registrationFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_swarmHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"LogRegisterTicker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newExpiry\",\"type\":\"uint256\"}],\"name\":\"LogChangeExpiryLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"LogChangePolyRegisterationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestammp\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"TickerRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000006595656b93ce14834f0d22b7bbda4382d5ab51000000000000000000000000000000000000000000000000d8d726b7177a80000","Library":"","SwarmSource":"bzzr://1c3fd67e0e5dae16f4d5818e4def156aa71b9a6925640af36a76c616a54e724c"}]}