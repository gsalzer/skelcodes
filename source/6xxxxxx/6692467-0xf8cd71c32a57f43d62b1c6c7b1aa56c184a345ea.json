{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) onlyOwner public {\r\n        require(_newOwner != address(0));\r\n        emit OwnerChanged(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract Ethebit is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) investments;\r\n    mapping(address => uint256) joined;\r\n    mapping(address => uint256) withdrawals;\r\n    mapping(address => uint256) referrerBalance;\r\n    mapping(uint256 => address) refLinkToAddress;\r\n    mapping(address => uint256) refAddressToLink;\r\n\r\n    uint256 public minimum = 0.01 ether;\r\n    uint256 percentDay = 83;\r\n    uint256 public countInvestor;\r\n    uint256 public amountWeiRaised;\r\n    uint256 public lastInvestment;\r\n    uint256 public lastInvestmentTime;\r\n    uint256 countReferralLink = 100;\r\n    address public lastInvestorAddress;\r\n\r\n    uint256 DAYS_PROFIT = 30;\r\n\r\n    address public wallet;\r\n    address public support;\r\n\r\n    event Invest(address indexed investor, uint256 amount);\r\n    event Withdraw(address indexed investor, uint256 amount);\r\n    event ReferrerWithdraw(address indexed investor, uint256 amount);\r\n    event ReferrerProfit(address indexed hunter, address indexed referral, uint256 amount);\r\n    event MakeReferralLink(address indexed investor, uint256 refNumber);\r\n\r\n    constructor(address _wallet, address _support) public {\r\n        //No more owner for this contract\r\n        owner = address(0);\r\n\r\n        wallet = _wallet;\r\n        support = _support;\r\n    }\r\n\r\n    function() payable public {\r\n        invest(0);\r\n    }\r\n\r\n    function invest(uint256 _refLink) public payable returns (uint256) {\r\n        require(msg.value >= minimum);\r\n        address _investor = msg.sender;\r\n        uint256 currentDay = now;\r\n        if (currentDay < 1542240000) { //Thu, 15 Nov 2018 00:00:00 GMT\r\n            revert();\r\n        }\r\n        if (investments[_investor] == 0) {\r\n            countInvestor = countInvestor.add(1);\r\n        }\r\n        if (investments[_investor] > 0){\r\n            withdrawProfit();\r\n        }\r\n        investments[_investor] = investments[_investor].add(msg.value);\r\n        joined[_investor] = currentDay;\r\n        amountWeiRaised = amountWeiRaised.add(msg.value);\r\n        lastInvestment = msg.value;\r\n        lastInvestmentTime = currentDay;\r\n        lastInvestorAddress = _investor;\r\n        if (_refLink > 100) {\r\n            makeReferrerProfit(_refLink);\r\n        } else {\r\n            support.transfer(msg.value.mul(10).div(100)); //test's\r\n        }\r\n\r\n        wallet.transfer(msg.value.mul(10).div(100)); //test's\r\n        emit Invest(_investor, msg.value);\r\n        return _refLink;\r\n    }\r\n\r\n    function getBalance(address _address) view public returns (uint256 _result) {\r\n        _result = 0;\r\n        if (investments[_address] > 0) {\r\n            uint256 currentDay = now;\r\n            uint256 minutesCount = currentDay.sub(joined[_address]).div(1 minutes);\r\n            uint256 daysAfter = minutesCount.div(1440);\r\n            if (daysAfter > DAYS_PROFIT) {\r\n                daysAfter = DAYS_PROFIT;\r\n            }\r\n            uint256 percent = investments[_address].mul(percentDay).div(10000);\r\n            uint256 different = percent.mul(daysAfter);\r\n            if (different > withdrawals[_address]) {\r\n                _result = different.sub(withdrawals[_address]);\r\n                _result = different;\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawProfit() public returns (uint256 _result){\r\n        address _address = msg.sender;\r\n        require(joined[msg.sender] > 0);\r\n        _result = getBalance(_address);\r\n        if (address(this).balance > _result){\r\n            if (_result > 0){\r\n                withdrawals[_address] = withdrawals[_address].add(_result);\r\n                _address.transfer(_result); //test's\r\n                emit Withdraw(_address, _result);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getMyDeposit() public returns (uint256 _result){\r\n        address _address = msg.sender;\r\n        require(joined[_address] > 0);\r\n        _result = 0;\r\n        uint256 currentDay = now;\r\n        uint256 daysCount = currentDay.sub(joined[_address]).div(1 days);\r\n        require(daysCount > DAYS_PROFIT);\r\n\r\n        uint256 profit = getBalance(_address);\r\n        uint256 myDeposit = investments[_address];\r\n        uint256 depositAndProfit = myDeposit.add(profit);\r\n        require(depositAndProfit >= 0);\r\n        if (address(this).balance > depositAndProfit) {\r\n            withdrawals[_address] = 0;\r\n            investments[_address] = 0;\r\n            joined[_address] = 0;\r\n            _address.transfer(depositAndProfit); //test's\r\n            emit Withdraw(_address, depositAndProfit);\r\n            _result = depositAndProfit;\r\n        }\r\n    }\r\n\r\n    function makeReferrerProfit(uint256 _referralLink) public payable {\r\n        address referral = msg.sender;\r\n        address referrer = refLinkToAddress[_referralLink];\r\n        require(referrer != address(0));\r\n        uint256 profitReferrer = 0;\r\n        if (msg.value > 0) {\r\n            profitReferrer = msg.value.mul(10).div(100);\r\n            referrerBalance[referrer] = referrerBalance[referrer].add(profitReferrer);\r\n            emit ReferrerProfit(referrer, referral, profitReferrer);\r\n        }\r\n    }\r\n\r\n    function getMyReferrerProfit() public returns (uint256 _result){\r\n        address _address = msg.sender;\r\n        require(joined[_address] > 0);\r\n        _result = checkReferrerBalance(_address);\r\n\r\n        require(_result >= minimum);\r\n        if (address(this).balance > _result) {\r\n            referrerBalance[_address] = 0;\r\n            _address.transfer(_result);\r\n            emit ReferrerWithdraw(_address, _result);\r\n        }\r\n    }\r\n\r\n    function makeReferralLink() public returns (uint256 _result){\r\n        address _address = msg.sender;\r\n\r\n        if (refAddressToLink[_address] == 0) {\r\n            countReferralLink = countReferralLink.add(1);\r\n            refLinkToAddress[countReferralLink] = _address;\r\n            refAddressToLink[_address] = countReferralLink;\r\n            _result = countReferralLink;\r\n            emit MakeReferralLink(_address, _result);\r\n        } else {\r\n            _result = refAddressToLink[_address];\r\n        }\r\n    }\r\n\r\n    function getReferralLink() public view returns (uint256){\r\n        return refAddressToLink[msg.sender];\r\n    }\r\n\r\n    function checkReferrerBalance(address _hunter) public view returns (uint256) {\r\n        return referrerBalance[_hunter];\r\n    }\r\n\r\n    function checkBalance() public view returns (uint256) {\r\n        return getBalance(msg.sender);\r\n    }\r\n\r\n    function checkWithdrawals(address _investor) public view returns (uint256) {\r\n        return withdrawals[_investor];\r\n    }\r\n\r\n    function checkInvestments(address _investor) public view returns (uint256) {\r\n        return investments[_investor];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"support\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refLink\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInvestmentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referralLink\",\"type\":\"uint256\"}],\"name\":\"makeReferrerProfit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyReferrerProfit\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeReferralLink\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReferralLink\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"checkInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hunter\",\"type\":\"address\"}],\"name\":\"checkReferrerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"checkWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInvestorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyDeposit\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_support\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferrerWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hunter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferrerProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"refNumber\",\"type\":\"uint256\"}],\"name\":\"MakeReferralLink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"Ethebit","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fd89f77a487bac2a9571d9bbc7b8ee15bdbafbe600000000000000000000000040a79c0d57ff61d7e1c964bd5f57b20d4fc52a16","Library":"","SwarmSource":"bzzr://b8f7e8b59d1b425c25f18b3939581f8af58093376c17f403944f90eb3605006e"}]}