{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * Safe unsigned safe math.\r\n *\r\n * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\r\n *\r\n * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\r\n *\r\n * Maintained here until merged to mainline zeppelin-solidity.\r\n *\r\n */\r\nlibrary SafeMathLibExt {\r\n\r\n    function times(uint a, uint b) public pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function divides(uint a, uint b) public pure returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function minus(uint a, uint b) public pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function plus(uint a, uint b) public pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\n *\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20 {\r\n\r\n    using SafeMathLibExt for uint;\r\n    /* Token supply got increased and a new owner received these tokens */\r\n    event Minted(address receiver, uint amount);\r\n\r\n    /* Actual balances of token holders */\r\n    mapping(address => uint) public balances;\r\n\r\n    /* approve() allowances */\r\n    mapping (address => mapping (address => uint)) public allowed;\r\n\r\n    /* Interface declaration */\r\n    function isToken() public pure returns (bool weAre) {\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].minus(_value);\r\n        balances[_to] = balances[_to].plus(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        uint _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_to] = balances[_to].plus(_value);\r\n        balances[_from] = balances[_from].minus(_value);\r\n        allowed[_from][msg.sender] = _allowance.minus(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Upgrade agent interface inspired by Lunyr.\r\n *\r\n * Upgrade agent transfers tokens to a new contract.\r\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\r\n */\r\ncontract UpgradeAgent {\r\n\r\n    uint public originalSupply;\r\n\r\n    /** Interface marker */\r\n    function isUpgradeAgent() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function upgradeFrom(address _from, uint256 _value) public;\r\n\r\n}\r\n\r\n/**\r\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\r\n *\r\n * First envisioned by Golem and Lunyr projects.\r\n */\r\ncontract UpgradeableToken is StandardToken {\r\n\r\n    /** Contract / person who can set the upgrade path. \r\n        This can be the same as team multisig wallet, as what it is with its default value. */\r\n    address public upgradeMaster;\r\n\r\n    /** The next contract where the tokens will be migrated. */\r\n    UpgradeAgent public upgradeAgent;\r\n\r\n    /** How many tokens we have upgraded by now. */\r\n    uint256 public totalUpgraded;\r\n\r\n    /**\r\n    * Upgrade states.\r\n    *\r\n    * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\r\n    * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\r\n    * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\r\n    * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\r\n    *\r\n    */\r\n    enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n    /**\r\n    * Somebody has upgraded some of his tokens.\r\n    */\r\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    /**\r\n    * New upgrade agent available.\r\n    */\r\n    event UpgradeAgentSet(address agent);\r\n\r\n    /**\r\n    * Do not allow construction without upgrade master set.\r\n    */\r\n    constructor(address _upgradeMaster) public {\r\n        upgradeMaster = _upgradeMaster;\r\n    }\r\n\r\n    /**\r\n    * Allow the token holder to upgrade some of their tokens to a new contract.\r\n    */\r\n    function upgrade(uint256 value) public {\r\n\r\n        UpgradeState state = getUpgradeState();\r\n        if (!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\r\n            // Called in a bad state\r\n            revert();\r\n        }\r\n\r\n        // Validate input value.\r\n        if (value == 0) revert();\r\n\r\n        balances[msg.sender] = balances[msg.sender].minus(value);\r\n\r\n        // Take tokens out from circulation\r\n        totalSupply = totalSupply.minus(value);\r\n        totalUpgraded = totalUpgraded.plus(value);\r\n\r\n        // Upgrade agent reissues the tokens\r\n        upgradeAgent.upgradeFrom(msg.sender, value);\r\n        emit Upgrade(msg.sender, upgradeAgent, value);\r\n    }\r\n\r\n    /**\r\n    * Child contract can enable to provide the condition when the upgrade can begun.\r\n    */\r\n    function canUpgrade() public view returns(bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set an upgrade agent that handles\r\n    */\r\n    function setUpgradeAgent(address agent) external {\r\n        if (!canUpgrade()) {\r\n            // The token is not yet in a state that we could think upgrading\r\n            revert();\r\n        }\r\n\r\n        if (agent == 0x0) revert();\r\n        // Only a master can designate the next agent\r\n        if (msg.sender != upgradeMaster) revert();\r\n        // Upgrade has already begun for an agent\r\n        if (getUpgradeState() == UpgradeState.Upgrading) revert();\r\n\r\n        upgradeAgent = UpgradeAgent(agent);\r\n\r\n        // Bad interface\r\n        if (!upgradeAgent.isUpgradeAgent()) revert();      \r\n\r\n        emit UpgradeAgentSet(upgradeAgent);\r\n    }\r\n\r\n    /**\r\n    * Get the state of the token upgrade.\r\n    */\r\n    function getUpgradeState() public view returns(UpgradeState) {\r\n        if (!canUpgrade()) return UpgradeState.NotAllowed;\r\n        else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\r\n        else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n        else return UpgradeState.Upgrading;\r\n    }\r\n\r\n    /**\r\n    * Change the upgrade master.\r\n    *\r\n    * This allows us to set a new owner for the upgrade mechanism.\r\n    */\r\n    function setUpgradeMaster(address master) public {\r\n        if (master == 0x0) revert();\r\n        if (msg.sender != upgradeMaster) revert();\r\n        upgradeMaster = master;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n /**\r\n  * Define interface for releasing the token transfer after a successful crowdsale.\r\n  */\r\ncontract ReleasableToken is ERC20, Ownable {\r\n\r\n    /* The finalizer contract that allows unlift the transfer limits on this token */\r\n    address public releaseAgent;\r\n\r\n    /** A crowdsale contract can release us to the wild if ICO success. \r\n        If false we are are in transfer lock up period.*/\r\n    bool public released = false;\r\n\r\n    /** Map of agents that are allowed to transfer tokens regardless of the lock down period. \r\n        These are crowdsale contracts and possible the team multisig itself. */\r\n    mapping (address => bool) public transferAgents;\r\n\r\n    /**\r\n    * Limit token transfer until the crowdsale is over.\r\n    *\r\n    */\r\n    modifier canTransfer(address _sender) {\r\n\r\n        if (!released) {\r\n            if (!transferAgents[_sender]) {\r\n                revert();\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * Set the contract that can call release and make the token transferable.\r\n    *\r\n    * Design choice. Allow reset the release agent to fix fat finger mistakes.\r\n    */\r\n    function setReleaseAgent(address addr) public onlyOwner inReleaseState(false) {\r\n        // We don't do interface check here as we might want to a normal wallet address to act as a release agent\r\n        releaseAgent = addr;\r\n    }\r\n\r\n    /**\r\n    * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\r\n    */\r\n    function setTransferAgent(address addr, bool state) public onlyOwner inReleaseState(false) {\r\n        transferAgents[addr] = state;\r\n    }\r\n\r\n    /**\r\n    * One way function to release the tokens to the wild.\r\n    *\r\n    * Can be called only from the release agent that is the final ICO contract. \r\n    * It is only called if the crowdsale has been success (first milestone reached).\r\n    */\r\n    function releaseTokenTransfer() public onlyReleaseAgent {\r\n        released = true;\r\n    }\r\n\r\n    /** The function can be called only before or after the tokens have been releasesd */\r\n    modifier inReleaseState(bool releaseState) {\r\n        if (releaseState != released) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /** The function can be called only by a whitelisted release agent. */\r\n    modifier onlyReleaseAgent() {\r\n        if (msg.sender != releaseAgent) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public canTransfer(msg.sender) returns (bool success) {\r\n        // Call StandardToken.transfer()\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public canTransfer(_from) returns (bool success) {\r\n        // Call StandardToken.transferForm()\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * A token that can increase its supply by another contract.\r\n *\r\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\r\n * Only mint agents, contracts whitelisted by owner, can mint new tokens.\r\n *\r\n */\r\ncontract MintableTokenExt is StandardToken, Ownable {\r\n\r\n    using SafeMathLibExt for uint;\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    /** List of agents that are allowed to create new tokens */\r\n    mapping (address => bool) public mintAgents;\r\n\r\n    event MintingAgentChanged(address addr, bool state  );\r\n\r\n    /** inPercentageUnit is percents of tokens multiplied to 10 up to percents decimals.\r\n    * For example, for reserved tokens in percents 2.54%\r\n    * inPercentageUnit = 254\r\n    * inPercentageDecimals = 2\r\n    */\r\n    struct ReservedTokensData {\r\n        uint inTokens;\r\n        uint inPercentageUnit;\r\n        uint inPercentageDecimals;\r\n        bool isReserved;\r\n        bool isDistributed;\r\n        bool isVested;\r\n    }\r\n\r\n    mapping (address => ReservedTokensData) public reservedTokensList;\r\n    address[] public reservedTokensDestinations;\r\n    uint public reservedTokensDestinationsLen = 0;\r\n    bool private reservedTokensDestinationsAreSet = false;\r\n\r\n    modifier onlyMintAgent() {\r\n        // Only crowdsale contracts are allowed to mint new tokens\r\n        if (!mintAgents[msg.sender]) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /** Make sure we are not done yet. */\r\n    modifier canMint() {\r\n        if (mintingFinished) revert();\r\n        _;\r\n    }\r\n\r\n    function finalizeReservedAddress(address addr) public onlyMintAgent canMint {\r\n        ReservedTokensData storage reservedTokensData = reservedTokensList[addr];\r\n        reservedTokensData.isDistributed = true;\r\n    }\r\n\r\n    function isAddressReserved(address addr) public view returns (bool isReserved) {\r\n        return reservedTokensList[addr].isReserved;\r\n    }\r\n\r\n    function areTokensDistributedForAddress(address addr) public view returns (bool isDistributed) {\r\n        return reservedTokensList[addr].isDistributed;\r\n    }\r\n\r\n    function getReservedTokens(address addr) public view returns (uint inTokens) {\r\n        return reservedTokensList[addr].inTokens;\r\n    }\r\n\r\n    function getReservedPercentageUnit(address addr) public view returns (uint inPercentageUnit) {\r\n        return reservedTokensList[addr].inPercentageUnit;\r\n    }\r\n\r\n    function getReservedPercentageDecimals(address addr) public view returns (uint inPercentageDecimals) {\r\n        return reservedTokensList[addr].inPercentageDecimals;\r\n    }\r\n\r\n    function getReservedIsVested(address addr) public view returns (bool isVested) {\r\n        return reservedTokensList[addr].isVested;\r\n    }\r\n\r\n    function setReservedTokensListMultiple(\r\n        address[] addrs, \r\n        uint[] inTokens, \r\n        uint[] inPercentageUnit, \r\n        uint[] inPercentageDecimals,\r\n        bool[] isVested\r\n        ) public canMint onlyOwner {\r\n        assert(!reservedTokensDestinationsAreSet);\r\n        assert(addrs.length == inTokens.length);\r\n        assert(inTokens.length == inPercentageUnit.length);\r\n        assert(inPercentageUnit.length == inPercentageDecimals.length);\r\n        for (uint iterator = 0; iterator < addrs.length; iterator++) {\r\n            if (addrs[iterator] != address(0)) {\r\n                setReservedTokensList(\r\n                    addrs[iterator],\r\n                    inTokens[iterator],\r\n                    inPercentageUnit[iterator],\r\n                    inPercentageDecimals[iterator],\r\n                    isVested[iterator]\r\n                    );\r\n            }\r\n        }\r\n        reservedTokensDestinationsAreSet = true;\r\n    }\r\n\r\n    /**\r\n    * Create new tokens and allocate them to an address..\r\n    *\r\n    * Only callably by a crowdsale contract (mint agent).\r\n    */\r\n    function mint(address receiver, uint amount) public onlyMintAgent canMint {\r\n        totalSupply = totalSupply.plus(amount);\r\n        balances[receiver] = balances[receiver].plus(amount);\r\n\r\n        // This will make the mint transaction apper in EtherScan.io\r\n        // We can remove this after there is a standardized minting event\r\n        emit Transfer(0, receiver, amount);\r\n    }\r\n\r\n    /**\r\n    * Owner can allow a crowdsale contract to mint new tokens.\r\n    */\r\n    function setMintAgent(address addr, bool state) public onlyOwner canMint {\r\n        mintAgents[addr] = state;\r\n        emit MintingAgentChanged(addr, state);\r\n    }\r\n\r\n    function setReservedTokensList(address addr, uint inTokens, uint inPercentageUnit, uint inPercentageDecimals,bool isVested) \r\n    private canMint onlyOwner {\r\n        assert(addr != address(0));\r\n        if (!isAddressReserved(addr)) {\r\n            reservedTokensDestinations.push(addr);\r\n            reservedTokensDestinationsLen++;\r\n        }\r\n\r\n        reservedTokensList[addr] = ReservedTokensData({\r\n            inTokens: inTokens,\r\n            inPercentageUnit: inPercentageUnit,\r\n            inPercentageDecimals: inPercentageDecimals,\r\n            isReserved: true,\r\n            isDistributed: false,\r\n            isVested:isVested\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * A crowdsaled token.\r\n *\r\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\r\n *\r\n * - The token transfer() is disabled until the crowdsale is over\r\n * - The token contract gives an opt-in upgrade path to a new contract\r\n * - The same token can be part of several crowdsales through approve() mechanism\r\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\r\n *\r\n */\r\ncontract CrowdsaleTokenExt is ReleasableToken, MintableTokenExt, UpgradeableToken {\r\n\r\n    /** Name and symbol were updated. */\r\n    event UpdatedTokenInformation(string newName, string newSymbol);\r\n\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint public decimals;\r\n\r\n    /* Minimum ammount of tokens every buyer can buy. */\r\n    uint public minCap;\r\n\r\n    /**\r\n    * Construct the token.\r\n    *\r\n    * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n    *\r\n    * @param _name Token name\r\n    * @param _symbol Token symbol - should be all caps\r\n    * @param _initialSupply How many tokens we start with\r\n    * @param _decimals Number of decimal places\r\n    * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? \r\n    * Note that when the token becomes transferable the minting always ends.\r\n    */\r\n    constructor(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable, uint _globalMinCap) \r\n    public UpgradeableToken(msg.sender) {\r\n\r\n        // Create any address, can be transferred\r\n        // to team multisig via changeOwner(),\r\n        // also remember to call setUpgradeMaster()\r\n        owner = msg.sender;\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n\r\n        totalSupply = _initialSupply;\r\n\r\n        decimals = _decimals;\r\n\r\n        minCap = _globalMinCap;\r\n\r\n        // Create initially all balance on the team multisig\r\n        balances[owner] = totalSupply;\r\n\r\n        if (totalSupply > 0) {\r\n            emit Minted(owner, totalSupply);\r\n        }\r\n\r\n        // No more new supply allowed after the token creation\r\n        if (!_mintable) {\r\n            mintingFinished = true;\r\n            if (totalSupply == 0) {\r\n                revert(); // Cannot create a token without supply and no minting\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * When token is released to be transferable, enforce no new tokens can be created.\r\n    */\r\n    function releaseTokenTransfer() public onlyReleaseAgent {\r\n        mintingFinished = true;\r\n        super.releaseTokenTransfer();\r\n    }\r\n\r\n    /**\r\n    * Allow upgrade agent functionality kick in only if the crowdsale was success.\r\n    */\r\n    function canUpgrade() public view returns(bool) {\r\n        return released && super.canUpgrade();\r\n    }\r\n\r\n    /**\r\n    * Owner can update token information here.\r\n    *\r\n    * It is often useful to conceal the actual token association, until\r\n    * the token operations, like central issuance or reissuance have been completed.\r\n    *\r\n    * This function allows the token owner to rename the token after the operations\r\n    * have been completed and then point the audience to use the token contract.\r\n    */\r\n    function setTokenInformation(string _name, string _symbol) public onlyOwner {\r\n        name = _name;\r\n        symbol = _symbol;\r\n\r\n        emit UpdatedTokenInformation(name, symbol);\r\n    }\r\n\r\n    /**\r\n    * Claim tokens that were accidentally sent to this contract.\r\n    *\r\n    * @param _token The address of the token contract that you want to recover.\r\n    */\r\n    function claimTokens(address _token) public onlyOwner {\r\n        require(_token != address(0));\r\n\r\n        ERC20 token = ERC20(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(owner, balance);\r\n\r\n        emit ClaimedTokens(_token, owner, balance);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * A crowdsaled token.\r\n *\r\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\r\n *\r\n * - The token transfer() is disabled until the crowdsale is over\r\n * - The token contract gives an opt-in upgrade path to a new contract\r\n * - The same token can be part of several crowdsales through approve() mechanism\r\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\r\n *\r\n */\r\ncontract CrowdsaleTokenExtv1 is CrowdsaleTokenExt {\r\n\r\n    uint public originalSupply;\r\n\r\n    address public oldTokenAddress;\r\n\r\n    bool public isUpgradeAgent = false;\r\n    /**\r\n    * Construct the token.\r\n    *\r\n    * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n    *\r\n    * @param _name Token name\r\n    * @param _symbol Token symbol - should be all caps\r\n    * @param _initialSupply How many tokens we start with\r\n    * @param _decimals Number of decimal places\r\n    * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? \r\n    * Note that when the token becomes transferable the minting always ends.\r\n    */\r\n    constructor(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable, \r\n    uint _globalMinCap, address _oldTokenAddress, uint _originalSupply) \r\n    public CrowdsaleTokenExt(_name, _symbol, _initialSupply, _decimals, _mintable, _globalMinCap) {    \r\n        originalSupply = _originalSupply;\r\n        oldTokenAddress = _oldTokenAddress;\r\n        isUpgradeAgent = true;    \r\n    }\r\n\r\n    function upgradeFrom(address _from, uint256 value) public {\r\n        // Make sure the call is from old token contract\r\n        require(msg.sender == oldTokenAddress);\r\n        // Validate input value.\r\n        balances[_from] = balances[_from].plus(value);\r\n        // Take tokens out from circulation\r\n        totalSupply = totalSupply.plus(value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReservedPercentageUnit\",\"outputs\":[{\"name\":\"inPercentageUnit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReservedPercentageDecimals\",\"outputs\":[{\"name\":\"inPercentageDecimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"originalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservedTokensList\",\"outputs\":[{\"name\":\"inTokens\",\"type\":\"uint256\"},{\"name\":\"inPercentageUnit\",\"type\":\"uint256\"},{\"name\":\"inPercentageDecimals\",\"type\":\"uint256\"},{\"name\":\"isReserved\",\"type\":\"bool\"},{\"name\":\"isDistributed\",\"type\":\"bool\"},{\"name\":\"isVested\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReservedTokens\",\"outputs\":[{\"name\":\"inTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUpgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"finalizeReservedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reservedTokensDestinations\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgradeFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAddressReserved\",\"outputs\":[{\"name\":\"isReserved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"areTokensDistributedForAddress\",\"outputs\":[{\"name\":\"isDistributed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedTokensDestinationsLen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"name\":\"weAre\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"inTokens\",\"type\":\"uint256[]\"},{\"name\":\"inPercentageUnit\",\"type\":\"uint256[]\"},{\"name\":\"inPercentageDecimals\",\"type\":\"uint256[]\"},{\"name\":\"isVested\",\"type\":\"bool[]\"}],\"name\":\"setReservedTokensListMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReservedIsVested\",\"outputs\":[{\"name\":\"isVested\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_mintable\",\"type\":\"bool\"},{\"name\":\"_globalMinCap\",\"type\":\"uint256\"},{\"name\":\"_oldTokenAddress\",\"type\":\"address\"},{\"name\":\"_originalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"MintingAgentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CrowdsaleTokenExtv1","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e09c944dd9b7273d1bffe6dbd4003a7ca4a8acb0000000000000000000000000000000000000000000179b23be3c83af29000000000000000000000000000000000000000000000000000000000000000000004557469780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035554580000000000000000000000000000000000000000000000000000000000","Library":"SafeMathLibExt:8a0128980df4f35bb7515275d9e1cb869159a6c2","SwarmSource":"bzzr://3038901752e41ca584735d75c6218ecbd3d8a606dce88e4e3ca9ec82e05e54cf"}]}