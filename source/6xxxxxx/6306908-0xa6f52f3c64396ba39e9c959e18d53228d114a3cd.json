{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\ncontract RCPreorder is Pausable {\r\n    uint8 constant WEEK1_PERCENT_AMOUNT = 30;\r\n    uint8 constant WEEK2_PERCENT_AMOUNT = 60;\r\n    uint8 constant WEEK3_PERCENT_AMOUNT = 80;\r\n    uint32 constant WEEK1_DURATION = 1 weeks;\r\n    uint32 constant WEEK2_DURATION = 2 weeks;\r\n    uint32 constant WEEK3_DURATION = 3 weeks;\r\n    uint32 constant SECONDS_PER_BLOCK = 15;\r\n\r\n    event PackPurchased(address indexed user, uint8 indexed packId, uint256 price);\r\n\r\n    struct Purchase {\r\n        uint8 packId;\r\n        address user;\r\n        uint64 commit;\r\n    }\r\n\r\n    Purchase[] public purchases;\r\n\r\n    mapping (uint8 => uint256) public prices;\r\n    mapping (uint8 => uint256) public leftCount;\r\n\r\n    uint256 public startBlock;\r\n\r\n    constructor() public {\r\n        paused = true;\r\n\r\n        // The creator of the contract is the initial owner\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function purchase(uint8 _packId) external payable whenNotPaused {\r\n        require(_packIsAvialable(_packId));\r\n        require(_isRunning());\r\n\r\n        uint256 currentPrice = _computeCurrentPrice(prices[_packId]);\r\n        // Check current price of pack\r\n        require(msg.value >= currentPrice);\r\n\r\n        Purchase memory p = Purchase({\r\n            user: msg.sender,\r\n            packId: _packId,\r\n            commit: uint64(block.number)\r\n        });\r\n\r\n        purchases.push(p);\r\n        leftCount[_packId]--;\r\n\r\n        emit PackPurchased(msg.sender, _packId, currentPrice);\r\n    }\r\n\r\n    function getPackPrice(uint8 _packId) external view returns (uint256) {\r\n        return _computeCurrentPrice(prices[_packId]);\r\n    }\r\n\r\n    function getPurchaseCount() external view returns (uint) {\r\n        return purchases.length;\r\n    }\r\n\r\n    function run() external onlyOwner {\r\n        startBlock = block.number;\r\n        unpause();\r\n    }\r\n\r\n    function addPack(uint8 _id, uint256 _price, uint256 _count) external onlyOwner {\r\n        prices[_id] = _price;\r\n        leftCount[_id] = _count;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        address(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        require(startBlock > 0);\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n    function _isRunning() internal view returns (bool) {\r\n        uint diff = block.number - startBlock;\r\n        return startBlock > 0 && diff < uint(WEEK3_DURATION / SECONDS_PER_BLOCK);\r\n    }\r\n\r\n    function _packIsAvialable(uint8 _id) internal view returns (bool) {\r\n        return leftCount[_id] > 0;\r\n    }\r\n\r\n    function _computeCurrentPrice(\r\n        uint256 _basePrice\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint diff = block.number - startBlock;\r\n\r\n        if (diff < uint(WEEK1_DURATION / SECONDS_PER_BLOCK)) {\r\n            // Week 1 price\r\n            return _basePrice * WEEK1_PERCENT_AMOUNT / 100;\r\n        } else if (diff < uint(WEEK2_DURATION / SECONDS_PER_BLOCK)) {\r\n            // Week 2 price\r\n            return _basePrice * WEEK2_PERCENT_AMOUNT / 100;\r\n        } else if (diff < uint(WEEK3_DURATION / SECONDS_PER_BLOCK)) {\r\n            // Week 3 price\r\n            return _basePrice * WEEK3_PERCENT_AMOUNT / 100;\r\n        }\r\n\r\n        return _basePrice;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_packId\",\"type\":\"uint8\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint8\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"addPack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"leftCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"name\":\"packId\",\"type\":\"uint8\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"commit\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPurchaseCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"run\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_packId\",\"type\":\"uint8\"}],\"name\":\"getPackPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"packId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PackPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RCPreorder","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a46d8c0fd0ba2f5896b93c01aa96bd9b5420ca7300a3d93acd9dda78e2fa256d"}]}