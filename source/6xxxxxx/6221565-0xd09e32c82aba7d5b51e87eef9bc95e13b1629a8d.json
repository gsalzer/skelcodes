{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ETHSurge{\r\n    \r\n    mapping (address => uint256) public investedETH;\r\n    mapping (address => uint256) public lastInvest;\r\n    \r\n    mapping (address => uint256) public affiliateCommision;\r\n    \r\n    address promoter = 0x12878452e2799c86f129929a240bb7d21c735f5d;\r\n    address promoter1 = 0xe6f43c670cc8a366bbcf6677f43b02754bfb5855;\r\n    \r\n    function investETH(address referral) public payable {\r\n        \r\n        require(msg.value >= 0.1 ether);\r\n        \r\n        if(getProfit(msg.sender) > 0){\r\n            uint256 profit = getProfit(msg.sender);\r\n            lastInvest[msg.sender] = now;\r\n            msg.sender.transfer(profit);\r\n        }\r\n        \r\n        uint256 amount = msg.value;\r\n        uint256 commision = SafeMath.div(amount, 20);\r\n        if(referral != msg.sender && referral != 0x1 && referral != promoter && referral != promoter1){\r\n            affiliateCommision[referral] = SafeMath.add(affiliateCommision[referral], commision);\r\n        }\r\n        \r\n        affiliateCommision[promoter] = SafeMath.add(affiliateCommision[promoter], commision);\r\n        affiliateCommision[promoter1] = SafeMath.add(affiliateCommision[promoter1], commision);\r\n        \r\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], amount);\r\n        lastInvest[msg.sender] = now;\r\n    }\r\n    \r\n    function divestETH() public {\r\n        uint256 profit = getProfit(msg.sender);\r\n        lastInvest[msg.sender] = now;\r\n        \r\n        //20% fee on taking capital out\r\n        uint256 capital = investedETH[msg.sender];\r\n        uint256 fee = SafeMath.div(capital, 5);\r\n        capital = SafeMath.sub(capital, fee);\r\n        \r\n        uint256 total = SafeMath.add(capital, profit);\r\n        require(total > 0);\r\n        investedETH[msg.sender] = 0;\r\n        msg.sender.transfer(total);\r\n    }\r\n    \r\n    function withdraw() public{\r\n        uint256 profit = getProfit(msg.sender);\r\n        require(profit > 0);\r\n        lastInvest[msg.sender] = now;\r\n        msg.sender.transfer(profit);\r\n    }\r\n    \r\n    function getProfitFromSender() public view returns(uint256){\r\n        return getProfit(msg.sender);\r\n    }\r\n\r\n    function getProfit(address customer) public view returns(uint256){\r\n        uint256 secondsPassed = SafeMath.sub(now, lastInvest[customer]);\r\n        uint256 profit = SafeMath.div(SafeMath.mul(secondsPassed, investedETH[customer]), 8640000);\r\n        uint256 bonus = getBonus();\r\n        if(bonus == 0){\r\n            return profit;\r\n        }\r\n        return SafeMath.add(profit, SafeMath.div(SafeMath.mul(profit, bonus), 100));\r\n    }\r\n    \r\n    function getBonus() public view returns(uint256){\r\n        uint256 invested = getInvested();\r\n        if(invested >= 0.1 ether && 4 ether >= invested){\r\n            return 0;\r\n        }else if(invested >= 4.01 ether && 7 ether >= invested){\r\n            return 5;\r\n        }else if(invested >= 7.01 ether && 10 ether >= invested){\r\n            return 10;\r\n        }else if(invested >= 10.01 ether && 15 ether >= invested){\r\n            return 15;\r\n        }else if(invested >= 15.01 ether){\r\n            return 25;\r\n        }\r\n    }\r\n    \r\n    function reinvestProfit() public {\r\n        uint256 profit = getProfit(msg.sender);\r\n        require(profit > 0);\r\n        lastInvest[msg.sender] = now;\r\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], profit);\r\n    }\r\n    \r\n    function getAffiliateCommision() public view returns(uint256){\r\n        return affiliateCommision[msg.sender];\r\n    }\r\n    \r\n    function withdrawAffiliateCommision() public {\r\n        require(affiliateCommision[msg.sender] > 0);\r\n        uint256 commision = affiliateCommision[msg.sender];\r\n        affiliateCommision[msg.sender] = 0;\r\n        msg.sender.transfer(commision);\r\n    }\r\n    \r\n    function getInvested() public view returns(uint256){\r\n        return investedETH[msg.sender];\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256){\r\n        return this.balance;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    \r\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"divestETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAffiliateCommision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateCommision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitFromSender\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"investETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAffiliateCommision\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ETHSurge","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6c0326fb1e0484646e3b3a9926735272d9eb00e2a3ef32c3a99449b98f68997a"}]}