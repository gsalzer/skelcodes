{"status":"1","message":"OK","result":[{"SourceCode":"/***\r\n *      ______ _   _               _____      _              _       _           \r\n *     |  ____| | | |             / ____|    | |            | |     | |          \r\n *     | |__  | |_| |__   ___ _ _| (___   ___| |__   ___  __| |_   _| | ___ _ __ \r\n *     |  __| | __| '_ \\ / _ \\ '__\\___ \\ / __| '_ \\ / _ \\/ _` | | | | |/ _ \\ '__|\r\n *     | |____| |_| | | |  __/ |  ____) | (__| | | |  __/ (_| | |_| | |  __/ |   \r\n *     |______|\\__|_| |_|\\___|_| |_____/ \\___|_| |_|\\___|\\__,_|\\__,_|_|\\___|_|   \r\n *                                                                               \r\n *                                                                               \r\n */\r\n\r\npragma solidity ^ 0.5.1;\r\n\r\nlibrary ECRecovery {\r\n\r\n  function recover(bytes32 hash, bytes memory sig)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n\r\n  function toEthSignedMessageHash(bytes32 hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n\r\n    return keccak256(\r\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\r\n    );\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract EtherScheduler {\r\n    using ECRecovery for bytes32;\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping(uint => bool)) internal usedNonces;\r\n    \r\n    event Fulfilled(bytes indexed signature, address indexed signer);\r\n    \r\n    address payable private fee_collector;\r\n    IERC20 private TXC;\r\n    \r\n    constructor(address payable _fee_collector, address _TXC) public {\r\n        fee_collector = _fee_collector; /* 0xfF91c94F45e1114b1C90Be6D028381964030584C */\r\n        \r\n        TXC = IERC20(_TXC);             /* kovan txc 0x12C942fDbE9981E68DC153CC92dA2e2c301F5a9A */\r\n                                        /* mainnet txc 0x67e35c41060a988f59e2bcb2e0f09b6978fb6614*/\r\n    }\r\n\r\n    function getPackedData(\r\n        address _targetAddress,\r\n        uint _amount,\r\n        uint P,\r\n        bool _byBlock,\r\n        uint C,\r\n        uint _nonce,\r\n        uint networkID\r\n    ) public pure returns(bytes32) {\r\n        return keccak256(abi.encodePacked(_targetAddress, _amount, P, _byBlock, C, _nonce, networkID));\r\n    }\r\n    \r\n    function getPackedDataBundle(\r\n        address payable[] memory _targetAddresses,\r\n        uint[] memory _amounts,\r\n        uint P,\r\n        bool _byBlock,\r\n        uint C,\r\n        uint _nonce,\r\n        uint networkID\r\n    ) public pure returns(bytes32) {\r\n        return keccak256(abi.encodePacked(_targetAddresses, _amounts, P, _byBlock, C, _nonce, networkID));\r\n    }\r\n    \r\n    function verifySigner(\r\n        address _targetAddress,\r\n        uint _amount,\r\n        uint P,\r\n        bool _byBlock,\r\n        uint C,\r\n        uint _nonce,\r\n        uint networkID,\r\n        bytes memory _signature\r\n    ) public pure returns(address) {\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            \"\\x19Ethereum Signed Message:\\n32\",\r\n            keccak256(abi.encodePacked(_targetAddress, _amount, P, _byBlock, C, _nonce, networkID)))\r\n        );\r\n        \r\n        return hash.recover(_signature);\r\n    }\r\n    \r\n    function timeCondition(\r\n        address payable _targetAddress,\r\n        uint _amount,\r\n        uint P,\r\n        bool _byBlock,\r\n        uint C,\r\n        uint _nonce,\r\n        uint networkID,\r\n        bytes memory _signature\r\n    ) public payable {\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            \"\\x19Ethereum Signed Message:\\n32\",\r\n            keccak256(abi.encodePacked(_targetAddress, _amount, P, _byBlock, C, _nonce, networkID)))\r\n        );\r\n\r\n        address signer = hash.recover(_signature);\r\n                \r\n        require(!usedNonces[signer][_nonce]);\r\n        usedNonces[signer][_nonce] = true;\r\n        //  v------------------------------ Burned the nonce ------------------------------v\r\n        \r\n        uint Q = balances[signer].sub(P.add(_amount));\r\n        \r\n        require(Q >= 0);\r\n        require(_byBlock ? block.number >= C : now >= C);\r\n        \r\n        // Request\r\n        resolve(_targetAddress, signer, _amount, P);\r\n\r\n        // Incentive  \r\n        payout(P);\r\n        \r\n        emit Fulfilled(_signature, signer);\r\n    }\r\n    \r\n    function timeConditionBundle(\r\n        address payable[] memory _targetAddresses,\r\n        uint[] memory _amounts,\r\n        uint P,\r\n        bool _byBlock,\r\n        uint C,\r\n        uint _nonce,\r\n        uint networkID,\r\n        bytes memory _signature\r\n    ) public payable {\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            \"\\x19Ethereum Signed Message:\\n32\",\r\n            keccak256(abi.encodePacked(_targetAddresses, _amounts, P, _byBlock, C, _nonce, networkID)))\r\n        );\r\n        \r\n        address signer = hash.recover(_signature);\r\n        \r\n        require(!usedNonces[signer][_nonce]);\r\n        usedNonces[signer][_nonce] = true;\r\n        //  v------------------------------ Burned the nonce ------------------------------v\r\n        \r\n        uint totalAmount = 0;\r\n\r\n        for(uint r = 0; r < _amounts.length; r = r.add(1)) {\r\n            totalAmount = totalAmount.add(_amounts[r]);\r\n        }\r\n        \r\n        uint Q = balances[signer].sub(P.add(totalAmount));\r\n        \r\n        require(Q >= 0);\r\n        require(_amounts.length == _targetAddresses.length);\r\n        require(_byBlock ? block.number >= C : now >= C);\r\n        \r\n        // Request  \r\n        for(uint r = 0; r < _amounts.length; r = r.add(1)) {\r\n            resolve(_targetAddresses[r], signer, _amounts[r], P);\r\n        }\r\n        \r\n        // Incentive  \r\n        payout(P);\r\n        \r\n        emit Fulfilled(_signature, signer);\r\n    }\r\n    \r\n    function payout(\r\n        uint P\r\n    ) internal {\r\n        uint fee = TXC.balanceOf(msg.sender) > 0 ? 0 : P.div(10).mul(3);\r\n        \r\n        msg.sender.transfer(P-fee);\r\n        fee_collector.transfer(fee);\r\n    }\r\n    \r\n    function resolve(\r\n        address payable _targetAddress,\r\n        address signer,\r\n        uint _amount,\r\n        uint P\r\n    ) internal {\r\n        balances[signer] = balances[signer].sub(P.add(_amount));\r\n        _targetAddress.transfer(_amount);\r\n    }\r\n    \r\n    function cancelTX(uint _nonce) external {\r\n        usedNonces[msg.sender][_nonce] = true;\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(1 finney);\r\n        fee_collector.transfer(1 finney);\r\n    }\r\n    \r\n    function deposit(address _beneficiary) public payable {\r\n        balances[_beneficiary] =  balances[_beneficiary].add(msg.value);\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint balance){\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function() external payable {\r\n        deposit(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_targetAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"P\",\"type\":\"uint256\"},{\"name\":\"_byBlock\",\"type\":\"bool\"},{\"name\":\"C\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"networkID\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"timeCondition\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"P\",\"type\":\"uint256\"},{\"name\":\"_byBlock\",\"type\":\"bool\"},{\"name\":\"C\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"networkID\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"timeConditionBundle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_targetAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"P\",\"type\":\"uint256\"},{\"name\":\"_byBlock\",\"type\":\"bool\"},{\"name\":\"C\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"networkID\",\"type\":\"uint256\"}],\"name\":\"getPackedData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"cancelTX\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_targetAddresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"P\",\"type\":\"uint256\"},{\"name\":\"_byBlock\",\"type\":\"bool\"},{\"name\":\"C\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"networkID\",\"type\":\"uint256\"}],\"name\":\"getPackedDataBundle\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_targetAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"P\",\"type\":\"uint256\"},{\"name\":\"_byBlock\",\"type\":\"bool\"},{\"name\":\"C\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"networkID\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifySigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fee_collector\",\"type\":\"address\"},{\"name\":\"_TXC\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"Fulfilled\",\"type\":\"event\"}]","ContractName":"EtherScheduler","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ff91c94f45e1114b1c90be6d028381964030584c00000000000000000000000067e35c41060a988f59e2bcb2e0f09b6978fb6614","Library":"","SwarmSource":"bzzr://42ecf1a158d5f52f2f9b86bd2b0cea439747f1018fc6a2aa6a4c82e110c19022"}]}