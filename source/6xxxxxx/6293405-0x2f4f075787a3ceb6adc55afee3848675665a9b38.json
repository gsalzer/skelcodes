{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract DelegateERC20 {\r\n  function delegateTotalSupply() public view returns (uint256);\r\n  function delegateBalanceOf(address who) public view returns (uint256);\r\n  function delegateTransfer(address to, uint256 value, address origSender) public returns (bool);\r\n  function delegateAllowance(address owner, address spender) public view returns (uint256);\r\n  function delegateTransferFrom(address from, address to, uint256 value, address origSender) public returns (bool);\r\n  function delegateApprove(address spender, uint256 value, address origSender) public returns (bool);\r\n  function delegateIncreaseApproval(address spender, uint addedValue, address origSender) public returns (bool);\r\n  function delegateDecreaseApproval(address spender, uint subtractedValue, address origSender) public returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract AddressList is Claimable {\r\n    string public name;\r\n    mapping (address => bool) public onList;\r\n\r\n    function AddressList(string _name, bool nullValue) public {\r\n        name = _name;\r\n        onList[0x0] = nullValue;\r\n    }\r\n    event ChangeWhiteList(address indexed to, bool onList);\r\n\r\n    // Set whether _to is on the list or not. Whether 0x0 is on the list\r\n    // or not cannot be set here - it is set once and for all by the constructor.\r\n    function changeList(address _to, bool _onList) onlyOwner public {\r\n        require(_to != 0x0);\r\n        if (onList[_to] != _onList) {\r\n            onList[_to] = _onList;\r\n            ChangeWhiteList(_to, _onList);\r\n        }\r\n    }\r\n}\r\n\r\ncontract HasNoContracts is Ownable {\r\n\r\n  /**\r\n   * @dev Reclaim ownership of Ownable contracts\r\n   * @param contractAddr The address of the Ownable to be reclaimed.\r\n   */\r\n  function reclaimContract(address contractAddr) external onlyOwner {\r\n    Ownable contractInst = Ownable(contractAddr);\r\n    contractInst.transferOwnership(owner);\r\n  }\r\n}\r\n\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  function HasNoEther() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    assert(owner.send(this.balance));\r\n  }\r\n}\r\n\r\ncontract HasNoTokens is CanReclaimToken {\r\n\r\n /**\r\n  * @dev Reject all ERC223 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ uint256 the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint256 value_, bytes data_) external {\r\n    from_;\r\n    value_;\r\n    data_;\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\r\n}\r\n\r\ncontract AllowanceSheet is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowanceOf;\r\n\r\n    function addAllowance(address tokenHolder, address spender, uint256 value) public onlyOwner {\r\n        allowanceOf[tokenHolder][spender] = allowanceOf[tokenHolder][spender].add(value);\r\n    }\r\n\r\n    function subAllowance(address tokenHolder, address spender, uint256 value) public onlyOwner {\r\n        allowanceOf[tokenHolder][spender] = allowanceOf[tokenHolder][spender].sub(value);\r\n    }\r\n\r\n    function setAllowance(address tokenHolder, address spender, uint256 value) public onlyOwner {\r\n        allowanceOf[tokenHolder][spender] = value;\r\n    }\r\n}\r\n\r\ncontract BalanceSheet is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    function addBalance(address addr, uint256 value) public onlyOwner {\r\n        balanceOf[addr] = balanceOf[addr].add(value);\r\n    }\r\n\r\n    function subBalance(address addr, uint256 value) public onlyOwner {\r\n        balanceOf[addr] = balanceOf[addr].sub(value);\r\n    }\r\n\r\n    function setBalance(address addr, uint256 value) public onlyOwner {\r\n        balanceOf[addr] = value;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic, Claimable {\r\n  using SafeMath for uint256;\r\n\r\n  BalanceSheet public balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  function setBalanceSheet(address sheet) external onlyOwner {\r\n    balances = BalanceSheet(sheet);\r\n    balances.claimOwnership();\r\n  }\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    transferAllArgsNoAllowance(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferAllArgsNoAllowance(address _from, address _to, uint256 _value) internal {\r\n    require(_to != address(0));\r\n    require(_from != address(0));\r\n    require(_value <= balances.balanceOf(_from));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances.subBalance(_from, _value);\r\n    balances.addBalance(_to, _value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances.balanceOf(_owner);\r\n  }\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances.balanceOf(msg.sender));\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances.subBalance(burner, _value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n    Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  AllowanceSheet public allowances;\r\n\r\n  function setAllowanceSheet(address sheet) external onlyOwner {\r\n    allowances = AllowanceSheet(sheet);\r\n    allowances.claimOwnership();\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    transferAllArgsYesAllowance(_from, _to, _value, msg.sender);\r\n    return true;\r\n  }\r\n\r\n  function transferAllArgsYesAllowance(address _from, address _to, uint256 _value, address spender) internal {\r\n    require(_value <= allowances.allowanceOf(_from, spender));\r\n\r\n    allowances.subAllowance(_from, spender, _value);\r\n    transferAllArgsNoAllowance(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    approveAllArgs(_spender, _value, msg.sender);\r\n    return true;\r\n  }\r\n\r\n  function approveAllArgs(address _spender, uint256 _value, address _tokenHolder) internal {\r\n    allowances.setAllowance(_tokenHolder, _spender, _value);\r\n    Approval(_tokenHolder, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowances.allowanceOf(_owner, _spender);\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    increaseApprovalAllArgs(_spender, _addedValue, msg.sender);\r\n    return true;\r\n  }\r\n\r\n  function increaseApprovalAllArgs(address _spender, uint _addedValue, address tokenHolder) internal {\r\n    allowances.addAllowance(tokenHolder, _spender, _addedValue);\r\n    Approval(tokenHolder, _spender, allowances.allowanceOf(tokenHolder, _spender));\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    decreaseApprovalAllArgs(_spender, _subtractedValue, msg.sender);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApprovalAllArgs(address _spender, uint _subtractedValue, address tokenHolder) internal {\r\n    uint oldValue = allowances.allowanceOf(tokenHolder, _spender);\r\n    if (_subtractedValue > oldValue) {\r\n      allowances.setAllowance(tokenHolder, _spender, 0);\r\n    } else {\r\n      allowances.subAllowance(tokenHolder, _spender, _subtractedValue);\r\n    }\r\n    Approval(tokenHolder, _spender, allowances.allowanceOf(tokenHolder, _spender));\r\n  }\r\n\r\n}\r\n\r\ncontract CanDelegate is StandardToken {\r\n    // If this contract needs to be upgraded, the new contract will be stored\r\n    // in 'delegate' and any ERC20 calls to this contract will be delegated to that one.\r\n    DelegateERC20 public delegate;\r\n\r\n    event DelegatedTo(address indexed newContract);\r\n\r\n    // Can undelegate by passing in newContract = address(0)\r\n    function delegateToNewContract(DelegateERC20 newContract) public onlyOwner {\r\n        delegate = newContract;\r\n        DelegatedTo(delegate);\r\n    }\r\n\r\n    // If a delegate has been designated, all ERC20 calls are forwarded to it\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        if (delegate == address(0)) {\r\n            return super.transfer(to, value);\r\n        } else {\r\n            return delegate.delegateTransfer(to, value, msg.sender);\r\n        }\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        if (delegate == address(0)) {\r\n            return super.transferFrom(from, to, value);\r\n        } else {\r\n            return delegate.delegateTransferFrom(from, to, value, msg.sender);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address who) public view returns (uint256) {\r\n        if (delegate == address(0)) {\r\n            return super.balanceOf(who);\r\n        } else {\r\n            return delegate.delegateBalanceOf(who);\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        if (delegate == address(0)) {\r\n            return super.approve(spender, value);\r\n        } else {\r\n            return delegate.delegateApprove(spender, value, msg.sender);\r\n        }\r\n    }\r\n\r\n    function allowance(address _owner, address spender) public view returns (uint256) {\r\n        if (delegate == address(0)) {\r\n            return super.allowance(_owner, spender);\r\n        } else {\r\n            return delegate.delegateAllowance(_owner, spender);\r\n        }\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        if (delegate == address(0)) {\r\n            return super.totalSupply();\r\n        } else {\r\n            return delegate.delegateTotalSupply();\r\n        }\r\n    }\r\n\r\n    function increaseApproval(address spender, uint addedValue) public returns (bool) {\r\n        if (delegate == address(0)) {\r\n            return super.increaseApproval(spender, addedValue);\r\n        } else {\r\n            return delegate.delegateIncreaseApproval(spender, addedValue, msg.sender);\r\n        }\r\n    }\r\n\r\n    function decreaseApproval(address spender, uint subtractedValue) public returns (bool) {\r\n        if (delegate == address(0)) {\r\n            return super.decreaseApproval(spender, subtractedValue);\r\n        } else {\r\n            return delegate.delegateDecreaseApproval(spender, subtractedValue, msg.sender);\r\n        }\r\n    }\r\n}\r\n\r\ncontract StandardDelegate is StandardToken, DelegateERC20 {\r\n    address public delegatedFrom;\r\n\r\n    modifier onlySender(address source) {\r\n        require(msg.sender == source);\r\n        _;\r\n    }\r\n\r\n    function setDelegatedFrom(address addr) onlyOwner public {\r\n        delegatedFrom = addr;\r\n    }\r\n\r\n    // All delegate ERC20 functions are forwarded to corresponding normal functions\r\n    function delegateTotalSupply() public view returns (uint256) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function delegateBalanceOf(address who) public view returns (uint256) {\r\n        return balanceOf(who);\r\n    }\r\n\r\n    function delegateTransfer(address to, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {\r\n        transferAllArgsNoAllowance(origSender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function delegateAllowance(address owner, address spender) public view returns (uint256) {\r\n        return allowance(owner, spender);\r\n    }\r\n\r\n    function delegateTransferFrom(address from, address to, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {\r\n        transferAllArgsYesAllowance(from, to, value, origSender);\r\n        return true;\r\n    }\r\n\r\n    function delegateApprove(address spender, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {\r\n        approveAllArgs(spender, value, origSender);\r\n        return true;\r\n    }\r\n\r\n    function delegateIncreaseApproval(address spender, uint addedValue, address origSender) onlySender(delegatedFrom) public returns (bool) {\r\n        increaseApprovalAllArgs(spender, addedValue, origSender);\r\n        return true;\r\n    }\r\n\r\n    function delegateDecreaseApproval(address spender, uint subtractedValue, address origSender) onlySender(delegatedFrom) public returns (bool) {\r\n        decreaseApprovalAllArgs(spender, subtractedValue, origSender);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract TrueUSD is StandardDelegate, PausableToken, BurnableToken, NoOwner, CanDelegate {\r\n    string public name = \"TrueUSD\";\r\n    string public symbol = \"TUSD\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    AddressList public canReceiveMintWhiteList;\r\n    AddressList public canBurnWhiteList;\r\n    AddressList public blackList;\r\n    AddressList public noFeesList;\r\n    uint256 public burnMin = 10000 * 10**uint256(decimals);\r\n    uint256 public burnMax = 20000000 * 10**uint256(decimals);\r\n\r\n    uint80 public transferFeeNumerator = 7;\r\n    uint80 public transferFeeDenominator = 10000;\r\n    uint80 public mintFeeNumerator = 0;\r\n    uint80 public mintFeeDenominator = 10000;\r\n    uint256 public mintFeeFlat = 0;\r\n    uint80 public burnFeeNumerator = 0;\r\n    uint80 public burnFeeDenominator = 10000;\r\n    uint256 public burnFeeFlat = 0;\r\n    address public staker;\r\n\r\n    event ChangeBurnBoundsEvent(uint256 newMin, uint256 newMax);\r\n    event Mint(address indexed to, uint256 amount);\r\n    event WipedAccount(address indexed account, uint256 balance);\r\n\r\n    function TrueUSD() public {\r\n        totalSupply_ = 0;\r\n        staker = msg.sender;\r\n    }\r\n\r\n    function setLists(AddressList _canReceiveMintWhiteList, AddressList _canBurnWhiteList, AddressList _blackList, AddressList _noFeesList) onlyOwner public {\r\n        canReceiveMintWhiteList = _canReceiveMintWhiteList;\r\n        canBurnWhiteList = _canBurnWhiteList;\r\n        blackList = _blackList;\r\n        noFeesList = _noFeesList;\r\n    }\r\n\r\n    function changeName(string _name, string _symbol) onlyOwner public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    //Burning functions as withdrawing money from the system. The platform will keep track of who burns coins,\r\n    //and will send them back the equivalent amount of money (rounded down to the nearest cent).\r\n    function burn(uint256 _value) public {\r\n        require(canBurnWhiteList.onList(msg.sender));\r\n        require(_value >= burnMin);\r\n        require(_value <= burnMax);\r\n        uint256 fee = payStakingFee(msg.sender, _value, burnFeeNumerator, burnFeeDenominator, burnFeeFlat, 0x0);\r\n        uint256 remaining = _value.sub(fee);\r\n        super.burn(remaining);\r\n    }\r\n\r\n    //Create _amount new tokens and transfer them to _to.\r\n    //Based on code by OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/MintableToken.sol\r\n    function mint(address _to, uint256 _amount) onlyOwner public {\r\n        require(canReceiveMintWhiteList.onList(_to));\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances.addBalance(_to, _amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        payStakingFee(_to, _amount, mintFeeNumerator, mintFeeDenominator, mintFeeFlat, 0x0);\r\n    }\r\n\r\n    //Change the minimum and maximum amount that can be burned at once. Burning\r\n    //may be disabled by setting both to 0 (this will not be done under normal\r\n    //operation, but we can't add checks to disallow it without losing a lot of\r\n    //flexibility since burning could also be as good as disabled\r\n    //by setting the minimum extremely high, and we don't want to lock\r\n    //in any particular cap for the minimum)\r\n    function changeBurnBounds(uint newMin, uint newMax) onlyOwner public {\r\n        require(newMin <= newMax);\r\n        burnMin = newMin;\r\n        burnMax = newMax;\r\n        ChangeBurnBoundsEvent(newMin, newMax);\r\n    }\r\n\r\n    // transfer and transferFrom are both dispatched to this function, so we\r\n    // check blacklist and pay staking fee here.\r\n    function transferAllArgsNoAllowance(address _from, address _to, uint256 _value) internal {\r\n        require(!blackList.onList(_from));\r\n        require(!blackList.onList(_to));\r\n        super.transferAllArgsNoAllowance(_from, _to, _value);\r\n        payStakingFee(_to, _value, transferFeeNumerator, transferFeeDenominator, 0, _from);\r\n    }\r\n\r\n    function wipeBlacklistedAccount(address account) public onlyOwner {\r\n        require(blackList.onList(account));\r\n        uint256 oldValue = balanceOf(account);\r\n        balances.setBalance(account, 0);\r\n        totalSupply_ = totalSupply_.sub(oldValue);\r\n        WipedAccount(account, oldValue);\r\n    }\r\n\r\n    function payStakingFee(address payer, uint256 value, uint80 numerator, uint80 denominator, uint256 flatRate, address otherParticipant) private returns (uint256) {\r\n        if (noFeesList.onList(payer) || noFeesList.onList(otherParticipant)) {\r\n            return 0;\r\n        }\r\n        uint256 stakingFee = value.mul(numerator).div(denominator).add(flatRate);\r\n        if (stakingFee > 0) {\r\n            super.transferAllArgsNoAllowance(payer, staker, stakingFee);\r\n        }\r\n        return stakingFee;\r\n    }\r\n\r\n    function changeStakingFees(uint80 _transferFeeNumerator,\r\n                                 uint80 _transferFeeDenominator,\r\n                                 uint80 _mintFeeNumerator,\r\n                                 uint80 _mintFeeDenominator,\r\n                                 uint256 _mintFeeFlat,\r\n                                 uint80 _burnFeeNumerator,\r\n                                 uint80 _burnFeeDenominator,\r\n                                 uint256 _burnFeeFlat) public onlyOwner {\r\n        require(_transferFeeDenominator != 0);\r\n        require(_mintFeeDenominator != 0);\r\n        require(_burnFeeDenominator != 0);\r\n        transferFeeNumerator = _transferFeeNumerator;\r\n        transferFeeDenominator = _transferFeeDenominator;\r\n        mintFeeNumerator = _mintFeeNumerator;\r\n        mintFeeDenominator = _mintFeeDenominator;\r\n        mintFeeFlat = _mintFeeFlat;\r\n        burnFeeNumerator = _burnFeeNumerator;\r\n        burnFeeDenominator = _burnFeeDenominator;\r\n        burnFeeFlat = _burnFeeFlat;\r\n    }\r\n\r\n    function changeStaker(address newStaker) public onlyOwner {\r\n        require(newStaker != address(0));\r\n        staker = newStaker;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary NewSafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title TUSDGexlyCASH\r\n * @dev The main contract of the project.\r\n */\r\n  /**\r\n    * @title TUSDGexlyCASH\r\n    * @dev Контракт проекта;\r\n    */\r\n\r\ncontract TUSDGexlyCASH {\r\n    // Connecting SafeMath for safe calculations.\r\n      // Подключает библиотеку безопасных вычислений к контракту.\r\n    using NewSafeMath for uint;\r\n\r\n    // A variable for address of the owner;\r\n      // Переменная для хранения адреса владельца контракта;\r\n    address owner;\r\n    // A variable for address of the ERC20 token;\r\n      // Переменная для хранения адреса владельца контракта;\r\n    TrueUSD public token; // -- Название контракта токена изменить\r\n    // A variable for decimals of the token;\r\n      // Переменная для количества знаков после запятой у токена;\r\n    uint private decimals;\r\n\r\n    // A variable for storing deposits of investors.\r\n      // Переменная для хранения записей о сумме инвестиций инвесторов.\r\n    mapping (address => uint) deposit;\r\n    // A variable for storing amount of withdrawn money of investors.\r\n      // Переменная для хранения записей о сумме снятых средств.\r\n    mapping (address => uint) withdrawn;\r\n    // A variable for storing reference point to count available money to withdraw.\r\n      // Переменная для хранения времени отчета для инвесторов.\r\n    mapping (address => uint) lastTimeWithdraw;\r\n\r\n    // A constructor function for the contract. It used single time as contract is deployed.\r\n      // Единоразовая функция вызываемая при деплое контракта.\r\n    function TUSDGexlyCASH() public {\r\n        // Sets an owner for the contract;\r\n          // Устанавливает владельца контракта;\r\n        owner = msg.sender;\r\n        // Sets an ERC20 token for the contract;\r\n          // Устанавливает ERC20 токен;\r\n        token = TrueUSD(0x8dd5fbCe2F6a956C3022bA3663759011Dd51e73E);\r\n        // Sets a decimals of the ERC20 token;\r\n          // Устанавливает количество знаков после запятой;\r\n        decimals = 18;\r\n    }\r\n\r\n    // A function for transferring ownership of the contract (available only for the owner).\r\n      // Функция для переноса права владения контракта (доступна только для владельца).\r\n    function transferOwnership(address _newOwner) external {\r\n        require(msg.sender == owner);\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // A function for getting key info for investors.\r\n      // Функция для вызова ключевой информации для инвестора.\r\n    function getInfo(address _address) public view returns(uint Deposit, uint Withdrawn, uint AmountToWithdraw) {\r\n\r\n        // 1) Amount of invested tokens;\r\n          // 1) Сумма вложенных токенов;\r\n        Deposit = deposit[_address].div(10**decimals);\r\n        // 2) Amount of withdrawn tokens;\r\n          // 3) Сумма снятых средств;\r\n        Withdrawn = withdrawn[_address].div(10**decimals);\r\n        // 3) Amount of tokens which is available to withdraw;\r\n        // Formula without SafeMath: ((Current Time - Reference Point) - ((Current Time - Reference Point) % 1 period)) * (Deposit / 30) / decimals / 1 period\r\n          // 4) Сумма токенов доступных к выводу;\r\n          // Формула без библиотеки безопасных вычислений: ((Текущее время - Отчетное время) - ((Текущее время - Отчетное время) % 1 period)) * (Сумма депозита / 30) / decimals / 1 period\r\n        AmountToWithdraw = (block.timestamp.sub(lastTimeWithdraw[_address]).sub((block.timestamp.sub(lastTimeWithdraw[_address])).mod(1 days))).mul(deposit[_address].div(30)).div(10**decimals).div(1 days);\r\n    }\r\n\r\n    // A \"fallback\" function. It is automatically being called when anybody sends money to the contract. Function simply calls the \"invest\" function.\r\n      // Функция автоматически вызываемая при получении средств контрактом;\r\n    function() external payable {\r\n\r\n        // If the value of sent ETH is equal to 0, function 'withdraw' is called;\r\n          // Если было отправлено 0 эфиров вызывается функция Снятия доступных средств;\r\n        if (msg.value == 0) {\r\n            withdraw();\r\n            return;\r\n        }\r\n        // Otherwise function throws an error and doesn't accept ETH;\r\n          // Если были отправлены эфиры то функция отменяется и средства возвращаются отправителю;\r\n        revert();\r\n    }\r\n\r\n    // A function which accepts tokens of investors.\r\n      // Функция для перевода токенов на контракт.\r\n    function invest(uint _value) external {\r\n\r\n        // Transfers approved ERC20 tokens from investors address;\r\n          // Переводит одобренные к выводу токены ERC20 на данный контракт;\r\n        token.transferFrom(msg.sender, address(this), _value);\r\n        // Transfers a fee to the owner of the contract. The fee is 5% of the deposit (or Deposit / 20)\r\n          // Переводит комиссию владельцу (5%);\r\n        token.transfer(owner, _value.div(20));\r\n\r\n        // The special algorithm for investors who increases their deposits:\r\n          // Специальный алгоритм для инвесторов увеличивающих их вклад;\r\n        if (deposit[msg.sender] > 0) {\r\n            // Amount of tokens which is available to withdraw;\r\n            // Formula without SafeMath: ((Current Time - Reference Point) - ((Current Time - Reference Point) % 1 period)) * (Deposit / 30) / 1 period\r\n              // Расчет количества токенов доступных к выводу;\r\n              // Формула без библиотеки безопасных вычислений: ((Текущее время - Отчетное время) - ((Текущее время - Отчетное время) % 1 period)) * (Сумма депозита / 30) / 1 period\r\n            uint amountToWithdraw = (block.timestamp.sub(lastTimeWithdraw[msg.sender]).sub((block.timestamp.sub(lastTimeWithdraw[msg.sender])).mod(1 days))).mul(deposit[msg.sender].div(30)).div(1 days);\r\n            // The additional algorithm for investors who need to withdraw available dividends:\r\n              // Дополнительный алгоритм для инвесторов которые имеют средства к снятию;\r\n            if (amountToWithdraw != 0) {\r\n                // Increasing the withdrawn tokens by the investor.\r\n                  // Увеличение количества выведенных средств инвестором;\r\n                withdrawn[msg.sender] = withdrawn[msg.sender].add(amountToWithdraw);\r\n                // Transferring available dividends to the investor.\r\n                  // Перевод доступных к выводу средств на кошелек инвестора;\r\n                token.transfer(msg.sender, amountToWithdraw);\r\n            }\r\n            // Setting the reference point to the current time.\r\n              // Установка нового отчетного времени для инвестора;\r\n            lastTimeWithdraw[msg.sender] = block.timestamp;\r\n            // Increasing of the deposit of the investor.\r\n              // Увеличение Суммы депозита инвестора;\r\n            deposit[msg.sender] = deposit[msg.sender].add(_value);\r\n            // End of the function for investors who increases their deposits.\r\n              // Конец функции для инвесторов увеличивающих свои депозиты;\r\n            return;\r\n        }\r\n        // The algorithm for new investors:\r\n        // Setting the reference point to the current time.\r\n          // Алгоритм для новых инвесторов:\r\n          // Установка нового отчетного времени для инвестора;\r\n        lastTimeWithdraw[msg.sender] = block.timestamp;\r\n        // Storing the amount of the deposit for new investors.\r\n        // Установка суммы внесенного депозита;\r\n        deposit[msg.sender] = (_value);\r\n    }\r\n\r\n    // A function for getting available dividends of the investor.\r\n      // Функция для вывода средств доступных к снятию;\r\n    function withdraw() public {\r\n\r\n        // Amount of tokens which is available to withdraw.\r\n        // Formula without SafeMath: ((Current Time - Reference Point) - ((Current Time - Reference Point) % 1 period)) * (Deposit / 30) / 1 period\r\n          // Расчет количества токенов доступных к выводу;\r\n          // Формула без библиотеки безопасных вычислений: ((Текущее время - Отчетное время) - ((Текущее время - Отчетное время) % 1 period)) * (Сумма депозита / 30) / 1 period\r\n        uint amountToWithdraw = (block.timestamp.sub(lastTimeWithdraw[msg.sender]).sub((block.timestamp.sub(lastTimeWithdraw[msg.sender])).mod(1 days))).mul(deposit[msg.sender].div(30)).div(1 days);\r\n        // Reverting the whole function for investors who got nothing to withdraw yet.\r\n          // В случае если к выводу нет средств то функция отменяется;\r\n        if (amountToWithdraw == 0) {\r\n            revert();\r\n        }\r\n        // Increasing the withdrawn tokens by the investor.\r\n          // Увеличение количества выведенных средств инвестором;\r\n        withdrawn[msg.sender] = withdrawn[msg.sender].add(amountToWithdraw);\r\n        // Updating the reference point.\r\n        // Formula without SafeMath: Current Time - ((Current Time - Previous Reference Point) % 1 period)\r\n          // Обновление отчетного времени инвестора;\r\n          // Формула без библиотеки безопасных вычислений: Текущее время - ((Текущее время - Предыдущее отчетное время) % 1 period)\r\n        lastTimeWithdraw[msg.sender] = block.timestamp.sub((block.timestamp.sub(lastTimeWithdraw[msg.sender])).mod(1 days));\r\n        // Transferring the available dividends to the investor.\r\n          // Перевод выведенных средств;\r\n        token.transfer(msg.sender, amountToWithdraw);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"Deposit\",\"type\":\"uint256\"},{\"name\":\"Withdrawn\",\"type\":\"uint256\"},{\"name\":\"AmountToWithdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TUSDGexlyCASH","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://21e2ea2a144beb12b65414bfc4da2da1680779bf75410ace61f532c0a2a8bcdc"}]}