{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/**\r\n * @title Graceful\r\n *\r\n * This contract provides informative `require` with optional ability to `revert`.\r\n *\r\n * _softRequire is used when it's enough to return `false` in case if condition isn't fulfilled.\r\n * _hardRequire is used when it's necessary to make revert in case if condition isn't fulfilled.\r\n */\r\ncontract Graceful {\r\n    event Error(bytes32 message);\r\n\r\n    // Only for functions that return bool success before any changes made.\r\n    function _softRequire(bool _condition, bytes32 _message) internal {\r\n        if (_condition) {\r\n            return;\r\n        }\r\n        emit Error(_message);\r\n        // Return bytes32(0).\r\n        assembly {\r\n            mstore(0, 0)\r\n            return(0, 32)\r\n        }\r\n    }\r\n\r\n    // Generic substitution for require().\r\n    function _hardRequire(bool _condition, bytes32 _message) internal pure {\r\n        if (_condition) {\r\n            return;\r\n        }\r\n        // Revert with bytes32(_message).\r\n        assembly {\r\n            mstore(0, _message)\r\n            revert(0, 32)\r\n        }\r\n    }\r\n\r\n    function _not(bool _condition) internal pure returns(bool) {\r\n        return !_condition;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Owned\r\n *\r\n * This contract keeps and transfers contract ownership.\r\n *\r\n * After deployment msg.sender becomes an owner which is checked in modifier onlyContractOwner().\r\n *\r\n * Features:\r\n * Modifier onlyContractOwner() restricting access to function for all callers except the owner.\r\n * Functions of transferring ownership to another address.\r\n *\r\n * Note:\r\n * Function forceChangeContractOwnership allows to transfer the ownership to an address without confirmation.\r\n * Which is very convenient in case the ownership transfers to a contract.\r\n * But when using this function, it's important to be very careful when entering the address.\r\n * Check address three times to make sure that this is the address that you need\r\n * because you can't cancel this operation.\r\n */\r\ncontract Owned is Graceful {\r\n    bool public isConstructedOwned;\r\n    address public contractOwner;\r\n    address public pendingContractOwner;\r\n\r\n    event ContractOwnerChanged(address newContractOwner);\r\n    event PendingContractOwnerChanged(address newPendingContractOwner);\r\n\r\n    constructor() public {\r\n        constructOwned();\r\n    }\r\n\r\n    function constructOwned() public returns(bool) {\r\n        if (isConstructedOwned) {\r\n            return false;\r\n        }\r\n        isConstructedOwned = true;\r\n        contractOwner = msg.sender;\r\n        emit ContractOwnerChanged(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    modifier onlyContractOwner() {\r\n        _softRequire(contractOwner == msg.sender, 'Not a contract owner');\r\n        _;\r\n    }\r\n\r\n    function changeContractOwnership(address _to) public onlyContractOwner() returns(bool) {\r\n        pendingContractOwner = _to;\r\n        emit PendingContractOwnerChanged(_to);\r\n        return true;\r\n    }\r\n\r\n    function claimContractOwnership() public returns(bool) {\r\n        _softRequire(pendingContractOwner == msg.sender, 'Not a pending contract owner');\r\n        contractOwner = pendingContractOwner;\r\n        delete pendingContractOwner;\r\n        emit ContractOwnerChanged(contractOwner);\r\n        return true;\r\n    }\r\n\r\n    function forceChangeContractOwnership(address _to) public onlyContractOwner() returns(bool) {\r\n        contractOwner = _to;\r\n        emit ContractOwnerChanged(contractOwner);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() public view returns(uint256 supply);\r\n    function balanceOf(address _owner) public view returns(uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns(bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\r\n    function decimals() public view returns(uint8);\r\n}\r\n\r\ncontract AssetProxyInterface is ERC20Interface {\r\n    function _forwardApprove(address _spender, uint _value, address _sender) public returns(bool);\r\n    function _forwardTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns(bool);\r\n    function _forwardTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) public returns(bool);\r\n    function recoverTokens(ERC20Interface _asset, address _receiver, uint _value) public returns(bool);\r\n    function etoken2() public pure returns(address) {} // To be replaced by the implicit getter;\r\n    function etoken2Symbol() public pure returns(bytes32) {} // To be replaced by the implicit getter;\r\n}\r\n\r\ncontract RegistryICAPInterface {\r\n    function parse(bytes32 _icap) public view returns(address, bytes32, bool);\r\n    function institutions(bytes32 _institution) public view returns(address);\r\n}\r\n\r\ncontract EToken2Interface {\r\n    function registryICAP() public view returns(RegistryICAPInterface);\r\n    function baseUnit(bytes32 _symbol) public view returns(uint8);\r\n    function description(bytes32 _symbol) public view returns(string);\r\n    function owner(bytes32 _symbol) public view returns(address);\r\n    function isOwner(address _owner, bytes32 _symbol) public view returns(bool);\r\n    function totalSupply(bytes32 _symbol) public view returns(uint);\r\n    function balanceOf(address _holder, bytes32 _symbol) public view returns(uint);\r\n    function isLocked(bytes32 _symbol) public view returns(bool);\r\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) public returns(bool);\r\n    function reissueAsset(bytes32 _symbol, uint _value) public returns(bool);\r\n    function revokeAsset(bytes32 _symbol, uint _value) public returns(bool);\r\n    function setProxy(address _address, bytes32 _symbol) public returns(bool);\r\n    function lockAsset(bytes32 _symbol) public returns(bool);\r\n    function proxyTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) public returns(bool);\r\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) public returns(bool);\r\n    function allowance(address _from, address _spender, bytes32 _symbol) public view returns(uint);\r\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(bool);\r\n    function changeOwnership(bytes32 _symbol, address _newOwner) public returns(bool);\r\n}\r\n\r\ncontract OldAssetProxyInterface {\r\n    function recoverTokens(uint _value) public returns(bool);\r\n}\r\n\r\n/**\r\n * @title MarkOwnership\r\n *\r\n * This contract allows to recover tokens from asset proxy address and reissue more tokens if allowed.\r\n */\r\ncontract MarkOwnership is Owned {\r\n    AssetProxyInterface public proxy;\r\n    bool public isOldRecover;\r\n    bool public isReissueAllowed;\r\n\r\n    constructor(address _proxyOwner, AssetProxyInterface _proxy, bool _isOldRecover, bool _isReissueAllowed) public {\r\n        forceChangeContractOwnership(_proxyOwner);\r\n        proxy = _proxy;\r\n        isOldRecover = _isOldRecover;\r\n        isReissueAllowed = _isReissueAllowed;\r\n    }\r\n\r\n    function reissueAsset(uint _value) public onlyContractOwner() returns(bool) {\r\n        _softRequire(isReissueAllowed, 'Reissue is not allowed');\r\n        EToken2Interface etoken2 = EToken2Interface(proxy.etoken2());\r\n        bytes32 symbol = proxy.etoken2Symbol();\r\n        _softRequire(etoken2.reissueAsset(symbol, _value), 'Asset reissue failed');\r\n        _hardRequire(proxy.transfer(contractOwner, _value), 'Forward tokens to owner failed');\r\n        return true;\r\n    }\r\n\r\n    function recoverTokens(ERC20Interface _token, address _receiver, uint _value) public onlyContractOwner() returns(bool) {\r\n        if (isOldRecover) {\r\n            _softRequire(address(_token) == address(proxy), 'Can only recover own asset');\r\n            _softRequire(OldAssetProxyInterface(proxy).recoverTokens(_value), 'Recover failed');\r\n            _hardRequire(proxy.transfer(_receiver, _value), 'Forward tokens to owner failed');\r\n        } else {\r\n            _softRequire(proxy.recoverTokens(_token, _receiver, _value), 'Recover failed');\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isOldRecover\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isConstructedOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReissueAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"forceChangeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reissueAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"constructOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxyOwner\",\"type\":\"address\"},{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_isOldRecover\",\"type\":\"bool\"},{\"name\":\"_isReissueAllowed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContractOwner\",\"type\":\"address\"}],\"name\":\"ContractOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPendingContractOwner\",\"type\":\"address\"}],\"name\":\"PendingContractOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"Error\",\"type\":\"event\"}]","ContractName":"MarkOwnership","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c8fc6c50ecf32ffe603a9911578ee418c3758bc271af5d14a3d0c7978747d3c6"}]}