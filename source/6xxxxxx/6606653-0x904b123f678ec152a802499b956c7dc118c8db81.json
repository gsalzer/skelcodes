{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n// ERC Token Standard #20 Interface \r\ncontract ERC20 {\r\n    // Get the total token supply\r\n    uint public totalSupply;\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address who) constant returns(uint256);\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address to, uint value) returns(bool ok);\r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address from, address to, uint value) returns(bool ok);\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address spender, uint value) returns(bool ok);\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address owner, address spender) constant returns(uint);\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n}\r\n\r\n\r\ncontract FuBi is ERC20 {\r\n\r\n    // each address in this contract may have tokens, to define balances and store balance of each address we use mapping.\r\n    mapping (address => uint256) balances;   \r\n    // frozen account mapping to store account which are freeze to do anything\r\n    mapping (address => bool) public frozenAccount; //\r\n\r\n    //address internal owner = 0x4Bce8E9850254A86a1988E2dA79e41Bc6793640d;  \r\n\r\n    // Owner of this contract will be the creater of the contract\r\n    address public owner;\r\n    // name of this contract and investment fund\r\n    string public name = \"FuBi\";  \r\n    // token symbol\r\n    string public symbol = \"Fu\";  \r\n    // decimals (for humans)\r\n    uint8 public decimals = 6;    \r\n    // total supply of tokens it includes 6 zeros extra to handle decimal of 6 places.\r\n    uint256 public totalSupply = 20000000000000000;  \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    // events that will notifies clints about the freezing accounts and status\r\n    event FrozenFu(address target, bool frozen);\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    \r\n    bool flag = false;\r\n\r\n    // modifier to authorize owner\r\n    modifier onlyOwner()\r\n    {\r\n        if (msg.sender != owner) revert();\r\n        _;\r\n    }\r\n\r\n    // constructor called during creation of contract\r\n    function FuBi() { \r\n        owner = msg.sender;       // person who deploy the contract will be the owner of the contract\r\n        balances[owner] = totalSupply; // balance of owner will be equal to 20000 million\r\n        }    \r\n\r\n    // implemented function balanceOf of erc20 to know the balnce of any account\r\n    function balanceOf(address _owner) constant returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n    // transfer tokens from one address to another\r\n    function transfer(address _to, uint _value) returns (bool success)\r\n    {\r\n         // Check send token value > 0;\r\n        if(_value <= 0) throw;                                     \r\n        // Check if the sender has enough\r\n        if (balances[msg.sender] < _value) throw;                   \r\n        // Check for overflows\r\n        if (balances[_to] + _value < balances[_to]) throw; \r\n        // Subtract from the sender\r\n        balances[msg.sender] -= _value;                             \r\n        // Add the same to the recipient, if it's the contact itself then it signals a sell order of those tokens\r\n        balances[_to] += _value;                                    \r\n        // Notify anyone listening that this transfer took place               \r\n        Transfer(msg.sender, _to, _value);                          \r\n        return true;      \r\n    }\r\n    \r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n    returns(bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint _value) returns(bool success) {\r\n        if (_to == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[_from] < _value) throw; // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) throw; // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw; // Check allowance\r\n\r\n        balances[_from] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n   //owner can call this freeze function to freeze some accounts from doing certain functions\r\n    function freeze(address target, bool freeze) onlyOwner\r\n    {\r\n        {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFu(target,freeze);  \r\n        }\r\n        \r\n    }\r\n   // transfer the ownership to new address, called only by owner\r\n   function transferOwnership(address to) public onlyOwner {\r\n         owner = to;\r\n         balances[owner]=balances[msg.sender];\r\n         balances[msg.sender]=0;\r\n    }\r\n    \r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFu\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FuBi","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9c75318a6bb99d83f9eb91399643806901a40f3782933bc2cf489a852d608c8e"}]}