{"status":"1","message":"OK","result":[{"SourceCode":"// 口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口\r\n// 口口口口口口口口口口口口口　　　　　　　口口口口口口口口口口口口口口口口口口口口口口口口口口口口　　　　口口口口口口口口口\r\n// 口口口口口口口口口口口口　　　　　　　　　口口口口口口口口口口口口口口口口口口口口口口口口口口口　　　　口口口口口口口口口\r\n// 口口口口口口口口口口口　　　　口口口　　　　口口口口口口口口口口口口口口口口口口口口口口口口口口　　　　口口口口口口口口口\r\n// 口口口口口口口口口口　　　　口口口口口　　　　口口口口口口口口口口口口口口口口口口口口口口口口口　　　　口口口口口口口口口\r\n// 口口口口口口口口口口　　　口口口口口口口　　　口口　　　　　　　口口口　　　　　　口口　　　　　　　　　口口口口口口口口口\r\n// 口口口口口口口口口　　　　口口口口口口口口口口口　　　　　　　　　口口　　　　　　口　　　　　　　　　　口口口口口口口口口\r\n// 口口口口口口口口口　　　　口口口口口口口口口口　　　　口口口　　　口口　　　　口口口　　　口口　　　　　口口口口口口口口口\r\n// 口口口口口口口口口　　　　口口口口口口口口口口口口口口口口口　　　口口　　　口口口　　　　口口口　　　　口口口口口口口口口\r\n// 口口口口口口口口口　　　　口口口口口口口口口口口口　　　　　　　　　口　　　口口口　　　口口口口　　　　口口口口口口口口口\r\n// 口口口口口口口口口　　　　口口口口口口口口口口口　　　　　　　　　　口　　　口口口　　　口口口口　　　　口口口口口口口口口\r\n// 口口口口口口口口口口　　　口口口口口口口　　　　　　　口口口　　　　口　　　口口口　　　口口口口　　　　口口口口口口口口口\r\n// 口口口口口口口口口口　　　　口口口口口　　　　　　　口口口口　　　　口　　　口口口　　　　口口口　　　　口口口口口口口口口\r\n// 口口口口口口口口口口口　　　　口口口　　　　口　　　　口口　　　　　口　　　口口口　　　　口口　　　　　口口口口口口口口口\r\n// 口口口口口口口口口口口口　　　　　　　　　　口口　　　　　　　　　　口　　　口口口口　　　　　　　　　　口口口口口口口口口\r\n// 口口口口口口口口口口口口口　　　　　　　口口口口口　　　　　　　　　口　　　口口口口口　　　　　　　　　口口口口口口口口口\r\n// 口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口\r\n// 口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口\r\n// 口口口　　　　口口口口口口　　　　　口口口口口口口口口口口口口　　　口口口口口口口口口口口口口口口口口口口口口口口口口口口\r\n// 口口口　　　　　口口口口口　　　　　口口口口口口口口口口口口口　　　口口口口口口口口口口口口口口口口口口口口口口口口口口口\r\n// 口口口　　　　　口口口口口　　　　　口口口口口口口口口口口口口　　　口口口口口口口口口口口口口口口口口口口口口口口口口口口\r\n// 口口口　　　　　口口口口　　　　　　口口口口口口口口口口口口口　　　口口口口口口口口口口口口口口口口口口口口口口口口口口口\r\n// 口口口　　　　　　口口口　　　　　　口口口　　　　　　　口口口　　　口口　　　　口口口　　　　　　口口口　　　　　　口口口\r\n// 口口口　　　　　　口口口　　　　　　口口　　　　　　　　　口口　　　口　　　　口口　　　　　　　　　口口　　　　　　口口口\r\n// 口口口　　　　　　口口　　　　　　　口　　　　口口口　　　口口　　　　　　　口口口　　　口口口　　　　口　　　　口口口口口\r\n// 口口口　　　　　　　口　　　　　　　口口口口口口口口　　　口口　　　　　　口口口　　　　口口口口　　　口　　　口口口口口口\r\n// 口口口　　　口　　　口　　　　　　　口口口　　　　　　　　　口　　　　　　口口口　　　　　　　　　　　口　　　口口口口口口\r\n// 口口口　　　口　　　口　　　　　　　口口　　　　　　　　　　口　　　　　　口口口　　　　　　　　　　　口　　　口口口口口口\r\n// 口口口　　　口　　　　　　口　　　　口　　　　口口口　　　　口　　　　　　　口口　　　口口口口口口口口口　　　口口口口口口\r\n// 口口口　　　口口　　　　　口　　　　口　　　口口口口　　　　口　　　口　　　　口　　　　口口口口口口口口　　　口口口口口口\r\n// 口口口　　　口口　　　　　口　　　　口　　　　口口　　　　　口　　　口口　　　口口　　　　口口　　　　口　　　口口口口口口\r\n// 口口口　　　口口　　　　口口　　　　口口　　　　　　　　　　口　　　口口　　　　口　　　　　　　　　口口　　　口口口口口口\r\n// 口口口　　　口口口　　　口口　　　　口口口　　　　　　　　　口　　　口口口　　　　口口　　　　　　口口口　　　口口口口口口\r\n// 口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public returns (bool) {\r\n        paused = true;\r\n        emit Pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public returns (bool) {\r\n        paused = false;\r\n        emit Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint);\r\n    function transfer(address to, uint tokens) public returns (bool);\r\n    function approve(address spender, uint tokens) public returns (bool);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool);\r\n\r\n    function name() public constant returns (string);\r\n    function symbol() public constant returns (string);\r\n    function decimals() public constant returns (uint8);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n/**\r\n* ERC223 token by Dexaran\r\n* New ERC223 contract interface\r\n* https://github.com/Dexaran/ERC223-token-standard\r\n*/\r\ncontract ERC223 is ERC20Interface {\r\n    function transfer(address to, uint value, bytes data) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\n/**\r\n* @title Contract that will work with ERC223 tokens.\r\n*/\r\ncontract ERC223ReceivingContract {\r\n    /**\r\n     * @dev Standard ERC223 function that will handle incoming token transfers.\r\n     * @param _from  Token sender address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n    function doTransfer(address _to, uint256 _index) public returns (uint256 price, address owner);\r\n}\r\n\r\ncontract CardMakerCake is ERC223, Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) internal allowed;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    // EIP1046/1047\r\n    string private tokenURI_ = \"\";\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    constructor() public {\r\n        tokenURI_ = \"cardmaker.io\";\r\n        name = \"Card Alchemists' Knowledge Energy (CardMaker Token)\";\r\n        symbol = \"CAKE\";\r\n        decimals = 18;\r\n        totalSupply = 10000 * 10000 * 100 * 10 ** uint(decimals);\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function tokenURI() external view returns (string) {\r\n        return tokenURI_;\r\n    }\r\n\r\n    // Function to access name of token .\r\n    function name() public constant returns (string) {\r\n        return name;\r\n    }\r\n    // Function to access symbol of token .\r\n    function symbol() public constant returns (string) {\r\n        return symbol;\r\n    }\r\n    // Function to access decimals of token .\r\n    function decimals() public constant returns (uint8) {\r\n        return decimals;\r\n    }\r\n    // Function to access total supply of tokens .\r\n    function totalSupply() public constant returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    // Function that is called when a user or another contract wants to transfer funds .\r\n    function transfer(address _to, uint _value, bytes _data) public whenNotPaused returns (bool) {\r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    // Standard function transfer similar to ERC20 transfer with no _data .\r\n    // Added due to backwards compatibility reasons .\r\n    function transfer(address _to, uint _value) public whenNotPaused returns (bool) {\r\n        bytes memory empty;\r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint length;\r\n        assembly {\r\n        //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n\r\n    //function that is called when transaction target is an address\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool) {\r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    //function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool) {\r\n\r\n        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n        uint256 price;\r\n        address owner;\r\n        (price, owner) = receiver.doTransfer(msg.sender, bytesToUint(_data));\r\n\r\n        if (balanceOf(msg.sender) < price) revert();\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(price);\r\n        balances[owner] = balanceOf(owner).add(price);\r\n        receiver.tokenFallback(msg.sender, price, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _tokenOwner, address _spender) public constant returns (uint) {\r\n        return allowed[_tokenOwner][_spender];\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool) {\r\n        require (_value > 0);\r\n        // Check if the sender has enough\r\n        require (balanceOf(msg.sender) >= _value);\r\n        // Subtract from the sender\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n        // Updates totalSupply\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function bytesToUint(bytes b) private pure returns (uint result) {\r\n        uint i;\r\n        result = 0;\r\n        for (i = 0; i < b.length; i++) {\r\n            uint c = uint(b[i]);\r\n            if (c >= 48 && c <= 57) {\r\n                result = result * 10 + (c - 48);\r\n            }\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint _tokens) public whenNotPaused returns (bool) {\r\n        allowed[msg.sender][_spender] = _tokens;\r\n        emit Approval(msg.sender, _spender, _tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _tokens) public whenNotPaused returns (bool) {\r\n        require(_to != address(0));\r\n        require(_tokens <= balances[_from]);\r\n        require(_tokens <= allowed[_from][msg.sender]);\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_tokens);\r\n        balances[_from] = balances[_from].sub(_tokens);\r\n        balances[_to] = balances[_to].add(_tokens);\r\n        emit Transfer(_from, _to, _tokens);\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool){\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CardMakerCake","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bd5ea367481f3d6b0b74d6b4d0d3cdbc29e82535257e80a78c295afb32379cb2"}]}