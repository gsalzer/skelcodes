{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n *\r\n *  EasyInvest7 V2 Contract\r\n *  - GAIN 7% PER 24 HOURS\r\n *  - Principal withdrawal anytime\r\n *  - The balance of the contract can not greater than 200eth\r\n *\r\n *\r\n * How to use:\r\n *  1. Send amount of ether to make an investment, max 50eth\r\n *  2a. Get your profit and your principal by sending 0 ether transaction (every day, every week, i don't care unless you're spending too much on GAS)\r\n *  OR\r\n *  2b. Send more ether to reinvest AND get your profit at the same time\r\n *\r\n * RECOMMENDED GAS LIMIT: 150000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n *\r\n * www.easyinvest7.biz\r\n *\r\n */\r\ncontract EasyInvestV2 {\r\n    using SafeMath              for *;\r\n\r\n    string constant public name = \"EasyInvest7\";\r\n    string constant public symbol = \"EasyInvest7\";\r\n    \r\n    uint256 _maxInvest = 5e19;\r\n    uint256 _maxBalance = 2e20; \r\n\r\n    address public promoAddr_ = address(0x81eCf0979668D3C6a812B404215B53310f14f451);\r\n    \r\n    // records amounts invested\r\n    mapping (address => uint256) public invested;\r\n    // records time at which investments were made\r\n    mapping (address => uint256) public atTime;\r\n    \r\n    uint256 public NowETHINVESTED = 0;\r\n    uint256 public AllINVESTORS = 0;\r\n    uint256 public AllETHINVESTED = 0;\r\n\r\n    // this function called every time anyone sends a transaction to this contract\r\n    function () external payable {\r\n        \r\n        uint256 realBalance = getBalance().sub(msg.value);\r\n        \r\n        require(msg.value <= _maxInvest  , \"invest amount error, please set the exact amount\");\r\n        require(realBalance < _maxBalance  , \"max balance, can't invest\");\r\n        \r\n        uint256 more_ = 0;\r\n        uint256 amount_ = msg.value;\r\n        if (amount_.add(realBalance) > _maxBalance && amount_ > 0) {\r\n            more_ = amount_.add(realBalance).sub(_maxBalance);\r\n            amount_ = amount_.sub(more_);\r\n            \r\n            msg.sender.transfer(more_);\r\n        }\r\n        \r\n        if (amount_.add(invested[msg.sender]) > _maxInvest && amount_ > 0) {\r\n            more_ = amount_.add(invested[msg.sender]).sub(_maxInvest);\r\n            amount_ = amount_.sub(more_);\r\n            \r\n            msg.sender.transfer(more_);\r\n        }\r\n\r\n        // if sender (aka YOU) is invested more than 0 ether\r\n        if (invested[msg.sender] != 0) {\r\n            // calculate profit amount as such:\r\n            // amount = (amount invested) * 7% * (times since last transaction) / 24 hours\r\n            uint256 amount = invested[msg.sender] * 7 / 100 * (now - atTime[msg.sender]) / 24 hours;\r\n\r\n            // send calculated amount of ether directly to sender (aka YOU)\r\n            msg.sender.transfer(amount);\r\n        } else {\r\n            if (atTime[msg.sender] == 0) {\r\n                AllINVESTORS += 1;\r\n            }\r\n        }\r\n\r\n        // record time and invested amount (msg.value) of this transaction\r\n        if (msg.value == 0 && invested[msg.sender] != 0) {\r\n            msg.sender.transfer(invested[msg.sender]);\r\n            NowETHINVESTED = NowETHINVESTED.sub(invested[msg.sender]);\r\n            \r\n            atTime[msg.sender] = now;\r\n            invested[msg.sender] = 0;\r\n            \r\n        } else {\r\n            atTime[msg.sender] = now;\r\n            invested[msg.sender] += amount_;\r\n            NowETHINVESTED = NowETHINVESTED.add(amount_);\r\n            AllETHINVESTED = AllETHINVESTED.add(amount_);\r\n        }\r\n        \r\n        if (amount_ > 1e14) {\r\n            promoAddr_.transfer(amount_.mul(2).div(100));\r\n        }\r\n    }\r\n    \r\n    function getBalance() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n    \r\n\r\n}\r\n\r\n/***********************************************************\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n ***********************************************************/\r\n library SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AllINVESTORS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NowETHINVESTED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AllETHINVESTED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EasyInvestV2","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://41767a51cef401a674baf25b768b1b7d17c014ce84ab190f3ac7d77888f29354"}]}