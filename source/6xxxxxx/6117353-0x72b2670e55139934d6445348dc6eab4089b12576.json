{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface HourglassInterface {\r\n    function buy(address _referredBy) payable external returns(uint256);\r\n    function balanceOf(address _playerAddress) external view returns(uint256);\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\r\n    function sell(uint256 _amountOfTokens) external;\r\n    function withdraw() external;\r\n}\r\n\r\ncontract TakeoutController {\r\n    address owner;\r\n    address takeoutWallet;\r\n    HourglassInterface private Hourglass;\r\n    \r\n    constructor() public {\r\n        Hourglass = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\r\n        takeoutWallet = 0xf783A81F046448c38f3c863885D9e99D10209779;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(owner == msg.sender, \"Access Denied!\");\r\n        _;\r\n    }\r\n    \r\n    function buyTokens() external payable{\r\n        Hourglass.buy.value(msg.value)(takeoutWallet);\r\n    }\r\n    \r\n    function () external payable {\r\n    }\r\n    \r\n    function transferTokens() external onlyOwner {\r\n        uint256 _amountOfTokens = getBalance();\r\n        Hourglass.transfer(takeoutWallet, _amountOfTokens);\r\n    }\r\n    \r\n    function getBalance() public view returns (uint256 amountOfTokens) {\r\n        amountOfTokens = Hourglass.balanceOf(address(this));\r\n    }\r\n    \r\n    function withdrawDividends() external onlyOwner {\r\n        Hourglass.withdraw();\r\n    }\r\n    \r\n    function sellTokens() external onlyOwner {\r\n        uint256 _amountOfTokens = getBalance();\r\n        Hourglass.sell(_amountOfTokens);\r\n    }\r\n    \r\n    function extractFund(uint256 _amount) external onlyOwner {\r\n        if (_amount == 0) {\r\n            takeoutWallet.transfer(address(this).balance);\r\n        } else {\r\n            require(_amount <= address(this).balance);\r\n            takeoutWallet.transfer(_amount);\r\n        }\r\n    }\r\n    \r\n    function changeTakeoutWallet(address _newTakeoutWallet) external onlyOwner {\r\n        takeoutWallet = _newTakeoutWallet;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTakeoutWallet\",\"type\":\"address\"}],\"name\":\"changeTakeoutWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"extractFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TakeoutController","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6a176750fb7cc07c7c26ec4674bac262bdef97ed158fc3e1138575ba4ae828b7"}]}