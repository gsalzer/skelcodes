{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract Game{\r\n  using ShareCalc for uint256;\r\n  using SafeMath for *;\r\n  uint256 constant private weight0 = 1;\r\n  uint256 constant private weight1 = 1;  \r\n  uint256 constant private refcodeFee = 1e16;\r\n  uint256 constant private phasePerStage = 4;\r\n  uint256 constant private maxStage = 10;\r\n  Entrepreneur.Company public gameState;  \r\n  mapping (bytes32 => address) public refcode2Addr;\r\n\r\n  mapping (address => Entrepreneur.Player) public players;    \r\n  address foundationAddr = 0x52E9e51e2519e9D8e5D68D992958e7D1bD4e5899;\r\n  uint256 constant private phaseLen  = 11 hours;\r\n  uint256 constant private growthTarget    = 110; \r\n  uint256 constant private lockup = 2 ;\r\n  uint256 constant private sweepDelay = 30 days;\r\n  Entrepreneur.Allocation rate = Entrepreneur.Allocation(50,9,3,2,6,30);\r\n  mapping (uint256 => Entrepreneur.Phase) public phases;\r\n  mapping (uint256 => mapping (address => uint256)) public phase_player_origShare; \r\n  mapping (uint256 =>mapping (uint256 => mapping (address => uint256))) public stage_prod_player_origShare;\r\n  mapping (uint256 =>mapping (uint256 => mapping (address => uint256))) public stage_prod_player_cdps;\r\n  mapping (uint256 =>mapping (uint256 => mapping (address => uint256))) public stage_prod_player_cbps;\r\n  mapping (uint256 =>mapping (uint256 =>  uint256)) public phase_prod_Share;\r\n  mapping (uint256 =>mapping (uint256 =>  uint256)) public stage_prod_currShare;\r\n  mapping (uint256 =>mapping (uint256 =>  uint256)) public stage_prod_origShare;\r\n  mapping (uint256 =>mapping (uint256 =>  uint256)) public stage_prod_cdps;\r\n  mapping (uint256 =>mapping (uint256 =>  uint256)) public stage_prod_cbps;\r\n  mapping (address =>mapping (uint256=>  bytes32)) public player_id_refCode;\r\n  modifier isHuman() { \r\n    require(msg.sender == tx.origin, \"Humans only\");\r\n    _;\r\n  }\r\n  modifier ethLimit(uint256 _eth) { \r\n    require(_eth >= 1e16, \"0.01ETH min\");\r\n    require(_eth <= 1e20, \"100ETH max\");\r\n    _;    \r\n  }\r\n  constructor () public {\r\n    gameState.stage=1;\r\n    gameState.phase=1;\r\n    phases[gameState.phase].ethGoal=10*1e18;\r\n    phases[gameState.phase].shareGoal=(gameState.eth).sharesRec(phases[gameState.phase].ethGoal);            \r\n    phases[gameState.phase].stage=1;    \r\n  }\r\n  string public gameName = \"Entrepreneur\";\r\n  function checkRefcode(address playerAddr,uint256 id)\r\n    public \r\n    view\r\n    returns(bytes32)\r\n  {\r\n    return player_id_refCode[playerAddr][id];\r\n  }\r\n  function accruedDiv (address playerAddr)\r\n    public \r\n    view \r\n    returns (uint256)\r\n  {\r\n    uint256 div=0;\r\n    for(uint i=1;i<=gameState.stage;i++){\r\n      for(uint j=0;j<2;j++){\r\n        div=(stage_prod_cdps[i][j].sub(stage_prod_player_cdps[i][j][playerAddr]).mul(stage_prod_player_origShare[i][j][playerAddr])/1e18).add(div);        \r\n      }\r\n    }\r\n    return div;\r\n  }\r\n  function accruedBuyout (address playerAddr)\r\n    public\r\n    view \r\n    returns (uint256)\r\n  {\r\n    if(gameState.stage<=lockup)\r\n      return 0;\r\n    uint256 buyoutEth=0;\r\n      for(uint i=1;i<=gameState.stage.sub(lockup);i++){\r\n        buyoutEth=buyoutEth.add((stage_prod_cbps[i][0].sub(stage_prod_player_cbps[i][0][playerAddr])).mul(stage_prod_player_origShare[i][0][playerAddr])/1e18);        \r\n      }\r\n    return buyoutEth;\r\n  }\r\n  function potShare(address playerAddr)\r\n    private\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 weightedShare=phase_player_origShare[gameState.phase][playerAddr].mul(weight0);\r\n    if(gameState.phase>1){\r\n      weightedShare=weightedShare.add(phase_player_origShare[gameState.phase-1][playerAddr].mul(weight1));                  \r\n    }\r\n    return weightedShare;        \r\n  }\r\n  function accruedLiq(address playerAddr) \r\n    private \r\n    view \r\n    returns (uint256)\r\n  {\r\n    if(gameState.ended>0 && !players[playerAddr].redeemed )\r\n    {                                          \r\n      return (gameState.lps).mul(potShare(playerAddr))/1e18;      \r\n    }      \r\n    return 0;\r\n  }\r\n  function currShares(address playerAddr)\r\n    private\r\n    view\r\n    returns(uint256)\r\n  {\r\n    uint256 _shares;\r\n    for(uint i=1;i<=gameState.stage;i++){\r\n      for(uint j=0;j<2;j++){\r\n        if(stage_prod_origShare[i][j]>0)\r\n          _shares=_shares.add(stage_prod_player_origShare[i][j][playerAddr].mul(stage_prod_currShare[i][j])/stage_prod_origShare[i][j]);        \r\n      }\r\n    }\r\n    return _shares;\r\n  }\r\n  function getState() \r\n    public \r\n    view \r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    uint256 phase=gameState.phase;\r\n    uint256 end;\r\n    uint256 ethGoal;\r\n    uint256 eth;  \r\n    uint256 stage=gameState.stage;\r\n    if(phases[phase].end!=0 && now > phases[phase].end && phases[phase].shares>=phases[phase].shareGoal && gameState.ended==0){\r\n      end=phases[phase].end.add(phaseLen);      \r\n      ethGoal=phases[phase].eth.mul(growthTarget)/100;\r\n      phase++;\r\n      stage=(phase-1)/phasePerStage+1;                  \r\n    }else{\r\n      end=phases[phase].end;\r\n      ethGoal=phases[phase].ethGoal;\r\n      eth=phases[phase].eth;\r\n    }\r\n    return (\r\n      gameState.pot, \r\n      gameState.origShares,\r\n      gameState.plyrCount,\r\n      phase,\r\n      end,\r\n      ethGoal,\r\n      eth,\r\n      stage,\r\n      gameState.eth,\r\n      gameState.currShares\r\n      );    \r\n  }\r\n  // function getState2() \r\n  //   public \r\n  //   view \r\n  //   returns (\r\n  //     uint256 pot,\r\n  //     uint256 origShares,\r\n  //     uint256 plyrCount,\r\n  //     uint256 phase,\r\n  //     uint256 end,\r\n  //     uint256 phaseEthGoal,\r\n  //     uint256 phaseEth,\r\n  //     uint256 stage,\r\n  //     uint256 totalEth,\r\n  //     uint256 totalCurrShares\r\n  //   )\r\n  // {\r\n  //   phase=gameState.phase;            \r\n  //   stage=gameState.stage;\r\n  //   if(phases[phase].end!=0 && now > phases[phase].end && phases[phase].shares>=phases[phase].shareGoal && gameState.ended==0){\r\n  //     end=phases[phase].end.add(phaseLen);      \r\n  //     phaseEthGoal=phases[phase].eth.mul(growthTarget)/100;\r\n  //     phase++;\r\n  //     stage=(phase-1)/phasePerStage+1;                  \r\n  //   }else{\r\n  //     end=phases[phase].end;\r\n  //     phaseEthGoal=phases[phase].ethGoal;\r\n  //     phaseEth=phases[phase].eth;\r\n  //   }\r\n  //   pot=gameState.pot;\r\n  //   origShares=gameState.origShares;\r\n  //   plyrCount=gameState.plyrCount;\r\n  //   totalEth=gameState.eth;\r\n  //   totalCurrShares=gameState.currShares;\r\n  //   return (\r\n  //     pot, \r\n  //     origShares,\r\n  //     plyrCount,\r\n  //     phase,\r\n  //     end,\r\n  //     phaseEthGoal,\r\n  //     phaseEth,\r\n  //     stage,\r\n  //     totalEth,\r\n  //     totalCurrShares\r\n  //     );    \r\n  // }\r\n  function phaseAddtlInfo(uint256 phase)\r\n    public \r\n    view\r\n    returns(      \r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  { \r\n    uint256 growth;\r\n    if(phase==1)\r\n      growth=0;\r\n    else\r\n      growth=phases[phase].eth.mul(10000)/phases[phase.sub(1)].eth;\r\n    uint256 stage;    \r\n    uint256 ethGoal;          \r\n    if(phase == gameState.phase + 1 && phases[gameState.phase].end!=0 && phases[gameState.phase].shares>=phases[gameState.phase].shareGoal && now > phases[gameState.phase].end){\r\n      stage=(phase-1)/phasePerStage+1;            \r\n      ethGoal=phases[gameState.phase].eth.mul(growthTarget)/100;\r\n    }else{\r\n      stage=phases[phase].stage;      \r\n      ethGoal=phases[phase].ethGoal;\r\n    }\r\n    return(\r\n      stage,      \r\n      phases[phase].eth,\r\n      ethGoal,      \r\n      growth\r\n    );\r\n  }\r\n  function getPlayerIncome(address playerAddr) \r\n    public \r\n    view \r\n    returns (      \r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n      )\r\n  {     \r\n    return (     \r\n      players[playerAddr].redeemedDiv.add(accruedDiv(playerAddr)),      \r\n      players[playerAddr].redeemedRef,\r\n      players[playerAddr].redeemedBuyout.add(accruedBuyout(playerAddr)),\r\n      players[playerAddr].redeemedLiq.add(accruedLiq(playerAddr)));\r\n  }\r\n  \r\n  function getPlayerVault(address playerAddr) \r\n    public \r\n    view \r\n    returns (            \r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n      )\r\n  { \r\n    uint256 shares=currShares(playerAddr);\r\n    return (            \r\n      totalBal(playerAddr),\r\n      shares,\r\n      potShare(playerAddr),\r\n      (gameState.origShares).ethRec(shares));\r\n  }\r\n  function totalBal(address playerAddr)\r\n    public \r\n    view \r\n    returns(uint256)\r\n  {\r\n    uint256 div = accruedDiv(playerAddr);  \r\n    uint256 liq = accruedLiq(playerAddr);\r\n    uint256 buyout=accruedBuyout(playerAddr);\r\n    return players[playerAddr].bal.add(div).add(liq).add(buyout);\r\n  }\r\n\r\n  function _register(address playerAddr,address ref) \r\n    private\r\n  {\r\n    if(players[playerAddr].id>0)\r\n      return;\r\n    if(players[ref].id==0 || ref==playerAddr)\r\n      ref=address(0);\r\n    players[playerAddr].id=++gameState.plyrCount;\r\n    players[playerAddr].ref=ref;\r\n    players[ref].apprentice1++;\r\n    address ref2=players[ref].ref;\r\n    if(ref2 != address(0)){\r\n      players[ref2].apprentice2++;\r\n      address ref3=players[ref2].ref;\r\n      if(ref3 != address(0)){\r\n        players[ref3].apprentice3++;\r\n      }\r\n    }    \r\n  }\r\n  function _register2(address playerAddr,bytes32 refcode)\r\n    private\r\n  {\r\n    _register(playerAddr,refcode2Addr[refcode]);\r\n  }\r\n\r\n  function endGame() \r\n    private \r\n    returns (uint256)\r\n  {\r\n    if(gameState.ended>0){\r\n      return gameState.ended;\r\n    }      \r\n    if(now > phases[gameState.phase].end){\r\n      if(phases[gameState.phase].shares>=phases[gameState.phase].shareGoal)\r\n      {\r\n        uint256 nextPhase=gameState.phase+1;\r\n        if(gameState.phase % phasePerStage == 0){          \r\n          if(gameState.stage+1>maxStage){\r\n            gameState.ended=2;            \r\n          }else{\r\n            gameState.stage++;            \r\n          }\r\n        }     \r\n        if(gameState.ended==0){\r\n          phases[nextPhase].stage=gameState.stage;\r\n          phases[nextPhase].end=phases[gameState.phase].end.add(phaseLen);      \r\n          phases[nextPhase].ethGoal=phases[gameState.phase].eth.mul(growthTarget)/100;\r\n          phases[nextPhase].shareGoal=(gameState.eth).sharesRec(phases[nextPhase].ethGoal);\r\n          gameState.phase=nextPhase;        \r\n          if(now > phases[gameState.phase].end){\r\n            gameState.ended=1;\r\n          }                \r\n        }        \r\n      }else{\r\n        gameState.ended=1;                \r\n      }      \r\n    }\r\n    if(gameState.ended>0){\r\n      uint256 weightedShare=phases[gameState.phase].shares.mul(weight0);\r\n      if(gameState.phase>1){\r\n        weightedShare=weightedShare.add(phases[gameState.phase-1].shares.mul(weight1));                        \r\n      }        \r\n      gameState.lps=(gameState.pot).mul(1e18)/weightedShare;\r\n      gameState.pot=0;\r\n    }\r\n    return gameState.ended;      \r\n  }\r\n  function calcBuyout(uint256 shares) \r\n    public\r\n    view\r\n    returns(uint256)\r\n  { \r\n    if(gameState.stage<=lockup)\r\n      return 0;\r\n    uint256 buyoutShares;\r\n\r\n    if(phases[gameState.phase].shares.add(shares)>phases[gameState.phase].shareGoal){\r\n      buyoutShares=phases[gameState.phase].shares.add(shares).sub(phases[gameState.phase].shareGoal);\r\n    }\r\n    if(buyoutShares>shares){\r\n      buyoutShares=shares;\r\n    }\r\n    if(buyoutShares > stage_prod_currShare[gameState.stage.sub(lockup)][0]){\r\n      buyoutShares= stage_prod_currShare[gameState.stage.sub(lockup)][0];\r\n    }\r\n    return buyoutShares;\r\n  }\r\n  function minRedeem(address playerAddr,uint256 stage,uint256 prodId)\r\n    public\r\n  {     \r\n    uint256 div= (stage_prod_cdps[stage][prodId].sub(stage_prod_player_cdps[stage][prodId][playerAddr])).mul(stage_prod_player_origShare[stage][prodId][playerAddr])/1e18;      \r\n    stage_prod_player_cdps[stage][prodId][playerAddr]=stage_prod_cdps[stage][prodId];\r\n    players[playerAddr].bal=div.add(players[playerAddr].bal);\r\n    players[playerAddr].redeemedDiv=div.add(players[playerAddr].redeemedDiv);    \r\n  }\r\n  function redeem(address playerAddr) \r\n    public\r\n  {\r\n    uint256 liq=0;\r\n    if(gameState.ended>0 && !players[playerAddr].redeemed){\r\n      liq=accruedLiq(playerAddr);      \r\n      players[playerAddr].redeemed=true;\r\n    }\r\n\r\n    uint256 div=0;\r\n    for(uint i=1;i<=gameState.stage;i++){\r\n      for(uint j=0;j<2;j++){\r\n        div=div.add((stage_prod_cdps[i][j].sub(stage_prod_player_cdps[i][j][playerAddr])).mul(stage_prod_player_origShare[i][j][playerAddr])/1e18);\r\n        stage_prod_player_cdps[i][j][playerAddr]=stage_prod_cdps[i][j];\r\n      }\r\n    }      \r\n    \r\n    uint256 buyoutEth=0;\r\n    if(gameState.stage>lockup){\r\n      for(i=1;i<=gameState.stage.sub(lockup);i++){\r\n        buyoutEth=buyoutEth.add((stage_prod_cbps[i][0].sub(stage_prod_player_cbps[i][0][playerAddr])).mul(stage_prod_player_origShare[i][0][playerAddr])/1e18);\r\n        stage_prod_player_cbps[i][0][playerAddr]=stage_prod_cbps[i][0];\r\n      }\r\n    }    \r\n    players[playerAddr].bal=liq.add(div).add(buyoutEth).add(players[playerAddr].bal);\r\n    players[playerAddr].redeemedLiq=players[playerAddr].redeemedLiq.add(liq);\r\n    players[playerAddr].redeemedDiv=players[playerAddr].redeemedDiv.add(div);\r\n    players[playerAddr].redeemedBuyout=players[playerAddr].redeemedBuyout.add(buyoutEth);\r\n  }    \r\n  \r\n  function payRef(address playerAddr,uint256 eth) \r\n    private\r\n  {\r\n    uint256 foundationAmt=eth.mul(rate.foundation)/100;\r\n    uint256 ref1Amt=eth.mul(rate.ref1)/100;\r\n    uint256 ref2Amt=eth.mul(rate.ref2)/100;\r\n    uint256 ref3Amt=eth.mul(rate.ref3)/100;\r\n    address ref1= players[playerAddr].ref;\r\n    if(ref1 != address(0)){\r\n      players[ref1].bal=ref1Amt.add(players[ref1].bal);\r\n      players[ref1].redeemedRef=ref1Amt.add(players[ref1].redeemedRef);\r\n      address ref2=players[ref1].ref;\r\n      if(ref2 != address(0)){\r\n        players[ref2].bal=ref2Amt.add(players[ref2].bal);\r\n        players[ref2].redeemedRef=ref2Amt.add(players[ref2].redeemedRef);\r\n        address ref3=players[ref2].ref;\r\n        if(ref3 != address(0)){\r\n          players[ref3].bal=ref3Amt.add(players[ref3].bal);\r\n          players[ref3].redeemedRef=ref3Amt.add(players[ref3].redeemedRef);\r\n        }else{\r\n          foundationAmt=foundationAmt.add(ref3Amt);    \r\n        }        \r\n      }else{\r\n        foundationAmt=foundationAmt.add(ref3Amt).add(ref2Amt);    \r\n      }        \r\n    }else{\r\n      foundationAmt=foundationAmt.add(ref3Amt).add(ref2Amt).add(ref1Amt);    \r\n    }            \r\n    foundationAddr.transfer(foundationAmt);  \r\n  }\r\n  function updateDps(uint256 div) \r\n    private\r\n  {\r\n    uint256 dps=div.mul(1e18)/gameState.currShares;  \r\n    for(uint i = 1; i <= gameState.stage; i++){\r\n      for(uint j=0;j<=1;j++){\r\n        if(stage_prod_origShare[i][j]>0){\r\n          stage_prod_cdps[i][j]=(dps.mul(stage_prod_currShare[i][j])/stage_prod_origShare[i][j]).add(stage_prod_cdps[i][j]);     \r\n        }        \r\n      }\r\n    }    \r\n  }  \r\n  function _buy(address playerAddr, uint256 eth, uint256 prodId) \r\n    ethLimit(eth)\r\n    private      \r\n  {\r\n    if(prodId>1)\r\n      prodId=1;\r\n    if(players[playerAddr].id==0)\r\n      _register(playerAddr,address(0));      \r\n    minRedeem(playerAddr,gameState.stage,prodId);\r\n    require(players[playerAddr].bal >= eth,\"insufficient fund\");        \r\n    if(eth>0 && phases[gameState.phase].end==0)\r\n      phases[gameState.phase].end=now.add(phaseLen);\r\n    if(endGame()>0)\r\n      return;\r\n    uint256 stage=gameState.stage;\r\n    uint256 phase=gameState.phase;\r\n    players[playerAddr].bal=(players[playerAddr].bal).sub(eth);    \r\n    uint256 shares=(gameState.eth).sharesRec(eth);\r\n    uint256 buyout = calcBuyout(shares);            \r\n    uint256 newShare=shares.sub(buyout);    \r\n    uint256 newShareEth=(gameState.origShares).ethRec(newShare);\r\n    uint256 buyoutEth=eth.sub(newShareEth);    \r\n    if(buyout>0){\r\n      uint256 buyoutStage=stage.sub(lockup);\r\n      stage_prod_currShare[buyoutStage][0]=stage_prod_currShare[buyoutStage][0].sub(buyout);                  \r\n      stage_prod_cbps[buyoutStage][0]=(stage_prod_cbps[buyoutStage][0]).add(buyoutEth.mul(rate.pot).mul(1e18)/100/stage_prod_origShare[buyoutStage][0]);\r\n    }    \r\n        \r\n    gameState.origShares = shares.add(gameState.origShares);\r\n    gameState.currShares=newShare.add(gameState.currShares);\r\n    gameState.eth = eth.add(gameState.eth);\r\n    phases[phase].shares=shares.add(phases[phase].shares);    \r\n    phases[phase].eth=eth.add(phases[phase].eth);    \r\n    stage_prod_origShare[stage][prodId]=shares.add(stage_prod_origShare[stage][prodId]);\r\n    stage_prod_currShare[stage][prodId]=stage_prod_origShare[stage][prodId];\r\n    \r\n    players[playerAddr].origShares=shares.add(players[playerAddr].origShares);\r\n    stage_prod_player_origShare[stage][prodId][playerAddr]=shares.add(stage_prod_player_origShare[stage][prodId][playerAddr]);\r\n    phase_player_origShare[phase][playerAddr]=shares.add(phase_player_origShare[phase][playerAddr]);\r\n    \r\n    updateDps(eth.mul(rate.div)/100);            \r\n    payRef(playerAddr,eth);    \r\n    gameState.pot=gameState.pot.add(newShareEth.mul(rate.pot)/100);        \r\n  }\r\n  function sweep()\r\n    public\r\n  {\r\n    if(gameState.ended>0 && now > sweepDelay + phases[gameState.phase].end)\r\n      foundationAddr.transfer(address(this).balance);\r\n  }\r\n\r\n  function register(address ref)\r\n    isHuman()\r\n    public\r\n  {\r\n    _register(msg.sender,ref);\r\n  }\r\n\r\n  function recharge()    \r\n    public \r\n    payable\r\n  {\r\n    players[msg.sender].bal=(players[msg.sender].bal).add(msg.value);\r\n  }\r\n\r\n  function withdraw() \r\n    isHuman()\r\n    public \r\n  {\r\n    redeem(msg.sender);\r\n    uint256 _bal = players[msg.sender].bal;            \r\n    players[msg.sender].bal=0;    \r\n    msg.sender.transfer(_bal);\r\n  }\r\n  function buyFromWallet(uint256 prodId,bytes32 refCode) \r\n    isHuman()    \r\n    public \r\n    payable\r\n  {\r\n    _register2(msg.sender, refCode);\r\n    players[msg.sender].bal=(players[msg.sender].bal).add(msg.value);        \r\n    _buy(msg.sender,msg.value,prodId);\r\n  }\r\n\r\n  function regRefcode(bytes32 refcode)\r\n    public \r\n    payable\r\n    returns (bool)\r\n  {\r\n    _register2(msg.sender, \"\");\r\n    if(msg.value<refcodeFee || refcode2Addr[refcode]!=address(0)){\r\n      msg.sender.transfer(msg.value);\r\n      return false;\r\n    }\r\n    refcode2Addr[refcode]=msg.sender;\r\n    \r\n    players[msg.sender].numRefcodes=players[msg.sender].numRefcodes.add(1);\r\n    player_id_refCode[msg.sender][players[msg.sender].numRefcodes]=refcode;\r\n    return true;  \r\n  }\r\n\r\n  function buyFromBal(uint256 eth,uint256 prodId,bytes32 refCode)    \r\n    isHuman()\r\n    public\r\n  {\r\n    _register2(msg.sender, refCode);\r\n    redeem(msg.sender);\r\n    _buy(msg.sender,eth,prodId);\r\n  }\r\n\r\n  function getEthNeeded(uint256 keysCount) public view returns(uint256) {\r\n    uint256 ethCount=(gameState.origShares).ethRec(keysCount);\r\n\r\n    return ethCount;\r\n  }\r\n}\r\n\r\nlibrary Entrepreneur {\r\n  struct Player {    \r\n    uint256 origShares;       \r\n    uint256 bal;    \r\n    bool redeemed;\r\n    uint256 id;\r\n    address ref;\r\n    uint256 redeemedDiv;    \r\n    uint256 redeemedRef;\r\n    uint256 redeemedBuyout;\r\n    uint256 redeemedLiq;\r\n    uint256 apprentice1;\r\n    uint256 apprentice2;\r\n    uint256 apprentice3;\r\n    uint256 numRefcodes;\r\n  }\r\n    \r\n  struct Company {    \r\n    uint256 eth;    \r\n    uint256 pot;    \r\n    uint256 origShares;\r\n    uint256 currShares;\r\n    uint256 lps;\r\n    uint256 ended;\r\n    uint256 plyrCount;\r\n    uint256 phase;\r\n    uint256 stage;  \r\n  }  \r\n\r\n  struct Phase{ \r\n    uint256 stage;\r\n    uint256 end; \r\n    uint256 shareGoal; \r\n    uint256 shares; \r\n    uint256 eth;\r\n    uint256 ethGoal;    \r\n  }\r\n\r\n  struct Allocation {\r\n    uint256 div;  \r\n    uint256 ref1;\r\n    uint256 ref2;\r\n    uint256 ref3;\r\n    uint256 foundation;   \r\n    uint256 pot;    \r\n  }  \r\n}\r\n\r\nlibrary ShareCalc {\r\n  using SafeMath for *;\r\n  /**\r\n    * @dev calculates number of share received given X eth \r\n    * @param _curEth current amount of eth in contract \r\n    * @param _newEth eth being spent\r\n    * @return amount of Share purchased\r\n    */\r\n  function sharesRec(uint256 _curEth, uint256 _newEth)\r\n      internal\r\n      pure\r\n      returns (uint256)\r\n  {\r\n    return(shares((_curEth).add(_newEth)).sub(shares(_curEth)));\r\n  }\r\n  \r\n  /**\r\n    * @dev calculates amount of eth received if you sold X share \r\n    * @param _curShares current amount of shares that exist \r\n    * @param _sellShares amount of shares you wish to sell\r\n    * @return amount of eth received\r\n    */\r\n  function ethRec(uint256 _curShares, uint256 _sellShares)\r\n      internal\r\n      pure\r\n      returns (uint256)\r\n  {\r\n    return(eth(_curShares.add(_sellShares)).sub(eth(_curShares)));\r\n  }\r\n\r\n  /**\r\n    * @dev calculates how many shares would exist with given an amount of eth\r\n    * @param _eth eth \"in contract\"\r\n    * @return number of shares that would exist\r\n    */\r\n  function shares(uint256 _eth) \r\n      internal\r\n      pure\r\n      returns(uint256)\r\n  {\r\n    // old\r\n    // return ((((((_eth).mul(1000000000000000000)).mul(46675600000000000000000000)).add(49018761795600000000000000000000000000000000000000000000000000)).sqrt()).sub(7001340000000000000000000000000)) / (23337800);\r\n    // new\r\n    return ((((((_eth).mul(1000000000000000000)).mul(466756000000000000000000)).add(49018761795600000000000000000000000000000000000000000000000000)).sqrt()).sub(7001340000000000000000000000000)) / (233378);\r\n  }\r\n  \r\n  /**\r\n    * @dev calculates how much eth would be in contract given a number of shares\r\n    * @param _shares number of shares \"in contract\" \r\n    * @return eth that would exists\r\n    */\r\n  function eth(uint256 _shares) \r\n      internal\r\n      pure\r\n      returns(uint256)  \r\n  {\r\n    // old\r\n    // return ((11668900).mul(_shares.sq()).add(((14002680000000).mul(_shares.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    // new\r\n    return ((116689).mul(_shares.sq()).add(((14002680000000).mul(_shares.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) \r\n      internal \r\n      pure \r\n      returns (uint256 c) \r\n  {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    require(c / a == b, \"SafeMath mul failed\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256) \r\n  {\r\n    require(b <= a, \"SafeMath sub failed\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256 c) \r\n  {\r\n    c = a + b;\r\n    require(c >= a, \"SafeMath add failed\");\r\n    return c;\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square root of given x.\r\n    */\r\n  function sqrt(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256 y) \r\n  {\r\n    uint256 z = ((add(x,1)) / 2);\r\n    y = x;\r\n    while (z < y) \r\n    {\r\n      y = z;\r\n      z = ((add((x / z),z)) / 2);\r\n    }\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square. multiplies x by x\r\n    */\r\n  function sq(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256)\r\n  {\r\n    return (mul(x,x));\r\n  }\r\n  \r\n  /**\r\n    * @dev x to the power of y \r\n    */\r\n  function pwr(uint256 x, uint256 y)\r\n      internal \r\n      pure \r\n      returns (uint256)\r\n  {\r\n    if (x==0)\r\n        return (0);\r\n    else if (y==0)\r\n        return (1);\r\n    else \r\n    {\r\n      uint256 z = x;\r\n      for (uint256 i = 1; i < y; i++)\r\n        z = mul(z,x);\r\n      return (z);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"accruedDiv\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"accruedBuyout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"name\":\"stage\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"shareGoal\",\"type\":\"uint256\"},{\"name\":\"shares\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"ethGoal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"refcode2Addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"player_id_refCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"getPlayerVault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"calcBuyout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"totalBal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"phaseAddtlInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recharge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refcode\",\"type\":\"bytes32\"}],\"name\":\"regRefcode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stage_prod_cdps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"phase_player_origShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"checkRefcode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phase_prod_Share\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"},{\"name\":\"stage\",\"type\":\"uint256\"},{\"name\":\"prodId\",\"type\":\"uint256\"}],\"name\":\"minRedeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stage_prod_currShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"keysCount\",\"type\":\"uint256\"}],\"name\":\"getEthNeeded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stage_prod_player_cdps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stage_prod_player_origShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stage_prod_cbps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameState\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"origShares\",\"type\":\"uint256\"},{\"name\":\"currShares\",\"type\":\"uint256\"},{\"name\":\"lps\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"uint256\"},{\"name\":\"plyrCount\",\"type\":\"uint256\"},{\"name\":\"phase\",\"type\":\"uint256\"},{\"name\":\"stage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"prodId\",\"type\":\"uint256\"},{\"name\":\"refCode\",\"type\":\"bytes32\"}],\"name\":\"buyFromWallet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stage_prod_player_cbps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"origShares\",\"type\":\"uint256\"},{\"name\":\"bal\",\"type\":\"uint256\"},{\"name\":\"redeemed\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"redeemedDiv\",\"type\":\"uint256\"},{\"name\":\"redeemedRef\",\"type\":\"uint256\"},{\"name\":\"redeemedBuyout\",\"type\":\"uint256\"},{\"name\":\"redeemedLiq\",\"type\":\"uint256\"},{\"name\":\"apprentice1\",\"type\":\"uint256\"},{\"name\":\"apprentice2\",\"type\":\"uint256\"},{\"name\":\"apprentice3\",\"type\":\"uint256\"},{\"name\":\"numRefcodes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stage_prod_origShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"prodId\",\"type\":\"uint256\"},{\"name\":\"refCode\",\"type\":\"bytes32\"}],\"name\":\"buyFromBal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"getPlayerIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Game","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4c7ca15b974d0acd9afa3b351f14cc834bdfa4d9cf3c738da32a6759a3cc4dba"}]}