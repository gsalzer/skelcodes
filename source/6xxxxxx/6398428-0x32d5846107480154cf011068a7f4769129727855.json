{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary DateTime {\r\n        /*\r\n         *  Date and Time utilities for ethereum contracts\r\n         *\r\n         */\r\n        struct _DateTime {\r\n                uint16 year;\r\n                uint8 month;\r\n                uint8 day;\r\n                uint8 hour;\r\n                uint8 minute;\r\n                uint8 second;\r\n                uint8 weekday;\r\n        }\r\n\r\n        uint private constant DAY_IN_SECONDS = 86400;\r\n        uint private constant YEAR_IN_SECONDS = 31536000;\r\n        uint private constant LEAP_YEAR_IN_SECONDS = 31622400;\r\n\r\n        uint private constant HOUR_IN_SECONDS = 3600;\r\n        uint private constant MINUTE_IN_SECONDS = 60;\r\n\r\n        uint16 private constant ORIGIN_YEAR = 1970;\r\n\r\n        function isLeapYear(uint16 year) public constant returns (bool) {\r\n                if (year % 4 != 0) {\r\n                        return false;\r\n                }\r\n                if (year % 100 != 0) {\r\n                        return true;\r\n                }\r\n                if (year % 400 != 0) {\r\n                        return false;\r\n                }\r\n                return true;\r\n        }\r\n\r\n        function leapYearsBefore(uint year) public constant  returns (uint) {\r\n                year -= 1;\r\n                return year / 4 - year / 100 + year / 400;\r\n        }\r\n\r\n        function getDaysInMonth(uint8 month, uint16 year) public constant  returns (uint8) {\r\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n                        return 31;\r\n                }\r\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\r\n                        return 30;\r\n                }\r\n                else if (isLeapYear(year)) {\r\n                        return 29;\r\n                }\r\n                else {\r\n                        return 28;\r\n                }\r\n        }\r\n\r\n        function parseTimestamp(uint timestamp) internal constant returns (_DateTime dt) {\r\n                uint secondsAccountedFor = 0;\r\n                uint buf;\r\n                uint8 i;\r\n\r\n                // Year\r\n                dt.year = getYear(timestamp);\r\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\r\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\r\n\r\n                // Month\r\n                uint secondsInMonth;\r\n                for (i = 1; i <= 12; i++) {\r\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\r\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\r\n                                dt.month = i;\r\n                                break;\r\n                        }\r\n                        secondsAccountedFor += secondsInMonth;\r\n                }\r\n\r\n                // Day\r\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\r\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\r\n                                dt.day = i;\r\n                                break;\r\n                        }\r\n                        secondsAccountedFor += DAY_IN_SECONDS;\r\n                }\r\n\r\n                // Hour\r\n                dt.hour = getHour(timestamp);\r\n\r\n                // Minute\r\n                dt.minute = getMinute(timestamp);\r\n\r\n                // Second\r\n                dt.second = getSecond(timestamp);\r\n\r\n                // Day of week.\r\n                dt.weekday = getWeekday(timestamp);\r\n        }\r\n\r\n        function getYear(uint timestamp) public constant returns (uint16) {\r\n                uint secondsAccountedFor = 0;\r\n                uint16 year;\r\n                uint numLeapYears;\r\n\r\n                // Year\r\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\r\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\r\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\r\n\r\n                while (secondsAccountedFor > timestamp) {\r\n                        if (isLeapYear(uint16(year - 1))) {\r\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\r\n                        }\r\n                        else {\r\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\r\n                        }\r\n                        year -= 1;\r\n                }\r\n                return year;\r\n        }\r\n\r\n        function getMonth(uint timestamp) public constant returns (uint8) {\r\n                return parseTimestamp(timestamp).month;\r\n        }\r\n\r\n        function getDay(uint timestamp) public constant returns (uint8) {\r\n                return parseTimestamp(timestamp).day;\r\n        }\r\n\r\n        function getHour(uint timestamp) public constant returns (uint8) {\r\n                return uint8((timestamp / 60 / 60) % 24);\r\n        }\r\n\r\n        function getMinute(uint timestamp) public constant returns (uint8) {\r\n                return uint8((timestamp / 60) % 60);\r\n        }\r\n\r\n        function getSecond(uint timestamp) public constant returns (uint8) {\r\n                return uint8(timestamp % 60);\r\n        }\r\n\r\n        function getWeekday(uint timestamp) public constant returns (uint8) {\r\n                return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\r\n        }\r\n\r\n        function toTimestamp(uint16 year, uint8 month, uint8 day) public constant returns (uint timestamp) {\r\n                return toTimestamp(year, month, day, 0, 0, 0);\r\n        }\r\n\r\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public constant returns (uint timestamp) {\r\n                return toTimestamp(year, month, day, hour, 0, 0);\r\n        }\r\n\r\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public constant returns (uint timestamp) {\r\n                return toTimestamp(year, month, day, hour, minute, 0);\r\n        }\r\n\r\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public constant returns (uint timestamp) {\r\n                uint16 i;\r\n\r\n                // Year\r\n                for (i = ORIGIN_YEAR; i < year; i++) {\r\n                        if (isLeapYear(i)) {\r\n                                timestamp += LEAP_YEAR_IN_SECONDS;\r\n                        }\r\n                        else {\r\n                                timestamp += YEAR_IN_SECONDS;\r\n                        }\r\n                }\r\n\r\n                // Month\r\n                uint8[12] memory monthDayCounts;\r\n                monthDayCounts[0] = 31;\r\n                if (isLeapYear(year)) {\r\n                        monthDayCounts[1] = 29;\r\n                }\r\n                else {\r\n                        monthDayCounts[1] = 28;\r\n                }\r\n                monthDayCounts[2] = 31;\r\n                monthDayCounts[3] = 30;\r\n                monthDayCounts[4] = 31;\r\n                monthDayCounts[5] = 30;\r\n                monthDayCounts[6] = 31;\r\n                monthDayCounts[7] = 31;\r\n                monthDayCounts[8] = 30;\r\n                monthDayCounts[9] = 31;\r\n                monthDayCounts[10] = 30;\r\n                monthDayCounts[11] = 31;\r\n\r\n                for (i = 1; i < month; i++) {\r\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\r\n                }\r\n\r\n                // Day\r\n                timestamp += DAY_IN_SECONDS * (day - 1);\r\n\r\n                // Hour\r\n                timestamp += HOUR_IN_SECONDS * (hour);\r\n\r\n                // Minute\r\n                timestamp += MINUTE_IN_SECONDS * (minute);\r\n\r\n                // Second\r\n                timestamp += second;\r\n\r\n                return timestamp;\r\n        }\r\n\r\n\t\t// -1 t1 < t2\r\n\t\t// 0  t1 == t2\r\n\t\t// 1  t1 > t2\r\n\t\tfunction compareDatesWithoutTime(uint t1, uint t2) public constant returns (int res)\r\n\t\t{\r\n\t\t\t_DateTime memory dt1 = parseTimestamp(t1);\r\n\t\t\t_DateTime memory dt2 = parseTimestamp(t2);\r\n\r\n\t\t\tres = compareInts(dt1.year, dt2.year);\r\n\t\t\tif (res == 0)\r\n\t\t\t{\r\n\t\t\t\tres = compareInts(dt1.month, dt2.month);\r\n\t\t\t\tif (res == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tres = compareInts(dt1.day, dt2.day);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t//  t2 -> MoveIn or MoveOut day in GMT, will be counted as beginning of a day\r\n\t\t//  t1 -> Current System DateTime\r\n\t\t// -1 t1 before t2\r\n\t\t//--------------------------------\r\n\t\t// 0  t1 same day as t2\r\n\t\t// 1  t1 after t2\r\n\t\tfunction compareDateTimesForContract(uint t1, uint t2) public constant returns (int res)\r\n\t\t{\r\n\t\t    uint endOfDay = t2 + (60 * 60 * 24);\r\n\t\t    res = 0;\r\n\t\t    \r\n\t\t    if (t2 <= t1 && t1 <= endOfDay)\r\n\t\t    {\r\n\t\t        res = 0;\r\n\t\t    }\r\n\t\t    else if (t2 > t1)\r\n\t\t    {\r\n\t\t        res = -1;\r\n\t\t    }\r\n\t\t    else if (t1 > endOfDay)\r\n\t\t    {\r\n\t\t        res = 1;\r\n\t\t    }\r\n\t\t}\t\r\n\r\n\r\n\t\t// -1 n1 < n2\r\n\t\t// 0  n1 == n2\r\n\t\t// 1  n1 > n2\r\n\t\tfunction compareInts(int n1, int n2) internal constant returns (int res)\r\n\t\t{\r\n\t\t\tif (n1 == n2)\r\n\t\t\t{\r\n\t\t\t\tres = 0;\r\n\t\t\t}\r\n\t\t\telse if (n1 < n2)\r\n\t\t\t{\r\n\t\t\t\tres = -1;\r\n\t\t\t}\r\n\t\t\telse if (n1 > n2)\r\n\t\t\t{\r\n\t\t\t\tres = 1;\r\n\t\t\t}\r\n\t\t}\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\nlibrary BaseEscrowLib\r\n{\r\n    struct EscrowContractState { \r\n\t\tuint _CurrentDate;\r\n\t\tuint _CreatedDate;\r\n\t\tint _RentPerDay;\r\n\t\tuint _MoveInDate;\r\n\t\tuint _MoveOutDate;\t\t\t\t\r\n\t\tint _TotalAmount;\t\t\t\t\t\r\n\t\tint _SecDeposit;\r\n\t\tint _State;\t\r\n\t\tuint _ActualMoveInDate;\r\n\t\tuint _ActualMoveOutDate;\r\n\t\taddress _landlord;\r\n\t\taddress _tenant;\r\n\t\tbool _TenantConfirmedMoveIn;\t\t\r\n\t\tbool _MisrepSignaled;\t\t\t\r\n\t\tstring _DoorLockData;\r\n\t\taddress _ContractAddress;\t\t\r\n\t\tERC20Interface _tokenApi;\r\n\t\tint _landlBal;\r\n\t\tint _tenantBal;\r\n\t\tint _Id;\r\n\t\tint _CancelPolicy;\r\n\t\tuint _Balance;\r\n\t\tstring _Guid;\r\n    }\r\n\r\n    //Define public constants\r\n\t//Pre-Move In\r\n\tint internal constant ContractStateActive = 1;\r\n\tint internal constant ContractStateCancelledByTenant = 2;\r\n\tint internal constant ContractStateCancelledByLandlord = 3;\r\n\r\n\t//Move-In\r\n\tint internal constant ContractStateTerminatedMisrep = 4;\r\n\r\n\t//Living\r\n\tint internal constant ContractStateEarlyTerminatedByTenant = 5;\r\n\tint internal constant ContractStateEarlyTerminatedByTenantSecDep = 6;\r\n\tint internal constant ContractStateEarlyTerminatedByLandlord = 7;\t\t\r\n\r\n\t//Move-Out\r\n\tint internal constant ContractStateTerminatedOK = 8;\t\r\n\tint internal constant ContractStateTerminatedSecDep = 9;\r\n\t\r\n\t//Stages\r\n\tint internal constant ContractStagePreMoveIn = 0;\r\n\tint internal constant ContractStageLiving = 1;\r\n\tint internal constant ContractStageTermination = 2;\r\n\r\n\t//Action\r\n\tint internal constant ActionKeyTerminate = 0;\r\n\tint internal constant ActionKeyMoveIn = 1;\t\r\n\tint internal constant ActionKeyTerminateMisrep = 2;\t\r\n\tint internal constant ActionKeyPropOk = 3;\r\n\tint internal constant ActionKeyClaimDeposit = 4;\r\n\r\n\t//Log\r\n\tint internal constant LogMessageInfo = 0;\r\n\tint internal constant LogMessageWarning = 1;\r\n\tint internal constant LogMessageError = 2;\r\n\r\n\tevent logEvent(int stage, int atype, uint timestamp, string guid, string text);\r\n\r\n\r\n\t//DEBUG or TESTNET\r\n\t//bool private constant EnableSimulatedCurrentDate = true;\r\n\r\n\t//RELEASE\r\n\tbool private constant EnableSimulatedCurrentDate = false;\r\n\r\n\r\n\t//LogEvent wrapper\r\n\tfunction ContractLogEvent(int stage, int atype, uint timestamp, string guid, string text) public\r\n\t{\r\n\t\tlogEvent(stage, atype, timestamp, guid, text);\r\n\t}\r\n\r\n\t//Constant function wrappers\r\n\tfunction GetContractStateActive() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateActive;\r\n\t}\r\n\r\n\tfunction GetContractStateCancelledByTenant() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateCancelledByTenant;\r\n\t}\r\n\r\n\tfunction GetContractStateCancelledByLandlord() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateCancelledByLandlord;\r\n\t}\r\n\t\r\n\tfunction GetContractStateTerminatedMisrep() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateTerminatedMisrep;\r\n\t}\r\n\r\n\tfunction GetContractStateEarlyTerminatedByTenant() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateEarlyTerminatedByTenant;\r\n\t}\r\n\r\n\tfunction GetContractStateEarlyTerminatedByTenantSecDep() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateEarlyTerminatedByTenantSecDep;\r\n\t}\r\n\r\n\tfunction GetContractStateEarlyTerminatedByLandlord() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateEarlyTerminatedByLandlord;\t\t\r\n\t}\r\n\r\n\tfunction GetContractStateTerminatedOK() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateTerminatedOK;\t\r\n\t}\r\n\r\n\tfunction GetContractStateTerminatedSecDep() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateTerminatedSecDep;\r\n\t}\r\n\t\r\n\tfunction GetContractStagePreMoveIn() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStagePreMoveIn;\r\n\t}\r\n\r\n\tfunction GetContractStageLiving() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStageLiving;\r\n\t}\r\n\r\n\tfunction GetContractStageTermination() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStageTermination;\r\n\t}\r\n\t\r\n\tfunction GetLogMessageInfo() public constant returns (int)\r\n\t{\r\n\t\treturn LogMessageInfo;\r\n\t}\r\n\r\n\tfunction GetLogMessageWarning() public constant returns (int)\r\n\t{\r\n\t\treturn LogMessageWarning;\r\n\t}\r\n\r\n\tfunction GetLogMessageError() public constant returns (int)\r\n\t{\r\n\t\treturn LogMessageError;\r\n\t}\r\n\r\n\r\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\tfunction initialize(EscrowContractState storage self) {\r\n\r\n\t\t//Check parameters\r\n\t\t//all dates must be in the future\r\n\r\n\t\trequire(self._CurrentDate < self._MoveInDate);\r\n\t\trequire(self._MoveInDate < self._MoveOutDate);\r\n\t\t\t\t\t\t\t\r\n\t\tint nPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\r\n\t\tint nPotentialBillableAmount = nPotentialBillableDays * (self._RentPerDay);\r\n\t\t\r\n\t\t//Limit 2 months stay\r\n\t\trequire (nPotentialBillableDays <= 60); \r\n\r\n\t\tself._TotalAmount = nPotentialBillableAmount + self._SecDeposit;\r\n\t\t\t\t\r\n\t\t//Sec Deposit should not be more than 30 perecent\r\n\t\trequire (self._SecDeposit / nPotentialBillableAmount * 100 <= 30);\r\n\t\t\t\t\r\n\r\n\t\tself._TenantConfirmedMoveIn = false;\r\n\t\tself._MisrepSignaled = false;\r\n\t\tself._State = GetContractStateActive();\r\n\t\tself._ActualMoveInDate = 0;\r\n\t\tself._ActualMoveOutDate = 0;\r\n\t\tself._landlBal = 0;\r\n\t\tself._tenantBal = 0;\r\n\t}\r\n\r\n\r\n\tfunction TerminateContract(EscrowContractState storage self, int tenantBal, int landlBal, int state) public\r\n\t{\r\n\t\tint stage = GetCurrentStage(self);\r\n\t\tuint nCurrentDate = GetCurrentDate(self);\r\n\t\tint nActualBalance = int(GetContractBalance(self));\r\n\r\n\t\tif (nActualBalance == 0)\r\n\t\t{\r\n\t\t    //If it was unfunded, just change state\r\n\t\t    self._State = state;   \r\n\t\t}\r\n\t\telse if (self._State == ContractStateActive && state != ContractStateActive)\r\n\t\t{\r\n\t\t\t//Check if some balances are negative\r\n\t\t\tif (landlBal < 0)\r\n\t\t\t{\r\n\t\t\t\ttenantBal += landlBal;\r\n\t\t\t\tlandlBal = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (tenantBal < 0) {\r\n\t\t\t\tlandlBal += tenantBal;\r\n\t\t\t\ttenantBal = 0;\r\n\t\t\t}\r\n\r\n\t\t\t//Check if balances exceed total amount\r\n\t\t\tif ((landlBal + tenantBal) > nActualBalance)\r\n\t\t\t{\r\n\t\t\t\tvar nOverrun = (landlBal + tenantBal) - self._TotalAmount;\r\n\t\t\t\tlandlBal -= (nOverrun / 2);\r\n\t\t\t\ttenantBal -= (nOverrun / 2);\r\n\t\t\t}\r\n\r\n\t\t\tself._State = state;\r\n\r\n\t\t\tstring memory strState = \"\";\r\n\r\n\t\t\tif (state == ContractStateTerminatedOK)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: OK\";\r\n\t\t\t}\r\n\t\t\telse if (state == ContractStateEarlyTerminatedByTenant)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: Early terminated by tenant\";\r\n\t\t\t}\r\n\t\t\telse if (state == ContractStateEarlyTerminatedByTenantSecDep)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: Early terminated by tenant, Security Deposit claimed\";\r\n\t\t\t}\r\n\t\t\telse if (state == ContractStateEarlyTerminatedByLandlord)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: Early terminated by landlord\";\r\n\t\t\t}\r\n\t\t\telse if (state == ContractStateCancelledByTenant)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: Cancelled by tenant\";\r\n\t\t\t}\r\n\t\t\telse if (state == ContractStateCancelledByLandlord)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: Cancelled by landlord\";\r\n\t\t\t}\r\n\t\t\telse if (state == ContractStateTerminatedSecDep)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: Security Deposit claimed\";\r\n\t\t\t}\r\n\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tbytes32 b1;\r\n\t\t\tbytes32 b2;\r\n\t\t\tb1 = uintToBytes(uint(landlBal));\r\n\t\t\tb2 = uintToBytes(uint(tenantBal));\r\n\r\n                        /*\r\n\t\t    string memory s1;\r\n\t\t    string memory s2;\t\r\n\t\t    s1 = bytes32ToString(b1);\r\n\t\t    s2 = bytes32ToString(b2);\r\n                        */\r\n\t\t\t\r\n\t\t\tstring memory strMessage = strConcat(\r\n\t\t\t    \"Contract is termintaing. Landlord balance is _$b_\", \r\n\t\t\t    bytes32ToString(b1), \r\n\t\t\t    \"_$e_, Tenant balance is _$b_\", \r\n\t\t\t    bytes32ToString(b2));\r\n\r\n            \r\n\t\t\tstring memory strMessage2 = strConcat(\r\n\t\t\t\tstrMessage,\r\n\t\t\t\t\"_$e_.\",\r\n\t\t\t\tstrState\r\n\t\t\t);\r\n\r\n            string memory sGuid;\r\n            sGuid = self._Guid;\r\n\t\t\t\r\n            logEvent(stage, LogMessageInfo, nCurrentDate, sGuid, strMessage2);\r\n            \r\n\t\t\t//Send tokens\r\n\t\t\tself._landlBal = landlBal;\r\n\t\t\tself._tenantBal = tenantBal;\r\n\t\t}\t\r\n\t}\r\n\r\n\tfunction GetCurrentStage(EscrowContractState storage self) public constant returns (int stage)\r\n\t{\r\n\t\tuint nCurrentDate = GetCurrentDate(self);\r\n\t\tuint nActualBalance = GetContractBalance(self);\r\n        \r\n        stage = ContractStagePreMoveIn;\r\n        \r\n\t\tif (self._State == ContractStateActive && uint(self._TotalAmount) > nActualBalance)\r\n\t\t{\r\n\t\t\t//Contract unfunded\r\n\t\t\tstage = ContractStagePreMoveIn;\r\n\t\t}\t\t\r\n\t\telse if (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) < 0)\r\n\t\t{\r\n\t\t\tstage = ContractStagePreMoveIn;\r\n\t\t}\r\n\t\telse if (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) >= 0 && \r\n\t\t         DateTime.compareDateTimesForContract(nCurrentDate, self._MoveOutDate) < 0 && \r\n\t\t         self._TenantConfirmedMoveIn)\r\n\t\t{\r\n\t\t\tstage = ContractStageLiving;\r\n\t\t}\r\n\t\telse if (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveOutDate) >= 0)\r\n\t\t{\r\n\t\t\tstage = ContractStageTermination;\r\n\t\t}\t\r\n\t}\r\n\r\n\r\n\r\n\t///Helper functions\r\n\tfunction SimulateCurrentDate(EscrowContractState storage self, uint n) public\r\n\t{\r\n\t\tif (EnableSimulatedCurrentDate)\r\n\t\t{\r\n\t\t\tself._CurrentDate = n;\r\n\t\t\t//int stage = GetCurrentStage(self);\r\n\t\t\t//logEvent(stage, LogMessageInfo, self._CurrentDate, \"SimulateCurrentDate was called.\");\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction GetCurrentDate(EscrowContractState storage self) public constant returns (uint nCurrentDate)\r\n\t{\r\n\t\tif (EnableSimulatedCurrentDate)\r\n\t\t{\r\n\t\t\tnCurrentDate = self._CurrentDate;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tnCurrentDate = now;\r\n\t\t}\t\r\n\t}\r\n\r\n\tfunction GetContractBalance(EscrowContractState storage self) public returns (uint res)\r\n\t{\r\n\t    res = self._Balance;\r\n\t}\r\n\r\n\r\n\tfunction splitBalanceAccordingToRatings(int balance, int tenantScore, int landlScore) public constant returns (int tenantBal, int landlBal)\r\n\t{\r\n\t\tif (tenantScore == landlScore) {\r\n\t\t\t//Just split in two \r\n\t\t\ttenantBal = balance / 2;\r\n\t\t\tlandlBal = balance / 2;\r\n\t\t}\r\n\t\telse if (tenantScore == 0)\r\n\t\t{\r\n\t\t\ttenantBal = 0;\r\n\t\t\tlandlBal = balance;\t\t\t\r\n\t\t}\r\n\t\telse if (landlScore == 0) {\r\n\t\t\ttenantBal = balance;\r\n\t\t\tlandlBal = 0;\r\n\t\t}\r\n\t\telse if (tenantScore > landlScore) {\t\t\t\r\n\t\t\tlandlBal = ((landlScore * balance / 2) / tenantScore);\r\n\t\t\ttenantBal = balance - landlBal;\t\t\t\r\n\t\t}\r\n\t\telse if (tenantScore < landlScore) {\t\t\t\r\n\t\t\ttenantBal = ((tenantScore * balance / 2) / landlScore);\r\n\t\t\tlandlBal = balance - tenantBal;\t\t\t\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tfunction formatDate(uint dt) public constant returns (string strDate)\r\n\t{\r\n\t\tbytes32 b1;\r\n\t\tbytes32 b2;\r\n\t\tbytes32 b3;\r\n\t\tb1 = uintToBytes(uint(DateTime.getMonth(dt)));\r\n\t\tb2 = uintToBytes(uint(DateTime.getDay(dt)));\r\n\t\tb3 = uintToBytes(uint(DateTime.getYear(dt)));\r\n\t\tstring memory s1;\r\n\t\tstring memory s2;\t\r\n\t\tstring memory s3;\r\n\t\ts1 = bytes32ToString(b1);\r\n\t\ts2 = bytes32ToString(b2);\r\n\t\ts3 = bytes32ToString(b3);\r\n\t\t\r\n\t\tstring memory strDate1 = strConcat(s1, \"/\", s2, \"/\");\r\n\t\tstrDate = strConcat(strDate1, s3);\t\t\t\r\n\t}\r\n\t\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal constant returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d) internal constant returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c) internal constant returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n    \r\n    function strConcat(string _a, string _b) internal constant returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    } \r\n    \r\n    function bytes32ToString(bytes32 x) internal constant returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    function bytes32ArrayToString(bytes32[] data) internal constant returns (string) {\r\n        bytes memory bytesString = new bytes(data.length * 32);\r\n        uint urlLength;\r\n        for (uint i=0; i<data.length; i++) {\r\n            for (uint j=0; j<32; j++) {\r\n                byte char = byte(bytes32(uint(data[i]) * 2 ** (8 * j)));\r\n                if (char != 0) {\r\n                    bytesString[urlLength] = char;\r\n                    urlLength += 1;\r\n                }\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(urlLength);\r\n        for (i=0; i<urlLength; i++) {\r\n            bytesStringTrimmed[i] = bytesString[i];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }  \r\n    \r\n    \r\n    function uintToBytes(uint v) internal constant returns (bytes32 ret) {\r\n        if (v == 0) {\r\n            ret = '0';\r\n        }\r\n        else {\r\n            while (v > 0) {\r\n                ret = bytes32(uint(ret) / (2 ** 8));\r\n                ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\r\n                v /= 10;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /// @dev Converts a numeric string to it's unsigned integer representation.\r\n    /// @param v The string to be converted.\r\n    function bytesToUInt(bytes32 v) internal constant returns (uint ret) {\r\n        if (v == 0x0) {\r\n            throw;\r\n        }\r\n\r\n        uint digit;\r\n\r\n        for (uint i = 0; i < 32; i++) {\r\n            digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff);\r\n            if (digit == 0) {\r\n                break;\r\n            }\r\n            else if (digit < 48 || digit > 57) {\r\n                throw;\r\n            }\r\n            ret *= 10;\r\n            ret += (digit - 48);\r\n        }\r\n        return ret;\r\n    }    \r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetContractStateTerminatedOK\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractStateCancelledByTenant\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractStateActive\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractStateEarlyTerminatedByTenant\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"BaseEscrowLib.EscrowContractState storage\"}],\"name\":\"GetCurrentStage\",\"outputs\":[{\"name\":\"stage\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractStageTermination\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractStageLiving\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"balance\",\"type\":\"int256\"},{\"name\":\"tenantScore\",\"type\":\"int256\"},{\"name\":\"landlScore\",\"type\":\"int256\"}],\"name\":\"splitBalanceAccordingToRatings\",\"outputs\":[{\"name\":\"tenantBal\",\"type\":\"int256\"},{\"name\":\"landlBal\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dt\",\"type\":\"uint256\"}],\"name\":\"formatDate\",\"outputs\":[{\"name\":\"strDate\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"BaseEscrowLib.EscrowContractState storage\"}],\"name\":\"GetCurrentDate\",\"outputs\":[{\"name\":\"nCurrentDate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractStateTerminatedMisrep\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"BaseEscrowLib.EscrowContractState storage\"}],\"name\":\"GetContractBalance\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractStateEarlyTerminatedByTenantSecDep\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetLogMessageInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetLogMessageWarning\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"BaseEscrowLib.EscrowContractState storage\"},{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"SimulateCurrentDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetLogMessageError\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"BaseEscrowLib.EscrowContractState storage\"},{\"name\":\"tenantBal\",\"type\":\"int256\"},{\"name\":\"landlBal\",\"type\":\"int256\"},{\"name\":\"state\",\"type\":\"int256\"}],\"name\":\"TerminateContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stage\",\"type\":\"int256\"},{\"name\":\"atype\",\"type\":\"int256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"guid\",\"type\":\"string\"},{\"name\":\"text\",\"type\":\"string\"}],\"name\":\"ContractLogEvent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractStateTerminatedSecDep\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractStagePreMoveIn\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"BaseEscrowLib.EscrowContractState storage\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractStateCancelledByLandlord\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractStateEarlyTerminatedByLandlord\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"atype\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"guid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"}],\"name\":\"logEvent\",\"type\":\"event\"}]","ContractName":"BaseEscrowLib","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"DateTime:6a07b6c65f32c5951dd065396e8fc84ca1eae6fa","SwarmSource":"bzzr://6bb5e82ab4e3cd08fd90df9b892e31767e2766758b90f99fdc975024513b13ae"}]}