{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\n\r\ncontract VerifyToken {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    bool public activated;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\ncontract EthVerifyCore{\r\n  mapping (address => bool) public verifiedUsers;\r\n}\r\ncontract ShrimpFarmer is ApproveAndCallFallBack{\r\n    using SafeMath for uint;\r\n    address vrfAddress=0x5BD574410F3A2dA202bABBa1609330Db02aD64C2;//0x5BD574410F3A2dA202bABBa1609330Db02aD64C2;\r\n    VerifyToken vrfcontract=VerifyToken(vrfAddress);\r\n\r\n    //257977574257854071311765966\r\n    //                10000000000\r\n    //uint256 EGGS_PER_SHRIMP_PER_SECOND=1;\r\n    uint256 public EGGS_TO_HATCH_1SHRIMP=86400;//86400\r\n    uint public VRF_EGG_COST=(1000000000000000000*300)/EGGS_TO_HATCH_1SHRIMP;\r\n    //uint256 public STARTING_SHRIMP=300;\r\n    uint256 PSN=100000000000000;\r\n    uint256 PSNH=50000000000000;\r\n    uint public POT_DRAIN_TIME=12 hours;//24 hours;\r\n    uint public HATCH_COOLDOWN=6 hours;//6 hours;\r\n    bool public initialized=false;\r\n    //bool public completed=false;\r\n\r\n    address public ceoAddress;\r\n    address public dev2;\r\n    mapping (address => uint256) public hatcheryShrimp;\r\n    mapping (address => uint256) public claimedEggs;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => bool) public hasClaimedFree;\r\n    uint256 public marketEggs;\r\n    EthVerifyCore public ethVerify=EthVerifyCore(0x1c307A39511C16F74783fCd0091a921ec29A0b51);//0x1c307A39511C16F74783fCd0091a921ec29A0b51);\r\n\r\n    uint public lastBidTime;//last time someone bid for the pot\r\n    address public currentWinner;\r\n    //uint public potEth=0;\r\n    uint public totalHatcheryShrimp=0;\r\n    uint public prizeEth=0;//eth specifically set aside for the pot\r\n\r\n    function ShrimpFarmer() public{\r\n        ceoAddress=msg.sender;\r\n        dev2=address(0x95096780Efd48FA66483Bc197677e89f37Ca0CB5);\r\n        lastBidTime=now;\r\n        currentWinner=msg.sender;\r\n    }\r\n    function finalizeIfNecessary() public{\r\n      if(lastBidTime.add(POT_DRAIN_TIME)<now){\r\n        currentWinner.transfer(this.balance);//winner gets everything\r\n        initialized=false;\r\n        //completed=true;\r\n      }\r\n    }\r\n    function getPotCost() public view returns(uint){\r\n        return totalHatcheryShrimp.div(100);\r\n    }\r\n    function stealPot() public {\r\n      finalizeIfNecessary();\r\n      if(initialized){\r\n          _hatchEggs(0);\r\n          uint cost=getPotCost();\r\n          hatcheryShrimp[msg.sender]=hatcheryShrimp[msg.sender].sub(cost);//cost is 1% of total shrimp\r\n          totalHatcheryShrimp=totalHatcheryShrimp.add(cost);\r\n          lastBidTime=now;\r\n          currentWinner=msg.sender;\r\n      }\r\n    }\r\n    function hatchEggs(address ref) public{\r\n      require(lastHatch[msg.sender].add(HATCH_COOLDOWN)<now);\r\n      _hatchEggs(ref);\r\n    }\r\n    function _hatchEggs(address ref) private{\r\n        require(initialized);\r\n\r\n        uint256 eggsUsed=getMyEggs();\r\n        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\r\n        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\r\n        totalHatcheryShrimp=totalHatcheryShrimp.add(newShrimp);\r\n        claimedEggs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n\r\n        //send referral eggs\r\n        require(ref!=msg.sender);\r\n        if(ref!=0){\r\n          claimedEggs[ref]=claimedEggs[ref].add(eggsUsed.div(7));\r\n        }\r\n        //boost market to nerf shrimp hoarding\r\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,7));\r\n    }\r\n\r\n    function sellEggs() public{\r\n        require(initialized);\r\n        uint256 hasEggs=getMyEggs();\r\n        uint256 eggValue=calculateEggSell(hasEggs);\r\n        //uint256 fee=devFee(eggValue);\r\n        uint potfee=potFee(eggValue);\r\n        claimedEggs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\r\n        //ceoAddress.transfer(fee);\r\n        prizeEth=prizeEth.add(potfee);\r\n        msg.sender.transfer(eggValue.sub(potfee));\r\n    }\r\n    function buyEggs() public payable{\r\n        require(initialized);\r\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\r\n        eggsBought=eggsBought.sub(devFee(eggsBought));\r\n        eggsBought=eggsBought.sub(devFee2(eggsBought));\r\n        ceoAddress.transfer(devFee(msg.value));\r\n        dev2.transfer(devFee2(msg.value));\r\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\r\n    }\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\r\n        return calculateTrade(eggs,marketEggs,this.balance.sub(prizeEth));\r\n    }\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance.sub(prizeEth),marketEggs);\r\n    }\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth,this.balance);\r\n    }\r\n    function potFee(uint amount) public view returns(uint){\r\n        return SafeMath.div(SafeMath.mul(amount,20),100);\r\n    }\r\n    function devFee(uint256 amount) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,4),100);\r\n    }\r\n    function devFee2(uint256 amount) public view returns(uint256){\r\n        return SafeMath.div(amount,100);\r\n    }\r\n    function seedMarket(uint256 eggs) public payable{\r\n        require(msg.sender==ceoAddress);\r\n        require(!initialized);\r\n        //require(marketEggs==0);\r\n        initialized=true;\r\n        marketEggs=eggs;\r\n        lastBidTime=now;\r\n    }\r\n    //to correct a mistake necessitating a redeploy of the contract\r\n    function setPreShrimp(address holder,uint shrimp){\r\n      require(!initialized);\r\n      require(msg.sender==ceoAddress);\r\n      claimedEggs[holder]=shrimp*EGGS_TO_HATCH_1SHRIMP;\r\n    }\r\n    //Tokens are exchanged for shrimp by sending them to this contract with ApproveAndCall\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public{\r\n        require(!initialized);\r\n        require(msg.sender==vrfAddress);\r\n        vrfcontract.transferFrom(from,this,tokens);\r\n        claimedEggs[from]=claimedEggs[from].add(tokens.div(VRF_EGG_COST));\r\n    }\r\n    //allow sending eth to the contract\r\n    function () public payable {}\r\n\r\n    function claimFreeEggs() public{\r\n        require(ethVerify.verifiedUsers(msg.sender));\r\n        require(initialized);\r\n        require(!hasClaimedFree[msg.sender]);\r\n        claimedEggs[msg.sender]=claimedEggs[msg.sender].add(getFreeEggs());\r\n        hasClaimedFree[msg.sender]=true;\r\n        //require(hatcheryShrimp[msg.sender]==0);\r\n        //lastHatch[msg.sender]=now;\r\n        //hatcheryShrimp[msg.sender]=hatcheryShrimp[msg.sender].add(STARTING_SHRIMP);\r\n    }\r\n    function getFreeEggs() public view returns(uint){\r\n        return min(calculateEggBuySimple(this.balance.div(100)),calculateEggBuySimple(0.05 ether));\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n        return this.balance;\r\n    }\r\n    function getMyShrimp() public view returns(uint256){\r\n        return hatcheryShrimp[msg.sender];\r\n    }\r\n    function getMyEggs() public view returns(uint256){\r\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\r\n    }\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimedFree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethVerify\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFreeEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPotCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stealPot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyEggs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBidTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HATCH_COOLDOWN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHatcheryShrimp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1SHRIMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryShrimp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VRF_EGG_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFreeEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POT_DRAIN_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyShrimp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"potFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeIfNecessary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"shrimp\",\"type\":\"uint256\"}],\"name\":\"setPreShrimp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ShrimpFarmer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fb9763358bd4ebde5c9be4a4f2f1b5b557b358c82dd1ca984df0955c8785697d"}]}