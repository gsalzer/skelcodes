{"status":"1","message":"OK","result":[{"SourceCode":"/* Author: Aleksey Selikhov  aleksey.selikhov@gmail.com */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title CommonModifiersInterface\r\n * @dev Base contract which contains common checks.\r\n */\r\ncontract CommonModifiersInterface {\r\n\r\n  /**\r\n   * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n   */\r\n  function isContract(address _targetAddress) internal constant returns (bool);\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the _targetAddress is a contract.\r\n   */\r\n  modifier onlyContractAddress(address _targetAddress) {\r\n    require(isContract(_targetAddress) == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CommonModifiers\r\n * @dev Base contract which contains common checks.\r\n */\r\ncontract CommonModifiers is CommonModifiersInterface {\r\n\r\n  /**\r\n   * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n   */\r\n  function isContract(address _targetAddress) internal constant returns (bool) {\r\n    require (_targetAddress != address(0x0));\r\n\r\n    uint256 length;\r\n    assembly {\r\n      //retrieve the size of the code on target address, this needs assembly\r\n      length := extcodesize(_targetAddress)\r\n    }\r\n    return (length > 0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title OwnableInterface\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableInterface {\r\n\r\n  /**\r\n   * @dev The getter for \"owner\" contract variable\r\n   */\r\n  function getOwner() public constant returns (address);\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the current owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require (msg.sender == getOwner());\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is OwnableInterface {\r\n\r\n  /* Storage */\r\n\r\n  address owner = address(0x0);\r\n  address proposedOwner = address(0x0);\r\n\r\n\r\n  /* Events */\r\n\r\n  event OwnerAssignedEvent(address indexed newowner);\r\n  event OwnershipOfferCreatedEvent(address indexed currentowner, address indexed proposedowner);\r\n  event OwnershipOfferAcceptedEvent(address indexed currentowner, address indexed proposedowner);\r\n  event OwnershipOfferCancelledEvent(address indexed currentowner, address indexed proposedowner);\r\n\r\n\r\n  /**\r\n   * @dev The constructor sets the initial `owner` to the passed account.\r\n   */\r\n  constructor () public {\r\n    owner = msg.sender;\r\n\r\n    emit OwnerAssignedEvent(owner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Old owner requests transfer ownership to the new owner.\r\n   * @param _proposedOwner The address to transfer ownership to.\r\n   */\r\n  function createOwnershipOffer(address _proposedOwner) external onlyOwner {\r\n    require (proposedOwner == address(0x0));\r\n    require (_proposedOwner != address(0x0));\r\n    require (_proposedOwner != address(this));\r\n\r\n    proposedOwner = _proposedOwner;\r\n\r\n    emit OwnershipOfferCreatedEvent(owner, _proposedOwner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the new owner to accept an ownership offer to contract control.\r\n   */\r\n  //noinspection UnprotectedFunction\r\n  function acceptOwnershipOffer() external {\r\n    require (proposedOwner != address(0x0));\r\n    require (msg.sender == proposedOwner);\r\n\r\n    address _oldOwner = owner;\r\n    owner = proposedOwner;\r\n    proposedOwner = address(0x0);\r\n\r\n    emit OwnerAssignedEvent(owner);\r\n    emit OwnershipOfferAcceptedEvent(_oldOwner, owner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Old owner cancels transfer ownership to the new owner.\r\n   */\r\n  function cancelOwnershipOffer() external {\r\n    require (proposedOwner != address(0x0));\r\n    require (msg.sender == owner || msg.sender == proposedOwner);\r\n\r\n    address _oldProposedOwner = proposedOwner;\r\n    proposedOwner = address(0x0);\r\n\r\n    emit OwnershipOfferCancelledEvent(owner, _oldProposedOwner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev The getter for \"owner\" contract variable\r\n   */\r\n  function getOwner() public constant returns (address) {\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev The getter for \"proposedOwner\" contract variable\r\n   */\r\n  function getProposedOwner() public constant returns (address) {\r\n    return proposedOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ManageableInterface\r\n * @dev Contract that allows to grant permissions to any address\r\n * @dev In real life we are no able to perform all actions with just one Ethereum address\r\n * @dev because risks are too high.\r\n * @dev Instead owner delegates rights to manage an contract to the different addresses and\r\n * @dev stay able to revoke permissions at any time.\r\n */\r\ncontract ManageableInterface {\r\n\r\n  /**\r\n   * @dev Function to check if the manager can perform the action or not\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager is enabled and has been granted needed permission\r\n   */\r\n  function isManagerAllowed(address _manager, string _permissionName) public constant returns (bool);\r\n\r\n  /**\r\n   * @dev Modifier to use in derived contracts\r\n   */\r\n  modifier onlyAllowedManager(string _permissionName) {\r\n    require(isManagerAllowed(msg.sender, _permissionName) == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\ncontract Manageable is OwnableInterface,\r\n                       ManageableInterface {\r\n\r\n  /* Storage */\r\n\r\n  mapping (address => bool) managerEnabled;  // hard switch for a manager - on/off\r\n  mapping (address => mapping (string => bool)) managerPermissions;  // detailed info about manager`s permissions\r\n\r\n\r\n  /* Events */\r\n\r\n  event ManagerEnabledEvent(address indexed manager);\r\n  event ManagerDisabledEvent(address indexed manager);\r\n  event ManagerPermissionGrantedEvent(address indexed manager, bytes32 permission);\r\n  event ManagerPermissionRevokedEvent(address indexed manager, bytes32 permission);\r\n\r\n\r\n  /* Configure contract */\r\n\r\n  /**\r\n   * @dev Function to add new manager\r\n   * @param _manager address New manager\r\n   */\r\n  function enableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\r\n    require(managerEnabled[_manager] == false);\r\n\r\n    managerEnabled[_manager] = true;\r\n\r\n    emit ManagerEnabledEvent(_manager);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to remove existing manager\r\n   * @param _manager address Existing manager\r\n   */\r\n  function disableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\r\n    require(managerEnabled[_manager] == true);\r\n\r\n    managerEnabled[_manager] = false;\r\n\r\n    emit ManagerDisabledEvent(_manager);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to grant new permission to the manager\r\n   * @param _manager        address Existing manager\r\n   * @param _permissionName string  Granted permission name\r\n   */\r\n  function grantManagerPermission(\r\n    address _manager, string _permissionName\r\n  )\r\n    external\r\n    onlyOwner\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n  {\r\n    require(managerPermissions[_manager][_permissionName] == false);\r\n\r\n    managerPermissions[_manager][_permissionName] = true;\r\n\r\n    emit ManagerPermissionGrantedEvent(_manager, keccak256(_permissionName));\r\n  }\r\n\r\n  /**\r\n   * @dev Function to revoke permission of the manager\r\n   * @param _manager        address Existing manager\r\n   * @param _permissionName string  Revoked permission name\r\n   */\r\n  function revokeManagerPermission(\r\n    address _manager, string _permissionName\r\n  )\r\n    external\r\n    onlyOwner\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n  {\r\n    require(managerPermissions[_manager][_permissionName] == true);\r\n\r\n    managerPermissions[_manager][_permissionName] = false;\r\n\r\n    emit ManagerPermissionRevokedEvent(_manager, keccak256(_permissionName));\r\n  }\r\n\r\n\r\n  /* Getters */\r\n\r\n  /**\r\n   * @dev Function to check manager status\r\n   * @param _manager address Manager`s address\r\n   * @return True if manager is enabled\r\n   */\r\n  function isManagerEnabled(\r\n    address _manager\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    returns (bool)\r\n  {\r\n    return managerEnabled[_manager];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check permissions of a manager\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager has been granted needed permission\r\n   */\r\n  function isPermissionGranted(\r\n    address _manager, string _permissionName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n    returns (bool)\r\n  {\r\n    return managerPermissions[_manager][_permissionName];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check if the manager can perform the action or not\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager is enabled and has been granted needed permission\r\n   */\r\n  function isManagerAllowed(\r\n    address _manager, string _permissionName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n    returns (bool)\r\n  {\r\n    return (managerEnabled[_manager] && managerPermissions[_manager][_permissionName]);\r\n  }\r\n\r\n\r\n  /* Helpers */\r\n\r\n  /**\r\n   * @dev Modifier to check manager address\r\n   */\r\n  modifier onlyValidManagerAddress(address _manager) {\r\n    require(_manager != address(0x0));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to check name of manager permission\r\n   */\r\n  modifier onlyValidPermissionName(string _permissionName) {\r\n    require(bytes(_permissionName).length != 0);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title PausableInterface\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * @dev Based on zeppelin's Pausable, but integrated with Manageable\r\n * @dev Contract is in paused state by default and should be explicitly unlocked\r\n */\r\ncontract PausableInterface {\r\n\r\n  /**\r\n   * Events\r\n   */\r\n\r\n  event PauseEvent();\r\n  event UnpauseEvent();\r\n\r\n\r\n  /**\r\n   * @dev called by the manager to pause, triggers stopped state\r\n   */\r\n  function pauseContract() public;\r\n\r\n  /**\r\n   * @dev called by the manager to unpause, returns to normal state\r\n   */\r\n  function unpauseContract() public;\r\n\r\n  /**\r\n   * @dev The getter for \"paused\" contract variable\r\n   */\r\n  function getPaused() public constant returns (bool);\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenContractNotPaused() {\r\n    require(getPaused() == false);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenContractPaused {\r\n    require(getPaused() == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * @dev Based on zeppelin's Pausable, but integrated with Manageable\r\n * @dev Contract is in paused state by default and should be explicitly unlocked\r\n */\r\ncontract Pausable is ManageableInterface,\r\n                     PausableInterface {\r\n\r\n  /**\r\n   * Storage\r\n   */\r\n\r\n  bool paused = true;\r\n\r\n\r\n  /**\r\n   * @dev called by the manager to pause, triggers stopped state\r\n   */\r\n  function pauseContract() public onlyAllowedManager('pause_contract') whenContractNotPaused {\r\n    paused = true;\r\n    emit PauseEvent();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the manager to unpause, returns to normal state\r\n   */\r\n  function unpauseContract() public onlyAllowedManager('unpause_contract') whenContractPaused {\r\n    paused = false;\r\n    emit UnpauseEvent();\r\n  }\r\n\r\n  /**\r\n   * @dev The getter for \"paused\" contract variable\r\n   */\r\n  function getPaused() public constant returns (bool) {\r\n    return paused;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrViewERC20Interface\r\n * @dev ERC20 interface to use in applications\r\n */\r\ncontract CrydrViewERC20Interface {\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n  function totalSupply() external constant returns (uint256);\r\n  function balanceOf(address _owner) external constant returns (uint256);\r\n\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n  function allowance(address _owner, address _spender) external constant returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrViewERC20LoggableInterface\r\n * @dev Contract is able to create Transfer/Approval events with the cal from controller\r\n */\r\ncontract CrydrViewERC20LoggableInterface {\r\n\r\n  function emitTransferEvent(address _from, address _to, uint256 _value) external;\r\n  function emitApprovalEvent(address _owner, address _spender, uint256 _value) external;\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrStorageERC20Interface interface\r\n * @dev Interface of a contract that manages balance of an CryDR and have optimization for ERC20 controllers\r\n */\r\ncontract CrydrStorageERC20Interface {\r\n\r\n  /* Events */\r\n\r\n  event CrydrTransferredEvent(address indexed from, address indexed to, uint256 value);\r\n  event CrydrTransferredFromEvent(address indexed spender, address indexed from, address indexed to, uint256 value);\r\n  event CrydrSpendingApprovedEvent(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n  /* ERC20 optimization. _msgsender - account that invoked CrydrView */\r\n\r\n  function transfer(address _msgsender, address _to, uint256 _value) public;\r\n  function transferFrom(address _msgsender, address _from, address _to, uint256 _value) public;\r\n  function approve(address _msgsender, address _spender, uint256 _value) public;\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrControllerBaseInterface interface\r\n * @dev Interface of a contract that implement business-logic of an CryDR, mediates CryDR views and storage\r\n */\r\ncontract CrydrControllerBaseInterface {\r\n\r\n  /* Events */\r\n\r\n  event CrydrStorageChangedEvent(address indexed crydrstorage);\r\n  event CrydrViewAddedEvent(address indexed crydrview, bytes32 standardname);\r\n  event CrydrViewRemovedEvent(address indexed crydrview, bytes32 standardname);\r\n\r\n\r\n  /* Configuration */\r\n\r\n  function setCrydrStorage(address _newStorage) external;\r\n  function getCrydrStorageAddress() public constant returns (address);\r\n\r\n  function setCrydrView(address _newCrydrView, string _viewApiStandardName) external;\r\n  function removeCrydrView(string _viewApiStandardName) external;\r\n  function getCrydrViewAddress(string _viewApiStandardName) public constant returns (address);\r\n\r\n  function isCrydrViewAddress(address _crydrViewAddress) public constant returns (bool);\r\n  function isCrydrViewRegistered(string _viewApiStandardName) public constant returns (bool);\r\n\r\n\r\n  /* Helpers */\r\n\r\n  modifier onlyValidCrydrViewStandardName(string _viewApiStandard) {\r\n    require(bytes(_viewApiStandard).length > 0);\r\n    _;\r\n  }\r\n\r\n  modifier onlyCrydrView() {\r\n    require(isCrydrViewAddress(msg.sender) == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title JNTPaymentGatewayInterface\r\n * @dev Allows to charge users by JNT\r\n */\r\ncontract JNTPaymentGatewayInterface {\r\n\r\n  /* Events */\r\n\r\n  event JNTChargedEvent(address indexed payableservice, address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n  /* Actions */\r\n\r\n  function chargeJNT(address _from, address _to, uint256 _value) public;\r\n}\r\n\r\n\r\n/**\r\n * @title JNTPaymentGateway\r\n * @dev Allows to charge users by JNT\r\n */\r\ncontract JNTPaymentGateway is ManageableInterface,\r\n                              CrydrControllerBaseInterface,\r\n                              JNTPaymentGatewayInterface {\r\n\r\n  function chargeJNT(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    onlyAllowedManager('jnt_payable_service')\r\n  {\r\n    CrydrStorageERC20Interface(getCrydrStorageAddress()).transfer(_from, _to, _value);\r\n\r\n    emit JNTChargedEvent(msg.sender, _from, _to, _value);\r\n    if (isCrydrViewRegistered('erc20') == true) {\r\n      CrydrViewERC20LoggableInterface(getCrydrViewAddress('erc20')).emitTransferEvent(_from, _to, _value);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title JNTPayableService interface\r\n * @dev Interface of a contract that charge JNT for actions\r\n */\r\ncontract JNTPayableServiceInterface {\r\n\r\n  /* Events */\r\n\r\n  event JNTControllerChangedEvent(address jntcontroller);\r\n  event JNTBeneficiaryChangedEvent(address jntbeneficiary);\r\n  event JNTChargedEvent(address indexed payer, address indexed to, uint256 value, bytes32 actionname);\r\n\r\n\r\n  /* Configuration */\r\n\r\n  function setJntController(address _jntController) external;\r\n  function getJntController() public constant returns (address);\r\n\r\n  function setJntBeneficiary(address _jntBeneficiary) external;\r\n  function getJntBeneficiary() public constant returns (address);\r\n\r\n  function setActionPrice(string _actionName, uint256 _jntPriceWei) external;\r\n  function getActionPrice(string _actionName) public constant returns (uint256);\r\n\r\n\r\n  /* Actions */\r\n\r\n  function initChargeJNT(address _payer, string _actionName) internal;\r\n}\r\n\r\n\r\ncontract JNTPayableService is CommonModifiersInterface,\r\n                              ManageableInterface,\r\n                              PausableInterface,\r\n                              JNTPayableServiceInterface {\r\n\r\n  /* Storage */\r\n\r\n  JNTPaymentGateway jntController;\r\n  address jntBeneficiary;\r\n  mapping (string => uint256) actionPrice;\r\n\r\n\r\n  /* Configuration */\r\n\r\n  function setJntController(\r\n    address _jntController\r\n  )\r\n    external\r\n    onlyContractAddress(_jntController)\r\n    onlyAllowedManager('set_jnt_controller')\r\n    whenContractPaused\r\n  {\r\n    require(_jntController != address(jntController));\r\n\r\n    jntController = JNTPaymentGateway(_jntController);\r\n\r\n    emit JNTControllerChangedEvent(_jntController);\r\n  }\r\n\r\n  function getJntController() public constant returns (address) {\r\n    return address(jntController);\r\n  }\r\n\r\n\r\n  function setJntBeneficiary(\r\n    address _jntBeneficiary\r\n  )\r\n    external\r\n    onlyValidJntBeneficiary(_jntBeneficiary)\r\n    onlyAllowedManager('set_jnt_beneficiary')\r\n    whenContractPaused\r\n  {\r\n    require(_jntBeneficiary != jntBeneficiary);\r\n    require(_jntBeneficiary != address(this));\r\n\r\n    jntBeneficiary = _jntBeneficiary;\r\n\r\n    emit JNTBeneficiaryChangedEvent(jntBeneficiary);\r\n  }\r\n\r\n  function getJntBeneficiary() public constant returns (address) {\r\n    return jntBeneficiary;\r\n  }\r\n\r\n\r\n  function setActionPrice(\r\n    string _actionName,\r\n    uint256 _jntPriceWei\r\n  )\r\n    external\r\n    onlyAllowedManager('set_action_price')\r\n    onlyValidActionName(_actionName)\r\n    whenContractPaused\r\n  {\r\n    require (_jntPriceWei > 0);\r\n\r\n    actionPrice[_actionName] = _jntPriceWei;\r\n  }\r\n\r\n  function getActionPrice(\r\n    string _actionName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidActionName(_actionName)\r\n    returns (uint256)\r\n  {\r\n    return actionPrice[_actionName];\r\n  }\r\n\r\n\r\n  /* Actions */\r\n\r\n  function initChargeJNT(\r\n    address _from,\r\n    string _actionName\r\n  )\r\n    internal\r\n    onlyValidActionName(_actionName)\r\n    whenContractNotPaused\r\n  {\r\n    require(_from != address(0x0));\r\n    require(_from != jntBeneficiary);\r\n\r\n    uint256 _actionPrice = getActionPrice(_actionName);\r\n    require (_actionPrice > 0);\r\n\r\n    jntController.chargeJNT(_from, jntBeneficiary, _actionPrice);\r\n\r\n    emit JNTChargedEvent(_from, jntBeneficiary, _actionPrice, keccak256(_actionName));\r\n  }\r\n\r\n\r\n  /* Pausable */\r\n\r\n  /**\r\n   * @dev Override method to ensure that contract properly configured before it is unpaused\r\n   */\r\n  function unpauseContract()\r\n    public\r\n    onlyContractAddress(jntController)\r\n    onlyValidJntBeneficiary(jntBeneficiary)\r\n  {\r\n    super.unpauseContract();\r\n  }\r\n\r\n\r\n  /* Modifiers */\r\n\r\n  modifier onlyValidJntBeneficiary(address _jntBeneficiary) {\r\n    require(_jntBeneficiary != address(0x0));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to check name of manager permission\r\n   */\r\n  modifier onlyValidActionName(string _actionName) {\r\n    require(bytes(_actionName).length != 0);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title JcashRegistrarInterface\r\n * @dev Interface of a contract that can receives ETH&ERC20, refunds ETH&ERC20 and logs these operations\r\n */\r\ncontract JcashRegistrarInterface {\r\n\r\n  /* Events */\r\n\r\n  event ReceiveEthEvent(address indexed from, uint256 value);\r\n  event RefundEthEvent(bytes32 txhash, address indexed to, uint256 value);\r\n  event TransferEthEvent(bytes32 txhash, address indexed to, uint256 value);\r\n\r\n  event RefundTokenEvent(bytes32 txhash, address indexed tokenaddress, address indexed to, uint256 value);\r\n  event TransferTokenEvent(bytes32 txhash, address indexed tokenaddress, address indexed to, uint256 value);\r\n\r\n  event ReplenishEthEvent(address indexed from, uint256 value);\r\n  event WithdrawEthEvent(address indexed to, uint256 value);\r\n  event WithdrawTokenEvent(address indexed tokenaddress, address indexed to, uint256 value);\r\n\r\n  event PauseEvent();\r\n  event UnpauseEvent();\r\n\r\n\r\n  /* Replenisher actions */\r\n\r\n  /**\r\n   * @dev Allows to withdraw ETH by Replenisher.\r\n   */\r\n  function withdrawEth(uint256 _weivalue) external;\r\n\r\n  /**\r\n   * @dev Allows to withdraw tokens by Replenisher.\r\n   */\r\n  function withdrawToken(address _tokenAddress, uint256 _weivalue) external;\r\n\r\n\r\n  /* Processing of exchange operations */\r\n\r\n  /**\r\n   * @dev Allows to perform refund ETH.\r\n   */\r\n  function refundEth(bytes32 _txHash, address _to, uint256 _weivalue) external;\r\n\r\n  /**\r\n   * @dev Allows to perform refund ERC20 tokens.\r\n   */\r\n  function refundToken(bytes32 _txHash, address _tokenAddress, address _to, uint256 _weivalue) external;\r\n\r\n  /**\r\n   * @dev Allows to perform transfer ETH.\r\n   *\r\n   */\r\n  function transferEth(bytes32 _txHash, address _to, uint256 _weivalue) external;\r\n\r\n  /**\r\n   * @dev Allows to perform transfer ERC20 tokens.\r\n   */\r\n  function transferToken(bytes32 _txHash, address _tokenAddress, address _to, uint256 _weivalue) external;\r\n\r\n\r\n  /* Getters */\r\n\r\n  /**\r\n   * @dev The getter returns true if tx hash is processed\r\n   */\r\n  function isProcessedTx(bytes32 _txHash) public view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title JcashRegistrar\r\n * @dev Implementation of a contract that can receives ETH&ERC20, refunds ETH&ERC20 and logs these operations\r\n */\r\ncontract JcashRegistrar is CommonModifiers,\r\n                           Ownable,\r\n                           Manageable,\r\n                           Pausable,\r\n                           JNTPayableService,\r\n                           JcashRegistrarInterface {\r\n\r\n  /* Storage */\r\n\r\n  mapping (bytes32 => bool) processedTxs;\r\n\r\n\r\n  /* Events */\r\n\r\n  event ReceiveEthEvent(address indexed from, uint256 value);\r\n  event RefundEthEvent(bytes32 txhash, address indexed to, uint256 value);\r\n  event TransferEthEvent(bytes32 txhash, address indexed to, uint256 value);\r\n  event RefundTokenEvent(bytes32 txhash, address indexed tokenaddress, address indexed to, uint256 value);\r\n  event TransferTokenEvent(bytes32 txhash, address indexed tokenaddress, address indexed to, uint256 value);\r\n\r\n  event ReplenishEthEvent(address indexed from, uint256 value);\r\n  event WithdrawEthEvent(address indexed to, uint256 value);\r\n  event WithdrawTokenEvent(address indexed tokenaddress, address indexed to, uint256 value);\r\n\r\n  event PauseEvent();\r\n  event UnpauseEvent();\r\n\r\n\r\n  /* Modifiers */\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint256 size) {\r\n    require(msg.data.length == (size + 4));\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function allowing the contract to receive funds, if contract haven't already been paused.\r\n   */\r\n  function () external payable {\r\n    if (isManagerAllowed(msg.sender, 'replenish_eth')==true) {\r\n      emit ReplenishEthEvent(msg.sender, msg.value);\r\n    } else {\r\n      require (getPaused() == false);\r\n      emit ReceiveEthEvent(msg.sender, msg.value);\r\n    }\r\n  }\r\n\r\n\r\n  /* Replenisher actions */\r\n\r\n  /**\r\n   * @dev Allows to withdraw ETH by Replenisher.\r\n   */\r\n  function withdrawEth(\r\n    uint256 _weivalue\r\n  )\r\n    external\r\n    onlyAllowedManager('replenish_eth')\r\n    onlyPayloadSize(1 * 32)\r\n  {\r\n    require (_weivalue > 0);\r\n\r\n    address(msg.sender).transfer(_weivalue);\r\n    emit WithdrawEthEvent(msg.sender, _weivalue);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows to withdraw tokens by Replenisher.\r\n   */\r\n  function withdrawToken(\r\n    address _tokenAddress,\r\n    uint256 _weivalue\r\n  )\r\n    external\r\n    onlyAllowedManager('replenish_token')\r\n    onlyPayloadSize(2 * 32)\r\n  {\r\n    require (_tokenAddress != address(0x0));\r\n    require (_tokenAddress != address(this));\r\n    require (_weivalue > 0);\r\n\r\n    CrydrViewERC20Interface(_tokenAddress).transfer(msg.sender, _weivalue);\r\n    emit WithdrawTokenEvent(_tokenAddress, msg.sender, _weivalue);\r\n  }\r\n\r\n\r\n  /* Processing of exchange operations */\r\n\r\n  /**\r\n   * @dev Allows to perform refund ETH.\r\n   */\r\n  function refundEth(\r\n    bytes32 _txHash,\r\n    address _to,\r\n    uint256 _weivalue\r\n  )\r\n    external\r\n    onlyAllowedManager('refund_eth')\r\n    whenContractNotPaused\r\n    onlyPayloadSize(3 * 32)\r\n  {\r\n    require (_txHash != bytes32(0));\r\n    require (processedTxs[_txHash] == false);\r\n    require (_to != address(0x0));\r\n    require (_to != address(this));\r\n    require (_weivalue > 0);\r\n\r\n    processedTxs[_txHash] = true;\r\n    _to.transfer(_weivalue);\r\n\r\n    emit RefundEthEvent(_txHash, _to, _weivalue);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows to perform refund ERC20 tokens.\r\n   */\r\n  function refundToken(\r\n    bytes32 _txHash,\r\n    address _tokenAddress,\r\n    address _to,\r\n    uint256 _weivalue\r\n  )\r\n    external\r\n    onlyAllowedManager('refund_token')\r\n    whenContractNotPaused\r\n    onlyPayloadSize(4 * 32)\r\n  {\r\n    require (_txHash != bytes32(0));\r\n    require (processedTxs[_txHash] == false);\r\n    require (_tokenAddress != address(0x0));\r\n    require (_tokenAddress != address(this));\r\n    require (_to != address(0x0));\r\n    require (_to != address(this));\r\n    require (_weivalue > 0);\r\n\r\n    processedTxs[_txHash] = true;\r\n    CrydrViewERC20Interface(_tokenAddress).transfer(_to, _weivalue);\r\n\r\n    emit RefundTokenEvent(_txHash, _tokenAddress, _to, _weivalue);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows to perform transfer ETH.\r\n   *\r\n   */\r\n  function transferEth(\r\n    bytes32 _txHash,\r\n    address _to,\r\n    uint256 _weivalue\r\n  )\r\n    external\r\n    onlyAllowedManager('transfer_eth')\r\n    whenContractNotPaused\r\n    onlyPayloadSize(3 * 32)\r\n  {\r\n    require (_txHash != bytes32(0));\r\n    require (processedTxs[_txHash] == false);\r\n    require (_to != address(0x0));\r\n    require (_to != address(this));\r\n    require (_weivalue > 0);\r\n\r\n    processedTxs[_txHash] = true;\r\n    _to.transfer(_weivalue);\r\n\r\n    if (getActionPrice('transfer_eth') > 0) {\r\n      initChargeJNT(_to, 'transfer_eth');\r\n    }\r\n\r\n    emit TransferEthEvent(_txHash, _to, _weivalue);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows to perform transfer ERC20 tokens.\r\n   */\r\n  function transferToken(\r\n    bytes32 _txHash,\r\n    address _tokenAddress,\r\n    address _to,\r\n    uint256 _weivalue\r\n  )\r\n    external\r\n    onlyAllowedManager('transfer_token')\r\n    whenContractNotPaused\r\n    onlyPayloadSize(4 * 32)\r\n  {\r\n    require (_txHash != bytes32(0));\r\n    require (processedTxs[_txHash] == false);\r\n    require (_tokenAddress != address(0x0));\r\n    require (_tokenAddress != address(this));\r\n    require (_to != address(0x0));\r\n    require (_to != address(this));\r\n\r\n    processedTxs[_txHash] = true;\r\n    CrydrViewERC20Interface(_tokenAddress).transfer(_to, _weivalue);\r\n\r\n    if (getActionPrice('transfer_token') > 0) {\r\n      initChargeJNT(_to, 'transfer_token');\r\n    }\r\n\r\n    emit TransferTokenEvent(_txHash, _tokenAddress, _to, _weivalue);\r\n  }\r\n\r\n\r\n  /* Getters */\r\n\r\n  /**\r\n   * @dev The getter returns true if tx hash is processed\r\n   */\r\n  function isProcessedTx(\r\n    bytes32 _txHash\r\n  )\r\n    public\r\n    view\r\n    onlyPayloadSize(1 * 32)\r\n    returns (bool)\r\n  {\r\n    require (_txHash != bytes32(0));\r\n    return processedTxs[_txHash];\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"isManagerAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"}],\"name\":\"isProcessedTx\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_weivalue\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJntController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_weivalue\",\"type\":\"uint256\"}],\"name\":\"refundToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"isPermissionGranted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionName\",\"type\":\"string\"},{\"name\":\"_jntPriceWei\",\"type\":\"uint256\"}],\"name\":\"setActionPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"enableManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"revokeManagerPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jntController\",\"type\":\"address\"}],\"name\":\"setJntController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"grantManagerPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"createOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManagerEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_weivalue\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_weivalue\",\"type\":\"uint256\"}],\"name\":\"refundEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJntBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weivalue\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jntBeneficiary\",\"type\":\"address\"}],\"name\":\"setJntBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_weivalue\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionName\",\"type\":\"string\"}],\"name\":\"getActionPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"disableManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProposedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReceiveEthEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txhash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RefundEthEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txhash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferEthEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txhash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"tokenaddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RefundTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txhash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"tokenaddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReplenishEthEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawEthEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenaddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnpauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"jntcontroller\",\"type\":\"address\"}],\"name\":\"JNTControllerChangedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"jntbeneficiary\",\"type\":\"address\"}],\"name\":\"JNTBeneficiaryChangedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"actionname\",\"type\":\"bytes32\"}],\"name\":\"JNTChargedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerEnabledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerDisabledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"bytes32\"}],\"name\":\"ManagerPermissionGrantedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"bytes32\"}],\"name\":\"ManagerPermissionRevokedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"OwnerAssignedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferAcceptedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferCancelledEvent\",\"type\":\"event\"}]","ContractName":"JcashRegistrar","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://830ffdbbb137a548742eaca9657ae2de63073c41d7e358d990f7b5e1a349ed3c"}]}