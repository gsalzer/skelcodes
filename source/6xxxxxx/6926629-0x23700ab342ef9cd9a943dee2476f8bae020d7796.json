{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 < 0.6.0;\r\n\r\ninterface tokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; \r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b)internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b)internal pure returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b)internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b)internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * Base Token for ERC20 compatibility\r\n * ERC20 interface \r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    //function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint);\r\n    function allowance(address owner, address spender) public view returns (uint);\r\n    function transfer(address to, uint value) public returns (bool ok);\r\n    function transferFrom(address from, address to, uint value) public returns (bool);\r\n    function approve(address spender, uint value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner contract.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n    /* Address of the owner */\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"Only Token Owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _owner) public onlyOwner{\r\n        require(_owner != owner,\"New Owner is the same as existing Owner\");\r\n        require(_owner != address(0x0), \"Empty Address provided\");\r\n        owner = _owner;\r\n    }\r\n}\r\n\r\n/**\r\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\n *\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, SafeMath, Ownable{\r\n\r\n    event Burn(address indexed from, uint value);\r\n\r\n    /* Actual balances of token holders */\r\n    mapping(address => uint) public balances;\r\n    uint public totalSupply;\r\n\r\n    /* approve() allowances */\r\n    mapping (address => mapping (address => uint)) internal allowed;\r\n    \r\n    /**\r\n     *\r\n     * Fix for the ERC20 short address attack\r\n     *\r\n     * http://vessenes.com/the-erc20-short-address-attack-explained/\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n        if(msg.data.length < size + 4) {\r\n            revert(\"Payload attack\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Transfer with ERC20 specification\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * http://vessenes.com/the-erc20-short-address-attack-explained/\r\n     */\r\n    function transfer(address _to, uint _value)\r\n    public\r\n    onlyPayloadSize(2 * 32)\r\n    returns (bool)\r\n    {\r\n        require(_to != address(0x0), \"No address specified\");\r\n        require(balances[msg.sender] >= _value, \"Insufficiently fund\");\r\n        uint previousBalances = balances[msg.sender] + balances[_to];\r\n        \r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balances[msg.sender] + balances[_to] == previousBalances);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_to != address(0x0), \"Empty address specified as Receiver\");\r\n        require(_from != address(0x0), \"Empty Address provided for Sender\");\r\n        require(_value <= balances[_from], \"Insufficiently fund\");\r\n        require(_value <= allowed[_from][msg.sender], \"You can't spend the speficied amount from this Account\");\r\n        uint _allowance = allowed[_from][msg.sender];\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint _value) \r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_spender != address(0x0), \"Invalid Address\");\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //    allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //    already 0 to mitigate the race condition described here:\r\n        //    https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        //if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0, \"Spender allowance must be zero before approving new allowance\");\r\n        require(_value <= balances[msg.sender],\"Insufficient balance in owner's account\");\r\n        require(_value >= 0, \"Cannot approve negative amount\");\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        require(_subtractedValue >= 0 && _subtractedValue <= balances[msg.sender], \"Invalid Amount\");\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function burn(address from, uint amount) public onlyOwner{\r\n        require(balances[from] >= amount && amount > 0, \"Insufficient amount or invalid amount specified\");\r\n        balances[from] = safeSub(balances[from],amount);\r\n        totalSupply = safeSub(totalSupply, amount);\r\n        emit Burn(from, amount);\r\n    }\r\n\r\n    function burn(uint amount) public{\r\n        burn(msg.sender, amount);\r\n    }\r\n}\r\n\r\ncontract Irstgold is StandardToken {\r\n    string public name;\r\n    uint8 public decimals; \r\n    string public symbol;\r\n\r\n    constructor() public{\r\n        decimals = 18;     // Amount of decimals for display purposes\r\n        totalSupply = 1000000000 * 1 ether;     // Update total supply\r\n        balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\r\n        name = \"1irstgold\";    // Set the name for display purposes\r\n        symbol = \"1STG\";    // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // can accept ether\r\n    function() external payable{\r\n        revert(\"Token does not accept ETH\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Irstgold","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e189c2d0d4ec1079a3ac1f83487c2273504f61a6c63b44a21cf76ec85b399dc1"}]}