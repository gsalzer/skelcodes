{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    int256 constant private INT256_MIN = -2**255;\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, reverts on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\r\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, reverts on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, reverts on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n  * @title Escrow (based on openzeppelin version with one function to withdraw funds to the wallet)\r\n  * @dev Base escrow contract, holds funds destinated to a payee until they\r\n  * withdraw them. The contract that uses the escrow as its payment method\r\n  * should be its owner, and provide public methods redirecting to the escrow's\r\n  * deposit and withdraw.\r\n  */\r\ncontract Escrow is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event Deposited(address indexed payee, uint256 weiAmount);\r\n    event Withdrawn(address indexed payee, uint256 weiAmount);\r\n\r\n    mapping(address => uint256) private deposits;\r\n\r\n    /**\r\n      * @dev Stores the sent amount as credit to be withdrawn.\r\n      * @param _payee The destination address of the funds.\r\n      */\r\n    function deposit(address _payee) public onlyOwner payable {\r\n        uint256 amount = msg.value;\r\n        deposits[_payee] = deposits[_payee].add(amount);\r\n\r\n        emit Deposited(_payee, amount);\r\n    }\r\n\r\n    /**\r\n      * @dev Withdraw accumulated balance for a payee.\r\n      * @param _payee The address whose funds will be withdrawn and transferred to.\r\n      * @return Amount withdrawn\r\n      */\r\n    function withdraw(address _payee) public onlyOwner returns(uint256) {\r\n        uint256 payment = deposits[_payee];\r\n\r\n        assert(address(this).balance >= payment);\r\n\r\n        deposits[_payee] = 0;\r\n\r\n        _payee.transfer(payment);\r\n\r\n        emit Withdrawn(_payee, payment);\r\n        return payment;\r\n    }\r\n\r\n    /**\r\n      * @dev Withdraws the wallet's funds.\r\n      * @param _wallet address the funds will be transferred to.\r\n      */\r\n    function beneficiaryWithdraw(address _wallet) public onlyOwner {\r\n        uint256 _amount = address(this).balance;\r\n        \r\n        _wallet.transfer(_amount);\r\n\r\n        emit Withdrawn(_wallet, _amount);\r\n    }\r\n\r\n    /**\r\n      * @dev Returns the deposited amount of the given address.\r\n      * @param _payee address of the payee of which to return the deposted amount.\r\n      * @return Deposited amount by the address given as argument.\r\n      */\r\n    function depositsOf(address _payee) public view returns(uint256) {\r\n        return deposits[_payee];\r\n    }\r\n}\r\n\r\n/**\r\n  * @title PullPayment (based on openzeppelin version with one function to withdraw funds to the wallet)\r\n  * @dev Base contract supporting async send for pull payments. Inherit from this\r\n  * contract and use asyncTransfer instead of send or transfer.\r\n  */\r\ncontract PullPayment {\r\n    Escrow private escrow;\r\n\r\n    constructor() public {\r\n        escrow = new Escrow();\r\n    }\r\n\r\n    /**\r\n      * @dev Returns the credit owed to an address.\r\n      * @param _dest The creditor's address.\r\n      * @return Deposited amount by the address given as argument.\r\n      */\r\n    function payments(address _dest) public view returns(uint256) {\r\n        return escrow.depositsOf(_dest);\r\n    }\r\n\r\n    /**\r\n      * @dev Withdraw accumulated balance, called by payee.\r\n      * @param _payee The address whose funds will be withdrawn and transferred to.\r\n      * @return Amount withdrawn\r\n      */\r\n    function _withdrawPayments(address _payee) internal returns(uint256) {\r\n        uint256 payment = escrow.withdraw(_payee);\r\n\r\n        return payment;\r\n    }\r\n\r\n    /**\r\n      * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n      * @param _dest The destination address of the funds.\r\n      * @param _amount The amount to transfer.\r\n      */\r\n    function _asyncTransfer(address _dest, uint256 _amount) internal {\r\n        escrow.deposit.value(_amount)(_dest);\r\n    }\r\n\r\n    /**\r\n      * @dev Withdraws the wallet's funds.\r\n      * @param _wallet address the funds will be transferred to.\r\n      */\r\n    function _withdrawFunds(address _wallet) internal {\r\n        escrow.beneficiaryWithdraw(_wallet);\r\n    }\r\n}\r\n\r\n/** @title VestedCrowdsale\r\n  * @dev Extension of Crowdsale to allow a vested distribution of tokens\r\n  * Users have to individually claim their tokens\r\n  */\r\ncontract VestedCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public withdrawn;\r\n    mapping (address => uint256) public contributions;\r\n    mapping (address => uint256) public contributionsRound;\r\n    uint256 public vestedTokens;\r\n\r\n    /**\r\n      * @dev Gives how much a user is allowed to withdraw at the current moment\r\n      * @param _beneficiary The address of the user asking how much he's allowed\r\n      * to withdraw\r\n      * @return Amount _beneficiary is allowed to withdraw\r\n      */\r\n    function getWithdrawableAmount(address _beneficiary) public view returns(uint256) {\r\n        uint256 step = _getVestingStep(_beneficiary);\r\n        uint256 valueByStep = _getValueByStep(_beneficiary);\r\n        uint256 result = step.mul(valueByStep).sub(withdrawn[_beneficiary]);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n      * @dev Gives the step of the vesting (starts from 0 to steps)\r\n      * @param _beneficiary The address of the user asking how much he's allowed\r\n      * to withdraw\r\n      * @return The vesting step for _beneficiary\r\n      */\r\n    function _getVestingStep(address _beneficiary) internal view returns(uint8) {\r\n        require(contributions[_beneficiary] != 0);\r\n        require(contributionsRound[_beneficiary] > 0 && contributionsRound[_beneficiary] < 4);\r\n\r\n        uint256 march31 = 1554019200;\r\n        uint256 april30 = 1556611200;\r\n        uint256 may31 = 1559289600;\r\n        uint256 june30 = 1561881600;\r\n        uint256 july31 = 1564560000;\r\n        uint256 sept30 = 1569830400;\r\n        uint256 contributionRound = contributionsRound[_beneficiary];\r\n\r\n        // vesting for private sale contributors\r\n        if (contributionRound == 1) {\r\n            if (block.timestamp < march31) {\r\n                return 0;\r\n            }\r\n            if (block.timestamp < june30) {\r\n                return 1;\r\n            }\r\n            if (block.timestamp < sept30) {\r\n                return 2;\r\n            }\r\n\r\n            return 3;\r\n        }\r\n        // vesting for pre ico contributors\r\n        if (contributionRound == 2) {\r\n            if (block.timestamp < april30) {\r\n                return 0;\r\n            }\r\n            if (block.timestamp < july31) {\r\n                return 1;\r\n            }\r\n\r\n            return 2;\r\n        }\r\n        // vesting for ico contributors\r\n        if (contributionRound == 3) {\r\n            if (block.timestamp < may31) {\r\n                return 0;\r\n            }\r\n\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev Gives the amount a user is allowed to withdraw by step\r\n      * @param _beneficiary The address of the user asking how much he's allowed\r\n      * to withdraw\r\n      * @return How much a user is allowed to withdraw by step\r\n      */\r\n    function _getValueByStep(address _beneficiary) internal view returns(uint256) {\r\n        require(contributions[_beneficiary] != 0);\r\n        require(contributionsRound[_beneficiary] > 0 && contributionsRound[_beneficiary] < 4);\r\n\r\n        uint256 contributionRound = contributionsRound[_beneficiary];\r\n        uint256 amount;\r\n        uint256 rate;\r\n\r\n        if (contributionRound == 1) {\r\n            rate = 416700;\r\n            amount = contributions[_beneficiary].mul(rate).mul(25).div(100);\r\n            return amount;\r\n        } else if (contributionRound == 2) {\r\n            rate = 312500;\r\n            amount = contributions[_beneficiary].mul(rate).mul(25).div(100);\r\n            return amount;\r\n        }\r\n\r\n        rate = 250000;\r\n        amount = contributions[_beneficiary].mul(rate).mul(25).div(100);\r\n        return amount;\r\n    }\r\n}\r\n\r\n/**\r\n  * @title Whitelist\r\n  * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n  * This simplifies the implementation of \"user permissions\".\r\n  */\r\ncontract Whitelist is Ownable {\r\n    // Whitelisted address\r\n    mapping(address => bool) public whitelist;\r\n\r\n    event AddedBeneficiary(address indexed _beneficiary);\r\n    event RemovedBeneficiary(address indexed _beneficiary);\r\n\r\n    /**\r\n      * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\r\n      * @param _beneficiaries Addresses to be added to the whitelist\r\n      */\r\n    function addAddressToWhitelist(address[] _beneficiaries) public onlyOwner {\r\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n            whitelist[_beneficiaries[i]] = true;\r\n\r\n            emit AddedBeneficiary(_beneficiaries[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev Adds list of address to whitelist. Not overloaded due to limitations with truffle testing.\r\n      * @param _beneficiary Address to be added to the whitelist\r\n      */\r\n    function addToWhitelist(address _beneficiary) public onlyOwner {\r\n        whitelist[_beneficiary] = true;\r\n\r\n        emit AddedBeneficiary(_beneficiary);\r\n    }\r\n\r\n    /**\r\n      * @dev Removes single address from whitelist.\r\n      * @param _beneficiary Address to be removed to the whitelist\r\n      */\r\n    function removeFromWhitelist(address _beneficiary) public onlyOwner {\r\n        whitelist[_beneficiary] = false;\r\n\r\n        emit RemovedBeneficiary(_beneficiary);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The amount of token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n/**\r\n  * @title DSLACrowdsale\r\n  * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n  * allowing investors to purchase tokens with ether\r\n  */\r\ncontract DSLACrowdsale is VestedCrowdsale, Whitelist, Pausable, PullPayment {\r\n    // struct to store ico rounds details\r\n    struct IcoRound {\r\n        uint256 rate;\r\n        uint256 individualFloor;\r\n        uint256 individualCap;\r\n        uint256 softCap;\r\n        uint256 hardCap;\r\n    }\r\n\r\n    // mapping ico rounds\r\n    mapping (uint256 => IcoRound) public icoRounds;\r\n    // The token being sold\r\n    ERC20Burnable private _token;\r\n    // Address where funds are collected\r\n    address private _wallet;\r\n    // Amount of wei raised\r\n    uint256 private totalContributionAmount;\r\n    // Tokens to sell = 5 Billions * 10^18 = 5 * 10^27 = 5000000000000000000000000000\r\n    uint256 public constant TOKENSFORSALE = 5000000000000000000000000000;\r\n    // Current ico round\r\n    uint256 public currentIcoRound;\r\n    // Distributed Tokens\r\n    uint256 public distributedTokens;\r\n    // Amount of wei raised from other currencies\r\n    uint256 public weiRaisedFromOtherCurrencies;\r\n    // Refund period on\r\n    bool public isRefunding = false;\r\n    // Finalized crowdsale off\r\n    bool public isFinalized = false;\r\n    // Refunding deadline\r\n    uint256 public refundDeadline;\r\n\r\n    /**\r\n      * Event for token purchase logging\r\n      * @param purchaser who paid for the tokens\r\n      * @param beneficiary who got the tokens\r\n      * @param value weis paid for purchase\r\n      * @param amount amount of tokens purchased\r\n      */\r\n    event TokensPurchased(\r\n        address indexed purchaser,\r\n        address indexed beneficiary,\r\n        uint256 value,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n      * @param wallet Address where collected funds will be forwarded to\r\n      * @param token Address of the token being sold\r\n      */\r\n    constructor(address wallet, ERC20Burnable token) public {\r\n        require(wallet != address(0) && token != address(0));\r\n\r\n        icoRounds[1] = IcoRound(\r\n            416700,\r\n            3 ether,\r\n            600 ether,\r\n            0,\r\n            1200 ether\r\n        );\r\n\r\n        icoRounds[2] = IcoRound(\r\n            312500,\r\n            12 ether,\r\n            5000 ether,\r\n            0,\r\n            6000 ether\r\n        );\r\n\r\n        icoRounds[3] = IcoRound(\r\n            250000,\r\n            3 ether,\r\n            30 ether,\r\n            7200 ether,\r\n            17200 ether\r\n        );\r\n\r\n        _wallet = wallet;\r\n        _token = token;\r\n    }\r\n\r\n    /**\r\n      * @dev fallback function ***DO NOT OVERRIDE***\r\n      */\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n      * @dev low level token purchase ***DO NOT OVERRIDE***\r\n      * @param _contributor Address performing the token purchase\r\n      */\r\n    function buyTokens(address _contributor) public payable {\r\n        require(whitelist[_contributor]);\r\n\r\n        uint256 contributionAmount = msg.value;\r\n\r\n        _preValidatePurchase(_contributor, contributionAmount, currentIcoRound);\r\n\r\n        totalContributionAmount = totalContributionAmount.add(contributionAmount);\r\n\r\n        uint tokenAmount = _handlePurchase(contributionAmount, currentIcoRound, _contributor);\r\n\r\n        emit TokensPurchased(msg.sender, _contributor, contributionAmount, tokenAmount);\r\n\r\n        _forwardFunds();\r\n    }\r\n\r\n    /**\r\n      * @dev Function to go to the next round\r\n      * @return True bool when round is incremented\r\n      */\r\n    function goToNextRound() public onlyOwner returns(bool) {\r\n        require(currentIcoRound >= 0 && currentIcoRound < 3);\r\n\r\n        currentIcoRound = currentIcoRound + 1;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * @dev Manually adds a contributor's contribution for private presale period\r\n      * @param _contributor The address of the contributor\r\n      * @param _contributionAmount Amount of wei contributed\r\n      */\r\n    function addPrivateSaleContributors(address _contributor, uint256 _contributionAmount)\r\n    public onlyOwner\r\n    {\r\n        uint privateSaleRound = 1;\r\n        _preValidatePurchase(_contributor, _contributionAmount, privateSaleRound);\r\n\r\n        totalContributionAmount = totalContributionAmount.add(_contributionAmount);\r\n\r\n        addToWhitelist(_contributor);\r\n\r\n        _handlePurchase(_contributionAmount, privateSaleRound, _contributor);\r\n    }\r\n\r\n    /**\r\n      * @dev Manually adds a contributor's contribution with other currencies\r\n      * @param _contributor The address of the contributor\r\n      * @param _contributionAmount Amount of wei contributed\r\n      * @param _round contribution round\r\n      */\r\n    function addOtherCurrencyContributors(address _contributor, uint256 _contributionAmount, uint256 _round)\r\n    public onlyOwner\r\n    {\r\n        _preValidatePurchase(_contributor, _contributionAmount, _round);\r\n\r\n        weiRaisedFromOtherCurrencies = weiRaisedFromOtherCurrencies.add(_contributionAmount);\r\n\r\n        addToWhitelist(_contributor);\r\n\r\n        _handlePurchase(_contributionAmount, _round, _contributor);\r\n    }\r\n\r\n    /**\r\n      * @dev Function to close refunding period\r\n      * @return True bool\r\n      */\r\n    function closeRefunding() public returns(bool) {\r\n        require(isRefunding);\r\n        require(block.timestamp > refundDeadline);\r\n\r\n        isRefunding = false;\r\n\r\n        _withdrawFunds(wallet());\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * @dev Function to close the crowdsale\r\n      * @return True bool\r\n      */\r\n    function closeCrowdsale() public onlyOwner returns(bool) {\r\n        require(currentIcoRound > 0 && currentIcoRound < 4);\r\n\r\n        currentIcoRound = 4;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * @dev Function to finalize the crowdsale\r\n      * @param _burn bool burn unsold tokens when true\r\n      * @return True bool\r\n      */\r\n    function finalizeCrowdsale(bool _burn) public onlyOwner returns(bool) {\r\n        require(currentIcoRound == 4 && !isRefunding);\r\n\r\n        if (raisedFunds() < icoRounds[3].softCap) {\r\n            isRefunding = true;\r\n            refundDeadline = block.timestamp + 4 weeks;\r\n\r\n            return true;\r\n        }\r\n\r\n        require(!isFinalized);\r\n\r\n        _withdrawFunds(wallet());\r\n        isFinalized = true;\r\n\r\n        if (_burn) {\r\n            _burnUnsoldTokens();\r\n        } else {\r\n            _withdrawUnsoldTokens();\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    /**\r\n      * @dev Investors can claim refunds here if crowdsale is unsuccessful\r\n      */\r\n    function claimRefund() public {\r\n        require(isRefunding);\r\n        require(block.timestamp <= refundDeadline);\r\n        require(payments(msg.sender) > 0);\r\n\r\n        uint256 payment = _withdrawPayments(msg.sender);\r\n\r\n        totalContributionAmount = totalContributionAmount.sub(payment);\r\n    }\r\n\r\n    /**\r\n      * @dev Allows the sender to claim the tokens he is allowed to withdraw\r\n      */\r\n    function claimTokens() public {\r\n        require(getWithdrawableAmount(msg.sender) != 0);\r\n\r\n        uint256 amount = getWithdrawableAmount(msg.sender);\r\n        withdrawn[msg.sender] = withdrawn[msg.sender].add(amount);\r\n\r\n        _deliverTokens(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the token being sold\r\n      * @return the token being sold\r\n      */\r\n    function token() public view returns(ERC20Burnable) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the wallet address that collects the funds\r\n      * @return the address where funds are collected\r\n      */\r\n    function wallet() public view returns(address) {\r\n        return _wallet;\r\n    }\r\n\r\n    /**\r\n      * @dev Returns the total of raised funds\r\n      * @return total amount of raised funds\r\n      */\r\n    function raisedFunds() public view returns(uint256) {\r\n        return totalContributionAmount.add(weiRaisedFromOtherCurrencies);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Internal interface\r\n    // -----------------------------------------\r\n    /**\r\n      * @dev Source of tokens. Override this method to modify the way in which\r\n      * the crowdsale ultimately gets and sends its tokens.\r\n      * @param _beneficiary Address performing the token purchase\r\n      * @param _tokenAmount Number of tokens to be emitted\r\n      */\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount)\r\n    internal\r\n    {\r\n        _token.transfer(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n      * @dev Determines how ETH is stored/forwarded on purchases.\r\n      */\r\n    function _forwardFunds()\r\n    internal\r\n    {\r\n        if (currentIcoRound == 2 || currentIcoRound == 3) {\r\n            _asyncTransfer(msg.sender, msg.value);\r\n        } else {\r\n            _wallet.transfer(msg.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev Gets tokens allowed to deliver in the given round\r\n      * @param _tokenAmount total amount of tokens involved in the purchase\r\n      * @param _round Round in which the purchase is happening\r\n      * @return Returns the amount of tokens allowed to deliver\r\n      */\r\n    function _getTokensToDeliver(uint _tokenAmount, uint _round)\r\n    internal pure returns(uint)\r\n    {\r\n        require(_round > 0 && _round < 4);\r\n        uint deliverPercentage = _round.mul(25);\r\n\r\n        return _tokenAmount.mul(deliverPercentage).div(100);\r\n    }\r\n\r\n    /**\r\n      * @dev Handles token purchasing\r\n      * @param _contributor Address performing the token purchase\r\n      * @param _contributionAmount Value in wei involved in the purchase\r\n      * @param _round Round in which the purchase is happening\r\n      * @return Returns the amount of tokens purchased\r\n      */\r\n    function _handlePurchase(uint _contributionAmount, uint _round, address _contributor)\r\n    internal returns(uint) {\r\n        uint256 soldTokens = distributedTokens.add(vestedTokens);\r\n        uint256 tokenAmount = _getTokenAmount(_contributionAmount, _round);\r\n\r\n        require(tokenAmount.add(soldTokens) <= TOKENSFORSALE);\r\n\r\n        contributions[_contributor] = contributions[_contributor].add(_contributionAmount);\r\n        contributionsRound[_contributor] = _round;\r\n\r\n        uint tokensToDeliver = _getTokensToDeliver(tokenAmount, _round);\r\n        uint tokensToVest = tokenAmount.sub(tokensToDeliver);\r\n\r\n        distributedTokens = distributedTokens.add(tokensToDeliver);\r\n        vestedTokens = vestedTokens.add(tokensToVest);\r\n\r\n        _deliverTokens(_contributor, tokensToDeliver);\r\n\r\n        return tokenAmount;\r\n    }\r\n\r\n    /**\r\n      * @dev Validation of an incoming purchase.\r\n      * @param _contributor Address performing the token purchase\r\n      * @param _contributionAmount Value in wei involved in the purchase\r\n      * @param _round Round in which the purchase is happening\r\n      */\r\n    function _preValidatePurchase(address _contributor, uint256 _contributionAmount, uint _round)\r\n    internal view\r\n    {\r\n        require(_contributor != address(0));\r\n        require(currentIcoRound > 0 && currentIcoRound < 4);\r\n        require(_round > 0 && _round < 4);\r\n        require(contributions[_contributor] == 0);\r\n        require(_contributionAmount >= icoRounds[_round].individualFloor);\r\n        require(_contributionAmount < icoRounds[_round].individualCap);\r\n        require(_doesNotExceedHardCap(_contributionAmount, _round));\r\n    }\r\n\r\n    /**\r\n      * @dev define the way in which ether is converted to tokens.\r\n      * @param _contributionAmount Value in wei to be converted into tokens\r\n      * @return Number of tokens that can be purchased with the specified _contributionAmount\r\n      */\r\n    function _getTokenAmount(uint256 _contributionAmount, uint256 _round)\r\n    internal view returns(uint256)\r\n    {\r\n        uint256 _rate = icoRounds[_round].rate;\r\n        return _contributionAmount.mul(_rate);\r\n    }\r\n\r\n    /**\r\n      * @dev Checks if current round hardcap will not be exceeded by a new contribution\r\n      * @param _contributionAmount purchase amount in Wei\r\n      * @param _round Round in which the purchase is happening\r\n      * @return true when current hardcap is not exceeded, false if exceeded\r\n      */\r\n    function _doesNotExceedHardCap(uint _contributionAmount, uint _round)\r\n    internal view returns(bool)\r\n    {\r\n        uint roundHardCap = icoRounds[_round].hardCap;\r\n        return totalContributionAmount.add(_contributionAmount) <= roundHardCap;\r\n    }\r\n\r\n    /**\r\n      * @dev Function to burn unsold tokens\r\n      */\r\n    function _burnUnsoldTokens()\r\n    internal\r\n    {\r\n        uint256 tokensToBurn = TOKENSFORSALE.sub(vestedTokens).sub(distributedTokens);\r\n\r\n        _token.burn(tokensToBurn);\r\n    }\r\n\r\n    /**\r\n      * @dev Transfer the unsold tokens to the funds collecting address\r\n      */\r\n    function _withdrawUnsoldTokens()\r\n    internal {\r\n        uint256 tokensToWithdraw = TOKENSFORSALE.sub(vestedTokens).sub(distributedTokens);\r\n\r\n        _token.transfer(_wallet, tokensToWithdraw);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoRounds\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"individualFloor\",\"type\":\"uint256\"},{\"name\":\"individualCap\",\"type\":\"uint256\"},{\"name\":\"softCap\",\"type\":\"uint256\"},{\"name\":\"hardCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentIcoRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENSFORSALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"_contributionAmount\",\"type\":\"uint256\"},{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"addOtherCurrencyContributors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burn\",\"type\":\"bool\"}],\"name\":\"finalizeCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributionsRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeRefunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"_contributionAmount\",\"type\":\"uint256\"}],\"name\":\"addPrivateSaleContributors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaisedFromOtherCurrencies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"goToNextRound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"AddedBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"RemovedBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DSLACrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005b5eb140d73ae818d013c51f92ccfcd2567708aa000000000000000000000000eeb86b7c0687002613bc88328499f5734e7be4c0","Library":"","SwarmSource":"bzzr://73447b5e5b9d45d6eda24dac267c99e9972ec32b7802157b8097ebbf05736667"}]}