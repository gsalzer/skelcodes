{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public constant returns (uint256);\r\n  function balanceOf(address tokenOwner) public constant returns (uint256 balance);\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Constructor\r\n  // ------------------------------------------------------------------------\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner returns (address account) {\r\n    owner = newOwner;\r\n    return owner;\r\n  }\r\n}\r\ncontract CoinLoanCS is ERC20, Owned {\r\n  using SafeMath for uint256;\r\n\r\n  string public symbol;\r\n  string public  name;\r\n  uint256 public decimals;\r\n  uint256 _totalSupply;\r\n\r\n  address public token;\r\n  uint256 public price;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping(address => mapping(string => uint256)) orders;\r\n\r\n  event TransferETH(address indexed from, address indexed to, uint256 eth);\r\n  event Sell(address indexed to, uint256 tokens);\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Constructor\r\n  // ------------------------------------------------------------------------\r\n  constructor() public {\r\n    symbol = \"CLT_CS\";\r\n    name = \"CoinLoan CryptoStock Promo Token\";\r\n    decimals = 8;\r\n    token = 0x2001f2A0Cf801EcFda622f6C28fb6E10d803D969;\r\n    price = 3000000;  // = 0.03000000\r\n    _totalSupply = 100000 * 10**decimals;\r\n    balances[owner] = _totalSupply;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Changes the address of the supported token\r\n  // ------------------------------------------------------------------------\r\n  function setToken(address newTokenAddress) public onlyOwner returns (bool success) {\r\n    token = newTokenAddress;\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Return a contract address of the supported token\r\n  // ------------------------------------------------------------------------\r\n  function getToken() public view returns (address) {\r\n    return token;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Sets `price` value\r\n  // ------------------------------------------------------------------------\r\n  function setPrice(uint256 newPrice) public onlyOwner returns (bool success) {\r\n    price = newPrice;\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Returns current price (without decimals)\r\n  // ------------------------------------------------------------------------\r\n  function getPrice() public view returns (uint256) {\r\n    return price;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Total supply\r\n  // ------------------------------------------------------------------------\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply.sub(balances[address(0)]);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Changes the total supply value\r\n  //\r\n  // a new supply must be no less then the current supply\r\n  // or the owner must have enough amount to cover supply reduction\r\n  // ------------------------------------------------------------------------\r\n  function changeTotalSupply(uint256 newSupply) public onlyOwner returns (bool success) {\r\n    require(newSupply >= 0 && (\r\n      newSupply >= _totalSupply || _totalSupply - newSupply <= balances[owner]\r\n    ));\r\n    uint256 diff = 0;\r\n    if (newSupply >= _totalSupply) {\r\n      diff = newSupply.sub(_totalSupply);\r\n      balances[owner] = balances[owner].add(diff);\r\n      emit Transfer(address(0), owner, diff);\r\n    } else {\r\n      diff = _totalSupply.sub(newSupply);\r\n      balances[owner] = balances[owner].sub(diff);\r\n      emit Transfer(owner, address(0), diff);\r\n    }\r\n    _totalSupply = newSupply;\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Get the token balance for account `tokenOwner`\r\n  // ------------------------------------------------------------------------\r\n  function balanceOf(address tokenOwner) public view returns (uint256 balance) {\r\n    return balances[tokenOwner];\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Get the order's balance of tokens for account `customer`\r\n  // ------------------------------------------------------------------------\r\n  function orderTokensOf(address customer) public view returns (uint256 balance) {\r\n    return orders[customer]['tokens'];\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Get the order's balance of ETH for account `customer`\r\n  // ------------------------------------------------------------------------\r\n  function orderEthOf(address customer) public view returns (uint256 balance) {\r\n    return orders[customer]['eth'];\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Delete customer's order\r\n  // ------------------------------------------------------------------------\r\n  function cancelOrder(address customer) public onlyOwner returns (bool success) {\r\n    orders[customer]['eth'] = 0;\r\n    orders[customer]['tokens'] = 0;\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Checks the order values by the customer's address and sends required\r\n  // promo tokens based on the received amount of `this` tokens and ETH\r\n  // ------------------------------------------------------------------------\r\n  function _checkOrder(address customer) private returns (uint256) {\r\n    require(price > 0);\r\n    if (orders[customer]['tokens'] <= 0 || orders[customer]['eth'] <= 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 decimalsDiff = 10 ** (18 - 2 * decimals);\r\n    uint256 eth = orders[customer]['eth'];\r\n    uint256 tokens = orders[customer]['eth'] / price / decimalsDiff;\r\n\r\n    if (orders[customer]['tokens'] < tokens) {\r\n      tokens = orders[customer]['tokens'];\r\n      eth = tokens * price * decimalsDiff;\r\n    }\r\n\r\n    ERC20 tokenInstance = ERC20(token);\r\n\r\n    // complete the order\r\n    require(tokenInstance.balanceOf(this) >= tokens);\r\n\r\n    // charge required amount of the tokens and ETHs\r\n    orders[customer]['tokens'] = orders[customer]['tokens'].sub(tokens);\r\n    orders[customer]['eth'] = orders[customer]['eth'].sub(eth);\r\n\r\n    tokenInstance.transfer(customer, tokens);\r\n\r\n    emit Sell(customer, tokens);\r\n\r\n    return tokens;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // public entry point for the `_checkOrder` function\r\n  // ------------------------------------------------------------------------\r\n  function checkOrder(address customer) public onlyOwner returns (uint256) {\r\n    return _checkOrder(customer);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Transfer the balance from token owner's account to `to` account\r\n  // - Owner's account must have sufficient balance to transfer\r\n  // - 0 value transfers are allowed\r\n  // - only owner is allowed to send tokens to any address\r\n  // - not owners can transfer the balance only to owner's address\r\n  // ------------------------------------------------------------------------\r\n  function transfer(address to, uint256 tokens) public returns (bool success) {\r\n    require(msg.sender == owner || to == owner || to == address(this));\r\n    address receiver = msg.sender == owner ? to : owner;\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[receiver] = balances[receiver].add(tokens);\r\n    emit Transfer(msg.sender, receiver, tokens);\r\n    if (receiver == owner) {\r\n      orders[msg.sender]['tokens'] = orders[msg.sender]['tokens'].add(tokens);\r\n      _checkOrder(msg.sender);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // `allowance` is not allowed\r\n  // ------------------------------------------------------------------------\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining) {\r\n    tokenOwner;\r\n    spender;\r\n    return uint256(0);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // `approve` is not allowed\r\n  // ------------------------------------------------------------------------\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    spender;\r\n    tokens;\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // `transferFrom` is not allowed\r\n  // ------------------------------------------------------------------------\r\n  function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\r\n    from;\r\n    to;\r\n    tokens;\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Accept ETH\r\n  // ------------------------------------------------------------------------\r\n  function () public payable {\r\n    owner.transfer(msg.value);\r\n    orders[msg.sender]['eth'] = orders[msg.sender]['eth'].add(msg.value);\r\n    _checkOrder(msg.sender);\r\n    emit TransferETH(msg.sender, address(this), msg.value);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can transfer out any accidentally sent ERC20 tokens\r\n  // ------------------------------------------------------------------------\r\n  function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\r\n    return ERC20(tokenAddress).transfer(owner, tokens);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can transfer out promo token\r\n  // ------------------------------------------------------------------------\r\n  function transferToken(uint256 tokens) public onlyOwner returns (bool success) {\r\n    return transferAnyERC20Token(token, tokens);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can return specified amount from `tokenOwner`\r\n  // ------------------------------------------------------------------------\r\n  function returnFrom(address tokenOwner, uint256 tokens) public onlyOwner returns (bool success) {\r\n    balances[tokenOwner] = balances[tokenOwner].sub(tokens);\r\n    balances[owner] = balances[owner].add(tokens);\r\n    emit Transfer(tokenOwner, owner, tokens);\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can returns all tokens from `tokenOwner`\r\n  // ------------------------------------------------------------------------\r\n  function nullifyFrom(address tokenOwner) public onlyOwner returns (bool success) {\r\n    return returnFrom(tokenOwner, balances[tokenOwner]);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"orderTokensOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"nullifyFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"changeTotalSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"checkOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"returnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"orderEthOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"TransferETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CoinLoanCS","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://88bd575bec85172401ea00d8b28acc95afbc96fa91d994093b23d0521e15f6d9"}]}