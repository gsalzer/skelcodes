{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n//共识会 contract\r\n//\r\n//共识勋章：象征着你在共识会的地位和权利\r\n//Anno Consensus Medal: Veni, Vidi, Vici\r\n// \r\n// Symbol      : GSU\r\n// Name        : Anno Consensus\r\n// Total supply: 1000000\r\n// Decimals    : 0\r\n// \r\n// 共识币：维护共识新纪元的基石\r\n//Anno Consensus Coin: Caput, Anguli, Seclorum\r\n// Symbol      : ANNO\r\n// Name        : Anno Consensus Token\r\n// Total supply: 1000000000\r\n// Decimals    : 18\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n    \r\n    function withdrawBalance() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract GSUMedal is ERC20Interface, Owned, SafeMath {\r\n    event MedalTransfer(address indexed from, address indexed to, uint tokens);\r\n    \r\n    string public medalSymbol;\r\n    string public medalName;\r\n    uint8 public medalDecimals;\r\n    uint public _medalTotalSupply;\r\n\r\n    mapping(address => uint) medalBalances;\r\n    mapping(address => bool) medalFreezed;\r\n    mapping(address => uint) medalFreezeAmount;\r\n    mapping(address => uint) medalUnlockTime;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function GSUMedal() public {\r\n        medalSymbol = \"GSU\";\r\n        medalName = \"Anno Consensus\";\r\n        medalDecimals = 0;\r\n        _medalTotalSupply = 1000000;\r\n        medalBalances[msg.sender] = _medalTotalSupply;\r\n        MedalTransfer(address(0), msg.sender, _medalTotalSupply);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function medalTotalSupply() public constant returns (uint) {\r\n        return _medalTotalSupply  - medalBalances[address(0)];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account tokenOwner\r\n    // ------------------------------------------------------------------------\r\n    function mentalBalanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return medalBalances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to to account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function medalTransfer(address to, uint tokens) public returns (bool success) {\r\n        if(medalFreezed[msg.sender] == false){\r\n            medalBalances[msg.sender] = safeSub(medalBalances[msg.sender], tokens);\r\n            medalBalances[to] = safeAdd(medalBalances[to], tokens);\r\n            MedalTransfer(msg.sender, to, tokens);\r\n        } else {\r\n            if(medalBalances[msg.sender] > medalFreezeAmount[msg.sender]) {\r\n                require(tokens <= safeSub(medalBalances[msg.sender], medalFreezeAmount[msg.sender]));\r\n                medalBalances[msg.sender] = safeSub(medalBalances[msg.sender], tokens);\r\n                medalBalances[to] = safeAdd(medalBalances[to], tokens);\r\n                MedalTransfer(msg.sender, to, tokens);\r\n            }\r\n        }\r\n            \r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Mint Tokens\r\n    // ------------------------------------------------------------------------\r\n    function mintMedal(uint amount) public onlyOwner {\r\n        medalBalances[msg.sender] = safeAdd(medalBalances[msg.sender], amount);\r\n        _medalTotalSupply = safeAdd(_medalTotalSupply, amount);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Burn Tokens\r\n    // ------------------------------------------------------------------------\r\n    function burnMedal(uint amount) public onlyOwner {\r\n        medalBalances[msg.sender] = safeSub(medalBalances[msg.sender], amount);\r\n        _medalTotalSupply = safeSub(_medalTotalSupply, amount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Freeze Tokens\r\n    // ------------------------------------------------------------------------\r\n    function medalFreeze(address user, uint amount, uint period) public onlyOwner {\r\n        require(medalBalances[user] >= amount);\r\n        medalFreezed[user] = true;\r\n        medalUnlockTime[user] = uint(now) + period;\r\n        medalFreezeAmount[user] = amount;\r\n    }\r\n    \r\n    function _medalFreeze(uint amount) internal {\r\n        require(medalBalances[msg.sender] >= amount);\r\n        medalFreezed[msg.sender] = true;\r\n        medalUnlockTime[msg.sender] = uint(-1);\r\n        medalFreezeAmount[msg.sender] = amount;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // UnFreeze Tokens\r\n    // ------------------------------------------------------------------------\r\n    function medalUnFreeze() public {\r\n        require(medalFreezed[msg.sender] == true);\r\n        require(medalUnlockTime[msg.sender] < uint(now));\r\n        medalFreezed[msg.sender] = false;\r\n        medalFreezeAmount[msg.sender] = 0;\r\n    }\r\n    \r\n    function _medalUnFreeze() internal {\r\n        require(medalFreezed[msg.sender] == true);\r\n        medalUnlockTime[msg.sender] = 0;\r\n        medalFreezed[msg.sender] = false;\r\n        medalFreezeAmount[msg.sender] = 0;\r\n    }\r\n    \r\n    function medalIfFreeze(address user) public view returns (\r\n        bool check, \r\n        uint amount, \r\n        uint timeLeft\r\n    ) {\r\n        check = medalFreezed[user];\r\n        amount = medalFreezeAmount[user];\r\n        timeLeft = medalUnlockTime[user] - uint(now);\r\n    }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract AnnoToken is GSUMedal {\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    uint public minePool;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    mapping(address => bool) freezed;\r\n    mapping(address => uint) freezeAmount;\r\n    mapping(address => uint) unlockTime;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function AnnoToken() public {\r\n        symbol = \"ANNO\";\r\n        name = \"Anno Consensus Token\";\r\n        decimals = 18;\r\n        _totalSupply = 1000000000000000000000000000;\r\n        minePool = 600000000000000000000000000;\r\n        balances[msg.sender] = _totalSupply - minePool;\r\n        Transfer(address(0), msg.sender, _totalSupply - minePool);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account tokenOwner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to to account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        if(freezed[msg.sender] == false){\r\n            balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n            balances[to] = safeAdd(balances[to], tokens);\r\n            Transfer(msg.sender, to, tokens);\r\n        } else {\r\n            if(balances[msg.sender] > freezeAmount[msg.sender]) {\r\n                require(tokens <= safeSub(balances[msg.sender], freezeAmount[msg.sender]));\r\n                balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n                balances[to] = safeAdd(balances[to], tokens);\r\n                Transfer(msg.sender, to, tokens);\r\n            }\r\n        }\r\n            \r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        require(freezed[msg.sender] != true);\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer tokens from the from account to the to account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the from account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        require(freezed[msg.sender] != true);\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account. The spender contract function\r\n    // receiveApproval(...) is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        require(freezed[msg.sender] != true);\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Freeze Tokens\r\n    // ------------------------------------------------------------------------\r\n    function freeze(address user, uint amount, uint period) public onlyOwner {\r\n        require(balances[user] >= amount);\r\n        freezed[user] = true;\r\n        unlockTime[user] = uint(now) + period;\r\n        freezeAmount[user] = amount;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // UnFreeze Tokens\r\n    // ------------------------------------------------------------------------\r\n    function unFreeze() public {\r\n        require(freezed[msg.sender] == true);\r\n        require(unlockTime[msg.sender] < uint(now));\r\n        freezed[msg.sender] = false;\r\n        freezeAmount[msg.sender] = 0;\r\n    }\r\n    \r\n    function ifFreeze(address user) public view returns (\r\n        bool check, \r\n        uint amount, \r\n        uint timeLeft\r\n    ) {\r\n        check = freezed[user];\r\n        amount = freezeAmount[user];\r\n        timeLeft = unlockTime[user] - uint(now);\r\n    }\r\n    \r\n    function _mine(uint _amount) internal {\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], _amount);\r\n        minePool = safeSub(minePool, _amount);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}\r\n\r\ncontract AnnoConsensus is AnnoToken {\r\n    event MembershipUpdate(address indexed member, uint indexed level);\r\n    event MembershipCancel(address indexed member);\r\n    event AnnoTradeCreated(uint indexed tradeId, bool indexed ifMedal, uint medal, uint token);\r\n    event TradeCancel(uint indexed tradeId);\r\n    event TradeComplete(uint indexed tradeId, address indexed buyer, address indexed seller, uint medal, uint token);\r\n    event Mine(address indexed miner, uint indexed salary);\r\n    \r\n    mapping (address => uint) MemberToLevel;\r\n    mapping (address => uint) MemberToMedal;\r\n    mapping (address => uint) MemberToToken;\r\n    mapping (address => uint) MemberToTime;\r\n    \r\n    uint public period = 14 days;\r\n    \r\n    uint[5] public boardMember =[\r\n        0,\r\n        500,\r\n        2500,\r\n        25000,\r\n        50000\r\n    ];\r\n    \r\n    uint[5] public salary = [\r\n        0,\r\n        1151000000000000000000,\r\n        5753000000000000000000,\r\n        57534000000000000000000,\r\n        115068000000000000000000\r\n    ];\r\n    \r\n    struct AnnoTrade {\r\n        address seller;\r\n        bool ifMedal;\r\n        uint medal;\r\n        uint token;\r\n    }\r\n    \r\n    AnnoTrade[] annoTrades;\r\n    \r\n    function boardMemberApply(uint _level) public {\r\n        require(medalBalances[msg.sender] >= boardMember[_level]);\r\n        _medalFreeze(boardMember[_level]);\r\n        MemberToLevel[msg.sender] = _level;\r\n        \r\n        MembershipUpdate(msg.sender, _level);\r\n    }\r\n    \r\n    function getBoardMember(address _member) public view returns (uint) {\r\n        return MemberToLevel[_member];\r\n    }\r\n    \r\n    function boardMemberCancel() public {\r\n        require(medalBalances[msg.sender] > 0);\r\n        _medalUnFreeze();\r\n        \r\n        MemberToLevel[msg.sender] = 0;\r\n        MembershipCancel(msg.sender);\r\n    }\r\n    \r\n    function createAnnoTrade(bool _ifMedal, uint _medal, uint _token) public returns (uint) {\r\n        if(_ifMedal) {\r\n            require(medalBalances[msg.sender] >= _medal);\r\n            medalBalances[msg.sender] = safeSub(medalBalances[msg.sender], _medal);\r\n            MemberToMedal[msg.sender] = _medal;\r\n            AnnoTrade memory anno = AnnoTrade({\r\n               seller: msg.sender,\r\n               ifMedal:_ifMedal,\r\n               medal: _medal,\r\n               token: _token\r\n            });\r\n            uint newMedalTradeId = annoTrades.push(anno) - 1;\r\n            AnnoTradeCreated(newMedalTradeId, _ifMedal, _medal, _token);\r\n            \r\n            return newMedalTradeId;\r\n        } else {\r\n            require(balances[msg.sender] >= _token);\r\n            balances[msg.sender] = safeSub(balances[msg.sender], _token);\r\n            MemberToToken[msg.sender] = _token;\r\n            AnnoTrade memory _anno = AnnoTrade({\r\n               seller: msg.sender,\r\n               ifMedal:_ifMedal,\r\n               medal: _medal,\r\n               token: _token\r\n            });\r\n            uint newTokenTradeId = annoTrades.push(_anno) - 1;\r\n            AnnoTradeCreated(newTokenTradeId, _ifMedal, _medal, _token);\r\n            \r\n            return newTokenTradeId;\r\n        }\r\n    }\r\n    \r\n    function cancelTrade(uint _tradeId) public {\r\n        AnnoTrade memory anno = annoTrades[_tradeId];\r\n        require(anno.seller == msg.sender);\r\n        if(anno.ifMedal){\r\n            medalBalances[msg.sender] = safeAdd(medalBalances[msg.sender], anno.medal);\r\n            MemberToMedal[msg.sender] = 0;\r\n        } else {\r\n            balances[msg.sender] = safeAdd(balances[msg.sender], anno.token);\r\n            MemberToToken[msg.sender] = 0;\r\n        }\r\n        delete annoTrades[_tradeId];\r\n        TradeCancel(_tradeId);\r\n    }\r\n    \r\n    function trade(uint _tradeId) public {\r\n        AnnoTrade memory anno = annoTrades[_tradeId];\r\n        if(anno.ifMedal){\r\n            medalBalances[msg.sender] = safeAdd(medalBalances[msg.sender], anno.medal);\r\n            MemberToMedal[anno.seller] = 0;\r\n            transfer(anno.seller, anno.token);\r\n            delete annoTrades[_tradeId];\r\n            TradeComplete(_tradeId, msg.sender, anno.seller, anno.medal, anno.token);\r\n        } else {\r\n            balances[msg.sender] = safeAdd(balances[msg.sender], anno.token);\r\n            MemberToToken[anno.seller] = 0;\r\n            medalTransfer(anno.seller, anno.medal);\r\n            delete annoTrades[_tradeId];\r\n            TradeComplete(_tradeId, msg.sender, anno.seller, anno.medal, anno.token);\r\n        }\r\n    }\r\n    \r\n    function mine() public {\r\n        uint level = MemberToLevel[msg.sender];\r\n        require(MemberToTime[msg.sender] < uint(now)); \r\n        require(minePool >= salary[level]);\r\n        require(level > 0);\r\n        _mine(salary[level]);\r\n        minePool = safeSub(minePool, salary[level]);\r\n        MemberToTime[msg.sender] = safeAdd(MemberToTime[msg.sender], period);\r\n        Mine(msg.sender, salary[level]);\r\n    }\r\n    \r\n    function setSalary(uint one, uint two, uint three, uint four) public onlyOwner {\r\n        salary[1] = one;\r\n        salary[2] = two;\r\n        salary[3] = three;\r\n        salary[4] = four;\r\n    }\r\n    \r\n    function getTrade(uint _tradeId) public view returns (\r\n        address seller,\r\n        bool ifMedal,\r\n        uint medal,\r\n        uint token \r\n    ) {\r\n        AnnoTrade memory _anno = annoTrades[_tradeId];\r\n        seller = _anno.seller;\r\n        ifMedal = _anno.ifMedal;\r\n        medal = _anno.medal;\r\n        token = _anno.token;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"one\",\"type\":\"uint256\"},{\"name\":\"two\",\"type\":\"uint256\"},{\"name\":\"three\",\"type\":\"uint256\"},{\"name\":\"four\",\"type\":\"uint256\"}],\"name\":\"setSalary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"boardMemberApply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeId\",\"type\":\"uint256\"}],\"name\":\"cancelTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_medalTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintMedal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"medalTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"medalName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tradeId\",\"type\":\"uint256\"}],\"name\":\"getTrade\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"ifMedal\",\"type\":\"bool\"},{\"name\":\"medal\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnMedal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"medalDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"getBoardMember\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ifFreeze\",\"outputs\":[{\"name\":\"check\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"boardMemberCancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boardMember\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"medalIfFreeze\",\"outputs\":[{\"name\":\"check\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"medalFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"mentalBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"salary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ifMedal\",\"type\":\"bool\"},{\"name\":\"_medal\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"createAnnoTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"medalUnFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"medalSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeId\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"medalTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"MembershipUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MembershipCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ifMedal\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"medal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"AnnoTradeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeId\",\"type\":\"uint256\"}],\"name\":\"TradeCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"medal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"TradeComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"salary\",\"type\":\"uint256\"}],\"name\":\"Mine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"MedalTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AnnoConsensus","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f52918ac484198257ec12e970cdca68d5ee7e6a1415f933678e2d568740b5a8a"}]}