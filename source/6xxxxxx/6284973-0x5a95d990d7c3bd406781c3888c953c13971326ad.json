{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n  constructor() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract Operatable is Ownable {\r\n\r\n    address public operator;\r\n\r\n    event LogOperatorChanged(address indexed from, address indexed to);\r\n\r\n    modifier isValidOperator(address _operator) {\r\n        require(_operator != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator);\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner, address _operator) public isValidOperator(_operator) {\r\n        require(_owner != address(0));\r\n        \r\n        owner = _owner;\r\n        operator = _operator;\r\n    }\r\n\r\n    function setOperator(address _operator) public onlyOwner isValidOperator(_operator) {\r\n        emit LogOperatorChanged(operator, _operator);\r\n        operator = _operator;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the \r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\ncontract CryptoTakeoversNFT is ERC721Token(\"CryptoTakeoversNFT\",\"\"), Operatable {\r\n    \r\n    event LogGameOperatorChanged(address indexed from, address indexed to);\r\n\r\n    address public gameOperator;\r\n\r\n    modifier onlyGameOperator() {\r\n        assert(gameOperator != address(0));\r\n        require(msg.sender == gameOperator);\r\n        _;\r\n    }\r\n\r\n    constructor (address _owner, address _operator) Operatable(_owner, _operator) public {\r\n    }\r\n\r\n    function mint(uint256 _tokenId, string _tokenURI) public onlyGameOperator {\r\n        super._mint(operator, _tokenId);\r\n        super._setTokenURI(_tokenId, _tokenURI);\r\n    }\r\n\r\n    function hostileTakeover(address _to, uint256 _tokenId) public onlyGameOperator {\r\n        address tokenOwner = super.ownerOf(_tokenId);\r\n        operatorApprovals[tokenOwner][gameOperator] = true;\r\n        super.safeTransferFrom(tokenOwner, _to, _tokenId);\r\n    }\r\n\r\n    function setGameOperator(address _gameOperator) public onlyOperator {\r\n        emit LogGameOperatorChanged(gameOperator, _gameOperator);\r\n        gameOperator = _gameOperator;\r\n    }\r\n\r\n    function burn(uint256 _tokenId) public onlyGameOperator {\r\n        super._burn(operator, _tokenId);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/// @title CryptoTakeovers In-Game Token.\r\n/// @dev The token used in the game to participate in NFT airdrop raffles.\r\n/// @author Ido Amram <ido@cryptotakeovers.com>, Elad Mallel <elad@cryptotakeovers.com>\r\ncontract CryptoTakeoversToken is MintableToken, Operatable {\r\n\r\n    /*\r\n     * Events\r\n     */\r\n\r\n    event LogGameOperatorChanged(address indexed from, address indexed to);\r\n    event LogShouldBlockPublicTradeSet(bool value, address indexed owner);\r\n\r\n    /*\r\n     * Storage\r\n     */\r\n\r\n    bool public shouldBlockPublicTrade;\r\n    address public gameOperator;\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier hasMintPermission() {\r\n        require(msg.sender == operator || (gameOperator != address(0) && msg.sender == gameOperator));\r\n        _;\r\n    }\r\n\r\n    modifier hasTradePermission(address _from) {\r\n        require(_from == operator || !shouldBlockPublicTrade);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Public (unauthorized) functions\r\n     */\r\n\r\n    /// @dev CryptoTakeoversToken constructor.\r\n    /// @param _owner the address of the owner to set for this contract\r\n    /// @param _operator the address ofh the operator to set for this contract\r\n    constructor (address _owner, address _operator) Operatable(_owner, _operator) public {\r\n        shouldBlockPublicTrade = true;\r\n    }\r\n\r\n    /*\r\n     * Operator (authorized) functions\r\n     */\r\n\r\n    /// @dev Allows an authorized set of accounts to transfer tokens.\r\n    /// @param _to the account to transfer tokens to\r\n    /// @param _value the amount of tokens to transfer\r\n    /// @return true if the transfer succeeded, and false otherwise\r\n    function transfer(address _to, uint256 _value) public hasTradePermission(msg.sender) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /// @dev Allows an authorized set of accounts to transfer tokens.\r\n    /// @param _from the account from which to transfer tokens\r\n    /// @param _to the account to transfer tokens to\r\n    /// @param _value the amount of tokens to transfer\r\n    /// @return true if the transfer succeeded, and false otherwise\r\n    function transferFrom(address _from, address _to, uint256 _value) public hasTradePermission(_from) returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /// @dev Allows the operator to set the address of the game operator, which should be the pre-sale contract or the game contract.\r\n    /// @param _gameOperator the address of the game operator\r\n    function setGameOperator(address _gameOperator) public onlyOperator {\r\n        require(_gameOperator != address(0));\r\n\r\n        emit LogGameOperatorChanged(gameOperator, _gameOperator);\r\n\r\n        gameOperator = _gameOperator;\r\n    }\r\n\r\n    /*\r\n     * Owner (authorized) functions\r\n     */\r\n\r\n    /// @dev Allows the owner to enable or restrict open trade of tokens.\r\n    /// @param _shouldBlockPublicTrade true if trade should be restricted, and false to open trade\r\n    function setShouldBlockPublicTrade(bool _shouldBlockPublicTrade) public onlyOwner {\r\n        shouldBlockPublicTrade = _shouldBlockPublicTrade;\r\n\r\n        emit LogShouldBlockPublicTradeSet(_shouldBlockPublicTrade, owner);\r\n    }\r\n}\r\n\r\n/// @title CryptoTakeovers PreSale.\r\n/// @dev Manages the sale of in-game assets (cities and countries) and tokens.\r\n/// @author Ido Amram <ido@cryptotakeovers.com>, Elad Mallel <elad@cryptotakeovers.com>\r\ncontract CryptoTakeoversPresale is Destructible, Pausable, Operatable {\r\n\r\n    /*\r\n     * Events\r\n     */\r\n\r\n    event LogNFTBought(uint256 indexed tokenId, address indexed buyer, uint256 value);\r\n    event LogTokensBought(address indexed buyer, uint256 amount, uint256 value);\r\n    event LogNFTGifted(address indexed to, uint256 indexed tokenId, uint256 price, address indexed operator);\r\n    event LogTokensGifted(address indexed to, uint256 amount, address indexed operator);\r\n    event LogNFTBurned(uint256 indexed tokenId, address indexed operator);\r\n    event LogTokenPricesSet(\r\n        uint256[] previousThresholds, \r\n        uint256[] previousPrices, \r\n        uint256[] newThresholds, \r\n        uint256[] newPrices, \r\n        address indexed operator);\r\n    event LogNFTMintedNotForSale(uint256 indexed tokenId, address indexed operator);\r\n    event LogNFTMintedForSale(uint256 indexed tokenId, uint256 tokenPrice, address indexed operator);\r\n    event LogNFTSetNotForSale(uint256 indexed tokenId, address indexed operator);\r\n    event LogNFTSetForSale(uint256 indexed tokenId, uint256 tokenPrice, address indexed operator);\r\n    event LogDiscountSet(uint256 indexed tokenId, uint256 discountPrice, address indexed operator);\r\n    event LogDiscountUpdated(uint256 indexed tokenId, uint256 discountPrice, address indexed operator);\r\n    event LogDiscountRemoved(uint256 indexed tokenId, address indexed operator);\r\n    event LogDiscountsReset(uint256 count, address indexed operator);\r\n    event LogStartAndEndTimeSet(uint256 startTime, uint256 endTime, address indexed operator);\r\n    event LogStartTimeSet(uint256 startTime, address indexed operator);\r\n    event LogEndTimeSet(uint256 endTime, address indexed operator);\r\n    event LogTokensContractSet(address indexed previousAddress, address indexed newAddress, address indexed owner);\r\n    event LogItemsContractSet(address indexed previousAddress, address indexed newAddress, address indexed owner);\r\n    event LogWithdrawToChanged(address indexed previousAddress, address indexed newAddress, address indexed owner);\r\n    event LogWithdraw(address indexed withdrawTo, uint256 value, address indexed owner);\r\n\r\n    /*\r\n     * Storage\r\n     */\r\n\r\n    using SafeMath for uint256;\r\n\r\n    CryptoTakeoversNFT public items;\r\n    CryptoTakeoversToken public tokens;\r\n\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    address public withdrawTo;\r\n    \r\n    mapping (uint256 => uint256) tokenPrices;\r\n    uint256[] public itemsForSale;\r\n    mapping (uint256 => uint256) itemsForSaleIndex;\r\n    mapping (uint256 => uint256) discountedItemPrices;\r\n    uint256[] public discountedItems;\r\n    mapping (uint256 => uint256) discountedItemsIndex;\r\n\r\n    uint256[] public tokenDiscountThresholds;\r\n    uint256[] public tokenDiscountedPrices;\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier onlyDuringPresale() {\r\n        require(startTime != 0 && endTime != 0);\r\n        require(now >= startTime);\r\n        require(now <= endTime);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Public (unauthorized) functions\r\n     */\r\n\r\n    /// @dev CryptoTakeoversPresale constructor.\r\n    /// @param _owner the account with owner permissions\r\n    /// @param _operator the admin of the pre-sale, who can start and stop the sale, and mint items for sale\r\n    /// @param _cryptoTakeoversNFTAddress the address of the ERC721 game tokens, representing cities and countries\r\n    /// @param _cryptoTakeoversTokenAddress the address of the in-game fungible tokens, which grant their owners\r\n    /// the chance to win NFT assets in airdrops the team will perform periodically\r\n    constructor (\r\n        address _owner,\r\n        address _operator, \r\n        address _cryptoTakeoversNFTAddress, \r\n        address _cryptoTakeoversTokenAddress\r\n    ) \r\n        Operatable(_owner, _operator) \r\n        public \r\n    {\r\n        items = CryptoTakeoversNFT(_cryptoTakeoversNFTAddress);\r\n        tokens = CryptoTakeoversToken(_cryptoTakeoversTokenAddress);\r\n        withdrawTo = owner;\r\n    }\r\n\r\n    /// @dev Allows anyone to buy an asset during the pre-sale.\r\n    /// @param _tokenId the ID of the asset to buy\r\n    function buyNFT(uint256 _tokenId) public payable onlyDuringPresale whenNotPaused {\r\n        require(msg.value == _getItemPrice(_tokenId), \"value sent must equal the price\");\r\n    \r\n        _setItemNotForSale(_tokenId);\r\n\r\n        items.hostileTakeover(msg.sender, _tokenId);\r\n\r\n        emit LogNFTBought(_tokenId, msg.sender, msg.value);\r\n    }\r\n\r\n    /// @dev Allows anyone to buy tokens during the pre-sale.\r\n    /// @param _amount the amount of tokens to buy\r\n    function buyTokens(uint256 _amount) public payable onlyDuringPresale whenNotPaused {\r\n        require(tokenDiscountedPrices.length > 0, \"prices should be set before selling tokens\");\r\n        uint256 priceToUse = tokenDiscountedPrices[0];\r\n        for (uint256 index = 1; index < tokenDiscountedPrices.length; index++) {\r\n            if (_amount >= tokenDiscountThresholds[index]) {\r\n                priceToUse = tokenDiscountedPrices[index];\r\n            }\r\n        }\r\n        require(msg.value == _amount.mul(priceToUse), \"we only accept exact payment\");\r\n\r\n        tokens.mint(msg.sender, _amount);\r\n\r\n        emit LogTokensBought(msg.sender, _amount, msg.value);\r\n    }\r\n\r\n    /// @dev Returns the details of a CryptoTakeovers asset.\r\n    /// @param _tokenId the ID of the asset\r\n    /// @return tokenId the ID of the asset\r\n    /// @return owner the address of the asset's owner\r\n    /// @return tokenURI the URI of the asset's metadata\r\n    /// @return price the asset\r\n    /// @return forSale a bool indicating if the asset is up for sale or not\r\n    function getItem(uint256 _tokenId) external view \r\n        returns(uint256 tokenId, address owner, string tokenURI, uint256 price, uint256 discountedPrice, bool forSale, bool discounted) {\r\n        tokenId = _tokenId;\r\n        owner = items.ownerOf(_tokenId);\r\n        tokenURI = items.tokenURI(_tokenId);\r\n        price = tokenPrices[_tokenId];\r\n        discountedPrice = discountedItemPrices[_tokenId];\r\n        forSale = isTokenForSale(_tokenId);\r\n        discounted = _isTokenDiscounted(_tokenId);\r\n    }\r\n\r\n    /// @dev Returns the details of up to 20 assets in one call. Acts as a performance optimization for getItem.\r\n    /// @param _fromIndex the index of the first asset to return (inclusive)\r\n    /// @param _toIndex the index of the last asset to return (exclusive. use the array's length value to get the last asset)\r\n    /// @return ids the IDs of  the requested assets\r\n    /// @return owners the addresses of the owners of the requested assets\r\n    /// @return prices the prices of the requested assets\r\n    function getItemsForSale(uint256 _fromIndex, uint256 _toIndex) public view \r\n        returns(uint256[20] ids, address[20] owners, uint256[20] prices, uint256[20] discountedPrices) {\r\n        require(_toIndex <= itemsForSale.length);\r\n        require(_fromIndex < _toIndex);\r\n        require(_toIndex.sub(_fromIndex) <= ids.length);\r\n\r\n        uint256 resultIndex = 0;\r\n        for (uint256 index = _fromIndex; index < _toIndex; index++) {\r\n            uint256 tokenId = itemsForSale[index];\r\n            ids[resultIndex] = tokenId;\r\n            owners[resultIndex] = items.ownerOf(tokenId);\r\n            prices[resultIndex] = tokenPrices[tokenId];\r\n            discountedPrices[resultIndex] = discountedItemPrices[tokenId];\r\n            resultIndex = resultIndex.add(1);\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the details of up to 20 items that have been set with a discounted price.\r\n    /// @param _fromIndex the index of the first item to get (inclusive)\r\n    /// @param _toIndex the index of the last item to get (exclusive)\r\n    /// @return ids the IDs of the requested items\r\n    /// @return owners the owners of the requested items\r\n    /// @return prices the prices of the requested items\r\n    /// @return discountedPrices the discounted prices of the requested items\r\n    function getDiscountedItemsForSale(uint256 _fromIndex, uint256 _toIndex) public view \r\n        returns(uint256[20] ids, address[20] owners, uint256[20] prices, uint256[20] discountedPrices) {\r\n        require(_toIndex <= discountedItems.length, \"toIndex out of bounds\");\r\n        require(_fromIndex < _toIndex, \"fromIndex must be less than toIndex\");\r\n        require(_toIndex.sub(_fromIndex) <= ids.length, \"requested range cannot exceed 20 items\");\r\n        \r\n        uint256 resultIndex = 0;\r\n        for (uint256 index = _fromIndex; index < _toIndex; index++) {\r\n            uint256 tokenId = discountedItems[index];\r\n            ids[resultIndex] = tokenId;\r\n            owners[resultIndex] = items.ownerOf(tokenId);\r\n            prices[resultIndex] = tokenPrices[tokenId];\r\n            discountedPrices[resultIndex] = discountedItemPrices[tokenId];\r\n            resultIndex = resultIndex.add(1);\r\n        }\r\n    }\r\n\r\n    /// @dev Returns whether a specific asset is for sale.\r\n    /// @param _tokenId the ID of the asset\r\n    /// @return true if the asset is for sale, and false otherwise\r\n    function isTokenForSale(uint256 _tokenId) internal view returns(bool) {\r\n        return tokenPrices[_tokenId] != 0;\r\n    }\r\n\r\n    /// @dev Returns the total number of assets for sale.\r\n    /// @return the total number of assets for sale\r\n    function totalItemsForSale() public view returns(uint256) {\r\n        return itemsForSale.length;\r\n    }\r\n\r\n    /// @dev Returns the number of assets for the provided account.\r\n    /// @return the number of assets owner owns\r\n    function NFTBalanceOf(address _owner) public view returns (uint256) {\r\n        return items.balanceOf(_owner);\r\n    }\r\n\r\n    /// @dev Returns up to 20 IDs of assets for the provided account.\r\n    /// @return an array of tokenIDs\r\n    function tokenOfOwnerByRange(address _owner, uint256 _fromIndex, uint256 _toIndex) public view returns(uint256[20] ids) {\r\n        require(_toIndex <= items.balanceOf(_owner));\r\n        require(_fromIndex < _toIndex);\r\n        require(_toIndex.sub(_fromIndex) <= ids.length);\r\n\r\n        uint256 resultIndex = 0;\r\n        for (uint256 index = _fromIndex; index < _toIndex; index++) {\r\n            ids[resultIndex] = items.tokenOfOwnerByIndex(_owner, index);\r\n            resultIndex = resultIndex.add(1);\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the token balance of the provided account.\r\n    /// @return the number of tokens owner owns\r\n    function tokenBalanceOf(address _owner) public view returns (uint256) {\r\n        return tokens.balanceOf(_owner);\r\n    }\r\n\r\n    /// @dev Returns the total number of assets with a discounted price.\r\n    /// @return the number of items set with a discounted price\r\n    function totalDiscountedItemsForSale() public view returns (uint256) {\r\n        return discountedItems.length;\r\n    }\r\n\r\n    /*\r\n     * Operator (authorized) functions\r\n     */\r\n\r\n    /// @dev Allows the operator to give assets without payment. Will be used to perform asset airdrops.\r\n    /// Only works on items that have not been sold yet.\r\n    /// @param _to the address to give the asset to\r\n    /// @param _tokenId the ID of the asset to give\r\n    /// @param _tokenPrice the price of the gifted token\r\n    function giftNFT(address _to, uint256 _tokenId, uint256 _tokenPrice) public onlyOperator {\r\n        require(_to != address(0));\r\n        require(items.ownerOf(_tokenId) == operator);\r\n        require(_tokenPrice > 0, \"must provide the token price to log\");\r\n\r\n        if (isTokenForSale(_tokenId)) {\r\n            _setItemNotForSale(_tokenId);\r\n        }\r\n\r\n        items.hostileTakeover(_to, _tokenId);\r\n\r\n        emit LogNFTGifted(_to, _tokenId, _tokenPrice, operator);\r\n    }\r\n\r\n    /// @dev Allows the operator to give tokens without payment. Will be used to perform token airdrops.\r\n    /// @param _to the address to give tokens to (cannot be 0x0)\r\n    /// @param _amount the amount of tokens to mint and give\r\n    function giftTokens(address _to, uint256 _amount) public onlyOperator {\r\n        require(_to != address(0));\r\n        require(_amount > 0);\r\n        \r\n        tokens.mint(_to, _amount);\r\n\r\n        emit LogTokensGifted(_to, _amount, operator);\r\n    }\r\n\r\n    /// @dev Allows the operator to burn an item in case of any errors in setting up the items for sale.\r\n    /// It uses items.burn which makes sure it only works for items we haven't sold yet (i.e. only works\r\n    /// for items owned by the operator).\r\n    /// @param _tokenId the ID of the asset to burn\r\n    function burnNFT(uint256 _tokenId) public onlyOperator {\r\n        if (isTokenForSale(_tokenId)) {\r\n            _setItemNotForSale(_tokenId);\r\n        }\r\n        \r\n        items.burn(_tokenId);\r\n\r\n        emit LogNFTBurned(_tokenId, operator);\r\n    }\r\n\r\n    /// @dev Allows the operator to set the discounted prices of tokens per threshold of purchased amount.\r\n    /// @param _tokenDiscountThresholds an array of token quantity thresholds. Cannot contain more than 10 items\r\n    /// @param _tokenDiscountedPrices an array of token prices to match each quantity threshold. Cannot contain more than 10 items\r\n    function setTokenPrices(uint256[] _tokenDiscountThresholds, uint256[] _tokenDiscountedPrices) public onlyOperator {\r\n        require(_tokenDiscountThresholds.length <= 10, \"inputs length must be under 10 options\");\r\n        require(_tokenDiscountThresholds.length == _tokenDiscountedPrices.length, \"input arrays must have the same length\");\r\n\r\n        emit LogTokenPricesSet(tokenDiscountThresholds, tokenDiscountedPrices, _tokenDiscountThresholds, _tokenDiscountedPrices, operator);\r\n\r\n        tokenDiscountThresholds = _tokenDiscountThresholds;\r\n        tokenDiscountedPrices = _tokenDiscountedPrices;\r\n    }\r\n\r\n    /// @dev Returns the discount thresholds and prices that match those thresholds in two arrays.\r\n    /// @return discountThresholds an array of discount thresholds\r\n    /// @return discountedPrices an array of token prices per threshold\r\n    function getTokenPrices() public view returns(uint256[10] discountThresholds, uint256[10] discountedPrices) {\r\n        for (uint256 index = 0; index < tokenDiscountThresholds.length; index++) {\r\n            discountThresholds[index] = tokenDiscountThresholds[index];\r\n            discountedPrices[index] = tokenDiscountedPrices[index];\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the operator to create an asset but not put it up for sale yet.\r\n    /// @param _tokenId the ID of the asset to mint\r\n    /// @param _tokenURI the URI of the asset's metadata\r\n    function mintNFTNotForSale(uint256 _tokenId, string _tokenURI) public onlyOperator {\r\n        items.mint(_tokenId, _tokenURI);\r\n\r\n        emit LogNFTMintedNotForSale(_tokenId, operator);\r\n    }\r\n\r\n    /// @dev A bulk optimization for mintNFTNotForSale\r\n    /// @param _tokenIds the IDs of the tokens to mint\r\n    /// @param _tokenURIParts parts of the base URI, e.g. [\"https://\", \"host.com\", \"/path\"]\r\n    function mintNFTsNotForSale(uint256[] _tokenIds, bytes32[] _tokenURIParts) public onlyOperator {\r\n        require(_tokenURIParts.length > 0, \"need at least one string to build URIs\");\r\n\r\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            uint256 tokenId = _tokenIds[index];\r\n            string memory tokenURI = _generateTokenURI(_tokenURIParts, tokenId);\r\n\r\n            mintNFTNotForSale(tokenId, tokenURI);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the operator to create an asset and immediately put it up for sale.\r\n    /// @param _tokenId the ID of the asset to mint\r\n    /// @param _tokenURI the URI of the asset's metadata\r\n    /// @param _tokenPrice the price of the asset\r\n    function mintNFTForSale(uint256 _tokenId, string _tokenURI, uint256 _tokenPrice) public onlyOperator {\r\n        tokenPrices[_tokenId] = _tokenPrice;\r\n        itemsForSaleIndex[_tokenId] = itemsForSale.push(_tokenId).sub(1);\r\n        items.mint(_tokenId, _tokenURI);\r\n\r\n        emit LogNFTMintedForSale(_tokenId, _tokenPrice, operator);\r\n    }\r\n\r\n    /// @dev A bulk optimization for mintNFTForSale\r\n    /// @param _tokenIds the IDs for the tokens to mint\r\n    /// @param _tokenURIParts parts of the base URI, e.g. [\"https://\", \"host.com\", \"/path\"]\r\n    /// @param _tokenPrices the prices of the tokens to mint\r\n    function mintNFTsForSale(uint256[] _tokenIds, bytes32[] _tokenURIParts, uint256[] _tokenPrices) public onlyOperator {\r\n        require(_tokenIds.length == _tokenPrices.length, \"ids and prices must have the same length\");\r\n        require(_tokenURIParts.length > 0, \"must have URI parts to build URIs\");\r\n\r\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            uint256 tokenId = _tokenIds[index];\r\n            uint256 tokenPrice = _tokenPrices[index];\r\n            string memory tokenURI = _generateTokenURI(_tokenURIParts, tokenId);\r\n\r\n            mintNFTForSale(tokenId, tokenURI, tokenPrice);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the operator to take an asset that's not up for sale and put it up for sale.\r\n    /// @param _tokenId the ID of the asset\r\n    /// @param _tokenPrice the price of the asset\r\n    function setItemForSale(uint256 _tokenId, uint256 _tokenPrice) public onlyOperator {\r\n        require(items.exists(_tokenId));\r\n        require(!isTokenForSale(_tokenId));\r\n        require(items.ownerOf(_tokenId) == operator, \"cannot set item for sale after it has been sold\");\r\n\r\n        tokenPrices[_tokenId] = _tokenPrice;\r\n        itemsForSaleIndex[_tokenId] = itemsForSale.push(_tokenId).sub(1);\r\n        \r\n        emit LogNFTSetForSale(_tokenId, _tokenPrice, operator);\r\n    }\r\n\r\n    /// @dev A bulk optimization for setItemForSale.\r\n    /// @param _tokenIds an array of IDs of assets to update\r\n    /// @param _tokenPrices an array of prices to set\r\n    function setItemsForSale(uint256[] _tokenIds, uint256[] _tokenPrices) public onlyOperator {\r\n        require(_tokenIds.length == _tokenPrices.length);\r\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            setItemForSale(_tokenIds[index], _tokenPrices[index]);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the operator to take down an item for sale.\r\n    /// @param _tokenId the ID of the asset to take down\r\n    function setItemNotForSale(uint256 _tokenId) public onlyOperator {\r\n        _setItemNotForSale(_tokenId);\r\n\r\n        emit LogNFTSetNotForSale(_tokenId, operator);\r\n    }\r\n\r\n    /// @dev A bulk optimization for setItemNotForSale.\r\n    /// @param _tokenIds an array of IDs of assets to update\r\n    function setItemsNotForSale(uint256[] _tokenIds) public onlyOperator {\r\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            setItemNotForSale(_tokenIds[index]);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the operator to update an asset's price.\r\n    /// @param _tokenId the ID of the asset\r\n    /// @param _tokenPrice the new price to set\r\n    function updateItemPrice(uint256 _tokenId, uint256 _tokenPrice) public onlyOperator {\r\n        require(items.exists(_tokenId));\r\n        require(items.ownerOf(_tokenId) == operator);\r\n        require(isTokenForSale(_tokenId));\r\n        tokenPrices[_tokenId] = _tokenPrice;\r\n    }\r\n\r\n    /// @dev A bulk optimization for updateItemPrice\r\n    /// @param _tokenIds the IDs of tokens to update\r\n    /// @param _tokenPrices the new prices to set\r\n    function updateItemsPrices(uint256[] _tokenIds, uint256[] _tokenPrices) public onlyOperator {\r\n        require(_tokenIds.length == _tokenPrices.length, \"input arrays must have the same length\");\r\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            updateItemPrice(_tokenIds[index], _tokenPrices[index]);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the operator to set discount prices for specific items.\r\n    /// @param _tokenIds the IDs of items to set a discount price for\r\n    /// @param _discountPrices the discount prices to set\r\n    function setDiscounts(uint256[] _tokenIds, uint256[] _discountPrices) public onlyOperator {\r\n        require(_tokenIds.length == _discountPrices.length, \"input arrays must have the same length\");\r\n\r\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            _setDiscount(_tokenIds[index], _discountPrices[index]);    \r\n        }\r\n    }\r\n\r\n    /// @dev Allows the operator to remove the discount from specific items.\r\n    /// @param _tokenIds the IDs of the items to remove the discount from\r\n    function removeDiscounts(uint256[] _tokenIds) public onlyOperator {\r\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            _removeDiscount(_tokenIds[index]);            \r\n        }\r\n    }\r\n\r\n    /// @dev Allows the operator to update discount prices.\r\n    /// @param _tokenIds the IDs of the items to update\r\n    /// @param _discountPrices the new discount prices to set \r\n    function updateDiscounts(uint256[] _tokenIds, uint256[] _discountPrices) public onlyOperator {\r\n        require(_tokenIds.length == _discountPrices.length, \"arrays must be same-length\");\r\n\r\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            _updateDiscount(_tokenIds[index], _discountPrices[index]);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the operator to reset all discounted items at once.\r\n    function resetDiscounts() public onlyOperator {\r\n        emit LogDiscountsReset(discountedItems.length, operator);\r\n\r\n        for (uint256 index = 0; index < discountedItems.length; index++) {\r\n            uint256 tokenId = discountedItems[index];\r\n            discountedItemPrices[tokenId] = 0;\r\n            discountedItemsIndex[tokenId] = 0;            \r\n        }\r\n        discountedItems.length = 0;\r\n    }\r\n\r\n    /// @dev An atomic txn optimization for calling resetDiscounts and then setDiscounts, so we don't have to experience\r\n    /// any moment of not having any items under discount.\r\n    /// @param _tokenIds the IDs of the new items to discount\r\n    /// @param _discountPrices the discounted prices of the new items to discount\r\n    function resetOldAndSetNewDiscounts(uint256[] _tokenIds, uint256[] _discountPrices) public onlyOperator {\r\n        resetDiscounts();\r\n        setDiscounts(_tokenIds, _discountPrices);\r\n    }\r\n\r\n    /// @dev Allows the operator to set the start and end time of the sale. \r\n    /// Before startTime and after endTime no one should be able to buy items from this contract.\r\n    /// @param _startTime the time the pre-sale should start\r\n    /// @param _endTime the time the pre-sale should end\r\n    function setStartAndEndTime(uint256 _startTime, uint256 _endTime) public onlyOperator {\r\n        require(_startTime >= now);\r\n        require(_startTime < _endTime);\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n\r\n        emit LogStartAndEndTimeSet(_startTime, _endTime, operator);\r\n    }\r\n\r\n    function setStartTime(uint256 _startTime) public onlyOperator {\r\n        require(_startTime > 0);\r\n\r\n        startTime = _startTime;\r\n\r\n        emit LogStartTimeSet(_startTime, operator);\r\n    }\r\n\r\n    function setEndTime(uint256 _endTime) public onlyOperator {\r\n        require(_endTime > 0);\r\n\r\n        endTime = _endTime;\r\n\r\n        emit LogEndTimeSet(_endTime, operator);\r\n    }\r\n\r\n    /// @dev Allows the operator to withdraw funds from the sale to the address defined by the owner.\r\n    function withdraw() public onlyOperator {\r\n        require(withdrawTo != address(0));\r\n        uint256 balance = address(this).balance;\r\n        require(address(this).balance > 0);\r\n\r\n        withdrawTo.transfer(balance);\r\n\r\n        emit LogWithdraw(withdrawTo, balance, owner);\r\n    }\r\n\r\n    /*\r\n     * Owner (authorized) functions\r\n     */\r\n\r\n    /// @dev Allows the owner to change the contract representing the tokens. Reserved for emergency bugs only.\r\n    /// Because this is a big deal we hope to avoid ever using it, the operator cannot run it, but only the\r\n    /// owner.\r\n    /// @param _cryptoTakeoversTokenAddress the address of the new contract to use\r\n    function setTokensContract(address _cryptoTakeoversTokenAddress) public onlyOwner {\r\n        emit LogTokensContractSet(tokens, _cryptoTakeoversTokenAddress, owner);\r\n\r\n        tokens = CryptoTakeoversToken(_cryptoTakeoversTokenAddress);\r\n    }\r\n\r\n    /// @dev Allows the owner to change the contract representing the assets. Reserved for emergency bugs only.\r\n    /// Because this is a big deal we hope to avoid ever using it, the operator cannot run it, but only the\r\n    /// owner.\r\n    /// @param _cryptoTakeoversNFTAddress the address of the new contract to use\r\n    function setItemsContract(address _cryptoTakeoversNFTAddress) public onlyOwner {\r\n        emit LogItemsContractSet(items, _cryptoTakeoversNFTAddress, owner);\r\n\r\n        items = CryptoTakeoversNFT(_cryptoTakeoversNFTAddress);\r\n    }\r\n\r\n    /// @dev Allows the owner to change the address to which the operator can withdraw this contract's\r\n    /// ETH balance.\r\n    /// @param _withdrawTo the address future withdraws will go to\r\n    function setWithdrawTo(address _withdrawTo) public onlyOwner {\r\n        require(_withdrawTo != address(0));\r\n\r\n        emit LogWithdrawToChanged(withdrawTo, _withdrawTo, owner);\r\n\r\n        withdrawTo = _withdrawTo;\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n\r\n    /// @dev Marks an asset as not for sale.\r\n    /// @param _tokenId the ID of the item to take down from the sale\r\n    function _setItemNotForSale(uint256 _tokenId) internal {\r\n        require(items.exists(_tokenId));\r\n        require(isTokenForSale(_tokenId));\r\n\r\n        if (_isTokenDiscounted(_tokenId)) {\r\n            _removeDiscount(_tokenId);\r\n        }\r\n\r\n        tokenPrices[_tokenId] = 0;\r\n\r\n        uint256 currentTokenIndex = itemsForSaleIndex[_tokenId];\r\n        uint256 lastTokenIndex = itemsForSale.length.sub(1);\r\n        uint256 lastTokenId = itemsForSale[lastTokenIndex];\r\n\r\n        itemsForSale[currentTokenIndex] = lastTokenId;\r\n        itemsForSale[lastTokenIndex] = 0;\r\n        itemsForSale.length = itemsForSale.length.sub(1);\r\n\r\n        itemsForSaleIndex[_tokenId] = 0;\r\n        itemsForSaleIndex[lastTokenId] = currentTokenIndex;\r\n    }\r\n\r\n    function _appendUintToString(string inStr, uint vInput) internal pure returns (string str) {\r\n        uint v = vInput;\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory inStrb = bytes(inStr);\r\n        bytes memory s = new bytes(inStrb.length + i);\r\n        uint j;\r\n        for (j = 0; j < inStrb.length; j++) {\r\n            s[j] = inStrb[j];\r\n        }\r\n        for (j = 0; j < i; j++) {\r\n            s[j + inStrb.length] = reversed[i - 1 - j];\r\n        }\r\n        str = string(s);\r\n    }\r\n\r\n    function _bytes32ArrayToString(bytes32[] data) internal pure returns (string) {\r\n        bytes memory bytesString = new bytes(data.length * 32);\r\n        uint urlLength;\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            for (uint256 j = 0; j < 32; j++) {\r\n                byte char = byte(bytes32(uint(data[i]) * 2 ** (8 * j)));\r\n                if (char != 0) {\r\n                    bytesString[urlLength] = char;\r\n                    urlLength += 1;\r\n                }\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(urlLength);\r\n        for (i = 0; i < urlLength; i++) {\r\n            bytesStringTrimmed[i] = bytesString[i];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    function _generateTokenURI(bytes32[] _tokenURIParts, uint256 _tokenId) internal pure returns(string tokenURI) {\r\n        string memory baseUrl = _bytes32ArrayToString(_tokenURIParts);\r\n        tokenURI = _appendUintToString(baseUrl, _tokenId);\r\n    }\r\n\r\n    function _setDiscount(uint256 _tokenId, uint256 _discountPrice) internal {\r\n        require(items.exists(_tokenId), \"does not make sense to set a discount for an item that does not exist\");\r\n        require(items.ownerOf(_tokenId) == operator, \"we only change items still owned by us\");\r\n        require(isTokenForSale(_tokenId), \"does not make sense to set a discount for an item not for sale\");\r\n        require(!_isTokenDiscounted(_tokenId), \"cannot discount the same item twice\");\r\n        require(_discountPrice > 0 && _discountPrice < tokenPrices[_tokenId], \"discount price must be positive and less than full price\");\r\n\r\n        discountedItemPrices[_tokenId] = _discountPrice;\r\n        discountedItemsIndex[_tokenId] = discountedItems.push(_tokenId).sub(1);\r\n\r\n        emit LogDiscountSet(_tokenId, _discountPrice, operator);\r\n    }\r\n\r\n    function _updateDiscount(uint256 _tokenId, uint256 _discountPrice) internal {\r\n        require(items.exists(_tokenId), \"item must exist\");\r\n        require(items.ownerOf(_tokenId) == operator, \"we must own the item\");\r\n        require(_isTokenDiscounted(_tokenId), \"must be discounted\");\r\n        require(_discountPrice > 0 && _discountPrice < tokenPrices[_tokenId], \"discount price must be positive and less than full price\");\r\n\r\n        discountedItemPrices[_tokenId] = _discountPrice;\r\n\r\n        emit LogDiscountUpdated(_tokenId, _discountPrice, operator);\r\n    }\r\n\r\n    function _getItemPrice(uint256 _tokenId) internal view returns(uint256) {\r\n        if (_isTokenDiscounted(_tokenId)) {\r\n            return discountedItemPrices[_tokenId];\r\n        }\r\n        return tokenPrices[_tokenId];\r\n    }\r\n\r\n    function _isTokenDiscounted(uint256 _tokenId) internal view returns(bool) {\r\n        return discountedItemPrices[_tokenId] != 0;\r\n    }\r\n\r\n    function _removeDiscount(uint256 _tokenId) internal {\r\n        require(items.exists(_tokenId), \"item must exist\");\r\n        require(_isTokenDiscounted(_tokenId), \"item must be discounted\");\r\n\r\n        discountedItemPrices[_tokenId] = 0;\r\n\r\n        uint256 currentTokenIndex = discountedItemsIndex[_tokenId];\r\n        uint256 lastTokenIndex = discountedItems.length.sub(1);\r\n        uint256 lastTokenId = discountedItems[lastTokenIndex];\r\n\r\n        discountedItems[currentTokenIndex] = lastTokenId;\r\n        discountedItems[lastTokenIndex] = 0;\r\n        discountedItems.length = discountedItems.length.sub(1);\r\n\r\n        discountedItemsIndex[_tokenId] = 0;\r\n        discountedItemsIndex[lastTokenId] = currentTokenIndex;\r\n\r\n        emit LogDiscountRemoved(_tokenId, operator);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_fromIndex\",\"type\":\"uint256\"},{\"name\":\"_toIndex\",\"type\":\"uint256\"}],\"name\":\"getDiscountedItemsForSale\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[20]\"},{\"name\":\"owners\",\"type\":\"address[20]\"},{\"name\":\"prices\",\"type\":\"uint256[20]\"},{\"name\":\"discountedPrices\",\"type\":\"uint256[20]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_tokenPrices\",\"type\":\"uint256[]\"}],\"name\":\"setItemsForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemsForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fromIndex\",\"type\":\"uint256\"},{\"name\":\"_toIndex\",\"type\":\"uint256\"}],\"name\":\"getItemsForSale\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[20]\"},{\"name\":\"owners\",\"type\":\"address[20]\"},{\"name\":\"prices\",\"type\":\"uint256[20]\"},{\"name\":\"discountedPrices\",\"type\":\"uint256[20]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"updateItemPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burnNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getItem\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"tokenURI\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"discountedPrice\",\"type\":\"uint256\"},{\"name\":\"forSale\",\"type\":\"bool\"},{\"name\":\"discounted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_discountPrices\",\"type\":\"uint256[]\"}],\"name\":\"resetOldAndSetNewDiscounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"giftNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_tokenURIParts\",\"type\":\"bytes32[]\"},{\"name\":\"_tokenPrices\",\"type\":\"uint256[]\"}],\"name\":\"mintNFTsForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"setItemsNotForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"NFTBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetDiscounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"removeDiscounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cryptoTakeoversTokenAddress\",\"type\":\"address\"}],\"name\":\"setTokensContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawTo\",\"type\":\"address\"}],\"name\":\"setWithdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenDiscountedPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"discountedItems\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setStartAndEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setItemNotForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_tokenURIParts\",\"type\":\"bytes32[]\"}],\"name\":\"mintNFTsNotForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cryptoTakeoversNFTAddress\",\"type\":\"address\"}],\"name\":\"setItemsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDiscountedItemsForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"mintNFTForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPrices\",\"outputs\":[{\"name\":\"discountThresholds\",\"type\":\"uint256[10]\"},{\"name\":\"discountedPrices\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setItemForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_fromIndex\",\"type\":\"uint256\"},{\"name\":\"_toIndex\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByRange\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[20]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"items\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"giftTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_discountPrices\",\"type\":\"uint256[]\"}],\"name\":\"setDiscounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mintNFTNotForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_tokenPrices\",\"type\":\"uint256[]\"}],\"name\":\"updateItemsPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_discountPrices\",\"type\":\"uint256[]\"}],\"name\":\"updateDiscounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalItemsForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenDiscountThresholds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenDiscountThresholds\",\"type\":\"uint256[]\"},{\"name\":\"_tokenDiscountedPrices\",\"type\":\"uint256[]\"}],\"name\":\"setTokenPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_cryptoTakeoversNFTAddress\",\"type\":\"address\"},{\"name\":\"_cryptoTakeoversTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogNFTBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogTokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogNFTGifted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogTokensGifted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogNFTBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousThresholds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"previousPrices\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"newThresholds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"newPrices\",\"type\":\"uint256[]\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogTokenPricesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogNFTMintedNotForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogNFTMintedForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogNFTSetNotForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogNFTSetForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"discountPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogDiscountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"discountPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogDiscountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogDiscountRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogDiscountsReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogStartAndEndTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogEndTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogTokensContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogItemsContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogWithdrawToChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"withdrawTo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"LogOperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoTakeoversPresale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d908d2f68ebb2ebe5c88c7be3a3ac1570c81e5b9000000000000000000000000d0c6824e25ae666664967727b0e1e041b6c4e9a8000000000000000000000000a046a559c8aceebd24ceb54e4c0cd310347e97d2000000000000000000000000a9422a3e6fb02edc3b3188e70e348d77a06d67c6","Library":"","SwarmSource":"bzzr://7acab909cfaef4d7dda776da3871595b5a39e04191edd8c3b2dd398d17ce7c6f"}]}