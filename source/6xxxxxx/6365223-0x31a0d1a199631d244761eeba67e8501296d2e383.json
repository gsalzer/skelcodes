{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Eliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using their signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes sig)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * toEthSignedMessageHash\r\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n   * and hash the result\r\n   */\r\n  function toEthSignedMessageHash(bytes32 hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return keccak256(\r\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\r\n    );\r\n  }\r\n}\r\n\r\nlibrary Utils {\r\n\r\n    /**\r\n     * @notice Converts a number to its string/bytes representation\r\n     *\r\n     * @param _v the uint to convert\r\n     */\r\n    function uintToBytes(uint256 _v) internal pure returns (bytes) {\r\n        uint256 v = _v;\r\n        if (v == 0) {\r\n            return \"0\";\r\n        }\r\n\r\n        uint256 digits = 0;\r\n        uint256 v2 = v;\r\n        while (v2 > 0) {\r\n            v2 /= 10;\r\n            digits += 1;\r\n        }\r\n\r\n        bytes memory result = new bytes(digits);\r\n\r\n        for (uint256 i = 0; i < digits; i++) {\r\n            result[digits - i - 1] = bytes1((v % 10) + 48);\r\n            v /= 10;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the address from a signature\r\n     *\r\n     * @param _hash the message that was signed (any length of bytes)\r\n     * @param _signature the signature (65 bytes)\r\n     */\r\n    function addr(bytes _hash, bytes _signature) internal pure returns (address) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n\";\r\n        bytes memory encoded = abi.encodePacked(prefix, uintToBytes(_hash.length), _hash);\r\n        bytes32 prefixedHash = keccak256(encoded);\r\n\r\n        return ECRecovery.recover(prefixedHash, _signature);\r\n    }\r\n\r\n}\r\n\r\n/// @notice RenExBrokerVerifier implements the BrokerVerifier contract,\r\n/// verifying broker signatures for order opening and fund withdrawal.\r\ncontract RenExBrokerVerifier is Ownable {\r\n    string public VERSION; // Passed in as a constructor parameter.\r\n\r\n    // Events\r\n    event LogBalancesContractUpdated(address previousBalancesContract, address nextBalancesContract);\r\n    event LogBrokerRegistered(address broker);\r\n    event LogBrokerDeregistered(address broker);\r\n\r\n    // Storage\r\n    mapping(address => bool) public brokers;\r\n    mapping(address => uint256) public traderNonces;\r\n\r\n    address public balancesContract;\r\n\r\n    modifier onlyBalancesContract() {\r\n        require(msg.sender == balancesContract, \"not authorized\");\r\n        _;\r\n    }\r\n\r\n    /// @notice The contract constructor.\r\n    ///\r\n    /// @param _VERSION A string defining the contract version.\r\n    constructor(string _VERSION) public {\r\n        VERSION = _VERSION;\r\n    }\r\n\r\n    /// @notice Allows the owner of the contract to update the address of the\r\n    /// RenExBalances contract.\r\n    ///\r\n    /// @param _balancesContract The address of the new balances contract\r\n    function updateBalancesContract(address _balancesContract) external onlyOwner {\r\n        emit LogBalancesContractUpdated(balancesContract, _balancesContract);\r\n\r\n        balancesContract = _balancesContract;\r\n    }\r\n\r\n    /// @notice Approved an address to sign order-opening and withdrawals.\r\n    /// @param _broker The address of the broker.\r\n    function registerBroker(address _broker) external onlyOwner {\r\n        require(!brokers[_broker], \"already registered\");\r\n        brokers[_broker] = true;\r\n        emit LogBrokerRegistered(_broker);\r\n    }\r\n\r\n    /// @notice Reverts the a broker's registration.\r\n    /// @param _broker The address of the broker.\r\n    function deregisterBroker(address _broker) external onlyOwner {\r\n        require(brokers[_broker], \"not registered\");\r\n        brokers[_broker] = false;\r\n        emit LogBrokerDeregistered(_broker);\r\n    }\r\n\r\n    /// @notice Verifies a broker's signature for an order opening.\r\n    /// The data signed by the broker is a prefixed message and the order ID.\r\n    ///\r\n    /// @param _trader The trader requesting the withdrawal.\r\n    /// @param _signature The 65-byte signature from the broker.\r\n    /// @param _orderID The 32-byte order ID.\r\n    /// @return True if the signature is valid, false otherwise.\r\n    function verifyOpenSignature(\r\n        address _trader,\r\n        bytes _signature,\r\n        bytes32 _orderID\r\n    ) external view returns (bool) {\r\n        bytes memory data = abi.encodePacked(\"Republic Protocol: open: \", _trader, _orderID);\r\n        address signer = Utils.addr(data, _signature);\r\n        return (brokers[signer] == true);\r\n    }\r\n\r\n    /// @notice Verifies a broker's signature for a trader withdrawal.\r\n    /// The data signed by the broker is a prefixed message, the trader address\r\n    /// and a 256-bit trader nonce, which is incremented every time a valid\r\n    /// signature is checked.\r\n    ///\r\n    /// @param _trader The trader requesting the withdrawal.\r\n    /// @param _signature 65-byte signature from the broker.\r\n    /// @return True if the signature is valid, false otherwise.\r\n    function verifyWithdrawSignature(\r\n        address _trader,\r\n        bytes _signature\r\n    ) external onlyBalancesContract returns (bool) {\r\n        bytes memory data = abi.encodePacked(\"Republic Protocol: withdraw: \", _trader, traderNonces[_trader]);\r\n        address signer = Utils.addr(data, _signature);\r\n        if (brokers[signer]) {\r\n            traderNonces[_trader] += 1;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_trader\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_orderID\",\"type\":\"bytes32\"}],\"name\":\"verifyOpenSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_broker\",\"type\":\"address\"}],\"name\":\"deregisterBroker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balancesContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"traderNonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"brokers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_balancesContract\",\"type\":\"address\"}],\"name\":\"updateBalancesContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trader\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifyWithdrawSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_broker\",\"type\":\"address\"}],\"name\":\"registerBroker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_VERSION\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousBalancesContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nextBalancesContract\",\"type\":\"address\"}],\"name\":\"LogBalancesContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"broker\",\"type\":\"address\"}],\"name\":\"LogBrokerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"broker\",\"type\":\"address\"}],\"name\":\"LogBrokerDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RenExBrokerVerifier","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000d6d61696e6e65742d312e302e3000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://fa7c9b9e8721171cdd421234f90d798d9bc3b7aa2b385c2ad5b20f4e1f4dcbbb"}]}