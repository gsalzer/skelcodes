{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n *\r\n * Ethervest.life\r\n *  - GAIN 5,25% DAILY AND FOREVER (every 5900 blocks)\r\n *  – MIN INVESTMENT 0.01 ETH\r\n *  – 100% OF SECURITY\r\n *\r\n * RECOMMENDED GAS LIMIT: 250000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n *\r\n *\r\n */\r\n\r\ncontract EthervestLIFE {\r\n    address public owner;\r\n    address public adminAddr;\r\n    uint constant public MASS_TRANSACTION_LIMIT = 150;\r\n    uint constant public MINIMUM_INVEST = 10000000000000000 wei;\r\n    uint public depositAmount;\r\n    uint public round;\r\n    uint public lastPaymentDate;\r\n    address[] public addresses;\r\n    mapping(address => Investor) public investors;\r\n    bool public pause;\r\n\r\n    struct Investor\r\n    {\r\n        uint id;\r\n        uint deposit;\r\n        uint deposits;\r\n        uint date;\r\n        address referrer;\r\n    }\r\n\r\n\r\n    event Invest(address addr, uint amount, address referrer);\r\n    event Payout(address addr, uint amount, string eventType, address from);\r\n    event NextRoundStarted(uint round, uint date, uint deposit);\r\n\r\n    modifier onlyOwner {if (msg.sender == owner) _;}\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        adminAddr = msg.sender;\r\n        addresses.length = 1;\r\n        round = 1;\r\n    }\r\n\r\n    function transferOwnership(address addr) onlyOwner public {\r\n        owner = addr;\r\n    }\r\n\r\n    function addInvestors(address[] _addr, uint[] _deposit, uint[] _date, address[] _referrer) onlyOwner public {\r\n        // add initiated investors\r\n        for (uint i = 0; i < _addr.length; i++) {\r\n            uint id = addresses.length;\r\n            if (investors[_addr[i]].deposit == 0) {\r\n                addresses.push(_addr[i]);\r\n                depositAmount += _deposit[i];\r\n            }\r\n\r\n            investors[_addr[i]] = Investor(id, _deposit[i], 1, _date[i], _referrer[i]);\r\n            emit Invest(_addr[i], _deposit  [i], _referrer[i]);\r\n\r\n        }\r\n        lastPaymentDate = now;\r\n    }\r\n\r\n    function() payable public {\r\n        if (owner == msg.sender) {\r\n            return;\r\n        }\r\n\r\n        if (0 == msg.value) {\r\n            payoutSelf();\r\n            return;\r\n        }\r\n\r\n        require(false == pause, \"Ethervest is restarting. Please wait.\");\r\n        require(msg.value >= MINIMUM_INVEST, \"Too small amount, minimum 0.01 ether\");\r\n        Investor storage user = investors[msg.sender];\r\n\r\n        if (user.id == 0) {\r\n            // ensure that payment not from hacker contract\r\n            msg.sender.transfer(0 wei);\r\n            addresses.push(msg.sender);\r\n            user.id = addresses.length;\r\n            user.date = now;\r\n\r\n            // referrer\r\n            address referrer = bytesToAddress(msg.data);\r\n            if (investors[referrer].deposit > 0 && referrer != msg.sender) {\r\n                user.referrer = referrer;\r\n            }\r\n        } else {\r\n            payoutSelf();\r\n        }\r\n\r\n        // save investor\r\n        user.deposit += msg.value;\r\n        user.deposits += 1;\r\n\r\n        emit Invest(msg.sender, msg.value, user.referrer);\r\n\r\n        depositAmount += msg.value;\r\n        lastPaymentDate = now;\r\n\r\n        adminAddr.transfer(msg.value / 5); // project fee\r\n        uint bonusAmount = (msg.value / 100) * 3; // referrer commission for all deposits\r\n\r\n        if (user.referrer > 0x0) {\r\n            if (user.referrer.send(bonusAmount)) {\r\n                emit Payout(user.referrer, bonusAmount, \"referral\", msg.sender);\r\n            }\r\n\r\n            if (user.deposits == 1) { // cashback only for the first deposit\r\n                if (msg.sender.send(bonusAmount)) {\r\n                    emit Payout(msg.sender, bonusAmount, \"cash-back\", 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function payout(uint offset) public\r\n    {\r\n        if (pause == true) {\r\n            doRestart();\r\n            return;\r\n        }\r\n\r\n        uint txs;\r\n        uint amount;\r\n\r\n        for (uint idx = addresses.length - offset - 1; idx >= 1 && txs < MASS_TRANSACTION_LIMIT; idx--) {\r\n            address addr = addresses[idx];\r\n            if (investors[addr].date + 20 hours > now) {\r\n                continue;\r\n            }\r\n\r\n            amount = getInvestorDividendsAmount(addr);\r\n            investors[addr].date = now;\r\n\r\n            if (address(this).balance < amount) {\r\n                pause = true;\r\n                return;\r\n            }\r\n\r\n            if (addr.send(amount)) {\r\n                emit Payout(addr, amount, \"bulk-payout\", 0);\r\n            }\r\n\r\n            txs++;\r\n        }\r\n    }\r\n\r\n    function payoutSelf() private {\r\n        require(investors[msg.sender].id > 0, \"Investor not found.\");\r\n        uint amount = getInvestorDividendsAmount(msg.sender);\r\n\r\n        investors[msg.sender].date = now;\r\n        if (address(this).balance < amount) {\r\n            pause = true;\r\n            return;\r\n        }\r\n\r\n        msg.sender.transfer(amount);\r\n        emit Payout(msg.sender, amount, \"self-payout\", 0);\r\n    }\r\n\r\n    function doRestart() private {\r\n        uint txs;\r\n        address addr;\r\n\r\n        for (uint i = addresses.length - 1; i > 0; i--) {\r\n            addr = addresses[i];\r\n            addresses.length -= 1;\r\n            delete investors[addr];\r\n            if (txs++ == MASS_TRANSACTION_LIMIT) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        emit NextRoundStarted(round, now, depositAmount);\r\n        pause = false;\r\n        round += 1;\r\n        depositAmount = 0;\r\n        lastPaymentDate = now;\r\n\r\n    }\r\n\r\n    function getInvestorCount() public view returns (uint) {\r\n        return addresses.length - 1;\r\n    }\r\n\r\n    function getInvestorDividendsAmount(address addr) public view returns (uint) {\r\n        return investors[addr].deposit / 10000 * 525 * (now - investors[addr].date) / 1 days;\r\n    }\r\n\r\n    function bytesToAddress(bytes bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_INVEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MASS_TRANSACTION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"deposits\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPaymentDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address[]\"},{\"name\":\"_deposit\",\"type\":\"uint256[]\"},{\"name\":\"_date\",\"type\":\"uint256[]\"},{\"name\":\"_referrer\",\"type\":\"address[]\"}],\"name\":\"addInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInvestorDividendsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"NextRoundStarted\",\"type\":\"event\"}]","ContractName":"EthervestLIFE","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://02b02cfab1af413a47d0b73230447f5d18aa5ae867df20c978948ac4d42f1345"}]}