{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0);\r\n        uint256 c = _a / _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Multiplier is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    //Address for promo expences\r\n    address constant private support = 0x8Fa6E56c844be9B96C30B72cC2a8ccF6465a99F9;\r\n    //Percent for promo expences\r\n    uint constant public supportPercent = 3;\r\n\r\n    uint public reserved;\r\n    uint public delayed;\r\n\r\n    uint minCycle  = 5 minutes;\r\n    uint initCycle = 2 hours;\r\n    uint maxCycle  = 1 days;\r\n\r\n    uint public cycleStart;\r\n    uint public actualCycle;\r\n    uint public lastCycle;\r\n    uint public cycles;\r\n\r\n    uint minPercent = 1;\r\n    uint maxPercent = 33;\r\n\r\n    uint frontier = 50;\r\n\r\n    mapping (address => address) referrer;\r\n    mapping (address => bool) verified;\r\n\r\n    uint refBonus = 5;\r\n\r\n    uint verificationPrice = 0.0303 ether;\r\n\r\n    event NewCycle(uint start, uint duration, uint indexed cycle);\r\n    event NewDeposit(address indexed addr, uint idx, uint amount, uint profit, uint indexed cycle);\r\n    event Payed(address indexed addr, uint amount, uint indexed cycle);\r\n    event Refunded(address indexed addr, uint amount, uint indexed cycle);\r\n    event RefundCompleted(uint indexed cycle);\r\n    event RefVerified(address indexed addr);\r\n    event RefBonusPayed(address indexed investor, address referrer, uint amount, uint level);\r\n    event VerPriceChanged(uint oldPrice, uint newPrice);\r\n\r\n\r\n    constructor() public {\r\n        verified[owner()] = true;\r\n        actualCycle = initCycle * 2;\r\n        queue.length += 1;\r\n    }\r\n\r\n    //The deposit structure holds all the info about the deposit made\r\n    struct Deposit {\r\n        address depositor; //The depositor address\r\n        uint128 deposit;   //The deposit amount\r\n        uint128 expect;    //How much we should pay out\r\n    }\r\n\r\n    Deposit[] public queue;  //The queue\r\n    uint public currentReceiverIndex = 0; //The index of the first depositor in the queue. The receiver of investments!\r\n    uint public currentRefundIndex = 0;\r\n\r\n    function bytesToAddress(bytes _source) internal pure returns(address parsedreferrer) {\r\n        assembly {\r\n            parsedreferrer := mload(add(_source,0x14))\r\n        }\r\n        return parsedreferrer;\r\n    }\r\n\r\n    function setRef() internal returns(bool) {\r\n        address _referrer = bytesToAddress(bytes(msg.data));\r\n        if (_referrer != msg.sender && msg.data.length == 20 && verified[_referrer]) {\r\n            referrer[msg.sender] = _referrer;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function setVerificationPrice(uint newPrice) external onlyOwner {\r\n        emit VerPriceChanged(verificationPrice, newPrice);\r\n        verificationPrice = newPrice;\r\n    }\r\n\r\n    function verify(address addr) public payable {\r\n        if (msg.sender != owner()) {\r\n            require(msg.value == verificationPrice);\r\n            support.send(verificationPrice);\r\n        }\r\n        verified[addr] = true;\r\n        emit RefVerified(addr);\r\n    }\r\n\r\n    //This function receives all the deposits\r\n    //stores them and make immediate payouts\r\n    function () public payable {\r\n        //check if sender is not a smart contract\r\n        require(!isContract(msg.sender));\r\n\r\n        if(msg.value == verificationPrice) {\r\n            verify(msg.sender);\r\n            return;\r\n        }\r\n\r\n        if (msg.value == 0 && msg.sender == owner()) {\r\n            address a = bytesToAddress(bytes(msg.data));\r\n            verify(a);\r\n            return;\r\n        }\r\n\r\n        if (referrer[msg.sender] == address(0)) {\r\n            require(setRef());\r\n        }\r\n\r\n        if(msg.value > 0){\r\n            require(gasleft() >= 300000, \"We require more gas!\"); //We need gas to process queue\r\n            require(msg.value <= 10 ether); //Do not allow too big investments to stabilize payouts\r\n\r\n            if (block.timestamp >= cycleStart + actualCycle) {\r\n                if (queue.length.sub(lastCycle) < frontier) {\r\n                    actualCycle = actualCycle * 2;\r\n                    if (actualCycle > maxCycle) {\r\n                        actualCycle = maxCycle;\r\n                    }\r\n                } else {\r\n                    actualCycle = actualCycle / 2;\r\n\r\n                    if (actualCycle < minCycle) {\r\n                        actualCycle = minCycle;\r\n                    }\r\n                }\r\n\r\n                uint amountOfPlayers = queue.length - lastCycle;\r\n                lastCycle = queue.length;\r\n                cycleStart = block.timestamp;\r\n                currentReceiverIndex = lastCycle;\r\n                cycles++;\r\n\r\n                if (amountOfPlayers != 1) {\r\n                    currentRefundIndex = lastCycle.sub(1);\r\n                    refunding();\r\n                } else {\r\n                    singleRefunding();\r\n                }\r\n\r\n                emit NewCycle(cycleStart, actualCycle, cycles);\r\n            }\r\n\r\n            if (currentRefundIndex != 0) {\r\n                refunding();\r\n            }\r\n\r\n            //Add the investor into the queue. Mark that he expects to receive 121% of deposit back\r\n            uint percent = queue.length.sub(lastCycle).add(1);\r\n            if (percent >= 33) {\r\n                percent = 33;\r\n            }\r\n\r\n            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value * (100 + percent) / 100)));\r\n\r\n            //Send fee\r\n            uint _support = msg.value * supportPercent / 100;\r\n            support.send(_support);\r\n            uint _refBonus = msg.value * refBonus / 1000;\r\n            referrer[msg.sender].send(_refBonus);\r\n            emit RefBonusPayed(msg.sender, referrer[msg.sender], _refBonus, 1);\r\n            if (referrer[referrer[msg.sender]] != address(0)) {\r\n                referrer[referrer[msg.sender]].send(_refBonus);\r\n                emit RefBonusPayed(msg.sender, referrer[referrer[msg.sender]], _refBonus, 2);\r\n            }\r\n\r\n            emit NewDeposit(msg.sender, queue.length - 1, msg.value, msg.value * (100 + percent) / 100, cycles);\r\n\r\n            if (currentRefundIndex == 0) {\r\n                reserved += msg.value * 96 / 100 / 2;\r\n                if (delayed != 0) {\r\n                    reserved != delayed;\r\n                    delayed = 0;\r\n                }\r\n                //Pay to first investors in line\r\n                pay();\r\n            } else {\r\n                delayed += msg.value * 96 / 100 / 2;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //Used to pay to current investors\r\n    //Each new transaction processes 1 - 4+ investors in the head of queue\r\n    //depending on balance and gas left\r\n    function pay() private {\r\n        //Try to send all the money on contract to the first investors in line\r\n        uint128 money = uint128(address(this).balance - reserved);\r\n\r\n        //We will do cycle on the queue\r\n        for(uint i=0; i<queue.length; i++){\r\n\r\n            uint idx = currentReceiverIndex + i;  //get the index of the currently first investor\r\n\r\n            Deposit storage dep = queue[idx]; //get the info of the first investor\r\n\r\n            if(money >= dep.expect){  //If we have enough money on the contract to fully pay to investor\r\n                dep.depositor.send(dep.expect); //Send money to him\r\n                money -= dep.expect;            //update money left\r\n\r\n                emit Payed(dep.depositor, dep.expect, cycles);\r\n\r\n                //this investor is fully paid, so remove him\r\n                delete queue[idx];\r\n            }else{\r\n                //Here we don't have enough money so partially pay to investor\r\n                dep.depositor.send(money); //Send to him everything we have\r\n                dep.expect -= money;       //Update the expected amount\r\n\r\n                emit Payed(dep.depositor, money, cycles);\r\n\r\n                break;                     //Exit cycle\r\n            }\r\n\r\n            if(gasleft() <= 50000)         //Check the gas left. If it is low, exit the cycle\r\n                break;                     //The next investor will process the line further\r\n        }\r\n\r\n        currentReceiverIndex += i; //Update the index of the current first investor\r\n    }\r\n\r\n    function refunding() private {\r\n\r\n        uint128 refund = uint128(reserved);\r\n        if (refund >= 1 ether) {\r\n            refund -= 1 ether;\r\n        }\r\n\r\n        for(uint i=0; i<=currentRefundIndex; i++){\r\n\r\n            uint idx = currentRefundIndex.sub(i);\r\n\r\n            Deposit storage dep = queue[idx];\r\n\r\n            if (lastCycle.sub(idx) <= 33) {\r\n                uint percent = lastCycle - idx;\r\n            } else {\r\n                percent = 33;\r\n            }\r\n\r\n            uint128 amount = uint128(dep.deposit + (dep.deposit * percent / 100));\r\n\r\n            if(refund > amount){\r\n                dep.depositor.send(amount);\r\n                refund -= amount;\r\n                reserved -= amount;\r\n\r\n                emit Refunded(dep.depositor, amount, cycles - 1);\r\n                delete queue[idx];\r\n            }else{\r\n                dep.depositor.send(refund);\r\n                reserved -= refund;\r\n                currentRefundIndex = 0;\r\n\r\n                emit Refunded(dep.depositor, refund, cycles - 1);\r\n                emit RefundCompleted(cycles - 1);\r\n                break;\r\n            }\r\n\r\n            if(gasleft() <= 100000)\r\n                break;\r\n        }\r\n\r\n        if (currentRefundIndex != 0) {\r\n            currentRefundIndex -= i;\r\n        }\r\n    }\r\n\r\n    function singleRefunding() private {\r\n        Deposit storage dep = queue[queue.length - 1];\r\n        uint amount = dep.deposit * 2 / 100 + dep.expect;\r\n        if (reserved < amount) {\r\n            amount = reserved;\r\n        }\r\n        dep.depositor.send(amount);\r\n        reserved -= amount;\r\n        emit Refunded(dep.depositor, amount, cycles - 1);\r\n        delete queue[queue.length - 1];\r\n        emit RefundCompleted(cycles - 1);\r\n    }\r\n\r\n    //Get the deposit info by its index\r\n    //You can get deposit index from\r\n    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\r\n        Deposit storage dep = queue[idx];\r\n        return (dep.depositor, dep.deposit, dep.expect);\r\n    }\r\n\r\n    //Get the count of deposits of specific investor\r\n    function getDepositsCount(address depositor) public view returns (uint) {\r\n        uint c = 0;\r\n        for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n            if(queue[i].depositor == depositor)\r\n                c++;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    //Get all deposits (index, deposit, expect) of a specific investor\r\n    function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\r\n        uint c = getDepositsCount(depositor);\r\n\r\n        idxs = new uint[](c);\r\n        deposits = new uint128[](c);\r\n        expects = new uint128[](c);\r\n\r\n        if(c > 0) {\r\n            uint j = 0;\r\n            for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n                Deposit storage dep = queue[i];\r\n                if(dep.depositor == depositor){\r\n                    idxs[j] = i;\r\n                    deposits[j] = dep.deposit;\r\n                    expects[j] = dep.expect;\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Get current queue size\r\n    function getQueueLength() public view returns (uint) {\r\n        return queue.length - currentReceiverIndex;\r\n    }\r\n\r\n    function isContract(address addr) private view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function contractBalance() external view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentRefundIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReceiverIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setVerificationPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cycleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"verify\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cycles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"name\":\"idxs\",\"type\":\"uint256[]\"},{\"name\":\"deposits\",\"type\":\"uint128[]\"},{\"name\":\"expects\",\"type\":\"uint128[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"expect\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint128\"},{\"name\":\"expect\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actualCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"NewCycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"Payed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"RefundCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RefVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"RefBonusPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"VerPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Multiplier","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6072de0bae4955200efdcccceb151352b972baaa1aa444bfded066a11c41faa4"}]}