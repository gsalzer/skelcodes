{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n *  The Yomi Token contract complies with the ERC20 standard (see https://github.com/ethereum/EIPs/issues/20).\r\n *  All tokens not being sold during the crowdsale but the reserved token for tournaments future financing are burned.\r\n *  Author: Plan B.\r\n */\r\npragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public ownerAddr;\r\n    event TransferOwnership(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() public {\r\n        ownerAddr = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == ownerAddr);\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address _newOwner) onlyOwner public {\r\n        require(_newOwner != 0x0);\r\n        ownerAddr = _newOwner;\r\n        emit TransferOwnership(ownerAddr, _newOwner);\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    // Base function\r\n    function totalSupply() public view returns (uint256 _totalSupply);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    \r\n    // Public event on the blockchain that will notify clients\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract YomiToken is Owned, ERC20{\r\n    using SafeMath for uint256;\r\n    \r\n    // Public variables of the token\r\n    string constant public name = \"YOMI Token\";\r\n    string constant public symbol = \"YOMI\";\r\n    uint8 constant public decimals = 18;\r\n    uint256 total_supply = 1000000000e18; // Total supply of 1 billion Yomi Tokens\r\n    uint256 constant public teamReserve = 100000000e18; //10%\r\n    uint256 constant public foundationReserve = 200000000e18; //20%\r\n    uint256 constant public startTime = 1533110400; // Good time:2018-08-01 08:00:00  GMT\r\n    uint256 public lockReleaseDate6Month; // 6 month = 182 days\r\n    uint256 public lockReleaseDate1Year; // 1 year = 365 days\r\n    address public teamAddr;\r\n    address public foundationAddr;\r\n    \r\n    // Array\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => bool) public frozenAccounts;\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event FrozenFunds(address _target, bool _freeze);\r\n    \r\n    /**\r\n     * Constrctor function\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor(address _teamAddr, address _foundationAddr) public {\r\n        teamAddr = _teamAddr;\r\n        foundationAddr = _foundationAddr;\r\n        lockReleaseDate6Month = startTime + 182 days;\r\n        lockReleaseDate1Year = startTime + 365 days;\r\n        balances[ownerAddr] = total_supply; // Give the creator all initial tokens\r\n    }\r\n    \r\n    /**\r\n     * `freeze? Prevent | Allow` `_target` from sending & receiving tokens\r\n     * @param _freeze either to freeze it or not\r\n     */\r\n    function freezeAccount(address _target, bool _freeze) onlyOwner public {\r\n        frozenAccounts[_target] = _freeze;\r\n        emit FrozenFunds(_target, _freeze);\r\n    }\r\n    \r\n    /**\r\n     * Get the total supply\r\n     */\r\n    function totalSupply() public view returns (uint256 _totalSupply) {\r\n        _totalSupply = total_supply;\r\n    }\r\n    \r\n    /**\r\n     * What is the balance of a particular account?\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    /**\r\n     * Returns the amount which _spender is still allowed to withdraw from _owner\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n     * Internal transfer,only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != 0x0);\r\n        \r\n        // Lock tokens of team\r\n        if (_from == teamAddr && now < lockReleaseDate6Month) {\r\n            require(balances[_from].sub(_value) >= teamReserve);\r\n        }\r\n        // Lock tokens of foundation        \r\n        if (_from == foundationAddr && now < lockReleaseDate1Year) {\r\n            require(balances[_from].sub(_value) >= foundationReserve);\r\n        }\r\n        \r\n        // Check if the sender has enough\r\n        require(balances[_from] >= _value); \r\n        // Check for overflows\r\n        require(balances[_to] + _value > balances[_to]); \r\n        //Check if account is frozen\r\n        require(!frozenAccounts[_from]);\r\n        require(!frozenAccounts[_to]);\r\n        \r\n        // Save this for an assertion in the future\r\n        uint256 previousBalances = balances[_from].add(balances[_to]);\r\n        // Subtract from the sender\r\n        balances[_from] = balances[_from].sub(_value);\r\n        // Add the same to the recipient\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balances[_from] + balances[_to] == previousBalances);\r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens\r\n     * Send `_value` tokens to `_to` from your account.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens from other address\r\n     * Send `_value` tokens to `_to` on behalf of `_from`.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        // Check allowance\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set allowance for other address\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(_spender != 0x0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockReleaseDate1Year\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockReleaseDate6Month\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_teamAddr\",\"type\":\"address\"},{\"name\":\"_foundationAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"}]","ContractName":"YomiToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000073f1b2d615eceaeb95715c0a263b46c69d068dd50000000000000000000000007b396028f1c3069f2035f929fadad73e09351149","Library":"","SwarmSource":"bzzr://d81e3b1b69a9c40b4ca3ed105e5d339b7a67e2179719ce1cf6b0764aed293261"}]}