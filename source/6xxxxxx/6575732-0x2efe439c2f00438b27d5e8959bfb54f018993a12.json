{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\taddress public owner;\r\n\taddress public newOwner;\r\n\r\n\tevent OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\tnewOwner = address(0);\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner, \"msg.sender == owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address _newOwner) public onlyOwner {\r\n\t\trequire(address(0) != _newOwner, \"address(0) != _newOwner\");\r\n\t\tnewOwner = _newOwner;\r\n\t}\r\n\r\n\tfunction acceptOwnership() public {\r\n\t\trequire(msg.sender == newOwner, \"msg.sender == newOwner\");\r\n\t\temit OwnershipTransferred(owner, msg.sender);\r\n\t\towner = msg.sender;\r\n\t\tnewOwner = address(0);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title Authorizable\r\n * @dev The Authorizable contract has authorized addresses, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"multiple user permissions\".\r\n */\r\ncontract Authorizable is Ownable {\r\n  mapping(address => bool) public authorized;\r\n\r\n  event AuthorizationSet(address indexed addressAuthorized, bool indexed authorization);\r\n\r\n  /**\r\n   * @dev The Authorizable constructor sets the first `authorized` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n\tauthorized[msg.sender] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the authorized.\r\n   */\r\n  modifier onlyAuthorized() {\r\n    require(authorized[msg.sender]);\r\n    _;\r\n  }\r\n\r\n /**\r\n   * @dev Allows the current owner to set an authorization.\r\n   * @param addressAuthorized The address to change authorization.\r\n   */\r\n  function setAuthorized(address addressAuthorized, bool authorization) onlyOwner public {\r\n    emit AuthorizationSet(addressAuthorized, authorization);\r\n    authorized[addressAuthorized] = authorization;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token from an address to another specified address\r\n  * @param _sender The address to transfer from.\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transferFunction(address _sender, address _to, uint256 _value) internal returns (bool) {\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    require(_value <= balances[_sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[_sender] = balances[_sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(_sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address (BasicToken transfer method)\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n\treturn transferFunction(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract ERC223TokenCompatible is BasicToken {\r\n  using SafeMath for uint256;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n\tfunction transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n\t\trequire(_to != address(0));\r\n        require(_to != address(this));\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\t\tif( isContract(_to) ) {\r\n\t\t\trequire(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n\t\t}\r\n\t\temit Transfer(msg.sender, _to, _value, _data);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Function that is called when a user or another contract wants to transfer funds .\r\n\tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\r\n\t\treturn transfer( _to, _value, _data, \"tokenFallback(address,uint256,bytes)\");\r\n\t}\r\n\r\n\t//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n\tfunction isContract(address _addr) private view returns (bool is_contract) {\r\n\t\tuint256 length;\r\n\t\tassembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n\t\t}\r\n\t\treturn (length>0);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Startable\r\n * @dev Base contract which allows owner to implement an start mechanism without ever being stopped more.\r\n */\r\ncontract Startable is Ownable, Authorizable {\r\n  event Start();\r\n\r\n  bool public started = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is started.\r\n   */\r\n  modifier whenStarted() {\r\n\trequire( started || authorized[msg.sender] );\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to start, go to normal state\r\n   */\r\n  function start() onlyOwner public {\r\n    started = true;\r\n    emit Start();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Startable token\r\n *\r\n * @dev StandardToken modified with startable transfers.\r\n **/\r\n\r\ncontract StartToken is Startable, ERC223TokenCompatible, StandardToken {\r\n\r\n  /** ******************************** */\r\n  /** START: ADDED BY HORIZON GLOBEX   */\r\n  /** ******************************** */\r\n  \r\n  \r\n    // KYC submission hashes accepted by KYC service provider for AML/KYC review.\r\n    bytes32[] public kycHashes;\r\n\r\n    // All users that have passed the external KYC verification checks.\r\n    address[] public kycValidated;\r\n\r\n\t\r\n    /**\r\n     * The hash for all Know Your Customer information is calculated outside but stored here.\r\n     * This storage will be cleared once the ICO completes, see closeIco().\r\n     *\r\n     * ---- ICO-Platform Note ----\r\n     * The horizon-globex.com ICO platform's KYC app will register a hash of the Contributors\r\n     * KYC submission on the blockchain. Our Swiss financial-intermediary KYC provider will be \r\n     * notified of the submission and retrieve the Contributor data for formal review.\r\n     *\r\n     * All Contributors must successfully complete our ICO KYC review prior to being allowed on-board.\r\n     * -- End ICO-Platform Note --\r\n     *\r\n     * @param sha   The hash of the customer data.\r\n    */\r\n    function setKycHash(bytes32 sha) public onlyOwner {\r\n        kycHashes.push(sha);\r\n    }\r\n\r\n    /**\r\n     * A user has passed KYC verification, store them on the blockchain in the order it happened.\r\n     * This will be cleared once the ICO completes, see closeIco().\r\n     *\r\n     * ---- ICO-Platform Note ----\r\n     * The horizon-globex.com ICO platform's registered KYC provider submits their approval\r\n     * for this Contributor to particpate using the ICO-Platform portal. \r\n     *\r\n     * Each Contributor will then be sent the Ethereum, Bitcoin and IBAN account numbers to\r\n     * deposit their Approved Contribution in exchange for VOX Tokens.\r\n     * -- End ICO-Platform Note --\r\n     *\r\n     * @param who   The user's address.\r\n     */\r\n    function kycApproved(address who) public onlyOwner {\r\n        require(who != 0x0, \"Cannot approve a null address.\");\r\n        kycValidated.push(who);\r\n    }\r\n\r\n\t\r\n    /**\r\n     * Retrieve the KYC hash from the specified index.\r\n     *\r\n     * @param   index   The index into the array.\r\n     */\r\n    function getKycHash(uint256 index) public view returns (bytes32) {\r\n        return kycHashes[index];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the validated KYC address from the specified index.\r\n     *\r\n     * @param   index   The index into the array.\r\n     */\r\n    function getKycApproved(uint256 index) public view returns (address) {\r\n        return kycValidated[index];\r\n    }\r\n\r\n\t\r\n    /**\r\n     * During the ICO phase the owner will allocate tokens once KYC completes and funds are deposited.\r\n     *\r\n     * ---- ICO-Platform Note ----\r\n     * The horizon-globex.com ICO platform's portal shall issue VOX Token to Contributors on receipt of \r\n     * the Approved Contribution funds at the KYC providers Escrow account/wallets.\r\n     * Only after VOX Tokens are issued to the Contributor can the Swiss KYC provider allow the transfer\r\n     * of funds from their Escrow to Company.\r\n     *\r\n     * -- End ICO-Platform Note --\r\n     *\r\n     * @param to       The recipient of the tokens.\r\n     * @param value    The number of tokens to send.\r\n     */\r\n    function icoTransfer(address to, uint256 value) public onlyOwner {\r\n        // If an attempt is made to transfer more tokens than owned, transfer the remainder.\r\n        uint256 toTransfer = (value > (balances[msg.sender])) ? (balances[msg.sender]) : value;\r\n        \r\n        transferFunction(msg.sender, to, toTransfer);\r\n    }\r\n\r\n\t/** ******************************** */\r\n\t/** END: ADDED BY HORIZON GLOBEX     */\r\n\t/** ******************************** */\r\n  \r\n  \r\n  function transfer(address _to, uint256 _value) public whenStarted returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n  function transfer(address _to, uint256 _value, bytes _data) public whenStarted returns (bool) {\r\n    return super.transfer(_to, _value, _data);\r\n  }\r\n  function transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) public whenStarted returns (bool) {\r\n    return super.transfer(_to, _value, _data, _custom_fallback);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenStarted returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenStarted returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenStarted returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenStarted returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract HumanStandardToken is StandardToken, StartToken {\r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        approve(_spender, _value);\r\n        require(_spender.call(bytes4(keccak256(\"receiveApproval(address,uint256,bytes)\")), msg.sender, _value, _extraData));\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BurnToken is StandardToken {\r\n    uint256 public initialSupply;\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Function to burn tokens.\r\n     * @param _burner The address of token holder.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burnFunction(address _burner, uint256 _value) internal returns (bool) {\r\n        require(_value > 0);\r\n\t\trequire(_value <= balances[_burner]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_burner] = balances[_burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(_burner, _value);\r\n\t\treturn true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n\tfunction burn(uint256 _value) public returns(bool) {\r\n        return burnFunction(msg.sender, _value);\r\n    }\r\n\r\n\t/**\r\n\t* @dev Burns tokens from one address\r\n\t* @param _from address The address which you want to burn tokens from\r\n\t* @param _value uint256 the amount of tokens to be burned\r\n\t*/\r\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool) {\r\n\t\trequire(_value <= allowed[_from][msg.sender]); // check if it has the budget allowed\r\n\t\tburnFunction(_from, _value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract Token is ERC223TokenCompatible, StandardToken, StartToken, HumanStandardToken  {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n}\r\n\r\ncontract TokenBurn is Token, BurnToken {\r\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public\r\n    Token(_name, _symbol, _decimals, _totalSupply) {\r\n        initialSupply = totalSupply;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kycValidated\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"kycApproved\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kycHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressAuthorized\",\"type\":\"address\"},{\"name\":\"authorization\",\"type\":\"bool\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sha\",\"type\":\"bytes32\"}],\"name\":\"setKycHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"icoTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getKycHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getKycApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressAuthorized\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"authorization\",\"type\":\"bool\"}],\"name\":\"AuthorizationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenBurn","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000052b7d2dcc80cd2e40000000000000000000000000000000000000000000000000000000000000000000004415145520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044151455200000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://435e9202ad0227cabe77c8731d0749b69264d3bcb74b8c6f5cb1f7ebf116a800"}]}