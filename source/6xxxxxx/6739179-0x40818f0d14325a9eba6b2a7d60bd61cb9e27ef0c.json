{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\ninterface AddressRegistry {\r\n    function getAddr(string name) external view returns(address);\r\n}\r\n\r\ninterface Kyber {\r\n    function trade(\r\n        address src,\r\n        uint srcAmount,\r\n        address dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId\r\n    ) external payable returns (uint);\r\n\r\n    function getExpectedRate(\r\n        address src,\r\n        address dest,\r\n        uint srcQty\r\n    ) external view returns (uint, uint);\r\n}\r\n\r\n\r\ncontract Registry {\r\n    address public addressRegistry;\r\n    modifier onlyAdmin() {\r\n        require(\r\n            msg.sender == getAddress(\"admin\"),\r\n            \"Permission Denied\"\r\n        );\r\n        _;\r\n    }\r\n    function getAddress(string name) internal view returns(address) {\r\n        AddressRegistry addrReg = AddressRegistry(addressRegistry);\r\n        return addrReg.getAddr(name);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Trade is Registry {\r\n\r\n    using SafeMath for uint;\r\n    using SafeMath for uint256;\r\n\r\n    event KyberTrade(\r\n        address src,\r\n        uint srcAmt,\r\n        address dest,\r\n        uint destAmt,\r\n        address beneficiary,\r\n        uint minConversionRate,\r\n        address affiliate\r\n    );\r\n\r\n    function executeTrade(\r\n        address src,\r\n        address dest,\r\n        uint srcAmt,\r\n        uint minConversionRate\r\n    ) public payable returns (uint destAmt)\r\n    {\r\n        address protocolAdmin = getAddress(\"admin\");\r\n        uint ethQty;\r\n\r\n        // fetch token & deduct fees\r\n        IERC20 tokenFunctions = IERC20(src);\r\n        if (src == getAddress(\"eth\")) {\r\n            require(msg.value == srcAmt, \"Invalid Operation\");\r\n            ethQty = srcAmt;\r\n        } else {\r\n            tokenFunctions.transferFrom(msg.sender, address(this), srcAmt);\r\n        }\r\n\r\n        Kyber kyberFunctions = Kyber(getAddress(\"kyber\"));\r\n        destAmt = kyberFunctions.trade.value(ethQty)(\r\n            src,\r\n            srcAmt,\r\n            dest,\r\n            msg.sender,\r\n            2**256 - 1,\r\n            minConversionRate,\r\n            protocolAdmin\r\n        );\r\n\r\n        emit KyberTrade(\r\n            src,\r\n            srcAmt,\r\n            dest,\r\n            destAmt,\r\n            msg.sender,\r\n            minConversionRate,\r\n            protocolAdmin\r\n        );\r\n\r\n    }\r\n\r\n    function getExpectedPrice(\r\n        address src,\r\n        address dest,\r\n        uint srcAmt\r\n    ) public view returns (uint, uint) \r\n    {\r\n        Kyber kyberFunctions = Kyber(getAddress(\"kyber\"));\r\n        return kyberFunctions.getExpectedRate(\r\n            src,\r\n            dest,\r\n            srcAmt\r\n        );\r\n    }\r\n\r\n    function approveKyber(address[] tokenArr) public {\r\n        for (uint i = 0; i < tokenArr.length; i++) {\r\n            IERC20 tokenFunctions = IERC20(tokenArr[i]);\r\n            tokenFunctions.approve(getAddress(\"kyber\"), 2**256 - 1);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract MoatKyber is Trade {\r\n\r\n    event AssetsCollected(address name, uint addr);\r\n\r\n    constructor(address rAddr) public {\r\n        addressRegistry = rAddr;\r\n    }\r\n\r\n    function () public payable {}\r\n\r\n    function collectAsset(address tokenAddress, uint amount) public onlyAdmin {\r\n        if (tokenAddress == getAddress(\"eth\")) {\r\n            msg.sender.transfer(amount);\r\n        } else {\r\n            IERC20 tokenFunctions = IERC20(tokenAddress);\r\n            tokenFunctions.transfer(msg.sender, amount);\r\n        }\r\n        emit AssetsCollected(tokenAddress, amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"name\":\"getExpectedPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenArr\",\"type\":\"address[]\"}],\"name\":\"approveKyber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmt\",\"type\":\"uint256\"},{\"name\":\"minConversionRate\",\"type\":\"uint256\"}],\"name\":\"executeTrade\",\"outputs\":[{\"name\":\"destAmt\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"uint256\"}],\"name\":\"AssetsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"srcAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minConversionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"KyberTrade\",\"type\":\"event\"}]","ContractName":"MoatKyber","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e16d035b8e76303237b9660b3c9c94c1a86aab47","Library":"","SwarmSource":"bzzr://46f766fa9325c02e6446871a7b7c8eddc8a5e8e50ad7bb16e31022c174c51f1a"}]}