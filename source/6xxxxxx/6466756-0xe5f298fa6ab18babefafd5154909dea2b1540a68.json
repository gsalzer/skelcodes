{"status":"1","message":"OK","result":[{"SourceCode":"// GYM Ledger Token Sale Contract - Project website: www.gymledger.com\r\n\r\n// GYM Reward, LLC\r\n\r\npragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only owner can call this function\");\r\n    _;\r\n  }\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"Valid address is required\");\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface TokenContract {\r\n  function mintTo(address _to, uint256 _amount) external;\r\n}\r\n\r\ncontract LGRSale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  address public walletAddress;\r\n  TokenContract public tkn;\r\n  uint256[3] public pricePerToken = [1400 szabo, 1500 szabo, 2000 szabo];\r\n  uint256[3] public levelEndDate = [1539648000, 1541030400, 1546300740];\r\n  uint8 public currentLevel;\r\n  uint256 public tokensSold;\r\n  uint256 public ethRised;\r\n\r\n  constructor() public {\r\n    currentLevel = 0;\r\n    tokensSold = 0;\r\n    ethRised = 0;\r\n    walletAddress = 0xE38cc3F48b4F98Cb3577aC75bB96DBBc87bc57d6;\r\n    tkn = TokenContract(0x7172433857c83A68F6Dc98EdE4391c49785feD0B);\r\n  }\r\n\r\n  function() public payable {\r\n    \r\n    if (levelEndDate[currentLevel] < now) {\r\n      currentLevel += 1;\r\n      if (currentLevel > 2) {\r\n        msg.sender.transfer(msg.value);\r\n      } else {\r\n        executeSell();\r\n      }\r\n    } else {\r\n      executeSell();\r\n    }\r\n  }\r\n  \r\n  function executeSell() private {\r\n    uint256 tokensToSell;\r\n    require(msg.value >= pricePerToken[currentLevel], \"Minimum amount is 1 token\");\r\n    tokensToSell = msg.value.div(pricePerToken[currentLevel]) * 1 ether;\r\n    tkn.mintTo(msg.sender, tokensToSell);\r\n    tokensSold = tokensSold.add(tokensToSell);\r\n    ethRised = ethRised.add(msg.value);\r\n    walletAddress.transfer(msg.value);\r\n  }\r\n\r\n  function killContract(bool _kill) public onlyOwner {\r\n    if (_kill == true) {\r\n      selfdestruct(owner);\r\n    }\r\n  }\r\n\r\n  function setWallet(address _wallet) public onlyOwner {\r\n    walletAddress = _wallet;\r\n  }\r\n\r\n  function setLevelEndDate(uint256 _level, uint256 _date) public onlyOwner {\r\n    levelEndDate[_level] = _date;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tkn\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"setLevelEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kill\",\"type\":\"bool\"}],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricePerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LGRSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cb6c8cd8f8889a41f338bb17596b5023e9b47404f5c1b4f5455fcfb1c83318fe"}]}