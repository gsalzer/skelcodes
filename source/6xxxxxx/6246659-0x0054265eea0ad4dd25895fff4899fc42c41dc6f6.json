{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\ncontract OraclizeI {\r\n    \r\n    address public cbAddress;\r\n    function setProofType(byte _proofType) external;\r\n    \r\n    function setCustomGasPrice(uint _gasPrice) external;\r\n    \r\n    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\r\n    \r\n    function query(uint _timestamp, string _datasource, string _arg)\r\n        external\r\n        payable\r\n        returns (bytes32 _id);\r\n        \r\n    function getPrice(string _datasource) public returns (uint _dsprice);\r\n}\r\n\r\n\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() public returns (address _addr);\r\n}\r\n\r\n\r\ncontract UsingOraclize {\r\n    \r\n    byte constant internal proofType_Ledger = 0x30;\r\n    byte constant internal proofType_Android = 0x40;\r\n    byte constant internal proofStorage_IPFS = 0x01;\r\n    uint8 constant internal networkID_auto = 0;\r\n    uint8 constant internal networkID_mainnet = 1;\r\n    uint8 constant internal networkID_testnet = 2;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n\r\n    OraclizeI oraclize;\r\n\r\n    modifier oraclizeAPI {\r\n        if ((address(OAR) == 0)||(getCodeSize(address(OAR)) == 0))\r\n            oraclize_setNetwork(networkID_auto);\r\n\r\n        if (address(oraclize) != OAR.getAddress())\r\n            oraclize = OraclizeI(OAR.getAddress());\r\n\r\n        _;\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool) {\r\n        return oraclize_setNetwork();\r\n        /* solium-disable-next-line */\r\n        networkID; // silence the warning and remain backwards compatible\r\n    }\r\n\r\n    function oraclize_setNetwork() internal returns(bool){\r\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0){ //mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\r\n            oraclize_setNetworkName(\"eth_mainnet\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\r\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\r\n            oraclize_setNetworkName(\"eth_ropsten3\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0){ //kovan testnet\r\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\r\n            oraclize_setNetworkName(\"eth_kovan\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\r\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\r\n            oraclize_setNetworkName(\"eth_rinkeby\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\r\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource);\r\n    }\r\n    \r\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n    \r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string arg)\r\n        oraclizeAPI\r\n        internal\r\n        returns (bytes32 id)\r\n    {\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n\r\n    function oraclize_cbAddress() internal oraclizeAPI returns (address) {\r\n        return oraclize.cbAddress();\r\n    }\r\n\r\n    function oraclize_setProof(byte proofP) internal oraclizeAPI {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n    \r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }\r\n\r\n    function getCodeSize(address _addr) internal view returns(uint _size) {\r\n        /* solium-disable-next-line */\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n    /* solium-disable-next-line */ // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i = 0; i < bresult.length; i++) {\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)) {\r\n                if (decimals) {\r\n                    if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10**_b;\r\n        return mint;\r\n    }\r\n\r\n    string public oraclize_network_name;\r\n\r\n    function oraclize_setNetworkName(string _networkName) internal {\r\n        oraclize_network_name = _networkName;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 power) internal pure returns (uint256 result) {\r\n        assert(a >= 0);\r\n        result = 1;\r\n        for (uint256 i = 0; i < power; i++) {\r\n            result *= a;\r\n            assert(result >= a);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * @dev This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Accessable is Ownable {\r\n    \r\n    uint256 public billingPeriod = 28 days;\r\n    \r\n    uint256 public oneTimePrice = 200 szabo;\r\n    \r\n    uint256 public billingAmount = 144 finney;\r\n    \r\n    mapping(address => uint256) public access;\r\n\r\n    event AccessGranted(address addr, uint256 expired);\r\n\r\n    /**\r\n     * @dev Throws if called by any account that's not whitelisted.\r\n     */\r\n    modifier onlyPayed() {\r\n        require(access[msg.sender] > now || msg.value == oneTimePrice);\r\n        _;\r\n    }\r\n    \r\n    function () external payable {\r\n        processPurchase(msg.sender);\r\n    }\r\n    \r\n    //we need to increase the price when the network is under heavy load\r\n    function setOneTimePrice(uint256 _priceInWei) external onlyOwner {\r\n        require(_priceInWei < 2000 szabo); \r\n        oneTimePrice = _priceInWei;\r\n    }\r\n    \r\n    function setbillingAmount(uint256 _priceInWei) external onlyOwner {\r\n        require(_priceInWei < oneTimePrice * 24 * billingPeriod);\r\n        billingAmount = _priceInWei;\r\n    }\r\n    \r\n    function hasAccess(address _who) external returns(bool) {\r\n        return access[_who] > now;\r\n    }\r\n    \r\n    function processPurchase(address _beneficiary) public payable {\r\n        require(_beneficiary != address(0));\r\n        uint256 _units = msg.value / billingAmount;\r\n        require(_units > 0);\r\n        uint256 _remainder = msg.value % billingAmount;\r\n        _beneficiary.transfer(_remainder);\r\n        grantAccess(_beneficiary, _units);\r\n    }\r\n\r\n    /**\r\n     * @dev add an address to the whitelist\r\n     */\r\n    function grantAccess(address _addr, uint256 _periods) internal {\r\n        uint256 _accessExpTime;\r\n        if (access[_addr] < now) {\r\n            _accessExpTime = now + billingPeriod * _periods;\r\n        } else {\r\n            _accessExpTime = _accessExpTime + billingPeriod * _periods;\r\n        }\r\n        access[_addr] = _accessExpTime;\r\n        emit AccessGranted(_addr, _accessExpTime);\r\n    }\r\n}\r\n\r\n\r\ncontract Reoraclizer is UsingOraclize, Accessable {\r\n    using SafeMath for uint256;\r\n\r\n    string internal response; //price in cents\r\n    \r\n    uint256 internal CALLBACK_GAS_LIMIT = 90000;\r\n    \r\n    // will rewritten after deploying\r\n    // needs to prevent high gas price at first oraclize response\r\n    uint256 internal price = 999999;\r\n    \r\n    event NewOraclizeQuery(string description);\r\n\r\n    constructor() public {\r\n        oraclize_setProof(proofType_Android | proofStorage_IPFS);\r\n        oraclize_setCustomGasPrice(10000000000);\r\n    }\r\n    \r\n    /**\r\n    * @dev Receives the response from oraclize.\r\n    */\r\n    function __callback(bytes32 _myid, string _result, bytes _proof) public {\r\n        if (msg.sender != oraclize_cbAddress()) revert();\r\n        price = parseInt(_result, 4);\r\n        _update(3600);\r\n    }\r\n    \r\n    function getEthUsdPrice() external onlyPayed payable returns(uint256) {\r\n        return price;\r\n    }\r\n    \r\n    /**\r\n     * @dev Cyclic query to update ETHUSD price. Period is one hour.\r\n     */\r\n    function _update(uint256 _timeout) internal {\r\n        oraclize_query(_timeout, \"URL\", \"json(https://api.coinmarketcap.com/v2/ticker/1027).data.quotes.USD.price\", CALLBACK_GAS_LIMIT);\r\n    }\r\n    \r\n    function update(uint256 _timeout) public payable onlyOwner {\r\n        _update(_timeout);\r\n    }\r\n    \r\n    function setOraclizeGasLimit (uint256 _gasLimit) external onlyOwner {\r\n        CALLBACK_GAS_LIMIT = _gasLimit;\r\n    }\r\n    \r\n    function setGasPrice(uint256 _gasPrice) external onlyOwner {\r\n        oraclize_setCustomGasPrice(_gasPrice);\r\n    }\r\n    \r\n    function withdrawEth(uint256 _value) external onlyOwner {\r\n        require(address(this).balance > _value.add(3 ether));\r\n        owner.transfer(_value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"oneTimePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_myid\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oraclize_network_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceInWei\",\"type\":\"uint256\"}],\"name\":\"setOneTimePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"billingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"access\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"setOraclizeGasLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getEthUsdPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"processPurchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"billingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceInWei\",\"type\":\"uint256\"}],\"name\":\"setbillingAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"NewOraclizeQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expired\",\"type\":\"uint256\"}],\"name\":\"AccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Reoraclizer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f7477f3943f21b57479f4d56d1015128818e65bc188cf2ab7a23f1e0a6ffe535"}]}