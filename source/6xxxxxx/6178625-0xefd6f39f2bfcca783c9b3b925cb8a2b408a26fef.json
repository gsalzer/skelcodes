{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/*SPEND APPROVAL ALERT INTERFACE*/\r\ninterface tokenRecipient { \r\nfunction receiveApproval(address _from, uint256 _value, \r\naddress _token, bytes _extraData) external; \r\n}\r\n\r\ncontract TOC {\r\n/*tokenchanger.io*/\r\n\r\n/*TOC TOKEN*/\r\nstring public name;\r\nstring public symbol;\r\nuint8 public decimals;\r\nuint256 public totalSupply;\r\n\r\n/*user coin balance*/\r\nmapping (address => uint256) public balances;\r\n/*user coin allowances*/\r\nmapping(address => mapping (address => uint256)) public allowed;\r\n\r\n/*EVENTS*/\t\t\r\n/*broadcast token transfers on the blockchain*/\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n/*broadcast token spend approvals on the blockchain*/\r\nevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n/*MINT TOKEN*/\r\nfunction TOC() public {\r\nname = \"Token Changer\";\r\nsymbol = \"TOC\";\r\ndecimals = 18;\r\n/*one billion base units*/\r\ntotalSupply = 10**27;\r\nbalances[msg.sender] = totalSupply; \r\n}\r\n\r\n/*INTERNAL TRANSFER*/\r\nfunction _transfer(address _from, address _to, uint _value) internal {    \r\n/*prevent transfer to invalid address*/    \r\nif(_to == 0x0) revert();\r\n/*check if the sender has enough value to send*/\r\nif(balances[_from] < _value) revert(); \r\n/*check for overflows*/\r\nif(balances[_to] + _value < balances[_to]) revert();\r\n/*compute sending and receiving balances before transfer*/\r\nuint PreviousBalances = balances[_from] + balances[_to];\r\n/*substract from sender*/\r\nbalances[_from] -= _value;\r\n/*add to the recipient*/\r\nbalances[_to] += _value; \r\n/*check integrity of transfer operation*/\r\nassert(balances[_from] + balances[_to] == PreviousBalances);\r\n/*broadcast transaction*/\r\nemit Transfer(_from, _to, _value); \r\n}\r\n\r\n/*PUBLIC TRANSFERS*/\r\nfunction transfer(address _to, uint256 _value) external returns (bool){\r\n_transfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/*APPROVE THIRD PARTY SPENDING*/\r\nfunction approve(address _spender, uint256 _value) public returns (bool success){\r\n/*update allowance record*/    \r\nallowed[msg.sender][_spender] = _value;\r\n/*broadcast approval*/\r\nemit Approval(msg.sender, _spender, _value); \r\nreturn true;                                        \r\n}\r\n\r\n/*THIRD PARTY TRANSFER*/\r\nfunction transferFrom(address _from, address _to, uint256 _value) \r\nexternal returns (bool success) {\r\n/*check if the message sender can spend*/\r\nrequire(_value <= allowed[_from][msg.sender]); \r\n/*substract from message sender's spend allowance*/\r\nallowed[_from][msg.sender] -= _value;\r\n/*transfer tokens*/\r\n_transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/*APPROVE SPEND ALLOWANCE AND CALL SPENDER*/\r\nfunction approveAndCall(address _spender, uint256 _value, \r\n bytes _extraData) external returns (bool success) {\r\ntokenRecipient \r\nspender = tokenRecipient(_spender);\r\nif(approve(_spender, _value)) {\r\nspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n}\r\nreturn true;\r\n}\r\n\r\n/*INVALID TRANSACTIONS*/\r\nfunction () payable external{\r\nrevert();  \r\n}\r\n\r\n}/////////////////////////////////end of toc token contract\r\n\r\npragma solidity ^0.4.22;\r\n\r\ncontract AirdropDIST {\r\n/*(c)2018 tokenchanger.io -all rights reserved*/\r\n\r\n/*SUPER ADMINS*/\r\naddress Mars = 0x1947f347B6ECf1C3D7e1A58E3CDB2A15639D48Be;\r\naddress Mercury = 0x00795263bdca13104309Db70c11E8404f81576BE;\r\naddress Europa = 0x00e4E3eac5b520BCa1030709a5f6f3dC8B9e1C37;\r\naddress Jupiter = 0x2C76F260707672e240DC639e5C9C62efAfB59867;\r\naddress Neptune = 0xEB04E1545a488A5018d2b5844F564135211d3696;\r\n\r\n/*CONTRACT ADDRESS*/\r\nfunction GetContractAddr() public constant returns (address){\r\nreturn this;\r\n}\t\r\naddress ContractAddr = GetContractAddr();\r\n\r\n\r\n/*AIRDROP RECEPIENTS*/\r\nstruct Accounting{\r\nbool Received;    \r\n}\r\n\r\nstruct Admin{\r\nbool Authorised; \r\nuint256 Level;\r\n}\r\n\r\nstruct Config{\r\nuint256 TocAmount;\t\r\naddress TocAddr;\r\n}\r\n\r\n/*DATA STORAGE*/\r\nmapping (address => Accounting) public account;\r\nmapping (address => Config) public config;\r\nmapping (address => Admin) public admin;\r\n\r\n/*AUTHORISE ADMIN*/\r\nfunction AuthAdmin(address _admin, bool _authority, uint256 _level) external \r\nreturns(bool) {\r\nif((msg.sender != Mars) && (msg.sender != Mercury) && (msg.sender != Europa)\r\n&& (msg.sender != Jupiter) && (msg.sender != Neptune)) revert();  \r\nadmin[_admin].Authorised = _authority; \r\nadmin[_admin].Level = _level;\r\nreturn true;\r\n} \r\n\r\n/*CONFIGURATION*/\r\nfunction SetUp(uint256 _amount, address _tocaddr) external returns(bool){\r\n/*integrity checks*/      \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert();\r\n/*update configuration records*/\r\nconfig[ContractAddr].TocAmount = _amount;\r\nconfig[ContractAddr].TocAddr = _tocaddr;\r\nreturn true;\r\n}\r\n\r\n/*DEPOSIT TOC*/\r\nfunction receiveApproval(address _from, uint256 _value, \r\naddress _token, bytes _extraData) external returns(bool){ \r\nTOC\r\nTOCCall = TOC(_token);\r\nTOCCall.transferFrom(_from,this,_value);\r\nreturn true;\r\n}\r\n\r\n/*WITHDRAW TOC*/\r\nfunction Withdraw(uint256 _amount) external returns(bool){\r\n/*integrity checks*/      \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert();\r\n/*withdraw TOC from this contract*/\r\nTOC\r\nTOCCall = TOC(config[ContractAddr].TocAddr);\r\nTOCCall.transfer(msg.sender, _amount);\r\nreturn true;\r\n}\r\n\r\n/*GET TOC*/\r\nfunction Get() external returns(bool){\r\n/*integrity check-1*/      \r\nif(account[msg.sender].Received == true) revert();\r\n/*change message sender received status*/\r\naccount[msg.sender].Received = true;\r\n/*send TOC to message sender*/\r\nTOC\r\nTOCCall = TOC(config[ContractAddr].TocAddr);\r\nTOCCall.transfer(msg.sender, config[ContractAddr].TocAmount);\r\n/*integrity check-2*/      \r\nassert(account[msg.sender].Received == true);\r\nreturn true;\r\n}\r\n\r\n/*INVALID TRANSACTIONS*/\r\nfunction () payable external{\r\nrevert();  \r\n}\r\n\r\n}////////////////////////////////end of AirdropDIST contract","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[{\"name\":\"TocAmount\",\"type\":\"uint256\"},{\"name\":\"TocAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tocaddr\",\"type\":\"address\"}],\"name\":\"SetUp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"name\":\"Authorised\",\"type\":\"bool\"},{\"name\":\"Level\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_authority\",\"type\":\"bool\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"AuthAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"account\",\"outputs\":[{\"name\":\"Received\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Get\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"AirdropDIST","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://219ab5be09d64fb6e08399933b71a8f6a692ea548e1d8a56bdbce9f00e4ac6db"}]}