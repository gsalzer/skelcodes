{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract token {\r\n    function transfer(address receiver, uint256 amount) public;\r\n    function balanceOf(address _owner) public pure returns (uint256 balance);\r\n    function burnFrom(address from, uint256 value) public;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  \r\n}\r\n\r\n\r\n/**\r\n * To buy ADT user must be Whitelisted\r\n * Add user address and value to Whitelist\r\n * Remove user address from Whitelist\r\n * Check if User is Whitelisted\r\n * Check if User have equal or greater value than Whitelisted\r\n */\r\n \r\nlibrary Whitelist {\r\n    \r\n    struct List {\r\n        mapping(address => bool) registry;\r\n        mapping(address => uint256) amount;\r\n    }\r\n\r\n    function addUserWithValue(List storage list, address _addr, uint256 _value)\r\n        internal\r\n    {\r\n        list.registry[_addr] = true;\r\n        list.amount[_addr] = _value;\r\n    }\r\n    \r\n    function add(List storage list, address _addr)\r\n        internal\r\n    {\r\n        list.registry[_addr] = true;\r\n    }\r\n\r\n    function remove(List storage list, address _addr)\r\n        internal\r\n    {\r\n        list.registry[_addr] = false;\r\n        list.amount[_addr] = 0;\r\n    }\r\n\r\n    function check(List storage list, address _addr)\r\n        view\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return list.registry[_addr];\r\n    }\r\n\r\n    function checkValue(List storage list, address _addr, uint256 _value)\r\n        view\r\n        internal\r\n        returns (bool)\r\n    {\r\n        /** \r\n         * divided by  10^18 because ether decimal is 18\r\n         * and conversion to ether to uint256 is carried out \r\n        */\r\n         \r\n        return list.amount[_addr] <= _value;\r\n    }\r\n}\r\n\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = 0x91520dc19a9e103a849076a9dd860604ff7a6282;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Contract to whitelist User for buying token\r\n */\r\ncontract Whitelisted is owned {\r\n\r\n    Whitelist.List private _list;\r\n    uint256 decimals = 100000000000000;\r\n    \r\n    modifier onlyWhitelisted() {\r\n        require(Whitelist.check(_list, msg.sender) == true);\r\n        _;\r\n    }\r\n\r\n    event AddressAdded(address _addr);\r\n    event AddressRemoved(address _addr);\r\n    event AddressReset(address _addr);\r\n    \r\n    /**\r\n     * Add User to Whitelist with ether amount\r\n     * @param _address User Wallet address\r\n     * @param amount The amount of ether user Whitelisted\r\n     */\r\n    function addWhiteListAddress(address _address, uint256 amount)\r\n    public {\r\n        \r\n        require(!isAddressWhiteListed(_address));\r\n        \r\n        uint256 val = SafeMath.mul(amount, decimals);\r\n        Whitelist.addUserWithValue(_list, _address, val);\r\n        \r\n        emit AddressAdded(_address);\r\n    }\r\n    \r\n    /**\r\n     * Set User's Whitelisted ether amount to 0 so that \r\n     * during second buy transaction user won't need to \r\n     * validate for Whitelisted amount\r\n     */\r\n    function resetUserWhiteListAmount()\r\n    internal {\r\n        \r\n        Whitelist.addUserWithValue(_list, msg.sender, 0);\r\n        emit AddressReset(msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n     * Disable User from Whitelist so user can't buy token\r\n     * @param _addr User Wallet address\r\n     */\r\n    function disableWhitelistAddress(address _addr)\r\n    public onlyOwner {\r\n        \r\n        Whitelist.remove(_list, _addr);\r\n        emit AddressRemoved(_addr);\r\n    }\r\n    \r\n    /**\r\n     * Check if User is Whitelisted\r\n     * @param _addr User Wallet address\r\n     */\r\n    function isAddressWhiteListed(address _addr)\r\n    public\r\n    view\r\n    returns (bool) {\r\n        \r\n        return Whitelist.check(_list, _addr);\r\n    }\r\n\r\n\r\n    /**\r\n     * Check if User has enough ether amount in Whitelisted to buy token \r\n     * @param _addr User Wallet address\r\n     * @param amount The amount of ether user inputed\r\n     */\r\n    function isWhiteListedValueValid(address _addr, uint256 amount)\r\n    public\r\n    view\r\n    returns (bool) {\r\n        \r\n        return Whitelist.checkValue(_list, _addr, amount);\r\n    }\r\n\r\n\r\n   /**\r\n     * Check if User is valid to buy token \r\n     * @param _addr User Wallet address\r\n     * @param amount The amount of ether user inputed\r\n     */\r\n    function isValidUser(address _addr, uint256 amount)\r\n    public\r\n    view\r\n    returns (bool) {\r\n        \r\n        return isAddressWhiteListed(_addr) && isWhiteListedValueValid(_addr, amount);\r\n    }\r\n    \r\n    /**\r\n     * returns the total amount of the address hold by the user during white list\r\n     */\r\n    function getUserAmount(address _addr) public constant returns (uint256) {\r\n        \r\n        require(isAddressWhiteListed(_addr));\r\n        return _list.amount[_addr];\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\ncontract AccessCrowdsale is Whitelisted {\r\n    using SafeMath for uint256;\r\n    \r\n    address public beneficiary;\r\n    uint256 public SoftCap;\r\n    uint256 public HardCap;\r\n    uint256 public amountRaised;\r\n    uint256 public preSaleStartdate;\r\n    uint256 public preSaleDeadline;\r\n    uint256 public mainSaleStartdate;\r\n    uint256 public mainSaleDeadline;\r\n    uint256 public price;\r\n    uint256 public fundTransferred;\r\n    uint256 public tokenSold;\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    bool crowdsaleClosed = false;\r\n    bool returnFunds = false;\r\n\t\r\n    event GoalReached(address recipient, uint totalAmountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    constructor() public {\r\n        beneficiary = 0x91520dc19a9e103a849076a9dd860604ff7a6282;\r\n        SoftCap = 15000 ether;\r\n        HardCap = 150000 ether;\r\n        preSaleStartdate = 1550102400;\r\n        preSaleDeadline = 1552608000;\r\n        mainSaleStartdate = 1552611600;\r\n        mainSaleDeadline = 1560643200;\r\n        price = 0.0004 ether;\r\n        tokenReward = token(0x97e4017964bc43ec8b3ceadeae27d89bc5a33c7b);\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable public {\r\n        \r\n        uint256 bonus = 0;\r\n        uint256 amount;\r\n        uint256 ethamount = msg.value;\r\n        \r\n        require(!crowdsaleClosed);\r\n        // divide by price to get the actual adt token\r\n        uint256 onlyAdt = ethamount.div(price);\r\n        // multiply adt value with decimal of adt to get the wei adt\r\n        uint256 weiAdt = SafeMath.mul(onlyAdt, 100000000000000);\r\n    \r\n        require(isValidUser(msg.sender, weiAdt));\r\n\r\n\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(ethamount);\r\n        amountRaised = amountRaised.add(ethamount);\r\n        \r\n        //add bonus for funders\r\n        if(now >= preSaleStartdate && now <= preSaleDeadline){\r\n            amount =  ethamount.div(price);\r\n            bonus = amount * 33 / 100;\r\n            amount = amount.add(bonus);\r\n        }\r\n        else if(now >= mainSaleStartdate && now <= mainSaleStartdate + 30 days){\r\n            amount =  ethamount.div(price);\r\n            bonus = amount * 25/100;\r\n            amount = amount.add(bonus);\r\n        }\r\n        else if(now >= mainSaleStartdate + 30 days && now <= mainSaleStartdate + 45 days){\r\n            amount =  ethamount.div(price);\r\n            bonus = amount * 15/100;\r\n            amount = amount.add(bonus);\r\n        }\r\n        else if(now >= mainSaleStartdate + 45 days && now <= mainSaleStartdate + 60 days){\r\n            amount =  ethamount.div(price);\r\n            bonus = amount * 10/100;\r\n            amount = amount.add(bonus);\r\n        } else {\r\n            amount =  ethamount.div(price);\r\n            bonus = amount * 7/100;\r\n            amount = amount.add(bonus);\r\n        }\r\n        \r\n        amount = amount.mul(100000000000000);\r\n        tokenReward.transfer(msg.sender, amount);\r\n        tokenSold = tokenSold.add(amount);\r\n        \r\n        resetUserWhiteListAmount();\r\n        emit FundTransfer(msg.sender, ethamount, true);\r\n    }\r\n\r\n    modifier afterDeadline() {if (now >= mainSaleDeadline) _; }\r\n\r\n    /**\r\n     *ends the campaign after deadline\r\n     */\r\n     \r\n    function endCrowdsale() public afterDeadline  onlyOwner {\r\n        crowdsaleClosed = true;\r\n    }\r\n    \r\n    function EnableReturnFunds() public onlyOwner {\r\n        returnFunds = true;\r\n    }\r\n    \r\n    function DisableReturnFunds() public onlyOwner {\r\n        returnFunds = false;\r\n    }\r\n\t\r\n    function ChangePrice(uint256 _price) public onlyOwner {\r\n        price = _price;\t\r\n    }\r\n\r\n    function ChangeBeneficiary(address _beneficiary) public onlyOwner {\r\n        beneficiary = _beneficiary;\t\r\n    }\r\n\t \r\n    function ChangePreSaleDates(uint256 _preSaleStartdate, uint256 _preSaleDeadline) onlyOwner public{\r\n        if(_preSaleStartdate != 0){\r\n            preSaleStartdate = _preSaleStartdate;\r\n        }\r\n        if(_preSaleDeadline != 0){\r\n            preSaleDeadline = _preSaleDeadline;\r\n        }\r\n        \r\n        if(crowdsaleClosed == true){\r\n            crowdsaleClosed = false;\r\n        }\r\n    }\r\n    \r\n    function ChangeMainSaleDates(uint256 _mainSaleStartdate, uint256 _mainSaleDeadline) onlyOwner public{\r\n        if(_mainSaleStartdate != 0){\r\n            mainSaleStartdate = _mainSaleStartdate;\r\n        }\r\n        if(_mainSaleDeadline != 0){\r\n            mainSaleDeadline = _mainSaleDeadline; \r\n        }\r\n        \r\n        if(crowdsaleClosed == true){\r\n            crowdsaleClosed = false;       \r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Get all the remaining token back from the contract\r\n     */\r\n    function getTokensBack() onlyOwner public{\r\n        \r\n        require(crowdsaleClosed);\r\n        \r\n        uint256 remaining = tokenReward.balanceOf(this);\r\n        tokenReward.transfer(beneficiary, remaining);\r\n    }\r\n    \r\n    /**\r\n     * User can get their ether back if crowdsale didn't meet it's requirement \r\n     */\r\n    function safeWithdrawal() public afterDeadline {\r\n        if (returnFunds) {\r\n            uint amount = balanceOf[msg.sender];\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                    emit FundTransfer(msg.sender, amount, false);\r\n                    balanceOf[msg.sender] = 0;\r\n                    fundTransferred = fundTransferred.add(amount);\r\n                } \r\n            }\r\n        }\r\n\r\n        if (returnFunds == false && beneficiary == msg.sender) {\r\n            uint256 ethToSend = amountRaised - fundTransferred;\r\n            if (beneficiary.send(ethToSend)) {\r\n                fundTransferred = fundTransferred.add(ethToSend);\r\n            } \r\n        }\r\n    }\r\n    \r\n    function getResponse(uint256 val) public constant returns(uint256) {\r\n        uint256 adtDec = 100000000000000;\r\n        \r\n        uint256 onlyAdt = val.div(price);\r\n        // multiply adt value with decimal of adt to get the wei adt\r\n        uint256 weiAdt = SafeMath.mul(onlyAdt, adtDec);\r\n        \r\n        return weiAdt;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addWhiteListAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"EnableReturnFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preSaleStartdate\",\"type\":\"uint256\"},{\"name\":\"_preSaleDeadline\",\"type\":\"uint256\"}],\"name\":\"ChangePreSaleDates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundTransferred\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"ChangeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"getResponse\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mainSaleStartdate\",\"type\":\"uint256\"},{\"name\":\"_mainSaleDeadline\",\"type\":\"uint256\"}],\"name\":\"ChangeMainSaleDates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DisableReturnFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"isWhiteListedValueValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokensBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAddressWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleStartdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleStartdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"isValidUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"disableWhitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"ChangePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddressReset\",\"type\":\"event\"}]","ContractName":"AccessCrowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ca9d6a12440b12eab3af8265405fc5e2c5778440c4fc4aa21c665bacd828f1f3"}]}