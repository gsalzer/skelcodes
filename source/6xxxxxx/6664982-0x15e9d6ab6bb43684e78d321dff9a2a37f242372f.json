{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract CoooinsCoinAd {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public coinId;\r\n  uint256 public purchaseTimestamp;\r\n  uint256 public purchaseSeconds;\r\n  uint256 public adPriceDay;\r\n  uint256 public adPriceWeek;\r\n  uint256 public adPriceMonth;\r\n  uint256 public adPriceMultiple;\r\n  address public contractOwner;\r\n\r\n  event newAd(address indexed buyer, uint256 amount, uint256 indexed coinId, uint256 purchaseSeconds, uint256 purchaseTimestamp, uint256 adPriceMultiple);\r\n\r\n  modifier onlyContractOwner {\r\n    require(msg.sender == contractOwner);\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    adPriceDay = 10000000000000000;\r\n    adPriceWeek = 50000000000000000;\r\n    adPriceMonth = 150000000000000000;\r\n    adPriceMultiple = 1;\r\n    contractOwner = 0x2E26a4ac59094DA46a0D8d65D90A7F7B51E5E69A;\r\n  }\r\n\r\n  function withdraw() public onlyContractOwner {\r\n    contractOwner.transfer(address(this).balance);\r\n  }\r\n\r\n  function setAdPriceMultiple(uint256 amount) public onlyContractOwner {\r\n    adPriceMultiple = amount;\r\n  }\r\n\r\n  function updateAd(uint256 id) public payable {\r\n    // set minimum amount and make sure ad hasnt expired\r\n    require(msg.value >= adPriceMultiple.mul(adPriceDay));\r\n    require(block.timestamp > purchaseTimestamp.add(purchaseSeconds));\r\n    require(id > 0);\r\n\r\n    // set ad time limit in seconds\r\n    if (msg.value >= adPriceMultiple.mul(adPriceMonth)) {\r\n      purchaseSeconds = 2592000; // 1 month\r\n    } else if (msg.value >= adPriceMultiple.mul(adPriceWeek)) {\r\n      purchaseSeconds = 604800; // 1 week\r\n    } else {\r\n      purchaseSeconds = 86400; // 1 day\r\n    }\r\n\r\n    coinId = id;\r\n    purchaseTimestamp = block.timestamp;\r\n\r\n    emit newAd(msg.sender, msg.value, coinId, purchaseSeconds, purchaseTimestamp, adPriceMultiple);\r\n  }\r\n\r\n  function getPurchaseTimestampEnds() public view returns (uint _getPurchaseTimestampAdEnds) {\r\n    return purchaseTimestamp.add(purchaseSeconds);\r\n  }\r\n\r\n  function getBalance() public view returns(uint256){\r\n    return address(this).balance;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"adPriceDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"updateAd\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adPriceMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adPriceMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAdPriceMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPurchaseTimestampEnds\",\"outputs\":[{\"name\":\"_getPurchaseTimestampAdEnds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adPriceWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"coinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchaseSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchaseTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"adPriceMultiple\",\"type\":\"uint256\"}],\"name\":\"newAd\",\"type\":\"event\"}]","ContractName":"CoooinsCoinAd","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4bdebfb262b5421674f5d72da1dcb258780ee7729360e1125c316c96de58c1cd"}]}