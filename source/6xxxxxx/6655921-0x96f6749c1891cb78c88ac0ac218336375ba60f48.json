{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/*\r\n    ERC20 compatible smart contract\r\n*/\r\ncontract Token is StandardToken {\r\n    /* Public variables of the token */\r\n    string public name;\r\n\r\n    string public version = \"0.1\";\r\n\r\n    string public symbol;\r\n\r\n    uint8 public decimals;\r\n\r\n    uint256 public creationBlock;\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function Token(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol,\r\n        bool transferAllSupplyToOwner\r\n    ) public {\r\n        totalSupply_ = initialSupply;\r\n\r\n        if (transferAllSupplyToOwner) {\r\n            balances[msg.sender] = initialSupply;\r\n        } else {\r\n            balances[this] = initialSupply;\r\n        }\r\n\r\n        // Set the name for display purposes\r\n        name = tokenName;\r\n        // Set the symbol for display purposes\r\n        symbol = tokenSymbol;\r\n        // Amount of decimals for display purposes\r\n        decimals = decimalUnits;\r\n        // Set creation block\r\n        creationBlock = block.number;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Multivest is Ownable {\r\n    /* public variables */\r\n    mapping(address => bool) public allowedMultivests;\r\n\r\n    /* events */\r\n    event Contribution(address _holder, uint256 value, uint256 tokens);\r\n    \r\n    /* modifier */\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAllowedMultivests() {\r\n        require(true == allowedMultivests[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /* constructor */\r\n    function Multivest(address multivest) public {\r\n        allowedMultivests[multivest] = true;\r\n    }\r\n\r\n    /* public methods */\r\n    function setAllowedMultivest(address _address) public onlyOwner {\r\n        allowedMultivests[_address] = true;\r\n    }\r\n\r\n    function unsetAllowedMultivest(address _address) public onlyOwner {\r\n        allowedMultivests[_address] = false;\r\n    }\r\n\r\n    function multivestBuy(address holder, uint256 value) public onlyPayloadSize(2) onlyAllowedMultivests {\r\n        bool status = buy(holder, block.timestamp, value);\r\n        require(status == true);\r\n    }\r\n\r\n    function buy(address _address, uint256 time, uint256 value) internal returns (bool);\r\n}\r\n\r\n\r\ncontract Ryfts is Token, Multivest {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public allocatedTokensForSale;\r\n    uint256 public collectedEthers;\r\n    bool public isRefundAllowed;\r\n    bool public whitelistActive;\r\n    bool public phasesSet;\r\n\r\n    bool public locked;\r\n\r\n    mapping (address => uint256) public sentEthers;\r\n\r\n    Phase[] public phases;\r\n\r\n    struct Phase {\r\n        uint256 price;\r\n        uint256 since;\r\n        uint256 till;\r\n        uint256 allocatedTokens;\r\n        // min. goal of tokens sold including bonuses\r\n        uint256 goalMinSoldTokens;\r\n        uint256 minContribution;\r\n        uint256 maxContribution;\r\n        uint256 soldTokens;\r\n        bool isFinished;\r\n        mapping (address => bool) whitelist;\r\n    }\r\n\r\n    event Refund(address holder, uint256 ethers, uint256 tokens);\r\n\r\n    function Ryfts(\r\n        address _reserveAccount,\r\n        uint256 _reserveAmount,\r\n        uint256 _initialSupply,\r\n        string _tokenName,\r\n        string _tokenSymbol,\r\n        address _multivestMiddleware,\r\n        bool _locked\r\n    )\r\n        public\r\n        Token(_initialSupply, _tokenName, 18, _tokenSymbol, false)\r\n        Multivest(_multivestMiddleware)\r\n    {\r\n        require(_reserveAmount <= _initialSupply);\r\n\r\n        // lock sale\r\n        locked = _locked;\r\n\r\n        balances[_reserveAccount] = _reserveAmount;\r\n        balances[this] = balanceOf(this).sub(balanceOf(_reserveAccount));\r\n\r\n        allocatedTokensForSale = balanceOf(this);\r\n    \r\n        emit Transfer(this, _reserveAccount, balanceOf(_reserveAccount));\r\n    }\r\n\r\n    function() public payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function setSalePhases(\r\n        uint256 _preIcoTokenPrice,\r\n        uint256 _preIcoSince,\r\n        uint256 _preIcoTill,\r\n        uint256 _allocatedTokensForPreICO,\r\n        uint256 _minPreIcoContribution,\r\n        uint256 _maxPreIcoContribution,\r\n\r\n        uint256 _icoTokenPrice,\r\n        uint256 _icoSince,\r\n        uint256 _icoTill,\r\n        uint256  _goalIcoMinSoldTokens\r\n    ) public onlyOwner {\r\n        require(phasesSet == false);\r\n        require(_allocatedTokensForPreICO < allocatedTokensForSale);\r\n        require(_goalIcoMinSoldTokens <= allocatedTokensForSale - _allocatedTokensForPreICO);\r\n        require((_preIcoSince < _preIcoTill) && (_icoSince < _icoTill) && (_preIcoTill <= _icoSince));\r\n        require(_minPreIcoContribution <= _maxPreIcoContribution);\r\n        phasesSet = true;\r\n        phases.push(\r\n            Phase(\r\n                _preIcoTokenPrice,\r\n                _preIcoSince,\r\n                _preIcoTill,\r\n                _allocatedTokensForPreICO,\r\n                0,\r\n                _minPreIcoContribution,\r\n                _maxPreIcoContribution,\r\n                0,\r\n                false\r\n            )\r\n        );\r\n        phases.push(\r\n            Phase(\r\n                _icoTokenPrice,\r\n                _icoSince,\r\n                _icoTill,\r\n                allocatedTokensForSale - _allocatedTokensForPreICO,\r\n                _goalIcoMinSoldTokens,\r\n                0,\r\n                0,\r\n                0,\r\n                false\r\n            )\r\n        );\r\n    }\r\n\r\n    function getCurrentPhase(uint256 _time) public constant returns (uint8) {\r\n        require(phasesSet == true);\r\n        if (_time == 0) {\r\n            return uint8(phases.length);\r\n        }\r\n        for (uint8 i = 0; i < phases.length; i++) {\r\n            Phase storage phase = phases[i];\r\n            if (phase.since > _time) {\r\n                continue;\r\n            }\r\n\r\n            if (phase.till < _time) {\r\n                continue;\r\n            }\r\n\r\n            return i;\r\n        }\r\n\r\n        return uint8(phases.length);\r\n    }\r\n\r\n    function getBonusAmount(uint256 time, uint256 amount) public constant returns (uint256) {\r\n        uint8 currentPhase = getCurrentPhase(time);\r\n        Phase storage phase = phases[currentPhase];\r\n\r\n        // First 10 mil. have bonus\r\n        if (phase.soldTokens < 10000000000000000000000000) {\r\n            return amount.mul(40).div(100);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function addToWhitelist(uint8 _phaseId, address _address) public onlyOwner {\r\n\r\n        require(phases.length > _phaseId);\r\n\r\n        Phase storage phase = phases[_phaseId];\r\n\r\n        phase.whitelist[_address] = true;\r\n\r\n    }\r\n\r\n    function removeFromWhitelist(uint8 _phaseId, address _address) public onlyOwner {\r\n\r\n        require(phases.length > _phaseId);\r\n\r\n        Phase storage phase = phases[_phaseId];\r\n\r\n        phase.whitelist[_address] = false;\r\n    }\r\n\r\n    function setTokenPrice(uint8 _phaseId, uint256 _value) public onlyOwner {\r\n        require(phases.length > _phaseId);\r\n        Phase storage phase = phases[_phaseId];\r\n        phase.price = _value;\r\n    }\r\n\r\n    function setPeriod(uint8 _phaseId, uint256 _since, uint256 _till) public onlyOwner {\r\n        require(phases.length > _phaseId);\r\n        // restrict changing phase after it begins\r\n        require(now < phase.since);\r\n\r\n        Phase storage phase = phases[_phaseId];\r\n        phase.since = _since;\r\n        phase.till = _till;\r\n    }\r\n\r\n    function setLocked(bool _locked) public onlyOwner {\r\n        locked = _locked;\r\n    }\r\n\r\n    function finished(uint8 _phaseId) public returns (bool) {\r\n        require(phases.length > _phaseId);\r\n        Phase storage phase = phases[_phaseId];\r\n\r\n        if (phase.isFinished == true) {\r\n            return true;\r\n        }\r\n\r\n        uint256 unsoldTokens = phase.allocatedTokens.sub(phase.soldTokens);\r\n\r\n        if (block.timestamp > phase.till || phase.allocatedTokens == phase.soldTokens || balanceOf(this) == 0) {\r\n            if (_phaseId == 1) {\r\n                balances[this] = 0;\r\n                emit Transfer(this, address(0), unsoldTokens);\r\n\r\n                if (phase.soldTokens >= phase.goalMinSoldTokens) {\r\n                    isRefundAllowed = false;\r\n                } else {\r\n                    isRefundAllowed = true;\r\n                }\r\n            }\r\n            if (_phaseId == 0) {\r\n                if (unsoldTokens > 0) {\r\n                    transferUnusedTokensToICO(unsoldTokens);\r\n                    phase.allocatedTokens = phase.soldTokens;\r\n                }\r\n\r\n            }\r\n            phase.isFinished = true;\r\n\r\n        }\r\n\r\n        return phase.isFinished;\r\n    }\r\n\r\n    function refund() public returns (bool) {\r\n        return refundInternal(msg.sender);\r\n    }\r\n\r\n    function refundFor(address holder) public returns (bool) {\r\n        return refundInternal(holder);\r\n    }\r\n\r\n    function transferEthers() public onlyOwner {\r\n        require(false == isActive(1));\r\n        Phase storage phase = phases[1];\r\n        if (phase.till <= block.timestamp) {\r\n            require(phase.isFinished == true && isRefundAllowed == false);\r\n            owner.transfer(address(this).balance);\r\n        } else {\r\n            owner.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function setWhitelistStatus(bool _value) public onlyOwner {\r\n        whitelistActive = _value;\r\n    }\r\n\r\n    function setMinMaxContribution(uint8 _phaseId, uint256 _min, uint256 _max) public onlyOwner {\r\n        require(phases.length > _phaseId);\r\n        Phase storage phase = phases[_phaseId];\r\n        require(_min <= _max || _max == 0);\r\n\r\n        phase.minContribution = _min;\r\n        phase.maxContribution = _max;\r\n    }\r\n\r\n    function calculateTokensAmount(address _address, uint256 _time, uint256 _value) public constant returns(uint256) {\r\n        uint8 currentPhase = getCurrentPhase(_time);\r\n        Phase storage phase = phases[currentPhase];\r\n\r\n        if (true == whitelistActive && phase.whitelist[_address] == false) {\r\n            return 0;\r\n        }\r\n\r\n        if (phase.isFinished) {\r\n            return 0;\r\n        }\r\n\r\n        if (false == checkValuePermission(currentPhase, _value)) {\r\n            return 0;\r\n        }\r\n\r\n        // Check if total investment in phase is lower than max. amount of contribution\r\n        if (phase.maxContribution != 0 && sentEthers[_address] != 0) {\r\n            uint allTimeInvestment = sentEthers[_address].add(_value);\r\n            if (allTimeInvestment > phase.maxContribution) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        return _value.mul(uint256(10) ** decimals).div(phase.price);\r\n    }\r\n\r\n    // @return true if sale period is active\r\n    function isActive(uint8 _phaseId) public constant returns (bool) {\r\n        require(phases.length > _phaseId);\r\n        Phase storage phase = phases[_phaseId];\r\n        if (phase.soldTokens > uint256(0) && phase.soldTokens == phase.allocatedTokens) {\r\n            return false;\r\n        }\r\n        return withinPeriod(_phaseId);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function withinPeriod(uint8 _phaseId) public constant returns (bool) {\r\n        require(phases.length > _phaseId);\r\n        Phase storage phase = phases[_phaseId];\r\n        return block.timestamp >= phase.since && block.timestamp <= phase.till;\r\n    }\r\n\r\n    function buyTokens() public payable {\r\n        bool status = buy(msg.sender, block.timestamp, msg.value);\r\n        require(status == true);\r\n\r\n        sentEthers[msg.sender] = sentEthers[msg.sender].add(msg.value);\r\n    }\r\n\r\n    /* solhint-disable code-complexity */\r\n    function buy(address _address, uint256 _time, uint256 _value) internal returns (bool) {\r\n        if (locked == true) {\r\n            return false;\r\n        }\r\n        uint8 currentPhase = getCurrentPhase(_time);\r\n        Phase storage phase = phases[currentPhase];\r\n        if (_value == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 amount = calculateTokensAmount(_address, _time, _value);\r\n\r\n        if (amount == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 totalAmount = amount.add(getBonusAmount(_time, amount));\r\n\r\n        if (phase.allocatedTokens < phase.soldTokens + totalAmount) {\r\n            return false;\r\n        }\r\n\r\n        phase.soldTokens = phase.soldTokens.add(totalAmount);\r\n\r\n        if (balanceOf(this) < totalAmount) {\r\n            return false;\r\n        }\r\n\r\n        if (balanceOf(_address) + totalAmount < balanceOf(_address)) {\r\n            return false;\r\n        }\r\n\r\n        balances[this] = balanceOf(this).sub(totalAmount);\r\n        balances[_address] = balanceOf(_address).add(totalAmount);\r\n\r\n        collectedEthers = collectedEthers.add(_value);\r\n\r\n        emit Contribution(_address, _value, totalAmount);\r\n        emit Transfer(this, _address, totalAmount);\r\n        return true;\r\n    }\r\n\r\n    function refundInternal(address holder) internal returns (bool success) {\r\n        Phase storage phase = phases[1];\r\n        require(phase.isFinished == true && isRefundAllowed == true);\r\n        uint256 refundEthers = sentEthers[holder];\r\n        uint256 refundTokens = balanceOf(holder);\r\n\r\n        if (refundEthers == 0 && refundTokens == 0) {\r\n            return false;\r\n        }\r\n\r\n        balances[holder] = 0;\r\n        sentEthers[holder] = 0;\r\n\r\n        if (refundEthers > 0) {\r\n            holder.transfer(refundEthers);\r\n        }\r\n\r\n        emit Refund(holder, refundEthers, refundTokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferUnusedTokensToICO(uint256 _unsoldPreICO) internal {\r\n        Phase storage phase = phases[1];\r\n        phase.allocatedTokens = phase.allocatedTokens.add(_unsoldPreICO);\r\n    }\r\n\r\n    function checkValuePermission(uint8 _phaseId, uint256 _value) internal view returns (bool) {\r\n        require(phases.length > _phaseId);\r\n        Phase storage phase = phases[_phaseId];\r\n\r\n        if (phase.minContribution == 0 && phase.maxContribution == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (phase.minContribution <= _value && _value <= phase.maxContribution) {\r\n            return true;\r\n        }\r\n\r\n        if (_value > phase.maxContribution && phase.maxContribution != 0) {\r\n            return false;\r\n        }\r\n\r\n        if (_value < phase.minContribution) {\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"collectedEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calculateTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"multivestBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_phaseId\",\"type\":\"uint8\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"since\",\"type\":\"uint256\"},{\"name\":\"till\",\"type\":\"uint256\"},{\"name\":\"allocatedTokens\",\"type\":\"uint256\"},{\"name\":\"goalMinSoldTokens\",\"type\":\"uint256\"},{\"name\":\"minContribution\",\"type\":\"uint256\"},{\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"name\":\"soldTokens\",\"type\":\"uint256\"},{\"name\":\"isFinished\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sentEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefundAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_phaseId\",\"type\":\"uint8\"},{\"name\":\"_since\",\"type\":\"uint256\"},{\"name\":\"_till\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unsetAllowedMultivest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setWhitelistStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedMultivests\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_phaseId\",\"type\":\"uint8\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getCurrentPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"refundFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_phaseId\",\"type\":\"uint8\"}],\"name\":\"finished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAllowedMultivest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_phaseId\",\"type\":\"uint8\"}],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_phaseId\",\"type\":\"uint8\"},{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMinMaxContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_phaseId\",\"type\":\"uint8\"}],\"name\":\"withinPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preIcoTokenPrice\",\"type\":\"uint256\"},{\"name\":\"_preIcoSince\",\"type\":\"uint256\"},{\"name\":\"_preIcoTill\",\"type\":\"uint256\"},{\"name\":\"_allocatedTokensForPreICO\",\"type\":\"uint256\"},{\"name\":\"_minPreIcoContribution\",\"type\":\"uint256\"},{\"name\":\"_maxPreIcoContribution\",\"type\":\"uint256\"},{\"name\":\"_icoTokenPrice\",\"type\":\"uint256\"},{\"name\":\"_icoSince\",\"type\":\"uint256\"},{\"name\":\"_icoTill\",\"type\":\"uint256\"},{\"name\":\"_goalIcoMinSoldTokens\",\"type\":\"uint256\"}],\"name\":\"setSalePhases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBonusAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_phaseId\",\"type\":\"uint8\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocatedTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferEthers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phasesSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_reserveAccount\",\"type\":\"address\"},{\"name\":\"_reserveAmount\",\"type\":\"uint256\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_multivestMiddleware\",\"type\":\"address\"},{\"name\":\"_locked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Ryfts","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000af0f557a9a7e84bdd02adbc14962df2789d95d4e000000000000000000000000000000000000000000027b46536c66c8e30000000000000000000000000000000000000000000000001b4c0595a86aa1c100000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000c420504a56e330b0c0fe3f104227313d5212ba6900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005527966747300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035246540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d585a64d4740f51828f704341cdabfb91a50c85ee5a5ae13570f95121b94f080"}]}