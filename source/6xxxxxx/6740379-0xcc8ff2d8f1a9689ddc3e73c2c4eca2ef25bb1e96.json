{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n *  X3ProfitInMonth contract (300% per 33 day, 99% per 11 day, 9% per day, in first iteration)\r\n *  This percent will decrease every restart of system to lowest value of 0.9% per day\r\n *\r\n *  Improved, no bugs and backdoors! Your investments are safe!\r\n *\r\n *  LOW RISK! You can take your deposit back ANY TIME!\r\n *     - Send 0.00000112 ETH to contract address\r\n *\r\n *  NO DEPOSIT FEES! All the money go to contract!\r\n *\r\n *  LOW WITHDRAWAL FEES! Advertising 10% to OUR MAIN CONTRACT 0xf85D337017D9e6600a433c5036E0D18EdD0380f3\r\n *\r\n *  HAVE COMMAND PREPARATION TIME DURING IT WILL BE RETURN ONLY INVESTED AMOUNT AND NOT MORE!!!\r\n *  Only special command will run X3 MODE!!!\r\n * \r\n *  After restart system automaticaly make deposits for damage users in damaged part, \r\n *   but before it users must self make promotion deposit by any amount first.\r\n *\r\n *  INSTRUCTIONS:\r\n *\r\n *  TO INVEST: send ETH to contract address\r\n *  TO WITHDRAW INTEREST: send 0 ETH to contract address\r\n *  TO REINVEST AND WITHDRAW INTEREST: send ETH to contract address\r\n *  TO GET BACK YOUR DEPOSIT: send 0.00000112 ETH to contract address\r\n *  TO START X3 WORK, ANY MEMBER CAN SEND 0.00000111 ETH to contract address\r\n *     While X3 not started investors can return only their deposits and no profit.\r\n *     Admin voice power is equal 10 simple participants\r\n *\r\n *  RECOMMENDED GAS LIMIT 200000\r\n */\r\n \r\ncontract X3ProfitInMonth {\r\n\r\n\tstruct Investor {\r\n\t      // Restart iteration index\r\n\t\tuint iteration;\r\n          // array containing information about beneficiaries\r\n\t\tuint deposit;\r\n\t\t  // sum locked to remove in predstart period, gived by contract for \r\n\t\t  // compensation of previous iteration restart\r\n\t\tuint lockedDeposit;\r\n           //array containing information about the time of payment\r\n\t\tuint time;\r\n          //array containing information on interest paid\r\n\t\tuint withdrawn;\r\n           //array containing information on interest paid (without tax)\r\n\t\tuint withdrawnPure;\r\n\t\t   // Vote system for start iteration\r\n\t\tbool isVoteProfit;\r\n\t}\r\n\r\n    mapping(address => Investor) public investors;\r\n\t\r\n    //fund to transfer percent for MAIN OUR CONTRACT EasyInvestForeverProtected2\r\n    address public constant ADDRESS_MAIN_FUND = 0x20C476Bb4c7aA64F919278fB9c09e880583beb4c;\r\n    address public constant ADDRESS_ADMIN =     0x6249046Af9FB588bb4E70e62d9403DD69239bdF5;\r\n    //time through which you can take dividends\r\n    uint private constant TIME_QUANT = 1 days;\r\n\t\r\n    //start percent 10% per day\r\n    uint private constant PERCENT_DAY = 10;\r\n    uint private constant PERCENT_DECREASE_PER_ITERATION = 1;\r\n\r\n    //Adv tax for withdrawal 10%\r\n    uint private constant PERCENT_MAIN_FUND = 10;\r\n\r\n    //All percent should be divided by this\r\n    uint private constant PERCENT_DIVIDER = 100;\r\n\r\n    uint public countOfInvestors = 0;\r\n    uint public countOfAdvTax = 0;\r\n\tuint public countStartVoices = 0;\r\n\tuint public iterationIndex = 1;\r\n\r\n    // max contract balance in ether for overflow protection in calculations only\r\n    // 340 quintillion 282 quadrillion 366 trillion 920 billion 938 million 463 thousand 463\r\n\tuint public constant maxBalance = 340282366920938463463374607431768211456 wei; //(2^128) \r\n\tuint public constant maxDeposit = maxBalance / 1000; \r\n\t\r\n\t// X3 Mode status\r\n    bool public isProfitStarted = false; \r\n\r\n    modifier isIssetUser() {\r\n        require(investors[msg.sender].iteration == iterationIndex, \"Deposit not found\");\r\n        _;\r\n    }\r\n\r\n    modifier timePayment() {\r\n        require(now >= investors[msg.sender].time + TIME_QUANT, \"Too fast payout request\");\r\n        _;\r\n    }\r\n\r\n    //return of interest on the deposit\r\n    function collectPercent() isIssetUser timePayment internal {\r\n        uint payout = payoutAmount(msg.sender);\r\n        _payout(msg.sender, payout, false);\r\n    }\r\n\r\n    //calculate the amount available for withdrawal on deposit\r\n    function payoutAmount(address addr) public view returns(uint) {\r\n        Investor storage inv = investors[addr];\r\n        if(inv.iteration != iterationIndex)\r\n            return 0;\r\n        uint varTime = inv.time;\r\n        uint varNow = now;\r\n        if(varTime > varNow) varTime = varNow;\r\n        uint percent = PERCENT_DAY;\r\n        uint decrease = PERCENT_DECREASE_PER_ITERATION * (iterationIndex - 1);\r\n        if(decrease > percent - PERCENT_DECREASE_PER_ITERATION)\r\n            decrease = percent - PERCENT_DECREASE_PER_ITERATION;\r\n        percent -= decrease;\r\n        uint rate = inv.deposit * percent / PERCENT_DIVIDER;\r\n        uint fraction = 100;\r\n        uint interestRate = fraction * (varNow  - varTime) / 1 days;\r\n        uint withdrawalAmount = rate * interestRate / fraction;\r\n        if(interestRate < 100) withdrawalAmount = 0;\r\n        return withdrawalAmount;\r\n    }\r\n\r\n    //make a deposit\r\n    function makeDeposit() private {\r\n        if (msg.value > 0) {\r\n            Investor storage inv = investors[msg.sender];\r\n            if (inv.iteration != iterationIndex) {\r\n                countOfInvestors += 1;\r\n                if(inv.deposit > inv.withdrawnPure)\r\n\t\t\t        inv.deposit -= inv.withdrawnPure;\r\n\t\t        else\r\n\t\t            inv.deposit = 0;\r\n\t\t        if(inv.deposit + msg.value > maxDeposit) \r\n\t\t            inv.deposit = maxDeposit - msg.value;\r\n\t\t\t\tinv.withdrawn = 0;\r\n\t\t\t\tinv.withdrawnPure = 0;\r\n\t\t\t\tinv.time = now;\r\n\t\t\t\tinv.iteration = iterationIndex;\r\n\t\t\t\tinv.lockedDeposit = inv.deposit;\r\n\t\t\t\tinv.isVoteProfit = false;\r\n            }\r\n            if (inv.deposit > 0 && now >= inv.time + TIME_QUANT) {\r\n                collectPercent();\r\n            }\r\n            \r\n            inv.deposit += msg.value;\r\n            \r\n        } else {\r\n            collectPercent();\r\n        }\r\n    }\r\n\r\n    //return of deposit balance\r\n    function returnDeposit() isIssetUser private {\r\n        Investor storage inv = investors[msg.sender];\r\n        uint withdrawalAmount = 0;\r\n        uint activDep = inv.deposit - inv.lockedDeposit;\r\n        if(activDep > inv.withdrawn)\r\n            withdrawalAmount = activDep - inv.withdrawn;\r\n\r\n        if(withdrawalAmount > address(this).balance){\r\n            withdrawalAmount = address(this).balance;\r\n        }\r\n        //Pay the rest of deposit and take taxes\r\n        _payout(msg.sender, withdrawalAmount, true);\r\n\r\n        //delete user record\r\n        _delete(msg.sender);\r\n    }\r\n    \r\n    function() external payable {\r\n        require(msg.value <= maxDeposit, \"Deposit overflow\");\r\n        \r\n        //refund of remaining funds when transferring to a contract 0.00000112 ether\r\n        Investor storage inv = investors[msg.sender];\r\n        if (msg.value == 0.00000112 ether && inv.iteration == iterationIndex) {\r\n            inv.deposit += msg.value;\r\n            if(inv.deposit > maxDeposit) inv.deposit = maxDeposit;\r\n            returnDeposit();\r\n        } else {\r\n            //start X3 Mode on 0.00000111 ether\r\n            if (msg.value == 0.00000111 ether && !isProfitStarted) {\r\n                makeDeposit();\r\n                if(inv.deposit > maxDeposit) inv.deposit = maxDeposit;\r\n                if(!inv.isVoteProfit)\r\n                {\r\n                    countStartVoices++;\r\n                    inv.isVoteProfit = true;\r\n                }\r\n                if((countStartVoices > 10 &&\r\n                    countStartVoices > countOfInvestors / 2) || \r\n                    msg.sender == ADDRESS_ADMIN)\r\n    \t\t\t    isProfitStarted = true;\r\n            } \r\n            else\r\n            {\r\n                require(\r\n                    msg.value == 0 ||\r\n                    address(this).balance <= maxBalance, \r\n                    \"Contract balance overflow\");\r\n                makeDeposit();\r\n                require(inv.deposit <= maxDeposit, \"Deposit overflow\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    function restart() private {\r\n\t\tcountOfInvestors = 0;\r\n\t\titerationIndex++;\r\n\t\tcountStartVoices = 0;\r\n\t\tisProfitStarted = false;\r\n\t}\r\n\t\r\n    //Pays out, takes taxes according to holding time\r\n    function _payout(address addr, uint amount, bool retDep) private {\r\n        if(amount == 0)\r\n            return;\r\n\t\tif(amount > address(this).balance) amount = address(this).balance;\r\n\t\tif(amount == 0){\r\n\t\t\trestart();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tInvestor storage inv = investors[addr];\r\n        //Calculate pure payout that user receives\r\n        uint activDep = inv.deposit - inv.lockedDeposit;\r\n\t\tif(!retDep && !isProfitStarted && amount + inv.withdrawn > activDep / 2 )\r\n\t\t{\r\n\t\t\tif(inv.withdrawn < activDep / 2)\r\n    \t\t\tamount = (activDep/2) - inv.withdrawn;\r\n\t\t\telse{\r\n    \t\t\tif(inv.withdrawn >= activDep)\r\n    \t\t\t{\r\n    \t\t\t\t_delete(addr);\r\n    \t\t\t\treturn;\r\n    \t\t\t}\r\n    \t\t\tamount = activDep - inv.withdrawn;\r\n    \t\t\t_delete(addr);\r\n\t\t\t}\r\n\t\t}\r\n        uint interestPure = amount * (PERCENT_DIVIDER - PERCENT_MAIN_FUND) / PERCENT_DIVIDER;\r\n\r\n        //calculate money to charity\r\n        uint advTax = amount - interestPure;\r\n\r\n\t\tinv.withdrawnPure += interestPure;\r\n\t\tinv.withdrawn += amount;\r\n\t\tinv.time = now;\r\n\r\n        //send money\r\n        if(ADDRESS_MAIN_FUND.call.value(advTax)()) \r\n            countOfAdvTax += advTax;\r\n        else\r\n            inv.withdrawn -= advTax;\r\n\r\n        addr.transfer(interestPure);\r\n\r\n\t\tif(address(this).balance == 0)\r\n\t\t\trestart();\r\n    }\r\n\r\n    //Clears user from registry\r\n    function _delete(address addr) private {\r\n        if(investors[addr].iteration != iterationIndex)\r\n            return;\r\n        investors[addr].iteration = 0;\r\n        countOfInvestors--;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"countStartVoices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADDRESS_MAIN_FUND\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iterationIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"iteration\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"lockedDeposit\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"name\":\"withdrawnPure\",\"type\":\"uint256\"},{\"name\":\"isVoteProfit\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isProfitStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfAdvTax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADDRESS_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"X3ProfitInMonth","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2b0ae1cb72e7ae4dedd5fa2599c31c5e4edaf684dc86aa30c5130ae2b42c03b7"}]}