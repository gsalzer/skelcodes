{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract ERC20 {\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n}\r\n\r\ncontract XEXHolder{\r\n    address private holder1_;\r\n    address private holder2_;\r\n    address private holder3_;\r\n    bool private holder1Reset_;\r\n    bool private holder2Reset_;\r\n    bool private holder3Reset_;\r\n    bool private holder1Transaction_;\r\n    bool private holder2Transaction_;\r\n    bool private holder3Transaction_;\r\n\r\n    address private token_;\r\n    uint256 private transactionNonce_;\r\n    address private transactionTo_;\r\n    uint256 private transactionValue_;\r\n\r\n    event HolderSetted(address indexed _address1,address indexed _address2,address indexed _address3);\r\n    event HolderReseted(bool _vote);\r\n    event TransactionStarted(address indexed _address,uint _value);\r\n    event TransactionConfirmed(address indexed _address,bool _vote);\r\n    event TransactionSubmitted(address indexed _address,uint _value);\r\n    \r\n    modifier onlyHolder() {\r\n        require(isHolder(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    constructor(address _token) public{\r\n        token_=_token;\r\n        holder1_=msg.sender;\r\n        holder2_=address(0);\r\n        holder3_=address(0);\r\n        holder1Reset_=false;\r\n        holder2Reset_=false;\r\n        holder3Reset_=false;\r\n        holder1Transaction_=false;\r\n        holder2Transaction_=false;\r\n        holder3Transaction_=false;\r\n    }\r\n    \r\n    function isHolder(address _address) public view returns (bool) {\r\n        if(_address==address(0)){\r\n            return false;\r\n        }\r\n        return _address==holder1_ || _address==holder2_ || _address==holder3_;\r\n    }\r\n    \r\n    function setHolder(address _address1,address _address2,address _address3) public onlyHolder{\r\n        require(_address1!=address(0) && _address2!=address(0) && _address3!=address(0));\r\n        require(_address1!=_address2 && _address1!=_address3 && _address2!=_address3);\r\n        \r\n        uint _vote=0;\r\n        if(holder1_==address(0)||holder1Reset_){\r\n            _vote++;\r\n        }\r\n        if(holder2_==address(0)||holder2Reset_){\r\n            _vote++;\r\n        }\r\n        if(holder3_==address(0)||holder3Reset_){\r\n            _vote++;\r\n        }\r\n        require(_vote>=2);\r\n        \r\n        holder1_=_address1;\r\n        holder2_=_address2;\r\n        holder3_=_address3;\r\n        holder1Reset_=false;\r\n        holder2Reset_=false;\r\n        holder3Reset_=false;\r\n        clearTransaction();\r\n        \r\n        emit HolderSetted(holder1_,holder2_,holder3_);\r\n    }\r\n    \r\n    function resetHolder(bool _vote) public onlyHolder{\r\n        if(msg.sender==holder1_){\r\n            holder1Reset_=_vote;\r\n        }\r\n        if(msg.sender==holder2_){\r\n            holder2Reset_=_vote;\r\n        }\r\n        if(msg.sender==holder3_){\r\n            holder3Reset_=_vote;\r\n        }\r\n        emit HolderReseted(_vote);\r\n    }\r\n    \r\n    function startTransaction(address _address, uint256 _value) public onlyHolder{\r\n        require(_address != address(0) && _value > 0);\r\n\r\n        transactionNonce_ = uint256(keccak256(abi.encodePacked(block.difficulty,now)));\r\n        transactionTo_ = _address;\r\n        transactionValue_ = _value;\r\n        emit TransactionStarted(_address,_value);\r\n\r\n        confirmTransaction(transactionNonce_, true);\r\n    }\r\n    \r\n    function showTransaction() public view returns(address _address, uint256 _value,uint256 _nonce){\r\n        return (transactionTo_,transactionValue_,transactionNonce_);\r\n    }\r\n\r\n    function confirmTransaction(uint256 _nonce, bool _vote) public onlyHolder{\r\n        require(transactionNonce_==_nonce);\r\n        \r\n        if(msg.sender==holder1_){\r\n            holder1Transaction_=_vote;\r\n        }\r\n        if(msg.sender==holder2_){\r\n            holder2Transaction_=_vote;\r\n        }\r\n        if(msg.sender==holder3_){\r\n            holder3Transaction_=_vote;\r\n        }\r\n        emit TransactionConfirmed(msg.sender,_vote);\r\n    }\r\n\r\n    function submitTransaction() public onlyHolder{\r\n        require(transactionTo_ != address(0) && transactionValue_ > 0);\r\n        require(holder1Transaction_ && holder2Transaction_ && holder3Transaction_);\r\n        require(!holder1Reset_ && !holder2Reset_ && !holder3Reset_);\r\n        \r\n        ERC20 _token = ERC20(token_);\r\n        _token.approve(this, transactionValue_);\r\n        _token.transferFrom(this,transactionTo_,transactionValue_);\r\n        \r\n        emit TransactionSubmitted(transactionTo_,transactionValue_);\r\n        \r\n        clearTransaction();\r\n    }\r\n    \r\n    function clearTransaction() internal{\r\n        transactionNonce_=0;\r\n        transactionTo_=address(0);\r\n        transactionValue_=0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"showTransaction\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"startTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address1\",\"type\":\"address\"},{\"name\":\"_address2\",\"type\":\"address\"},{\"name\":\"_address3\",\"type\":\"address\"}],\"name\":\"setHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"resetHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address1\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_address2\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_address3\",\"type\":\"address\"}],\"name\":\"HolderSetted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"HolderReseted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransactionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"TransactionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransactionSubmitted\",\"type\":\"event\"}]","ContractName":"XEXHolder","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bf68b3756f82b522588511da682dfd7e3bf34dee","Library":"","SwarmSource":"bzzr://7eaccf888c26843c45f8ab69b4626a083accdb8e961d6f3160968dd42f58081d"}]}