{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.1;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n    _;\r\n    }\r\n\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n    address public pendingOwner;\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() onlyPendingOwner public {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Synvote\r\n * @dev Vote with rewards\r\n */\r\ncontract Synvote is Claimable {\r\n\r\n    string  public constant  VERSION='2018.02';\r\n    uint256 public constant  MINETHVOTE = 1*(10**17);\r\n    \r\n\r\n    //////////////////////\r\n    // DATA Structures  //\r\n    //////////////////////\r\n    enum StageName {preList, inProgress, voteFinished,rewardWithdrawn}\r\n    struct PrjProperties{\r\n        address prjAddress;\r\n        uint256 voteCount;\r\n        uint256 prjWeiRaised;\r\n    }\r\n\r\n    //////////////////////\r\n    // State var       ///\r\n    //////////////////////\r\n    StageName public currentStage;\r\n    mapping(bytes32 => PrjProperties) public projects;// projects for vote\r\n    string public currentWinner;\r\n    uint64  public voteFinishDate;\r\n    //      86400     1 day\r\n    //     604800     1 week\r\n    //    2592000    30 day\r\n    //   31536000   365 days\r\n\r\n    //////////////////////\r\n    // Events           //\r\n    //////////////////////\r\n    event VoteStarted(uint64 _when);\r\n    event NewBet(address _who, uint256 _wei, string _prj);\r\n    event VoteFinished(address _who, uint64 _when);\r\n   \r\n    \r\n    function() external { }\r\n    \r\n    ///@notice Add item to progject vote list\r\n    /// @dev It must be call from owner before startVote()\r\n    /// @param _prjName   - string, project name for vote.\r\n    /// @param _prjAddress   - address, only this address can get \r\n    /// reward if project will win.\r\n    function addProjectToVote(string calldata _prjName, address _prjAddress) \r\n    external \r\n    payable \r\n    onlyOwner\r\n    {\r\n        require(currentStage == StageName.preList, \"Can't add item after vote has starting!\");\r\n        require(_prjAddress != address(0),\"Address must be valid!\");\r\n        bytes32 hash = keccak256(bytes(_prjName));\r\n        require( projects[hash].prjAddress == address(0), \r\n            \"It seems like this item allready exist!\"\r\n        );\r\n        projects[hash] = PrjProperties({\r\n                prjAddress: _prjAddress,\r\n                voteCount: 0,\r\n                prjWeiRaised: 0\r\n            });\r\n    }\r\n    \r\n    ///@notice Start vote\r\n    /// @dev It must be call from owner when vote list is ready\r\n    /// @param _votefinish   - uint64,end of vote in Unix date format.\r\n    function startVote(uint64 _votefinish) external onlyOwner {\r\n        require(currentStage == StageName.preList);\r\n        require(_votefinish > now);\r\n        voteFinishDate = _votefinish;\r\n        currentStage = StageName.inProgress;\r\n        emit VoteStarted(uint64(now));\r\n    }\r\n\r\n    ///@notice Make vote for sender\r\n    /// @dev Sender must send enough ether\r\n    /// @param _prjName   - string, project name for vote.\r\n    function vote(string calldata _prjName) external payable {\r\n        require(currentStage == StageName.inProgress,\r\n            \"Vote disable now!\"\r\n        \r\n        );\r\n        require(msg.value >= MINETHVOTE, \"Please send more ether!\");\r\n        bytes32 hash = keccak256(bytes(_prjName));\r\n        PrjProperties memory currentBet = projects[hash];//Storage - or   other place!!!!\r\n        require(currentBet.prjAddress != address(0), \r\n            \"It seems like there is no item with that name\"\r\n        );\r\n        projects[hash].voteCount = currentBet.voteCount + 1;\r\n        projects[hash].prjWeiRaised = currentBet.prjWeiRaised + msg.value;\r\n        emit NewBet(msg.sender, msg.value, _prjName);\r\n        //Check for new winner\r\n        if  (currentBet.voteCount + 1 > projects[keccak256(bytes(currentWinner))].voteCount)\r\n            currentWinner = _prjName;\r\n        //Check vote end    \r\n        if  (now >= voteFinishDate)\r\n            currentStage = StageName.voteFinished;\r\n            emit VoteFinished(msg.sender, uint64(now));\r\n        \r\n    }\r\n\r\n    /// @notice Transfer all ether from contract balance(reward found) to winner\r\n    /// @dev New currentStage will be set after successful call\r\n    function withdrawWinner() external {\r\n        require(currentStage == StageName.voteFinished, \r\n            \"Withdraw disable yet/allready!\"\r\n        );\r\n        require(msg.sender == projects[keccak256(bytes(currentWinner))].prjAddress,\r\n            \"Only winner can Withdraw reward\"\r\n        );\r\n        currentStage = StageName.rewardWithdrawn;\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    ///@notice Calculate hash\r\n    /// @dev There is web3py analog exists: Web3.soliditySha3(['string'], ['_hashinput'])\r\n    /// @param _hashinput   - string .\r\n    /// @return byte32, result of keccak256 (sha3 in old style) \r\n    function calculateSha3(string memory _hashinput) public pure returns (bytes32){\r\n        return keccak256(bytes(_hashinput)); \r\n    }\r\n   \r\n    \r\n    ///@dev use in case of depricate this contract or for gas reclaiming after vote\r\n    function kill() external onlyOwner {\r\n        require(currentStage == StageName.rewardWithdrawn, \r\n            \"Withdraw reward first!!!\"\r\n        );\r\n        selfdestruct(msg.sender);\r\n    }\r\n    \r\n         \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_hashinput\",\"type\":\"string\"}],\"name\":\"calculateSha3\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"projects\",\"outputs\":[{\"name\":\"prjAddress\",\"type\":\"address\"},{\"name\":\"voteCount\",\"type\":\"uint256\"},{\"name\":\"prjWeiRaised\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_votefinish\",\"type\":\"uint64\"}],\"name\":\"startVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteFinishDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_prjName\",\"type\":\"string\"},{\"name\":\"_prjAddress\",\"type\":\"address\"}],\"name\":\"addProjectToVote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINETHVOTE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_prjName\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_when\",\"type\":\"uint64\"}],\"name\":\"VoteStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_wei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_prj\",\"type\":\"string\"}],\"name\":\"NewBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_when\",\"type\":\"uint64\"}],\"name\":\"VoteFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Synvote","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7a5dc635a92959b97f521792460768372c7a8a272d340ced78ef6df5df51abbd"}]}