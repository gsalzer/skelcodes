{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/upgradeability/ImplementationStorage.sol\r\n\r\n/**\r\n * @title ImplementationStorage\r\n * @dev This contract stores proxy implementation address.\r\n */\r\ncontract ImplementationStorage {\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"cvc.proxy.implementation\", and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0xa490aab0d89837371982f93f57ffd20c47991f88066ef92475bc8233036969bb;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    */\r\n    constructor() public {\r\n        assert(IMPLEMENTATION_SLOT == keccak256(\"cvc.proxy.implementation\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     * @return Address of the current implementation\r\n     */\r\n    function implementation() public view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/upgradeability/CvcProxy.sol\r\n\r\n/**\r\n * @title CvcProxy\r\n * @dev Transparent proxy with upgradeability functions and authorization control.\r\n */\r\ncontract CvcProxy is ImplementationStorage {\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     * @param implementation Address of the new implementation.\r\n     */\r\n    event Upgraded(address implementation);\r\n\r\n    /**\r\n     * @dev Emitted when the administration has been transferred.\r\n     * @param previousAdmin Address of the previous admin.\r\n     * @param newAdmin Address of the new admin.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"cvc.proxy.admin\", and is validated in the constructor.\r\n     */\r\n    bytes32 private constant ADMIN_SLOT = 0x2bbac3e52eee27be250d682577104e2abe776c40160cd3167b24633933100433;\r\n\r\n    /**\r\n     * @dev Modifier to check whether the `msg.sender` is the admin.\r\n     * It executes the function if called by admin. Otherwise, it will delegate the call to the implementation.\r\n     */\r\n    modifier ifAdmin() {\r\n        if (msg.sender == currentAdmin()) {\r\n            _;\r\n        } else {\r\n            delegate(implementation());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Contract constructor.\r\n     * It sets the `msg.sender` as the proxy admin.\r\n     */\r\n    constructor() public {\r\n        assert(ADMIN_SLOT == keccak256(\"cvc.proxy.admin\"));\r\n        setAdmin(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function.\r\n     */\r\n    function() external payable {\r\n        require(msg.sender != currentAdmin(), \"Message sender is not contract admin\");\r\n        delegate(implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     * Only the current admin can call this function.\r\n     * @param _newAdmin Address to transfer proxy administration to.\r\n     */\r\n    function changeAdmin(address _newAdmin) external ifAdmin {\r\n        require(_newAdmin != address(0), \"Cannot change contract admin to zero address\");\r\n        emit AdminChanged(currentAdmin(), _newAdmin);\r\n        setAdmin(_newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the proxy owner to upgrade the current version of the proxy.\r\n     * @param _implementation the address of the new implementation to be set.\r\n     */\r\n    function upgradeTo(address _implementation) external ifAdmin {\r\n        upgradeImplementation(_implementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the proxy owner to upgrade and call the new implementation\r\n     * to initialize whatever is needed through a low level call.\r\n     * @param _implementation the address of the new implementation to be set.\r\n     * @param _data the msg.data to bet sent in the low level call. This parameter may include the function\r\n     * signature of the implementation to be called with the needed payload.\r\n     */\r\n    function upgradeToAndCall(address _implementation, bytes _data) external payable ifAdmin {\r\n        upgradeImplementation(_implementation);\r\n        //solium-disable-next-line security/no-call-value\r\n        require(address(this).call.value(msg.value)(_data), \"Upgrade error: initialization method call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Address of the proxy admin.\r\n     * @return address\r\n     */\r\n    function admin() external view ifAdmin returns (address) {\r\n        return currentAdmin();\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades the implementation address.\r\n     * @param _newImplementation the address of the new implementation to be set\r\n     */\r\n    function upgradeImplementation(address _newImplementation) private {\r\n        address currentImplementation = implementation();\r\n        require(currentImplementation != _newImplementation, \"Upgrade error: proxy contract already uses specified implementation\");\r\n        setImplementation(_newImplementation);\r\n        emit Upgraded(_newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates execution to an implementation contract.\r\n     * This is a low level function that doesn't return to its internal call site.\r\n     * It will return to the external caller whatever the implementation returns.\r\n     * @param _implementation Address to delegate.\r\n     */\r\n    function delegate(address _implementation) private {\r\n        assembly {\r\n            // Copy msg.data.\r\n            calldatacopy(0, 0, calldatasize)\r\n\r\n            // Call current implementation passing proxy calldata.\r\n            let result := delegatecall(gas, _implementation, 0, calldatasize, 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize)\r\n\r\n            // Propagate result (delegatecall returns 0 on error).\r\n            switch result\r\n            case 0 {revert(0, returndatasize)}\r\n            default {return (0, returndatasize)}\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return The admin slot.\r\n     */\r\n    function currentAdmin() private view returns (address proxyAdmin) {\r\n        bytes32 slot = ADMIN_SLOT;\r\n        assembly {\r\n            proxyAdmin := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the proxy admin.\r\n     * @param _newAdmin Address of the new proxy admin.\r\n     */\r\n    function setAdmin(address _newAdmin) private {\r\n        bytes32 slot = ADMIN_SLOT;\r\n        assembly {\r\n            sstore(slot, _newAdmin)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the implementation address of the proxy.\r\n     * @param _newImplementation Address of the new implementation.\r\n     */\r\n    function setImplementation(address _newImplementation) private {\r\n        require(\r\n            AddressUtils.isContract(_newImplementation),\r\n            \"Cannot set new implementation: no contract code at contract address\"\r\n        );\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            sstore(slot, _newImplementation)\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"}]","ContractName":"CvcProxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://217a0189de99c2ae3f5c53cbbfaa4b7eab27fae03ef8b58703719d284bb86dcc"}]}