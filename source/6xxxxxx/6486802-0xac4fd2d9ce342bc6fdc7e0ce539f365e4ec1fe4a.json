{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\nlibrary SafeMath16 {\r\n  function mul(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint16 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint16 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn’t hold\r\n    return c;\r\n  }\r\n  function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    uint16 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n/*****************************************************************\r\n * Core contract of the Million Dollar Decentralized Application *\r\n *****************************************************************/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Contracts that should not own Ether\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\r\n * in the contract, it will allow the owner to reclaim this Ether.\r\n * @notice Ether can still be sent to this contract by:\r\n * calling functions labeled `payable`\r\n * `selfdestruct(contract_address)`\r\n * mining directly to the contract address\r\n */\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  constructor() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by setting a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param _token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\r\n    uint256 balance = _token.balanceOf(this);\r\n    _token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title MDAPPToken\r\n * @dev Token for the Million Dollar Decentralized Application (MDAPP).\r\n * Once a holder uses it to claim pixels the appropriate tokens are burned (1 Token <=> 10x10 pixel).\r\n * If one releases his pixels new tokens are generated and credited to ones balance. Therefore, supply will\r\n * vary between 0 and 10,000 tokens.\r\n * Tokens are transferable once minting has finished.\r\n * @dev Owned by MDAPP.sol\r\n */\r\ncontract MDAPPToken is MintableToken {\r\n  using SafeMath16 for uint16;\r\n  using SafeMath for uint256;\r\n\r\n  string public constant name = \"MillionDollarDapp\";\r\n  string public constant symbol = \"MDAPP\";\r\n  uint8 public constant decimals = 0;\r\n\r\n  mapping (address => uint16) locked;\r\n\r\n  bool public forceTransferEnable = false;\r\n\r\n  /*********************************************************\r\n   *                                                       *\r\n   *                       Events                          *\r\n   *                                                       *\r\n   *********************************************************/\r\n\r\n  // Emitted when owner force-allows transfers of tokens.\r\n  event AllowTransfer();\r\n\r\n  /*********************************************************\r\n   *                                                       *\r\n   *                      Modifiers                        *\r\n   *                                                       *\r\n   *********************************************************/\r\n\r\n  modifier hasLocked(address _account, uint16 _value) {\r\n    require(_value <= locked[_account], \"Not enough locked tokens available.\");\r\n    _;\r\n  }\r\n\r\n  modifier hasUnlocked(address _account, uint16 _value) {\r\n    require(balanceOf(_account).sub(uint256(locked[_account])) >= _value, \"Not enough unlocked tokens available.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether it can transfer or otherwise throws.\r\n   */\r\n  modifier canTransfer(address _sender, uint256 _value) {\r\n    require(_value <= transferableTokensOf(_sender), \"Not enough unlocked tokens available.\");\r\n    _;\r\n  }\r\n\r\n\r\n  /*********************************************************\r\n   *                                                       *\r\n   *                Limited Transfer Logic                 *\r\n   *            Taken from openzeppelin 1.3.0              *\r\n   *                                                       *\r\n   *********************************************************/\r\n\r\n  function lockToken(address _account, uint16 _value) onlyOwner hasUnlocked(_account, _value) public {\r\n    locked[_account] = locked[_account].add(_value);\r\n  }\r\n\r\n  function unlockToken(address _account, uint16 _value) onlyOwner hasLocked(_account, _value) public {\r\n    locked[_account] = locked[_account].sub(_value);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks modifier and allows transfer if tokens are not locked.\r\n   * @param _to The address that will receive the tokens.\r\n   * @param _value The amount of tokens to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Checks modifier and allows transfer if tokens are not locked.\r\n  * @param _from The address that will send the tokens.\r\n  * @param _to The address that will receive the tokens.\r\n  * @param _value The amount of tokens to be transferred.\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Allow the holder to transfer his tokens only if every token in\r\n   * existence has already been distributed / minting is finished.\r\n   * Tokens which are locked for a claimed space cannot be transferred.\r\n   */\r\n  function transferableTokensOf(address _holder) public view returns (uint16) {\r\n    if (!mintingFinished && !forceTransferEnable) return 0;\r\n\r\n    return uint16(balanceOf(_holder)).sub(locked[_holder]);\r\n  }\r\n\r\n  /**\r\n   * @dev Get the number of pixel-locked tokens.\r\n   */\r\n  function lockedTokensOf(address _holder) public view returns (uint16) {\r\n    return locked[_holder];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the number of unlocked tokens usable for claiming pixels.\r\n   */\r\n  function unlockedTokensOf(address _holder) public view returns (uint256) {\r\n    return balanceOf(_holder).sub(uint256(locked[_holder]));\r\n  }\r\n\r\n  // Allow transfer of tokens even if minting is not yet finished.\r\n  function allowTransfer() onlyOwner public {\r\n    require(forceTransferEnable == false, 'Transfer already force-allowed.');\r\n\r\n    forceTransferEnable = true;\r\n    emit AllowTransfer();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title MDAPP\r\n */\r\ncontract MDAPP is Ownable, HasNoEther, CanReclaimToken {\r\n  using SafeMath for uint256;\r\n  using SafeMath16 for uint16;\r\n\r\n  // The tokens contract.\r\n  MDAPPToken public token;\r\n\r\n  // The sales contracts address. Only it is allowed to to call the public mint function.\r\n  address public sale;\r\n\r\n  // When are presale participants allowed to place ads?\r\n  uint256 public presaleAdStart;\r\n\r\n  // When are all token owners allowed to place ads?\r\n  uint256 public allAdStart;\r\n\r\n  // Quantity of tokens bought during presale.\r\n  mapping (address => uint16) presales;\r\n\r\n  // Indicates whether a 10x10px block is claimed or not.\r\n  bool[80][125] grid;\r\n\r\n  // Struct that represents an ad.\r\n  struct Ad {\r\n    address owner;\r\n    Rect rect;\r\n  }\r\n\r\n  // Struct describing an rectangle area.\r\n  struct Rect {\r\n    uint16 x;\r\n    uint16 y;\r\n    uint16 width;\r\n    uint16 height;\r\n  }\r\n\r\n  // Don't store ad details on blockchain. Use events as storage as they are significantly cheaper.\r\n  // ads are stored in an array, the id of an ad is its index in this array.\r\n  Ad[] ads;\r\n\r\n  // The following holds a list of currently active ads (without holes between the indexes)\r\n  uint256[] adIds;\r\n\r\n  // Holds the mapping from adID to its index in the above adIds array. If an ad gets released, we know which index to\r\n  // delete and being filled with the last element instead.\r\n  mapping (uint256 => uint256) adIdToIndex;\r\n\r\n\r\n  /*********************************************************\r\n   *                                                       *\r\n   *                       Events                          *\r\n   *                                                       *\r\n   *********************************************************/\r\n\r\n  /*\r\n   * Event for claiming pixel blocks.\r\n   * @param id ID of the new ad\r\n   * @param owner Who owns the used tokens\r\n   * @param x Upper left corner x coordinate\r\n   * @param y Upper left corner y coordinate\r\n   * @param width Width of the claimed area\r\n   * @param height Height of the claimed area\r\n   */\r\n  event Claim(uint256 indexed id, address indexed owner, uint16 x, uint16 y, uint16 width, uint16 height);\r\n\r\n  /*\r\n   * Event for releasing pixel blocks.\r\n   * @param id ID the fading ad\r\n   * @param owner Who owns the claimed blocks\r\n   */\r\n  event Release(uint256 indexed id, address indexed owner);\r\n\r\n  /*\r\n   * Event for editing an ad.\r\n   * @param id ID of the ad\r\n   * @param owner Who owns the ad\r\n   * @param link A link\r\n   * @param title Title of the ad\r\n   * @param text Description of the ad\r\n   * @param NSFW Whether the ad is safe for work\r\n   * @param digest IPFS hash digest\r\n   * @param hashFunction IPFS hash function\r\n   * @param size IPFS length of digest\r\n   * @param storageEngine e.g. ipfs or swrm (swarm)\r\n   */\r\n  event EditAd(uint256 indexed id, address indexed owner, string link, string title, string text, string contact, bool NSFW, bytes32 indexed digest, bytes2 hashFunction, uint8 size, bytes4 storageEngine);\r\n\r\n  event ForceNSFW(uint256 indexed id);\r\n\r\n\r\n  /*********************************************************\r\n   *                                                       *\r\n   *                      Modifiers                        *\r\n   *                                                       *\r\n   *********************************************************/\r\n\r\n  modifier coordsValid(uint16 _x, uint16 _y, uint16 _width, uint16 _height) {\r\n    require((_x + _width - 1) < 125, \"Invalid coordinates.\");\r\n    require((_y + _height - 1) < 80, \"Invalid coordinates.\");\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdOwner(uint256 _id) {\r\n    require(ads[_id].owner == msg.sender, \"Access denied.\");\r\n\r\n    _;\r\n  }\r\n\r\n  modifier enoughTokens(uint16 _width, uint16 _height) {\r\n    require(uint16(token.unlockedTokensOf(msg.sender)) >= _width.mul(_height), \"Not enough unlocked tokens available.\");\r\n\r\n    _;\r\n  }\r\n\r\n  modifier claimAllowed(uint16 _width, uint16 _height) {\r\n    require(_width > 0 &&_width <= 125 && _height > 0 && _height <= 80, \"Invalid dimensions.\");\r\n    require(now >= presaleAdStart, \"Claim period not yet started.\");\r\n\r\n    if (now < allAdStart) {\r\n      // Sender needs enough presale tokens to claim at this point.\r\n      uint16 tokens = _width.mul(_height);\r\n      require(presales[msg.sender] >= tokens, \"Not enough unlocked presale tokens available.\");\r\n\r\n      presales[msg.sender] = presales[msg.sender].sub(tokens);\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlySale() {\r\n    require(msg.sender == sale);\r\n    _;\r\n  }\r\n\r\n  modifier adExists(uint256 _id) {\r\n    uint256 index = adIdToIndex[_id];\r\n    require(adIds[index] == _id, \"Ad does not exist.\");\r\n\r\n    _;\r\n  }\r\n\r\n  /*********************************************************\r\n   *                                                       *\r\n   *                   Initialization                      *\r\n   *                                                       *\r\n   *********************************************************/\r\n\r\n  constructor(uint256 _presaleAdStart, uint256 _allAdStart, address _token) public {\r\n    require(_presaleAdStart >= now);\r\n    require(_allAdStart > _presaleAdStart);\r\n\r\n    presaleAdStart = _presaleAdStart;\r\n    allAdStart = _allAdStart;\r\n    token = MDAPPToken(_token);\r\n  }\r\n\r\n  function setMDAPPSale(address _mdappSale) onlyOwner external {\r\n    require(sale == address(0));\r\n    sale = _mdappSale;\r\n  }\r\n\r\n  /*********************************************************\r\n   *                                                       *\r\n   *                       Logic                           *\r\n   *                                                       *\r\n   *********************************************************/\r\n\r\n  // Proxy function to pass minting from sale contract to token contract.\r\n  function mint(address _beneficiary, uint256 _tokenAmount, bool isPresale) onlySale external {\r\n    if (isPresale) {\r\n      presales[_beneficiary] = presales[_beneficiary].add(uint16(_tokenAmount));\r\n    }\r\n    token.mint(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  // Proxy function to pass finishMinting() from sale contract to token contract.\r\n  function finishMinting() onlySale external {\r\n    token.finishMinting();\r\n  }\r\n\r\n\r\n  // Public function proxy to forward single parameters as a struct.\r\n  function claim(uint16 _x, uint16 _y, uint16 _width, uint16 _height)\r\n    claimAllowed(_width, _height)\r\n    coordsValid(_x, _y, _width, _height)\r\n    external returns (uint)\r\n  {\r\n    Rect memory rect = Rect(_x, _y, _width, _height);\r\n    return claimShortParams(rect);\r\n  }\r\n\r\n  // Claims pixels and requires to have the sender enough unlocked tokens.\r\n  // Has a modifier to take some of the \"stack burden\" from the proxy function.\r\n  function claimShortParams(Rect _rect)\r\n    enoughTokens(_rect.width, _rect.height)\r\n    internal returns (uint id)\r\n  {\r\n    token.lockToken(msg.sender, _rect.width.mul(_rect.height));\r\n\r\n    // Check affected pixelblocks.\r\n    for (uint16 i = 0; i < _rect.width; i++) {\r\n      for (uint16 j = 0; j < _rect.height; j++) {\r\n        uint16 x = _rect.x.add(i);\r\n        uint16 y = _rect.y.add(j);\r\n\r\n        if (grid[x][y]) {\r\n          revert(\"Already claimed.\");\r\n        }\r\n\r\n        // Mark block as claimed.\r\n        grid[x][y] = true;\r\n      }\r\n    }\r\n\r\n    // Create placeholder ad.\r\n    id = createPlaceholderAd(_rect);\r\n\r\n    emit Claim(id, msg.sender, _rect.x, _rect.y, _rect.width, _rect.height);\r\n    return id;\r\n  }\r\n\r\n  // Delete an ad, unclaim pixelblocks and unlock tokens.\r\n  function release(uint256 _id) adExists(_id) onlyAdOwner(_id) external {\r\n    uint16 tokens = ads[_id].rect.width.mul(ads[_id].rect.height);\r\n\r\n    // Mark blocks as unclaimed.\r\n    for (uint16 i = 0; i < ads[_id].rect.width; i++) {\r\n      for (uint16 j = 0; j < ads[_id].rect.height; j++) {\r\n        uint16 x = ads[_id].rect.x.add(i);\r\n        uint16 y = ads[_id].rect.y.add(j);\r\n\r\n        // Mark block as unclaimed.\r\n        grid[x][y] = false;\r\n      }\r\n    }\r\n\r\n    // Delete ad\r\n    delete ads[_id];\r\n    // Reorganize index array and map\r\n    uint256 key = adIdToIndex[_id];\r\n    // Fill gap with last element of adIds\r\n    adIds[key] = adIds[adIds.length - 1];\r\n    // Update adIdToIndex\r\n    adIdToIndex[adIds[key]] = key;\r\n    // Decrease length of adIds array by 1\r\n    adIds.length--;\r\n\r\n    // Unlock tokens\r\n    if (now < allAdStart) {\r\n      // The ad must have locked presale tokens.\r\n      presales[msg.sender] = presales[msg.sender].add(tokens);\r\n    }\r\n    token.unlockToken(msg.sender, tokens);\r\n\r\n    emit Release(_id, msg.sender);\r\n  }\r\n\r\n  // The image must be an URL either of bzz, ipfs or http(s).\r\n  function editAd(uint _id, string _link, string _title, string _text, string _contact, bool _NSFW, bytes32 _digest, bytes2 _hashFunction, uint8 _size, bytes4 _storageEnginge) adExists(_id) onlyAdOwner(_id) public {\r\n    emit EditAd(_id, msg.sender, _link, _title, _text, _contact, _NSFW, _digest, _hashFunction, _size,  _storageEnginge);\r\n  }\r\n\r\n  // Allows contract owner to set the NSFW flag for a given ad.\r\n  function forceNSFW(uint256 _id) onlyOwner adExists(_id) external {\r\n    emit ForceNSFW(_id);\r\n  }\r\n\r\n  // Helper function for claim() to avoid a deep stack.\r\n  function createPlaceholderAd(Rect _rect) internal returns (uint id) {\r\n    Ad memory ad = Ad(msg.sender, _rect);\r\n    id = ads.push(ad) - 1;\r\n    uint256 key = adIds.push(id) - 1;\r\n    adIdToIndex[id] = key;\r\n    return id;\r\n  }\r\n\r\n  // Returns remaining balance of tokens purchased during presale period qualifying for earlier claims.\r\n  function presaleBalanceOf(address _holder) public view returns (uint16) {\r\n    return presales[_holder];\r\n  }\r\n\r\n  // Returns all currently active adIds.\r\n  function getAdIds() external view returns (uint256[]) {\r\n    return adIds;\r\n  }\r\n\r\n  /*********************************************************\r\n   *                                                       *\r\n   *                       Other                           *\r\n   *                                                       *\r\n   *********************************************************/\r\n\r\n  // Allow transfer of tokens even if minting is not yet finished.\r\n  function allowTransfer() onlyOwner external {\r\n    token.allowTransfer();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mdappSale\",\"type\":\"address\"}],\"name\":\"setMDAPPSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"forceNSFW\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint16\"},{\"name\":\"_y\",\"type\":\"uint16\"},{\"name\":\"_width\",\"type\":\"uint16\"},{\"name\":\"_height\",\"type\":\"uint16\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allAdStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"isPresale\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_link\",\"type\":\"string\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_text\",\"type\":\"string\"},{\"name\":\"_contact\",\"type\":\"string\"},{\"name\":\"_NSFW\",\"type\":\"bool\"},{\"name\":\"_digest\",\"type\":\"bytes32\"},{\"name\":\"_hashFunction\",\"type\":\"bytes2\"},{\"name\":\"_size\",\"type\":\"uint8\"},{\"name\":\"_storageEnginge\",\"type\":\"bytes4\"}],\"name\":\"editAd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"presaleBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAdStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_presaleAdStart\",\"type\":\"uint256\"},{\"name\":\"_allAdStart\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"width\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"height\",\"type\":\"uint16\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"link\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"contact\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"NSFW\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"digest\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"hashFunction\",\"type\":\"bytes2\"},{\"indexed\":false,\"name\":\"size\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"storageEngine\",\"type\":\"bytes4\"}],\"name\":\"EditAd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ForceNSFW\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MDAPP","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005bc7cd00000000000000000000000000000000000000000000000000000000005bd10780000000000000000000000000f6ececfa69042b24b1a290fa14fc140d110fa8ee","Library":"","SwarmSource":"bzzr://492431bb8e7e6ae54f2f17871466c80eb2ce7ee7a52e3cf998c26a02b0647bc8"}]}