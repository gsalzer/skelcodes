{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n// Spielley's King of the crypto hill beta Coallition expansion v1.0\r\n// Coallition owner sets shares for the alliance, alliance members send in their eth winnings to share among the group\r\n// Coallition owner can increase or decrease members and shares\r\n// this is not a trustless situation, alliance owner can screw everyone over, only join an alliance you trust\r\n\r\n// play at https://kotch.dvx.me/# \r\n// 25/08/2018\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\ncontract Coallition is Owned {\r\n     using SafeMath for uint;\r\n     \r\n     mapping(uint256 => address) members;\r\n     mapping(address => uint256) shares;\r\n     \r\n     uint256 total;\r\n     constructor () public {\r\n         \r\n    }\r\n     function addmember(uint256 index , address newmember) public onlyOwner  {\r\n   members[index] = newmember;\r\n}\r\n     function addshares(uint256 sharestoadd , address member) public onlyOwner  {\r\nshares[member] += sharestoadd;\r\n}\r\nfunction deductshares(uint256 sharestoadd , address member) public onlyOwner  {\r\n   shares[member] -= sharestoadd;\r\n}\r\nfunction setshares(uint256 sharestoadd , address member) public onlyOwner  {\r\n   shares[member] = sharestoadd;\r\n}\r\n// set total number of members\r\nfunction settotal(uint256 set) public onlyOwner  {\r\n   total = set;\r\n}\r\n    function payout() public payable {\r\n        \r\n   for(uint i=0; i< total; i++)\r\n        {\r\n            uint256 totalshares;\r\n            totalshares += shares[members[i]];\r\n        }\r\n        uint256 base = msg.value.div(totalshares);\r\n    for(i=0; i< total; i++)\r\n        {\r\n            \r\n            uint256 amounttotransfer = base.mul(shares[members[i]]);\r\n            members[i].transfer(amounttotransfer);\r\n            \r\n        }\r\n}\r\n function () external payable{payout();}     \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"sharestoadd\",\"type\":\"uint256\"},{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"deductshares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sharestoadd\",\"type\":\"uint256\"},{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"setshares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"set\",\"type\":\"uint256\"}],\"name\":\"settotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"newmember\",\"type\":\"address\"}],\"name\":\"addmember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sharestoadd\",\"type\":\"uint256\"},{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"addshares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Coallition","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e1f71fc6b1d4945de4ce5a924ee928f4f8c80627ce9832fa9f2ba8c7a4f5f334"}]}