{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max(uint a, uint b) internal pure returns (uint) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n}\r\n\r\n// @title The Contract is Mongolian National MDEX Token Issue.\r\n//\r\n// @Author: Tim Wars\r\n// @Date: 2018.8.1\r\n// @Seealso: ERC20\r\n//\r\ncontract MntToken {\r\n\r\n    // === Event ===\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Burn(address indexed from, uint value);\r\n    event TransferLocked(address indexed from, address indexed to, uint value, uint8 locktype);\r\n\tevent Purchased(address indexed recipient, uint purchase, uint amount);\r\n\r\n    // === Defined ===\r\n    using SafeMath for uint;\r\n\r\n    // --- Owner Section ---\r\n    address public owner;\r\n    bool public frozen = false; //\r\n\r\n    // --- ERC20 Token Section ---\r\n    uint8 constant public decimals = 6;\r\n    uint public totalSupply = 100*10**(8+uint256(decimals));  // ***** 100 * 100 Million\r\n    string constant public name = \"MDEX Token | Mongolia National Blockchain Digital Assets Exchange Token\";\r\n    string constant public symbol = \"MNT\";\r\n\r\n    mapping(address => uint) ownerance; // Owner Balance\r\n    mapping(address => mapping(address => uint)) public allowance; // Allower Balance\r\n\r\n    // --- Locked Section ---\r\n    uint8 LOCKED_TYPE_MAX = 2; // ***** Max locked type\r\n    uint private constant RELEASE_BASE_TIME = 1533686888; // ***** (2018-08-08 08:08:08) Private Lock phase start datetime (UTC seconds)\r\n    address[] private lockedOwner;\r\n    mapping(address => uint) public lockedance; // Lockeder Balance\r\n    mapping(address => uint8) public lockedtype; // Locked Type\r\n    mapping(address => uint8) public unlockedstep; // Unlocked Step\r\n\r\n    uint public totalCirculating; // Total circulating token amount\r\n\r\n    // === Modifier ===\r\n\r\n    // --- Owner Section ---\r\n    modifier isOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isNotFrozen() {\r\n        require(!frozen);\r\n        _;\r\n    }\r\n\r\n    // --- ERC20 Section ---\r\n    modifier hasEnoughBalance(uint _amount) {\r\n        require(ownerance[msg.sender] >= _amount);\r\n        _;\r\n    }\r\n\r\n    modifier overflowDetected(address _owner, uint _amount) {\r\n        require(ownerance[_owner] + _amount >= ownerance[_owner]);\r\n        _;\r\n    }\r\n\r\n    modifier hasAllowBalance(address _owner, address _allower, uint _amount) {\r\n        require(allowance[_owner][_allower] >= _amount);\r\n        _;\r\n    }\r\n\r\n    modifier isNotEmpty(address _addr, uint _value) {\r\n        require(_addr != address(0));\r\n        require(_value != 0);\r\n        _;\r\n    }\r\n\r\n    modifier isValidAddress {\r\n        assert(0x0 != msg.sender);\r\n        _;\r\n    }\r\n\r\n    // --- Locked Section ---\r\n    modifier hasntLockedBalance(address _checker) {\r\n        require(lockedtype[_checker] == 0);\r\n        _;\r\n    }\r\n\r\n    modifier checkLockedType(uint8 _locktype) {\r\n        require(_locktype > 0 && _locktype <= LOCKED_TYPE_MAX);\r\n        _;\r\n    }\r\n\r\n    // === Constructor ===\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        ownerance[msg.sender] = totalSupply;\r\n        totalCirculating = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    // --- ERC20 Token Section ---\r\n    function approve(address _spender, uint _value)\r\n        isNotFrozen\r\n        isValidAddress\r\n        public returns (bool success)\r\n    {\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0); // must spend to 0 where pre approve balance.\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        isNotFrozen\r\n        isValidAddress\r\n        overflowDetected(_to, _value)\r\n        public returns (bool success)\r\n    {\r\n        require(ownerance[_from] >= _value);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n\r\n        ownerance[_to] = ownerance[_to].add(_value);\r\n        ownerance[_from] = ownerance[_from].sub(_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public\r\n        constant returns (uint balance)\r\n    {\r\n        balance = ownerance[_owner] + lockedance[_owner];\r\n        return balance;\r\n    }\r\n\r\n\r\n    function available(address _owner) public\r\n        constant returns (uint)\r\n    {\r\n        return ownerance[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public\r\n        isNotFrozen\r\n        isValidAddress\r\n        isNotEmpty(_to, _value)\r\n        hasEnoughBalance(_value)\r\n        overflowDetected(_to, _value)\r\n        returns (bool success)\r\n    {\r\n        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\r\n        ownerance[_to] = ownerance[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // --- Owner Section ---\r\n    function transferOwner(address _newOwner)\r\n        isOwner\r\n        public returns (bool success)\r\n    {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function freeze()\r\n        isOwner\r\n        public returns (bool success)\r\n    {\r\n        frozen = true;\r\n        return true;\r\n    }\r\n\r\n    function unfreeze()\r\n        isOwner\r\n        public returns (bool success)\r\n    {\r\n        frozen = false;\r\n        return true;\r\n    }\r\n\r\n    function burn(uint _value)\r\n        isNotFrozen\r\n        isValidAddress\r\n        hasEnoughBalance(_value)\r\n        public returns (bool success)\r\n    {\r\n        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\r\n        ownerance[0x0] = ownerance[0x0].add(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        totalCirculating = totalCirculating.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    // --- Locked Section ---\r\n    function transferLocked(address _to, uint _value, uint8 _locktype) public\r\n        isNotFrozen\r\n        isOwner\r\n        isValidAddress\r\n        isNotEmpty(_to, _value)\r\n        hasEnoughBalance(_value)\r\n        hasntLockedBalance(_to)\r\n        checkLockedType(_locktype)\r\n        returns (bool success)\r\n    {\r\n        require(msg.sender != _to);\r\n        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\r\n        if (_locktype == 1) {\r\n            lockedance[_to] = _value;\r\n            lockedtype[_to] = _locktype;\r\n            lockedOwner.push(_to);\r\n            totalCirculating = totalCirculating.sub(_value);\r\n            emit TransferLocked(msg.sender, _to, _value, _locktype);\r\n        } else if (_locktype == 2) {\r\n            uint _first = _value / 100 * 8; // prevent overflow\r\n            ownerance[_to] = ownerance[_to].add(_first);\r\n            lockedance[_to] = _value.sub(_first);\r\n            lockedtype[_to] = _locktype;\r\n            lockedOwner.push(_to);\r\n            totalCirculating = totalCirculating.sub(_value.sub(_first));\r\n            emit Transfer(msg.sender, _to, _first);\r\n            emit TransferLocked(msg.sender, _to, _value.sub(_first), _locktype);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // *****\r\n    // Because too many unlocking steps * accounts, it will burn lots of GAS !!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    // Because too many unlocking steps * accounts, it will burn lots of GAS !!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    //\r\n    // LockedType 1 : after 6 monthes / release 10 % per month; 10 steps\r\n    // LockedType 2 :  before 0 monthes / release 8 % per month; 11 steps / 1 step has release real balance init.\r\n    function unlock(address _locker, uint _delta, uint8 _locktype) private\r\n        returns (bool success)\r\n    {\r\n        if (_locktype == 1) {\r\n            if (_delta < 6 * 30 days) {\r\n                return false;\r\n            }\r\n            uint _more1 = _delta.sub(6 * 30 days);\r\n            uint _step1 = _more1 / 30 days;\r\n            for(uint8 i = 0; i < 10; i++) {\r\n                if (unlockedstep[_locker] == i && i < 9 && i <= _step1 ) {\r\n                    ownerance[_locker] = ownerance[_locker].add(lockedance[_locker] / (10 - i));\r\n                    lockedance[_locker] = lockedance[_locker].sub(lockedance[_locker] / (10 - i));\r\n                    unlockedstep[_locker] = i + 1;\r\n                } else if (i == 9 && unlockedstep[_locker] == 9 && _step1 == 9){\r\n                    ownerance[_locker] = ownerance[_locker].add(lockedance[_locker]);\r\n                    lockedance[_locker] = 0;\r\n                    unlockedstep[_locker] = 0;\r\n                    lockedtype[_locker] = 0;\r\n                }\r\n            }\r\n        } else if (_locktype == 2) {\r\n            if (_delta < 30 days) {\r\n                return false;\r\n            }\r\n            uint _more2 = _delta - 30 days;\r\n            uint _step2 = _more2 / 30 days;\r\n            for(uint8 j = 0; j < 11; j++) {\r\n                if (unlockedstep[_locker] == j && j < 10 && j <= _step2 ) {\r\n                    ownerance[_locker] = ownerance[_locker].add(lockedance[_locker] / (11 - j));\r\n                    lockedance[_locker] = lockedance[_locker].sub(lockedance[_locker] / (11 - j));\r\n                    unlockedstep[_locker] = j + 1;\r\n                } else if (j == 10 && unlockedstep[_locker] == 10 && _step2 == 10){\r\n                    ownerance[_locker] = ownerance[_locker].add(lockedance[_locker]);\r\n                    lockedance[_locker] = 0;\r\n                    unlockedstep[_locker] = 0;\r\n                    lockedtype[_locker] = 0;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function lockedCounts() public view\r\n        returns (uint counts)\r\n    {\r\n        return lockedOwner.length;\r\n    }\r\n\r\n    function releaseLocked() public\r\n        isNotFrozen\r\n        returns (bool success)\r\n    {\r\n        require(now > RELEASE_BASE_TIME);\r\n        uint delta = now - RELEASE_BASE_TIME;\r\n        uint lockedAmount;\r\n        for (uint i = 0; i < lockedOwner.length; i++) {\r\n            if ( lockedance[lockedOwner[i]] > 0) {\r\n                lockedAmount = lockedance[lockedOwner[i]];\r\n                unlock(lockedOwner[i], delta, lockedtype[lockedOwner[i]]);\r\n                totalCirculating = totalCirculating.add(lockedAmount - lockedance[lockedOwner[i]]);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"available\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedtype\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedCounts\",\"outputs\":[{\"name\":\"counts\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCirculating\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseLocked\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockedstep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_locktype\",\"type\":\"uint8\"}],\"name\":\"transferLocked\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"locktype\",\"type\":\"uint8\"}],\"name\":\"TransferLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"purchase\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"}]","ContractName":"MntToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5bc057280f1afb7e0518c69e66f2b67066cc20bc8a33fc3c78856767def197c8"}]}