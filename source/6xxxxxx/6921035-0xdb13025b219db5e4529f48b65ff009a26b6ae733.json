{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner=0xE2d9b8259F74a46b5E3f74A30c7867be0a5f5185;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n constructor() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /// @dev counter to allow mutex lock with only one SSTORE operation\r\n  uint256 private _guardCounter;\r\n\r\n  constructor() internal {\r\n    // The counter starts at one to prevent changing it from zero to a non-zero\r\n    // value, which is a more expensive operation.\r\n    _guardCounter = 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    _guardCounter += 1;\r\n    uint256 localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter);\r\n  }\r\n\r\n}\r\ncontract Haltable is Ownable  {\r\n    \r\n  bool public halted;\r\n  \r\n   modifier stopInEmergency {\r\n    if (halted) revert();\r\n    _;\r\n  }\r\n\r\n  modifier stopNonOwnersInEmergency {\r\n    if (halted && msg.sender != owner) revert();\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    if (!halted) revert();\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n\r\n}\r\ncontract Ubricoin is IERC20,Ownable,ReentrancyGuard,Haltable{\r\n  \r\n  using SafeMath for uint256;\r\n\r\n  // UBN Token parameters\r\n  string public name = 'Ubricoin';\r\n  string public symbol = 'UBN';\r\n  string public version = '2.0';\r\n  uint256 public constant RATE = 1000;  //1 ether = 1000 Ubricoins tokens\r\n  \r\n  // min tokens to be a holder, 0.1\r\n  uint256 public constant MIN_HOLDER_TOKENS = 10 ** uint256(decimals - 1);\r\n  \r\n  // 18 decimals is the strongly suggested default, avoid changing it\r\n  uint8   public constant decimals = 18;\r\n  uint256 public constant decimalFactor = 10 ** uint256(decimals);\r\n  uint256 public totalSupply_;           // amount of tokens already sold/supply                                 \r\n  uint256 public constant TOTAL_SUPPLY = 10000000000 * decimalFactor; // The initialSupply or totalSupply of  100% Released at Token Distribution (TD)\r\n  uint256 public constant SALES_SUPPLY =  1300000000 * decimalFactor; // 2.30% Released at Token Distribution (TD)\r\n  \r\n  // Funds supply constants // tokens to be Distributed at every stage \r\n  uint256 public AVAILABLE_FOUNDER_SUPPLY  =  1500000000 * decimalFactor; // 17.3% Released at TD \r\n  uint256 public AVAILABLE_AIRDROP_SUPPLY  =  2000000000 * decimalFactor; // 22.9% Released at TD/Eco System Allocated\r\n  uint256 public AVAILABLE_OWNER_SUPPLY    =  2000000000 * decimalFactor; // 22.9% Released at TD \r\n  uint256 public AVAILABLE_TEAMS_SUPPLY    =  3000000000 * decimalFactor; // 34.5% Released at TD \r\n  uint256 public AVAILABLE_BONUS_SUPPLY    =   200000000 * decimalFactor; // 0.10% Released at TD \r\n  uint256 public claimedTokens = 0;\r\n  \r\n  // Funds supply addresses constants // tokens distribution\r\n  address public constant AVAILABLE_FOUNDER_SUPPLY_ADDRESS = 0xAC762012330350DDd97Cc64B133536F8E32193a8; //AVAILABLE_FOUNDER_SUPPLY_ADDRESS 1\r\n  address public constant AVAILABLE_AIRDROP_SUPPLY_ADDRESS = 0x28970854Bfa61C0d6fE56Cc9daAAe5271CEaEC09; //AVAILABLE_AIRDROP_SUPPLY_ADDRESS 2 Eco system Allocated\r\n  address public constant AVAILABLE_OWNER_SUPPLY_ADDRESS = 0xE2d9b8259F74a46b5E3f74A30c7867be0a5f5185;   //AVAILABLE_OWNER_SUPPLY_ADDRESS   3\r\n  address public constant AVAILABLE_BONUS_SUPPLY_ADDRESS = 0xDE59297Bf5D1D1b9d38D8F50e55A270eb9aE136e;   //AVAILABLE_BONUS1_SUPPLY_ADDRESS  4\r\n  address public constant AVAILABLE_TEAMS_SUPPLY_ADDRESS = 0x9888375f4663891770DaaaF9286d97d44FeFC82E;   //AVAILABLE_RESERVE_TEAM_SUPPLY_ADDRESS 5\r\n\r\n  // Token holders\r\n  address[] public holders;\r\n  \r\n\r\n  // ICO address\r\n  address public icoAddress;\r\n  mapping (address => uint256) balances;  // This creates an array with all balances\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  \r\n  // Keeps track of whether or not an Ubricoin airdrop has been made to a particular address\r\n  mapping (address => bool) public airdrops;\r\n  \r\n  mapping (address => uint256) public holderNumber; // Holders number\r\n  \r\n  // This generates a public event on the blockchain that will notify clients\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event TransferredToken(address indexed to, uint256 value);\r\n  event FailedTransfer(address indexed to, uint256 value);\r\n  // This notifies clients about the amount burnt , only admin is able to burn the contract\r\n  event Burn(address from, uint256 value); \r\n  event AirDropped ( address[] _recipient, uint256 _amount, uint256 claimedTokens);\r\n  event AirDrop_many ( address[] _recipient, uint256[] _amount, uint256 claimedTokens);\r\n  \r\n \r\n    /**\r\n     * @dev Constructor that gives a portion of all existing tokens to various addresses.\r\n     * @dev Distribute founder, airdrop,owner, reserve_team and bonus_supply tokens\r\n     * @dev and Ico address for the remaining tokens\r\n     */\r\n  constructor () public  { \r\n      \r\n        // Allocate tokens to the available_founder_supply_address fund 1\r\n        balances[AVAILABLE_FOUNDER_SUPPLY_ADDRESS] = AVAILABLE_FOUNDER_SUPPLY;\r\n        holders.push(AVAILABLE_FOUNDER_SUPPLY_ADDRESS);\r\n        emit Transfer(0x0, AVAILABLE_FOUNDER_SUPPLY_ADDRESS, AVAILABLE_FOUNDER_SUPPLY);\r\n\r\n        // Allocate tokens to the available_airdrop_supply_address fund 2 eco system allocated\r\n        balances[AVAILABLE_AIRDROP_SUPPLY_ADDRESS] = AVAILABLE_AIRDROP_SUPPLY;\r\n        holders.push(AVAILABLE_AIRDROP_SUPPLY_ADDRESS);\r\n        emit Transfer(0x0, AVAILABLE_AIRDROP_SUPPLY_ADDRESS, AVAILABLE_AIRDROP_SUPPLY);\r\n\r\n        // Allocate tokens to the available_owner_supply_address fund 3\r\n        balances[AVAILABLE_OWNER_SUPPLY_ADDRESS] = AVAILABLE_OWNER_SUPPLY;\r\n        holders.push(AVAILABLE_OWNER_SUPPLY_ADDRESS);\r\n        emit Transfer(0x0, AVAILABLE_OWNER_SUPPLY_ADDRESS, AVAILABLE_OWNER_SUPPLY);\r\n\r\n        // Allocate tokens to the available_reserve_team_supply_address fund 4\r\n        balances[AVAILABLE_TEAMS_SUPPLY_ADDRESS] = AVAILABLE_TEAMS_SUPPLY;\r\n        holders.push(AVAILABLE_TEAMS_SUPPLY_ADDRESS);\r\n        emit Transfer(0x0, AVAILABLE_TEAMS_SUPPLY_ADDRESS, AVAILABLE_TEAMS_SUPPLY);\r\n        \r\n        // Allocate tokens to the available_reserve_team_supply_address fund 5\r\n        balances[AVAILABLE_BONUS_SUPPLY_ADDRESS] = AVAILABLE_BONUS_SUPPLY;\r\n        holders.push(AVAILABLE_BONUS_SUPPLY_ADDRESS);\r\n        emit Transfer(0x0, AVAILABLE_BONUS_SUPPLY_ADDRESS, AVAILABLE_BONUS_SUPPLY);\r\n\r\n        totalSupply_ = TOTAL_SUPPLY.sub(SALES_SUPPLY);\r\n        \r\n    }\r\n    \r\n   /**\r\n     * @dev Function fallback/payable to buy tokens from contract by sending ether.\r\n     * @notice Buy tokens from contract by sending ether\r\n     * @dev This are the tokens allocated for sale's supply\r\n     */\r\n  function () payable nonReentrant external  {\r\n      \r\n    require(msg.data.length == 0);\r\n    require(msg.value > 0);\r\n    \r\n      uint256 tokens = msg.value.mul(RATE); // calculates the aamount\r\n      balances[msg.sender] = balances[msg.sender].add(tokens);\r\n      totalSupply_ = totalSupply_.add(tokens);\r\n      owner.transfer(msg.value);  //make transfer\r\n      \r\n    }\r\n\r\n    /**\r\n     * @dev set ICO address and allocate sale supply to it\r\n     *      Tokens left for payment using ethers\r\n     */\r\n  function setICO(address _icoAddress) public onlyOwner {\r\n      \r\n    require(_icoAddress != address(0));\r\n    require(icoAddress  == address(0));\r\n    require(totalSupply_ == TOTAL_SUPPLY.sub(SALES_SUPPLY));\r\n      \r\n       // Allocate tokens to the ico contract\r\n       balances[_icoAddress] = SALES_SUPPLY;\r\n       emit Transfer(0x0, _icoAddress, SALES_SUPPLY);\r\n\r\n       icoAddress = _icoAddress;\r\n       totalSupply_ = TOTAL_SUPPLY;\r\n       \r\n    }\r\n\r\n    /**\r\n     * @dev total number of tokens in existence\r\n     */\r\n  function totalSupply() public view returns (uint256) {\r\n      \r\n      return totalSupply_;\r\n      \r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n      \r\n      return balances[_owner];\r\n      \r\n    }\r\n  \r\n\r\n   /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining ) {\r\n      \r\n      return allowed[_owner][_spender];\r\n      \r\n    }\r\n    \r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n  function _transfer(address _from, address _to, uint256 _value) internal {\r\n      \r\n    require(_to != 0x0);                 // Prevent transfer to 0x0 address. Use burn() instead\r\n    require(balances[_from] >= _value);  // Check if the sender has enough\r\n    require(balances[_to] + _value >= balances[_to]);             // Check for overflows\r\n     \r\n      uint256 previousBalances = balances[_from] + balances[_to];   // Save this for an assertion in the future\r\n      balances[_from] -= _value;   // Subtract from the sender\r\n      balances[_to] += _value;     // Add the same to the recipient\r\n      emit Transfer(_from, _to, _value);\r\n      \r\n      // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n      assert(balances[_from] + balances[_to] == previousBalances);  \r\n      \r\n    }\r\n    \r\n   \r\n    /**\r\n     * Standard transfer function \r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n      \r\n       require(balances[msg.sender] > 0);                     \r\n       require(balances[msg.sender] >= _value);  // Check if the sender has enough  \r\n       require(_to != address(0x0));             // Prevent transfer to 0x0 address. Use burn() instead\r\n       \r\n       require(_value > 0);\t\r\n       require(_to != msg.sender);               // Check if sender and receiver is not same\r\n       require(_value <= balances[msg.sender]);\r\n\r\n       // SafeMath.sub will throw if there is not enough balance.\r\n       balances[msg.sender] = balances[msg.sender].sub(_value); // Subtract value from sender\r\n       balances[_to] = balances[_to].add(_value);               // Add the value to the receiver\r\n       emit Transfer(msg.sender, _to, _value);                  // Notify all clients about the transfer events\r\n       return true;\r\n       \r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n      \r\n    require(_to != address(0x0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);  // Check allowance\r\n\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n      \r\n   }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n    */\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n      \r\n      allowed[msg.sender][_spender] = _value;\r\n      emit  Approval(msg.sender, _spender, _value);\r\n      return true;\r\n      \r\n    }\r\n    \r\n  // get holders count\r\n  function getHoldersCount() public view returns (uint256) {\r\n      \r\n        return holders.length;\r\n    }\r\n    \r\n  // preserve holders list\r\n  function preserveHolders(address _from, address _to, uint256 _value) internal {\r\n      \r\n        if (balances[_from].sub(_value) < MIN_HOLDER_TOKENS) \r\n            removeHolder(_from);\r\n        if (balances[_to].add(_value) >= MIN_HOLDER_TOKENS) \r\n            addHolder(_to);   \r\n    }\r\n\r\n  // remove holder from the holders list\r\n  function removeHolder(address _holder) internal {\r\n      \r\n        uint256 _number = holderNumber[_holder];\r\n\r\n        if (_number == 0 || holders.length == 0 || _number > holders.length)\r\n            return;\r\n\r\n        uint256 _index = _number.sub(1);\r\n        uint256 _lastIndex = holders.length.sub(1);\r\n        address _lastHolder = holders[_lastIndex];\r\n\r\n        if (_index != _lastIndex) {\r\n            holders[_index] = _lastHolder;\r\n            holderNumber[_lastHolder] = _number;\r\n        }\r\n\r\n        holderNumber[_holder] = 0;\r\n        holders.length = _lastIndex;\r\n    } \r\n\r\n  // add holder to the holders list\r\n  function addHolder(address _holder) internal {\r\n      \r\n        if (holderNumber[_holder] == 0) {\r\n            holders.push(_holder);\r\n            holderNumber[_holder] = holders.length;\r\n            \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n function _burn(address account, uint256 value) external onlyOwner {\r\n     \r\n      require(balances[msg.sender] >= value);   // Check if the sender has enough\r\n      balances[msg.sender] -= value;            // Subtract from the sender\r\n      totalSupply_ -= value;                    // Updates totalSupply\r\n      emit Burn(msg.sender, value);\r\n      //return true;\r\n      \r\n      require(account != address(0x0));\r\n\r\n      totalSupply_ = totalSupply_.sub(value);\r\n      balances[account] = balances[account].sub(value);\r\n      emit Transfer(account, address(0X0), value);\r\n     \r\n    }\r\n    \r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n  function _burnFrom(address account, uint256 value) external onlyOwner {\r\n      \r\n      require(balances[account] >= value);               // Check if the targeted balance is enough\r\n      require(value <= allowed[account][msg.sender]);    // Check allowance\r\n      balances[account] -= value;                        // Subtract from the targeted balance\r\n      allowed[account][msg.sender] -= value;             // Subtract from the sender's allowance\r\n      totalSupply_ -= value;                             // Update totalSupply\r\n      emit Burn(account, value);\r\n      // return true; \r\n      \r\n      allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\r\n      emit Burn(account, value);\r\n      emit Approval(account, msg.sender, allowed[account][msg.sender]);\r\n      \r\n    }\r\n    \r\n  function validPurchase() internal returns (bool) {\r\n      \r\n      bool lessThanMaxInvestment = msg.value <= 1000 ether; // change the value to whatever you need\r\n      return validPurchase() && lessThanMaxInvestment;\r\n      \r\n    }\r\n    \r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param target The account that will receive the created tokens.\r\n     * @param mintedAmount The amount that will be created.\r\n     * @dev  perform a minting/create new UBN's for new allocations\r\n     * @param  target is the address to mint tokens to\r\n     * \r\n     */\r\n  function mintToken(address target, uint256 mintedAmount) public onlyOwner {\r\n      \r\n      balances[target] += mintedAmount;\r\n      totalSupply_ += mintedAmount;\r\n      \r\n      emit Transfer(0, owner, mintedAmount);\r\n      emit Transfer(owner, target, mintedAmount);\r\n      \r\n    }\r\n    \r\n    /**\r\n    * @dev perform a transfer of allocations\r\n    * @param _recipient is a list of recipients\r\n    * \r\n    * Below function can be used when you want to send every recipeint with different number of tokens\r\n    * \r\n    */\r\n  function airDrop_many(address[] _recipient, uint256[] _amount) public onlyOwner {\r\n        \r\n        require(msg.sender == owner);\r\n        require(_recipient.length == _amount.length);\r\n        uint256 amount = _amount[i] * uint256(decimalFactor);\r\n        uint256 airdropped;\r\n    \r\n        for (uint i=0; i < _recipient.length; i++) {\r\n           if (!airdrops[_recipient[i]]) {\r\n                airdrops[_recipient[i]] = true;\r\n                require(Ubricoin.transfer(_recipient[i], _amount[i] * decimalFactor));\r\n                //Ubricoin.transfer(_recipient[i], _amount[i]);\r\n                airdropped = airdropped.add(amount );\r\n            } else{\r\n                \r\n                 emit FailedTransfer(_recipient[i], airdropped); \r\n        }\r\n        \r\n    AVAILABLE_AIRDROP_SUPPLY = AVAILABLE_AIRDROP_SUPPLY.sub(airdropped);\r\n    //totalSupply_ = totalSupply_.sub(airdropped);\r\n    claimedTokens = claimedTokens.add(airdropped);\r\n    emit AirDrop_many(_recipient, _amount, claimedTokens);\r\n    \r\n        }\r\n    }\r\n    \r\n   /**\r\n    * @dev perform a transfer of allocations\r\n    * @param _recipient is a list of recipients\r\n    * \r\n    * this function can be used when you want to send same number of tokens to all the recipients\r\n    * \r\n    */\r\n  function airDrop(address[] _recipient, uint256 _amount) public onlyOwner {\r\n      \r\n        require(_amount > 0);\r\n        uint256 airdropped;\r\n        uint256 amount = _amount * uint256(decimalFactor);\r\n        for (uint256 index = 0; index < _recipient.length; index++) {\r\n            if (!airdrops[_recipient[index]]) {\r\n                airdrops[_recipient[index]] = true;\r\n                require(Ubricoin.transfer(_recipient[index], amount * decimalFactor ));\r\n                airdropped = airdropped.add(amount );\r\n            }else{\r\n            \r\n            emit FailedTransfer(_recipient[index], airdropped); \r\n        }\r\n    }\r\n        \r\n    AVAILABLE_AIRDROP_SUPPLY = AVAILABLE_AIRDROP_SUPPLY.sub(airdropped);\r\n    //totalSupply_ = totalSupply_.sub(airdropped);\r\n    claimedTokens = claimedTokens.add(airdropped);\r\n    emit AirDropped(_recipient, _amount, claimedTokens);\r\n    \r\n    }\r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_FOUNDER_SUPPLY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_BONUS_SUPPLY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_AIRDROP_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_FOUNDER_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_TEAMS_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_BONUS_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_OWNER_SUPPLY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALES_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHoldersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_TEAMS_SUPPLY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_AIRDROP_SUPPLY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdrops\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoAddress\",\"type\":\"address\"}],\"name\":\"setICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airDrop_many\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_HOLDER_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_OWNER_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferredToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_recipient\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"claimedTokens\",\"type\":\"uint256\"}],\"name\":\"AirDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_recipient\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"claimedTokens\",\"type\":\"uint256\"}],\"name\":\"AirDrop_many\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Ubricoin","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1c5731f585faeaa66f531489bc95cdf75f22b95e03a38f5a224e307089b0f054"}]}