{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n//Standart full ECR20 contract interface\r\ncontract ERC20\r\n{\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public constant decimals = 18;\r\n    \r\n    constructor(string _name, string _symbol) public \r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n}\r\n\r\n//Contract for check ownership\r\ncontract Ownable\r\n{\r\n    address internal owner;\r\n        \r\n    constructor() public \r\n    {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() \r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNotOwner()\r\n    {\r\n        require(msg.sender != owner);\r\n        _;\r\n    }\r\n}\r\n\r\n//Contract for check Issuers\r\ncontract Issuable is Ownable\r\n{\r\n    mapping (address => bool) internal issuers;\r\n    \r\n    event IssuerAdd(address who);\r\n    event IssuerRemoved(address who);\r\n    \r\n    function addIssuer(address who) onlyOwner public\r\n    {\r\n        require(who != owner); // do not allow add owner to issuers list\r\n        require(!issuers[who]);\r\n        issuers[who] = true;\r\n        emit IssuerAdd(who);\r\n    }\r\n    \r\n    function removeIssuer(address who) onlyOwner public\r\n    {\r\n        require(issuers[who]);\r\n        issuers[who] = false;\r\n        emit IssuerRemoved(who);\r\n    }\r\n    \r\n    modifier onlyIssuer()\r\n    {\r\n        require(issuers[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    function IsIssuer(address who) public view onlyOwner returns(bool)\r\n    {\r\n        return issuers[who];\r\n    }\r\n}\r\n\r\n//Contract for check time limits of ICO\r\ncontract TimeLimit\r\n{\r\n    uint256 public ICOStart;// = 1521198000; //UnixTime gmt\r\n    uint256 public ICOEnd;// = 1521208800; //UnixTime gmt\r\n    uint256 public TransferStart;// = 1521212400; //UnixTime gmt\r\n    \r\n    bool internal ICOEnable;\r\n    bool internal TransferEnable;\r\n    \r\n    event ICOStarted();\r\n    event ICOEnded();\r\n    event TrasferEnabled();\r\n    \r\n    modifier onlyInIssueTime()\r\n    {\r\n        require(IsIssueTime());\r\n        //require(now > ICOStart);\r\n        //require(now <= TransferStart); //We need time to issue last transactions in other money\r\n        if (!ICOEnable && now <= ICOEnd)\r\n        {\r\n            emit ICOStarted();\r\n            ICOEnable = true;\r\n        }\r\n        if (ICOEnable && now > ICOEnd)\r\n        {\r\n            emit ICOEnded();\r\n            ICOEnable = false;\r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier transferEnable()\r\n    {\r\n        require(now > TransferStart);\r\n        if (!TransferEnable)\r\n        {\r\n            emit TrasferEnabled();\r\n            TransferEnable = true;\r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier closeCheckICO()\r\n    {\r\n        if (now > TransferStart) \r\n        {\r\n            closeICO();\r\n            return;\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function IsIssueTime() public view returns(bool)\r\n    {\r\n        return (now > ICOStart && now <= TransferStart);\r\n    }\r\n    \r\n    function IsIcoTime() public view returns(bool)\r\n    {\r\n        return (now > ICOStart && now <= ICOEnd);\r\n    }\r\n    \r\n    function IsTransferEnable() public view returns(bool)\r\n    {\r\n        return (now > TransferStart);\r\n    }\r\n    \r\n    function closeICO() internal;\r\n}\r\n\r\n//Main contract\r\ncontract OurContract is ERC20, Issuable, TimeLimit\r\n{\r\n    event Cause(address to, uint256 val, uint8 _type, string message);\r\n    \r\n    //Public token user functions\r\n    function transfer(\r\n        address to, uint256 value\r\n        ) transferEnable public returns (bool)\r\n    {\r\n        return _transfer(msg.sender, to, value);\r\n    }\r\n    \r\n    function transferFrom(\r\n        address from, address to, uint256 value\r\n        ) transferEnable public returns (bool) \r\n    {\r\n        require(value <= allowances[from][msg.sender]);\r\n        _transfer(from, to, value);\r\n        allowances[from][msg.sender] = allowances[from][msg.sender] - value;\r\n        return true;\r\n    }\r\n    \r\n    function approve(\r\n        address spender, uint256 value\r\n        ) public onlyNotOwner returns (bool)\r\n    {\r\n        allowances[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    //Public views\r\n    function totalSupply() public view returns (uint256) \r\n    {\r\n        return totalSupply_;\r\n    }\r\n    \r\n    function balanceOf(address owner_) public view returns (uint256 balance) \r\n    {\r\n        return balances[owner_];\r\n    }\r\n    \r\n    function allowance(\r\n        address owner_, address spender\r\n        ) public view returns (uint256) \r\n    {\r\n        return allowances[owner_][spender];\r\n    }\r\n    \r\n    //Public issuers function\r\n    function issue(\r\n        address to, uint256 value, uint8 _type, string message\r\n        ) onlyIssuer onlyInIssueTime closeCheckICO public\r\n    {\r\n        require(to != owner);\r\n        require(!issuers[to]);\r\n        _transfer(owner, to, value);\r\n        emit Cause(to, value, _type, message);\r\n    }\r\n    \r\n    //Public owner functions\r\n    //Constructor\r\n    constructor(\r\n        string _name, string _symbol\r\n        ) public \r\n        ERC20(_name, _symbol)\r\n    {\r\n        totalSupply_ = 300000000000000000000000000; //With 18 zeros at end //1 000 000 000 000000000000000000;\r\n        ICOStart = 1537747200; //UnixTime gmt\r\n        ICOEnd = 1564531200; //UnixTime gmt\r\n        TransferStart = 1565308800; //UnixTime gmt\r\n        balances[msg.sender] = totalSupply_;\r\n    }\r\n    \r\n    function endICO() onlyOwner closeCheckICO public returns(bool)\r\n    {\r\n        return (now > ICOEnd);\r\n    }\r\n    \r\n    //addIssuer from Issuable\r\n    //removeIssuer from Issuable\r\n    \r\n    //Internal variables\r\n    uint256 internal totalSupply_;\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowances;\r\n    \r\n    //Internal functions\r\n    function _transfer(\r\n        address from, address to, uint256 value\r\n        ) onlyNotOwner internal returns (bool) \r\n    {\r\n        require(to != address(0));\r\n        require(value <= balances[from]);\r\n        require(value + balances[to] > balances[to]);\r\n\r\n        balances[from] = balances[from] - value;\r\n        balances[to] = balances[to] + value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function closeICO() internal\r\n    {\r\n        totalSupply_ -= balances[owner];\r\n        balances[owner] = 0;\r\n        owner = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"addIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsIssueTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"removeIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsIcoTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsTransferEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TransferStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"IsIssuer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Cause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICOStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICOEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TrasferEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"IssuerAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"IssuerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OurContract","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c466f7274464320546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044646435400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://dfe40898a4c1b4e8c1db49cf5945b052ea5afc4c8b99e42c44cad7c0933ed2d6"}]}