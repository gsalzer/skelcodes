{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\ncontract reanimator {\r\n    uint public advertisingPot;\r\n    mapping (uint256 => uint256) advertisingPotDistributed;\r\n    uint public lastDistrib;\r\n    uint public currentDistribRound;\r\n    uint public numOfAdvert;\r\n\r\n    address payable support;\r\n\r\n    mapping (address => uint256) double;\r\n    mapping (address => uint256) oneAndAHalf;\r\n    mapping (address => uint256) twoWeeks;\r\n    mapping (address => uint256) maximum;\r\n    mapping (address => uint256) advertising;\r\n    mapping (address => uint) advertisingLastWithdrawal;\r\n\r\n    constructor () public {\r\n        currentDistribRound = 0;\r\n        support = 0x3442d50F3F5c5E796d2ed3DdB95f0fB4fA54F144;\r\n        lastDistrib = now;\r\n    }\r\n\r\n    function () payable external {\r\n        support.transfer((3*msg.value)/50);\r\n        if (msg.value < 10**17) {advertisingPot += msg.value; return;}\r\n        if (msg.value == 10**19) {maximum[msg.sender] = now; return;}\r\n        if (msg.value == 5*10**18) {twoWeeks[msg.sender] = now; return;}\r\n        if (msg.value == 10**18) {oneAndAHalf[msg.sender] = now; return;}\r\n        if (msg.value == 3*10**17) {double[msg.sender] = now; return;}\r\n        if (msg.value == 10**17) {advertising[msg.sender] = now; advertisingLastWithdrawal[msg.sender] = currentDistribRound; numOfAdvert += 1; return;}\r\n        if (msg.value == 0) {withdraw(msg.sender); return;}\r\n        advertisingPot += msg.value;\r\n    }\r\n\r\n    function distributeAdvertisingFunds() public {\r\n        require (now - lastDistrib >= 1 weeks);\r\n        advertisingPotDistributed[currentDistribRound] = (advertisingPot / ( 2 * numOfAdvert));\r\n        currentDistribRound +=1;\r\n        advertisingPot = 0;\r\n        lastDistrib = now;\r\n    }\r\n\r\n    function getAdvBalance(address addr) public view returns (uint balance) {\r\n        uint _balance;\r\n        for (uint i = advertisingLastWithdrawal[addr]; i<currentDistribRound; i+=1) {\r\n                _balance += advertisingPotDistributed[i];\r\n        }\r\n        return _balance;\r\n    }\r\n    \r\n    function getAdvLastWithdrawal(address addr) public view returns (uint round) {\r\n        return advertisingLastWithdrawal[addr];\r\n    }\r\n\r\n    function withdraw(address payable addr) public {\r\n        uint toTransfer;\r\n\r\n        if (maximum[addr] != 0 && (now - maximum[addr] > 1 weeks)) {\r\n            toTransfer = 10**19 + 10**17 * (now - maximum[addr]) / 1 days;\r\n            maximum[addr] = 0;\r\n            addr.transfer(toTransfer);\r\n            return;\r\n        }\r\n\r\n        if (twoWeeks[addr] !=0 && (now - twoWeeks[addr] > 2 weeks)) {\r\n            toTransfer = 5 * 10**18 + 10**17 * (now - twoWeeks[addr]) / 1 days;\r\n            if (toTransfer > 6 * 10**18) toTransfer = 6 * 10**18;\r\n            twoWeeks[addr] = 0;\r\n            addr.transfer(toTransfer);\r\n            return;\r\n        }\r\n\r\n        if (oneAndAHalf[addr] !=0 && (now - oneAndAHalf[addr] > 28 days)) {\r\n            toTransfer = 10**18 + 2 * 10**16 * (now - oneAndAHalf[addr]) / 1 days;\r\n            if (toTransfer > 15 * 10**17) toTransfer =  15 * 10**17;\r\n            oneAndAHalf[addr] = 0;\r\n            addr.transfer(toTransfer);\r\n            return;\r\n        }\r\n\r\n        if (double[addr]!= 0 && (now - double[addr] > 53 days) ) {\r\n            toTransfer = 3 * 10**17 + 6 * 10**15 * (now - double[addr]) / 1 days;\r\n            if (toTransfer > 6 * 10**17) toTransfer = 6 * 10**17;\r\n            double[addr] = 0;\r\n            addr.transfer(toTransfer);\r\n            return;\r\n        }\r\n\r\n        if (advertising[addr] != 0) {\r\n            toTransfer = getAdvBalance(addr);\r\n            require (toTransfer>0);\r\n            advertisingLastWithdrawal[addr] = currentDistribRound;\r\n            addr.transfer(toTransfer);\r\n            return;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"distributeAdvertisingFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAdvBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDistribRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfAdvert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertisingPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDistrib\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAdvLastWithdrawal\",\"outputs\":[{\"name\":\"round\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"reanimator","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5e360109d3a644068f7fdf9177aa5395356da2ccda71ee48312ba89d6e14abe9"}]}