{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title Migratable\r\n * Helper contract to support intialization and migration schemes between\r\n * different implementations of a contract in the context of upgradeability.\r\n * To use it, replace the constructor with a function that has the\r\n * `isInitializer` modifier starting with `\"0\"` as `migrationId`.\r\n * When you want to apply some migration code during an upgrade, increase\r\n * the `migrationId`. Or, if the migration code must be applied only after\r\n * another migration has been already applied, use the `isMigration` modifier.\r\n * This helper supports multiple inheritance.\r\n * WARNING: It is the developer's responsibility to ensure that migrations are\r\n * applied in a correct order, or that they are run at all.\r\n * See `Initializable` for a simpler version.\r\n */\r\ncontract Migratable {\r\n  /**\r\n   * @dev Emitted when the contract applies a migration.\r\n   * @param contractName Name of the Contract.\r\n   * @param migrationId Identifier of the migration applied.\r\n   */\r\n  event Migrated(string contractName, string migrationId);\r\n\r\n  /**\r\n   * @dev Mapping of the already applied migrations.\r\n   * (contractName => (migrationId => bool))\r\n   */\r\n  mapping (string => mapping (string => bool)) internal migrated;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to use in the initialization function of a contract.\r\n   * @param contractName Name of the contract.\r\n   * @param migrationId Identifier of the migration.\r\n   */\r\n  modifier isInitializer(string contractName, string migrationId) {\r\n    require(!isMigrated(contractName, migrationId));\r\n    _;\r\n    emit Migrated(contractName, migrationId);\r\n    migrated[contractName][migrationId] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to use in the migration of a contract.\r\n   * @param contractName Name of the contract.\r\n   * @param requiredMigrationId Identifier of the previous migration, required\r\n   * to apply new one.\r\n   * @param newMigrationId Identifier of the new migration to be applied.\r\n   */\r\n  modifier isMigration(string contractName, string requiredMigrationId, string newMigrationId) {\r\n    require(isMigrated(contractName, requiredMigrationId) && !isMigrated(contractName, newMigrationId));\r\n    _;\r\n    emit Migrated(contractName, newMigrationId);\r\n    migrated[contractName][newMigrationId] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the contract migration was applied.\r\n   * @param contractName Name of the contract.\r\n   * @param migrationId Identifier of the migration.\r\n   * @return true if the contract migration was applied, false otherwise.\r\n   */\r\n  function isMigrated(string contractName, string migrationId) public view returns(bool) {\r\n    return migrated[contractName][migrationId];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Escrow is Migratable {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 internal escrowToken;\r\n    uint256 internal escrowId = 0;\r\n    address escrowDapp;    \r\n\r\n    enum EscrowStatus {\r\n        New,\r\n        Completed,\r\n        Cancelled\r\n    }\r\n\r\n    struct EscrowRecord {\r\n        uint256 id;\r\n        address client;\r\n        address provider;\r\n        uint256 amount;\r\n        EscrowStatus status;\r\n        uint256 createdAt;\r\n        uint256 closedAt;\r\n        uint256 paidToDappAmount;\r\n        uint256 paidToProviderAmount;\r\n        uint256 paidToClientAmount;\r\n        uint256 paidToArbiterAmount;\r\n    }\r\n\r\n    mapping(uint256 => EscrowRecord) internal escrows;\r\n\r\n    event OnInitialize(address indexed token, address indexed dApp);\r\n    event OnCreateEscrow(address indexed dapp, address indexed client, address indexed provider, uint256 amount, uint256 payToDappAmount);\r\n    event OnCompleteEscrow(address indexed dapp, uint256 indexed escrowId);\r\n    event OnCancelEscrowByProvider(address indexed dapp, uint256 indexed escrowId);\r\n    event OnCancelEscrow(address indexed dapp, uint256 indexed escrowId, uint256 payToProviderAmount, address indexed arbiter, uint256 payToArbiterAmount);\r\n    \r\n    function initialize(ERC20 _token, address _dApp) \r\n    internal \r\n    isInitializer(\"Escrow\", \"0.1.3\") {\r\n        require(_token != address(0) && _dApp != address(0));\r\n        \r\n        escrowToken = _token;\r\n        escrowDapp = _dApp;\r\n\r\n        emit OnInitialize(_token, _dApp);\r\n    }\r\n\r\n    function createEscrow(address _client, address _provider, uint256 _amount, uint256 _payToDappAmount) \r\n    internal \r\n    returns (uint256) {\r\n        require(_client != address(0) && _provider != address(0) && _amount > 0 && _payToDappAmount >= 0);\r\n        require(escrowToken.transferFrom(_client, address(this), _amount));\r\n\r\n        uint256 id = ++escrowId;\r\n        EscrowRecord storage escrow = escrows[id];\r\n        escrow.id = id;\r\n        escrow.client = _client;\r\n        escrow.provider = _provider;\r\n        escrow.amount = _amount;\r\n        escrow.createdAt = block.number;\r\n        escrow.status = EscrowStatus.New;\r\n        escrow.paidToProviderAmount = 0;\r\n        escrow.paidToClientAmount = 0;\r\n        escrow.paidToArbiterAmount = 0;\r\n\r\n        if (_payToDappAmount > 0) {\r\n            escrow.paidToDappAmount = _payToDappAmount;\r\n            require(escrowToken.transfer(escrowDapp, _payToDappAmount));\r\n        }\r\n\r\n        emit OnCreateEscrow(escrowDapp, _client, _provider, _amount, _payToDappAmount);\r\n\r\n        return id;\r\n    }\r\n\r\n    function completeEscrow(uint256 _escrowId) \r\n    internal \r\n    returns (bool) {\r\n        require(escrows[_escrowId].status == EscrowStatus.New);\r\n        require(escrows[_escrowId].client == msg.sender);\r\n\r\n        escrows[_escrowId].status = EscrowStatus.Completed;\r\n        escrows[_escrowId].paidToProviderAmount = escrows[_escrowId].amount.sub(escrows[_escrowId].paidToDappAmount);\r\n        escrows[_escrowId].closedAt = block.number;\r\n\r\n        require(escrowToken.transfer(escrows[_escrowId].provider, escrows[_escrowId].paidToProviderAmount));\r\n\r\n        emit OnCompleteEscrow(escrowDapp, _escrowId);\r\n\r\n        return true;\r\n    }\r\n\r\n    function cancelEscrowByProvider(uint256 _escrowId) \r\n    internal \r\n    returns (bool) {\r\n        require(escrows[_escrowId].status == EscrowStatus.New);\r\n        require(escrows[_escrowId].provider == msg.sender);\r\n\r\n        escrows[_escrowId].paidToClientAmount = escrows[_escrowId].amount.sub(escrows[_escrowId].paidToDappAmount);\r\n        escrows[_escrowId].status = EscrowStatus.Cancelled;\r\n        escrows[_escrowId].closedAt = block.number;\r\n\r\n        require(escrowToken.transfer(escrows[_escrowId].client, escrows[_escrowId].paidToClientAmount));\r\n\r\n        emit OnCancelEscrowByProvider(escrowDapp, _escrowId);\r\n\r\n        return true;\r\n    }    \r\n\r\n    function cancelEscrow(uint256 _escrowId, uint256 _payToProviderAmount, address arbiter, uint256 _payToArbiterAmount) \r\n    internal \r\n    returns (bool) {\r\n        require(escrows[_escrowId].status == EscrowStatus.New);\r\n        require(_payToProviderAmount >= 0 && _payToArbiterAmount >= 0);\r\n        require(escrows[_escrowId].amount >= escrows[_escrowId].paidToDappAmount.add(_payToArbiterAmount).add(_payToProviderAmount));\r\n\r\n        escrows[_escrowId].status = EscrowStatus.Cancelled;        \r\n        escrows[_escrowId].closedAt = block.number;\r\n\r\n        if (_payToArbiterAmount > 0) {\r\n            require(arbiter != address(0));\r\n            escrows[_escrowId].paidToArbiterAmount = _payToArbiterAmount;\r\n            require(escrowToken.transfer(arbiter, _payToArbiterAmount));\r\n        }                \r\n\r\n        if (_payToProviderAmount > 0) {\r\n            escrows[_escrowId].paidToProviderAmount = _payToProviderAmount;\r\n            require(escrowToken.transfer(escrows[_escrowId].provider, _payToProviderAmount));\r\n        }        \r\n\r\n        uint256 totalPaid = escrows[_escrowId].paidToDappAmount.add(_payToArbiterAmount).add(_payToProviderAmount);\r\n        escrows[_escrowId].paidToClientAmount = escrows[_escrowId].amount.sub(totalPaid);        \r\n        if (escrows[_escrowId].paidToClientAmount > 0) {\r\n            require(escrowToken.transfer(escrows[_escrowId].client, escrows[_escrowId].paidToClientAmount));\r\n        }       \r\n\r\n        emit OnCancelEscrow(escrowDapp, _escrowId, _payToProviderAmount, arbiter, _payToArbiterAmount); \r\n\r\n        return true;\r\n    }\r\n\r\n    function getEscrow(uint256 _escrowId) \r\n    public \r\n    view\r\n    returns (\r\n      address client, \r\n      address provider, \r\n      uint256 amount, \r\n      uint8 status, \r\n      uint256 createdAt, \r\n      uint256 closedAt, \r\n      uint256 paidToProviderAmount) \r\n      {      \r\n      require(_escrowId > 0 && escrows[_escrowId].createdAt > 0);\r\n      return (\r\n        escrows[_escrowId].client, \r\n        escrows[_escrowId].provider, \r\n        escrows[_escrowId].amount, \r\n        uint8(escrows[_escrowId].status),\r\n        escrows[_escrowId].createdAt, \r\n        escrows[_escrowId].closedAt, \r\n        escrows[_escrowId].paidToProviderAmount\r\n        );       \r\n    }\r\n\r\n    function getEscrowPayments(uint256 _escrowId) \r\n    public \r\n    view\r\n    returns (\r\n      uint8 status,\r\n      uint256 amount, \r\n      uint256 paidToDappAmount,\r\n      uint256 paidToProviderAmount,\r\n      uint256 paidToClientAmount,      \r\n      uint256 paidToArbiterAmount)\r\n      {      \r\n      require(_escrowId > 0 && escrows[_escrowId].createdAt > 0);\r\n      return (\r\n        uint8(escrows[_escrowId].status), \r\n        escrows[_escrowId].amount, \r\n        escrows[_escrowId].paidToDappAmount,\r\n        escrows[_escrowId].paidToProviderAmount,\r\n        escrows[_escrowId].paidToClientAmount,        \r\n        escrows[_escrowId].paidToArbiterAmount\r\n        );       \r\n    }    \r\n}\r\n\r\ncontract CanWorkAdmin {\r\n  function addSig(address signer, bytes32 id) external returns (uint8);\r\n  function resetSignature(bytes32 id) external returns (bool);  \r\n  function getSignersCount(bytes32 id) external view returns (uint8);\r\n  function getSigner(bytes32 id, uint index) external view returns (address,bool);\r\n  function hasRole(address addr, string roleName) external view returns (bool);\r\n}\r\n\r\ncontract CanWorkJob is Escrow {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    CanWorkAdmin canworkAdmin;    \r\n    string public constant ROLE_ADMIN = \"admin\";\r\n    string public constant ROLE_OWNER = \"owner\";\r\n\r\n    uint8 internal CANWORK_PAYMENT_PERCENTAGE;  \r\n\r\n    enum JobStatus {\r\n        New,\r\n        Completed,\r\n        Cancelled\r\n    }\r\n\r\n    struct Job {\r\n      bytes32 id;\r\n      address client;\r\n      address provider;\r\n      uint256 escrowId;\r\n      JobStatus status;\r\n      uint256 amount;\r\n    }\r\n\r\n    mapping(bytes32 => Job) internal jobs;\r\n    address dApp;\r\n\r\n    event OnCreateJob(address indexed dapp, bytes32 indexed jobId, address client, address indexed provider, uint256 totalCosts);\r\n    event OnCompleteJob(address indexed dapp, bytes32 indexed jobId);\r\n    event OnCancelJobByProvider(address indexed dapp, bytes32 indexed jobId);\r\n    event OnCancelJobByAdmin(address indexed dapp, bytes32 indexed jobId, uint256 payToProviderAmount, address indexed arbiter, uint256 payToArbiterAmount);\r\n\r\n    function initialize(ERC20 _token, CanWorkAdmin _canworkAdmin, address _dApp)\r\n    public \r\n    isInitializer(\"CanWorkJob\", \"0.1.3\") {\r\n        require(_token != address(0) && _canworkAdmin != address(0) && _dApp != address(0));        \r\n\r\n        Escrow.initialize(_token, _dApp);\r\n\r\n        canworkAdmin = CanWorkAdmin(_canworkAdmin);\r\n        \r\n        dApp = _dApp;        \r\n\r\n        CANWORK_PAYMENT_PERCENTAGE = 1;\r\n    }\r\n\r\n    function createJob(bytes32 _jobId, address _client, address _provider, uint256 _totalCosts) \r\n    public \r\n    returns (bool) {\r\n        require(_jobId[0] != 0);\r\n        require(jobs[_jobId].id[0] == 0);\r\n\r\n        uint256 payToDappAmount = _totalCosts.mul(CANWORK_PAYMENT_PERCENTAGE).div(100);\r\n\r\n        jobs[_jobId].id = _jobId;\r\n        jobs[_jobId].client = _client;\r\n        jobs[_jobId].provider = _provider;\r\n        jobs[_jobId].status = JobStatus.New;\r\n        jobs[_jobId].amount = _totalCosts;\r\n        jobs[_jobId].escrowId = createEscrow(_client, _provider, _totalCosts, payToDappAmount);\r\n\r\n        emit OnCreateJob(dApp, _jobId, _client, _provider, _totalCosts);\r\n\r\n        return true;\r\n    }\r\n\r\n    function completeJob(bytes32 _jobId) \r\n    public \r\n    returns (bool) {  \r\n        require(_jobId[0] != 0);\r\n        require(jobs[_jobId].status == JobStatus.New);\r\n        require(jobs[_jobId].client == msg.sender);   \r\n        \r\n        require(completeEscrow(jobs[_jobId].escrowId));\r\n        \r\n        jobs[_jobId].status = JobStatus.Completed;\r\n\r\n        emit OnCompleteJob(dApp, _jobId);\r\n\r\n        return true;\r\n    }\r\n\r\n    function cancelJobByProvider(bytes32 _jobId) \r\n    public \r\n    returns (bool) {\r\n        require(_jobId[0] != 0);  \r\n        require(jobs[_jobId].status == JobStatus.New);\r\n        require(jobs[_jobId].provider == msg.sender);\r\n        \r\n        require(cancelEscrowByProvider(jobs[_jobId].escrowId));\r\n        \r\n        jobs[_jobId].status = JobStatus.Cancelled;\r\n\r\n        emit OnCancelJobByProvider(dApp, _jobId);\r\n\r\n        return true;\r\n    }\r\n\r\n    function cancelJobByAdmin(bytes32 _jobId, uint256 _payToProviderAmount, address _arbiter, uint256 _payToArbiterAmount) \r\n    public \r\n    returns (bool) {\r\n        require(_jobId[0] != 0);  \r\n        require(jobs[_jobId].status == JobStatus.New);\r\n        require(canworkAdmin.hasRole(msg.sender, ROLE_ADMIN));\r\n        \r\n        uint maxArbiterPayment = jobs[_jobId].amount.mul(5).div(100);\r\n\r\n        require(_payToArbiterAmount <= maxArbiterPayment);        \r\n        \r\n        require(cancelEscrow(jobs[_jobId].escrowId, _payToProviderAmount, _arbiter, _payToArbiterAmount));\r\n\r\n        jobs[_jobId].status = JobStatus.Cancelled;\r\n\r\n        emit OnCancelJobByAdmin(dApp, _jobId, _payToProviderAmount, _arbiter, _payToArbiterAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getJob(bytes32 _jobId) \r\n    public \r\n    view \r\n    returns (\r\n      address client, \r\n      address provider,\r\n      uint256 amount,\r\n      uint8 status, \r\n      uint256 createdAt, \r\n      uint256 closedAt, \r\n      uint256 paidToProviderAmount\r\n      ) {\r\n      require(_jobId[0] != 0); \r\n      require(jobs[_jobId].id[0] != 0);\r\n\r\n      return getEscrow(jobs[_jobId].escrowId);\r\n    }\r\n\r\n    function getJobPayments(bytes32 _jobId) \r\n    public \r\n    view \r\n    returns (\r\n      uint8 status,\r\n      uint256 amount,     \r\n      uint256 paidToDappAmount,\r\n      uint256 paidToProviderAmount,\r\n      uint256 paidToClientAmount,\r\n      uint256 paidToArbiterAmount\r\n      ) {\r\n      require(_jobId[0] != 0); \r\n      require(jobs[_jobId].id[0] != 0);\r\n\r\n      return getEscrowPayments(jobs[_jobId].escrowId);\r\n    } \r\n}\r\n\r\ncontract CanWork is CanWorkJob {\r\n  ERC20 canYaCoin;  \r\n\r\n  event OnEmeregencyTransfer(address indexed toAddress, uint256 balance);\r\n\r\n  function initialize(ERC20 _token, CanWorkAdmin _canworkAdmin, address _dApp) \r\n  public \r\n  isInitializer(\"CanWork\", \"0.1.2\") {\r\n      require(_token != address(0) && _canworkAdmin != address(0) && _dApp != address(0));\r\n\r\n      CanWorkJob.initialize(_token, _canworkAdmin, _dApp);      \r\n\r\n      canYaCoin = _token;        \r\n  }\r\n  \r\n  function emergencyTransfer(address toAddress) \r\n  public     \r\n  returns (bool) {\r\n    require(toAddress != address(0));\r\n    require(canworkAdmin.hasRole(msg.sender, ROLE_OWNER));\r\n\r\n    bytes32 uniqueId = keccak256(abi.encodePacked(address(this), toAddress, \"emergencyTransfer\"));\r\n\r\n    if (canworkAdmin.getSignersCount(uniqueId) < 2) {\r\n      canworkAdmin.addSig(msg.sender, uniqueId);\r\n      return false;\r\n    }\r\n\r\n    canworkAdmin.addSig(msg.sender, uniqueId);\r\n\r\n    canworkAdmin.resetSignature(uniqueId);\r\n\r\n    uint256 balance = canYaCoin.balanceOf(address(this));\r\n    canYaCoin.transfer(toAddress, balance);\r\n\r\n    emit OnEmeregencyTransfer(toAddress, balance);\r\n\r\n    return true;\r\n  }\r\n\r\n  function getEmergencyTransferSignersCount(address _toAddress)\r\n  public \r\n  view \r\n  returns(uint)\r\n  {   \r\n    bytes32 uniqueId = keccak256(abi.encodePacked(address(this), _toAddress, \"emergencyTransfer\"));\r\n    return canworkAdmin.getSignersCount(uniqueId);\r\n  }    \r\n\r\n  function getEmergencyTransferSigner(address _toAddress, uint index)\r\n  public \r\n  view \r\n  returns (address,bool)\r\n  {\r\n    bytes32 uniqueId = keccak256(abi.encodePacked(address(this), _toAddress, \"emergencyTransfer\"));\r\n    return canworkAdmin.getSigner(uniqueId, index);\r\n  }  \r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"emergencyTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"name\":\"_payToProviderAmount\",\"type\":\"uint256\"},{\"name\":\"_arbiter\",\"type\":\"address\"},{\"name\":\"_payToArbiterAmount\",\"type\":\"uint256\"}],\"name\":\"cancelJobByAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"cancelJobByProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_escrowId\",\"type\":\"uint256\"}],\"name\":\"getEscrow\",\"outputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"closedAt\",\"type\":\"uint256\"},{\"name\":\"paidToProviderAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"completeJob\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"getJobPayments\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"paidToDappAmount\",\"type\":\"uint256\"},{\"name\":\"paidToProviderAmount\",\"type\":\"uint256\"},{\"name\":\"paidToClientAmount\",\"type\":\"uint256\"},{\"name\":\"paidToArbiterAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"isMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_canworkAdmin\",\"type\":\"address\"},{\"name\":\"_dApp\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getEmergencyTransferSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"getEmergencyTransferSignersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_provider\",\"type\":\"address\"},{\"name\":\"_totalCosts\",\"type\":\"uint256\"}],\"name\":\"createJob\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"getJob\",\"outputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"closedAt\",\"type\":\"uint256\"},{\"name\":\"paidToProviderAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_escrowId\",\"type\":\"uint256\"}],\"name\":\"getEscrowPayments\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"paidToDappAmount\",\"type\":\"uint256\"},{\"name\":\"paidToProviderAmount\",\"type\":\"uint256\"},{\"name\":\"paidToClientAmount\",\"type\":\"uint256\"},{\"name\":\"paidToArbiterAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"OnEmeregencyTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalCosts\",\"type\":\"uint256\"}],\"name\":\"OnCreateJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"bytes32\"}],\"name\":\"OnCompleteJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"bytes32\"}],\"name\":\"OnCancelJobByProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"payToProviderAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"arbiter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payToArbiterAmount\",\"type\":\"uint256\"}],\"name\":\"OnCancelJobByAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dApp\",\"type\":\"address\"}],\"name\":\"OnInitialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payToDappAmount\",\"type\":\"uint256\"}],\"name\":\"OnCreateEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"OnCompleteEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"OnCancelEscrowByProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payToProviderAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"arbiter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payToArbiterAmount\",\"type\":\"uint256\"}],\"name\":\"OnCancelEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"Migrated\",\"type\":\"event\"}]","ContractName":"CanWork","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0c321c548660c5e99cb2538cdd0d935d7f8241d8b3ab7fced69251e6c93f9337"}]}