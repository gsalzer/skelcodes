{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Owned {\r\n    address public aOwner;\r\n    address public coOwner1;\r\n    address public coOwner2;\r\n\r\n    constructor() public {\r\n        aOwner = msg.sender;\r\n        coOwner1 = msg.sender;\r\n        coOwner2 = msg.sender;\r\n    }\r\n\r\n    /* Modifiers */\r\n    modifier onlyOwner {\r\n        require(msg.sender == aOwner || msg.sender == coOwner1 || msg.sender == coOwner2);\r\n        _;\r\n    }\r\n\r\n    function setCoOwner1(address _coOwner) public onlyOwner {\r\n      coOwner1 = _coOwner;\r\n    }\r\n\r\n    function setCoOwner2(address _coOwner) public onlyOwner {\r\n      coOwner2 = _coOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract XEther is Owned {\r\n    /* Structurs and variables */\r\n    uint256 public totalInvestmentAmount = 0;\r\n    uint256 public ownerFeePercent = 50; // 5%\r\n    uint256 public investorsFeePercent = 130; // 13%\r\n\r\n    uint256 public curIteration = 1;\r\n\r\n    uint256 public depositsCount = 0;\r\n    uint256 public investorsCount = 1;\r\n\r\n    uint256 public bankAmount = 0;\r\n    uint256 public feeAmount = 0;\r\n\r\n    uint256 public toGwei = 1000000000; // or 1e9, helper vars\r\n    uint256 public minDepositAmount = 20000000; // minimum deposit\r\n    uint256 public minLotteryAmount = 100000000; // minimum to participate in lottery\r\n    uint256 public minInvestmentAmount = 5 ether; // min for investment\r\n\r\n    bool public isWipeAllowed = true; // wipe only if bank almost became empty\r\n    uint256 public investorsCountLimit = 7; // maximum investors\r\n    uint256 public lastTransaction = now;\r\n\r\n    // Stage variables\r\n    uint256 private stageStartTime = now;\r\n    uint private currentStage = 1;\r\n    uint private stageTime = 86400; // time of stage in minutes\r\n    uint private stageMin = 0;\r\n    uint private stageMax = 72;\r\n\r\n    // lottery\r\n    uint256 public jackpotBalance = 0;\r\n    uint256 public jackpotPercent = 20; // 2%\r\n\r\n    uint256 _seed;\r\n\r\n    // Deposits mapping\r\n    mapping(uint256 => address) public depContractidToAddress;\r\n    mapping(uint256 => uint256) public depContractidToAmount;\r\n    mapping(uint256 => bool) public depContractidToLottery;\r\n\r\n    // Investors mapping\r\n    mapping(uint256 => address) public investorsAddress;\r\n    mapping(uint256 => uint256) public investorsInvested;\r\n    mapping(uint256 => uint256) public investorsComissionPercent;\r\n    mapping(uint256 => uint256) public investorsEarned;\r\n\r\n    /* Events */\r\n    event EvDebug (\r\n        uint amount\r\n    );\r\n\r\n    /* New income transaction*/\r\n    event EvNewDeposit (\r\n        uint256 iteration,\r\n        uint256 bankAmount,\r\n        uint256 index,\r\n        address sender,\r\n        uint256 amount,\r\n        uint256 multiplier,\r\n        uint256 time\r\n    );\r\n\r\n    /* New investment added */\r\n    event EvNewInvestment (\r\n        uint256 iteration,\r\n        uint256 bankAmount,\r\n        uint256 index,\r\n        address sender,\r\n        uint256 amount,\r\n        uint256[] investorsFee\r\n    );\r\n\r\n    /* Collect investors earned, when some one get payment */\r\n    event EvInvestorsComission (\r\n        uint256 iteration,\r\n        uint256[] investorsComission\r\n    );\r\n\r\n    /* Bank amount increased */\r\n    event EvUpdateBankAmount (\r\n        uint256 iteration,\r\n        uint256 deposited,\r\n        uint256 balance\r\n    );\r\n\r\n    /* Payout for deposit */\r\n    event EvDepositPayout (\r\n        uint256 iteration,\r\n        uint256 bankAmount,\r\n        uint256 index,\r\n        address receiver,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        uint256 jackpotBalance\r\n    );\r\n\r\n    /* newIteration */\r\n    event EvNewIteration (\r\n        uint256 iteration\r\n    );\r\n\r\n    /* No more funds in the bank, need actions (e.g. new iteration) */\r\n    event EvBankBecomeEmpty (\r\n        uint256 iteration,\r\n        uint256 index,\r\n        address receiver,\r\n        uint256 payoutAmount,\r\n        uint256 bankAmount\r\n    );\r\n\r\n    /* Investor get payment */\r\n    event EvInvestorPayout (\r\n        uint256 iteration,\r\n        uint256 bankAmount,\r\n        uint256 index,\r\n        uint256 amount,\r\n        bool status\r\n    );\r\n\r\n    /* Investors get payment */\r\n    event EvInvestorsPayout (\r\n        uint256 iteration,\r\n        uint256 bankAmount,\r\n        uint256[] payouts,\r\n        bool[] statuses\r\n    );\r\n\r\n    /* New stage - time of withdraw is tapered */\r\n    event EvStageChanged (\r\n        uint256 iteration,\r\n        uint timeDiff,\r\n        uint stage\r\n    );\r\n\r\n    /* Lottery numbers */\r\n    event EvLotteryWin (\r\n        uint256 iteration,\r\n        uint256 contractId,\r\n        address winer,\r\n        uint256 amount\r\n    );\r\n\r\n    /* Check address with code*/\r\n    event EvConfimAddress (\r\n        address sender,\r\n        bytes16 code\r\n    );\r\n\r\n    /* Lottery numbers */\r\n    event EvLotteryNumbers (\r\n        uint256 iteration,\r\n        uint256 index,\r\n        uint256[] lotteryNumbers\r\n    );\r\n\r\n    /* Manually update Jackpot amount */\r\n    event EvUpdateJackpot (\r\n        uint256 iteration,\r\n        uint256 amount,\r\n        uint256 balance\r\n    );\r\n\r\n    /*---------- constructor ------------*/\r\n    constructor() public {\r\n        investorsAddress[0] = aOwner;\r\n        investorsInvested[0] = 0;\r\n        investorsComissionPercent[0] = 0;\r\n        investorsEarned[0] = 0;\r\n    }\r\n\r\n    /*--------------- public methods -----------------*/\r\n    function() public payable {\r\n        require(msg.value > 0 && msg.sender != address(0));\r\n\r\n        uint256 amount = msg.value / toGwei; // convert to gwei\r\n\r\n        if (amount >= minDepositAmount) {\r\n            lastTransaction = block.timestamp;\r\n            newDeposit(msg.sender, amount);\r\n        }\r\n        else {\r\n            bankAmount += amount;\r\n        }\r\n    }\r\n\r\n    function newIteration() public onlyOwner {\r\n        require(isWipeAllowed);\r\n\r\n        payoutInvestors();\r\n\r\n        investorsInvested[0] = 0;\r\n        investorsCount = 1;\r\n\r\n        totalInvestmentAmount = 0;\r\n        bankAmount = 0;\r\n        feeAmount = 0;\r\n        depositsCount = 0;\r\n\r\n        // Stage vars update\r\n        currentStage = 1;\r\n        stageStartTime = now;\r\n        stageMin = 0;\r\n        stageMax = 72;\r\n\r\n        curIteration += 1;\r\n\r\n        emit EvNewIteration(curIteration);\r\n\r\n        uint256 realBalance = address(this).balance - (jackpotBalance * toGwei);\r\n        if (realBalance > 0) {\r\n          aOwner.transfer(realBalance);\r\n        }\r\n    }\r\n\r\n    function updateBankAmount() public onlyOwner payable {\r\n        require(msg.value > 0 && msg.sender != address(0));\r\n\r\n        uint256 amount = msg.value / toGwei;\r\n\r\n        isWipeAllowed = false;\r\n\r\n        bankAmount += amount;\r\n        totalInvestmentAmount += amount;\r\n\r\n        emit EvUpdateBankAmount(curIteration, amount, bankAmount);\r\n\r\n        recalcInvestorsFee(msg.sender, amount);\r\n    }\r\n\r\n    function newInvestment() public payable {\r\n        require(msg.value >= minInvestmentAmount && msg.sender != address(0));\r\n\r\n        address sender = msg.sender;\r\n        uint256 investmentAmount = msg.value / toGwei; // convert to gwei\r\n\r\n        addInvestment(sender, investmentAmount);\r\n    }\r\n\r\n    /* Payout */\r\n    function depositPayout(uint depositIndex, uint pAmount) public onlyOwner returns(bool) {\r\n        require(depositIndex < depositsCount && depositIndex >= 0 && depContractidToAmount[depositIndex] > 0);\r\n        require(pAmount <= 5);\r\n\r\n        uint256 payoutAmount = depContractidToAmount[depositIndex];\r\n        payoutAmount += (payoutAmount * pAmount) / 100;\r\n\r\n        if (payoutAmount > bankAmount) {\r\n            isWipeAllowed = true;\r\n            // event payment not enaught bank amount\r\n            emit EvBankBecomeEmpty(curIteration, depositIndex, depContractidToAddress[depositIndex], payoutAmount, bankAmount);\r\n            return false;\r\n        }\r\n\r\n        uint256 ownerComission = (payoutAmount * ownerFeePercent) / 1000;\r\n        investorsEarned[0] += ownerComission;\r\n\r\n        uint256 addToJackpot = (payoutAmount * jackpotPercent) / 1000;\r\n        jackpotBalance += addToJackpot;\r\n\r\n        uint256 investorsComission = (payoutAmount * investorsFeePercent) / 1000;\r\n\r\n        uint256 payoutComission = ownerComission + addToJackpot + investorsComission;\r\n\r\n        uint256 paymentAmount = payoutAmount - payoutComission;\r\n\r\n        bankAmount -= payoutAmount;\r\n        feeAmount += ownerComission + investorsComission;\r\n\r\n        emit EvDepositPayout(curIteration, bankAmount, depositIndex, depContractidToAddress[depositIndex], paymentAmount, payoutComission, jackpotBalance);\r\n\r\n        updateInvestorsComission(investorsComission);\r\n\r\n        depContractidToAmount[depositIndex] = 0;\r\n\r\n        paymentAmount *= toGwei; // get back to wei\r\n        depContractidToAddress[depositIndex].transfer(paymentAmount);\r\n\r\n        if (depContractidToLottery[depositIndex]) {\r\n            lottery(depContractidToAddress[depositIndex], depositIndex);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /* Payout to investors */\r\n    function payoutInvestors() public {\r\n        uint256 paymentAmount = 0;\r\n        bool isSuccess = false;\r\n\r\n        uint256[] memory payouts = new uint256[](investorsCount);\r\n        bool[] memory statuses = new bool[](investorsCount);\r\n\r\n        uint256 mFeeAmount = feeAmount;\r\n        uint256 iteration = curIteration;\r\n\r\n        for (uint256 i = 0; i < investorsCount; i++) {\r\n            uint256 iEarned = investorsEarned[i];\r\n            if (iEarned == 0) {\r\n                continue;\r\n            }\r\n            paymentAmount = iEarned * toGwei; // get back to wei\r\n\r\n            mFeeAmount -= iEarned;\r\n            investorsEarned[i] = 0;\r\n\r\n            isSuccess = investorsAddress[i].send(paymentAmount);\r\n            payouts[i] = iEarned;\r\n            statuses[i] = isSuccess;\r\n\r\n\r\n        }\r\n        emit EvInvestorsPayout(iteration, bankAmount, payouts, statuses);\r\n\r\n        feeAmount = mFeeAmount;\r\n    }\r\n\r\n    /* Payout to investor */\r\n    function payoutInvestor(uint256 investorId) public {\r\n        require (investorId < investorsCount && investorsEarned[investorId] > 0);\r\n\r\n        uint256 paymentAmount = investorsEarned[investorId] * toGwei; // get back to wei\r\n        feeAmount -= investorsEarned[investorId];\r\n        investorsEarned[investorId] = 0;\r\n\r\n        bool isSuccess = investorsAddress[investorId].send(paymentAmount);\r\n\r\n        emit EvInvestorPayout(curIteration, bankAmount, investorId, paymentAmount, isSuccess);\r\n    }\r\n\r\n    /* Helper function to check sender */\r\n    function confirmAddress(bytes16 code) public {\r\n        emit EvConfimAddress(msg.sender, code);\r\n    }\r\n\r\n    /* Show depositers and investors info */\r\n    function depositInfo(uint256 contractId) view public returns(address _address, uint256 _amount, bool _participateInLottery) {\r\n      return (depContractidToAddress[contractId], depContractidToAmount[contractId] * toGwei, depContractidToLottery[contractId]);\r\n    }\r\n\r\n    /* Show investors info by id */\r\n    function investorInfo(uint256 contractId) view public returns(\r\n        address _address, uint256 _invested, uint256 _comissionPercent, uint256 earned\r\n    )\r\n    {\r\n      return (investorsAddress[contractId], investorsInvested[contractId] * toGwei,\r\n        investorsComissionPercent[contractId], investorsEarned[contractId] * toGwei);\r\n    }\r\n\r\n    function showBankAmount() view public returns(uint256 _bankAmount) {\r\n      return bankAmount * toGwei;\r\n    }\r\n\r\n    function showInvestorsComission() view public returns(uint256 _investorsComission) {\r\n      return feeAmount * toGwei;\r\n    }\r\n\r\n    function showJackpotBalance() view public returns(uint256 _jackpotBalance) {\r\n      return jackpotBalance * toGwei;\r\n    }\r\n\r\n    function showStats() view public returns(\r\n        uint256 _ownerFeePercent, uint256 _investorsFeePercent, uint256 _jackpotPercent,\r\n        uint256 _minDepositAmount, uint256 _minLotteryAmount,uint256 _minInvestmentAmount,\r\n        string info\r\n      )\r\n    {\r\n      return (ownerFeePercent, investorsFeePercent, jackpotPercent,\r\n        minDepositAmount * toGwei, minLotteryAmount * toGwei, minInvestmentAmount,\r\n        'To get real percentages divide them to 10');\r\n    }\r\n\r\n    /* Function to change variables */\r\n    function updateJackpotBalance() public onlyOwner payable {\r\n        require(msg.value > 0 && msg.sender != address(0));\r\n        jackpotBalance += msg.value / toGwei;\r\n        emit EvUpdateJackpot(curIteration, msg.value, jackpotBalance);\r\n    }\r\n\r\n    /* Allow withdraw jackpot only if there are no transactions more then month*/\r\n    function withdrawJackpotBalance(uint amount) public onlyOwner {\r\n        require(jackpotBalance >= amount / toGwei && msg.sender != address(0));\r\n        // withdraw jacpot if no one dont play more then month\r\n        require(now - lastTransaction > 4 weeks);\r\n\r\n        uint256 tmpJP = amount / toGwei;\r\n        jackpotBalance -= tmpJP;\r\n\r\n        // Lottery payment\r\n        aOwner.transfer(amount);\r\n        emit EvUpdateJackpot(curIteration, amount, jackpotBalance);\r\n    }\r\n\r\n    /*--------------- private methods -----------------*/\r\n    function newDeposit(address _address, uint depositAmount) private {\r\n        uint256 randMulti = random(100) + 200;\r\n        uint256 rndX = random(1480);\r\n        uint256 _time = getRandomTime(rndX);\r\n\r\n        // Check is depositer hit the bonus number. Else return old multiplier.\r\n        randMulti = checkForBonuses(rndX, randMulti);\r\n\r\n        uint256 contractid = depositsCount;\r\n\r\n        depContractidToAddress[contractid] = _address;\r\n        depContractidToAmount[contractid] = (depositAmount * randMulti) / 100;\r\n        depContractidToLottery[contractid] = depositAmount >= minLotteryAmount;\r\n\r\n        depositsCount++;\r\n\r\n        bankAmount += depositAmount;\r\n\r\n        emit EvNewDeposit(curIteration, bankAmount, contractid, _address, depositAmount, randMulti, _time);\r\n    }\r\n\r\n    function addInvestment(address sender, uint256 investmentAmount) private {\r\n        require( (totalInvestmentAmount < totalInvestmentAmount + investmentAmount) && (bankAmount < bankAmount + investmentAmount) );\r\n        totalInvestmentAmount += investmentAmount;\r\n        bankAmount += investmentAmount;\r\n\r\n        recalcInvestorsFee(sender, investmentAmount);\r\n    }\r\n\r\n    function recalcInvestorsFee(address sender, uint256 investmentAmount) private {\r\n        uint256 investorIndex = 0;\r\n        bool isNewInvestor = true;\r\n        uint256 investorFeePercent = 0;\r\n        uint256[] memory investorsFee = new uint256[](investorsCount+1);\r\n\r\n        for (uint256 i = 0; i < investorsCount; i++) {\r\n            if (investorsAddress[i] == sender) {\r\n                investorIndex = i;\r\n                isNewInvestor = false;\r\n                investorsInvested[i] += investmentAmount;\r\n            }\r\n\r\n            investorFeePercent = percent(investorsInvested[i], totalInvestmentAmount, 3);\r\n            investorsComissionPercent[i] = investorFeePercent;\r\n            investorsFee[i] = investorFeePercent;\r\n        }\r\n\r\n        if (isNewInvestor) {\r\n            if (investorsCount > investorsCountLimit) revert(); // Limit investors count\r\n\r\n            investorFeePercent = percent(investmentAmount, totalInvestmentAmount, 3);\r\n            investorIndex = investorsCount;\r\n\r\n            investorsAddress[investorIndex] = sender;\r\n            investorsInvested[investorIndex] = investmentAmount;\r\n            investorsComissionPercent[investorIndex] = investorFeePercent;\r\n\r\n            investorsEarned[investorIndex] = 0;\r\n            investorsFee[investorIndex] = investorFeePercent;\r\n\r\n            investorsCount++;\r\n        }\r\n\r\n        emit EvNewInvestment(curIteration, bankAmount, investorIndex, sender, investmentAmount, investorsFee);\r\n    }\r\n\r\n    function updateInvestorsComission(uint256 amount) private {\r\n        uint256 investorsTotalIncome = 0;\r\n        uint256[] memory investorsComission = new uint256[](investorsCount);\r\n\r\n        for (uint256 i = 1; i < investorsCount; i++) {\r\n            uint256 investorIncome = (amount * investorsComissionPercent[i]) / 1000;\r\n\r\n            investorsEarned[i] += investorIncome;\r\n            investorsComission[i] = investorsEarned[i];\r\n\r\n            investorsTotalIncome += investorIncome;\r\n        }\r\n\r\n        investorsEarned[0] += amount - investorsTotalIncome;\r\n\r\n        emit EvInvestorsComission(curIteration, investorsComission);\r\n    }\r\n\r\n    function percent(uint numerator, uint denominator, uint precision) private pure returns(uint quotient) {\r\n        uint _numerator = numerator * 10 ** (precision+1);\r\n        uint _quotient = ((_numerator / denominator) + 5) / 10;\r\n\r\n        return (_quotient);\r\n    }\r\n\r\n    function random(uint numMax) private returns (uint256 result) {\r\n        _seed = uint256(keccak256(abi.encodePacked(\r\n            _seed,\r\n            blockhash(block.number - 1),\r\n            block.coinbase,\r\n            block.difficulty\r\n        )));\r\n\r\n        return _seed % numMax;\r\n    }\r\n\r\n    function getRandomTime(uint num) private returns (uint256 result) {\r\n        uint rndHours = random(68) + 4;\r\n        result = 72 - (2 ** ((num + 240) / 60) + 240) % rndHours;\r\n        checkStageCondition();\r\n        result = numStageRecalc(result);\r\n\r\n        return (result < 4) ? 4 : result;\r\n    }\r\n\r\n    function checkForBonuses(uint256 number, uint256 multiplier) private pure returns (uint256 newMultiplier) {\r\n        if (number == 8) return 1000;\r\n        if (number == 12) return 900;\r\n        if (number == 25) return 800;\r\n        if (number == 37) return 700;\r\n        if (number == 42) return 600;\r\n        if (number == 51) return 500;\r\n        if (number == 63 || number == 65 || number == 67) {\r\n            return 400;\r\n        }\r\n\r\n        return multiplier;\r\n    }\r\n\r\n    /*\r\n    * Check for time of current stage, in case of timeDiff bigger then stage time\r\n    * new stage states set.\r\n    */\r\n    function checkStageCondition() private {\r\n        uint timeDiff = now - stageStartTime;\r\n\r\n        if (timeDiff > stageTime && currentStage < 3) {\r\n            currentStage++;\r\n            stageMin += 10;\r\n            stageMax -= 10;\r\n            stageStartTime = now;\r\n            emit EvStageChanged(curIteration, timeDiff, currentStage);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Recalculate hours regarding current stage and counting chance of bonus.\r\n    */\r\n    function numStageRecalc(uint256 curHours) private returns (uint256 result) {\r\n        uint chance = random(110) + 1;\r\n        if (currentStage > 1 && chance % 9 != 0) {\r\n            if (curHours > stageMax) return stageMax;\r\n            if (curHours < stageMin) return stageMin;\r\n        }\r\n\r\n        return curHours;\r\n    }\r\n\r\n    /*\r\n    * Lottery main function\r\n    */\r\n    function lottery(address sender, uint256 index) private {\r\n        bool lotteryWin = false;\r\n        uint256[] memory lotteryNumbers = new uint256[](7);\r\n\r\n        (lotteryWin, lotteryNumbers) = randomizerLottery(blockhash(block.number - 1), sender);\r\n\r\n        emit EvLotteryNumbers(curIteration, index, lotteryNumbers);\r\n\r\n        if (lotteryWin) {\r\n          emit EvLotteryWin(curIteration, index, sender, jackpotBalance);\r\n          uint256 tmpJP = jackpotBalance * toGwei; // get back to wei\r\n          jackpotBalance = 0;\r\n\r\n          // Lottery payment\r\n          sender.transfer(tmpJP);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Lottery generator numbers by given hash.\r\n    */\r\n    function randomizerLottery(bytes32 hash, address sender) private returns(bool, uint256[] memory) {\r\n        uint256[] memory lotteryNumbers = new uint256[](7);\r\n        bytes32 userHash  = keccak256(abi.encodePacked(\r\n            hash,\r\n            sender,\r\n            random(999)\r\n        ));\r\n        bool win = true;\r\n\r\n        for (uint i = 0; i < 7; i++) {\r\n            uint position = i + random(1);\r\n            bytes1 charAtPos = charAt(userHash, position);\r\n            uint8 firstNums = getLastN(charAtPos, 4);\r\n            uint firstNumInt = uint(firstNums);\r\n\r\n            if (firstNumInt > 9) {\r\n                firstNumInt = 16 - firstNumInt;\r\n            }\r\n\r\n            lotteryNumbers[i] = firstNumInt;\r\n\r\n            if (firstNums != 7) {\r\n                win = false;\r\n            }\r\n        }\r\n\r\n        return (win, lotteryNumbers);\r\n    }\r\n\r\n    function charAt(bytes32 b, uint char) private pure returns (bytes1) {\r\n        return bytes1(uint8(uint(b) / (2**((31 - char) * 8))));\r\n    }\r\n\r\n    function getLastN(bytes1 a, uint8 n) private pure returns (uint8) {\r\n        uint8 lastN = uint8(a) % uint8(2) ** n;\r\n        return lastN;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"aOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsEarned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curIteration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toGwei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"depositInfo\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_participateInLottery\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newIteration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestmentAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"code\",\"type\":\"bytes16\"}],\"name\":\"confirmAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depContractidToLottery\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCountLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDepositAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depositIndex\",\"type\":\"uint256\"},{\"name\":\"pAmount\",\"type\":\"uint256\"}],\"name\":\"depositPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawJackpotBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depContractidToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coOwner\",\"type\":\"address\"}],\"name\":\"setCoOwner1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coOwner1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newInvestment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"investorInfo\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_invested\",\"type\":\"uint256\"},{\"name\":\"_comissionPercent\",\"type\":\"uint256\"},{\"name\":\"earned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depContractidToAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWipeAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateBankAmount\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateJackpotBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showStats\",\"outputs\":[{\"name\":\"_ownerFeePercent\",\"type\":\"uint256\"},{\"name\":\"_investorsFeePercent\",\"type\":\"uint256\"},{\"name\":\"_jackpotPercent\",\"type\":\"uint256\"},{\"name\":\"_minDepositAmount\",\"type\":\"uint256\"},{\"name\":\"_minLotteryAmount\",\"type\":\"uint256\"},{\"name\":\"_minInvestmentAmount\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsComissionPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestmentAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minLotteryAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coOwner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coOwner\",\"type\":\"address\"}],\"name\":\"setCoOwner2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showJackpotBalance\",\"outputs\":[{\"name\":\"_jackpotBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorId\",\"type\":\"uint256\"}],\"name\":\"payoutInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showInvestorsComission\",\"outputs\":[{\"name\":\"_investorsComission\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showBankAmount\",\"outputs\":[{\"name\":\"_bankAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EvDebug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bankAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"EvNewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bankAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investorsFee\",\"type\":\"uint256[]\"}],\"name\":\"EvNewInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investorsComission\",\"type\":\"uint256[]\"}],\"name\":\"EvInvestorsComission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposited\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"EvUpdateBankAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bankAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotBalance\",\"type\":\"uint256\"}],\"name\":\"EvDepositPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"}],\"name\":\"EvNewIteration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bankAmount\",\"type\":\"uint256\"}],\"name\":\"EvBankBecomeEmpty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bankAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"EvInvestorPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bankAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payouts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"EvInvestorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeDiff\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"EvStageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EvLotteryWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"bytes16\"}],\"name\":\"EvConfimAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lotteryNumbers\",\"type\":\"uint256[]\"}],\"name\":\"EvLotteryNumbers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"EvUpdateJackpot\",\"type\":\"event\"}]","ContractName":"XEther","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://00e04238be76836ef161432c0d7a61da4137a5b29dbf5227dda1bfe4a5ffe02e"}]}