{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.3;\r\n\r\n /**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract BlockPaperScissors is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n    ERC20Interface bCoin;\r\n    ERC20Interface pCoin;\r\n    ERC20Interface sCoin;\r\n    ERC20Interface tCoin;\r\n\r\n    address public rpsDev = msg.sender;\r\n    uint8 public lastMove = 1; // last played move; 1=rock, 2=paper, 3=scissor\r\n    address public lastPlayer = msg.sender;\r\n    uint public oneCoin = 1000000000000000000;\r\n\r\n//FUNCTIONS setting and retrieving global variables that impact gameplay\r\n\r\n    function setBCoinContractAddress(address _address) external onlyOwner {\r\n      bCoin = ERC20Interface(_address);\r\n    }\r\n    function setPCoinContractAddress(address _address) external onlyOwner {\r\n      pCoin = ERC20Interface(_address);\r\n    }\r\n    function setSCoinContractAddress(address _address) external onlyOwner {\r\n      sCoin = ERC20Interface(_address);\r\n    }\r\n    function setTCoinContractAddress(address _address) external onlyOwner {\r\n      tCoin = ERC20Interface(_address);\r\n    }\r\n\r\n//EVENTS\r\n\r\n    event newMove(uint8 move);\r\n    event newWinner(address winner);\r\n\r\n// FUNCTIONS interacting with the swine structs in contract\r\n\r\n    function playBps(uint8 _choice) public returns (uint8) {\r\n      require (_choice == 1 || _choice == 2 || _choice == 3);\r\n      if (_choice == lastMove) {\r\n        tCoin.transfer(msg.sender, oneCoin);\r\n        tCoin.transfer(lastPlayer, oneCoin);// send tie token to each player\r\n        setGame(_choice, msg.sender);\r\n        return 3; // it's a tie\r\n      }\r\n      if (_choice == 1) { //choice is block\r\n        if (lastMove == 3) {\r\n          bCoin.transfer(msg.sender, oneCoin);\r\n          emit newWinner(msg.sender);\r\n          setGame(_choice, msg.sender);\r\n          return 1;// win\r\n          } else {\r\n          pCoin.transfer(lastPlayer, oneCoin);\r\n          emit newWinner(lastPlayer);\r\n          setGame(_choice, msg.sender);\r\n          return 2;//lose\r\n          }\r\n      }\r\n      if (_choice == 2) { // choice is paper\r\n        if (lastMove == 1) {\r\n          pCoin.transfer(msg.sender, oneCoin);\r\n          emit newWinner(msg.sender);\r\n          setGame(_choice, msg.sender);\r\n          return 1;// win\r\n          } else {\r\n          sCoin.transfer(lastPlayer, oneCoin);\r\n          emit newWinner(lastPlayer);\r\n          setGame(_choice, msg.sender);\r\n          return 2;//lose\r\n          }\r\n      }\r\n      if (_choice == 3) { // choice is scissors\r\n        if (lastMove == 2) {\r\n          sCoin.transfer(msg.sender, oneCoin);\r\n          emit newWinner(msg.sender);\r\n          setGame(_choice, msg.sender);\r\n          return 1;// win\r\n          } else {\r\n          bCoin.transfer(lastPlayer, oneCoin);\r\n          emit newWinner(lastPlayer);\r\n          setGame(_choice, msg.sender);\r\n          return 2;//lose\r\n          }\r\n      }\r\n    }\r\n\r\n    function setGame(uint8 _move, address _player) private {\r\n      lastMove = _move;\r\n      lastPlayer = _player;\r\n      emit newMove(_move);\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"oneCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastMove\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rpsDev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSCoinContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBCoinContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTCoinContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPCoinContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_choice\",\"type\":\"uint8\"}],\"name\":\"playBps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"move\",\"type\":\"uint8\"}],\"name\":\"newMove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"newWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BlockPaperScissors","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://96d215f3236c5a8588185b2739fa1b8587ff8c8cdb656133d23c54a0868432b3"}]}