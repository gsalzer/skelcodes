{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n// visit https://KickTheCoin.com\r\ncontract KickTheCoin {\r\n    address houseAddress;\r\n    address creator;\r\n    address owner;\r\n    address airDroper;\r\n\r\n    address lastPlayerToKickTheCoin;\r\n\r\n    uint kickerCount;\r\n\r\n    address firstKicker;\r\n    address secondKicker;\r\n\r\n    uint costToKickTheCoin;\r\n    uint numberOfBlocksPerKick;\r\n    uint targetBlockNumber;\r\n\r\n    // set to true when game contract should stop new games from starting\r\n    bool isSundown;\r\n    // The blocknumber at which the current sundown grace period will end\r\n    uint sundownGraceTargetBlock;\r\n\r\n    // The index is incremented on each new game (via initGame)\r\n    uint gameIndex;\r\n\r\n    uint currentValue;\r\n\r\n    mapping(address => uint) shares;\r\n\r\n    event LatestKicker(uint curGameIndex, address kicker, uint curVal, uint targetBlockNum);\r\n    event FirstKicker(uint curGameIndex, address kicker, uint curVal);\r\n    event SecondKicker(uint curGameIndex, address kicker, uint curVal);\r\n    event Withdraw(address kicker, uint curVal);\r\n    event Winner(uint curGameIndex, address winner, uint curVal);\r\n\r\n    modifier onlyBy(address _account)\r\n    {\r\n        require(msg.sender == _account);\r\n        _;\r\n    }\r\n\r\n    modifier onlyByOwnerAndOnlyIfGameIsNotActive() {\r\n        require(msg.sender == owner && !isGameActive());\r\n        _;\r\n    }\r\n\r\n    modifier onlyDuringNormalOperations() {\r\n        require(!isSundown);\r\n        _;\r\n    }\r\n\r\n    function KickTheCoin()\r\n    public\r\n    payable\r\n    {\r\n        creator = msg.sender;\r\n        owner = creator;\r\n        houseAddress = creator;\r\n        airDroper = creator;\r\n        gameIndex = 0;\r\n        isSundown = false;\r\n        costToKickTheCoin = 0.17 ether;\r\n        numberOfBlocksPerKick = 5;\r\n        initGame();\r\n    }\r\n\r\n    function()\r\n    public\r\n    payable\r\n    {\r\n        kickTheCoin();\r\n    }\r\n\r\n    function kickTheCoin()\r\n    public\r\n    payable\r\n    onlyDuringNormalOperations()\r\n    {\r\n        require(msg.value == costToKickTheCoin);\r\n\r\n        if (hasWinner()) {\r\n            storeWinnerShare();\r\n            initGame();\r\n        }\r\n\r\n        kickerCount += 1;\r\n        processKick();\r\n        lastPlayerToKickTheCoin = msg.sender;\r\n        targetBlockNumber = block.number + numberOfBlocksPerKick;\r\n\r\n        LatestKicker(gameIndex, msg.sender, currentValue, targetBlockNumber);\r\n    }\r\n\r\n    function withdrawShares()\r\n    public\r\n    {\r\n        if (hasWinner()) {\r\n            storeWinnerShare();\r\n            initGame();\r\n        }\r\n        pullShares(msg.sender);\r\n    }\r\n\r\n    function checkShares(address shareHolder)\r\n    public\r\n    constant\r\n    returns (uint)\r\n    {\r\n        return shares[shareHolder];\r\n    }\r\n\r\n    function isGameActive()\r\n    public\r\n    constant\r\n    returns (bool)\r\n    {\r\n        return targetBlockNumber >= block.number;\r\n    }\r\n\r\n    function hasWinner()\r\n    public\r\n    constant\r\n    returns (bool)\r\n    {\r\n        return currentValue > 0 && !isGameActive();\r\n    }\r\n\r\n    function getCurrentValue()\r\n    public\r\n    constant\r\n    returns (uint)\r\n    {\r\n        if (isGameActive()) {\r\n            return currentValue;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getLastKicker()\r\n    public\r\n    constant\r\n    returns (address)\r\n    {\r\n        if (isGameActive()) {\r\n            return lastPlayerToKickTheCoin;\r\n        } else {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function pullShares(address shareHolder)\r\n    public\r\n    {\r\n        var share = shares[shareHolder];\r\n        if (share == 0) {\r\n            return;\r\n        }\r\n\r\n        shares[shareHolder] = 0;\r\n        shareHolder.transfer(share);\r\n        Withdraw(shareHolder, share);\r\n    }\r\n\r\n    function airDrop(address player)\r\n    public\r\n    payable\r\n    onlyBy(airDroper)\r\n    {\r\n        player.transfer(1);\r\n        if (msg.value > 1) {\r\n            msg.sender.transfer(msg.value - 1);\r\n        }\r\n    }\r\n\r\n    function getTargetBlockNumber()\r\n    public\r\n    constant\r\n    returns (uint)\r\n    {\r\n        return targetBlockNumber;\r\n    }\r\n\r\n    function getBlocksLeftInCurrentKick()\r\n    public\r\n    constant\r\n    returns (uint)\r\n    {\r\n        if (targetBlockNumber < block.number) {\r\n            return 0;\r\n        }\r\n        return targetBlockNumber - block.number;\r\n    }\r\n\r\n    function getNumberOfBlocksPerKick()\r\n    public\r\n    constant\r\n    returns (uint)\r\n    {\r\n        return numberOfBlocksPerKick;\r\n    }\r\n\r\n    function getCostToKick()\r\n    public\r\n    constant\r\n    returns (uint)\r\n    {\r\n        return costToKickTheCoin;\r\n    }\r\n\r\n    function getCurrentBlockNumber()\r\n    public\r\n    constant\r\n    returns (uint)\r\n    {\r\n        return block.number;\r\n    }\r\n\r\n    function getGameIndex()\r\n    public\r\n    constant\r\n    returns (uint)\r\n    {\r\n        return gameIndex;\r\n    }\r\n\r\n    function changeOwner(address _newOwner)\r\n    public\r\n    onlyBy(owner)\r\n    {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function changeHouseAddress(address _newHouseAddress)\r\n    public\r\n    onlyBy(owner)\r\n    {\r\n        houseAddress = _newHouseAddress;\r\n    }\r\n\r\n    function changeAirDroper(address _airDroper)\r\n    public\r\n    onlyBy(owner)\r\n    {\r\n        airDroper = _airDroper;\r\n    }\r\n\r\n    function changeGameParameters(uint _costToKickTheCoin, uint _numberOfBlocksPerKick)\r\n    public\r\n    onlyByOwnerAndOnlyIfGameIsNotActive()\r\n    {\r\n        costToKickTheCoin = _costToKickTheCoin;\r\n        numberOfBlocksPerKick = _numberOfBlocksPerKick;\r\n    }\r\n\r\n    function sundown()\r\n    public\r\n    onlyByOwnerAndOnlyIfGameIsNotActive()\r\n    {\r\n        isSundown = true;\r\n        sundownGraceTargetBlock = block.number + 100000;\r\n    }\r\n\r\n    function gameIsSundown()\r\n    public\r\n    constant\r\n    returns (bool)\r\n    {\r\n        return isSundown;\r\n    }\r\n\r\n    function getSundownGraceTargetBlock()\r\n    public\r\n    constant\r\n    returns (uint)\r\n    {\r\n        return sundownGraceTargetBlock;\r\n    }\r\n\r\n    function sunrise()\r\n    public\r\n    onlyByOwnerAndOnlyIfGameIsNotActive()\r\n    {\r\n        isSundown = false;\r\n        sundownGraceTargetBlock = 0;\r\n    }\r\n\r\n    function clear()\r\n    public\r\n    {\r\n        if (isSundown &&\r\n        sundownGraceTargetBlock != 0 &&\r\n        sundownGraceTargetBlock < block.number) {\r\n            houseAddress.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    function initGame()\r\n    private\r\n    {\r\n        gameIndex += 1;\r\n        targetBlockNumber = 0;\r\n        currentValue = 0;\r\n        kickerCount = 0;\r\n        firstKicker = address(0);\r\n        secondKicker = address(0);\r\n        lastPlayerToKickTheCoin = address(0);\r\n    }\r\n\r\n    function storeWinnerShare()\r\n    private\r\n    {\r\n        var share = currentValue;\r\n        currentValue = 0;\r\n        shares[lastPlayerToKickTheCoin] += share;\r\n        if (share > 0) {\r\n            Winner(gameIndex, lastPlayerToKickTheCoin, share);\r\n        }\r\n    }\r\n\r\n    function setShares()\r\n    private\r\n    {\r\n        // 1.0% commission to the house\r\n        shares[houseAddress] += (msg.value * 10)/1000;\r\n        // 2.5% commission to first kicker\r\n        shares[firstKicker] += (msg.value * 25)/1000;\r\n        // 1.5% commission to second kicker\r\n        shares[secondKicker] += (msg.value * 15)/1000;\r\n    }\r\n\r\n    function processKick()\r\n    private\r\n    {\r\n        if (kickerCount == 1) {\r\n            currentValue = msg.value; // no commission on first kick\r\n            firstKicker = msg.sender;\r\n            FirstKicker(gameIndex, msg.sender, currentValue);\r\n        } else if (kickerCount == 2) {\r\n            currentValue += msg.value; // no commission on second kick\r\n            secondKicker = msg.sender;\r\n            SecondKicker(gameIndex, msg.sender, currentValue);\r\n        } else {\r\n            // 5% is used. 2.5% for first kicker, 1.5% for second, 1% for house\r\n            // leaving 95% for the winner\r\n            currentValue += (msg.value * 950)/1000;\r\n            setShares();\r\n        }\r\n    }\r\n}\r\n\r\n// visit https://KickTheCoin.com\r\ncontract WithdrawFromKickTheCoin {\r\n    address owner;\r\n    address ktcAddress;\r\n\r\n    modifier onlyBy(address _account)\r\n    {\r\n        require(msg.sender == _account);\r\n        _;\r\n    }\r\n\r\n    function WithdrawFromKickTheCoin()\r\n    public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setKtcAddress(address _ktcAddress)\r\n    public\r\n    onlyBy(owner)\r\n    {\r\n        ktcAddress = _ktcAddress;\r\n    }\r\n\r\n    function getKtcAddress()\r\n    public\r\n    constant\r\n    returns (address)\r\n    {\r\n        return ktcAddress;\r\n    }\r\n\r\n    function getOwner()\r\n    public\r\n    constant\r\n    returns (address)\r\n    {\r\n        return owner;\r\n    }\r\n\r\n    function release()\r\n    public\r\n    {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function()\r\n    public\r\n    {\r\n        KickTheCoin ktc = KickTheCoin(ktcAddress);\r\n        ktc.pullShares(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getKtcAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ktcAddress\",\"type\":\"address\"}],\"name\":\"setKtcAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"}]","ContractName":"WithdrawFromKickTheCoin","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fcf4ee62c1894122315a4114dca2e5ef6dcea1dba4a51e07d2ab09f7aef5a604"}]}