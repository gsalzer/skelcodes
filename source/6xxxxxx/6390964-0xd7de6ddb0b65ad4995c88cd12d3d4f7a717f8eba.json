{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/* \r\n*  __      __  ______  ____        _____   ____        ____    ______  __  __\r\n* /\\ \\  __/\\ \\/\\  _  \\/\\  _`\\     /\\  __`\\/\\  _`\\     /\\  _`\\ /\\__  _\\/\\ \\/\\ \\\r\n* \\ \\ \\/\\ \\ \\ \\ \\ \\L\\ \\ \\ \\L\\ \\   \\ \\ \\/\\ \\ \\ \\L\\_\\   \\ \\ \\L\\_\\/_/\\ \\/\\ \\ \\_\\ \\\r\n*  \\ \\ \\ \\ \\ \\ \\ \\  __ \\ \\ ,  /    \\ \\ \\ \\ \\ \\  _\\/    \\ \\  _\\L  \\ \\ \\ \\ \\  _  \\\r\n*   \\ \\ \\_/ \\_\\ \\ \\ \\/\\ \\ \\ \\\\ \\    \\ \\ \\_\\ \\ \\ \\/      \\ \\ \\L\\ \\ \\ \\ \\ \\ \\ \\ \\ \\\r\n*    \\ `\\___x___/\\ \\_\\ \\_\\ \\_\\ \\_\\   \\ \\_____\\ \\_\\       \\ \\____/  \\ \\_\\ \\ \\_\\ \\_\\\r\n*     '\\/__//__/  \\/_/\\/_/\\/_/\\/ /    \\/_____/\\/_/        \\/___/    \\/_/  \\/_/\\/_/\r\n* \r\n*             _____  _____   __  __   ____    ____\r\n*            /\\___ \\/\\  __`\\/\\ \\/\\ \\ /\\  _`\\ /\\  _`\\\r\n*    __      \\/__/\\ \\ \\ \\/\\ \\ \\ \\/'/'\\ \\ \\L\\_\\ \\ \\L\\ \\         __      __      ___ ___      __\r\n*  /'__`\\       _\\ \\ \\ \\ \\ \\ \\ \\ , <  \\ \\  _\\L\\ \\ ,  /       /'_ `\\  /'__`\\  /' __` __`\\  /'__`\\\r\n* /\\ \\L\\.\\_    /\\ \\_\\ \\ \\ \\_\\ \\ \\ \\\\`\\ \\ \\ \\L\\ \\ \\ \\\\ \\     /\\ \\L\\ \\/\\ \\L\\.\\_/\\ \\/\\ \\/\\ \\/\\  __/\r\n* \\ \\__/.\\_\\   \\ \\____/\\ \\_____\\ \\_\\ \\_\\\\ \\____/\\ \\_\\ \\_\\   \\ \\____ \\ \\__/.\\_\\ \\_\\ \\_\\ \\_\\ \\____\\\r\n*  \\/__/\\/_/    \\/___/  \\/_____/\\/_/\\/_/ \\/___/  \\/_/\\/ /    \\/___L\\ \\/__/\\/_/\\/_/\\/_/\\/_/\\/____/\r\n*                                                              /\\____/\r\n*                                                              \\_/__/\r\n*/\r\n\r\ncontract WarOfEth {\r\n    using SafeMath for *;\r\n    using NameFilter for string;\r\n    using WoeKeysCalc for uint256;\r\n\r\n    //==============\r\n    // EVENTS\r\n    //==============\r\n\r\n    // 用户注册新名字事件\r\n    event onNewName\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // 队伍新名字事件\r\n    event onNewTeamName\r\n    (\r\n        uint256 indexed teamID,\r\n        bytes32 indexed teamName,\r\n        uint256 indexed playerID,\r\n        bytes32 playerName,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n    \r\n    // 购买事件\r\n    event onTx\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 teamID,\r\n        bytes32 teamName,\r\n        uint256 ethIn,\r\n        uint256 keysBought\r\n    );\r\n\r\n    // 支付邀请奖励时触发\r\n    event onAffPayout\r\n    (\r\n        uint256 indexed affID,\r\n        address affAddress,\r\n        bytes32 affName,\r\n        uint256 indexed roundID,\r\n        uint256 indexed buyerID,\r\n        uint256 amount,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // 淘汰事件（每回合淘汰一次）\r\n    event onKill\r\n    (\r\n        uint256 deadCount,\r\n        uint256 liveCount,\r\n        uint256 deadKeys\r\n    );\r\n\r\n    // 游戏结束事件\r\n    event onEndRound\r\n    (\r\n        uint256 winnerTID,  // winner\r\n        bytes32 winnerTName,\r\n        uint256 playersCount,\r\n        uint256 eth    // eth in pot\r\n    );\r\n\r\n    // 提现事件\r\n    event onWithdraw\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    //==============\r\n    // DATA\r\n    //==============\r\n\r\n    // 玩家基本信息\r\n    struct Player {\r\n        address addr;   // 地址 player address\r\n        bytes32 name;   \r\n        uint256 gen;    // 钱包余额：通用\r\n        uint256 aff;    // 钱包余额：邀请奖励\r\n        uint256 laff;   // 最近邀请人（玩家ID）\r\n    }\r\n    \r\n    // 玩家在每局比赛中的信息\r\n    struct PlayerRounds {\r\n        uint256 eth;    // 本局投入的eth成本\r\n        mapping (uint256 => uint256) plyrTmKeys;    // teamid => keys\r\n        bool withdrawn;     // 这轮收益是否已提现\r\n    }\r\n\r\n    // 队伍信息\r\n    struct Team {\r\n        uint256 id;     // team id\r\n        bytes32 name;    // team name\r\n        uint256 keys;   // key s in the team\r\n        uint256 eth;   // eth from the team\r\n        uint256 price;    // price of the last key (only for view)\r\n        uint256 playersCount;   // how many team members\r\n        uint256 leaderID;   // leader pID (leader is always the top 1 player in the team)\r\n        address leaderAddr;  // leader address\r\n        bool dead;  // 队伍是否已被淘汰\r\n    }\r\n\r\n    // 比赛信息\r\n    struct Round {\r\n        uint256 start;  // 开始时间\r\n        uint256 state;  // 局状态。0: 局未激活，1：局准备，2：杀戮，3：结束（结束后瓜分奖池，相当于ended=true）\r\n        uint256 eth;    // 收到eth总量\r\n        uint256 pot;    // 奖池\r\n        uint256 keys;   // 本轮全部keys\r\n        uint256 team;   // 领先队伍的ID\r\n        uint256 ethPerKey;  // how many eth per key in Winner Team. 只有在比赛结束后才有值。\r\n        uint256 lastKillingTime;   // 上一次淘汰触发时间\r\n        uint256 deadRate;   // 当前淘汰线比率（第一名keys * 淘汰线比率 = 淘汰线）\r\n        uint256 deadKeys;   // 下一次淘汰线（keys低于淘汰线的队伍将被淘汰）\r\n        uint256 liveTeams;  // 活着队伍的数量\r\n        uint256 tID_;    // how many teams in this Round\r\n    }\r\n\r\n    // Game\r\n    string constant public name = \"War of Eth Official\";\r\n    string constant public symbol = \"WOE\";\r\n    address public owner;\r\n    uint256 constant private roundGap_ = 86400;    // 每两局比赛的间隔（state为0的阶段）：24小时\r\n    uint256 constant private killingGap_ = 86400;   // 淘汰间隔（上一次淘汰时间 + 淘汰间隔 = 下一次淘汰时间）：24小时\r\n    uint256 constant private registrationFee_ = 10 finney;    // 名字注册费\r\n\r\n    // Player\r\n    uint256 public pID_;    // 玩家总数\r\n    mapping (address => uint256) public pIDxAddr_;  // (addr => pID) returns player id by address\r\n    mapping (bytes32 => uint256) public pIDxName_;  // (name => pID) returns player id by name\r\n    mapping (uint256 => Player) public plyr_;   // (pID => data) player data\r\n    \r\n    // Round\r\n    uint256 public rID_;    // 当前局ID\r\n    mapping (uint256 => Round) public round_;   // 局ID => 局数据\r\n\r\n    // Player Rounds\r\n    mapping (uint256 => mapping (uint256 => PlayerRounds)) public plyrRnds_;  // 玩家ID => 局ID => 玩家在这局中的数据\r\n\r\n    // Team\r\n    mapping (uint256 => mapping (uint256 => Team)) public rndTms_;  // 局ID => 队ID => 队伍在这局中的数\r\n    mapping (uint256 => mapping (bytes32 => uint256)) public rndTIDxName_;  // (rID => team name => tID) returns team id by name\r\n\r\n    // =============\r\n    // CONSTRUCTOR\r\n    // =============\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // =============\r\n    // MODIFIERS\r\n    // =============\r\n\r\n    // 合约作者才能操作\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // 合约是否已激活\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"its not ready yet.\"); \r\n        _;\r\n    }\r\n    \r\n    // 只接受用户调用，不接受合约调用\r\n    modifier isHuman() {\r\n        require(tx.origin == msg.sender, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    // 交易限额\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"no less than 1 Gwei\");\r\n        require(_eth <= 100000000000000000000000, \"no more than 100000 ether\");\r\n        _;\r\n    }\r\n\r\n    // =====================\r\n    // PUBLIC INTERACTION\r\n    // =====================\r\n\r\n    // 直接打到合约中的钱会由这个方法处理【不推荐，请勿使用】\r\n    // 默认使用上一个邀请人，且资金进入当前领先队伍\r\n    function()\r\n        public\r\n        payable\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n    {\r\n        buy(round_[rID_].team, \"\");\r\n    }\r\n\r\n    // 购买\r\n    // 邀请码只能是用户名，不支持用户ID或Address\r\n    function buy(uint256 _team, bytes32 _affCode)\r\n        public\r\n        payable\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n    {\r\n        // 确保比赛尚未结束\r\n        require(round_[rID_].state < 3, \"This round has ended.\");\r\n\r\n        // 确保比赛已经开始\r\n        if (round_[rID_].state == 0){\r\n            require(now >= round_[rID_].start, \"This round hasn't started yet.\");\r\n            round_[rID_].state = 1;\r\n        }\r\n\r\n        // 获取玩家ID\r\n        // 如果不存在，会创建新玩家档案\r\n        determinePID(msg.sender);\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        uint256 _tID;\r\n\r\n        // 邀请码处理\r\n        // 只能是用户名，不支持用户ID或Address\r\n        uint256 _affID;\r\n        if (_affCode == \"\" || _affCode == plyr_[_pID].name){\r\n            // 如果没有邀请码，则使用上一个邀请码\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            // 如果存在邀请码，则获取对应的玩家ID\r\n            _affID = pIDxName_[_affCode];\r\n            \r\n            // 更新玩家的最近邀请人\r\n            if (_affID != plyr_[_pID].laff){\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // 购买处理\r\n        if (round_[rID_].state == 1){\r\n            // Check team id\r\n            _tID = determinTID(_team, _pID);\r\n\r\n            // Buy\r\n            buyCore(_pID, _affID, _tID, msg.value);\r\n\r\n            // 达到16支队伍就进入淘汰阶段（state: 2）\r\n            if (round_[rID_].tID_ >= 16){\r\n                // 进入淘汰阶段\r\n                round_[rID_].state = 2;\r\n\r\n                // 初始化设置\r\n                startKilling();\r\n            }\r\n\r\n        } else if (round_[rID_].state == 2){\r\n            // 是否触发结束\r\n            if (round_[rID_].liveTeams == 1){\r\n                // 结束\r\n                endRound();\r\n                \r\n                // 退还资金到钱包账户\r\n                refund(_pID, msg.value);\r\n\r\n                return;\r\n            }\r\n\r\n            // Check team id\r\n            _tID = determinTID(_team, _pID);\r\n\r\n            // Buy\r\n            buyCore(_pID, _affID, _tID, msg.value);\r\n\r\n            // Kill if needed\r\n            if (now > round_[rID_].lastKillingTime.add(killingGap_)) {\r\n                kill();\r\n            }\r\n        }\r\n    }\r\n\r\n    // 钱包提币\r\n    function withdraw()\r\n        public\r\n        isActivated()\r\n        isHuman()\r\n    {\r\n        // fetch player ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 确保玩家存在\r\n        require(_pID != 0, \"Please join the game first!\");\r\n\r\n        // 提现金额\r\n        uint256 _eth;\r\n\r\n        // 如果存在已经结束的轮次，计算我尚未提现的收益\r\n        if (rID_ > 1){\r\n            for (uint256 i = 1; i < rID_; i++) {\r\n                // 如果尚未提现，则提出金额\r\n                if (plyrRnds_[_pID][i].withdrawn == false){\r\n                    if (plyrRnds_[_pID][i].plyrTmKeys[round_[i].team] != 0) {\r\n                        _eth = _eth.add(round_[i].ethPerKey.mul(plyrRnds_[_pID][i].plyrTmKeys[round_[i].team]) / 1000000000000000000);\r\n                    }\r\n                    plyrRnds_[_pID][i].withdrawn = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        _eth = _eth.add(plyr_[_pID].gen).add(plyr_[_pID].aff);\r\n\r\n        // 转账\r\n        if (_eth > 0) {\r\n            plyr_[_pID].addr.transfer(_eth);\r\n        }\r\n\r\n        // 清空钱包余额\r\n        plyr_[_pID].gen = 0;\r\n        plyr_[_pID].aff = 0;\r\n\r\n        // Event 提现\r\n        emit onWithdraw(_pID, plyr_[_pID].addr, plyr_[_pID].name, _eth, now);\r\n    }\r\n\r\n    // 注册玩家名字\r\n    function registerNameXID(string _nameString)\r\n        public\r\n        payable\r\n        isHuman()\r\n    {\r\n        // make sure name fees paid\r\n        require (msg.value >= registrationFee_, \"You have to pay the name fee.(10 finney)\");\r\n        \r\n        // filter name + condition checks\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n        \r\n        // set up address \r\n        address _addr = msg.sender;\r\n        \r\n        // set up our tx event data and determine if player is new or not\r\n        // bool _isNewPlayer = determinePID(_addr);\r\n        bool _isNewPlayer = determinePID(_addr);\r\n        \r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // 确保这个名字还没有人用\r\n        require(pIDxName_[_name] == 0, \"sorry that names already taken\");\r\n        \r\n        // add name to player profile, registry, and name book\r\n        plyr_[_pID].name = _name;\r\n        pIDxName_[_name] = _pID;\r\n\r\n        // deposit registration fee\r\n        plyr_[1].gen = (msg.value).add(plyr_[1].gen);\r\n        \r\n        // Event\r\n        emit onNewName(_pID, _addr, _name, _isNewPlayer, msg.value, now);\r\n    }\r\n\r\n    // 注册队伍名字\r\n    // 只能由队长设置\r\n    function setTeamName(uint256 _tID, string _nameString)\r\n        public\r\n        payable\r\n        isHuman()\r\n    {\r\n        // 要求team id存在\r\n        require(_tID <= round_[rID_].tID_ && _tID != 0, \"There's no this team.\");\r\n        \r\n        // fetch player ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        \r\n        // 要求必须是队长\r\n        require(_pID == rndTms_[rID_][_tID].leaderID, \"Only team leader can change team name. You can invest more money to be the team leader.\");\r\n        \r\n        // 需要注册费\r\n        require (msg.value >= registrationFee_, \"You have to pay the name fee.(10 finney)\");\r\n        \r\n        // filter name + condition checks\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n\r\n        require(rndTIDxName_[rID_][_name] == 0, \"sorry that names already taken\");\r\n        \r\n        // add name to team\r\n        rndTms_[rID_][_tID].name = _name;\r\n        rndTIDxName_[rID_][_name] = _tID;\r\n\r\n        // deposit registration fee\r\n        plyr_[1].gen = (msg.value).add(plyr_[1].gen);\r\n\r\n        // event\r\n        emit onNewTeamName(_tID, _name, _pID, plyr_[_pID].name, msg.value, now);\r\n    }\r\n\r\n    //==============\r\n    // GETTERS\r\n    //==============\r\n\r\n    // 检查名字可注册\r\n    function checkIfNameValid(string _nameStr)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 _name = _nameStr.nameFilter();\r\n        if (pIDxName_[_name] == 0)\r\n            return (true);\r\n        else \r\n            return (false);\r\n    }\r\n\r\n    // 查询：距离下一次淘汰的时间\r\n    function getNextKillingAfter()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(round_[rID_].state == 2, \"Not in killing period.\");\r\n\r\n        uint256 _tNext = round_[rID_].lastKillingTime.add(killingGap_);\r\n        uint256 _t = _tNext > now ? _tNext.sub(now) : 0;\r\n\r\n        return _t;\r\n    }\r\n\r\n    // 查询：单个玩家本轮信息 (前端查询用户钱包也是这个方法)\r\n    // 返回：玩家ID，地址，名字，gen，aff，本轮投资额，本轮预计收益，未提现收益\r\n    function getPlayerInfoByAddress(address _addr)\r\n        public \r\n        view \r\n        returns(uint256, address, bytes32, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        if (_addr == address(0))\r\n        {\r\n            _addr == msg.sender;\r\n        }\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        return (\r\n            _pID,\r\n            _addr,\r\n            plyr_[_pID].name,\r\n            plyr_[_pID].gen,\r\n            plyr_[_pID].aff,\r\n            plyrRnds_[_pID][rID_].eth,\r\n            getProfit(_pID),\r\n            getPreviousProfit(_pID)\r\n        );\r\n    }\r\n\r\n    // 查询: 玩家在某轮对某队的投资（_roundID = 0 表示当前轮）\r\n    // 返回 keys\r\n    function getPlayerRoundTeamBought(uint256 _pID, uint256 _roundID, uint256 _tID)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _rID = _roundID == 0 ? rID_ : _roundID;\r\n        return plyrRnds_[_pID][_rID].plyrTmKeys[_tID];\r\n    }\r\n\r\n    // 查询: 玩家在某轮的全部投资（_roundID = 0 表示当前轮）\r\n    // 返回 keysList数组 (keysList[i]表示用户在i+1队的份额)\r\n    function getPlayerRoundBought(uint256 _pID, uint256 _roundID)\r\n        public\r\n        view\r\n        returns (uint256[])\r\n    {\r\n        uint256 _rID = _roundID == 0 ? rID_ : _roundID;\r\n\r\n        // 该轮队伍总数\r\n        uint256 _tCount = round_[_rID].tID_;\r\n\r\n        // 玩家在各队的keys\r\n        uint256[] memory keysList = new uint256[](_tCount);\r\n\r\n        // 生成数组\r\n        for (uint i = 0; i < _tCount; i++) {\r\n            keysList[i] = plyrRnds_[_pID][_rID].plyrTmKeys[i+1];\r\n        }\r\n\r\n        return keysList;\r\n    }\r\n\r\n    // 查询：玩家在各轮的成绩（包含本赛季，但是收益为0）\r\n    // 返回 {ethList, winList}  (ethList[i]表示第i+1个赛季的投资)\r\n    function getPlayerRounds(uint256 _pID)\r\n        public\r\n        view\r\n        returns (uint256[], uint256[])\r\n    {\r\n        uint256[] memory _ethList = new uint256[](rID_);\r\n        uint256[] memory _winList = new uint256[](rID_);\r\n        for (uint i=0; i < rID_; i++){\r\n            _ethList[i] = plyrRnds_[_pID][i+1].eth;\r\n            _winList[i] = plyrRnds_[_pID][i+1].plyrTmKeys[round_[i+1].team].mul(round_[i+1].ethPerKey) / 1000000000000000000;\r\n        }\r\n\r\n        return (\r\n            _ethList,\r\n            _winList\r\n        );\r\n    }\r\n\r\n    // 查询：上一局信息\r\n    // 返回：局ID，状态，奖池金额，获胜队伍ID，队伍名字，队伍人数，总队伍数\r\n    // 如果不存在上一局，会返回一堆0\r\n    function getLastRoundInfo()\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, bytes32, uint256, uint256)\r\n    {\r\n        // last round id\r\n        uint256 _rID = rID_.sub(1);\r\n\r\n        // last winner\r\n        uint256 _tID = round_[_rID].team;\r\n\r\n        return (\r\n            _rID,\r\n            round_[_rID].state,\r\n            round_[_rID].pot,\r\n            _tID,\r\n            rndTms_[_rID][_tID].name,\r\n            rndTms_[_rID][_tID].playersCount,\r\n            round_[_rID].tID_\r\n        );\r\n    }\r\n\r\n    // 查询：本局比赛信息\r\n    function getCurrentRoundInfo()\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        return (\r\n            rID_,\r\n            round_[rID_].state,\r\n            round_[rID_].eth,\r\n            round_[rID_].pot,\r\n            round_[rID_].keys,\r\n            round_[rID_].team,\r\n            round_[rID_].ethPerKey,\r\n            round_[rID_].lastKillingTime,\r\n            killingGap_,\r\n            round_[rID_].deadRate,\r\n            round_[rID_].deadKeys,\r\n            round_[rID_].liveTeams,\r\n            round_[rID_].tID_,\r\n            round_[rID_].start\r\n        );\r\n    }\r\n\r\n    // 查询：某支队伍信息\r\n    // 返回：基本信息，队伍成员，及其投资金额\r\n    function getTeamInfoByID(uint256 _tID) \r\n        public\r\n        view\r\n        returns (uint256, bytes32, uint256, uint256, uint256, uint256, bool)\r\n    {\r\n        require(_tID <= round_[rID_].tID_, \"There's no this team.\");\r\n        \r\n        return (\r\n            rndTms_[rID_][_tID].id,\r\n            rndTms_[rID_][_tID].name,\r\n            rndTms_[rID_][_tID].keys,\r\n            rndTms_[rID_][_tID].eth,\r\n            rndTms_[rID_][_tID].price,\r\n            rndTms_[rID_][_tID].leaderID,\r\n            rndTms_[rID_][_tID].dead\r\n        );\r\n    }\r\n\r\n    // 查询：所有队伍的信息\r\n    // 返回：id[], name[], keys[], eth[], price[], playersCount[], dead[]\r\n    function getTeamsInfo()\r\n        public\r\n        view\r\n        returns (uint256[], bytes32[], uint256[], uint256[], uint256[], uint256[], bool[])\r\n    {\r\n        uint256 _tID = round_[rID_].tID_;\r\n\r\n        // Lists of Team Info\r\n        uint256[] memory _idList = new uint256[](_tID);\r\n        bytes32[] memory _nameList = new bytes32[](_tID);\r\n        uint256[] memory _keysList = new uint256[](_tID);\r\n        uint256[] memory _ethList = new uint256[](_tID);\r\n        uint256[] memory _priceList = new uint256[](_tID);\r\n        uint256[] memory _membersList = new uint256[](_tID);\r\n        bool[] memory _deadList = new bool[](_tID);\r\n\r\n        // Data\r\n        for (uint i = 0; i < _tID; i++) {\r\n            _idList[i] = rndTms_[rID_][i+1].id;\r\n            _nameList[i] = rndTms_[rID_][i+1].name;\r\n            _keysList[i] = rndTms_[rID_][i+1].keys;\r\n            _ethList[i] = rndTms_[rID_][i+1].eth;\r\n            _priceList[i] = rndTms_[rID_][i+1].price;\r\n            _membersList[i] = rndTms_[rID_][i+1].playersCount;\r\n            _deadList[i] = rndTms_[rID_][i+1].dead;\r\n        }\r\n\r\n        return (\r\n            _idList,\r\n            _nameList,\r\n            _keysList,\r\n            _ethList,\r\n            _priceList,\r\n            _membersList,\r\n            _deadList\r\n        );\r\n    }\r\n\r\n    // 获取每个队伍中的队长信息\r\n    // 返回：leaderID[], leaderName[], leaderAddr[]\r\n    function getTeamLeaders()\r\n        public\r\n        view\r\n        returns (uint256[], uint256[], bytes32[], address[])\r\n    {\r\n        uint256 _tID = round_[rID_].tID_;\r\n\r\n        // Teams' leaders info\r\n        uint256[] memory _idList = new uint256[](_tID);\r\n        uint256[] memory _leaderIDList = new uint256[](_tID);\r\n        bytes32[] memory _leaderNameList = new bytes32[](_tID);\r\n        address[] memory _leaderAddrList = new address[](_tID);\r\n\r\n        // Data\r\n        for (uint i = 0; i < _tID; i++) {\r\n            _idList[i] = rndTms_[rID_][i+1].id;\r\n            _leaderIDList[i] = rndTms_[rID_][i+1].leaderID;\r\n            _leaderNameList[i] = plyr_[_leaderIDList[i]].name;\r\n            _leaderAddrList[i] = rndTms_[rID_][i+1].leaderAddr;\r\n        }\r\n\r\n        return (\r\n            _idList,\r\n            _leaderIDList,\r\n            _leaderNameList,\r\n            _leaderAddrList\r\n        );\r\n    }\r\n\r\n    // 查询：预测本局的收益（假定目前领先的队伍赢）\r\n    // 返回：eth\r\n    function getProfit(uint256 _pID)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // 领先队伍ID\r\n        uint256 _tID = round_[rID_].team;\r\n\r\n        // 如果用户不持有领先队伍股份，则返回0\r\n        if (plyrRnds_[_pID][rID_].plyrTmKeys[_tID] == 0){\r\n            return 0;\r\n        }\r\n\r\n        // 我投资获胜的队伍Keys\r\n        uint256 _keys = plyrRnds_[_pID][rID_].plyrTmKeys[_tID];\r\n        \r\n        // 计算每把Key的价值\r\n        uint256 _ethPerKey = round_[rID_].pot.mul(1000000000000000000) / rndTms_[rID_][_tID].keys;\r\n        \r\n        // 我的Keys对应的总价值\r\n        uint256 _value = _keys.mul(_ethPerKey) / 1000000000000000000;\r\n\r\n        return _value;\r\n    }\r\n\r\n    // 查询：此前轮尚未提现的收益\r\n    function getPreviousProfit(uint256 _pID)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _eth;\r\n\r\n        if (rID_ > 1){\r\n            // 计算我已结束的每轮中，尚未提现的收益\r\n            for (uint256 i = 1; i < rID_; i++) {\r\n                if (plyrRnds_[_pID][i].withdrawn == false){\r\n                    if (plyrRnds_[_pID][i].plyrTmKeys[round_[i].team] != 0) {\r\n                        _eth = _eth.add(round_[i].ethPerKey.mul(plyrRnds_[_pID][i].plyrTmKeys[round_[i].team]) / 1000000000000000000);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // 如果还没有已结束的轮次，则返回0\r\n            _eth = 0;\r\n        }\r\n\r\n        // 返回\r\n        return _eth;\r\n    }\r\n\r\n    // 下一个完整Key的价格\r\n    function getNextKeyPrice(uint256 _tID)\r\n        public \r\n        view \r\n        returns(uint256)\r\n    {  \r\n        require(_tID <= round_[rID_].tID_ && _tID != 0, \"No this team.\");\r\n\r\n        return ( (rndTms_[rID_][_tID].keys.add(1000000000000000000)).ethRec(1000000000000000000) );\r\n    }\r\n\r\n    // 购买某队X数量Keys，需要多少Eth？\r\n    function getEthFromKeys(uint256 _tID, uint256 _keys)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        if (_tID <= round_[rID_].tID_ && _tID != 0){\r\n            // 如果_tID存在，则正常计算\r\n            return ((rndTms_[rID_][_tID].keys.add(_keys)).ethRec(_keys));\r\n        } else {\r\n            // 如果_tID不存在，则认为是新队伍\r\n            return ((uint256(0).add(_keys)).ethRec(_keys));\r\n        }\r\n    }\r\n\r\n    // X数量Eth，可以买到某队多少keys？\r\n    function getKeysFromEth(uint256 _tID, uint256 _eth)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_tID <= round_[rID_].tID_ && _tID != 0){\r\n            // 如果_tID存在，则正常计算\r\n            return (rndTms_[rID_][_tID].eth).keysRec(_eth);\r\n        } else {\r\n            // 如果_tID不存在，则认为是新队伍\r\n            return (uint256(0).keysRec(_eth));\r\n        }\r\n    }\r\n\r\n    // ==========================\r\n    //   PRIVATE: CORE GAME LOGIC\r\n    // ==========================\r\n\r\n    // 核心购买方法\r\n    function buyCore(uint256 _pID, uint256 _affID, uint256 _tID, uint256 _eth)\r\n        private\r\n    {\r\n        uint256 _keys = (rndTms_[rID_][_tID].eth).keysRec(_eth);\r\n\r\n        // 更新Player、Team、Round数据\r\n        // player\r\n        if (plyrRnds_[_pID][rID_].plyrTmKeys[_tID] == 0){\r\n            rndTms_[rID_][_tID].playersCount++;\r\n        }\r\n        plyrRnds_[_pID][rID_].plyrTmKeys[_tID] = _keys.add(plyrRnds_[_pID][rID_].plyrTmKeys[_tID]);\r\n        plyrRnds_[_pID][rID_].eth = _eth.add(plyrRnds_[_pID][rID_].eth);\r\n\r\n        // Team\r\n        rndTms_[rID_][_tID].keys = _keys.add(rndTms_[rID_][_tID].keys);\r\n        rndTms_[rID_][_tID].eth = _eth.add(rndTms_[rID_][_tID].eth);\r\n        rndTms_[rID_][_tID].price = _eth.mul(1000000000000000000) / _keys;\r\n        uint256 _teamLeaderID = rndTms_[rID_][_tID].leaderID;\r\n        // refresh team leader\r\n        if (plyrRnds_[_pID][rID_].plyrTmKeys[_tID] > plyrRnds_[_teamLeaderID][rID_].plyrTmKeys[_tID]){\r\n            rndTms_[rID_][_tID].leaderID = _pID;\r\n            rndTms_[rID_][_tID].leaderAddr = msg.sender;\r\n        }\r\n\r\n        // Round\r\n        round_[rID_].keys = _keys.add(round_[rID_].keys);\r\n        round_[rID_].eth = _eth.add(round_[rID_].eth);\r\n        // refresh round leader\r\n        if (rndTms_[rID_][_tID].keys > rndTms_[rID_][round_[rID_].team].keys){\r\n            round_[rID_].team = _tID;\r\n        }\r\n\r\n        // 资金分配\r\n        distribute(rID_, _pID, _eth, _affID);\r\n\r\n        // Event\r\n        emit onTx(_pID, msg.sender, plyr_[_pID].name, _tID, rndTms_[rID_][_tID].name, _eth, _keys);\r\n    }\r\n\r\n    // 资金分配\r\n    function distribute(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID)\r\n        private\r\n    {\r\n        // [1] com - 3%\r\n        uint256 _com = (_eth.mul(3)) / 100;\r\n\r\n        // pay community reward\r\n        plyr_[1].gen = _com.add(plyr_[1].gen);\r\n\r\n        // [2] aff - 10%\r\n        uint256 _aff = _eth / 10;\r\n\r\n        if (_affID != _pID && plyr_[_affID].name != \"\") {\r\n            // pay aff\r\n            plyr_[_affID].aff = _aff.add(plyr_[_affID].aff);\r\n            \r\n            // Event 邀请奖励\r\n            emit onAffPayout(_affID, plyr_[_affID].addr, plyr_[_affID].name, _rID, _pID, _aff, now);\r\n        } else {\r\n            // 如果没有邀请人，则这部分资金并入最终奖池\r\n            // 它并不会影响玩家买到的Keys数量，只会增加最终奖池的金额\r\n            _aff = 0;\r\n        }\r\n\r\n        // [3] pot - 87%\r\n        uint256 _pot = _eth.sub(_aff).sub(_com);\r\n\r\n        // 更新本局奖池\r\n        round_[_rID].pot = _pot.add(round_[_rID].pot);\r\n    }\r\n\r\n    // 结束流程（只能执行一次）\r\n    function endRound()\r\n        private\r\n    {\r\n        require(round_[rID_].state < 3, \"Round only end once.\");\r\n        \r\n        // 本轮状态更新\r\n        round_[rID_].state = 3;\r\n\r\n        // 奖池金额\r\n        uint256 _pot = round_[rID_].pot;\r\n\r\n        // Devide Round Pot\r\n        // [1] winner 77%\r\n        uint256 _win = (_pot.mul(77))/100;\r\n\r\n        // [2] com 3%\r\n        uint256 _com = (_pot.mul(3))/100;\r\n\r\n        // [3] next round 20%\r\n        uint256 _res = (_pot.sub(_win)).sub(_com);\r\n\r\n        // 获胜队伍\r\n        uint256 _tID = round_[rID_].team;\r\n        // 计算ethPerKey (每个完整的key对应多少个wei, A Full Key = 10**18 keys)\r\n        uint256 _epk = (_win.mul(1000000000000000000)) / (rndTms_[rID_][_tID].keys);\r\n\r\n        // 考虑dust\r\n        uint256 _dust = _win.sub((_epk.mul(rndTms_[rID_][_tID].keys)) / 1000000000000000000);\r\n        if (_dust > 0) {\r\n            _win = _win.sub(_dust);\r\n            _res = _res.add(_dust);\r\n        }\r\n\r\n        // pay winner team\r\n        round_[rID_].ethPerKey = _epk;\r\n\r\n        // pay community reward\r\n        plyr_[1].gen = _com.add(plyr_[1].gen);\r\n\r\n        // Event\r\n        emit onEndRound(_tID, rndTms_[rID_][_tID].name, rndTms_[rID_][_tID].playersCount, _pot);\r\n\r\n        // 进入下一局\r\n        rID_++;\r\n        round_[rID_].pot = _res;\r\n        round_[rID_].start = now + roundGap_;\r\n    }\r\n    \r\n    // 退款到钱包账户\r\n    function refund(uint256 _pID, uint256 _value)\r\n        private\r\n    {\r\n        plyr_[_pID].gen = _value.add(plyr_[_pID].gen);\r\n    }\r\n\r\n    // 创建队伍\r\n    // 返回 队伍ID\r\n    function createTeam(uint256 _pID, uint256 _eth)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        // 队伍总数不能多于99支\r\n        require(round_[rID_].tID_ < 99, \"No more than 99 teams.\");\r\n\r\n        // 创建队伍至少需要投资1eth\r\n        require(_eth >= 1000000000000000000, \"You need at least 1 eth to create a team, though creating a new team is free.\");\r\n\r\n        // 本局队伍数和存活队伍数增加\r\n        round_[rID_].tID_++;\r\n        round_[rID_].liveTeams++;\r\n        \r\n        // 新队伍ID\r\n        uint256 _tID = round_[rID_].tID_;\r\n        \r\n        // 新队伍数据\r\n        rndTms_[rID_][_tID].id = _tID;\r\n        rndTms_[rID_][_tID].leaderID = _pID;\r\n        rndTms_[rID_][_tID].leaderAddr = plyr_[_pID].addr;\r\n        rndTms_[rID_][_tID].dead = false;\r\n\r\n        return _tID;\r\n    }\r\n\r\n    // 初始化各项杀戮参数\r\n    function startKilling()\r\n        private\r\n    {   \r\n        // 初始回合的基本参数\r\n        round_[rID_].lastKillingTime = now;\r\n        round_[rID_].deadRate = 10;     // 百分比，按照 deadRate / 100 来使用\r\n        round_[rID_].deadKeys = (rndTms_[rID_][round_[rID_].team].keys.mul(round_[rID_].deadRate)) / 100;\r\n    }\r\n\r\n    // 杀戮淘汰\r\n    function kill()\r\n        private\r\n    {\r\n        // 本回合死亡队伍数\r\n        uint256 _dead = 0;\r\n\r\n        // 少于淘汰线的队伍淘汰\r\n        for (uint256 i = 1; i <= round_[rID_].tID_; i++) {\r\n            if (rndTms_[rID_][i].keys < round_[rID_].deadKeys && rndTms_[rID_][i].dead == false){\r\n                rndTms_[rID_][i].dead = true;\r\n                round_[rID_].liveTeams--;\r\n                _dead++;\r\n            }\r\n        }\r\n\r\n        round_[rID_].lastKillingTime = now;\r\n\r\n        // 如果只剩一支队伍，则启动结束程序\r\n        if (round_[rID_].liveTeams == 1 && round_[rID_].state == 2) {\r\n            endRound();\r\n            return;\r\n        }\r\n\r\n        // 更新淘汰比率（如果参数修改了，要注意此处判断条件）\r\n        if (round_[rID_].deadRate < 90) {\r\n            round_[rID_].deadRate = round_[rID_].deadRate + 10;\r\n        }\r\n\r\n        // 更新下一回合淘汰线\r\n        round_[rID_].deadKeys = ((rndTms_[rID_][round_[rID_].team].keys).mul(round_[rID_].deadRate)) / 100;\r\n\r\n        // event\r\n        emit onKill(_dead, round_[rID_].liveTeams, round_[rID_].deadKeys);\r\n    }\r\n\r\n    // 通过地址查询玩家ID，如果没有，就创建新玩家\r\n    // 返回：是否为新玩家\r\n    function determinePID(address _addr)\r\n        private\r\n        returns (bool)\r\n    {\r\n        if (pIDxAddr_[_addr] == 0)\r\n        {\r\n            pID_++;\r\n            pIDxAddr_[_addr] = pID_;\r\n            plyr_[pID_].addr = _addr;\r\n            \r\n            return (true);  // 新玩家\r\n        } else {\r\n            return (false);\r\n        }\r\n    }\r\n\r\n    // 队伍编号检查，返回编号（仅在当前局使用）\r\n    function determinTID(uint256 _team, uint256 _pID)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        // 确保队伍尚未淘汰\r\n        require(rndTms_[rID_][_team].dead == false, \"You can not buy a dead team!\");\r\n        \r\n        if (_team <= round_[rID_].tID_ && _team > 0) {\r\n            // 如果队伍已存在，则直接返回\r\n            return _team;\r\n        } else {\r\n            // 如果队伍不存在，则创建新队伍\r\n            return createTeam(_pID, msg.value);\r\n        }\r\n    }\r\n\r\n    //==============\r\n    // SECURITY\r\n    //============== \r\n\r\n    // 部署完合约第一轮游戏需要我来激活整个游戏\r\n    bool public activated_ = false;\r\n    function activate()\r\n        public\r\n        onlyOwner()\r\n    {   \r\n        // can only be ran once\r\n        require(activated_ == false, \"it is already activated\");\r\n        \r\n        // activate the contract \r\n        activated_ = true;\r\n\r\n        // the first player\r\n        plyr_[1].addr = owner;\r\n        plyr_[1].name = \"joker\";\r\n        pIDxAddr_[owner] = 1;\r\n        pIDxName_[\"joker\"] = 1;\r\n        pID_ = 1;\r\n        \r\n        // 激活第一局.\r\n        rID_ = 1;\r\n        round_[1].start = now;\r\n        round_[1].state = 1;\r\n    }\r\n\r\n}   // main contract ends here\r\n\r\n\r\n// Keys价格相关计算\r\n// 【新算法】keys价格是原来的1000倍\r\nlibrary WoeKeysCalc {\r\n    using SafeMath for *;\r\n\r\n    // 根据现有ETH，计算新入X个ETH能购买的Keys数量\r\n    function keysRec(uint256 _curEth, uint256 _newEth)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\r\n    }\r\n    \r\n    // 根据当前Keys数量，计算卖出X数量的keys值多少ETH\r\n    function ethRec(uint256 _curKeys, uint256 _sellKeys)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\r\n    }\r\n\r\n    // 根据池中ETH数量计算对应的Keys数量\r\n    function keys(uint256 _eth) \r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000000);\r\n    }\r\n    \r\n    // 根据Keys数量，计算池中ETH的数量\r\n    function eth(uint256 _keys) \r\n        internal\r\n        pure\r\n        returns(uint256)  \r\n    {\r\n        return ((78125000000000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    }\r\n}\r\n\r\n\r\nlibrary NameFilter {\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.  \r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x \r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n        \r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n        \r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n        \r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n                \r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 || \r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n                \r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;    \r\n            }\r\n        }\r\n        \r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n        \r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"}],\"name\":\"registerNameXID\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerRounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"team\",\"type\":\"uint256\"},{\"name\":\"ethPerKey\",\"type\":\"uint256\"},{\"name\":\"lastKillingTime\",\"type\":\"uint256\"},{\"name\":\"deadRate\",\"type\":\"uint256\"},{\"name\":\"deadKeys\",\"type\":\"uint256\"},{\"name\":\"liveTeams\",\"type\":\"uint256\"},{\"name\":\"tID_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"},{\"name\":\"_keys\",\"type\":\"uint256\"}],\"name\":\"getEthFromKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextKillingAfter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"}],\"name\":\"getNextKeyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameStr\",\"type\":\"string\"}],\"name\":\"checkIfNameValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rndTms_\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"playersCount\",\"type\":\"uint256\"},{\"name\":\"leaderID\",\"type\":\"uint256\"},{\"name\":\"leaderAddr\",\"type\":\"address\"},{\"name\":\"dead\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getPlayerRoundBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rndTIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"getKeysFromEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTeamsInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrRnds_\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_roundID\",\"type\":\"uint256\"},{\"name\":\"_tID\",\"type\":\"uint256\"}],\"name\":\"getPlayerRoundTeamBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPreviousProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"},{\"name\":\"_nameString\",\"type\":\"string\"}],\"name\":\"setTeamName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTeamLeaders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"}],\"name\":\"getTeamInfoByID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isNewPlayer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"teamID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"teamName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewTeamName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"teamID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"teamName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keysBought\",\"type\":\"uint256\"}],\"name\":\"onTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"affID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onAffPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deadCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"liveCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deadKeys\",\"type\":\"uint256\"}],\"name\":\"onKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winnerTID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerTName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"playersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"onEndRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"}]","ContractName":"WarOfEth","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://04e409eb09a8643e944134234e441bd07b2144e25a584719a210dcc0bdab0f8f"}]}