{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    emit Transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param amount The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param amount The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != 0);\r\n    require(amount <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param amount The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 amount) internal {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      amount);\r\n    _burn(account, amount);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // The token being sold\r\n  IERC20 private _token;\r\n\r\n  // Address where funds are collected\r\n  address private _wallet;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\r\n  // 1 wei will give you 1 unit, or 0.001 TOK.\r\n  uint256 private _rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 private _weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokensPurchased(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @param rate Number of token units a buyer gets per wei\r\n   * @dev The rate is the conversion between wei and the smallest and indivisible\r\n   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\r\n   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\r\n   * @param wallet Address where collected funds will be forwarded to\r\n   * @param token Address of the token being sold\r\n   */\r\n  constructor(uint256 rate, address wallet, IERC20 token) public {\r\n    require(rate > 0);\r\n    require(wallet != address(0));\r\n    require(token != address(0));\r\n\r\n    _rate = rate;\r\n    _wallet = wallet;\r\n    _token = token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @return the token being sold.\r\n   */\r\n  function token() public view returns(IERC20) {\r\n    return _token;\r\n  }\r\n\r\n  /**\r\n   * @return the address where funds are collected.\r\n   */\r\n  function wallet() public view returns(address) {\r\n    return _wallet;\r\n  }\r\n\r\n  /**\r\n   * @return the number of token units a buyer gets per wei.\r\n   */\r\n  function rate() public view returns(uint256) {\r\n    return _rate;\r\n  }\r\n\r\n  /**\r\n   * @return the mount of wei raised.\r\n   */\r\n  function weiRaised() public view returns (uint256) {\r\n    return _weiRaised;\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(beneficiary, tokens);\r\n    emit TokensPurchased(\r\n      msg.sender,\r\n      beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\r\n   *   super._preValidatePurchase(beneficiary, weiAmount);\r\n   *   require(weiRaised().add(weiAmount) <= cap);\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n  {\r\n    require(beneficiary != address(0));\r\n    require(weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _token.safeTransfer(beneficiary, tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param beneficiary Address receiving the tokens\r\n   * @param tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(beneficiary, tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param beneficiary Address receiving the tokens\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return weiAmount.mul(_rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    _wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\n// File: contracts/TieredPriceCrowdsale.sol\r\n\r\n/**\r\n * @title CappedWhitelistedCrowdsale\r\n * @dev Crowdsale with a limit for total contributions and per-beneficiary caps. \r\n * Combination of CappedCrowdsale and IndividuallyCappedCrowdsale\r\n */\r\ncontract TieredPriceCrowdsale is Crowdsale {\r\n    uint256 private _baseRate;\r\n    uint256 private _tier2Start;\r\n    uint256 private _tier3Start;\r\n    uint256 private _tier4Start;\r\n\r\n    constructor( \r\n      uint256 baseRate,\r\n      uint256 openingTimeTier2,\r\n      uint256 openingTimeTier3, \r\n      uint256 openingTimeTier4\r\n    ) \r\n    public \r\n    {\r\n        require(baseRate > 0);\r\n        require(openingTimeTier2 > block.timestamp);\r\n        require(openingTimeTier3 >= openingTimeTier2);\r\n        require(openingTimeTier4 >= openingTimeTier3);\r\n\r\n        _baseRate = baseRate;\r\n        _tier4Start = openingTimeTier4;\r\n        _tier3Start = openingTimeTier3;\r\n        _tier2Start = openingTimeTier2;\r\n    }\r\n\r\n    function _getbonusRate()\r\n      internal view returns (uint256)\r\n    {\r\n        // Calculate current rate with bonus\r\n        if(_tier2Start > block.timestamp){\r\n            return(_baseRate * 6 / 5);\r\n        }\r\n        else if(_tier3Start > block.timestamp){\r\n            return(_baseRate * 11 / 10);\r\n        }\r\n        else if(_tier4Start > block.timestamp){\r\n            return(_baseRate * 21 / 20);\r\n        }\r\n        else {\r\n            return(_baseRate);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @return the current bonus level.\r\n      */\r\n    function bonusRate() public view returns(uint256) {\r\n        return _getbonusRate();\r\n    }\r\n\r\n     /**\r\n      * @param tier Value that represents the tier\r\n      * @return Timestamp when the tier starts\r\n      */\r\n    function tierStartTime(\r\n        uint256 tier       \r\n    ) external view returns(uint256) \r\n    {\r\n        if(tier == 2){\r\n            return _tier2Start;\r\n        }\r\n        else if(tier == 3){\r\n            return _tier3Start;\r\n        }\r\n        else if(tier == 4){\r\n            return _tier4Start;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n      * @dev Override to extend the way in which ether is converted to tokens.\r\n      * @param weiAmount Value in wei to be converted into tokens\r\n      * @return Number of tokens that can be purchased with the specified _weiAmount\r\n      */\r\n    function _getTokenAmount(\r\n        uint256 weiAmount\r\n    )\r\n      internal view returns (uint256)\r\n    {\r\n        return weiAmount.mul(_getbonusRate());\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/CapperRole.sol\r\n\r\ncontract CapperRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event CapperAdded(address indexed account);\r\n  event CapperRemoved(address indexed account);\r\n\r\n  Roles.Role private cappers;\r\n\r\n  constructor() public {\r\n    cappers.add(msg.sender);\r\n  }\r\n\r\n  modifier onlyCapper() {\r\n    require(isCapper(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isCapper(address account) public view returns (bool) {\r\n    return cappers.has(account);\r\n  }\r\n\r\n  function addCapper(address account) public onlyCapper {\r\n    cappers.add(account);\r\n    emit CapperAdded(account);\r\n  }\r\n\r\n  function renounceCapper() public {\r\n    cappers.remove(msg.sender);\r\n  }\r\n\r\n  function _removeCapper(address account) internal {\r\n    cappers.remove(account);\r\n    emit CapperRemoved(account);\r\n  }\r\n}\r\n\r\n// File: contracts/WhitelistedCrowdsale.sol\r\n\r\n/**\r\n * @title WhitelistedCrowdsale\r\n * @dev Crowdsale with whitelist required for purchases, based on IndividuallyCappedCrowdsale.\r\n */\r\ncontract WhitelistedCrowdsale is Crowdsale, CapperRole {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _invCap;   \r\n\r\n    mapping(address => uint256) private _contributions;\r\n    mapping(address => uint256) private _caps;\r\n\r\n    constructor(uint256 invCap) public\r\n    {\r\n        require(invCap > 0);\r\n        _invCap = invCap;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks whether the beneficiary is in the whitelist.\r\n    * @param beneficiary Address to be checked\r\n    * @return Whether the beneficiary is whitelisted\r\n    */\r\n    function isWhitelisted(address beneficiary) public view returns (bool) {\r\n        return _caps[beneficiary] != 0;\r\n    }\r\n\r\n    /**\r\n    * @dev add an address to the whitelist\r\n    * @param beneficiary address\r\n    * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n    */\r\n    function addAddressToWhitelist(address beneficiary) public onlyCapper returns (bool) {\r\n        require(beneficiary != address(0));\r\n        _caps[beneficiary] = _invCap;\r\n        return isWhitelisted(beneficiary);\r\n    }\r\n\r\n    /**\r\n    * @dev add addresses to the whitelist\r\n    * @param _beneficiaries addresses\r\n    * @return true if at least one address was added to the whitelist,\r\n    * false if all addresses were already in the whitelist\r\n    */\r\n    function addAddressesToWhitelist(address[] _beneficiaries) external onlyCapper {\r\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n            addAddressToWhitelist(_beneficiaries[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev remove an address from the whitelist\r\n    * @param beneficiary address\r\n    * @return true if the address was removed from the whitelist, false if the address wasn't already in the whitelist\r\n    */\r\n    function removeAddressFromWhitelist(address beneficiary) public onlyCapper returns (bool) {\r\n        require(beneficiary != address(0));\r\n        _caps[beneficiary] = 0;\r\n        return isWhitelisted(beneficiary);\r\n    }\r\n\r\n    /**\r\n    * @dev remove addresses from the whitelist\r\n    * @param _beneficiaries addresses\r\n    * @return true if at least one address was removed from the whitelist,\r\n    * false if all addresses weren't already in the whitelist\r\n    */\r\n    function removeAddressesFromWhitelist(address[] _beneficiaries) external onlyCapper {\r\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n            removeAddressFromWhitelist(_beneficiaries[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the amount contributed so far by a specific beneficiary.\r\n    * @param beneficiary Address of contributor\r\n    * @return Beneficiary contribution so far\r\n    */\r\n    function getContribution(address beneficiary)\r\n    public view returns (uint256)\r\n    {\r\n        return _contributions[beneficiary];\r\n    }\r\n\r\n    /**\r\n    * @dev Extend parent behavior requiring purchase to respect the beneficiary's funding cap.\r\n    * @param beneficiary Token purchaser\r\n    * @param weiAmount Amount of wei contributed\r\n    */\r\n    function _preValidatePurchase(\r\n        address beneficiary,\r\n        uint256 weiAmount\r\n    )\r\n    internal\r\n    {\r\n        super._preValidatePurchase(beneficiary, weiAmount);\r\n        require(\r\n            _contributions[beneficiary].add(weiAmount) <= _caps[beneficiary]);\r\n    }\r\n\r\n    /**\r\n    * @dev Extend parent behavior to update beneficiary contributions\r\n    * @param beneficiary Token purchaser\r\n    * @param weiAmount Amount of wei contributed\r\n    */\r\n    function _updatePurchasingState(\r\n        address beneficiary,\r\n        uint256 weiAmount\r\n    )\r\n    internal\r\n    {\r\n        super._updatePurchasingState(beneficiary, weiAmount);\r\n        _contributions[beneficiary] = _contributions[beneficiary].add(weiAmount);\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Crowdsale with a limit for total contributions.\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 private _cap;\r\n\r\n  /**\r\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\r\n   * @param cap Max amount of wei to be contributed\r\n   */\r\n  constructor(uint256 cap) public {\r\n    require(cap > 0);\r\n    _cap = cap;\r\n  }\r\n\r\n  /**\r\n   * @return the cap of the crowdsale.\r\n   */\r\n  function cap() public view returns(uint256) {\r\n    return _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the cap has been reached.\r\n   * @return Whether the cap was reached\r\n   */\r\n  function capReached() public view returns (bool) {\r\n    return weiRaised() >= _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\r\n   * @param beneficiary Token purchaser\r\n   * @param weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n  {\r\n    super._preValidatePurchase(beneficiary, weiAmount);\r\n    require(weiRaised().add(weiAmount) <= _cap);\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\r\n\r\n/**\r\n * @title TimedCrowdsale\r\n * @dev Crowdsale accepting contributions only within a time frame.\r\n */\r\ncontract TimedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 private _openingTime;\r\n  uint256 private _closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    require(isOpen());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param openingTime Crowdsale opening time\r\n   * @param closingTime Crowdsale closing time\r\n   */\r\n  constructor(uint256 openingTime, uint256 closingTime) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(openingTime >= block.timestamp);\r\n    require(closingTime >= openingTime);\r\n\r\n    _openingTime = openingTime;\r\n    _closingTime = closingTime;\r\n  }\r\n\r\n  /**\r\n   * @return the crowdsale opening time.\r\n   */\r\n  function openingTime() public view returns(uint256) {\r\n    return _openingTime;\r\n  }\r\n\r\n  /**\r\n   * @return the crowdsale closing time.\r\n   */\r\n  function closingTime() public view returns(uint256) {\r\n    return _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @return true if the crowdsale is open, false otherwise.\r\n   */\r\n  function isOpen() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp > _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param beneficiary Token purchaser\r\n   * @param weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n    onlyWhileOpen\r\n  {\r\n    super._preValidatePurchase(beneficiary, weiAmount);\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale with a one-off finalization action, where one\r\n * can do extra work after finishing.\r\n */\r\ncontract FinalizableCrowdsale is TimedCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  bool private _finalized = false;\r\n\r\n  event CrowdsaleFinalized();\r\n\r\n  /**\r\n   * @return true if the crowdsale is finalized, false otherwise.\r\n   */\r\n  function finalized() public view returns (bool) {\r\n    return _finalized;\r\n  }\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() public {\r\n    require(!_finalized);\r\n    require(hasClosed());\r\n\r\n    _finalization();\r\n    emit CrowdsaleFinalized();\r\n\r\n    _finalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super._finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function _finalization() internal {\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\ncontract MinterRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event MinterAdded(address indexed account);\r\n  event MinterRemoved(address indexed account);\r\n\r\n  Roles.Role private minters;\r\n\r\n  constructor() public {\r\n    minters.add(msg.sender);\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(isMinter(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isMinter(address account) public view returns (bool) {\r\n    return minters.has(account);\r\n  }\r\n\r\n  function addMinter(address account) public onlyMinter {\r\n    minters.add(account);\r\n    emit MinterAdded(account);\r\n  }\r\n\r\n  function renounceMinter() public {\r\n    minters.remove(msg.sender);\r\n  }\r\n\r\n  function _removeMinter(address account) internal {\r\n    minters.remove(account);\r\n    emit MinterRemoved(account);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n  event MintingFinished();\r\n\r\n  bool private _mintingFinished = false;\r\n\r\n  modifier onlyBeforeMintingFinished() {\r\n    require(!_mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if the minting is finished.\r\n   */\r\n  function mintingFinished() public view returns(bool) {\r\n    return _mintingFinished;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param to The address that will receive the minted tokens.\r\n   * @param amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address to,\r\n    uint256 amount\r\n  )\r\n    public\r\n    onlyMinter\r\n    onlyBeforeMintingFinished\r\n    returns (bool)\r\n  {\r\n    _mint(to, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting()\r\n    public\r\n    onlyMinter\r\n    onlyBeforeMintingFinished\r\n    returns (bool)\r\n  {\r\n    _mintingFinished = true;\r\n    emit MintingFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol\r\n\r\n/**\r\n * @title MintedCrowdsale\r\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\r\n * Token ownership should be transferred to MintedCrowdsale for minting.\r\n */\r\ncontract MintedCrowdsale is Crowdsale {\r\n\r\n  /**\r\n   * @dev Overrides delivery by minting tokens upon purchase.\r\n   * @param beneficiary Token purchaser\r\n   * @param tokenAmount Number of tokens to be minted\r\n   */\r\n  function _deliverTokens(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    // Potentially dangerous assumption about the type of the token.\r\n    require(\r\n      ERC20Mintable(address(token())).mint(beneficiary, tokenAmount));\r\n  }\r\n}\r\n\r\n// File: contracts/PlazaCrowdsale.sol\r\n\r\ncontract PlazaCrowdsale is CappedCrowdsale, FinalizableCrowdsale, MintedCrowdsale, WhitelistedCrowdsale, TieredPriceCrowdsale {\r\n    constructor(\r\n        uint256 openingTime,\r\n        uint256 closingTime,\r\n        uint256 rate,\r\n        address wallet,\r\n        uint256 cap,\r\n        ERC20Mintable token,\r\n        uint256 openingTimeTier4, \r\n        uint256 openingTimeTier3, \r\n        uint256 openingTimeTier2,\r\n        uint256 invCap\r\n    )\r\n    public\r\n    Crowdsale(rate, wallet, token)\r\n    CappedCrowdsale(cap)\r\n    WhitelistedCrowdsale(invCap)\r\n    TimedCrowdsale(openingTime, closingTime)\r\n    TieredPriceCrowdsale(rate, openingTimeTier2, openingTimeTier3, openingTimeTier4)\r\n    {}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCapper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceCapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"tierStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"openingTime\",\"type\":\"uint256\"},{\"name\":\"closingTime\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"openingTimeTier4\",\"type\":\"uint256\"},{\"name\":\"openingTimeTier3\",\"type\":\"uint256\"},{\"name\":\"openingTimeTier2\",\"type\":\"uint256\"},{\"name\":\"invCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CapperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CapperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]","ContractName":"PlazaCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005bb1e210000000000000000000000000000000000000000000000000000000005be941100000000000000000000000000000000000000000000000000000000000001388000000000000000000000000dadec2326bd7820de2d3b505b373d0ad0a1206ad0000000000000000000000000000000000000000019d971e4fe8401e7400000000000000000000000000000051aa10bdc19780d440261f67158016188a7207e2000000000000000000000000000000000000000000000000000000005bc45710000000000000000000000000000000000000000000000000000000005bbb1c90000000000000000000000000000000000000000000000000000000005bb333900000000000000000000000000000000000000000000000878678326eac900000","Library":"","SwarmSource":"bzzr://5e6691bef9ee12269091fcb8755d6b2706ab48e521c6eec50b006fd0c0ef194d"}]}