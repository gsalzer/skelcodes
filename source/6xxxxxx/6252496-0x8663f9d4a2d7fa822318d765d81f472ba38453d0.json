{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/// @title DNNToken contract - Main DNN contract\r\n/// @author Dondrey Taylor - <dondrey@dnn.media>\r\ncontract DNNToken {\r\n    enum DNNSupplyAllocations {\r\n        EarlyBackerSupplyAllocation,\r\n        PRETDESupplyAllocation,\r\n        TDESupplyAllocation,\r\n        BountySupplyAllocation,\r\n        WriterAccountSupplyAllocation,\r\n        AdvisorySupplyAllocation,\r\n        PlatformSupplyAllocation\r\n    }\r\n    function balanceOf(address who) constant public returns (uint256);\r\n    function issueTokens(address, uint256, DNNSupplyAllocations) public pure returns (bool) {}\r\n}\r\n\r\n/// @title DNNHODLGame contrac\r\n/// @author Dondrey Taylor - <dondrey@dnn.media>\r\ncontract DNNHODLGame {\r\n\r\n  // DNN Token\r\n  DNNToken public dnnToken;\r\n\r\n  // Owner\r\n  address owner = 0x3Cf26a9FE33C219dB87c2e50572e50803eFb2981;\r\n\r\n  // Stores largest HODLER information\r\n  uint256 public largestHODLERBalance = 0;\r\n  address public largestHODLERAddress = 0x0;\r\n\r\n  // Stores last largest HODLER information\r\n  uint256 public lastLargestHODLERBalance = 0;\r\n  address public lastLargestHODLER = 0x0;\r\n\r\n\t// Event that gets triggered each time a user\r\n\t// sends a redemption transaction to this smart contract\r\n  event WINNER(address indexed to, uint256 dnnBalance, uint256 dnnWon);\r\n\tevent HODLER(address indexed to, uint256 dnnBalance);\r\n\tevent NEWLARGESTHODLER(address indexed from, uint256 dnnBalance);\r\n\r\n  // Owner\r\n  modifier onlyOwner() {\r\n      require (msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  // Decide DNN Winner\r\n  function decideWinner(uint256 dnnToReward, DNNToken.DNNSupplyAllocations allocationType)\r\n    public\r\n    onlyOwner\r\n  {\r\n      if (!dnnToken.issueTokens(largestHODLERAddress, dnnToReward, allocationType)) {\r\n          revert();\r\n      }\r\n      else {\r\n          emit WINNER(largestHODLERAddress, largestHODLERBalance, dnnToReward);\r\n          lastLargestHODLER = largestHODLERAddress;\r\n          lastLargestHODLERBalance = largestHODLERBalance;\r\n          largestHODLERAddress = 0x0;\r\n          largestHODLERBalance = 0;\r\n      }\r\n  }\r\n\r\n  // Constructor\r\n  constructor() public\r\n  {\r\n      dnnToken = DNNToken(0x9D9832d1beb29CC949d75D61415FD00279f84Dc2);\r\n  }\r\n\r\n\t// Handles incoming transactions\r\n\tfunction () public payable {\r\n\r\n      // Sender address\r\n      address dnnHODLER = msg.sender;\r\n\r\n      // Sender balance\r\n      uint256 dnnHODLERBalance = dnnToken.balanceOf(msg.sender);\r\n\r\n      // Check if the senders balance is the largest\r\n      if (largestHODLERBalance <= dnnHODLERBalance) {\r\n          if ( (lastLargestHODLER != dnnHODLER) ||\r\n              (lastLargestHODLER == dnnHODLER && lastLargestHODLERBalance < dnnHODLERBalance)\r\n          ) {\r\n              largestHODLERBalance = dnnHODLERBalance;\r\n              largestHODLERAddress = dnnHODLER;\r\n              emit NEWLARGESTHODLER(msg.sender, dnnHODLERBalance);\r\n          }\r\n      }\r\n\r\n      emit HODLER(msg.sender, dnnHODLERBalance);\r\n\r\n      if (msg.value > 0) {\r\n          owner.transfer(msg.value);\r\n      }\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"dnnToReward\",\"type\":\"uint256\"},{\"name\":\"allocationType\",\"type\":\"uint8\"}],\"name\":\"decideWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largestHODLERBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastLargestHODLERBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastLargestHODLER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largestHODLERAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dnnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dnnBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dnnWon\",\"type\":\"uint256\"}],\"name\":\"WINNER\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dnnBalance\",\"type\":\"uint256\"}],\"name\":\"HODLER\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dnnBalance\",\"type\":\"uint256\"}],\"name\":\"NEWLARGESTHODLER\",\"type\":\"event\"}]","ContractName":"DNNHODLGame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://95dd21e40a625e0b58fc1a1af29def723af109a5e9ea0f8fb59cf91bb2557a89"}]}