{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n* This contract implements the ERC721 standard and provides services for DigiRights platform \r\n*/\r\ninterface ERC721 {\r\n    \r\n    /*\r\n    * Mandatory functions of ERC721 standard\r\n    */\r\n    function totalSupply() external view returns (uint256 total);\r\n    function balanceOf(bytes32 _owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (bytes32 owner);\r\n    function approve(bytes32 _from,bytes32 _to, uint256 _tokenId) external;\r\n    function transferFrom(bytes32 _from, bytes32 _to, uint256 _tokenId) external;\r\n\r\n        \r\n    /*\r\n    * Events \r\n    */\r\n    event Transfer(bytes32 from, bytes32 to, uint256 tokenId);\r\n    event Approval(bytes32 owner, bytes32 approved, uint256 tokenId);\r\n\r\n    // ERC-165 Compatibility\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract DigiRights is ERC721 {\r\n\r\n    string private NAME = \"Ionixx DigiRights\";\r\n    string private SYMBOL = \"INX DIGI\";\r\n\r\n    bytes4 constant InterfaceID_ERC165 =\r\n    bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n\r\n    bytes4 constant InterfaceID_ERC721 =\r\n    bytes4(keccak256(\"name()\")) ^\r\n    bytes4(keccak256(\"symbol()\")) ^\r\n    bytes4(keccak256(\"totalSupply()\")) ^\r\n    bytes4(keccak256(\"balanceOf(bytes32)\")) ^\r\n    bytes4(keccak256(\"ownerOf(uint256)\")) ^\r\n    bytes4(keccak256(\"approve(bytes32,uint256)\")) ^\r\n    bytes4(keccak256(\"transfer(bytes32,uint256)\")) ^\r\n    bytes4(keccak256(\"transferFrom(bytes32,bytes32,uint256)\")) ^\r\n    bytes4(keccak256(\"tokensOfOwner(bytes32)\"));\r\n\r\n    /*  @desc Metadata of the token implemented as a structure\r\n        @attributes owner: Creator of the Token\r\n        @attributes name: Name of the file\r\n        @attributes descripton: descripton of the file\r\n        @attributes file_hash: hash of the file\r\n    */\r\n    struct Token {\r\n        bytes32 owner;\r\n        string name;\r\n        string description;\r\n        string file_hash;\r\n        uint256 token_id;\r\n        uint256 timestamp;\r\n        string file_type;\r\n        string extension;\r\n    }\r\n\r\n    Token[] tokens;\r\n\r\n    mapping (uint256 => bytes32) public ownerOf;\r\n    mapping (bytes32 => uint256) ownerTokenCount;\r\n    mapping (uint256 => bytes32) public tokenIndexToApproved;   \r\n    mapping(string => bool) filehash;\r\n    \r\n    event Created(bytes32 owner, uint256 tokenId);\r\n    \r\n    \r\n \r\n    /*  @desc provides the name of the token\r\n        @return string: name of the token\r\n    */\r\n    function name() external view returns (string) {\r\n        return NAME;\r\n    }\r\n    \r\n    /*  @desc provides the symbol of the token\r\n        @return string: symbol of the token\r\n    */\r\n    function symbol() external view returns (string) {\r\n        return SYMBOL;\r\n    }\r\n    \r\n    /*  @desc provides the total supply limit of the token\r\n        @return uint256: total supply\r\n    */\r\n    function totalSupply() external view returns (uint256) {\r\n        return tokens.length;\r\n    }\r\n    \r\n    /*  @desc provides the total number of tokens owned by the user\r\n        @param _owner: owner hash\r\n        @return uint256: number of tokens\r\n    */\r\n    function balanceOf(bytes32 _owner) external view returns (uint256) {\r\n        return ownerTokenCount[_owner];\r\n    }\r\n    \r\n    /*  @desc provides the owner of the given token\r\n        @param _tokenId: token ID\r\n        @return uint256: number of tokens\r\n    */\r\n    function ownerOf(uint256 _tokenId) external view returns (bytes32 owner) {\r\n        owner = ownerOf[_tokenId];\r\n    }\r\n    \r\n    /*  @desc approves a user to use his/her token\r\n        @param _from: from hash\r\n        @param _to: to hash\r\n        @param _tokenId: token ID\r\n    */\r\n    function approve(bytes32 _from,bytes32 _to, uint256 _tokenId) external {\r\n        require(_owns(_from, _tokenId));\r\n\r\n        tokenIndexToApproved[_tokenId] = _to;\r\n        emit Approval(ownerOf[_tokenId], tokenIndexToApproved[_tokenId], _tokenId);\r\n    }\r\n    \r\n    /*  @desc transfers token from one hash to another hash when they have approval\r\n        @param _from: from hash\r\n        @param _to: to hash\r\n        @param _tokenId: token ID\r\n    */\r\n    function transferFrom(bytes32 _from, bytes32 _to, uint256 _tokenId) external {\r\n        require(_to.length != 0 );\r\n        require(_to != _from);\r\n        require(_owns(_from, _tokenId));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /*  @desc provides the tokens owned by an user\r\n        @param _owner: owner hash\r\n        @param tokenIds: token ID as array\r\n    */\r\n    function tokensOfOwner(bytes32 _owner) external view returns (uint256[]) {\r\n        uint256 balance = this.balanceOf(_owner);\r\n\r\n        if (balance == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](balance);\r\n            uint256 maxTokenId = this.totalSupply();\r\n            uint256 idx = 0;\r\n\r\n            uint256 tokenId;\r\n            for (tokenId = 0; tokenId <= maxTokenId; tokenId++) {\r\n                if (ownerOf[tokenId] == _owner) {\r\n                    result[idx] = tokenId;\r\n                    idx++;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n    }\r\n    \r\n    /*  @desc obtains ther token details\r\n        @param _owner: owner hash \r\n        @param _tokenId: token ID \r\n        @return owner: owner hash\r\n        @return name: file name\r\n        @return description: file description\r\n        @return hash: file hash\r\n    */\r\n    function getToken(bytes32 _owner,uint256 _tokenId) external view returns (bytes32 owner,string token_name,string description,string file_hash,\r\n        uint256 token_id,\r\n        uint256 timestamp,\r\n        string file_type,string extension) {\r\n        require(_owns(_owner,_tokenId) == true);\r\n        uint256 length = this.totalSupply();\r\n        require(_tokenId < length);\r\n        Token memory token = tokens[_tokenId];\r\n        owner = token.owner;\r\n        token_name = token.name;\r\n        description = token.description;\r\n        file_hash = token.file_hash;\r\n        token_id = token.token_id;\r\n        timestamp = token.timestamp;\r\n        file_type=token.file_type;\r\n        extension=token.extension;\r\n    }\r\n\r\n    /*  @desc checks if the contract supports interface\r\n        @param _interfaceID: interface ID \r\n        @return bool: flag if the interface is implemented or not\r\n    */\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n        return ((_interfaceID == InterfaceID_ERC165) || (_interfaceID == InterfaceID_ERC721));\r\n    }\r\n    \r\n    /*  @desc creates a new token and assigns it to the user\r\n        @param _from: from hash\r\n        @param name: file name\r\n        @param description: file description\r\n        @param hash: file hash\r\n    */\r\n    function createToken(bytes32 _from,string token_name,string description,string file_hash,string file_type , string extension) public {\r\n        require(_from.length != 0 );\r\n        require(filehash[file_hash] == false);\r\n        filehash[file_hash] = true;\r\n        mint(_from,token_name,description,file_hash ,file_type,extension);\r\n        \r\n    }\r\n    \r\n    /*\r\n    * Internal functions\r\n    */\r\n    function _owns(bytes32 _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return ownerOf[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _approvedFor(bytes32 _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return tokenIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _transfer(bytes32 _from, bytes32 _to, uint256 _tokenId) internal {\r\n        \r\n        ownerTokenCount[_to]++;\r\n        ownerOf[_tokenId] = _to;\r\n\r\n        if (_from.length != 0 ) {\r\n            ownerTokenCount[_from]--;\r\n            delete tokenIndexToApproved[_tokenId];\r\n        }\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n    \r\n    function mint(bytes32 owner,string token_name,string description,string hash,string file_type, string extension) internal {\r\n        Token memory token = Token({\r\n            owner:owner,\r\n            name:token_name,\r\n            description:description,\r\n            file_hash:hash,\r\n            file_type: file_type,\r\n            extension: extension,\r\n            token_id: this.totalSupply(),\r\n            timestamp:block.timestamp\r\n        });\r\n        uint256 tokenId =tokens.push(token) - 1;\r\n        emit Created(owner, tokenId);\r\n        _transfer(0, owner, tokenId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"bytes32\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"owner\",\"type\":\"bytes32\"},{\"name\":\"token_name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"file_hash\",\"type\":\"string\"},{\"name\":\"token_id\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"file_type\",\"type\":\"string\"},{\"name\":\"extension\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"bytes32\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"bytes32\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"bytes32\"},{\"name\":\"token_name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"file_hash\",\"type\":\"string\"},{\"name\":\"file_type\",\"type\":\"string\"},{\"name\":\"extension\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"bytes32\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DigiRights","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1b202a79da565dea1bb437283d5afd9ea12e27ed6a5a3d43fa67ab2e86b73f1c"}]}