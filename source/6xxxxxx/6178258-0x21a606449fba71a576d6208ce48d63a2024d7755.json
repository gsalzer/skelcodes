{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n/**\r\n* @title ICO CONTRACT\r\n* @dev ERC-20 Token Standard Compliant\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZepelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract token {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    }\r\n\r\n/**\r\n * @title admined\r\n * @notice This contract is administered\r\n */\r\ncontract admined {\r\n    address public admin; //Admin address is public\r\n\r\n    /**\r\n    * @dev This contructor takes the msg.sender as the first administer\r\n    */\r\n    constructor() internal {\r\n        admin = 0x6585b849371A40005F9dCda57668C832a5be1777; //Set initial admin to contract creator\r\n        emit Admined(admin);\r\n    }\r\n\r\n    /**\r\n    * @dev This modifier limits function execution to the admin\r\n    */\r\n    modifier onlyAdmin() { //A modifier to define admin-only functions\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice This function transfer the adminship of the contract to _newAdmin\r\n    * @param _newAdmin The new admin of the contract\r\n    */\r\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\r\n        admin = _newAdmin;\r\n        emit TransferAdminship(admin);\r\n    }\r\n\r\n    /**\r\n    * @dev Log Events\r\n    */\r\n    event TransferAdminship(address newAdminister);\r\n    event Admined(address administer);\r\n\r\n}\r\n\r\ncontract ICO is admined {\r\n\r\n    using SafeMath for uint256;\r\n    //This ico have these states\r\n    enum State {\r\n        stage1,\r\n        stage2,\r\n        stage3,\r\n        stage4,\r\n        stage5,\r\n        Successful\r\n    }\r\n    //public variables\r\n    State public state = State.stage1; //Set initial stage\r\n    uint256 public startTime = now;\r\n    uint256 public stage1Deadline = startTime.add(20 days);\r\n    uint256 public stage2Deadline = stage1Deadline.add(20 days);\r\n    uint256 public stage3Deadline = stage2Deadline.add(20 days);\r\n    uint256 public stage4Deadline = stage3Deadline.add(20 days);\r\n    uint256 public stage5Deadline = stage4Deadline.add(20 days);\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens\r\n    uint256 public stageDistributed;\r\n    uint256 public completedAt;\r\n    token public tokenReward;\r\n    address constant public creator = 0x6585b849371A40005F9dCda57668C832a5be1777;\r\n    string public version = '1';\r\n    uint256[5] rates = [2327,1551,1163,931,775];\r\n\r\n    mapping (address => address) public refLed;\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(address _creator);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n    event LogStageFinish(State _state, uint256 _distributed);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    /**\r\n    * @notice ICO constructor\r\n    * @param _addressOfTokenUsedAsReward is the token totalDistributed\r\n    */\r\n    constructor (token _addressOfTokenUsedAsReward ) public {\r\n\r\n        tokenReward = _addressOfTokenUsedAsReward;\r\n\r\n        emit LogFunderInitialized(creator);\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute(address _ref) public notFinished payable {\r\n\r\n        address referral = _ref;\r\n        uint256 referralBase = 0;\r\n        uint256 referralTokens = 0;\r\n        uint256 tokenBought = 0;\r\n\r\n        if(refLed[msg.sender] == 0){ //If no referral set yet\r\n          refLed[msg.sender] = referral; //Set referral to passed one\r\n        } else { //If not, then it was set previously\r\n          referral = refLed[msg.sender]; //A referral must not be changed\r\n        }\r\n\r\n        totalRaised = totalRaised.add(msg.value);\r\n\r\n        //Rate of exchange depends on stage\r\n        if (state == State.stage1){\r\n\r\n            tokenBought = msg.value.mul(rates[0]);\r\n\r\n        } else if (state == State.stage2){\r\n\r\n            tokenBought = msg.value.mul(rates[1]);\r\n\r\n        } else if (state == State.stage3){\r\n\r\n            tokenBought = msg.value.mul(rates[2]);\r\n\r\n        } else if (state == State.stage4){\r\n\r\n            tokenBought = msg.value.mul(rates[3]);\r\n\r\n        } else if (state == State.stage5){\r\n\r\n            tokenBought = msg.value.mul(rates[4]);\r\n\r\n        }\r\n\r\n        //If there is any referral, the base calc will be made with this value\r\n        referralBase = tokenBought;\r\n\r\n        //2% Bonus Calc\r\n        if(msg.value >= 5 ether ){\r\n          tokenBought = tokenBought.mul(102);\r\n          tokenBought = tokenBought.div(100); //1.02 = +2%\r\n        }\r\n\r\n        totalDistributed = totalDistributed.add(tokenBought);\r\n        stageDistributed = stageDistributed.add(tokenBought);\r\n\r\n        tokenReward.transfer(msg.sender, tokenBought);\r\n\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        emit LogContributorsPayout(msg.sender, tokenBought);\r\n\r\n\r\n        if (referral != address(0) && referral != msg.sender){\r\n\r\n            referralTokens = referralBase.div(20); // 100% / 20 = 5%\r\n            totalDistributed = totalDistributed.add(referralTokens);\r\n            stageDistributed = stageDistributed.add(referralTokens);\r\n\r\n            tokenReward.transfer(referral, referralTokens);\r\n\r\n            emit LogContributorsPayout(referral, referralTokens);\r\n        }\r\n\r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    /**\r\n    * @notice check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n\r\n        if(now > stage5Deadline && state!=State.Successful ){ //if we reach ico deadline and its not Successful yet\r\n\r\n            emit LogStageFinish(state,stageDistributed);\r\n\r\n            state = State.Successful; //ico becomes Successful\r\n            completedAt = now; //ICO is complete\r\n\r\n            emit LogFundingSuccessful(totalRaised); //we log the finish\r\n            finished(); //and execute closure\r\n\r\n        } else if(state == State.stage1 && now > stage1Deadline){\r\n\r\n            emit LogStageFinish(state,stageDistributed);\r\n\r\n            state = State.stage2;\r\n            stageDistributed = 0;\r\n\r\n        } else if(state == State.stage2 && now > stage2Deadline){\r\n\r\n            emit LogStageFinish(state,stageDistributed);\r\n\r\n            state = State.stage3;\r\n            stageDistributed = 0;\r\n\r\n        } else if(state == State.stage3 && now > stage3Deadline){\r\n\r\n            emit LogStageFinish(state,stageDistributed);\r\n\r\n            state = State.stage4;\r\n            stageDistributed = 0;\r\n\r\n        } else if(state == State.stage4 && now > stage4Deadline){\r\n\r\n            emit LogStageFinish(state,stageDistributed);\r\n\r\n            state = State.stage5;\r\n            stageDistributed = 0;\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice closure handler\r\n    */\r\n    function finished() public { //When finished eth are transfered to creator\r\n\r\n        require(state == State.Successful);\r\n        uint256 remanent = tokenReward.balanceOf(this);\r\n\r\n        creator.transfer(address(this).balance);\r\n        tokenReward.transfer(creator,remanent);\r\n\r\n        emit LogBeneficiaryPaid(creator);\r\n        emit LogContributorsPayout(creator, remanent);\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim any token stuck on contract\r\n    */\r\n    function claimTokens(token _address) onlyAdmin public{\r\n        require(state == State.Successful); //Only when sale finish\r\n\r\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\r\n        _address.transfer(admin,remainder); //Transfer tokens to admin\r\n\r\n    }\r\n\r\n    /*\r\n    * @dev direct payments doesn't handle referral system\r\n    * so it call contribute with referral 0x0000000000000000000000000000000000000000\r\n    */\r\n\r\n    function () public payable {\r\n\r\n        contribute(address(0));\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage5Deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refLed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage3Deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage4Deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage2Deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage1Deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_distributed\",\"type\":\"uint256\"}],\"name\":\"LogStageFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdminister\",\"type\":\"address\"}],\"name\":\"TransferAdminship\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"administer\",\"type\":\"address\"}],\"name\":\"Admined\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a4f9fe0ad9b9765dc0364444332fa4c69923a6d3","Library":"","SwarmSource":"bzzr://1cab664859032b524468bc51abda762205d1cbde0f41d5f680fc5635b528f07f"}]}