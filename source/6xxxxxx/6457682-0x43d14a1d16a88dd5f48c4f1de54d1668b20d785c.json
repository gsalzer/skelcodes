{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/lib/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"only owner is able to call this function\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/lib/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/lib/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/lib/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/lib/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/lib/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/lib/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/lib/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale - modified from zeppelin-solidity library\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    MintableToken public tokenOnSale;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n\r\n    // event for token purchase logging\r\n    // purchaser who paid for the tokens\r\n    // beneficiary who got the tokens\r\n    // value weis paid for purchase\r\n    // amount amount of tokens purchased\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    function initCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n        require(\r\n            startTime == 0 && endTime == 0 && rate == 0 && wallet == address(0),\r\n            \"Global variables must be empty when initializing crowdsale!\"\r\n        );\r\n        require(_startTime >= now, \"_startTime must be more than current time!\");\r\n        require(_endTime >= _startTime, \"_endTime must be more than _startTime!\");\r\n        require(_wallet != address(0), \"_wallet parameter must not be empty!\");\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/FinalizableCrowdsale.sol\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    emit Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n\r\n// File: contracts/lib/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/CompanyToken.sol\r\n\r\n/**\r\n * @title CompanyToken contract - ERC20 compatible token contract with customized token parameters.\r\n * @author Gustavo Guimaraes - <gustavo@starbase.co>\r\n */\r\ncontract CompanyToken is PausableToken, MintableToken {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    /**\r\n     * @dev Contract constructor function\r\n     * @param _name Token name\r\n     * @param _symbol Token symbol - up to 4 characters\r\n     * @param _decimals Decimals for token\r\n     */\r\n    constructor(string _name, string _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        pause();\r\n    }\r\n}\r\n\r\n// File: contracts/Whitelist.sol\r\n\r\n/**\r\n * @title Whitelist - crowdsale whitelist contract\r\n * @author Gustavo Guimaraes - <gustavo@starbase.co>\r\n */\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) public allowedAddresses;\r\n\r\n    event WhitelistUpdated(uint256 timestamp, string operation, address indexed member);\r\n\r\n    /**\r\n    * @dev Adds single address to whitelist.\r\n    * @param _address Address to be added to the whitelist\r\n    */\r\n    function addToWhitelist(address _address) external onlyOwner {\r\n        allowedAddresses[_address] = true;\r\n        emit WhitelistUpdated(now, \"Added\", _address);\r\n    }\r\n\r\n    /**\r\n     * @dev add various whitelist addresses\r\n     * @param _addresses Array of ethereum addresses\r\n     */\r\n    function addManyToWhitelist(address[] _addresses) external onlyOwner {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            allowedAddresses[_addresses[i]] = true;\r\n            emit WhitelistUpdated(now, \"Added\", _addresses[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev remove whitelist addresses\r\n     * @param _addresses Array of ethereum addresses\r\n     */\r\n    function removeManyFromWhitelist(address[] _addresses) public onlyOwner {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            allowedAddresses[_addresses[i]] = false;\r\n            emit WhitelistUpdated(now, \"Removed\", _addresses[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/TokenSaleInterface.sol\r\n\r\n/**\r\n * @title TokenSale contract interface\r\n */\r\ninterface TokenSaleInterface {\r\n    function init\r\n    (\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        address _whitelist,\r\n        address _starToken,\r\n        address _companyToken,\r\n        uint256 _rate,\r\n        uint256 _starRate,\r\n        address _wallet,\r\n        uint256 _crowdsaleCap,\r\n        bool    _isWeiAccepted\r\n    )\r\n    external;\r\n}\r\n\r\n// File: contracts/TokenSale.sol\r\n\r\n/**\r\n * @title Token Sale contract - crowdsale of company tokens.\r\n * @author Gustavo Guimaraes - <gustavo@starbase.co>\r\n */\r\ncontract TokenSale is FinalizableCrowdsale, Pausable {\r\n    uint256 public crowdsaleCap;\r\n    // amount of raised money in STAR\r\n    uint256 public starRaised;\r\n    uint256 public starRate;\r\n    address public initialTokenOwner;\r\n    bool public isWeiAccepted;\r\n\r\n    // external contracts\r\n    Whitelist public whitelist;\r\n    StandardToken public starToken;\r\n\r\n    event TokenRateChanged(uint256 previousRate, uint256 newRate);\r\n    event TokenStarRateChanged(uint256 previousStarRate, uint256 newStarRate);\r\n    event TokenPurchaseWithStar(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @dev initialization function\r\n     * @param _startTime The timestamp of the beginning of the crowdsale\r\n     * @param _endTime Timestamp when the crowdsale will finish\r\n     * @param _whitelist contract containing the whitelisted addresses\r\n     * @param _starToken STAR token contract address\r\n     * @param _companyToken ERC20 CompanyToken contract address\r\n     * @param _rate The token rate per ETH\r\n     * @param _starRate The token rate per STAR\r\n     * @param _wallet Multisig wallet that will hold the crowdsale funds.\r\n     * @param _crowdsaleCap Cap for the token sale\r\n     * @param _isWeiAccepted Bool for acceptance of ether in token sale\r\n     */\r\n    function init(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        address _whitelist,\r\n        address _starToken,\r\n        address _companyToken,\r\n        uint256 _rate,\r\n        uint256 _starRate,\r\n        address _wallet,\r\n        uint256 _crowdsaleCap,\r\n        bool    _isWeiAccepted\r\n    )\r\n        external\r\n    {\r\n        require(\r\n            whitelist == address(0) &&\r\n            starToken == address(0) &&\r\n            rate == 0 &&\r\n            starRate == 0 &&\r\n            tokenOnSale == address(0) &&\r\n            crowdsaleCap == 0,\r\n            \"Global variables should not have been set before!\"\r\n        );\r\n\r\n        require(\r\n            _whitelist != address(0) &&\r\n            _starToken != address(0) &&\r\n            !(_rate == 0 && _starRate == 0) &&\r\n            _companyToken != address(0) &&\r\n            _crowdsaleCap != 0,\r\n            \"Parameter variables cannot be empty!\"\r\n        );\r\n\r\n        initCrowdsale(_startTime, _endTime, _rate, _wallet);\r\n        tokenOnSale = CompanyToken(_companyToken);\r\n        whitelist = Whitelist(_whitelist);\r\n        starToken = StandardToken(_starToken);\r\n        starRate = _starRate;\r\n        isWeiAccepted = _isWeiAccepted;\r\n        owner = tx.origin;\r\n\r\n        initialTokenOwner = CompanyToken(tokenOnSale).owner();\r\n        uint256 tokenDecimals = CompanyToken(tokenOnSale).decimals();\r\n        crowdsaleCap = _crowdsaleCap.mul(10 ** tokenDecimals);\r\n\r\n        require(CompanyToken(tokenOnSale).paused(), \"Company token must be paused upon initialization!\");\r\n    }\r\n\r\n    modifier isWhitelisted(address beneficiary) {\r\n        require(whitelist.allowedAddresses(beneficiary), \"Beneficiary not whitelisted!\");\r\n        _;\r\n    }\r\n\r\n    modifier crowdsaleIsTokenOwner() {\r\n        require(tokenOnSale.owner() == address(this), \"The token owner must be contract address!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev override fallback function. cannot use it\r\n     */\r\n    function () external payable {\r\n        revert(\"No fallback function defined!\");\r\n    }\r\n\r\n    /**\r\n     * @dev change crowdsale ETH rate\r\n     * @param newRate Figure that corresponds to the new ETH rate per token\r\n     */\r\n    function setRate(uint256 newRate) external onlyOwner {\r\n        require(newRate != 0, \"ETH rate must be more than 0\");\r\n\r\n        emit TokenRateChanged(rate, newRate);\r\n        rate = newRate;\r\n    }\r\n\r\n    /**\r\n     * @dev change crowdsale STAR rate\r\n     * @param newStarRate Figure that corresponds to the new STAR rate per token\r\n     */\r\n    function setStarRate(uint256 newStarRate) external onlyOwner {\r\n        require(newStarRate != 0, \"Star rate must be more than 0!\");\r\n\r\n        emit TokenStarRateChanged(starRate, newStarRate);\r\n        starRate = newStarRate;\r\n    }\r\n\r\n    /**\r\n     * @dev allows sale to receive wei or not\r\n     */\r\n    function setIsWeiAccepted(bool _isWeiAccepted) external onlyOwner {\r\n        require(rate != 0, \"When accepting Wei you need to set a conversion rate!\");\r\n        isWeiAccepted = _isWeiAccepted;\r\n    }\r\n\r\n    /**\r\n     * @dev function that allows token purchases with STAR\r\n     * @param beneficiary Address of the purchaser\r\n     */\r\n    function buyTokens(address beneficiary)\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        isWhitelisted(beneficiary)\r\n        crowdsaleIsTokenOwner\r\n    {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase() && tokenOnSale.totalSupply() < crowdsaleCap);\r\n\r\n        if (!isWeiAccepted) {\r\n            require(msg.value == 0);\r\n        } else if (msg.value > 0) {\r\n            buyTokensWithWei(beneficiary);\r\n        }\r\n\r\n        // beneficiary must allow TokenSale address to transfer star tokens on its behalf\r\n        uint256 starAllocationToTokenSale = starToken.allowance(beneficiary, this);\r\n        if (starAllocationToTokenSale > 0) {\r\n            // calculate token amount to be created\r\n            uint256 tokens = starAllocationToTokenSale.mul(starRate);\r\n\r\n            //remainder logic\r\n            if (tokenOnSale.totalSupply().add(tokens) > crowdsaleCap) {\r\n                tokens = crowdsaleCap.sub(tokenOnSale.totalSupply());\r\n\r\n                starAllocationToTokenSale = tokens.div(starRate);\r\n            }\r\n\r\n            // update state\r\n            starRaised = starRaised.add(starAllocationToTokenSale);\r\n\r\n            tokenOnSale.mint(beneficiary, tokens);\r\n            emit TokenPurchaseWithStar(msg.sender, beneficiary, starAllocationToTokenSale, tokens);\r\n\r\n            // forward funds\r\n            starToken.transferFrom(beneficiary, wallet, starAllocationToTokenSale);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev function that allows token purchases with Wei\r\n     * @param beneficiary Address of the purchaser\r\n     */\r\n    function buyTokensWithWei(address beneficiary)\r\n        internal\r\n    {\r\n        uint256 weiAmount = msg.value;\r\n        uint256 weiRefund = 0;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        //remainder logic\r\n        if (tokenOnSale.totalSupply().add(tokens) > crowdsaleCap) {\r\n            tokens = crowdsaleCap.sub(tokenOnSale.totalSupply());\r\n            weiAmount = tokens.div(rate);\r\n\r\n            weiRefund = msg.value.sub(weiAmount);\r\n        }\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        tokenOnSale.mint(beneficiary, tokens);\r\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        wallet.transfer(weiAmount);\r\n        if (weiRefund > 0) {\r\n            msg.sender.transfer(weiRefund);\r\n        }\r\n    }\r\n\r\n    // override Crowdsale#hasEnded to add cap logic\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        if (tokenOnSale.totalSupply() >= crowdsaleCap) {\r\n            return true;\r\n        }\r\n\r\n        return super.hasEnded();\r\n    }\r\n\r\n    /**\r\n     * @dev override Crowdsale#validPurchase\r\n     * @return true if the transaction can buy tokens\r\n     */\r\n    function validPurchase() internal view returns (bool) {\r\n        return now >= startTime && now <= endTime;\r\n    }\r\n\r\n    /**\r\n     * @dev finalizes crowdsale\r\n     */\r\n    function finalization() internal {\r\n        if (crowdsaleCap > tokenOnSale.totalSupply()) {\r\n            uint256 remainingTokens = crowdsaleCap.sub(tokenOnSale.totalSupply());\r\n\r\n            tokenOnSale.mint(wallet, remainingTokens);\r\n        }\r\n\r\n        tokenOnSale.transferOwnership(initialTokenOwner);\r\n        super.finalization();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"starRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"initCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_whitelist\",\"type\":\"address\"},{\"name\":\"_starToken\",\"type\":\"address\"},{\"name\":\"_companyToken\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_starRate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_crowdsaleCap\",\"type\":\"uint256\"},{\"name\":\"_isWeiAccepted\",\"type\":\"bool\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isWeiAccepted\",\"type\":\"bool\"}],\"name\":\"setIsWeiAccepted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStarRate\",\"type\":\"uint256\"}],\"name\":\"setStarRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWeiAccepted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"TokenRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousStarRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newStarRate\",\"type\":\"uint256\"}],\"name\":\"TokenStarRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchaseWithStar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://23425bc047e88fc8fd53e48115d333c2b6bf3505fa967c4675f3fc727b32e971"}]}