{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract IcoStorage is Ownable {\r\n\r\n    struct Project {\r\n        bool isValue; // We now can know this is an initialized struct\r\n        string name; // ICO company name\r\n        address tokenAddress; // Token's smart contract address\r\n        bool active;    // if true, this contract can be shown\r\n    }\r\n\r\n    mapping(address => Project) public projects;\r\n    address[] public projectsAccts;\r\n\r\n    function createProject(\r\n        string _name,\r\n        address _icoContractAddress,\r\n        address _tokenAddress\r\n    ) public onlyOwner returns (bool) {\r\n        Project storage project  = projects[_icoContractAddress]; // Create new project\r\n\r\n        project.isValue = true; // project is initilaized and not empty\r\n        project.name = _name;\r\n        project.tokenAddress = _tokenAddress;\r\n        project.active = true;\r\n\r\n        projectsAccts.push(_icoContractAddress);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getProject(address _icoContractAddress) public view returns (string, address, bool) {\r\n        require(projects[_icoContractAddress].isValue);\r\n\r\n        return (\r\n            projects[_icoContractAddress].name,\r\n            projects[_icoContractAddress].tokenAddress,\r\n            projects[_icoContractAddress].active\r\n        );\r\n    }\r\n\r\n    function activateProject(address _icoContractAddress) public onlyOwner returns (bool) {\r\n        Project storage project  = projects[_icoContractAddress];\r\n        require(project.isValue); // Check project exists\r\n\r\n        project.active = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function deactivateProject(address _icoContractAddress) public onlyOwner returns (bool) {\r\n        Project storage project  = projects[_icoContractAddress];\r\n        require(project.isValue); // Check project exists\r\n\r\n        project.active = false;\r\n\r\n        return false;\r\n    }\r\n\r\n    function getProjects() public view returns (address[]) {\r\n        return projectsAccts;\r\n    }\r\n\r\n    function countProjects() public view returns (uint256) {\r\n        return projectsAccts.length;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_icoContractAddress\",\"type\":\"address\"}],\"name\":\"deactivateProject\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectsAccts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"projects\",\"outputs\":[{\"name\":\"isValue\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_icoContractAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"createProject\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoContractAddress\",\"type\":\"address\"}],\"name\":\"activateProject\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProjects\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countProjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_icoContractAddress\",\"type\":\"address\"}],\"name\":\"getProject\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"IcoStorage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://130a08a358cab40252f101bfef72ab6e7329804d0b95e78acaf7dd5568cb6932"}]}