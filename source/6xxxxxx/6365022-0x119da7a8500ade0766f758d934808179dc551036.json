{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/// @notice The BrokerVerifier interface defines the functions that a settlement\r\n/// layer's broker verifier contract must implement.\r\ninterface BrokerVerifier {\r\n\r\n    /// @notice The function signature that will be called when a trader opens\r\n    /// an order.\r\n    ///\r\n    /// @param _trader The trader requesting the withdrawal.\r\n    /// @param _signature The 65-byte signature from the broker.\r\n    /// @param _orderID The 32-byte order ID.\r\n    function verifyOpenSignature(\r\n        address _trader,\r\n        bytes _signature,\r\n        bytes32 _orderID\r\n    ) external returns (bool);\r\n}\r\n\r\n/// @notice The Settlement interface defines the functions that a settlement\r\n/// layer must implement.\r\n/// Docs: https://github.com/republicprotocol/republic-sol/blob/nightly/docs/05-settlement.md\r\ninterface Settlement {\r\n    function submitOrder(\r\n        bytes _details,\r\n        uint64 _settlementID,\r\n        uint64 _tokens,\r\n        uint256 _price,\r\n        uint256 _volume,\r\n        uint256 _minimumVolume\r\n    ) external;\r\n\r\n    function submissionGasPriceLimit() external view returns (uint256);\r\n\r\n    function settle(\r\n        bytes32 _buyID,\r\n        bytes32 _sellID\r\n    ) external;\r\n\r\n    /// @notice orderStatus should return the status of the order, which should\r\n    /// be:\r\n    ///     0  - Order not seen before\r\n    ///     1  - Order details submitted\r\n    ///     >1 - Order settled, or settlement no longer possible\r\n    function orderStatus(bytes32 _orderID) external view returns (uint8);\r\n}\r\n\r\n/// @notice SettlementRegistry allows a Settlement layer to register the\r\n/// contracts used for match settlement and for broker signature verification.\r\ncontract SettlementRegistry is Ownable {\r\n    string public VERSION; // Passed in as a constructor parameter.\r\n\r\n    struct SettlementDetails {\r\n        bool registered;\r\n        Settlement settlementContract;\r\n        BrokerVerifier brokerVerifierContract;\r\n    }\r\n\r\n    // Settlement IDs are 64-bit unsigned numbers\r\n    mapping(uint64 => SettlementDetails) public settlementDetails;\r\n\r\n    // Events\r\n    event LogSettlementRegistered(uint64 settlementID, Settlement settlementContract, BrokerVerifier brokerVerifierContract);\r\n    event LogSettlementUpdated(uint64 settlementID, Settlement settlementContract, BrokerVerifier brokerVerifierContract);\r\n    event LogSettlementDeregistered(uint64 settlementID);\r\n\r\n    /// @notice The contract constructor.\r\n    ///\r\n    /// @param _VERSION A string defining the contract version.\r\n    constructor(string _VERSION) public {\r\n        VERSION = _VERSION;\r\n    }\r\n\r\n    /// @notice Returns the settlement contract of a settlement layer.\r\n    function settlementRegistration(uint64 _settlementID) external view returns (bool) {\r\n        return settlementDetails[_settlementID].registered;\r\n    }\r\n\r\n    /// @notice Returns the settlement contract of a settlement layer.\r\n    function settlementContract(uint64 _settlementID) external view returns (Settlement) {\r\n        return settlementDetails[_settlementID].settlementContract;\r\n    }\r\n\r\n    /// @notice Returns the broker verifier contract of a settlement layer.\r\n    function brokerVerifierContract(uint64 _settlementID) external view returns (BrokerVerifier) {\r\n        return settlementDetails[_settlementID].brokerVerifierContract;\r\n    }\r\n\r\n    /// @param _settlementID A unique 64-bit settlement identifier.\r\n    /// @param _settlementContract The address to use for settling matches.\r\n    /// @param _brokerVerifierContract The decimals to use for verifying\r\n    ///        broker signatures.\r\n    function registerSettlement(uint64 _settlementID, Settlement _settlementContract, BrokerVerifier _brokerVerifierContract) public onlyOwner {\r\n        bool alreadyRegistered = settlementDetails[_settlementID].registered;\r\n        \r\n        settlementDetails[_settlementID] = SettlementDetails({\r\n            registered: true,\r\n            settlementContract: _settlementContract,\r\n            brokerVerifierContract: _brokerVerifierContract\r\n        });\r\n\r\n        if (alreadyRegistered) {\r\n            emit LogSettlementUpdated(_settlementID, _settlementContract, _brokerVerifierContract);\r\n        } else {\r\n            emit LogSettlementRegistered(_settlementID, _settlementContract, _brokerVerifierContract);\r\n        }\r\n    }\r\n\r\n    /// @notice Deregisteres a settlement layer, clearing the details.\r\n    /// @param _settlementID The unique 64-bit settlement identifier.\r\n    function deregisterSettlement(uint64 _settlementID) external onlyOwner {\r\n        require(settlementDetails[_settlementID].registered, \"not registered\");\r\n\r\n        delete settlementDetails[_settlementID];\r\n\r\n        emit LogSettlementDeregistered(_settlementID);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_settlementID\",\"type\":\"uint64\"}],\"name\":\"deregisterSettlement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settlementID\",\"type\":\"uint64\"}],\"name\":\"settlementContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settlementID\",\"type\":\"uint64\"}],\"name\":\"brokerVerifierContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settlementID\",\"type\":\"uint64\"},{\"name\":\"_settlementContract\",\"type\":\"address\"},{\"name\":\"_brokerVerifierContract\",\"type\":\"address\"}],\"name\":\"registerSettlement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"settlementDetails\",\"outputs\":[{\"name\":\"registered\",\"type\":\"bool\"},{\"name\":\"settlementContract\",\"type\":\"address\"},{\"name\":\"brokerVerifierContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settlementID\",\"type\":\"uint64\"}],\"name\":\"settlementRegistration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_VERSION\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"settlementID\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"settlementContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"brokerVerifierContract\",\"type\":\"address\"}],\"name\":\"LogSettlementRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"settlementID\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"settlementContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"brokerVerifierContract\",\"type\":\"address\"}],\"name\":\"LogSettlementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"settlementID\",\"type\":\"uint64\"}],\"name\":\"LogSettlementDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SettlementRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000d6d61696e6e65742d312e302e3000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c4db9beffdc7a11d7646ad495f9c02e96387b744eff83bd55b9ae47cd21c7383"}]}