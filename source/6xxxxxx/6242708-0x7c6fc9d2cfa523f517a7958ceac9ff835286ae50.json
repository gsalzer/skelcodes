{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ninterface WETH9 {\r\n  function approve(address spender, uint amount) public returns(bool);\r\n  function deposit() public payable;\r\n}\r\n\r\ninterface DutchExchange {\r\n  function deposit(address tokenAddress,uint amount) public returns(uint);\r\n  function postBuyOrder(address sellToken,address buyToken,uint auctionIndex,uint amount) public returns (uint);\r\n  function getAuctionIndex(address token1,address token2) public view returns(uint);\r\n  function claimBuyerFunds(\r\n        address sellToken,\r\n        address buyToken,\r\n        address user,\r\n        uint auctionIndex\r\n    ) public returns(uint returned, uint frtsIssued);\r\n  function withdraw(address tokenAddress,uint amount) public returns (uint);\r\n  function getCurrentAuctionPrice(\r\n      address sellToken,\r\n      address buyToken,\r\n      uint auctionIndex\r\n  ) public view returns (uint num, uint den);\r\n\r\n}\r\n\r\ninterface ERC20 {\r\n  function transfer(address recipient, uint amount) public returns(bool);\r\n  function approve(address spender, uint amount) public returns(bool);\r\n}\r\n\r\ninterface KyberNetwork {\r\n    function trade(\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId\r\n    )\r\n        public\r\n        payable\r\n        returns(uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\r\n        returns (uint expectedRate, uint slippageRate);\r\n}\r\n\r\n\r\ncontract DutchReserve {\r\n  DutchExchange constant DUTCH_EXCHANGE = DutchExchange(0xaf1745c0f8117384Dfa5FFf40f824057c70F2ed3);\r\n  WETH9 constant WETH = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n  KyberNetwork constant KYBER = KyberNetwork(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n  ERC20 constant ETH = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n  ERC20 constant RDN = ERC20(0x255Aa6DF07540Cb5d3d297f0D0D4D84cb52bc8e6);\r\n\r\n  function DutchReserve() public {\r\n    require(WETH.approve(DUTCH_EXCHANGE,2**255));\r\n    enableToken(RDN);\r\n  }\r\n\r\n  function enableToken(ERC20 token) public {\r\n      require(token.approve(KYBER,2**255));\r\n  }\r\n\r\n  function getGnosisInvRate(uint ethAmount) public view returns(uint) {\r\n      ethAmount;\r\n      \r\n      uint auctionIndex = DUTCH_EXCHANGE.getAuctionIndex(RDN,WETH);\r\n      uint num; uint den;\r\n      (num,den) = DUTCH_EXCHANGE.getCurrentAuctionPrice(RDN,WETH,auctionIndex);\r\n\r\n      return (num * 10**18 * 1000) / (den * 995);\r\n  }\r\n\r\n  function getKyberRate(uint rdnAmount) public view returns(uint) {\r\n      uint rate; uint slippageRate;\r\n      (rate,slippageRate) = KYBER.getExpectedRate(RDN,ETH,rdnAmount);\r\n\r\n      return rate;\r\n  }\r\n\r\n  function isArb(uint ethAmount, uint bpsDiff) public view returns(bool) {\r\n      uint gnosisRate = getGnosisInvRate(ethAmount);\r\n      uint gnosisRateAdj = (gnosisRate * (10000 + bpsDiff))/10000;\r\n      uint rdnAmount = ethAmount * 10**18 / gnosisRateAdj;\r\n      uint kyberRate = getKyberRate(rdnAmount);\r\n\r\n\r\n      return gnosisRateAdj <= kyberRate;\r\n  }\r\n\r\n  function buyToken(bool onlyIfArb) payable public {\r\n    uint auctionIndex = DUTCH_EXCHANGE.getAuctionIndex(RDN,WETH);\r\n    uint minRate = onlyIfArb ? getGnosisInvRate(msg.value) : 1;\r\n    WETH.deposit.value(msg.value)();\r\n    DUTCH_EXCHANGE.deposit(WETH, msg.value);\r\n    DUTCH_EXCHANGE.postBuyOrder(RDN,WETH,auctionIndex,msg.value);\r\n    uint amount; uint first;\r\n    (amount,first) = DUTCH_EXCHANGE.claimBuyerFunds(RDN,WETH,this,auctionIndex);\r\n    DUTCH_EXCHANGE.withdraw(RDN,amount);\r\n    require(KYBER.trade(RDN,amount,ETH,msg.sender,2**255,minRate,this) > 0) ;\r\n    //RDN.transfer(msg.sender,amount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getGnosisInvRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"onlyIfArb\",\"type\":\"bool\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"enableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"name\":\"bpsDiff\",\"type\":\"uint256\"}],\"name\":\"isArb\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rdnAmount\",\"type\":\"uint256\"}],\"name\":\"getKyberRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DutchReserve","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0f016576ea9187fab7ef4b94b8de0fb8e6c1731f168099ea47b0a123d0f89c00"}]}