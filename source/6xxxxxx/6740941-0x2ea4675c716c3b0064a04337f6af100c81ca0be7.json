{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary WadMath {\r\n  uint constant WAD = 10 ** 18;\r\n\r\n  function wmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\r\n  }\r\n\r\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Owned\r\n */\r\n\r\n contract Owned {\r\n\r\n  address public _owner;\r\n  address public _ownerCandidate;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  /**\r\n   * @dev The constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == _owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Offer transferring ownership of the contract to a candidate. The ownership is not transferred\r\n      until the candidate has accepted it.\r\n   * @param candidate The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address candidate) public onlyOwner {\r\n    _ownerCandidate = candidate;\r\n  }\r\n\r\n  /**\r\n   * @dev Accept ownership of the contract. The control of the contract is transferred to the candidate. \r\n   */\r\n\r\n  function acceptOwnership() public {\r\n    require(msg.sender == _ownerCandidate);\r\n    emit OwnershipTransferred(_owner, _ownerCandidate);\r\n    _owner = _ownerCandidate;\r\n    _ownerCandidate = address(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Owned {\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n\r\n  bool _paused;\r\n\r\n  constructor() internal {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Return whether the contract is paused.\r\n   */\r\n  function paused() public view returns (bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by the pauser to pause methods protected by the whenPaused modifier.\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Called by the pauser to unpause.\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token implementation.\r\n */\r\ncontract ERC20 is Pausable {\r\n  using SafeMath for uint;\r\n\r\n  string _name;\r\n  string _symbol;\r\n  uint8 _decimals = 18;\r\n\r\n  uint _totalSupply;\r\n\r\n  mapping (address => uint) _balanceOf;\r\n  mapping (address => mapping (address => uint)) _allowance;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n  constructor(string name, string symbol) public {\r\n    _totalSupply = 0;\r\n    _name = name;\r\n    _symbol = symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Get the name of the token.\r\n   */\r\n\r\n  function name() public view returns (string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Get the symbol of the token.\r\n   */\r\n\r\n  function symbol() public view returns (string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Get the number of decimals used by the token.\r\n   */\r\n\r\n  function decimals() public view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Get the total amount of tokens ever minted, excluding those which were transferred to address 0x0.\r\n   */\r\n\r\n  function totalSupply() public view returns (uint) {\r\n    return _totalSupply.sub(_balanceOf[address(0)]);\r\n  }\r\n\r\n  /**\r\n   * @dev Get the balance of the specified address.\r\n   * @param owner The address to query the balance of.\r\n   * @return The amount owned by the passed address.\r\n   */\r\n\r\n  function balanceOf(address owner) public view returns (uint256 balance) {\r\n    return _balanceOf[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return The amount of tokens still available for the spender.\r\n   */\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256 remaining) {\r\n    return _allowance[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that executes a transfer from one address to antoher address.\r\n   * @param to The address to transfer to.\r\n   * @param value The amount to be transferred.\r\n   */\r\n\r\n  function _transfer(address from, address to, uint value) internal {\r\n    require(_balanceOf[from] >= value);\r\n    _balanceOf[from] = _balanceOf[from].sub(value);\r\n    _balanceOf[to] = _balanceOf[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens to a specified address.\r\n   * @param to The address to transfer to.\r\n   * @param value The amount to be transferred.\r\n   */\r\n \r\n  function transfer(address to, uint value) public whenNotPaused returns (bool success) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another. The transfer must have been approved.\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value The amount of tokens to be transferred\r\n   */\r\n\r\n  function transferFrom(address from, address to, uint value) public whenNotPaused returns (bool success) {\r\n    require(value <= _allowance[from][msg.sender]);\r\n    _allowance[from][msg.sender] = _allowance[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n\r\n  function approve(address spender, uint value) public whenNotPaused returns (bool success) {\r\n    _allowance[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title TweetCoin\r\n * @dev An ERC20 token extended with the ability to purchase tokens using ETH. Tokens are\r\n           minted when purchasing.\r\n */\r\ncontract TweetCoin is ERC20 {\r\n  using SafeMath for uint;\r\n  using WadMath for uint;\r\n\r\n  /**\r\n   * @dev Inherit from ERC20, Owned and Pausable.\r\n   */\r\n\r\n  constructor() ERC20(\"TweetCoin\", \"TWC\") Owned() Pausable() public {}\r\n\r\n  /**\r\n   * @dev Logs a Purchase transaction.\r\n   *\r\n   * @param from The address of the account that supplied the ETH\r\n   * @param to The address of the account where the tokens were transferred\r\n   * @param eth The amount of ETH that was converted to tokens\r\n   * @param value The amount of tokens that were purchased\r\n   */\r\n\r\n  event Purchase(address indexed from, address indexed to, uint eth, uint value);\r\n\r\n  /**\r\n   * @dev The token multiplier is a decreasing function of the total amount of sold tokens:\r\n   \r\n      y = 1 + 1/(x/500ether + 1)\r\n   \r\n     where x is the _totalSupply and y is the multiplier.\r\n   \r\n   * @return The current token multiplier as a wad (uint representing an 18 decimal fixed point).\r\n   */\r\n\r\n  function tokenMultiplier() public view returns (uint tokens) {\r\n    return SafeMath.add(1 ether, WadMath.wdiv(1 ether, (_totalSupply.wdiv(500 ether)).add(1 ether)));\r\n  }\r\n\r\n  /**\r\n   * @dev Purchase tokens for a recepient. Allows to purchase for someone else (e.g. a contract).\r\n   *\r\n   * @param recepient The address of the recepient (can be a smart contract).\r\n   */\r\n\r\n  function buy(address recepient) payable public whenNotPaused returns (uint amount) {\r\n    amount = tokenMultiplier().wmul(msg.value);\r\n    _balanceOf[recepient] = _balanceOf[recepient].add(amount);\r\n    _totalSupply = _totalSupply.add(amount);\r\n    emit Purchase(msg.sender, recepient, msg.value, amount);\r\n\r\n    // ERC20: minting SHOULD emit the Transfer() event from 0x0\r\n    emit Transfer(0x0, recepient, amount);\r\n\r\n    return amount;\r\n  }\r\n\r\n  /**\r\n   * @dev Purchase tokens for oneself by simply transferring ETH to the contract.\r\n   */\r\n\r\n  function () payable public {\r\n    buy(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Logs a withdrawal transaction.\r\n   *\r\n   * @param recepient The address of the recepient of the withdrawn ETH\r\n   * @param amount The amount of ETH that was withdrawn\r\n   */\r\n\r\n  event Withdrawal(address indexed recepient, uint amount);\r\n\r\n  /**\r\n   * @dev Withdraw the ETH that was received when purchasing tokens.\r\n   *\r\n   * @param recepient The address of the recepient where the ETH will be transferred.\r\n   * @param amount The amount of ETH to withdraw.\r\n   */\r\n\r\n  function withdraw(address recepient, uint amount) public onlyOwner {\r\n    require(amount <= address(this).balance);\r\n    recepient.transfer(amount);\r\n    emit Withdrawal(recepient, amount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_ownerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMultiplier\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recepient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recepient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TweetCoin","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://84bab0ee5f6786fe7899910c9b4b0ee698c3f90181b2edd925485601361facdf"}]}