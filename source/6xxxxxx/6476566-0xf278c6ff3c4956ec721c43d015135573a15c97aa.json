{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/GodMode.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title God Mode\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev This contract provides a basic interface for God\r\n///  in a contract as well as the ability for God to pause\r\n///  the contract\r\ncontract GodMode {\r\n    /// @dev Is the contract paused?\r\n    bool public isPaused;\r\n\r\n    /// @dev God's address\r\n    address public god;\r\n\r\n    /// @dev Only God can run this function\r\n    modifier onlyGod()\r\n    {\r\n        require(god == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev This function can only be run while the contract\r\n    ///  is not paused\r\n    modifier notPaused()\r\n    {\r\n        require(!isPaused);\r\n        _;\r\n    }\r\n\r\n    /// @dev This event is fired when the contract is paused\r\n    event GodPaused();\r\n\r\n    /// @dev This event is fired when the contract is unpaused\r\n    event GodUnpaused();\r\n\r\n    constructor() public\r\n    {\r\n        // Make the creator of the contract God\r\n        god = msg.sender;\r\n    }\r\n\r\n    /// @dev God can change the address of God\r\n    /// @param _newGod The new address for God\r\n    function godChangeGod(address _newGod) public onlyGod\r\n    {\r\n        god = _newGod;\r\n    }\r\n\r\n    /// @dev God can pause the game\r\n    function godPause() public onlyGod\r\n    {\r\n        isPaused = true;\r\n\r\n        emit GodPaused();\r\n    }\r\n\r\n    /// @dev God can unpause the game\r\n    function godUnpause() public onlyGod\r\n    {\r\n        isPaused = false;\r\n\r\n        emit GodUnpaused();\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthAbstractInterface.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title King of Eth Abstract Interface\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Abstract interface contract for titles and taxes\r\ncontract KingOfEthAbstractInterface {\r\n    /// @dev The address of the current King\r\n    address public king;\r\n\r\n    /// @dev The address of the current Wayfarer\r\n    address public wayfarer;\r\n\r\n    /// @dev Anyone can pay taxes\r\n    function payTaxes() public payable;\r\n}\r\n\r\n// File: contracts/KingOfEthReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Functionality to allow contracts to reference the king contract\r\ncontract KingOfEthReferencer is GodMode {\r\n    /// @dev The address of the king contract\r\n    address public kingOfEthContract;\r\n\r\n    /// @dev Only the king contract can run this\r\n    modifier onlyKingOfEthContract()\r\n    {\r\n        require(kingOfEthContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can change the king contract\r\n    /// @param _kingOfEthContract The new address\r\n    function godSetKingOfEthContract(address _kingOfEthContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        kingOfEthContract = _kingOfEthContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthEthExchangeReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Resource-to-ETH Exchange Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to interface with the\r\n///  ETH exchange contract\r\ncontract KingOfEthEthExchangeReferencer is GodMode {\r\n    /// @dev Address of the ETH exchange contract\r\n    address public ethExchangeContract;\r\n\r\n    /// @dev Only the ETH exchange contract may run this function\r\n    modifier onlyEthExchangeContract()\r\n    {\r\n        require(ethExchangeContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God may set the ETH exchange contract's address\r\n    /// @dev _ethExchangeContract The new address\r\n    function godSetEthExchangeContract(address _ethExchangeContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        ethExchangeContract = _ethExchangeContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthResourceExchangeReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Resource-to-Resource Exchange Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to interface with the\r\n///  resource-to-resource contract\r\ncontract KingOfEthResourceExchangeReferencer is GodMode {\r\n    /// @dev Address of the resource-to-resource contract\r\n    address public resourceExchangeContract;\r\n\r\n    /// @dev Only the resource-to-resource contract may run this function\r\n    modifier onlyResourceExchangeContract()\r\n    {\r\n        require(resourceExchangeContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God may set the resource-to-resource contract's address\r\n    /// @dev _resourceExchangeContract The new address\r\n    function godSetResourceExchangeContract(address _resourceExchangeContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        resourceExchangeContract = _resourceExchangeContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthExchangeReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/// @title King of Eth: Exchange Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to interface with the exchange contract\r\ncontract KingOfEthExchangeReferencer is\r\n      GodMode\r\n    , KingOfEthEthExchangeReferencer\r\n    , KingOfEthResourceExchangeReferencer\r\n{\r\n    /// @dev Only one of the exchange contracts may\r\n    ///  run this function\r\n    modifier onlyExchangeContract()\r\n    {\r\n        require(\r\n               ethExchangeContract == msg.sender\r\n            || resourceExchangeContract == msg.sender\r\n        );\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthHousesReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Houses Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to reference the houses contract\r\ncontract KingOfEthHousesReferencer is GodMode {\r\n    /// @dev The houses contract's address\r\n    address public housesContract;\r\n\r\n    /// @dev Only the houses contract can run this function\r\n    modifier onlyHousesContract()\r\n    {\r\n        require(housesContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set the realty contract\r\n    /// @param _housesContract The new address\r\n    function godSetHousesContract(address _housesContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        housesContract = _housesContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthResourcesInterfaceReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Resources Interface Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to reference the resource interface contract\r\ncontract KingOfEthResourcesInterfaceReferencer is GodMode {\r\n    /// @dev The interface contract's address\r\n    address public interfaceContract;\r\n\r\n    /// @dev Only the interface contract can run this function\r\n    modifier onlyInterfaceContract()\r\n    {\r\n        require(interfaceContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set the realty contract\r\n    /// @param _interfaceContract The new address\r\n    function godSetInterfaceContract(address _interfaceContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        interfaceContract = _interfaceContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthResource.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/// @title ERC20Interface\r\n/// @dev ERC20 token interface contract\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns(uint);\r\n    function balanceOf(address _tokenOwner) public constant returns(uint balance);\r\n    function allowance(address _tokenOwner, address _spender) public constant returns(uint remaining);\r\n    function transfer(address _to, uint _tokens) public returns(bool success);\r\n    function approve(address _spender, uint _tokens) public returns(bool success);\r\n    function transferFrom(address _from, address _to, uint _tokens) public returns(bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n/// @title King of Eth: Resource\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Common contract implementation for resources\r\ncontract KingOfEthResource is\r\n      ERC20Interface\r\n    , GodMode\r\n    , KingOfEthResourcesInterfaceReferencer\r\n{\r\n    /// @dev Current resource supply\r\n    uint public resourceSupply;\r\n\r\n    /// @dev ERC20 token's decimals\r\n    uint8 public constant decimals = 0;\r\n\r\n    /// @dev mapping of addresses to holdings\r\n    mapping (address => uint) holdings;\r\n\r\n    /// @dev mapping of addresses to amount of tokens frozen\r\n    mapping (address => uint) frozenHoldings;\r\n\r\n    /// @dev mapping of addresses to mapping of allowances for an address\r\n    mapping (address => mapping (address => uint)) allowances;\r\n\r\n    /// @dev ERC20 total supply\r\n    /// @return The current total supply of the resource\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns(uint)\r\n    {\r\n        return resourceSupply;\r\n    }\r\n\r\n    /// @dev ERC20 balance of address\r\n    /// @param _tokenOwner The address to look up\r\n    /// @return The balance of the address\r\n    function balanceOf(address _tokenOwner)\r\n        public\r\n        constant\r\n        returns(uint balance)\r\n    {\r\n        return holdings[_tokenOwner];\r\n    }\r\n\r\n    /// @dev Total resources frozen for an address\r\n    /// @param _tokenOwner The address to look up\r\n    /// @return The frozen balance of the address\r\n    function frozenTokens(address _tokenOwner)\r\n        public\r\n        constant\r\n        returns(uint balance)\r\n    {\r\n        return frozenHoldings[_tokenOwner];\r\n    }\r\n\r\n    /// @dev The allowance for a spender on an account\r\n    /// @param _tokenOwner The account that allows withdrawels\r\n    /// @param _spender The account that is allowed to withdraw\r\n    /// @return The amount remaining in the allowance\r\n    function allowance(address _tokenOwner, address _spender)\r\n        public\r\n        constant\r\n        returns(uint remaining)\r\n    {\r\n        return allowances[_tokenOwner][_spender];\r\n    }\r\n\r\n    /// @dev Only run if player has at least some amount of tokens\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens required\r\n    modifier hasAvailableTokens(address _owner, uint _tokens)\r\n    {\r\n        require(holdings[_owner] - frozenHoldings[_owner] >= _tokens);\r\n        _;\r\n    }\r\n\r\n    /// @dev Only run if player has at least some amount of tokens frozen\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of frozen tokens required\r\n    modifier hasFrozenTokens(address _owner, uint _tokens)\r\n    {\r\n        require(frozenHoldings[_owner] >= _tokens);\r\n        _;\r\n    }\r\n\r\n    /// @dev Set up the exact same state in each resource\r\n    constructor() public\r\n    {\r\n        // God gets 200 to put on exchange\r\n        holdings[msg.sender] = 200;\r\n\r\n        resourceSupply = 200;\r\n    }\r\n\r\n    /// @dev The resources interface can burn tokens for building\r\n    ///  roads or houses\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to burn\r\n    function interfaceBurnTokens(address _owner, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n        hasAvailableTokens(_owner, _tokens)\r\n    {\r\n        holdings[_owner] -= _tokens;\r\n\r\n        resourceSupply -= _tokens;\r\n\r\n        // Pretend the tokens were sent to 0x0\r\n        emit Transfer(_owner, 0x0, _tokens);\r\n    }\r\n\r\n    /// @dev The resources interface contract can mint tokens for houses\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to burn\r\n    function interfaceMintTokens(address _owner, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n    {\r\n        holdings[_owner] += _tokens;\r\n\r\n        resourceSupply += _tokens;\r\n\r\n        // Pretend the tokens were sent from the interface contract\r\n        emit Transfer(interfaceContract, _owner, _tokens);\r\n    }\r\n\r\n    /// @dev The interface can freeze tokens\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to freeze\r\n    function interfaceFreezeTokens(address _owner, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n        hasAvailableTokens(_owner, _tokens)\r\n    {\r\n        frozenHoldings[_owner] += _tokens;\r\n    }\r\n\r\n    /// @dev The interface can thaw tokens\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to thaw\r\n    function interfaceThawTokens(address _owner, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n        hasFrozenTokens(_owner, _tokens)\r\n    {\r\n        frozenHoldings[_owner] -= _tokens;\r\n    }\r\n\r\n    /// @dev The interface can transfer tokens\r\n    /// @param _from The owner of the tokens\r\n    /// @param _to The new owner of the tokens\r\n    /// @param _tokens The amount of tokens to transfer\r\n    function interfaceTransfer(address _from, address _to, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n    {\r\n        assert(holdings[_from] >= _tokens);\r\n\r\n        holdings[_from] -= _tokens;\r\n        holdings[_to]   += _tokens;\r\n\r\n        emit Transfer(_from, _to, _tokens);\r\n    }\r\n\r\n    /// @dev The interface can transfer frozend tokens\r\n    /// @param _from The owner of the tokens\r\n    /// @param _to The new owner of the tokens\r\n    /// @param _tokens The amount of frozen tokens to transfer\r\n    function interfaceFrozenTransfer(address _from, address _to, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n        hasFrozenTokens(_from, _tokens)\r\n    {\r\n        // Make sure to deduct the tokens from both the total and frozen amounts\r\n        holdings[_from]       -= _tokens;\r\n        frozenHoldings[_from] -= _tokens;\r\n        holdings[_to]         += _tokens;\r\n\r\n        emit Transfer(_from, _to, _tokens);\r\n    }\r\n\r\n    /// @dev ERC20 transfer\r\n    /// @param _to The address to transfer to\r\n    /// @param _tokens The amount of tokens to transfer\r\n    function transfer(address _to, uint _tokens)\r\n        public\r\n        hasAvailableTokens(msg.sender, _tokens)\r\n        returns(bool success)\r\n    {\r\n        holdings[_to]        += _tokens;\r\n        holdings[msg.sender] -= _tokens;\r\n\r\n        emit Transfer(msg.sender, _to, _tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev ERC20 approve\r\n    /// @param _spender The address to approve\r\n    /// @param _tokens The amount of tokens to approve\r\n    function approve(address _spender, uint _tokens)\r\n        public\r\n        returns(bool success)\r\n    {\r\n        allowances[msg.sender][_spender] = _tokens;\r\n\r\n        emit Approval(msg.sender, _spender, _tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev ERC20 transfer from\r\n    /// @param _from The address providing the allowance\r\n    /// @param _to The address using the allowance\r\n    /// @param _tokens The amount of tokens to transfer\r\n    function transferFrom(address _from, address _to, uint _tokens)\r\n        public\r\n        hasAvailableTokens(_from, _tokens)\r\n        returns(bool success)\r\n    {\r\n        require(allowances[_from][_to] >= _tokens);\r\n\r\n        holdings[_to]          += _tokens;\r\n        holdings[_from]        -= _tokens;\r\n        allowances[_from][_to] -= _tokens;\r\n\r\n        emit Transfer(_from, _to, _tokens);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthResourceType.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title King of Eth: Resource Type\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides enum to choose resource types\r\ncontract KingOfEthResourceType {\r\n    /// @dev Enum describing a choice of a resource\r\n    enum ResourceType {\r\n          ETH\r\n        , BRONZE\r\n        , CORN\r\n        , GOLD\r\n        , OIL\r\n        , ORE\r\n        , STEEL\r\n        , URANIUM\r\n        , WOOD\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthRoadsReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Roads Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to reference the roads contract\r\ncontract KingOfEthRoadsReferencer is GodMode {\r\n    /// @dev The roads contract's address\r\n    address public roadsContract;\r\n\r\n    /// @dev Only the roads contract can run this function\r\n    modifier onlyRoadsContract()\r\n    {\r\n        require(roadsContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set the realty contract\r\n    /// @param _roadsContract The new address\r\n    function godSetRoadsContract(address _roadsContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        roadsContract = _roadsContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthResourcesInterface.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title King of Eth: Resources Interface\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Contract for interacting with resources\r\ncontract KingOfEthResourcesInterface is\r\n      GodMode\r\n    , KingOfEthExchangeReferencer\r\n    , KingOfEthHousesReferencer\r\n    , KingOfEthResourceType\r\n    , KingOfEthRoadsReferencer\r\n{\r\n    /// @dev Amount of resources a user gets for building a house\r\n    uint public constant resourcesPerHouse = 3;\r\n\r\n    /// @dev Address for the bronze contract\r\n    address public bronzeContract;\r\n\r\n    /// @dev Address for the corn contract\r\n    address public cornContract;\r\n\r\n    /// @dev Address for the gold contract\r\n    address public goldContract;\r\n\r\n    /// @dev Address for the oil contract\r\n    address public oilContract;\r\n\r\n    /// @dev Address for the ore contract\r\n    address public oreContract;\r\n\r\n    /// @dev Address for the steel contract\r\n    address public steelContract;\r\n\r\n    /// @dev Address for the uranium contract\r\n    address public uraniumContract;\r\n\r\n    /// @dev Address for the wood contract\r\n    address public woodContract;\r\n\r\n    /// @param _bronzeContract The address of the bronze contract\r\n    /// @param _cornContract The address of the corn contract\r\n    /// @param _goldContract The address of the gold contract\r\n    /// @param _oilContract The address of the oil contract\r\n    /// @param _oreContract The address of the ore contract\r\n    /// @param _steelContract The address of the steel contract\r\n    /// @param _uraniumContract The address of the uranium contract\r\n    /// @param _woodContract The address of the wood contract\r\n    constructor(\r\n          address _bronzeContract\r\n        , address _cornContract\r\n        , address _goldContract\r\n        , address _oilContract\r\n        , address _oreContract\r\n        , address _steelContract\r\n        , address _uraniumContract\r\n        , address _woodContract\r\n    )\r\n        public\r\n    {\r\n        bronzeContract  = _bronzeContract;\r\n        cornContract    = _cornContract;\r\n        goldContract    = _goldContract;\r\n        oilContract     = _oilContract;\r\n        oreContract     = _oreContract;\r\n        steelContract   = _steelContract;\r\n        uraniumContract = _uraniumContract;\r\n        woodContract    = _woodContract;\r\n    }\r\n\r\n    /// @dev Return the particular address for a certain resource type\r\n    /// @param _type The resource type\r\n    /// @return The address for that resource\r\n    function contractFor(ResourceType _type)\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        // ETH does not have a contract\r\n        require(ResourceType.ETH != _type);\r\n\r\n        if(ResourceType.BRONZE == _type)\r\n        {\r\n            return bronzeContract;\r\n        }\r\n        else if(ResourceType.CORN == _type)\r\n        {\r\n            return cornContract;\r\n        }\r\n        else if(ResourceType.GOLD == _type)\r\n        {\r\n            return goldContract;\r\n        }\r\n        else if(ResourceType.OIL == _type)\r\n        {\r\n            return oilContract;\r\n        }\r\n        else if(ResourceType.ORE == _type)\r\n        {\r\n            return oreContract;\r\n        }\r\n        else if(ResourceType.STEEL == _type)\r\n        {\r\n            return steelContract;\r\n        }\r\n        else if(ResourceType.URANIUM == _type)\r\n        {\r\n            return uraniumContract;\r\n        }\r\n        else if(ResourceType.WOOD == _type)\r\n        {\r\n            return woodContract;\r\n        }\r\n    }\r\n\r\n    /// @dev Determine the resource type of a tile\r\n    /// @param _x The x coordinate of the top left corner of the tile\r\n    /// @param _y The y coordinate of the top left corner of the tile\r\n    function resourceType(uint _x, uint _y)\r\n        public\r\n        pure\r\n        returns(ResourceType resource)\r\n    {\r\n        uint _seed = (_x + 7777777) ^  _y;\r\n\r\n        if(0 == _seed % 97)\r\n        {\r\n          return ResourceType.URANIUM;\r\n        }\r\n        else if(0 == _seed % 29)\r\n        {\r\n          return ResourceType.OIL;\r\n        }\r\n        else if(0 == _seed % 23)\r\n        {\r\n          return ResourceType.STEEL;\r\n        }\r\n        else if(0 == _seed % 17)\r\n        {\r\n          return ResourceType.GOLD;\r\n        }\r\n        else if(0 == _seed % 11)\r\n        {\r\n          return ResourceType.BRONZE;\r\n        }\r\n        else if(0 == _seed % 5)\r\n        {\r\n          return ResourceType.WOOD;\r\n        }\r\n        else if(0 == _seed % 2)\r\n        {\r\n          return ResourceType.CORN;\r\n        }\r\n        else\r\n        {\r\n          return ResourceType.ORE;\r\n        }\r\n    }\r\n\r\n    /// @dev Lookup the number of resource points for a certain\r\n    ///  player\r\n    /// @param _player The player in question\r\n    function lookupResourcePoints(address _player)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        uint result = 0;\r\n\r\n        result += KingOfEthResource(bronzeContract).balanceOf(_player);\r\n        result += KingOfEthResource(goldContract).balanceOf(_player)    * 3;\r\n        result += KingOfEthResource(steelContract).balanceOf(_player)   * 6;\r\n        result += KingOfEthResource(oilContract).balanceOf(_player)     * 10;\r\n        result += KingOfEthResource(uraniumContract).balanceOf(_player) * 44;\r\n\r\n        return result;\r\n    }\r\n\r\n    /// @dev Burn the resources necessary to build a house\r\n    /// @param _count the number of houses being built\r\n    /// @param _player The player who is building the house\r\n    function burnHouseCosts(uint _count, address _player)\r\n        public\r\n        onlyHousesContract\r\n    {\r\n        // Costs 2 corn per house\r\n        KingOfEthResource(contractFor(ResourceType.CORN)).interfaceBurnTokens(\r\n              _player\r\n            , 2 * _count\r\n        );\r\n\r\n        // Costs 2 ore per house\r\n        KingOfEthResource(contractFor(ResourceType.ORE)).interfaceBurnTokens(\r\n              _player\r\n            , 2 * _count\r\n        );\r\n\r\n        // Costs 1 wood per house\r\n        KingOfEthResource(contractFor(ResourceType.WOOD)).interfaceBurnTokens(\r\n              _player\r\n            , _count\r\n        );\r\n    }\r\n\r\n    /// @dev Burn the costs of upgrading a house\r\n    /// @param _currentLevel The level of the house before the upgrade\r\n    /// @param _player The player who is upgrading the house\r\n    function burnUpgradeCosts(uint8 _currentLevel, address _player)\r\n        public\r\n        onlyHousesContract\r\n    {\r\n        // Do not allow upgrades after level 4\r\n        require(5 > _currentLevel);\r\n\r\n        // Burn the base house cost\r\n        burnHouseCosts(1, _player);\r\n\r\n        if(0 == _currentLevel)\r\n        {\r\n            // Level 1 costs bronze\r\n            KingOfEthResource(contractFor(ResourceType.BRONZE)).interfaceBurnTokens(\r\n                  _player\r\n                , 1\r\n            );\r\n        }\r\n        else if(1 == _currentLevel)\r\n        {\r\n            // Level 2 costs gold\r\n            KingOfEthResource(contractFor(ResourceType.GOLD)).interfaceBurnTokens(\r\n                  _player\r\n                , 1\r\n            );\r\n        }\r\n        else if(2 == _currentLevel)\r\n        {\r\n            // Level 3 costs steel\r\n            KingOfEthResource(contractFor(ResourceType.STEEL)).interfaceBurnTokens(\r\n                  _player\r\n                , 1\r\n            );\r\n        }\r\n        else if(3 == _currentLevel)\r\n        {\r\n            // Level 4 costs oil\r\n            KingOfEthResource(contractFor(ResourceType.OIL)).interfaceBurnTokens(\r\n                  _player\r\n                , 1\r\n            );\r\n        }\r\n        else if(4 == _currentLevel)\r\n        {\r\n            // Level 5 costs uranium\r\n            KingOfEthResource(contractFor(ResourceType.URANIUM)).interfaceBurnTokens(\r\n                  _player\r\n                , 1\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev Mint resources for a house and distribute all to its owner\r\n    /// @param _owner The owner of the house\r\n    /// @param _x The x coordinate of the house\r\n    /// @param _y The y coordinate of the house\r\n    /// @param _y The y coordinate of the house\r\n    /// @param _level The new level of the house\r\n    function distributeResources(address _owner, uint _x, uint _y, uint8 _level)\r\n        public\r\n        onlyHousesContract\r\n    {\r\n        // Calculate the count of resources for this level\r\n        uint _count = resourcesPerHouse * uint(_level + 1);\r\n\r\n        // Distribute the top left resource\r\n        KingOfEthResource(contractFor(resourceType(_x - 1, _y - 1))).interfaceMintTokens(\r\n            _owner\r\n          , _count\r\n        );\r\n\r\n        // Distribute the top right resource\r\n        KingOfEthResource(contractFor(resourceType(_x, _y - 1))).interfaceMintTokens(\r\n            _owner\r\n          , _count\r\n        );\r\n\r\n        // Distribute the bottom right resource\r\n        KingOfEthResource(contractFor(resourceType(_x, _y))).interfaceMintTokens(\r\n            _owner\r\n          , _count\r\n        );\r\n\r\n        // Distribute the bottom left resource\r\n        KingOfEthResource(contractFor(resourceType(_x - 1, _y))).interfaceMintTokens(\r\n            _owner\r\n          , _count\r\n        );\r\n    }\r\n\r\n    /// @dev Burn the costs necessary to build a road\r\n    /// @param _length The length of the road\r\n    /// @param _player The player who is building the house\r\n    function burnRoadCosts(uint _length, address _player)\r\n        public\r\n        onlyRoadsContract\r\n    {\r\n        // Burn corn\r\n        KingOfEthResource(cornContract).interfaceBurnTokens(\r\n              _player\r\n            , _length\r\n        );\r\n\r\n        // Burn ore\r\n        KingOfEthResource(oreContract).interfaceBurnTokens(\r\n              _player\r\n            , _length\r\n        );\r\n    }\r\n\r\n    /// @dev The exchange can freeze tokens\r\n    /// @param _type The type of resource\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to freeze\r\n    function exchangeFreezeTokens(ResourceType _type, address _owner, uint _tokens)\r\n        public\r\n        onlyExchangeContract\r\n    {\r\n        KingOfEthResource(contractFor(_type)).interfaceFreezeTokens(_owner, _tokens);\r\n    }\r\n\r\n    /// @dev The exchange can thaw tokens\r\n    /// @param _type The type of resource\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to thaw\r\n    function exchangeThawTokens(ResourceType _type, address _owner, uint _tokens)\r\n        public\r\n        onlyExchangeContract\r\n    {\r\n        KingOfEthResource(contractFor(_type)).interfaceThawTokens(_owner, _tokens);\r\n    }\r\n\r\n    /// @dev The exchange can transfer tokens\r\n    /// @param _type The type of resource\r\n    /// @param _from The owner of the tokens\r\n    /// @param _to The new owner of the tokens\r\n    /// @param _tokens The amount of tokens to transfer\r\n    function exchangeTransfer(ResourceType _type, address _from, address _to, uint _tokens)\r\n        public\r\n        onlyExchangeContract\r\n    {\r\n        KingOfEthResource(contractFor(_type)).interfaceTransfer(_from, _to, _tokens);\r\n    }\r\n\r\n    /// @dev The exchange can transfer frozend tokens\r\n    /// @param _type The type of resource\r\n    /// @param _from The owner of the tokens\r\n    /// @param _to The new owner of the tokens\r\n    /// @param _tokens The amount of frozen tokens to transfer\r\n    function exchangeFrozenTransfer(ResourceType _type, address _from, address _to, uint _tokens)\r\n        public\r\n        onlyExchangeContract\r\n    {\r\n        KingOfEthResource(contractFor(_type)).interfaceFrozenTransfer(_from, _to, _tokens);\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthEthExchange.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title King of Eth: Resource-to-ETH Exchange\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev All the ETH exchange functionality\r\ncontract KingOfEthEthExchange is\r\n      GodMode\r\n    , KingOfEthReferencer\r\n    , KingOfEthResourcesInterfaceReferencer\r\n    , KingOfEthResourceType\r\n{\r\n    /// @dev Struct to hold data about a trade\r\n    struct Trade {\r\n        /// @dev The creator of the trade\r\n        address creator;\r\n\r\n        /// @dev The resource the trade is providing\r\n        ResourceType resource;\r\n\r\n        /// @dev The resource the trade is asking for\r\n        ResourceType tradingFor;\r\n\r\n        /// @dev The amount of the resource that is left to trade\r\n        uint amountRemaining;\r\n\r\n        /// @dev The amount of what is asked for needed for one\r\n        ///  of the provided resource\r\n        uint price;\r\n    }\r\n\r\n    /// @dev The number of decimals that the price of the trade has\r\n    uint public constant priceDecimals = 6;\r\n\r\n    /// @dev The number that divides ETH in a trade to pay as taxes\r\n    uint public constant taxDivisor = 25;\r\n\r\n    /// @dev The id of the next trade created\r\n    uint public nextTradeId;\r\n\r\n    /// @dev Mapping of trade ids to info about the trade\r\n    mapping (uint => Trade) trades;\r\n\r\n    /// @dev Fired when a trade is created\r\n    event EthTradeCreated(\r\n          uint tradeId\r\n        , ResourceType resource\r\n        , ResourceType tradingFor\r\n        , uint amount\r\n        , uint price\r\n        , address creator\r\n    );\r\n\r\n    /// @dev Fired when a trade is (partially) filled\r\n    event EthTradeFilled(\r\n          uint tradeId\r\n        , ResourceType resource\r\n        , ResourceType tradingFor\r\n        , uint amount\r\n        , uint price\r\n        , address creator\r\n        , address filler\r\n    );\r\n\r\n    /// @dev Fired when a trade is cancelled\r\n    event EthTradeCancelled(\r\n          uint tradeId\r\n        , ResourceType resource\r\n        , ResourceType tradingFor\r\n        , uint amount\r\n        , address creator\r\n    );\r\n\r\n    /// @param _kingOfEthContract The address of the king contract\r\n    /// @param _interfaceContract The address of the resources\r\n    ///  interface contract\r\n    constructor(\r\n          address _kingOfEthContract\r\n        , address _interfaceContract\r\n    )\r\n        public\r\n    {\r\n        kingOfEthContract = _kingOfEthContract;\r\n        interfaceContract = _interfaceContract;\r\n    }\r\n\r\n    /// @dev Create a trade\r\n    /// @param _resource The resource the trade is providing\r\n    /// @param _tradingFor The resource the trade is asking for\r\n    /// @param _amount The amount of the resource that to trade\r\n    /// @param _price The amount of what is asked for needed for one\r\n    ///  of the provided resource\r\n    /// @return The id of the trade\r\n    function createTrade(\r\n          ResourceType _resource\r\n        , ResourceType _tradingFor\r\n        , uint _amount\r\n        , uint _price\r\n    )\r\n        public\r\n        payable\r\n        returns(uint)\r\n    {\r\n        // Require one of the resources to be ETH\r\n        require(\r\n               ResourceType.ETH == _resource\r\n            || ResourceType.ETH == _tradingFor\r\n        );\r\n\r\n        // Don't allow trades for the same resource\r\n        require(_resource != _tradingFor);\r\n\r\n        // Require that the amount is greater than 0\r\n        require(0 < _amount);\r\n\r\n        // Require that the price is greater than 0\r\n        require(0 < _price);\r\n\r\n        // If the resource provided is ETH\r\n        if(ResourceType.ETH == _resource)\r\n        {\r\n            // Start calculating size of resources\r\n            uint _size = _amount * _price;\r\n\r\n            // Ensure that the result is reversable (there is no overflow)\r\n            require(_amount == _size / _price);\r\n\r\n            // Finish the calculation\r\n            _size /= 10 ** priceDecimals;\r\n\r\n            // Ensure the size is a whole number\r\n            require(0 == _size % 1 ether);\r\n\r\n            // Require that the ETH was sent with the transaction\r\n            require(_amount == msg.value);\r\n        }\r\n        // If it was a normal resource\r\n        else\r\n        {\r\n            // Freeze the amount of tokens for that resource\r\n            KingOfEthResourcesInterface(interfaceContract).exchangeFreezeTokens(\r\n                  _resource\r\n                , msg.sender\r\n                , _amount\r\n            );\r\n        }\r\n\r\n        // Set up the info about the trade\r\n        trades[nextTradeId] = Trade(\r\n              msg.sender\r\n            , _resource\r\n            , _tradingFor\r\n            , _amount\r\n            , _price\r\n        );\r\n\r\n        emit EthTradeCreated(\r\n              nextTradeId\r\n            , _resource\r\n            , _tradingFor\r\n            , _amount\r\n            , _price\r\n            , msg.sender\r\n        );\r\n\r\n        // Return the trade id\r\n        return nextTradeId++;\r\n    }\r\n\r\n    /// @dev Fill an amount of some trade\r\n    /// @param _tradeId The id of the trade\r\n    /// @param _amount The amount of the provided resource to fill\r\n    function fillTrade(uint _tradeId, uint _amount) public payable\r\n    {\r\n        // Require a nonzero amount to be filled\r\n        require(0 < _amount);\r\n\r\n        // Lookup the trade\r\n        Trade storage _trade = trades[_tradeId];\r\n\r\n        // Require that at least the amount filling is available to trade\r\n        require(_trade.amountRemaining >= _amount);\r\n\r\n        // Reduce the amount remaining by the amount being filled\r\n        _trade.amountRemaining -= _amount;\r\n\r\n        // The size of the trade\r\n        uint _size;\r\n\r\n        // The tax cut of this trade\r\n        uint _taxCut;\r\n\r\n        // If the resource filling for is ETH\r\n        if(ResourceType.ETH == _trade.resource)\r\n        {\r\n            // Calculate the size of the resources filling with\r\n            _size = _trade.price * _amount;\r\n\r\n            // Ensure that the result is reversable (there is no overflow)\r\n            require(_size / _trade.price == _amount);\r\n\r\n            // Divide by the price decimals\r\n            _size /= 10 ** priceDecimals;\r\n\r\n            // Require that the size is a whole number\r\n            require(0 == _size % 1 ether);\r\n\r\n            // Get the size in resources\r\n            _size /= 1 ether;\r\n\r\n            // Require no ETH was sent with this transaction\r\n            require(0 == msg.value);\r\n\r\n            // Calculate the tax cut\r\n            _taxCut = _amount / taxDivisor;\r\n\r\n            // Send the filler the ETH\r\n            msg.sender.transfer(_amount - _taxCut);\r\n\r\n            // Pay the taxes\r\n            KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(_taxCut)();\r\n\r\n            // Send the creator the filler's resoruces\r\n            KingOfEthResourcesInterface(interfaceContract).exchangeTransfer(\r\n                  _trade.tradingFor\r\n                , msg.sender\r\n                , _trade.creator\r\n                , _size\r\n            );\r\n        }\r\n        // If ETH is being filled\r\n        else\r\n        {\r\n            // Calculate the size of the resources filling with\r\n            _size = _trade.price * _amount;\r\n\r\n            // Ensure that the result is reversable (there is no overflow)\r\n            require(_size / _trade.price == _amount);\r\n\r\n            // Convert to ETH\r\n            uint _temp = _size * 1 ether;\r\n\r\n            // Ensure that the result is reversable (there is no overflow)\r\n            require(_size == _temp / 1 ether);\r\n\r\n            // Divide by the price decimals\r\n            _size = _temp / (10 ** priceDecimals);\r\n\r\n            // Require that the user has sent the correct amount of ETH\r\n            require(_size == msg.value);\r\n\r\n            // Calculate the tax cut\r\n            _taxCut = msg.value / taxDivisor;\r\n\r\n            // Send the creator his ETH\r\n            _trade.creator.transfer(msg.value - _taxCut);\r\n\r\n            // Pay the taxes\r\n            KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(_taxCut)();\r\n\r\n            // Send the filler the creator's frozen resources\r\n            KingOfEthResourcesInterface(interfaceContract).exchangeFrozenTransfer(\r\n                  _trade.resource\r\n                , _trade.creator\r\n                , msg.sender\r\n                , _amount\r\n            );\r\n        }\r\n\r\n        emit EthTradeFilled(\r\n              _tradeId\r\n            , _trade.resource\r\n            , _trade.tradingFor\r\n            , _amount\r\n            , _trade.price\r\n            , _trade.creator\r\n            , msg.sender\r\n        );\r\n    }\r\n\r\n    /// @dev Cancel a trade\r\n    /// @param _tradeId The trade's id\r\n    function cancelTrade(uint _tradeId) public\r\n    {\r\n        // Lookup the trade's info\r\n        Trade storage _trade = trades[_tradeId];\r\n\r\n        // Require that the creator is cancelling the trade\r\n        require(_trade.creator == msg.sender);\r\n\r\n        // Save the amount remaining\r\n        uint _amountRemaining = _trade.amountRemaining;\r\n\r\n        // Set the amount remaining to trade to 0\r\n        // Note that this effectively cancels the trade\r\n        _trade.amountRemaining = 0;\r\n\r\n        // If the trade provided ETH\r\n        if(ResourceType.ETH == _trade.resource)\r\n        {\r\n            // Sent the creator back his ETH\r\n            msg.sender.transfer(_amountRemaining);\r\n        }\r\n        // If the trade provided a resource\r\n        else\r\n        {\r\n            // Thaw the creator's resource\r\n            KingOfEthResourcesInterface(interfaceContract).exchangeThawTokens(\r\n                  _trade.resource\r\n                , msg.sender\r\n                , _amountRemaining\r\n            );\r\n        }\r\n\r\n        emit EthTradeCancelled(\r\n              _tradeId\r\n            , _trade.resource\r\n            , _trade.tradingFor\r\n            , _amountRemaining\r\n            , msg.sender\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"priceDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeId\",\"type\":\"uint256\"}],\"name\":\"cancelTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"godPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resource\",\"type\":\"uint8\"},{\"name\":\"_tradingFor\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextTradeId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGod\",\"type\":\"address\"}],\"name\":\"godChangeGod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_interfaceContract\",\"type\":\"address\"}],\"name\":\"godSetInterfaceContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kingOfEthContract\",\"type\":\"address\"}],\"name\":\"godSetKingOfEthContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interfaceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"godUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"god\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fillTrade\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kingOfEthContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kingOfEthContract\",\"type\":\"address\"},{\"name\":\"_interfaceContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resource\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"tradingFor\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"EthTradeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resource\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"tradingFor\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"filler\",\"type\":\"address\"}],\"name\":\"EthTradeFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resource\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"tradingFor\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"EthTradeCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GodPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GodUnpaused\",\"type\":\"event\"}]","ContractName":"KingOfEthEthExchange","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000004bba664ea822924ff435ce1b3fad3e8dcc694810000000000000000000000008183703e9df90ed76bec0b0b8fad33f2c024be59","Library":"","SwarmSource":"bzzr://e6e3fbf10b061dc3c5fb2cfa8c21c588e457a4fd449228b280c1f777c776211e"}]}