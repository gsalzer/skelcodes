{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". This adds two-phase\r\n * ownership control to OpenZeppelin's Ownable class. In this model, the original owner \r\n * designates a new owner but does not actually transfer ownership. The new owner then accepts \r\n * ownership and completes the transfer.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public pendingOwner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    pendingOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n* @title CarbonDollarStorage\r\n* @notice Contains necessary storage contracts for CarbonDollar (FeeSheet and StablecoinWhitelist).\r\n*/\r\ncontract CarbonDollarStorage is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /** \r\n        Mappings\r\n    */\r\n    /* fees for withdrawing to stablecoin, in tenths of a percent) */\r\n    mapping (address => uint256) public fees;\r\n    /** @dev Units for fees are always in a tenth of a percent */\r\n    uint256 public defaultFee;\r\n    /* is the token address referring to a stablecoin/whitelisted token? */\r\n    mapping (address => bool) public whitelist;\r\n\r\n\r\n    /** \r\n        Events\r\n    */\r\n    event DefaultFeeChanged(uint256 oldFee, uint256 newFee);\r\n    event FeeChanged(address indexed stablecoin, uint256 oldFee, uint256 newFee);\r\n    event FeeRemoved(address indexed stablecoin, uint256 oldFee);\r\n    event StablecoinAdded(address indexed stablecoin);\r\n    event StablecoinRemoved(address indexed stablecoin);\r\n\r\n    /** @notice Sets the default fee for burning CarbonDollar into a whitelisted stablecoin.\r\n        @param _fee The default fee.\r\n    */\r\n    function setDefaultFee(uint256 _fee) public onlyOwner {\r\n        uint256 oldFee = defaultFee;\r\n        defaultFee = _fee;\r\n        if (oldFee != defaultFee)\r\n            emit DefaultFeeChanged(oldFee, _fee);\r\n    }\r\n    \r\n    /** @notice Set a fee for burning CarbonDollar into a stablecoin.\r\n        @param _stablecoin Address of a whitelisted stablecoin.\r\n        @param _fee the fee.\r\n    */\r\n    function setFee(address _stablecoin, uint256 _fee) public onlyOwner {\r\n        uint256 oldFee = fees[_stablecoin];\r\n        fees[_stablecoin] = _fee;\r\n        if (oldFee != _fee)\r\n            emit FeeChanged(_stablecoin, oldFee, _fee);\r\n    }\r\n\r\n    /** @notice Remove the fee for burning CarbonDollar into a particular kind of stablecoin.\r\n        @param _stablecoin Address of stablecoin.\r\n    */\r\n    function removeFee(address _stablecoin) public onlyOwner {\r\n        uint256 oldFee = fees[_stablecoin];\r\n        fees[_stablecoin] = 0;\r\n        if (oldFee != 0)\r\n            emit FeeRemoved(_stablecoin, oldFee);\r\n    }\r\n\r\n    /** @notice Add a token to the whitelist.\r\n        @param _stablecoin Address of the new stablecoin.\r\n    */\r\n    function addStablecoin(address _stablecoin) public onlyOwner {\r\n        whitelist[_stablecoin] = true;\r\n        emit StablecoinAdded(_stablecoin);\r\n    }\r\n\r\n    /** @notice Removes a token from the whitelist.\r\n        @param _stablecoin Address of the ex-stablecoin.\r\n    */\r\n    function removeStablecoin(address _stablecoin) public onlyOwner {\r\n        whitelist[_stablecoin] = false;\r\n        emit StablecoinRemoved(_stablecoin);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Compute the fee that will be charged on a \"burn\" operation.\r\n     * @param _amount The amount that will be traded.\r\n     * @param _stablecoin The stablecoin whose fee will be used.\r\n     */\r\n    function computeStablecoinFee(uint256 _amount, address _stablecoin) public view returns (uint256) {\r\n        uint256 fee = fees[_stablecoin];\r\n        return computeFee(_amount, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Compute the fee that will be charged on a \"burn\" operation.\r\n     * @param _amount The amount that will be traded.\r\n     * @param _fee The fee that will be charged, in tenths of a percent.\r\n     */\r\n    function computeFee(uint256 _amount, uint256 _fee) public pure returns (uint256) {\r\n        return _amount.mul(_fee).div(1000);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"addStablecoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"computeStablecoinFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"computeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"removeStablecoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"removeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setDefaultFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stablecoin\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"DefaultFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldFee\",\"type\":\"uint256\"}],\"name\":\"FeeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"StablecoinAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"StablecoinRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CarbonDollarStorage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://21aabf8ad534ca47a098935ff1b5ac8b1266bc01fe831b9706073d746f0f9587"}]}