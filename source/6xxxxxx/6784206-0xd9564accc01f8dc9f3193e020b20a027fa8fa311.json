{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract MemoContract {\r\n\r\n   //evento para avisar que se agrego una jugada\r\n  event addedJugada (\r\n      uint jugadanro\r\n  );  \r\n\r\n  // contador de jugadas\r\n  uint contadorjugadas = 0;\r\n  \r\n\r\n  //Dueño del contrato\r\n  address owner;\r\n\r\n  // Representa una jugada realizada\r\n  struct Jugada {\r\n      uint idjugada;\r\n      uint fecha; // timestamp\r\n      string nombre; // nombre de la persona\r\n      string mail; // mail de la persona\r\n      uint intentos; // cantidad de intentos en los que gano\r\n      uint tiempo; // tiempo que demoró en terminar la partida\r\n      bool valida; //jugada válida\r\n  }\r\n\r\n  // Colección de jugadas  \r\n  Jugada[] public jugadas;\r\n\r\n\r\n  // map para direcciones activas para informar jugadas\r\n  mapping( address => bool) public direcciones;\r\n\r\n\r\n\r\n  //Constructor del contrato\r\n  constructor() public {\r\n\r\n    //Registrar el propietario y que quede habilitado para enviar jugadas\r\n    owner = msg.sender;\r\n    direcciones[owner] = true;\r\n\r\n   \r\n  }\r\n\r\n\r\n function updateDireccion ( address _direccion , bool _estado)  {\r\n     // Solo el dueño puede habilitar o deshabilitar direcciones que pueden escribir la jugada\r\n     require(msg.sender == owner);\r\n\r\n     // Evitar que se quiera modificar el estado del owner\r\n     require(_direccion != owner);\r\n\r\n     direcciones[_direccion] = _estado;\r\n } \r\n\r\nfunction updateJugada( uint _idjugada, bool _valida ) {\r\n    \r\n    //Validar que envía el dueño del contrato\r\n    require(direcciones[msg.sender] );\r\n    \r\n    //Modificar la jugada\r\n    jugadas[_idjugada -1].valida = _valida;\r\n    \r\n}\r\n \r\n\r\n  // Agregar una jugada\r\n  function addJugada ( uint _fecha , string _nombre , string _mail , uint _intentos , uint _tiempo ) public {\r\n      \r\n      require(direcciones[msg.sender] );\r\n\r\n      contadorjugadas = contadorjugadas + 1;\r\n      \r\n      jugadas.push (\r\n            Jugada ({\r\n                \r\n                idjugada:contadorjugadas,\r\n                fecha: _fecha,\r\n                nombre:_nombre,\r\n                mail: _mail,\r\n                intentos: _intentos,\r\n                tiempo: _tiempo,\r\n                valida: true\r\n            }));\r\n\r\n        // Llamar al evento para informar que se agrego la jugada\r\n        addedJugada( contadorjugadas );\r\n\r\n        }\r\n\r\n\r\n\r\n    // Devolver todas las jugadas\r\n    function fetchJugadas() constant public returns(uint[], uint[], bytes32[], bytes32[], uint[], uint[], bool[]) {\r\n        \r\n\r\n\r\n\r\n            \r\n            \r\n            uint[] memory _idjugadas = new uint[](contadorjugadas);\r\n            uint[] memory _fechas = new uint[](contadorjugadas);\r\n            bytes32[] memory _nombres = new bytes32[](contadorjugadas);\r\n            bytes32[] memory _mails = new bytes32[](contadorjugadas);\r\n            uint[] memory _intentos = new uint[](contadorjugadas);\r\n            uint[] memory _tiempos = new uint[](contadorjugadas);\r\n            bool[] memory _valida = new bool[](contadorjugadas);\r\n        \r\n            for (uint8 i = 0; i < jugadas.length; i++) {\r\n\r\n                \r\n                 _idjugadas[i] = jugadas[i].idjugada;\r\n                _fechas[i] = jugadas[i].fecha;\r\n                _nombres[i] = stringToBytes32( jugadas[i].nombre );\r\n                _mails[i] = stringToBytes32( jugadas[i].mail );\r\n                _intentos[i] = jugadas[i].intentos;\r\n                _tiempos[i] = jugadas[i].tiempo;\r\n                _valida[i] = jugadas[i].valida;\r\n                \r\n            }\r\n            \r\n            return ( _idjugadas, _fechas, _nombres, _mails, _intentos, _tiempos, _valida);\r\n        \r\n    }\r\n    \r\n    \r\n    function stringToBytes32(string memory source)  returns (bytes32 result)  {\r\n    bytes memory tempEmptyStringTest = bytes(source);\r\n    if (tempEmptyStringTest.length == 0) {\r\n        return 0x0;\r\n    }\r\n\r\n    assembly {\r\n        result := mload(add(source, 32))\r\n    }\r\n}\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_idjugada\",\"type\":\"uint256\"},{\"name\":\"_valida\",\"type\":\"bool\"}],\"name\":\"updateJugada\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fecha\",\"type\":\"uint256\"},{\"name\":\"_nombre\",\"type\":\"string\"},{\"name\":\"_mail\",\"type\":\"string\"},{\"name\":\"_intentos\",\"type\":\"uint256\"},{\"name\":\"_tiempo\",\"type\":\"uint256\"}],\"name\":\"addJugada\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchJugadas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_direccion\",\"type\":\"address\"},{\"name\":\"_estado\",\"type\":\"bool\"}],\"name\":\"updateDireccion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"direcciones\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jugadas\",\"outputs\":[{\"name\":\"idjugada\",\"type\":\"uint256\"},{\"name\":\"fecha\",\"type\":\"uint256\"},{\"name\":\"nombre\",\"type\":\"string\"},{\"name\":\"mail\",\"type\":\"string\"},{\"name\":\"intentos\",\"type\":\"uint256\"},{\"name\":\"tiempo\",\"type\":\"uint256\"},{\"name\":\"valida\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"jugadanro\",\"type\":\"uint256\"}],\"name\":\"addedJugada\",\"type\":\"event\"}]","ContractName":"MemoContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3f82a4568c3359b01042e850744f729f16cfecfba14b1f3f1555434e0360a128"}]}