{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  uint256 totalRecycledTokens_; \r\n\r\n  bool public paused = false; \r\n\r\n  bool public tgeMode = false;\r\n\r\n  address public ceoAddress;\r\n\r\n  address public marketplaceAddress;\r\n\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  modifier whenNotPaused() { \r\n        require(!paused);\r\n        _;\r\n  }\r\n  \r\n  modifier whenPaused() { \r\n        require(paused);\r\n        _;\r\n  }\r\n\r\n  modifier onlyCEO() {\r\n      require(msg.sender == ceoAddress);\r\n      _;  \r\n  }\r\n\r\n  function pause() public onlyCEO() whenNotPaused() {\r\n      paused = true;\r\n  }\r\n\r\n  function unpause() public onlyCEO() whenPaused() {\r\n      paused = false;\r\n  }\r\n\r\n  modifier inTGE() {\r\n      require(tgeMode);\r\n      _;  \r\n  }\r\n\r\n  modifier afterTGE() {\r\n      require(!tgeMode);\r\n      _;  \r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public whenNotPaused() returns (bool) {\r\n    require( !tgeMode || (msg.sender == ceoAddress) ); \r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ExoToken is ERC20, BasicToken {\r\n\r\n  string public name = \"ExoToken\";\r\n\r\n  string public symbol = \"EXT\"; \r\n\r\n  uint8 public decimals = 18;\r\n\r\n  uint256 public MaxNumTokens = 175000000000000000000000000;\r\n  \r\n  uint256 private priceOfToken;\r\n\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  mapping(address => bool) private tgeUserMap;\r\n  address[] private tgeUserList;\r\n\r\n  event Mint(address _to, uint256 _amount);\r\n  event RecycleTokens(uint256 value);\r\n\r\n\r\n  uint32 public bonusFactor_1 = 5; \r\n  uint32 public bonusFactor_2 = 10;\r\n  uint32 public bonusFactor_3 = 20;\r\n\r\n\r\n  function setBonusFactors(uint32 factor_1, uint32 factor_2, uint32 factor_3) public onlyCEO() inTGE() {\r\n    bonusFactor_1 = factor_1;\r\n    bonusFactor_2 = factor_2;\r\n    bonusFactor_3 = factor_3;\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function ExoToken(uint256 initialSupply, uint256 initialPriceOfToken) public {  \r\n    // set initialSupply to e.g. 82,250,000\r\n    require(initialPriceOfToken > 0);\r\n    ceoAddress = msg.sender;\r\n    marketplaceAddress = msg.sender;\r\n    priceOfToken = initialPriceOfToken; \r\n    balances[msg.sender] = initialSupply;\r\n    totalSupply_ = initialSupply;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused() afterTGE() returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);    \r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public whenNotPaused() afterTGE() returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) whenNotPaused() public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function setPriceOfToken(uint256 newPriceOfToken) public onlyCEO() {\r\n    require(newPriceOfToken > 0);\r\n    priceOfToken = newPriceOfToken;\r\n  }\r\n\r\n  function getPriceOfToken() public view returns(uint256) {\r\n    return priceOfToken;\r\n  }\r\n\r\n  function getNumRecycledTokens() public view returns(uint256) {\r\n    return totalRecycledTokens_;\r\n  }\r\n  \r\n\r\n  function recycleTokensForPayment(uint256 numTokens, uint256 payment) public onlyCEO() { \r\n    require(payment <= this.balance); \r\n    recycleTokens(numTokens); \r\n    ceoAddress.transfer(payment);\r\n  }\r\n  \r\n\r\n  function recycleTokens(uint256 numTokens) public onlyCEO() { \r\n    // allow more tokens to be minted\r\n    require(numTokens <= balances[ceoAddress]);\r\n\r\n    totalSupply_ = totalSupply_.sub(numTokens);\r\n    balances[ceoAddress] = balances[ceoAddress].sub(numTokens);\r\n    totalRecycledTokens_ = totalRecycledTokens_.add(numTokens);\r\n    RecycleTokens(numTokens);\r\n  }\r\n\r\n\r\n  uint256 public firstBonusStep = 1 ether;\r\n  uint256 public secondBonusStep = 5 ether;\r\n  uint256 public thirdBonusStep = 10 ether;\r\n\r\n  function setBonusSteps(uint256 step_1, uint256 step_2, uint256 step_3) public onlyCEO() inTGE() {\r\n    firstBonusStep = step_1;\r\n    secondBonusStep = step_2;\r\n    thirdBonusStep = step_3;\r\n  }\r\n\r\n\r\n\r\n  function purchase() public payable whenNotPaused() inTGE() {\r\n    /// when in TGE - buy tokens (from CEO account) for ETH\r\n\r\n    uint256 amount = msg.value.div(priceOfToken);\r\n    require(amount > 0);\r\n        \r\n    if (tgeUserMap[ msg.sender] == false) { // In Solidity, mapping will return the default value for each key type\r\n      tgeUserMap[ msg.sender] = true;\r\n      tgeUserList.push( msg.sender);\r\n    }\r\n\r\n    uint bonusFactor;\r\n    if (msg.value < firstBonusStep) {\r\n      bonusFactor = 100; // no bonus  \r\n    } else if (msg.value < secondBonusStep) {\r\n      bonusFactor = 100 + bonusFactor_1;\r\n    } else if (msg.value < thirdBonusStep) {\r\n      bonusFactor = 100 + bonusFactor_2;\r\n    } else {\r\n      bonusFactor = 100 + bonusFactor_3;\r\n    }\r\n    \r\n    amount = amount.mul(bonusFactor).div(100);\r\n    amount = amount.mul(1000000000000000000);\r\n    \r\n     /// mint requested amount of tokens\r\n    \r\n    doMint(msg.sender, amount);\r\n\r\n    /// Transfer tokens from ceo to msg.sender\r\n    // require(amount <= balances[ceoAddress]); \r\n    // balances[ceoAddress] = balances[ceoAddress].sub(amount);\r\n    // balances[msg.sender] = balances[msg.sender].add(amount);\r\n    // Transfer(ceoAddress, msg.sender, amount);\r\n  }\r\n\r\n\r\n /// mint function - either by CEO or from site\r\n function mintTokens(address buyerAddress, uint256 amount) public whenNotPaused() returns (bool) {  \r\n    require(msg.sender == marketplaceAddress || msg.sender == ceoAddress); \r\n    return doMint(buyerAddress, amount);\r\n  }\r\n\r\n function doMint(address buyerAddress, uint256 amount) private whenNotPaused() returns (bool) {\r\n    require( totalSupply_.add(amount) <= MaxNumTokens);\r\n    totalSupply_ = totalSupply_.add(amount);\r\n    balances[buyerAddress] = balances[buyerAddress].add(amount);\r\n    Mint(buyerAddress, amount);\r\n    return true;\r\n  }\r\n\r\n  \r\n\r\n  function getNumTGEUsers() public view returns (uint256) {\r\n      return tgeUserList.length;\r\n  }\r\n\r\n  function getTGEUser( uint32 ind) public view returns (address) {\r\n      return tgeUserList[ind];\r\n  }\r\n\r\n\r\n  function payout() public onlyCEO {\r\n      ceoAddress.transfer(this.balance);\r\n  }\r\n\r\n  function payoutPartial(uint256 amount) public onlyCEO {\r\n      require(amount <= this.balance);\r\n      ceoAddress.transfer(amount);  \r\n  }\r\n\r\n  function setTGEMode(bool newMode) public onlyCEO {\r\n      tgeMode = newMode;\r\n  }\r\n\r\n  function setCEO(address newCEO) public onlyCEO {\r\n      require(newCEO != address(0));\r\n      uint256 ceoTokens = balances[ceoAddress];\r\n      balances[ceoAddress] = 0;\r\n      balances[newCEO] = balances[newCEO].add(ceoTokens);\r\n      ceoAddress = newCEO; \r\n  }\r\n\r\n  function setMarketplaceAddress(address newMarketplace) public onlyCEO {\r\n    marketplaceAddress = newMarketplace;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) whenNotPaused() public returns (bool) {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  \r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) whenNotPaused() public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n        return 0;\r\n      }\r\n      uint256 c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMode\",\"type\":\"bool\"}],\"name\":\"setTGEMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"step_1\",\"type\":\"uint256\"},{\"name\":\"step_2\",\"type\":\"uint256\"},{\"name\":\"step_3\",\"type\":\"uint256\"}],\"name\":\"setBonusSteps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFactor_3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumTGEUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"factor_1\",\"type\":\"uint32\"},{\"name\":\"factor_2\",\"type\":\"uint32\"},{\"name\":\"factor_3\",\"type\":\"uint32\"}],\"name\":\"setBonusFactors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumRecycledTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFactor_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxNumTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payoutPartial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"recycleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFactor_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstBonusStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondBonusStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMarketplace\",\"type\":\"address\"}],\"name\":\"setMarketplaceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPriceOfToken\",\"type\":\"uint256\"}],\"name\":\"setPriceOfToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketplaceAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyerAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ind\",\"type\":\"uint32\"}],\"name\":\"getTGEUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdBonusStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numTokens\",\"type\":\"uint256\"},{\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"recycleTokensForPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"initialPriceOfToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RecycleTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ExoToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000034f086f3b33b68400000000000000000000000000000000000000000000000000000000038d7ea4c68000","Library":"","SwarmSource":"bzzr://f0e727ab682544ed7f795bcdf5ded21d313eefb673a1903f4d57e2b39ac22aee"}]}