{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// Math helper functions\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/// @title DNNToken contract - Main DNN contract\r\n/// @author Dondrey Taylor - <dondrey@dnn.media>\r\ncontract DNNToken {\r\n    enum DNNSupplyAllocations {\r\n        EarlyBackerSupplyAllocation,\r\n        PRETDESupplyAllocation,\r\n        TDESupplyAllocation,\r\n        BountySupplyAllocation,\r\n        WriterAccountSupplyAllocation,\r\n        AdvisorySupplyAllocation,\r\n        PlatformSupplyAllocation\r\n    }\r\n    function balanceOf(address who) constant public returns (uint256);\r\n    function issueTokens(address, uint256, DNNSupplyAllocations) public pure returns (bool) {}\r\n}\r\n\r\n/// @author Dondrey Taylor - <dondrey@dnn.media>\r\ncontract DNNAdvisoryLockBox {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // DNN Token Contract\r\n  DNNToken public dnnToken;\r\n\r\n  // Addresses of the co-founders of DNN\r\n  address public cofounderA;\r\n  address public cofounderB;\r\n\r\n  // Amount of tokens that each advisor is entitled to\r\n  mapping(address => uint256) advisorsWithEntitledSupply;\r\n\r\n  // Amount of tokens that each advisor is entitled to\r\n\tmapping(address => uint256) advisorsTokensIssued;\r\n\r\n  // The last time that tokens were issued to each advisor\r\n\tmapping(address => uint256) advisorsTokensIssuedOn;\r\n\r\n  // Events\r\n\tevent AdvisorTokensSent(address to, uint256 issued, uint256 remaining);\r\n\tevent AdvisorAdded(address advisor);\r\n\tevent AdvisorAddressChanged(address oldaddress, address newaddress);\r\n  event NotWhitelisted(address to);\r\n  event NoTokensRemaining(address advisor);\r\n  event NextRedemption(uint256 nextTime);\r\n\r\n  // Checks to see if sender is a cofounder\r\n  modifier onlyCofounders() {\r\n      require (msg.sender == cofounderA || msg.sender == cofounderB);\r\n      _;\r\n  }\r\n\r\n  // Replace advisor address\r\n  function replaceAdvisorAddress(address oldaddress, address newaddress) public onlyCofounders {\r\n      // Check to see if the advisor's old address exists\r\n      if (advisorsWithEntitledSupply[oldaddress] > 0) {\r\n          advisorsWithEntitledSupply[newaddress] = advisorsWithEntitledSupply[oldaddress];\r\n          advisorsWithEntitledSupply[oldaddress] = 0;\r\n          emit AdvisorAddressChanged(oldaddress, newaddress);\r\n      }\r\n      else {\r\n          emit NotWhitelisted(oldaddress);\r\n      }\r\n  }\r\n\r\n  // Provides the remaining amount tokens to be issued to the advisor\r\n  function nextRedemptionTime(address advisorAddress) public view returns (uint256) {\r\n      return advisorsTokensIssuedOn[advisorAddress] == 0 ? now : (advisorsTokensIssuedOn[advisorAddress] + 30 days);\r\n  }\r\n\r\n  // Provides the remaining amount tokens to be issued to the advisor\r\n  function checkRemainingTokens(address advisorAddress) public view returns (uint256) {\r\n      return advisorsWithEntitledSupply[advisorAddress] - advisorsTokensIssued[advisorAddress];\r\n  }\r\n\r\n  // Checks if the specified address is whitelisted\r\n  function isWhitelisted(address advisorAddress) public view returns (bool) {\r\n     return advisorsWithEntitledSupply[advisorAddress] != 0;\r\n  }\r\n\r\n  // Add advisor address\r\n  function addAdvisor(address advisorAddress, uint256 entitledTokenAmount) public onlyCofounders {\r\n      advisorsWithEntitledSupply[advisorAddress] = entitledTokenAmount;\r\n      emit AdvisorAdded(advisorAddress);\r\n  }\r\n\r\n  // Amount of tokens that the advisor is entitled to\r\n  function advisorEntitlement(address advisorAddress) public view returns (uint256) {\r\n      return advisorsWithEntitledSupply[advisorAddress];\r\n  }\r\n\r\n  constructor() public\r\n  {\r\n      // Set token address\r\n      dnnToken = DNNToken(0x9D9832d1beb29CC949d75D61415FD00279f84Dc2);\r\n\r\n      // Set cofounder addresses\r\n      cofounderA = 0x3Cf26a9FE33C219dB87c2e50572e50803eFb2981;\r\n      cofounderB = 0x9FFE2aD5D76954C7C25be0cEE30795279c4Cab9f;\r\n  }\r\n\r\n\t// Handles incoming transactions\r\n\tfunction () public payable {\r\n\r\n      // Check to see if the advisor is within\r\n      // our whitelist\r\n      if (advisorsWithEntitledSupply[msg.sender] > 0) {\r\n\r\n          // Check to see if the advisor has any tokens left\r\n          if (advisorsTokensIssued[msg.sender] < advisorsWithEntitledSupply[msg.sender]) {\r\n\r\n              // Check to see if we can issue tokens to them. Advisors can redeem every 30 days for 10 months\r\n              if (advisorsTokensIssuedOn[msg.sender] == 0 || ((now - advisorsTokensIssuedOn[msg.sender]) >= 30 days)) {\r\n\r\n                  // Issue tokens to advisors\r\n                  uint256 tokensToIssue = advisorsWithEntitledSupply[msg.sender].div(10);\r\n\r\n                  // Update amount of tokens issued to this advisor\r\n                  advisorsTokensIssued[msg.sender] = advisorsTokensIssued[msg.sender].add(tokensToIssue);\r\n\r\n                  // Update the time that we last issued tokens to this advisor\r\n                  advisorsTokensIssuedOn[msg.sender] = now;\r\n\r\n                  // Allocation type will be advisory\r\n                  DNNToken.DNNSupplyAllocations allocationType = DNNToken.DNNSupplyAllocations.AdvisorySupplyAllocation;\r\n\r\n                  // Attempt to issue tokens\r\n                  if (!dnnToken.issueTokens(msg.sender, tokensToIssue, allocationType)) {\r\n                      revert();\r\n                  }\r\n                  else {\r\n                     emit AdvisorTokensSent(msg.sender, tokensToIssue, checkRemainingTokens(msg.sender));\r\n                  }\r\n              }\r\n              else {\r\n                   emit NextRedemption(advisorsTokensIssuedOn[msg.sender] + 30 days);\r\n              }\r\n          }\r\n          else {\r\n            emit NoTokensRemaining(msg.sender);\r\n          }\r\n      }\r\n      else {\r\n        emit NotWhitelisted(msg.sender);\r\n      }\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"advisorAddress\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cofounderB\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"advisorAddress\",\"type\":\"address\"}],\"name\":\"nextRedemptionTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"advisorAddress\",\"type\":\"address\"}],\"name\":\"advisorEntitlement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"advisorAddress\",\"type\":\"address\"}],\"name\":\"checkRemainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldaddress\",\"type\":\"address\"},{\"name\":\"newaddress\",\"type\":\"address\"}],\"name\":\"replaceAdvisorAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cofounderA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"advisorAddress\",\"type\":\"address\"},{\"name\":\"entitledTokenAmount\",\"type\":\"uint256\"}],\"name\":\"addAdvisor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dnnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"issued\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"AdvisorTokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"advisor\",\"type\":\"address\"}],\"name\":\"AdvisorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newaddress\",\"type\":\"address\"}],\"name\":\"AdvisorAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"NotWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"advisor\",\"type\":\"address\"}],\"name\":\"NoTokensRemaining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nextTime\",\"type\":\"uint256\"}],\"name\":\"NextRedemption\",\"type\":\"event\"}]","ContractName":"DNNAdvisoryLockBox","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f6d57cd70393c5272a0b94da1b14157bc7537079b9709b7db1d09e77059c6c74"}]}