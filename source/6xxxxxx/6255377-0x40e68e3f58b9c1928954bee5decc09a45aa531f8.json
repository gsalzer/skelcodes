{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\npragma experimental \"v0.5.0\";\r\n\r\ncontract Administration {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    event AdminSet(address _admin);\r\n    event OwnershipTransferred(address _previousOwner, address _newOwner);\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAddress(address _addr) {\r\n        require(_addr != address(0), \"must be non zero address\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function setAdmin(\r\n        address _newAdmin\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonZeroAddress(_newAdmin)\r\n        returns (bool)\r\n    {\r\n        require(_newAdmin != admin);\r\n        admin = _newAdmin;\r\n        emit AdminSet(_newAdmin);\r\n        return true;\r\n    }\r\n\r\n    function transferOwnership(\r\n        address _newOwner\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonZeroAddress(_newOwner)\r\n        returns (bool)\r\n    {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  // We use `pure` bbecause it promises that the value for the function depends ONLY\r\n  // on the function arguments\r\n    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface RTCoinInterface {\r\n    \r\n\r\n    /** Functions - ERC20 */\r\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\r\n\r\n    function transferFrom(address _owner, address _recipient, uint256 _amount) external returns (bool);\r\n\r\n    function approve(address _spender, uint256 _amount) external returns (bool approved);\r\n\r\n    /** Getters - ERC20 */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address _holder) external view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n    /** Getters - Custom */\r\n    function mint(address _recipient, uint256 _amount) external returns (bool);\r\n\r\n    function stakeContractAddress() external view returns (address);\r\n\r\n    function mergedMinerValidatorAddress() external view returns (address);\r\n    \r\n    /** Functions - Custom */\r\n    function freezeTransfers() external returns (bool);\r\n\r\n    function thawTransfers() external returns (bool);\r\n}\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ninterface ERC20Interface {\r\n    function owner() external view returns (address);\r\n    function decimals() external view returns (uint8);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n}\r\n\r\n/// @title RTCETH allows the sale of RTC for ETH with an updatable ETH price\r\n/// @author Postables, RTrade Technologies Ltd\r\n/// @dev We able V5 for safety features, see https://solidity.readthedocs.io/en/v0.4.24/security-considerations.html#take-warnings-seriously\r\ncontract RTCETH is Administration {\r\n    using SafeMath for uint256;\r\n\r\n    // we mark as constant private to save gas\r\n    address constant private TOKENADDRESS = 0xecc043b92834c1ebDE65F2181B59597a6588D616;\r\n    RTCoinInterface constant public RTI = RTCoinInterface(TOKENADDRESS);\r\n    string constant public VERSION = \"production\";\r\n\r\n    address public hotWallet;\r\n    uint256 public ethUSD;\r\n    uint256 public weiPerRtc;\r\n    bool   public locked;\r\n\r\n    event EthUsdPriceUpdated(uint256 _ethUSD);\r\n    event EthPerRtcUpdated(uint256 _ethPerRtc);\r\n    event RtcPurchased(uint256 _rtcPurchased);\r\n    event ForeignTokenTransfer(address indexed _sender, address indexed _recipient, uint256 _amount);\r\n\r\n    modifier notLocked() {\r\n        require(!locked, \"sale must not be locked\");\r\n        _;\r\n    }\r\n\r\n    modifier isLocked() {\r\n        require(locked, \"sale must be locked\");\r\n        _;\r\n    }\r\n\r\n    function lockSales()\r\n        public\r\n        onlyAdmin\r\n        notLocked\r\n        returns (bool)\r\n    {\r\n        locked = true;\r\n        return true;\r\n    }\r\n\r\n    function unlockSales()\r\n        public\r\n        onlyAdmin\r\n        isLocked\r\n        returns (bool)\r\n    {\r\n        locked = false;\r\n        return true;\r\n    }\r\n\r\n    constructor() public {\r\n        // prevent deployment if the token address isnt set\r\n        require(TOKENADDRESS != address(0), \"token address cant be unset\");\r\n        locked = true;\r\n    }\r\n\r\n    function () external payable {\r\n        require(msg.data.length == 0, \"data length must be 0\");\r\n        require(buyRtc(), \"buying rtc failed\");\r\n    }\r\n\r\n    function updateEthPrice(\r\n        uint256 _ethUSD)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        ethUSD = _ethUSD;\r\n        uint256 oneEth = 1 ether;\r\n        // here we calculate how many ETH 1 USD is worth\r\n        uint256 oneUsdOfEth = oneEth.div(ethUSD);\r\n        // for the duration of this contract, RTC will be at a fixed price of 0.125USD, which divides into 1 8 times\r\n        weiPerRtc = oneUsdOfEth.div(8);\r\n        emit EthUsdPriceUpdated(ethUSD);\r\n        emit EthPerRtcUpdated(weiPerRtc);\r\n        return true;\r\n    }\r\n\r\n    function setHotWallet(\r\n        address _hotWalletAddress)\r\n        public\r\n        onlyOwner\r\n        isLocked\r\n        returns (bool)\r\n    {\r\n        hotWallet = _hotWalletAddress;\r\n        return true;\r\n    }\r\n\r\n    function withdrawRemainingRtc()\r\n        public\r\n        onlyOwner\r\n        isLocked\r\n        returns (bool)\r\n    {\r\n        require(RTI.transfer(msg.sender, RTI.balanceOf(address(this))), \"transfer failed\");\r\n        return true;\r\n    }\r\n\r\n    function buyRtc()\r\n        public\r\n        payable\r\n        notLocked\r\n        returns (bool)\r\n    {\r\n        require(hotWallet != address(0), \"hot wallet cant be unset\");\r\n        require(msg.value > 0, \"msg value must be greater than zero\");\r\n        uint256 rtcPurchased = (msg.value.mul(1 ether)).div(weiPerRtc);\r\n        hotWallet.transfer(msg.value);\r\n        require(RTI.transfer(msg.sender, rtcPurchased), \"transfer failed\");\r\n        emit RtcPurchased(rtcPurchased);\r\n        return true;\r\n    }\r\n\r\n    /** @notice Allow us to transfer tokens that someone might've accidentally sent to this contract\r\n        @param _tokenAddress this is the address of the token contract\r\n        @param _recipient This is the address of the person receiving the tokens\r\n        @param _amount This is the amount of tokens to send\r\n     */\r\n    function transferForeignToken(\r\n        address _tokenAddress,\r\n        address _recipient,\r\n        uint256 _amount)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(_recipient != address(0), \"recipient address can't be empty\");\r\n        // don't allow us to transfer RTC tokens stored in this contract\r\n        require(_tokenAddress != TOKENADDRESS, \"token can't be RTC\");\r\n        ERC20Interface eI = ERC20Interface(_tokenAddress);\r\n        require(eI.transfer(_recipient, _amount), \"token transfer failed\");\r\n        emit ForeignTokenTransfer(msg.sender, _recipient, _amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unlockSales\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiPerRtc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethUSD\",\"type\":\"uint256\"}],\"name\":\"updateEthPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hotWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RTI\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyRtc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hotWalletAddress\",\"type\":\"address\"}],\"name\":\"setHotWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRemainingRtc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockSales\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ethUSD\",\"type\":\"uint256\"}],\"name\":\"EthUsdPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ethPerRtc\",\"type\":\"uint256\"}],\"name\":\"EthPerRtcUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_rtcPurchased\",\"type\":\"uint256\"}],\"name\":\"RtcPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ForeignTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RTCETH","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ca41d479a89ecda0d55eae705e47e46e2fc6a8034efbaf03310e0ad9db2816c4"}]}