{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n\r\n/**\r\n\r\n * @title SafeMath\r\n\r\n * @dev Math operations with safety checks that throw on error\r\n\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n    /**\r\n\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n\r\n     */\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n\r\n        // benefit is lost if 'b' is also tested.\r\n\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\r\n        if (a == 0) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n\r\n        c = a * b;\r\n\r\n        assert(c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n\r\n     */\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n        // uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return a / b;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\r\n     */\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Adds two numbers, throws on overflow.\r\n\r\n     */\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\r\n        c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * Utility library of inline functions on addresses\r\n\r\n */\r\n\r\nlibrary AddressUtils {\r\n\r\n\r\n    /**\r\n\r\n     * Returns whether the target address is a contract\r\n\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n\r\n     *  as the code is not actually created until after the constructor finishes.\r\n\r\n     * @param addr address to check\r\n\r\n     * @return whether the target address is a contract\r\n\r\n     */\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n\r\n        // than to check the size of the code at that address.\r\n\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n\r\n        // for more details about how this works.\r\n\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n\r\n        // contracts then.\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n\r\n        assembly { size := extcodesize(addr) }\r\n\r\n        return size > 0;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title ERC721 token receiver interface\r\n\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n\r\n * from ERC721 asset contracts.\r\n\r\n */\r\n\r\ncontract ERC721Receiver {\r\n\r\n    /**\r\n\r\n    * @dev Magic value to be returned upon successful reception of an NFT\r\n\r\n    *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n\r\n    *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n\r\n    */\r\n\r\n    bytes4 internal constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n\r\n    /**\r\n\r\n    * @notice Handle the receipt of an NFT\r\n\r\n    * @dev The ERC721 smart contract calls this function on the recipient\r\n\r\n    * after a `safetransfer`. This function MAY throw to revert and reject the\r\n\r\n    * transfer. This function MUST use 50,000 gas or less. Return of other\r\n\r\n    * than the magic value MUST result in the transaction being reverted.\r\n\r\n    * Note: the contract address is always the message sender.\r\n\r\n    * @param _from The sending address\r\n\r\n    * @param _tokenId The NFT identifier which is being transfered\r\n\r\n    * @param _data Additional data with no specified format\r\n\r\n    * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n\r\n    */\r\n\r\n    function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n\r\n}\r\n\r\n\r\n/**\r\n\r\n * @title ERC165\r\n\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n\r\n */\r\n\r\ninterface ERC165 {\r\n\r\n\r\n    /**\r\n\r\n     * @notice Query if a contract implements an interface\r\n\r\n     * @param _interfaceId The interface identifier, as specified in ERC-165\r\n\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n\r\n     * uses less than 30,000 gas.\r\n\r\n     */\r\n\r\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\n */\r\n\r\ncontract ERC721Basic is ERC165 {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n\r\n    function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n\r\n    function approve(address _to, uint256 _tokenId) public;\r\n\r\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) public;\r\n\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\n */\r\n\r\ncontract ERC721Enumerable is ERC721Basic {\r\n\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n\r\n    function tokenByIndex(uint256 _index) public view returns (uint256);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\n */\r\n\r\ncontract ERC721Metadata is ERC721Basic {\r\n\r\n    function name() external view returns (string _name);\r\n\r\n    function symbol() external view returns (string _symbol);\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\n */\r\n\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract ERC721Holder is ERC721Receiver {\r\n\r\n    function onERC721Received(address, uint256, bytes) public returns(bytes4) {\r\n\r\n        return ERC721_RECEIVED;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title SupportsInterfaceWithLookup\r\n\r\n * @author Matt Condon (@shrugs)\r\n\r\n * @dev Implements ERC165 using a lookup table.\r\n\r\n */\r\n\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n    bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n\r\n     * 0x01ffc9a7 ===\r\n\r\n     *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n\r\n     */\r\n\r\n\r\n    /**\r\n\r\n     * @dev a mapping of interface id to whether or not it's supported\r\n\r\n     */\r\n\r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n\r\n    /**\r\n\r\n     * @dev A contract implementing SupportsInterfaceWithLookup\r\n\r\n     * implement ERC165 itself\r\n\r\n     */\r\n\r\n    constructor() public {\r\n\r\n        _registerInterface(InterfaceId_ERC165);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev implement supportsInterface(bytes4) using a lookup table\r\n\r\n     */\r\n\r\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool) {\r\n\r\n        return supportedInterfaces[_interfaceId];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev private method for registering an interface\r\n\r\n     */\r\n\r\n    function _registerInterface(bytes4 _interfaceId) internal {\r\n\r\n        require(_interfaceId != 0xffffffff);\r\n\r\n        supportedInterfaces[_interfaceId] = true;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\n */\r\n\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n\r\n    bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n\r\n    /*\r\n\r\n     * 0x80ac58cd ===\r\n\r\n     *   bytes4(keccak256('balanceOf(address)')) ^\r\n\r\n     *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n\r\n     *   bytes4(keccak256('approve(address,uint256)')) ^\r\n\r\n     *   bytes4(keccak256('getApproved(uint256)')) ^\r\n\r\n     *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n\r\n     *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n\r\n     *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n\r\n     *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n\r\n     *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n\r\n     */\r\n\r\n\r\n    bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n\r\n    /*\r\n\r\n     * 0x4f558e79 ===\r\n\r\n     *   bytes4(keccak256('exists(uint256)'))\r\n\r\n     */\r\n\r\n\r\n    using SafeMath for uint256;\r\n\r\n    using AddressUtils for address;\r\n\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n\r\n    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n\r\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n\r\n    // Mapping from token ID to owner\r\n\r\n    mapping (uint256 => address) internal tokenOwner;\r\n\r\n\r\n    // Mapping from token ID to approved address\r\n\r\n    mapping (uint256 => address) internal tokenApprovals;\r\n\r\n\r\n    // Mapping from owner to number of owned token\r\n\r\n    mapping (address => uint256) internal ownedTokensCount;\r\n\r\n\r\n    // Mapping from owner to operator approvals\r\n\r\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n\r\n    /**\r\n\r\n     * @dev Guarantees msg.sender is owner of the given token\r\n\r\n     * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n\r\n     */\r\n\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n\r\n        require(ownerOf(_tokenId) == msg.sender);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n\r\n     * @param _tokenId uint256 ID of the token to validate\r\n\r\n     */\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n\r\n        require(isApprovedOrOwner(msg.sender, _tokenId));\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n    constructor() public {\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n\r\n        _registerInterface(InterfaceId_ERC721);\r\n\r\n        _registerInterface(InterfaceId_ERC721Exists);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the balance of the specified address\r\n\r\n     * @param _owner address to query the balance of\r\n\r\n     * @return uint256 representing the amount owned by the passed address\r\n\r\n     */\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n\r\n        require(_owner != address(0));\r\n\r\n        return ownedTokensCount[_owner];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the owner of the specified token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to query the owner of\r\n\r\n     * @return owner address currently marked as the owner of the given token ID\r\n\r\n     */\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n\r\n        address owner = tokenOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n\r\n        return owner;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns whether the specified token exists\r\n\r\n     * @param _tokenId uint256 ID of the token to query the existence of\r\n\r\n     * @return whether the token exists\r\n\r\n     */\r\n\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n\r\n        address owner = tokenOwner[_tokenId];\r\n\r\n        return owner != address(0);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Approves another address to transfer the given token ID\r\n\r\n     * @dev The zero address indicates there is no approved address.\r\n\r\n     * @dev There can only be one approved address per token at a given time.\r\n\r\n     * @dev Can only be called by the token owner or an approved operator.\r\n\r\n     * @param _to address to be approved for the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be approved\r\n\r\n     */\r\n\r\n    function approve(address _to, uint256 _tokenId) public {\r\n\r\n        address owner = ownerOf(_tokenId);\r\n\r\n        require(_to != owner);\r\n\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n\r\n        tokenApprovals[_tokenId] = _to;\r\n\r\n        emit Approval(owner, _to, _tokenId);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n\r\n     * @param _tokenId uint256 ID of the token to query the approval of\r\n\r\n     * @return address currently approved for the given token ID\r\n\r\n     */\r\n\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n\r\n        return tokenApprovals[_tokenId];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets or unsets the approval of a given operator\r\n\r\n     * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n\r\n     * @param _to operator address to set the approval\r\n\r\n     * @param _approved representing the status of the approval to be set\r\n\r\n     */\r\n\r\n    function setApprovalForAll(address _to, bool _approved) public {\r\n\r\n        require(_to != msg.sender);\r\n\r\n        operatorApprovals[msg.sender][_to] = _approved;\r\n\r\n        emit ApprovalForAll(msg.sender, _to, _approved);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Tells whether an operator is approved by a given owner\r\n\r\n     * @param _owner owner address which you want to query the approval of\r\n\r\n     * @param _operator operator address which you want to query the approval of\r\n\r\n     * @return bool whether the given operator is approved by the given owner\r\n\r\n     */\r\n\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n\r\n        return operatorApprovals[_owner][_operator];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers the ownership of a given token ID to another address\r\n\r\n     * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n\r\n     * @dev Requires the msg sender to be the owner, approved, or operator\r\n\r\n     * @param _from current owner of the token\r\n\r\n     * @param _to address to receive the ownership of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n\r\n    */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n\r\n        require(_from != address(0));\r\n\r\n        require(_to != address(0));\r\n\r\n\r\n        clearApproval(_from, _tokenId);\r\n\r\n        removeTokenFrom(_from, _tokenId);\r\n\r\n        addTokenTo(_to, _tokenId);\r\n\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n\r\n     * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n\r\n     *  which is called upon a safe transfer, and return the magic value\r\n\r\n     *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n\r\n     *  the transfer is reverted.\r\n\r\n     * @dev Requires the msg sender to be the owner, approved, or operator\r\n\r\n     * @param _from current owner of the token\r\n\r\n     * @param _to address to receive the ownership of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n\r\n    */\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n\r\n        // solium-disable-next-line arg-overflow\r\n\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n\r\n     * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n\r\n     *  which is called upon a safe transfer, and return the magic value\r\n\r\n     *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n\r\n     *  the transfer is reverted.\r\n\r\n     * @dev Requires the msg sender to be the owner, approved, or operator\r\n\r\n     * @param _from current owner of the token\r\n\r\n     * @param _to address to receive the ownership of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n\r\n     * @param _data bytes data to send along with a safe transfer check\r\n\r\n     */\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public canTransfer(_tokenId) {\r\n\r\n        transferFrom(_from, _to, _tokenId);\r\n\r\n        // solium-disable-next-line arg-overflow\r\n\r\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns whether the given spender can transfer a given token ID\r\n\r\n     * @param _spender address of the spender to query\r\n\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n\r\n     *  is an operator of the owner, or is the owner of the token\r\n\r\n     */\r\n\r\n    function isApprovedOrOwner(\r\n\r\n        address _spender,\r\n\r\n        uint256 _tokenId\r\n\r\n    )\r\n\r\n        internal\r\n\r\n        view\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        address owner = ownerOf(_tokenId);\r\n\r\n        // Disable solium check because of\r\n\r\n        // https://github.com/duaraghav8/Solium/issues/175\r\n\r\n        // solium-disable-next-line operator-whitespace\r\n\r\n        return (\r\n\r\n            _spender == owner ||\r\n\r\n            getApproved(_tokenId) == _spender ||\r\n\r\n            isApprovedForAll(owner, _spender)\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to mint a new token\r\n\r\n     * @dev Reverts if the given token ID already exists\r\n\r\n     * @param _to The address that will own the minted token\r\n\r\n     * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n\r\n     */\r\n\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n\r\n        require(_to != address(0));\r\n\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(address(0), _to, _tokenId);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to clear current approval of a given token ID\r\n\r\n     * @dev Reverts if the given address is not indeed the owner of the token\r\n\r\n     * @param _owner owner of the token\r\n\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n\r\n     */\r\n\r\n    function clearApproval(address _owner, uint256 _tokenId) internal {\r\n\r\n        require(ownerOf(_tokenId) == _owner);\r\n\r\n        if (tokenApprovals[_tokenId] != address(0)) {\r\n\r\n            tokenApprovals[_tokenId] = address(0);\r\n\r\n            emit Approval(_owner, address(0), _tokenId);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to add a token ID to the list of a given address\r\n\r\n     * @param _to address representing the new owner of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n\r\n     */\r\n\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n\r\n        require(tokenOwner[_tokenId] == address(0));\r\n\r\n        tokenOwner[_tokenId] = _to;\r\n\r\n        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to remove a token ID from the list of a given address\r\n\r\n     * @param _from address representing the previous owner of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n\r\n     */\r\n\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n\r\n        require(ownerOf(_tokenId) == _from);\r\n\r\n        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n\r\n        tokenOwner[_tokenId] = address(0);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to invoke `onERC721Received` on a target address\r\n\r\n     * The call is not executed if the target address is not a contract\r\n\r\n     * @param _from address representing the previous owner of the given token ID\r\n\r\n     * @param _to target address that will receive the tokens\r\n\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n\r\n     * @param _data bytes optional data to send along with the call\r\n\r\n     * @return whether the call correctly returned the expected magic value\r\n\r\n     */\r\n\r\n    function checkAndCallSafeTransfer(\r\n\r\n        address _from,\r\n\r\n        address _to,\r\n\r\n        uint256 _tokenId,\r\n\r\n        bytes _data\r\n\r\n    )\r\n\r\n        internal\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        if (!_to.isContract()) {\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n\r\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n\r\n        _from, _tokenId, _data);\r\n\r\n        return (retval == ERC721_RECEIVED);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @title Ownable\r\n\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n\r\n */\r\n\r\n contract Ownable {\r\n\r\n     address public owner;\r\n\r\n     address public pendingOwner;\r\n\r\n     address public manager;\r\n\r\n\r\n     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n     /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n     modifier onlyOwner() {\r\n\r\n         require(msg.sender == owner);\r\n\r\n         _;\r\n\r\n     }\r\n\r\n\r\n     /**\r\n\r\n      * @dev Modifier throws if called by any account other than the manager.\r\n\r\n      */\r\n\r\n     modifier onlyManager() {\r\n\r\n         require(msg.sender == manager);\r\n\r\n         _;\r\n\r\n     }\r\n\r\n\r\n     /**\r\n\r\n      * @dev Modifier throws if called by any account other than the pendingOwner.\r\n\r\n      */\r\n\r\n     modifier onlyPendingOwner() {\r\n\r\n         require(msg.sender == pendingOwner);\r\n\r\n         _;\r\n\r\n     }\r\n\r\n\r\n     constructor() public {\r\n\r\n         owner = msg.sender;\r\n\r\n     }\r\n\r\n\r\n     /**\r\n\r\n      * @dev Allows the current owner to set the pendingOwner address.\r\n\r\n      * @param newOwner The address to transfer ownership to.\r\n\r\n      */\r\n\r\n     function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n         pendingOwner = newOwner;\r\n\r\n     }\r\n\r\n\r\n     /**\r\n\r\n      * @dev Allows the pendingOwner address to finalize the transfer.\r\n\r\n      */\r\n\r\n     function claimOwnership() public onlyPendingOwner {\r\n\r\n         emit OwnershipTransferred(owner, pendingOwner);\r\n\r\n         owner = pendingOwner;\r\n\r\n         pendingOwner = address(0);\r\n\r\n     }\r\n\r\n\r\n     /**\r\n\r\n      * @dev Sets the manager address.\r\n\r\n      * @param _manager The manager address.\r\n\r\n      */\r\n\r\n     function setManager(address _manager) public onlyOwner {\r\n\r\n         require(_manager != address(0));\r\n\r\n         manager = _manager;\r\n\r\n     }\r\n\r\n\r\n }\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @title Full ERC721 Token\r\n\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n\r\n * Moreover, it includes approve all functionality using operator terminology\r\n\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\n */\r\n\r\ncontract AviationSecurityToken is SupportsInterfaceWithLookup, ERC721, ERC721BasicToken, Ownable {\r\n\r\n\r\n    bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n\r\n    /**\r\n\r\n     * 0x780e9d63 ===\r\n\r\n     *   bytes4(keccak256('totalSupply()')) ^\r\n\r\n     *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n\r\n     *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n\r\n     */\r\n\r\n\r\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n\r\n    /**\r\n\r\n     * 0x5b5e139f ===\r\n\r\n     *   bytes4(keccak256('name()')) ^\r\n\r\n     *   bytes4(keccak256('symbol()')) ^\r\n\r\n     *   bytes4(keccak256('tokenURI(uint256)'))\r\n\r\n     */\r\n\r\n\r\n    // Token name\r\n\r\n    string public name_ = \"AviationSecurityToken\";\r\n\r\n\r\n    // Token symbol\r\n\r\n    string public symbol_ = \"AVNS\";\r\n\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n\r\n    mapping(address => uint256[]) internal ownedTokens;\r\n\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n\r\n    mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n\r\n    // Array with all token ids, used for enumeration\r\n\r\n    uint256[] internal allTokens;\r\n\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n\r\n    mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n\r\n    // Optional mapping for token URIs\r\n\r\n    mapping(uint256 => string) internal tokenURIs;\r\n\r\n\r\n    struct Data{\r\n\r\n        string liscence;\r\n\r\n        string URL;\r\n\r\n    }\r\n\r\n    \r\n\r\n    mapping(uint256 => Data) internal tokenData;\r\n\r\n    /**\r\n\r\n     * @dev Constructor function\r\n\r\n     */\r\n\r\n    constructor() public {\r\n\r\n\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n\r\n        _registerInterface(InterfaceId_ERC721Enumerable);\r\n\r\n        _registerInterface(InterfaceId_ERC721Metadata);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev External function to mint a new token\r\n\r\n     * @dev Reverts if the given token ID already exists\r\n\r\n     * @param _to address the beneficiary that will own the minted token\r\n\r\n     */\r\n\r\n    function mint(address _to, uint256 _id) external onlyManager {\r\n\r\n        _mint(_to, _id);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the token name\r\n\r\n     * @return string representing the token name\r\n\r\n     */\r\n\r\n    function name() external view returns (string) {\r\n\r\n        return name_;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the token symbol\r\n\r\n     * @return string representing the token symbol\r\n\r\n     */\r\n\r\n    function symbol() external view returns (string) {\r\n\r\n        return symbol_;\r\n\r\n    }\r\n\r\n\r\n    function arrayOfTokensByAddress(address _holder) public view returns(uint256[]) {\r\n\r\n        return ownedTokens[_holder];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns an URI for a given token ID\r\n\r\n     * @dev Throws if the token ID does not exist. May return an empty string.\r\n\r\n     * @param _tokenId uint256 ID of the token to query\r\n\r\n     */\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string) {\r\n\r\n        require(exists(_tokenId));\r\n\r\n        return tokenURIs[_tokenId];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n\r\n     * @param _owner address owning the tokens list to be accessed\r\n\r\n     * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n\r\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n\r\n     */\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n\r\n        require(_index < balanceOf(_owner));\r\n\r\n        return ownedTokens[_owner][_index];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the total amount of tokens stored by the contract\r\n\r\n     * @return uint256 representing the total amount of tokens\r\n\r\n     */\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n\r\n        return allTokens.length;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the token ID at a given index of all the tokens in this contract\r\n\r\n     * @dev Reverts if the index is greater or equal to the total number of tokens\r\n\r\n     * @param _index uint256 representing the index to be accessed of the tokens list\r\n\r\n     * @return uint256 token ID at the given index of the tokens list\r\n\r\n     */\r\n\r\n    function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n\r\n        require(_index < totalSupply());\r\n\r\n        return allTokens[_index];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to set the token URI for a given token\r\n\r\n     * @dev Reverts if the token ID does not exist\r\n\r\n     * @param _tokenId uint256 ID of the token to set its URI\r\n\r\n     * @param _uri string URI to assign\r\n\r\n     */\r\n\r\n    function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n\r\n        require(exists(_tokenId));\r\n\r\n        tokenURIs[_tokenId] = _uri;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to add a token ID to the list of a given address\r\n\r\n     * @param _to address representing the new owner of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n\r\n     */\r\n\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n\r\n        super.addTokenTo(_to, _tokenId);\r\n\r\n        uint256 length = ownedTokens[_to].length;\r\n\r\n        ownedTokens[_to].push(_tokenId);\r\n\r\n        ownedTokensIndex[_tokenId] = length;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to remove a token ID from the list of a given address\r\n\r\n     * @param _from address representing the previous owner of the given token ID\r\n\r\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n\r\n     */\r\n\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n\r\n        super.removeTokenFrom(_from, _tokenId);\r\n\r\n\r\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n\r\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n\r\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n\r\n        ownedTokens[_from][tokenIndex] = lastToken;\r\n\r\n        ownedTokens[_from][lastTokenIndex] = 0;\r\n\r\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are\r\n\r\n        // going to be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are\r\n\r\n        // first swapping the lastToken to the first position, and then dropping the element placed in the last\r\n\r\n        // position of the list\r\n\r\n\r\n        ownedTokens[_from].length--;\r\n\r\n        ownedTokensIndex[_tokenId] = 0;\r\n\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to mint a new token\r\n\r\n     * @dev Reverts if the given token ID already exists\r\n\r\n     * @param _to address the beneficiary that will own the minted token\r\n\r\n     */\r\n\r\n    function _mint(address _to, uint256 _id) internal {\r\n\r\n        allTokens.push(_id);\r\n\r\n        allTokensIndex[_id] = _id;\r\n\r\n        super._mint(_to, _id);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function addTokenData(uint _tokenId, string _liscence, string _URL) public {\r\n\r\n            require(ownerOf(_tokenId) == msg.sender);\r\n\r\n            tokenData[_tokenId].liscence = _liscence;\r\n\r\n            tokenData[_tokenId].URL = _URL;\r\n\r\n\r\n        \r\n\r\n    }\r\n\r\n    \r\n\r\n    function getTokenData(uint _tokenId) public view returns(string Liscence, string URL){\r\n\r\n        require(exists(_tokenId));\r\n\r\n        Liscence = tokenData[_tokenId].liscence;\r\n\r\n        URL = tokenData[_tokenId].URL;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_liscence\",\"type\":\"string\"},{\"name\":\"_URL\",\"type\":\"string\"}],\"name\":\"addTokenData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol_\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"name\":\"Liscence\",\"type\":\"string\"},{\"name\":\"URL\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"arrayOfTokensByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name_\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"AviationSecurityToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2043f77c5621c3334437429807f1a1c2db8c7448868ae3f146262584dea956c2"}]}