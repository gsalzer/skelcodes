{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract Notary is Ownable {\r\n\r\n    struct Record {\r\n        bytes notarisedData;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    mapping(bytes32 => Record) public records;\r\n    uint256 public notarisationFee;\r\n\r\n    /**\r\n    * @dev initialize Notary\r\n    * @param _owner of the notary\r\n    */\r\n    constructor (address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev make sure that the call has the notarisation cost\r\n    */\r\n    modifier callHasNotarisationCost() {\r\n        require(msg.value >= notarisationFee);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev set notarisation cost\r\n    * @param _fee to notarize a record\r\n    */\r\n    function setNotarisationFee(uint256 _fee) public onlyOwner {\r\n        notarisationFee = _fee;\r\n    }\r\n\r\n    /**\r\n    * @dev fetch a Record by it's data notarised data\r\n    * @param _notarisedData the data that got notarised\r\n    */\r\n    function record(bytes _notarisedData) public constant returns(bytes, uint256) {\r\n        Record memory r = records[keccak256(_notarisedData)];\r\n        return (r.notarisedData, r.timestamp);\r\n    }\r\n\r\n    /**\r\n    * @dev notarize a new record\r\n    * @param _record the record to notarize\r\n    */\r\n    function notarize(bytes _record)\r\n        public\r\n        payable\r\n        callHasNotarisationCost\r\n    {\r\n\r\n        // create hash of record to to have an unique and deterministic key\r\n        bytes32 recordHash = keccak256(_record);\r\n\r\n        // make sure the record hasn't been notarised\r\n        require(records[recordHash].timestamp == 0);\r\n\r\n        // transfer notarisation fee to owner\r\n        if (owner != address(0)){\r\n            owner.transfer(address(this).balance);\r\n        }\r\n\r\n        // notarize record\r\n        records[recordHash] = Record({\r\n            notarisedData: _record,\r\n            timestamp: now\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract NotaryMulti {\r\n\r\n    Notary public notary;\r\n\r\n    constructor(Notary _notary) public {\r\n        notary = _notary;\r\n    }\r\n\r\n    function notaryFee() public constant returns (uint256) {\r\n        return 2 * notary.notarisationFee();\r\n    }\r\n\r\n    /**\r\n    * @dev notarize two records\r\n    * @param _firstRecord is the first record that should be notarized\r\n    * @param _secondRecord is the second record that should be notarized\r\n    */\r\n    function notarizeTwo(bytes _firstRecord, bytes _secondRecord) payable public {\r\n        notary.notarize(_firstRecord);\r\n        notary.notarize(_secondRecord);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_firstRecord\",\"type\":\"bytes\"},{\"name\":\"_secondRecord\",\"type\":\"bytes\"}],\"name\":\"notarizeTwo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notaryFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_notary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"NotaryMulti","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000460637d6e57c7b404a81297fa46faea5b3170261","Library":"","SwarmSource":"bzzr://2cc3ce3166f146856442a0298a74aefd83d170a2371aa464613c2a3c6688e64c"}]}