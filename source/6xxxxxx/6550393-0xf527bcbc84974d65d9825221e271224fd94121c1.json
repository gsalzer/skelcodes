{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ninterface tokenInterface {\r\n    function transfer(address reciever, uint amount) external;\r\n    function balanceOf(address owner) external returns (uint256);\r\n}\r\n\r\ncontract dapMultisig {\r\n\r\n    /*\r\n    * Types\r\n    */\r\n    struct Transaction {\r\n        uint id;\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        TxnStatus status;\r\n        address[] confirmed;\r\n        address creator;\r\n    }\r\n    \r\n    struct tokenTransaction {\r\n        uint id;\r\n        tokenInterface token;\r\n        address reciever;\r\n        uint value;\r\n        address[] confirmed;\r\n        TxnStatus status;\r\n        address creator;\r\n    }\r\n    \r\n    struct Log {\r\n        uint amount;\r\n        address sender;\r\n    }\r\n    \r\n    enum TxnStatus { Unconfirmed, Pending, Executed }\r\n    \r\n    /*\r\n    * Modifiers\r\n    */\r\n    modifier onlyOwner () {\r\n        bool found;\r\n        for (uint i = 0;i<owners.length;i++){\r\n            if (owners[i] == msg.sender){\r\n                found = true;\r\n            }\r\n        }\r\n        if (found){\r\n            _;\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * Events\r\n    */\r\n    event WalletCreated(address creator, address[] owners);\r\n    event TxnSumbitted(uint id);\r\n    event TxnConfirmed(uint id);\r\n    event topUpBalance(uint value);\r\n    event tokenTxnConfirmed(uint id, address owner);\r\n    event tokenTxnExecuted(address token, uint256 value, address reciever);\r\n    /*\r\n    * Storage\r\n    */\r\n    bytes32 public name;\r\n    address public creator;\r\n    uint public allowance;\r\n    address[] public owners;\r\n    Log[] logs;\r\n    Transaction[] transactions;\r\n    tokenTransaction[] tokenTransactions;\r\n    uint public approvalsreq;\r\n    \r\n    /*\r\n    * Constructor\r\n    */\r\n    constructor (uint _approvals, address[] _owners, bytes32 _name) public payable{\r\n        /* check if name was actually given */\r\n        require(_name.length != 0);\r\n        \r\n        /*check if approvals num equals or greater than given owners num*/\r\n        require(_approvals <= _owners.length);\r\n        \r\n        name = _name;\r\n        creator = msg.sender;\r\n        allowance = msg.value;\r\n        owners = _owners;\r\n        approvalsreq = _approvals;\r\n        emit WalletCreated(msg.sender, _owners);\r\n    }\r\n\r\n    //fallback to accept funds without method signature\r\n    function () external payable {\r\n        allowance += msg.value;\r\n    }\r\n    \r\n    /*\r\n    * Getters\r\n    */\r\n\r\n    function getOwners() external view returns (address[]){\r\n        return owners;\r\n    }\r\n    \r\n    function getTxnNum() external view returns (uint){\r\n        return transactions.length;\r\n    }\r\n    \r\n    function getTxn(uint _id) external view returns (uint, address, uint, bytes, TxnStatus, address[], address){\r\n        Transaction storage txn = transactions[_id];\r\n        return (txn.id, txn.destination, txn.value, txn.data, txn.status, txn.confirmed, txn.creator);\r\n    }\r\n    \r\n    function getLogsNum() external view returns (uint){\r\n        return logs.length;\r\n    }\r\n    \r\n    function getLog(uint logId) external view returns (address, uint){\r\n        return(logs[logId].sender, logs[logId].amount);\r\n    }\r\n    \r\n    function getTokenTxnNum() external view returns (uint){\r\n        return tokenTransactions.length;\r\n    }\r\n    \r\n    function getTokenTxn(uint _id) external view returns(uint, address, address, uint256, address[], TxnStatus, address){\r\n        tokenTransaction storage txn = tokenTransactions[_id];\r\n        return (txn.id, txn.token, txn.reciever, txn.value, txn.confirmed, txn.status, txn.creator);\r\n    }\r\n    \r\n    /*\r\n    * Methods\r\n    */\r\n\r\n    function topBalance() external payable {\r\n        require (msg.value > 0 wei);\r\n        allowance += msg.value;\r\n        \r\n        /* create new log entry */\r\n        uint loglen = logs.length++;\r\n        logs[loglen].amount = msg.value;\r\n        logs[loglen].sender = msg.sender;\r\n        emit topUpBalance(msg.value);\r\n    }\r\n    \r\n    function submitTransaction(address _destination, uint _value, bytes _data) onlyOwner () external returns (bool) {\r\n        uint newTxId = transactions.length++;\r\n        transactions[newTxId].id = newTxId;\r\n        transactions[newTxId].destination = _destination;\r\n        transactions[newTxId].value = _value;\r\n        transactions[newTxId].data = _data;\r\n        transactions[newTxId].creator = msg.sender;\r\n        transactions[newTxId].confirmed.push(msg.sender);\r\n        if (transactions[newTxId].confirmed.length == approvalsreq){\r\n            transactions[newTxId].status = TxnStatus.Pending;\r\n        }\r\n        emit TxnSumbitted(newTxId);\r\n        return true;\r\n    }\r\n\r\n    function confirmTransaction(uint txId) onlyOwner() external returns (bool){\r\n        Transaction storage txn = transactions[txId];\r\n\r\n        //check whether this owner has already confirmed this txn\r\n        bool f;\r\n        for (uint8 i = 0; i<txn.confirmed.length;i++){\r\n            if (txn.confirmed[i] == msg.sender){\r\n                f = true;\r\n            }\r\n        }\r\n        //push sender address into confirmed array if haven't found\r\n        require(!f);\r\n        txn.confirmed.push(msg.sender);\r\n        \r\n        if (txn.confirmed.length == approvalsreq){\r\n            txn.status = TxnStatus.Pending;\r\n        }\r\n        \r\n        //fire event\r\n        emit TxnConfirmed(txId);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function executeTxn(uint txId) onlyOwner() external returns (bool){\r\n        \r\n        Transaction storage txn = transactions[txId];\r\n        \r\n        /* check txn status */\r\n        require(txn.status == TxnStatus.Pending);\r\n        \r\n        /* check whether wallet has sufficient balance to send this transaction */\r\n        require(allowance >= txn.value);\r\n        \r\n        /* send transaction */\r\n        address dest = txn.destination;\r\n        uint val = txn.value;\r\n        bytes memory dat = txn.data;\r\n        assert(dest.call.value(val)(dat));\r\n            \r\n        /* change transaction's status to executed */\r\n        txn.status = TxnStatus.Executed;\r\n\r\n        /* change wallet's balance */\r\n        allowance = allowance - txn.value;\r\n\r\n        return true;\r\n        \r\n    }\r\n    \r\n    function submitTokenTransaction(address _tokenAddress, address _receiever, uint _value) onlyOwner() external returns (bool) {\r\n        uint newTxId = tokenTransactions.length++;\r\n        tokenTransactions[newTxId].id = newTxId;\r\n        tokenTransactions[newTxId].token = tokenInterface(_tokenAddress);\r\n        tokenTransactions[newTxId].reciever = _receiever;\r\n        tokenTransactions[newTxId].value = _value;\r\n        tokenTransactions[newTxId].confirmed.push(msg.sender);\r\n        if (tokenTransactions[newTxId].confirmed.length == approvalsreq){\r\n            tokenTransactions[newTxId].status = TxnStatus.Pending;\r\n        }\r\n        emit TxnSumbitted(newTxId);\r\n        return true;\r\n    }\r\n    \r\n    function confirmTokenTransaction(uint txId) onlyOwner() external returns (bool){\r\n        tokenTransaction storage txn = tokenTransactions[txId];\r\n\r\n        //check whether this owner has already confirmed this txn\r\n        bool f;\r\n        for (uint8 i = 0; i<txn.confirmed.length;i++){\r\n            if (txn.confirmed[i] == msg.sender){\r\n                f = true;\r\n            }\r\n        }\r\n        //push sender address into confirmed array if haven't found\r\n        require(!f);\r\n        txn.confirmed.push(msg.sender);\r\n        \r\n        if (txn.confirmed.length == approvalsreq){\r\n            txn.status = TxnStatus.Pending;\r\n        }\r\n        \r\n        //fire event\r\n        emit tokenTxnConfirmed(txId, msg.sender);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function executeTokenTxn(uint txId) onlyOwner() external returns (bool){\r\n        \r\n        tokenTransaction storage txn = tokenTransactions[txId];\r\n        \r\n        /* check txn status */\r\n        require(txn.status == TxnStatus.Pending);\r\n        \r\n        /* check whether wallet has sufficient balance to send this transaction */\r\n        uint256 balance = txn.token.balanceOf(address(this));\r\n        require (txn.value <= balance);\r\n        \r\n        /* Send tokens */\r\n        txn.token.transfer(txn.reciever, txn.value);\r\n        \r\n        /* change transaction's status to executed */\r\n        txn.status = TxnStatus.Executed;\r\n        \r\n        /* Fire event */\r\n        emit tokenTxnExecuted(address(txn.token), txn.value, txn.reciever);\r\n       \r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvalsreq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"logId\",\"type\":\"uint256\"}],\"name\":\"getLog\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTxnNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenTxnNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"executeTokenTxn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTxn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_receiever\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitTokenTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLogsNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"confirmTokenTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTokenTxn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"executeTxn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"topBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_approvals\",\"type\":\"uint256\"},{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TxnSumbitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TxnConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"topUpBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenTxnConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"tokenTxnExecuted\",\"type\":\"event\"}]","ContractName":"dapMultisig","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000606e546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006db6f295cf3dc357407dddb9898a58afab3d459000000000000000000000000097cbb5d17de6398ecd8d63de4d45348df4340d56","Library":"","SwarmSource":"bzzr://35000bec7c55d7ce0df9965d8ca60c247e1a4cb0e8bb1194fd289d19b40a526d"}]}