{"status":"1","message":"OK","result":[{"SourceCode":"/*************************\r\n * \r\n *  `＿　　　　　   (三|  \r\n *  |ﾋ_)　／￣￣＼ 　PDT  \r\n *  | | ／●) (●)  ＼｜｜  \r\n *  |_|(　(_人_)　　)^亅  \r\n *  | ヽ＼　￣　＿／ ミﾉ  \r\n *  ヽﾉﾉ￣|ﾚ―-ｲ / ﾉ  ／   \r\n *  　＼　ヽ＼ |/ イ      \r\n * 　／￣二二二二二二＼   \r\n * `｜raj｜ Paradise ｜｜  \r\n * 　＼＿二二二二二二／   \r\n *\r\n *************************/\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n /**\r\n * @title ERC20Basic\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/*\r\n * ParadiseToken is a standard ERC20 token with some additional functionalities:\r\n * - Transfers are only enabled after contract owner enables it (After StartTime)\r\n * - Contract sets 70% of the total supply as allowance for ICO contract\r\n */\r\n    \r\ncontract ParadiseToken is StandardToken, Ownable {\r\n    \r\n    // Constants\r\n    string public constant symbol = \"PDT\";\r\n    string public constant name = \"Paradise Token\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant InitialSupplyCup = 300000000 * (10 ** uint256(decimals)); // 300 mil tokens minted\r\n    uint256 public constant TokenAllowance = 210000000 * (10 ** uint256(decimals));   // 210 mil tokens public allowed \r\n    uint256 public constant AdminAllowance = InitialSupplyCup - TokenAllowance;       // 90 mil tokens admin allowed \r\n    \r\n    // Properties\r\n    address public adminAddr;            // the number of tokens available for the administrator\r\n    address public tokenAllowanceAddr = 0x9A4518ad59ac1D0Fc9A77d9083f233cD0b8d77Fa; // the number of tokens available for crowdsales\r\n    bool public transferEnabled = false;  // indicates if transferring tokens is enabled or not\r\n    \r\n    \r\n    modifier onlyWhenTransferAllowed() {\r\n        require(transferEnabled || msg.sender == adminAddr || msg.sender == tokenAllowanceAddr);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Check if token offering address is set or not\r\n     */\r\n    modifier onlyTokenOfferingAddrNotSet() {\r\n        require(tokenAllowanceAddr == address(0x0));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Check if address is a valid destination to transfer tokens to\r\n     * - must not be zero address\r\n     * - must not be the token address\r\n     * - must not be the owner's address\r\n     * - must not be the admin's address\r\n     * - must not be the token offering contract address\r\n     */\r\n    modifier validDestination(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        require(to != owner);\r\n        require(to != address(adminAddr));\r\n        require(to != address(tokenAllowanceAddr));\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Token contract constructor\r\n     *\r\n     * @param admin Address of admin account\r\n     */\r\n    constructor(address admin) public {\r\n        totalSupply = InitialSupplyCup;\r\n        \r\n        // Mint tokens\r\n        balances[msg.sender] = totalSupply;\r\n        emit Transfer(address(0x0), msg.sender, totalSupply);\r\n\r\n        // Approve allowance for admin account\r\n        adminAddr = admin;\r\n        approve(adminAddr, AdminAllowance);\r\n    }\r\n\r\n    /**\r\n     * Set token offering to approve allowance for offering contract to distribute tokens\r\n     *\r\n     * Note that if _amountForSale is 0, then it is assumed that the full\r\n     * remaining crowdsale supply is made available to the crowdsale.\r\n     * \r\n     * @param offeringAddr Address of token offerng contract\r\n     * @param amountForSale Amount of tokens for sale, set 0 to max out\r\n     */\r\n    function setTokenOffering(address offeringAddr, uint256 amountForSale) external onlyOwner {\r\n        require(!transferEnabled);\r\n\r\n        uint256 amount = (amountForSale == 0) ? TokenAllowance : amountForSale;\r\n        require(amount <= TokenAllowance);\r\n\r\n        approve(offeringAddr, amount);\r\n        tokenAllowanceAddr = offeringAddr;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Enable transfers\r\n     */\r\n    function enableTransfer() external onlyOwner {\r\n        transferEnabled = true;\r\n\r\n        // End the offering\r\n        approve(tokenAllowanceAddr, 0);\r\n    }\r\n\r\n    /**\r\n     * Transfer from sender to another account\r\n     *\r\n     * @param to Destination address\r\n     * @param value Amount of PDTtokens to send\r\n     */\r\n    function transfer(address to, uint256 value) public onlyWhenTransferAllowed validDestination(to) returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n    \r\n    /**\r\n     * Transfer from `from` account to `to` account using allowance in `from` account to the sender\r\n     *\r\n     * @param from Origin address\r\n     * @param to Destination address\r\n     * @param value Amount of PDTtokens to send\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public onlyWhenTransferAllowed validDestination(to) returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * The ParadiseToken token (PDT) has a fixed supply and restricts the ability\r\n * to transfer tokens until the owner has called the enableTransfer()\r\n * function.\r\n *\r\n * The owner can associate the token with a token sale contract. In that\r\n * case, the token balance is moved to the token sale contract, which\r\n * in turn can transfer its tokens to contributors to the sale.\r\n */\r\n\r\ncontract ParadiseTokenSale is Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // The beneficiary is the future recipient of the funds\r\n    address public beneficiary = 0x1Bb7390407F7987BD160993dE44d6f2737945436;\r\n\r\n    // The crowdsale has a funding goal, cap, deadline, and minimum contribution\r\n    uint public fundingGoal = 22700 ether;  // Base on 75$ per ether\r\n    uint public fundingCap = 53400 ether;   // Base on 75$ per ether\r\n    uint public minContribution = 10**17;   // 0.1 Ether\r\n    bool public fundingGoalReached = false;\r\n    bool public fundingCapReached = false;\r\n    bool public saleClosed = false;\r\n\r\n    // Time period of sale (UNIX timestamps)\r\n    uint public startTime = 1547031675; // Wednesday, 09-Jan-19 @ 11:01:15 am (UTC)\r\n    uint public endTime = 1552129275;  //  Saturday, 09-Mar-19 @ 11:01:15 am (UTC)\r\n   \r\n    // Keeps track of the amount of wei raised\r\n    uint public amountRaised;\r\n    // amount that has been refunded so far\r\n    uint public refundAmount;\r\n\r\n    // The ratio of PDT to Ether\r\n    uint public rate;\r\n    uint public constant LOW_RANGE_RATE = 10000;    // 0% bonus\r\n    uint public constant HIGH_RANGE_RATE = 14000;   // 40% bonus for 1 week\r\n    \r\n    // The token being sold\r\n    ParadiseToken public tokenReward;\r\n\r\n    // A map that tracks the amount of wei contributed by address\r\n    mapping(address => uint256) public balanceOf;\r\n    \r\n    // Events\r\n    event GoalReached(address _beneficiary, uint _amountRaised);\r\n    event CapReached(address _beneficiary, uint _amountRaised);\r\n    event FundTransfer(address _backer, uint _amount, bool _isContribution);\r\n\r\n    // Modifiers\r\n    modifier beforeDeadline()   { require (currentTime() < endTime); _; }\r\n    modifier afterDeadline()    { require (currentTime() >= endTime); _; }\r\n    modifier afterStartTime()    { require (currentTime() >= startTime); _; }\r\n\r\n    modifier saleNotClosed()    { require (!saleClosed); _; }\r\n\r\n    \r\n    /**\r\n     * Constructor for a crowdsale of ParadiseToken tokens.\r\n     *\r\n     * @param ifSuccessfulSendTo            the beneficiary of the fund\r\n     * @param fundingGoalInEthers           the minimum goal to be reached\r\n     * @param fundingCapInEthers            the cap (maximum) size of the fund\r\n     * @param minimumContributionInWei      minimum contribution (in wei)\r\n     * @param start                         the start time (UNIX timestamp)\r\n     * @param durationInMinutes             the duration of the crowdsale in minutes\r\n     * @param ratePDTToEther                the conversion rate from PDT to Ether\r\n     * @param addressOfTokenUsedAsReward    address of the token being sold\r\n     */\r\n    constructor(\r\n        address ifSuccessfulSendTo,\r\n        uint fundingGoalInEthers,\r\n        uint fundingCapInEthers,\r\n        uint minimumContributionInWei,\r\n        uint start,\r\n        uint durationInMinutes,\r\n        uint ratePDTToEther,\r\n        address addressOfTokenUsedAsReward\r\n    ) public {\r\n        require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this));\r\n        require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this));\r\n        require(fundingGoalInEthers <= fundingCapInEthers);\r\n        require(durationInMinutes > 0);\r\n        beneficiary = ifSuccessfulSendTo;\r\n        fundingGoal = fundingGoalInEthers * 1 ether;\r\n        fundingCap = fundingCapInEthers * 1 ether;\r\n        minContribution = minimumContributionInWei;\r\n        startTime = start;\r\n        endTime = start + durationInMinutes * 1 minutes; \r\n        setRate(ratePDTToEther);\r\n        tokenReward = ParadiseToken(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    /**\r\n     * This function is called whenever Ether is sent to the\r\n     * smart contract. It can only be executed when the crowdsale is\r\n     * not paused, not closed, and before the deadline has been reached.\r\n     *\r\n     * This function will update state variables for whether or not the\r\n     * funding goal or cap have been reached. It also ensures that the\r\n     * tokens are transferred to the sender, and that the correct\r\n     * number of tokens are sent according to the current rate.\r\n     */\r\n    function () payable external {\r\n        buy();\r\n    }\r\n\r\n    function buy ()\r\n        payable public\r\n        whenNotPaused\r\n        beforeDeadline\r\n        afterStartTime\r\n        saleNotClosed\r\n    {\r\n        require(msg.value >= minContribution);\r\n        uint amount = msg.value;\r\n        \r\n        // Compute the number of tokens to be rewarded to the sender\r\n        // Note: it's important for this calculation that both wei\r\n        // and PDT have the same number of decimal places (18)\r\n        uint numTokens = amount.mul(rate);\r\n        \r\n        // Transfer the tokens from the crowdsale supply to the sender\r\n        if (tokenReward.transferFrom(tokenReward.owner(), msg.sender, numTokens)) {\r\n    \r\n        // update the total amount raised\r\n        amountRaised = amountRaised.add(amount);\r\n     \r\n        // update the sender's balance of wei contributed\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\r\n\r\n        emit FundTransfer(msg.sender, amount, true);\r\n        // Check if the funding goal or cap have been reached\r\n        checkFundingGoal();\r\n        checkFundingCap();\r\n        }\r\n        else {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * The owner can update the rate (PDT to ETH).\r\n     *\r\n     * @param _rate  the new rate for converting PDT to ETH\r\n     */\r\n    function setRate(uint _rate) public onlyOwner {\r\n        require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);\r\n        rate = _rate;\r\n    }\r\n    \r\n     /**\r\n     * The owner can terminate the crowdsale at any time.\r\n     */\r\n    function terminate() external onlyOwner {\r\n        saleClosed = true;\r\n    }\r\n    \r\n     /**\r\n     *\r\n     * The owner can allocate the specified amount of tokens from the\r\n     * crowdsale allowance to the recipient (to).\r\n     *\r\n     * NOTE: be extremely careful to get the amounts correct, which\r\n     * are in units of wei and PDT. Every digit counts.\r\n     *\r\n     * @param to            the recipient of the tokens\r\n     * @param amountWei     the amount contributed in wei\r\n     * @param amountPDT the amount of tokens transferred in PDT\r\n     */\r\n     \r\n     \r\n     function ownerAllocateTokens(address to, uint amountWei, uint amountPDT) public\r\n            onlyOwner \r\n    {\r\n        //don't allocate tokens for the admin\r\n        //require(tokenReward.adminAddr() != to);\r\n        \r\n        if (!tokenReward.transferFrom(tokenReward.owner(), to, amountPDT)) {\r\n            revert();\r\n        }\r\n        amountRaised = amountRaised.add(amountWei);\r\n        balanceOf[to] = balanceOf[to].add(amountWei);\r\n        emit FundTransfer(to, amountWei, true);\r\n        checkFundingGoal();\r\n        checkFundingCap();\r\n    }\r\n\r\n    /**\r\n     * The owner can call this function to withdraw the funds that\r\n     * have been sent to this contract. The funds will be sent to\r\n     * the beneficiary specified when the crowdsale was created.\r\n     */\r\n    function ownerSafeWithdrawal() external onlyOwner  {\r\n        uint balanceToSend = address(this).balance;\r\n        address(0x1Bb7390407F7987BD160993dE44d6f2737945436).transfer(balanceToSend);\r\n        emit FundTransfer(beneficiary, balanceToSend, false);\r\n    }\r\n    \r\n   /**\r\n     * Checks if the funding goal has been reached. If it has, then\r\n     * the GoalReached event is triggered.\r\n     */\r\n    function checkFundingGoal() internal {\r\n        if (!fundingGoalReached) {\r\n            if (amountRaised >= fundingGoal) {\r\n                fundingGoalReached = true;\r\n                emit GoalReached(beneficiary, amountRaised);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the funding cap has been reached. If it has, then\r\n     * the CapReached event is triggered.\r\n     */\r\n   function checkFundingCap() internal {\r\n        if (!fundingCapReached) {\r\n            if (amountRaised >= fundingCap) {\r\n                fundingCapReached = true;\r\n                saleClosed = true;\r\n                emit CapReached(beneficiary, amountRaised);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the current time.\r\n     * Useful to abstract calls to \"now\" for tests.\r\n    */\r\n    function currentTime() view public returns (uint _currentTime) {\r\n        return now;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n  function allowance(address _owner, address _spender) external view returns (uint256);\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ParadiseToken initial distribution\r\n * @dev Distribute airdrop tokens\r\n */\r\n \r\ncontract PDTDistribution is Ownable {\r\n  \r\n  function drop(IERC20 token, address[] memory recipients, uint256[] memory values) public onlyOwner {\r\n    for (uint256 i = 0; i < recipients.length; i++) {\r\n      token.transfer(recipients[i], values[i]);\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n *（｀・P・）（｀・P・´）（・P・´）\r\n *     Created by Paradise\r\n *（´・P・）（´・P・｀）（・P・｀）\r\n */","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amountWei\",\"type\":\"uint256\"},{\"name\":\"amountPDT\",\"type\":\"uint256\"}],\"name\":\"ownerAllocateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerSafeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOW_RANGE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HIGH_RANGE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"fundingGoalInEthers\",\"type\":\"uint256\"},{\"name\":\"fundingCapInEthers\",\"type\":\"uint256\"},{\"name\":\"minimumContributionInWei\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"durationInMinutes\",\"type\":\"uint256\"},{\"name\":\"ratePDTToEther\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"CapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ParadiseTokenSale","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001bb7390407f7987bd160993de44d6f273794543600000000000000000000000000000000000000000000000000000000000058ac000000000000000000000000000000000000000000000000000000000000d098000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000005c35d47b0000000000000000000000000000000000000000000000000000000000014be000000000000000000000000000000000000000000000000000000000000036b0000000000000000000000000fa2b9e5f4b60767d4c3ca6e316d8599311419b3e","Library":"","SwarmSource":"bzzr://2e2a2c611dfc9091c8005bc1a2dfd22f448ce011c90137227bfc0be6b02e0b15"}]}