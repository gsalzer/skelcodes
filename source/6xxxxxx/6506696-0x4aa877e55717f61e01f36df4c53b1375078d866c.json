{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * Math operations to avoid overflows\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract FarmChain {\r\n    /*using the SafeMath keep from the up/down overflows*/\r\n    using SafeMath for uint256;\r\n    \r\n    /*the name of the token*/\r\n    string public name;\r\n    \r\n    /*the token's symbol*/\r\n    string public symbol;\r\n    /*the decimal of the token */\r\n    \r\n    uint8 public decimals;\r\n    \r\n    /* the totalSupply of token */\r\n    uint256 public totalSupply;\r\n\r\n    /*the owner of the contract*/\r\n\taddress public owner;\r\n\t\r\n\taddress[] public ownerables;\r\n\t\r\n\tbool  public isRunning = false;\r\n\t\r\n//\tuint startTime;\r\n\t\r\n\taddress public burnAddress;\r\n\t\r\n\tmapping(address => bool) public isOwner;\r\n\t\r\n\tmapping (address => bool) public isFrezze;\r\n\t\r\n//\taddress public LockBinAddress;\r\n\r\n    /* The hot_balance of users , users' totalBalance = balanceOf + freezeOf */\r\n    mapping (address => uint256) public balanceOf;\r\n    /*the Lock-bin balance of users */\r\n//\tmapping (address => uint256) public lockbinOf;\r\n\t\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 value);\r\n    \r\n    event Approval(address indexed _from, address indexed _spender, uint256 _value);\r\n\t\r\n    event Freeze(address indexed _who, address indexed _option);\r\n    \r\n    event UnFrezze(address indexed _who, address indexed _option);\r\n    \r\n    event Burn(address indexed _from, uint256 _amount);\r\n    \r\n    modifier onlyOwnerable() {\r\n        assert(isOwner[msg.sender]);\r\n        _;\r\n    }\r\n    modifier onlyOwner() {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n    /*Let the contract keep from the short-address attack*/\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert((msg.data.length >= size + 4));\r\n        _;\r\n    }\r\n    modifier onlyRuning {\r\n        require(isRunning, \"the contract has been stoped\");\r\n        _;\r\n    }\r\n    modifier onlyUnFrezze {\r\n        assert(!isFrezze[msg.sender]);\r\n        _;\r\n    }\r\n  \r\n\r\n    /* the constructor of the contract */\r\nconstructor() public {\r\n        \r\n        totalSupply = 100000000000000000;\r\n       \r\n        balanceOf[msg.sender] = totalSupply;\r\n        \r\n        name = \"Farm Chain\";                                  \r\n        \r\n        symbol = \"FAC\";                               \r\n      \r\n        decimals = 8;                            \r\n\t\r\n\t\towner = msg.sender;\r\n\t\t\r\n\t\tisOwner[owner] = true;\r\n\t\r\n\t\tisRunning = true;\r\n\t\t\r\n\t\t//addOwners(_admins);\r\n\t\t\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) public onlyRuning onlyUnFrezze onlyPayloadSize(32 * 2) returns (bool success){\r\n        require(_to != 0x0);\r\n        require( balanceOf[msg.sender] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]); \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                     \r\n        balanceOf[_to] = balanceOf[_to].add(_value);                            \r\n        emit Transfer(msg.sender, _to, _value); \r\n        return true;\r\n    }\r\n\r\n    \r\n    function approve(address _spender , uint256 _value) public onlyUnFrezze onlyRuning returns (bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n       \r\n\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyUnFrezze onlyRuning returns (bool success) {\r\n            \r\n            assert(balanceOf[_from] >= _value);\r\n            assert(allowance[_from][msg.sender] >= _value);\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n    }\r\n    \r\n    function stopContract() public onlyOwnerable {\r\n        require(isRunning,\"the contract has been stoped\");\r\n        \r\n        isRunning = false;\r\n    }\r\n    \r\n    function startContract() public onlyOwnerable {\r\n        require(!isRunning,\"the contract has been started\");\r\n        \r\n        isRunning = true;\r\n    }\r\n    \r\n    function freeze (address _option) public onlyOwnerable {\r\n        require(!isFrezze[_option],\"the account has been feezed\");\r\n       \r\n        isFrezze[_option] = true;\r\n       \r\n        emit Freeze(msg.sender, _option);\r\n    }\r\n   \r\n    function unFreeze(address _option) public onlyOwnerable {\r\n        \r\n        require(isFrezze[_option],\"the account has been unFrezzed\");\r\n       \r\n        isFrezze[_option] = false;\r\n        \r\n        emit UnFrezze(msg.sender, _option);\r\n    }\r\n\r\n    function setOwners(address[] _admin) public onlyOwner {\r\n        uint len = _admin.length;\r\n        for(uint i= 0; i< len; i++) {\r\n            require(!isContract(_admin[i]),\"not support contract address as owner\");\r\n            require(!isOwner[_admin[i]],\"the address is admin already\");\r\n            isOwner[_admin[i]] = true;\r\n        }\r\n    }\r\n\r\n    function deletOwners(address[] _todel) public onlyOwner {\r\n        uint len = _todel.length;\r\n        for(uint i= 0; i< len; i++) {\r\n            require(isOwner[_todel[i]],\"the address is not a admin\");\r\n            isOwner[_todel[i]] = false;\r\n        }\r\n        \r\n    }\r\n\r\n    function setBurnAddress(address _toBurn) public onlyOwnerable returns(bool success) {\r\n        \r\n        burnAddress = _toBurn;\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _amount)  public onlyOwnerable {\r\n        require(balanceOf[burnAddress] >= _amount,\"there is no enough money to burn\");\r\n        balanceOf[burnAddress] = balanceOf[burnAddress].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        emit Burn(burnAddress, _amount);\r\n    }\r\n\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        require(_addr != 0x0);\r\n        uint size;\r\n         assembly {\r\n            /*:= reference external variable*/\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_todel\",\"type\":\"address[]\"}],\"name\":\"deletOwners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toBurn\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFrezze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_option\",\"type\":\"address\"}],\"name\":\"unFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_option\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerables\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address[]\"}],\"name\":\"setOwners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_option\",\"type\":\"address\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_option\",\"type\":\"address\"}],\"name\":\"UnFrezze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"FarmChain","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://176442de7f96cdfc2d8f70ddf1820b9f53d21369f594bb1691829bc32a67a5c0"}]}