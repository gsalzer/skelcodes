{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\ncontract Token {\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  function balanceOf(address who) public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  Token public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many usd per 10000 tokens.\r\n  uint256 public rate = 7142;\r\n\r\n  // usd cents per 1 ETH\r\n  uint256 public ethRate = 27500;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  // Seconds in a week\r\n  uint256 public week = 604800;\r\n\r\n  // ICO start time\r\n  uint256 public icoStartTime;\r\n\r\n  // bonuses in %\r\n  uint256 public privateIcoBonus = 50;\r\n  uint256 public preIcoBonus = 30;\r\n  uint256 public ico1Bonus = 15;\r\n  uint256 public ico2Bonus = 10;\r\n  uint256 public ico3Bonus = 5;\r\n  uint256 public ico4Bonus = 0;\r\n\r\n  // min contribution in wei\r\n  uint256 public privateIcoMin = 1 ether;\r\n  uint256 public preIcoMin = 1 ether;\r\n  uint256 public ico1Min = 1 ether;\r\n  uint256 public ico2Min = 1 ether;\r\n  uint256 public ico3Min = 1 ether;\r\n  uint256 public ico4Min = 1 ether; \r\n\r\n  // max contribution in wei\r\n  uint256 public privateIcoMax = 350 ether;\r\n  uint256 public preIcoMax = 10000 ether;\r\n  uint256 public ico1Max = 10000 ether;\r\n  uint256 public ico2Max = 10000 ether;\r\n  uint256 public ico3Max = 10000 ether;\r\n  uint256 public ico4Max = 10000 ether;\r\n\r\n\r\n  // hardcaps in tokens\r\n  uint256 public privateIcoCap = uint256(322532).mul(1e8);\r\n  uint256 public preIcoCap = uint256(8094791).mul(1e8);\r\n  uint256 public ico1Cap = uint256(28643106).mul(1e8);\r\n  uint256 public ico2Cap = uint256(17123596).mul(1e8);\r\n  uint256 public ico3Cap = uint256(9807150).mul(1e8);\r\n  uint256 public ico4Cap = uint256(6008825).mul(1e8);\r\n\r\n  // tokens sold\r\n  uint256 public privateIcoSold;\r\n  uint256 public preIcoSold;\r\n  uint256 public ico1Sold;\r\n  uint256 public ico2Sold;\r\n  uint256 public ico3Sold;\r\n  uint256 public ico4Sold;\r\n\r\n  //whitelist\r\n  mapping(address => bool) public whitelist; \r\n  //whitelisters addresses\r\n  mapping(address => bool) public whitelisters;\r\n\r\n  modifier isWhitelister() {\r\n    require(whitelisters[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  modifier isWhitelisted() {\r\n    require(whitelist[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  // Sale stages\r\n  enum Stages {Pause, PrivateIco, PrivateIcoEnd, PreIco, PreIcoEnd, Ico1, Ico2, Ico3, Ico4, IcoEnd}\r\n\r\n  Stages currentStage;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /** Event emitted when _account is Whitelisted / UnWhitelisted */\r\n  event WhitelistUpdated(address indexed _account, uint8 _phase);\r\n\r\n  /**\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  constructor(address _newOwner, address _wallet, Token _token) public {\r\n    require(_newOwner != address(0));\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    owner = _newOwner;\r\n    wallet = _wallet;\r\n    token = _token;\r\n\r\n    currentStage = Stages.Pause;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev sale stage start\r\n   */\r\n\r\n  function startPrivateIco() public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.Pause);\r\n    currentStage = Stages.PrivateIco;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev sale stage end\r\n   */\r\n\r\n  function endPrivateIco() public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.PrivateIco);\r\n    currentStage = Stages.PrivateIcoEnd;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev sale stage start\r\n   */\r\n\r\n  function startPreIco() public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.PrivateIcoEnd);\r\n    currentStage = Stages.PreIco;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev sale stage end\r\n   */\r\n\r\n  function endPreIco() public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.PreIco);\r\n    currentStage = Stages.PreIcoEnd;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev sale stage start\r\n   */\r\n\r\n  function startIco() public onlyOwner returns (bool) {\r\n    require(currentStage == Stages.PreIcoEnd);\r\n    currentStage = Stages.Ico1;\r\n    icoStartTime = now;\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev getting stage index (private ICO = 1, pre ICO = 2, ICO = 3, pause = 0, end = 9)\r\n   */\r\n\r\n  function getStageName () public view returns (string) {\r\n    if (currentStage == Stages.Pause) return 'Pause';\r\n    if (currentStage == Stages.PrivateIco) return 'Private ICO';\r\n    if (currentStage == Stages.PrivateIcoEnd) return 'Private ICO end';\r\n    if (currentStage == Stages.PreIco) return 'Prte ICO';\r\n    if (currentStage == Stages.PreIcoEnd) return 'Pre ICO end';\r\n    if (currentStage == Stages.Ico1) return 'ICO 1-st week';\r\n    if (currentStage == Stages.Ico2) return 'ICO 2-d week';\r\n    if (currentStage == Stages.Ico3) return 'ICO 3-d week';\r\n    if (currentStage == Stages.Ico4) return 'ICO 4-th week';\r\n    return 'ICO is over';\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable isWhitelisted {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    uint256 time;\r\n    uint256 weeksPassed;\r\n\r\n    require(currentStage != Stages.Pause);\r\n    require(currentStage != Stages.PrivateIcoEnd);\r\n    require(currentStage != Stages.PreIcoEnd);\r\n    require(currentStage != Stages.IcoEnd);\r\n\r\n    if (currentStage == Stages.Ico1 || currentStage == Stages.Ico2 || currentStage == Stages.Ico3 || currentStage == Stages.Ico4) {\r\n      time = now.sub(icoStartTime);\r\n      weeksPassed = time.div(week);\r\n\r\n      if (currentStage == Stages.Ico1) {\r\n        if (weeksPassed == 1) currentStage = Stages.Ico2;\r\n        else if (weeksPassed == 2) currentStage = Stages.Ico3;\r\n        else if (weeksPassed == 3) currentStage = Stages.Ico4;\r\n        else if (weeksPassed > 3) currentStage = Stages.IcoEnd;\r\n      } else if (currentStage == Stages.Ico2) {\r\n        if (weeksPassed == 2) currentStage = Stages.Ico3;\r\n        else if (weeksPassed == 3) currentStage = Stages.Ico4;\r\n        else if (weeksPassed > 3) currentStage = Stages.IcoEnd;\r\n      } else if (currentStage == Stages.Ico3) {\r\n        if (weeksPassed == 3) currentStage = Stages.Ico4;\r\n        else if (weeksPassed > 3) currentStage = Stages.IcoEnd;\r\n      } else if (currentStage == Stages.Ico4) {\r\n        if (weeksPassed > 3) currentStage = Stages.IcoEnd;\r\n      }\r\n    }\r\n\r\n    if (currentStage != Stages.IcoEnd) {\r\n      _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n      // calculate token amount to be created\r\n      uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n      // update state\r\n      weiRaised = weiRaised.add(weiAmount);\r\n\r\n      if (currentStage == Stages.PrivateIco) privateIcoSold = privateIcoSold.add(tokens);\r\n      if (currentStage == Stages.PreIco) preIcoSold = preIcoSold.add(tokens);\r\n      if (currentStage == Stages.Ico1) ico1Sold = ico1Sold.add(tokens);\r\n      if (currentStage == Stages.Ico2) ico2Sold = ico2Sold.add(tokens);\r\n      if (currentStage == Stages.Ico3) ico3Sold = ico3Sold.add(tokens);\r\n      if (currentStage == Stages.Ico4) ico4Sold = ico4Sold.add(tokens);\r\n\r\n      _processPurchase(_beneficiary, tokens);\r\n      emit TokenPurchase(\r\n        msg.sender,\r\n        _beneficiary,\r\n        weiAmount,\r\n        tokens\r\n      );\r\n\r\n      _forwardFunds();\r\n    } else {\r\n      msg.sender.transfer(msg.value);\r\n    }\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \r\n   *   super._preValidatePurchase(_beneficiary, _weiAmount);\r\n   *   require(weiRaised.add(_weiAmount) <= cap);\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal view\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n\r\n    if (currentStage == Stages.PrivateIco) {\r\n      require(_weiAmount >= privateIcoMin);\r\n      require(_weiAmount <= privateIcoMax);\r\n    } else if (currentStage == Stages.PreIco) {\r\n      require(_weiAmount >= preIcoMin);\r\n      require(_weiAmount <= preIcoMax);\r\n    } else if (currentStage == Stages.Ico1) {\r\n      require(_weiAmount >= ico1Min);\r\n      require(_weiAmount <= ico1Max);\r\n    } else if (currentStage == Stages.Ico2) {\r\n      require(_weiAmount >= ico2Min);\r\n      require(_weiAmount <= ico2Max);\r\n    } else if (currentStage == Stages.Ico3) {\r\n      require(_weiAmount >= ico3Min);\r\n      require(_weiAmount <= ico3Max);\r\n    } else if (currentStage == Stages.Ico4) {\r\n      require(_weiAmount >= ico4Min);\r\n      require(_weiAmount <= ico4Max);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(_beneficiary, _tokenAmount));\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    uint256 bonus;\r\n    uint256 cap;\r\n\r\n    if (currentStage == Stages.PrivateIco) {\r\n      bonus = privateIcoBonus;\r\n      cap = privateIcoCap.sub(privateIcoSold);\r\n    } else if (currentStage == Stages.PreIco) {\r\n      bonus = preIcoBonus;\r\n      cap = preIcoCap.sub(preIcoSold);\r\n    } else if (currentStage == Stages.Ico1) {\r\n      bonus = ico1Bonus;\r\n      cap = ico1Cap.sub(ico1Sold);\r\n    } else if (currentStage == Stages.Ico2) {\r\n      bonus = ico2Bonus;\r\n      cap = ico2Cap.sub(ico2Sold);\r\n    } else if (currentStage == Stages.Ico3) {\r\n      bonus = ico3Bonus;\r\n      cap = ico3Cap.sub(ico3Sold);\r\n    } else if (currentStage == Stages.Ico4) {\r\n      bonus = ico4Bonus;\r\n      cap = ico4Cap.sub(ico4Sold);\r\n    }\r\n    uint256 tokenAmount = _weiAmount.mul(ethRate).div(rate).div(1e8);\r\n    uint256 bonusTokens = tokenAmount.mul(bonus).div(100);\r\n    tokenAmount = tokenAmount.add(bonusTokens);\r\n\r\n    require(tokenAmount <= cap);\r\n    return tokenAmount;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  function withdrawTokens() public onlyOwner returns (bool) {\r\n    uint256 time;\r\n    uint256 weeksPassed;\r\n\r\n    if (currentStage == Stages.Ico1 || currentStage == Stages.Ico2 || currentStage == Stages.Ico3 || currentStage == Stages.Ico4) {\r\n      time = now.sub(icoStartTime);\r\n      weeksPassed = time.div(week);\r\n\r\n      if (weeksPassed > 3) currentStage = Stages.IcoEnd;\r\n    }\r\n    require(currentStage == Stages.IcoEnd);\r\n\r\n    uint256 balance = token.balanceOf(address(this));\r\n    if (balance > 0) {\r\n      require(token.transfer(owner, balance));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Direct tokens sending\r\n   * @param _to address\r\n   * @param _amount tokens amount\r\n   */\r\n  function SendTokens(address _to, uint256 _amount) public onlyOwner returns (bool) {\r\n    uint256 time;\r\n    uint256 weeksPassed;\r\n\r\n    require(_to != address(0));\r\n    require(currentStage != Stages.Pause);\r\n    require(currentStage != Stages.PrivateIcoEnd);\r\n    require(currentStage != Stages.PreIcoEnd);\r\n    require(currentStage != Stages.IcoEnd);\r\n\r\n    if (currentStage == Stages.Ico1 || currentStage == Stages.Ico2 || currentStage == Stages.Ico3 || currentStage == Stages.Ico4) {\r\n      time = now.sub(icoStartTime);\r\n      weeksPassed = time.div(week);\r\n\r\n      if (currentStage == Stages.Ico1) {\r\n        if (weeksPassed == 1) currentStage = Stages.Ico2;\r\n        else if (weeksPassed == 2) currentStage = Stages.Ico3;\r\n        else if (weeksPassed == 3) currentStage = Stages.Ico4;\r\n        else if (weeksPassed > 3) currentStage = Stages.IcoEnd;\r\n      } else if (currentStage == Stages.Ico2) {\r\n        if (weeksPassed == 2) currentStage = Stages.Ico3;\r\n        else if (weeksPassed == 3) currentStage = Stages.Ico4;\r\n        else if (weeksPassed > 3) currentStage = Stages.IcoEnd;\r\n      } else if (currentStage == Stages.Ico3) {\r\n        if (weeksPassed == 3) currentStage = Stages.Ico4;\r\n        else if (weeksPassed > 3) currentStage = Stages.IcoEnd;\r\n      } else if (currentStage == Stages.Ico4) {\r\n        if (weeksPassed > 3) currentStage = Stages.IcoEnd;\r\n      }\r\n    }\r\n\r\n    if (currentStage != Stages.IcoEnd) {\r\n      uint256 cap;\r\n      if (currentStage == Stages.PrivateIco) {\r\n        cap = privateIcoCap.sub(privateIcoSold);\r\n      } else if (currentStage == Stages.PreIco) {\r\n        cap = preIcoCap.sub(preIcoSold);\r\n      } else if (currentStage == Stages.Ico1) {\r\n        cap = ico1Cap.sub(ico1Sold);\r\n      } else if (currentStage == Stages.Ico2) {\r\n        cap = ico2Cap.sub(ico2Sold);\r\n      } else if (currentStage == Stages.Ico3) {\r\n        cap = ico3Cap.sub(ico3Sold);\r\n      } else if (currentStage == Stages.Ico4) {\r\n        cap = ico4Cap.sub(ico4Sold);\r\n      }\r\n\r\n      require(_amount <= cap);\r\n\r\n      if (currentStage == Stages.PrivateIco) privateIcoSold = privateIcoSold.add(_amount);\r\n      if (currentStage == Stages.PreIco) preIcoSold = preIcoSold.add(_amount);\r\n      if (currentStage == Stages.Ico1) ico1Sold = ico1Sold.add(_amount);\r\n      if (currentStage == Stages.Ico2) ico2Sold = ico2Sold.add(_amount);\r\n      if (currentStage == Stages.Ico3) ico3Sold = ico3Sold.add(_amount);\r\n      if (currentStage == Stages.Ico4) ico4Sold = ico4Sold.add(_amount);\r\n    } else {\r\n      return false;\r\n    }\r\n    require(token.transfer(_to, _amount));\r\n  }\r\n\r\n    /// @dev Adds account addresses to whitelist.\r\n    /// @param _account address.\r\n    /// @param _phase 1 to add, 0 to remove.\r\n    function updateWhitelist (address _account, uint8 _phase) external isWhitelister returns (bool) {\r\n      require(_account != address(0));\r\n      require(_phase <= 1);\r\n      if (_phase == 1) whitelist[_account] = true;\r\n      else whitelist[_account] = false;\r\n      emit WhitelistUpdated(_account, _phase);\r\n      return true;\r\n    }\r\n\r\n    /// @dev Adds new whitelister\r\n    /// @param _address new whitelister address.\r\n    function addWhitelister (address _address) public onlyOwner returns (bool) {\r\n      whitelisters[_address] = true;\r\n      return true;\r\n    }\r\n\r\n    /// @dev Removes whitelister\r\n    /// @param _address address to remove.\r\n    function removeWhitelister (address _address) public onlyOwner returns (bool) {\r\n      whitelisters[_address] = false;\r\n      return true;\r\n    }\r\n\r\n    function setUsdRate (uint256 _usdCents) public onlyOwner returns (bool) {\r\n      ethRate = _usdCents;\r\n      return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SendTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPrivateIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico3Max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico2Bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateIcoSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico4Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico3Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPrivateIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateIcoBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico4Sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico1Min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"week\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_phase\",\"type\":\"uint8\"}],\"name\":\"updateWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico1Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico1Sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico2Sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico3Sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico2Min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhitelister\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStageName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateIcoMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico4Min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico3Bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico2Max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico2Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateIcoMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico1Bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico4Max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico4Bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateIcoCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdCents\",\"type\":\"uint256\"}],\"name\":\"setUsdRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelister\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico3Min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico1Max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_phase\",\"type\":\"uint8\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000054d7a6792cd9a05dd680a3c6a0aad1ac18c823ac00000000000000000000000054d7a6792cd9a05dd680a3c6a0aad1ac18c823ac00000000000000000000000085f171847f04eae21f8036dac40c544b8de1059a","Library":"","SwarmSource":"bzzr://8e252420094737d233718b182af315596588c6f198c6fec23716e8ab3495f70a"}]}