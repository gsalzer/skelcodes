{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Ownerable{\r\n    \r\n    address public owner;\r\n\r\n    address public delegate;\r\n\r\n    constructor() public{\r\n        owner = msg.sender;\r\n        delegate = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"Permission denied\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDelegate() {\r\n        require(msg.sender == delegate,\"Permission denied\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwnerOrDelegate() {\r\n        require(msg.sender == owner||msg.sender == delegate,\"Permission denied\");\r\n        _;\r\n    }\r\n    \r\n    function changeOwner(address newOwner) public onlyOwner{\r\n        require(newOwner!= 0x0,\"address is invalid\");\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function changeDelegate(address newDelegate) public onlyOwner{\r\n        require(newDelegate!= 0x0,\"address is invalid\");\r\n        delegate = newDelegate;\r\n    }\r\n    \r\n}\r\n\r\ncontract Pausable is Ownerable{\r\n  event Paused();\r\n  event Unpaused();\r\n\r\n  bool private _paused = false;\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    _paused = true;\r\n    emit Paused();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    _paused = false;\r\n    emit Unpaused();\r\n  }\r\n}\r\n\r\ncontract EthTransfer is Pausable{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 constant ADMIN_DEPOIST_TIME_INTERVAL = 24 hours;\r\n    uint256 constant ADMIN_DEPOIST_MAX_AMOUNT = 50 ether;\r\n    uint256 last_time_admin_depoist = 0;\r\n    \r\n    uint constant HOUSE_EDGE_PERCENT = 15; //1.5%\r\n    uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.00045 ether;\r\n    \r\n    uint256 public _total_house_edge = 0;\r\n    \r\n    uint256 public _ID = 1; //AUTO INCREMENT\r\n    uint256 public _newChannelID = 10000;\r\n        \r\n    event addChannelSucc    (uint256 indexed id,uint256 channelID,string name);\r\n    event rechargeSucc      (uint256 indexed id,uint256 channelID,address user,uint256 amount,string ext);\r\n    event depositSucc       (uint256 indexed id,uint256 channelID,address beneficiary,uint256 amount,uint256 houseEdge,string ext);\r\n    event withdrawSucc      (uint256 indexed id,uint256 amount);\r\n    event depositBySuperAdminSucc           (uint256 indexed id,uint256 amount,address beneficiary);\r\n    event changeChannelDelegateSucc         (uint256 indexed id,address newDelegate);\r\n    \r\n    mapping(uint256 => Channel) public _channelMap; // channelID => channel info\r\n    \r\n    mapping(address => uint256) public _idMap; // delegate => channelID\r\n    \r\n    function addNewChannel(string name_,address channelDelegate_,uint256 partnershipCooperationBounsRate_) public onlyDelegate{\r\n        require(_idMap[channelDelegate_] == 0,\"An address can only manage one channel.\");\r\n        \r\n        _channelMap[_newChannelID] = Channel(name_,_newChannelID,channelDelegate_,0,partnershipCooperationBounsRate_);\r\n        _idMap[channelDelegate_] = _newChannelID;\r\n        \r\n        emit addChannelSucc(_ID,_newChannelID,name_);\r\n        _newChannelID++;\r\n        _ID++;\r\n    }\r\n    \r\n    function() public payable{\r\n        revert();\r\n    }\r\n    \r\n    function recharge(uint256 channelID_,string ext_) public payable whenNotPaused{\r\n        Channel storage targetChannel = _channelMap[channelID_];\r\n        require(targetChannel.channelID!=0,\"target Channel is no exist\");\r\n        uint256 inEth = msg.value;\r\n\r\n        uint256 partnershipCooperationBouns = inEth * targetChannel.partnershipCooperationBounsRate / 100 ;\r\n        _total_house_edge = _total_house_edge.add(partnershipCooperationBouns);\r\n\r\n        uint256 targetEth = inEth.sub(partnershipCooperationBouns);\r\n        targetChannel.totalEth = targetChannel.totalEth.add(targetEth);\r\n        \r\n        emit rechargeSucc(_ID, channelID_, msg.sender, inEth, ext_);\r\n        _ID++;\r\n    }\r\n\r\n    function changeChannelDelegate(address newDelegate_) public whenNotPaused{\r\n        require(_idMap[msg.sender] != 0,\"this address isn't a manager\");\r\n        Channel storage channelInfo = _channelMap[_idMap[msg.sender]];\r\n        require(channelInfo.channelDelegate == msg.sender,\"You are not the administrator of this channel.\");\r\n        require(_idMap[newDelegate_] == 0,\"An address can only manage one channel.\");\r\n        \r\n        channelInfo.channelDelegate = newDelegate_;\r\n        _idMap[msg.sender] = 0;\r\n        _idMap[newDelegate_] = channelInfo.channelID;\r\n        \r\n        emit changeChannelDelegateSucc(_ID, newDelegate_);\r\n        _ID++;\r\n    }    \r\n    \r\n    function deposit(address beneficiary_,uint256 amount_,string ext_) public whenNotPaused{\r\n        //Verify user identity\r\n        require(_idMap[msg.sender] != 0,\"this address isn't a manager\");\r\n        \r\n        Channel storage channelInfo = _channelMap[_idMap[msg.sender]];\r\n        //Query administrator privileges\r\n        require(channelInfo.channelDelegate == msg.sender,\"You are not the administrator of this channel.\");\r\n        //Is order completed?\r\n        bytes32 orderId = keccak256(abi.encodePacked(ext_));\r\n        require(!channelInfo.channelOrderHistory[orderId],\"this order is deposit already\");\r\n        channelInfo.channelOrderHistory[orderId] = true;\r\n        \r\n        uint256 totalLeftEth = channelInfo.totalEth.sub(amount_);\r\n        \r\n        uint houseEdge = amount_ * HOUSE_EDGE_PERCENT / 1000;\r\n        if (houseEdge < HOUSE_EDGE_MINIMUM_AMOUNT) {\r\n            houseEdge = HOUSE_EDGE_MINIMUM_AMOUNT;\r\n        }\r\n        \r\n        channelInfo.totalEth = totalLeftEth.sub(houseEdge);\r\n        _total_house_edge = _total_house_edge.add(houseEdge);\r\n        \r\n        beneficiary_.transfer(amount_);\r\n        \r\n        emit depositSucc(_ID, channelInfo.channelID, beneficiary_, amount_, houseEdge, ext_);\r\n        _ID++;\r\n    }\r\n    \r\n    function depositByDelegate(address beneficiary_,uint256 amount_,string ext_, bytes32 r, bytes32 s, uint8 v) public onlyDelegate whenNotPaused{\r\n        //Verify user identity \r\n        bytes32 signatureHash = keccak256(abi.encodePacked(beneficiary_, amount_,ext_));\r\n        address secretSigner = ecrecover(signatureHash, v, r, s);\r\n        require(_idMap[secretSigner] != 0,\"this address isn't a manager\");\r\n        \r\n        Channel storage channelInfo = _channelMap[_idMap[secretSigner]];\r\n        //Query administrator privileges\r\n        require(channelInfo.channelDelegate == secretSigner,\"You are not the administrator of this channel.\");\r\n        //Is order completed?\r\n        bytes32 orderId = keccak256(abi.encodePacked(ext_));\r\n        require(!channelInfo.channelOrderHistory[orderId],\"this order is deposit already\");\r\n        channelInfo.channelOrderHistory[orderId] = true;\r\n        \r\n        uint256 totalLeftEth = channelInfo.totalEth.sub(amount_);\r\n        \r\n        uint houseEdge = amount_ * HOUSE_EDGE_PERCENT / 1000;\r\n        if (houseEdge < HOUSE_EDGE_MINIMUM_AMOUNT) {\r\n            houseEdge = HOUSE_EDGE_MINIMUM_AMOUNT;\r\n        }\r\n        \r\n        channelInfo.totalEth = totalLeftEth.sub(houseEdge);\r\n        _total_house_edge = _total_house_edge.add(houseEdge);\r\n        \r\n        beneficiary_.transfer(amount_);\r\n        \r\n        emit depositSucc(_ID, channelInfo.channelID, beneficiary_, amount_, houseEdge, ext_);\r\n        _ID++;\r\n    }\r\n    \r\n    function withdraw() public onlyOwnerOrDelegate {\r\n        require(_total_house_edge > 0,\"no edge to withdraw\");\r\n        owner.transfer(_total_house_edge);\r\n        \r\n        emit withdrawSucc(_ID,_total_house_edge);\r\n        _total_house_edge = 0;\r\n        _ID++;\r\n    }\r\n    \r\n    function depositBySuperAdmin(uint256 channelID_, uint256 amount_, address beneficiary_) public onlyOwner{\r\n        require(now - last_time_admin_depoist >= ADMIN_DEPOIST_TIME_INTERVAL,\" super admin time limit\");\r\n        require(amount_ <= ADMIN_DEPOIST_MAX_AMOUNT,\" over super admin deposit amount limit\");\r\n        last_time_admin_depoist = now;\r\n        Channel storage channelInfo = _channelMap[channelID_];\r\n        uint256 totalLeftEth = channelInfo.totalEth.sub(amount_);\r\n        channelInfo.totalEth = totalLeftEth;\r\n        beneficiary_.transfer(amount_);\r\n        \r\n        emit depositBySuperAdminSucc(_ID, amount_, beneficiary_);\r\n        _ID++;\r\n    }\r\n    \r\n    struct Channel{\r\n        string name;\r\n        uint256 channelID;\r\n        address channelDelegate;\r\n        uint256 totalEth;\r\n        uint256 partnershipCooperationBounsRate;\r\n        mapping(bytes32 => bool) channelOrderHistory;\r\n    }\r\n    \r\n    function destory() public onlyOwner whenPaused{\r\n        selfdestruct(owner);    \r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr\r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"_total_house_edge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name_\",\"type\":\"string\"},{\"name\":\"channelDelegate_\",\"type\":\"address\"},{\"name\":\"partnershipCooperationBounsRate_\",\"type\":\"uint256\"}],\"name\":\"addNewChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_idMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"ext_\",\"type\":\"string\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"depositByDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_channelMap\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"channelID\",\"type\":\"uint256\"},{\"name\":\"channelDelegate\",\"type\":\"address\"},{\"name\":\"totalEth\",\"type\":\"uint256\"},{\"name\":\"partnershipCooperationBounsRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelID_\",\"type\":\"uint256\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"beneficiary_\",\"type\":\"address\"}],\"name\":\"depositBySuperAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDelegate_\",\"type\":\"address\"}],\"name\":\"changeChannelDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"ext_\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"changeDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelID_\",\"type\":\"uint256\"},{\"name\":\"ext_\",\"type\":\"string\"}],\"name\":\"recharge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_newChannelID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"channelID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addChannelSucc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"channelID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"rechargeSucc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"channelID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"houseEdge\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"depositSucc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSucc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"depositBySuperAdminSucc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"changeChannelDelegateSucc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"}]","ContractName":"EthTransfer","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://883b86a91c9840e1644fbb8f14f5e0da238022b66559f967502c4ca36e8ffacf"}]}