{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/Ownerable.sol\r\n\r\ncontract Ownerable {\r\n    /// @notice The address of the owner is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyOwner { require(msg.sender == owner); _; }\r\n\r\n    address public owner;\r\n\r\n    constructor() public { owner = msg.sender;}\r\n\r\n    /// @notice Changes the owner of the contract\r\n    /// @param _newOwner The new owner of the contract\r\n    function setOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/KYC.sol\r\n\r\n/**\r\n * @title KYC\r\n * @dev KYC contract handles the white list for ASTCrowdsale contract\r\n * Only accounts registered in KYC contract can buy AST token.\r\n * Admins can register account, and the reason why\r\n */\r\ncontract KYC is Ownerable {\r\n  // check the address is registered for token sale\r\n  mapping (address => bool) public registeredAddress;\r\n\r\n  // check the address is admin of kyc contract\r\n  mapping (address => bool) public admin;\r\n\r\n  event Registered(address indexed _addr);\r\n  event Unregistered(address indexed _addr);\r\n  event NewAdmin(address indexed _addr);\r\n  event ClaimedTokens(address _token, address owner, uint256 balance);\r\n\r\n  /**\r\n   * @dev check whether the address is registered for token sale or not.\r\n   * @param _addr address\r\n   */\r\n  modifier onlyRegistered(address _addr) {\r\n    require(registeredAddress[_addr]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev check whether the msg.sender is admin or not\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(admin[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  constructor () public {\r\n    admin[msg.sender] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev set new admin as admin of KYC contract\r\n   * @param _addr address The address to set as admin of KYC contract\r\n   */\r\n  function setAdmin(address _addr)\r\n    public\r\n    onlyOwner\r\n  {\r\n    require(_addr != address(0) && admin[_addr] == false);\r\n    admin[_addr] = true;\r\n\r\n    emit NewAdmin(_addr);\r\n  }\r\n\r\n  /**\r\n   * @dev register the address for token sale\r\n   * @param _addr address The address to register for token sale\r\n   */\r\n  function register(address _addr)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    require(_addr != address(0) && registeredAddress[_addr] == false);\r\n\r\n    registeredAddress[_addr] = true;\r\n\r\n    emit Registered(_addr);\r\n  }\r\n\r\n  /**\r\n   * @dev register the addresses for token sale\r\n   * @param _addrs address[] The addresses to register for token sale\r\n   */\r\n  function registerByList(address[] _addrs)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    for(uint256 i = 0; i < _addrs.length; i++) {\r\n      require(_addrs[i] != address(0) && registeredAddress[_addrs[i]] == false);\r\n\r\n      registeredAddress[_addrs[i]] = true;\r\n\r\n      emit Registered(_addrs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev unregister the registered address\r\n   * @param _addr address The address to unregister for token sale\r\n   */\r\n  function unregister(address _addr)\r\n    public\r\n    onlyAdmin\r\n    onlyRegistered(_addr)\r\n  {\r\n    registeredAddress[_addr] = false;\r\n\r\n    emit Unregistered(_addr);\r\n  }\r\n\r\n  /**\r\n   * @dev unregister the registered addresses\r\n   * @param _addrs address[] The addresses to unregister for token sale\r\n   */\r\n  function unregisterByList(address[] _addrs)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    for(uint256 i = 0; i < _addrs.length; i++) {\r\n      require(registeredAddress[_addrs[i]]);\r\n\r\n      registeredAddress[_addrs[i]] = false;\r\n\r\n      emit Unregistered(_addrs[i]);\r\n    }\r\n  }\r\n\r\n  function claimTokens(address _token) public onlyOwner {\r\n\r\n    if (_token == 0x0) {\r\n        owner.transfer( address(this).balance );\r\n        return;\r\n    }\r\n\r\n    ERC20Basic token = ERC20Basic(_token);\r\n    uint256 balance = token.balanceOf(this);\r\n    token.transfer(owner, balance);\r\n\r\n    emit ClaimedTokens(_token, owner, balance);\r\n  }\r\n}\r\n\r\n// File: contracts/token/Controlled.sol\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n    address public controller;\r\n\r\n    constructor() public { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) public onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\n// File: contracts/token/TokenController.sol\r\n\r\n/// @dev The token controller contract must implement these functions\r\ncontract TokenController {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) public payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount) public\r\n        returns(bool);\r\n}\r\n\r\n// File: contracts/token/MiniMeToken.sol\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title MiniMeToken Contract\r\n/// @author Jordi Baylina\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n\r\n\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\r\n}\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) public returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            require (allowed[_from][msg.sender] >= _amount);\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal returns(bool) {\r\n\r\n           if (_amount == 0) {\r\n               return true;\r\n           }\r\n\r\n           require(parentSnapShotBlock < block.number);\r\n\r\n           // Do not allow transfer to 0x0 or the token contract itself\r\n           require((_to != 0) && (_to != address(this)));\r\n\r\n           // If the amount being transfered is more than the balance of the\r\n           //  account the transfer returns false\r\n           uint previousBalanceFrom = balanceOfAt(_from, block.number);\r\n           require(previousBalanceFrom >= _amount);\r\n           //if (previousBalanceFrom < _amount) {\r\n           //    return false;\r\n           //}\r\n\r\n           // Alerts the token controller of the transfer\r\n           if (isContract(controller)) {\r\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\r\n           }\r\n\r\n           // First update the balance array with the new value for the address\r\n           //  sending the tokens\r\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           // Then update the balance array with the new value for the address\r\n           //  receiving the tokens\r\n           uint previousBalanceTo = balanceOfAt(_to, block.number);\r\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           // An event to make the transfer easy to find on the blockchain\r\n           emit Transfer(_from, _to, _amount);\r\n\r\n           return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\r\n        returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n        ) public returns(address) {\r\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            _snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        emit NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount\r\n    ) public onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        emit Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount\r\n    ) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        emit Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) public onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) constant internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n    \r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function () public payable {\r\n        require(isContract(controller));\r\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\r\n    }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) public onlyController {\r\n        if (_token == 0x0) {\r\n            controller.transfer( address(this).balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(controller, balance);\r\n        emit ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public returns (MiniMeToken) {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\n// File: contracts/HEX.sol\r\n\r\ncontract HEX is MiniMeToken {\r\n    mapping (address => bool) public blacklisted;\r\n    bool public generateFinished;\r\n\r\n    constructor (address _tokenFactory)\r\n        MiniMeToken(\r\n              _tokenFactory,\r\n              0x0,                     // no parent token\r\n              0,                       // no snapshot block number from parent\r\n              \"Health Evolution on X.blockchain\",  // Token name\r\n              18,                      // Decimals\r\n              \"HEX\",                   // Symbol\r\n              false                     // Enable transfers\r\n          ) {\r\n    }\r\n\r\n    function generateTokens(address _holder, uint _amount) public onlyController returns (bool) {\r\n        require(generateFinished == false);\r\n        return super.generateTokens(_holder, _amount);\r\n    }\r\n\r\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\r\n        require(blacklisted[_from] == false);\r\n        return super.doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    function finishGenerating() public onlyController returns (bool) {\r\n        generateFinished = true;\r\n        return true;\r\n    }\r\n\r\n    function blacklistAccount(address tokenOwner) public onlyController returns (bool success) {\r\n        blacklisted[tokenOwner] = true;\r\n        return true;\r\n    }\r\n\r\n    function unBlacklistAccount(address tokenOwner) public onlyController returns (bool success) {\r\n        blacklisted[tokenOwner] = false;\r\n        return true;\r\n    }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) public onlyController {\r\n        if (_token == 0x0) {\r\n            controller.transfer( address(this).balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n        token.transfer(controller, balance);\r\n\r\n        emit ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n}\r\n\r\n// File: contracts/atxinf/ATXICOToken.sol\r\n\r\ncontract ATXICOToken {\r\n    function atxBuy(address _from, uint256 _amount) public returns(bool);\r\n}\r\n\r\n// File: contracts/HEXCrowdSale.sol\r\n\r\ncontract HEXCrowdSale is Ownerable, SafeMath, ATXICOToken {\r\n  uint256 public maxHEXCap;\r\n  uint256 public minHEXCap;\r\n\r\n  uint256 public ethRate;\r\n  uint256 public atxRate;\r\n  /* uint256 public ethFunded;\r\n  uint256 public atxFunded; */\r\n\r\n  address[] public ethInvestors;\r\n  mapping (address => uint256) public ethInvestorFunds;\r\n\r\n  address[] public atxInvestors;\r\n  mapping (address => uint256) public atxInvestorFunds;\r\n\r\n  address[] public atxChangeAddrs;\r\n  mapping (address => uint256) public atxChanges;\r\n\r\n  KYC public kyc;\r\n  HEX public hexToken;\r\n  address public hexControllerAddr;\r\n  ERC20Basic public atxToken;\r\n  address public atxControllerAddr;\r\n  //Vault public vault;\r\n\r\n  address[] public memWallets;\r\n  address[] public vaultWallets;\r\n\r\n  struct Period {\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    uint256 bonus; // used to calculate rate with bonus. ragne 0 ~ 15 (0% ~ 15%)\r\n  }\r\n  Period[] public periods;\r\n\r\n  bool public isInitialized;\r\n  bool public isFinalized;\r\n\r\n  function init (\r\n    address _kyc,\r\n    address _token,\r\n    address _hexController,\r\n    address _atxToken,\r\n    address _atxController,\r\n    // address _vault,\r\n    address[] _memWallets,\r\n    address[] _vaultWallets,\r\n    uint256 _ethRate,\r\n    uint256 _atxRate,\r\n    uint256 _maxHEXCap,\r\n    uint256 _minHEXCap ) public onlyOwner {\r\n\r\n      require(isInitialized == false);\r\n\r\n      kyc = KYC(_kyc);\r\n      hexToken = HEX(_token);\r\n      hexControllerAddr = _hexController;\r\n      atxToken = ERC20Basic(_atxToken);\r\n      atxControllerAddr = _atxController;\r\n\r\n      memWallets = _memWallets;\r\n      vaultWallets = _vaultWallets;\r\n\r\n      /* vault = Vault(_vault);\r\n      vault.setFundTokenAddr(_atxToken); */\r\n\r\n      ethRate = _ethRate;\r\n      atxRate = _atxRate;\r\n\r\n      maxHEXCap = _maxHEXCap;\r\n      minHEXCap = _minHEXCap;\r\n\r\n      isInitialized = true;\r\n    }\r\n\r\n    function () public payable {\r\n      ethBuy();\r\n    }\r\n\r\n    function ethBuy() internal {\r\n      // check validity\r\n      require(msg.value >= 50e18); // minimum fund\r\n\r\n      require(isInitialized);\r\n      require(!isFinalized);\r\n\r\n      require(msg.sender != 0x0 && msg.value != 0x0);\r\n      require(kyc.registeredAddress(msg.sender));\r\n      require(maxReached() == false);\r\n      require(onSale());\r\n\r\n      uint256 fundingAmt = msg.value;\r\n      uint256 bonus = getPeriodBonus();\r\n      uint256 currTotalSupply = hexToken.totalSupply();\r\n      uint256 fundableHEXRoom = sub(maxHEXCap, currTotalSupply);\r\n      uint256 reqedHex = eth2HexWithBonus(fundingAmt, bonus);\r\n      uint256 toFund;\r\n      uint256 reFund;\r\n\r\n      if(reqedHex > fundableHEXRoom) {\r\n        reqedHex = fundableHEXRoom;\r\n\r\n        toFund = hex2EthWithBonus(reqedHex, bonus); //div(fundableHEXRoom, mul(ethRate, add(1, div(bonus,100))));\r\n        reFund = sub(fundingAmt, toFund);\r\n\r\n        // toFund 로 계산한 HEX 수량이 fundableHEXRoom 과 같아야 한다.\r\n        // 그러나 소수점 문제로 인하여 정확히 같아지지 않을 경우가 발생한다.\r\n        //require(reqedHex == eth2HexWithBonus(toFund, bonus) );\r\n\r\n      } else {\r\n        toFund = fundingAmt;\r\n        reFund = 0;\r\n      }\r\n\r\n      require(fundingAmt >= toFund);\r\n      require(toFund > 0);\r\n\r\n      // pushInvestorList\r\n      if(ethInvestorFunds[msg.sender] == 0x0) {\r\n        ethInvestors.push(msg.sender);\r\n      }\r\n      ethInvestorFunds[msg.sender] = add(ethInvestorFunds[msg.sender], toFund);\r\n\r\n      /* ethFunded = add(ethFunded, toFund); */\r\n\r\n      hexToken.generateTokens(msg.sender, reqedHex);\r\n\r\n      if(reFund > 0) {\r\n        msg.sender.transfer(reFund);\r\n      }\r\n\r\n      //vault.ethDeposit.value(toFund)(msg.sender);\r\n\r\n      emit SaleToken(msg.sender, msg.sender, 0, toFund, reqedHex);\r\n    }\r\n\r\n    //\r\n    // ATXICOToken 메소드 구현.\r\n    // 외부에서 이 함수가 바로 호출되면 코인 생성됨.\r\n    // 반드시 ATXController 에서만 호출 허용 할 것.\r\n    //\r\n    function atxBuy(address _from, uint256 _amount) public returns(bool) {\r\n      // check validity\r\n      require(_amount >= 250000e18); // minimum fund\r\n\r\n      require(isInitialized);\r\n      require(!isFinalized);\r\n\r\n      require(_from != 0x0 && _amount != 0x0);\r\n      require(kyc.registeredAddress(_from));\r\n      require(maxReached() == false);\r\n      require(onSale());\r\n\r\n      // Only from ATX Controller.\r\n      require(msg.sender == atxControllerAddr);\r\n\r\n      // 수신자(현재컨트랙트) atx 수신후 잔액 오버플로우 확인.\r\n      uint256 currAtxBal = atxToken.balanceOf( address(this) );\r\n      require(currAtxBal + _amount >= currAtxBal); // Check for overflow\r\n\r\n      uint256 fundingAmt = _amount;\r\n      uint256 bonus = getPeriodBonus();\r\n      uint256 currTotalSupply = hexToken.totalSupply();\r\n      uint256 fundableHEXRoom = sub(maxHEXCap, currTotalSupply);\r\n      uint256 reqedHex = atx2HexWithBonus(fundingAmt, bonus); //mul(add(fundingAmt, mul(fundingAmt, div(bonus, 100))), atxRate);\r\n      uint256 toFund;\r\n      uint256 reFund;\r\n\r\n      if(reqedHex > fundableHEXRoom) {\r\n        reqedHex = fundableHEXRoom;\r\n\r\n        toFund = hex2AtxWithBonus(reqedHex, bonus); //div(fundableHEXRoom, mul(atxRate, add(1, div(bonus,100))));\r\n        reFund = sub(fundingAmt, toFund);\r\n\r\n        // toFund 로 계산한 HEX 수량이 fundableHEXRoom 과 같아야 한다.\r\n        // 그러나 소수점 문제로 인하여 정확히 같아지지 않을 경우가 발생한다.\r\n        //require(reqedHex == atx2HexWithBonus(toFund, bonus) );\r\n\r\n      } else {\r\n        toFund = fundingAmt;\r\n        reFund = 0;\r\n      }\r\n\r\n      require(fundingAmt >= toFund);\r\n      require(toFund > 0);\r\n\r\n\r\n      // pushInvestorList\r\n      if(atxInvestorFunds[_from] == 0x0) {\r\n        atxInvestors.push(_from);\r\n      }\r\n      atxInvestorFunds[_from] = add(atxInvestorFunds[_from], toFund);\r\n\r\n      /* atxFunded = add(atxFunded, toFund); */\r\n\r\n      hexToken.generateTokens(_from, reqedHex);\r\n\r\n      // 현재 시점에서\r\n      // HEXCrowdSale 이 수신한 ATX 는\r\n      // 아직 HEXCrowdSale 계정의 잔액에 반영되지 않았다....\r\n      // _amount 는 아직 this 의 잔액에 반영되지 않았기때문에,\r\n      // 이것을 vault 로 전송할 수도 없고,\r\n      // 잔액을 되돌릴 수도 없다.\r\n      if(reFund > 0) {\r\n        //atxToken.transfer(_from, reFund);\r\n        if(atxChanges[_from] == 0x0) {\r\n          atxChangeAddrs.push(_from);\r\n        }\r\n        atxChanges[_from] = add(atxChanges[_from], reFund);\r\n      }\r\n\r\n      // 현재 시점에서\r\n      // HEXCrowdSale 이 수신한 ATX 는\r\n      // 아직 HEXCrowdSale 계정의 잔액에 반영되지 않았다....\r\n      // 그래서 vault 로 전송할 수가 없다.\r\n      //if( atxToken.transfer( address(vault), toFund) ) {\r\n        //vault.atxDeposit(_from, toFund);\r\n      //}\r\n\r\n      emit SaleToken(msg.sender, _from, 1, toFund, reqedHex);\r\n\r\n      return true;\r\n    }\r\n\r\n    function finish() public onlyOwner {\r\n      require(!isFinalized);\r\n\r\n      returnATXChanges();\r\n\r\n      if(minReached()) {\r\n\r\n        //vault.close();\r\n        require(vaultWallets.length == 31);\r\n        uint eachATX = div(atxToken.balanceOf(address(this)), vaultWallets.length);\r\n        for(uint idx = 0; idx < vaultWallets.length; idx++) {\r\n          // atx\r\n          atxToken.transfer(vaultWallets[idx], eachATX);\r\n        }\r\n        // atx remained\r\n        if(atxToken.balanceOf(address(this)) > 0) {\r\n          atxToken.transfer(vaultWallets[vaultWallets.length - 1], atxToken.balanceOf(address(this)));\r\n        }\r\n        // ether\r\n        //if(address(this).balance > 0) {\r\n          vaultWallets[vaultWallets.length - 1].transfer( address(this).balance );\r\n        //}\r\n\r\n        require(memWallets.length == 6);\r\n        hexToken.generateTokens(memWallets[0], 14e26); // airdrop\r\n        hexToken.generateTokens(memWallets[1], 84e25); // team locker\r\n        hexToken.generateTokens(memWallets[2], 84e25); // advisors locker\r\n        hexToken.generateTokens(memWallets[3], 80e25); // healthdata mining\r\n        hexToken.generateTokens(memWallets[4], 92e25); // marketing\r\n        hexToken.generateTokens(memWallets[5], 80e25); // reserved\r\n\r\n        //hexToken.enableTransfers(true);\r\n\r\n      } else {\r\n        //vault.enableRefunds();\r\n      }\r\n\r\n      hexToken.finishGenerating();\r\n      hexToken.changeController(hexControllerAddr);\r\n\r\n      isFinalized = true;\r\n\r\n      emit SaleFinished();\r\n    }\r\n\r\n    function maxReached() public view returns (bool) {\r\n      return (hexToken.totalSupply() >= maxHEXCap);\r\n    }\r\n\r\n    function minReached() public view returns (bool) {\r\n      return (hexToken.totalSupply() >= minHEXCap);\r\n    }\r\n\r\n    function addPeriod(uint256 _start, uint256 _end) public onlyOwner {\r\n      require(now < _start && _start < _end);\r\n      if (periods.length != 0) {\r\n        //require(sub(_endTime, _startTime) <= 7 days);\r\n        require(periods[periods.length - 1].endTime < _start);\r\n      }\r\n      Period memory newPeriod;\r\n      newPeriod.startTime = _start;\r\n      newPeriod.endTime = _end;\r\n      newPeriod.bonus = 0;\r\n      if(periods.length == 0) {\r\n        newPeriod.bonus = 50; // Private\r\n      }\r\n      else if(periods.length == 1) {\r\n        newPeriod.bonus = 30; // pre\r\n      }\r\n      else if(periods.length == 2) {\r\n        newPeriod.bonus = 20; // crowd 1\r\n      }\r\n      else if (periods.length == 3) {\r\n        newPeriod.bonus = 15; // crowd 2\r\n      }\r\n      else if (periods.length == 4) {\r\n        newPeriod.bonus = 10; // crowd 3\r\n      }\r\n      else if (periods.length == 5) {\r\n        newPeriod.bonus = 5; // crowd 4\r\n      }\r\n\r\n      periods.push(newPeriod);\r\n    }\r\n\r\n    function getPeriodBonus() public view returns (uint256) {\r\n      bool nowOnSale;\r\n      uint256 currentPeriod;\r\n\r\n      for (uint i = 0; i < periods.length; i++) {\r\n        if (periods[i].startTime <= now && now <= periods[i].endTime) {\r\n          nowOnSale = true;\r\n          currentPeriod = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      require(nowOnSale);\r\n      return periods[currentPeriod].bonus;\r\n    }\r\n\r\n    function eth2HexWithBonus(uint256 _eth, uint256 bonus) public view returns(uint256) {\r\n      uint basic = mul(_eth, ethRate);\r\n      return div(mul(basic, add(bonus, 100)), 100);\r\n      //return add(basic, div(mul(basic, bonus), 100));\r\n    }\r\n\r\n    function hex2EthWithBonus(uint256 _hex, uint256 bonus) public view returns(uint256)  {\r\n      return div(mul(_hex, 100), mul(ethRate, add(100, bonus)));\r\n      //return div(_hex, mul(ethRate, add(1, div(bonus,100))));\r\n    }\r\n\r\n    function atx2HexWithBonus(uint256 _atx, uint256 bonus) public view returns(uint256)  {\r\n      uint basic = mul(_atx, atxRate);\r\n      return div(mul(basic, add(bonus, 100)), 100);\r\n      //return add(basic, div(mul(basic, bonus), 100));\r\n    }\r\n\r\n    function hex2AtxWithBonus(uint256 _hex, uint256 bonus) public view returns(uint256)  {\r\n      return div(mul(_hex, 100), mul(atxRate, add(100, bonus)));\r\n      //return div(_hex, mul(atxRate, add(1, div(bonus,100))));\r\n    }\r\n\r\n    function onSale() public view returns (bool) {\r\n      bool nowOnSale;\r\n\r\n      // Except Private Sale...\r\n      for (uint i = 1; i < periods.length; i++) {\r\n        if (periods[i].startTime <= now && now <= periods[i].endTime) {\r\n          nowOnSale = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      return nowOnSale;\r\n    }\r\n\r\n    function atxChangeAddrCount() public view returns(uint256) {\r\n      return atxChangeAddrs.length;\r\n    }\r\n\r\n    function returnATXChanges() public onlyOwner {\r\n      //require(atxChangeAddrs.length > 0);\r\n\r\n      for(uint256 i=0; i<atxChangeAddrs.length; i++) {\r\n        if(atxChanges[atxChangeAddrs[i]] > 0) {\r\n            if( atxToken.transfer(atxChangeAddrs[i], atxChanges[atxChangeAddrs[i]]) ) {\r\n              atxChanges[atxChangeAddrs[i]] = 0x0;\r\n            }\r\n        }\r\n      }\r\n    }\r\n\r\n    //\r\n    // Safety Methods\r\n    function claimTokens(address _claimToken) public onlyOwner {\r\n\r\n      if (hexToken.controller() == address(this)) {\r\n           hexToken.claimTokens(_claimToken);\r\n      }\r\n\r\n      if (_claimToken == 0x0) {\r\n          owner.transfer(address(this).balance);\r\n          return;\r\n      }\r\n\r\n      ERC20Basic claimToken = ERC20Basic(_claimToken);\r\n      uint256 balance = claimToken.balanceOf( address(this) );\r\n      claimToken.transfer(owner, balance);\r\n\r\n      emit ClaimedTokens(_claimToken, owner, balance);\r\n    }\r\n\r\n    //\r\n    // Event\r\n\r\n    event SaleToken(address indexed _sender, address indexed _investor, uint256 indexed _fundType, uint256 _toFund, uint256 _hexTokens);\r\n    event ClaimedTokens(address indexed _claimToken, address indexed owner, uint256 balance);\r\n    event SaleFinished();\r\n  }","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethInvestorFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atxChangeAddrCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"atxBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hexControllerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atxControllerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hexToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_atx\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"atx2HexWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minHEXCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"addPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"atxInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxHEXCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atxRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"atxInvestorFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"atxChangeAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atxToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"atxChanges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hex\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"hex2AtxWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnATXChanges\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimToken\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPeriodBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyc\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_hexController\",\"type\":\"address\"},{\"name\":\"_atxToken\",\"type\":\"address\"},{\"name\":\"_atxController\",\"type\":\"address\"},{\"name\":\"_memWallets\",\"type\":\"address[]\"},{\"name\":\"_vaultWallets\",\"type\":\"address[]\"},{\"name\":\"_ethRate\",\"type\":\"uint256\"},{\"name\":\"_atxRate\",\"type\":\"uint256\"},{\"name\":\"_maxHEXCap\",\"type\":\"uint256\"},{\"name\":\"_minHEXCap\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hex\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"hex2EthWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"eth2HexWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_fundType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_toFund\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_hexTokens\",\"type\":\"uint256\"}],\"name\":\"SaleToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_claimToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleFinished\",\"type\":\"event\"}]","ContractName":"HEXCrowdSale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c9ed2beef83d9bcd25769ee2ccf2088eff752da9d7dcf2e8d87bee1f3970e3b0"}]}