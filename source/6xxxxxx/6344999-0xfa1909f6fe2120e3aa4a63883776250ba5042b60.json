{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/// @title Escrow contract\r\n/// @author Farah\r\n/// @notice It's a contract for escrow based creating, claiming and rewarding jobs.\r\n\r\ncontract Escrow{\r\n\r\n    using SafeMath for uint;\r\n    enum JobStatus { Open, inProgress, Completed, Cancelled }\r\n\r\n    struct Job{\r\n        string description;               // description of job\r\n        // uint JobID;                       // Id of the job\r\n        address manager;                  // address of manager\r\n        uint salaryDeposited;             // salary deposited by manager\r\n        address worker;                   // address of worker\r\n        JobStatus status;                 // current status of the job\r\n        uint noOfTotalPayments;           // total number of Payments set by the manager\r\n        uint noOfPaymentsMade;            // number of payments that have already been made\r\n        uint paymentAvailableForWorker;   // amount of DAI tokens available for the worker as claimable\r\n        uint totalPaidToWorker;           // total amount of DAI tokens paid to worker so far for this job\r\n        address evaluator;                // address of evaluator for this job\r\n        bool proofOfLastWorkVerified;     // status of the proof of work for the last milestone\r\n        uint sponsoredTokens;             // amount of DAI tokens sponsored to the job\r\n        mapping(address => uint) sponsors; // mapping of all the sponsors with their contributions for a job\r\n        address[] sponsorList;             // List of addresses for all sponsors for iterations\r\n        uint sponsorsCount;                // total number of contributors for this job\r\n    }\r\n\r\n    Job[] public Jobs;                    // List of all the jobs\r\n\r\n\r\n    mapping(address => uint[]) public JobsByManager;        // all the jobs held by a manager\r\n    mapping(address => uint[]) public JobsByWorker;         // all the jobs held by a worker\r\n\r\n\r\n    ERC20 public DAI;\r\n\r\n    uint public jobCount = 0;     // current count of the total Jobs\r\n\r\n    address public arbitrator;     // address of arbitrator\r\n\r\n    constructor(address _DAI, address _arbitrator) public{\r\n        DAI = ERC20(_DAI);\r\n        arbitrator = _arbitrator;\r\n    }\r\n\r\n    \r\n    modifier onlyArbitrator{\r\n        require(msg.sender == arbitrator);\r\n        _;\r\n    }\r\n\r\n    event JobCreated(address manager, uint salary, uint noOfTotalPayments, uint JobID, string description);\r\n\r\n    /// @notice this function creates a job\r\n    /// @dev Uses transferFrom on the DAI token contract\r\n    /// @param _salary is the amount of salary deposited by the manager\r\n    /// @param _noOfTotalPayments is the number of total payments iterations set by the manager\r\n    function createJob(string _description, uint _salary, uint _noOfTotalPayments) public {\r\n        require(_salary > 0);\r\n        require(_noOfTotalPayments > 0);\r\n\r\n        address[] memory empty;\r\n        uint finalSalary = _salary.sub(_salary.mul(1).div(50));\r\n\r\n        Job memory newJob = Job(_description, msg.sender, finalSalary, 0x0, JobStatus.Open, _noOfTotalPayments, 0, 0, 0, 0x0, false, 0, empty, 0);\r\n        Jobs.push(newJob);\r\n        JobsByManager[msg.sender].push(jobCount);\r\n\r\n        require(DAI.allowance(msg.sender, address(this)) >= _salary);\r\n\r\n        emit JobCreated(msg.sender, finalSalary, _noOfTotalPayments, jobCount, _description);\r\n        jobCount++;\r\n\r\n        DAI.transferFrom(msg.sender, address(this), _salary);  \r\n\r\n    }\r\n\r\n\r\n    event JobClaimed(address worker, uint JobID);\r\n\r\n    /// @notice this function lets the worker claim the job\r\n    /// @dev Uses transferFrom on the DAI token contract\r\n    /// @param _JobID is the ID of the job to be claimed by the worker\r\n    function claimJob(uint _JobID) public {\r\n        require(_JobID >= 0);\r\n\r\n        Job storage job = Jobs[_JobID];\r\n\r\n        require(msg.sender != job.manager);\r\n        require(msg.sender != job.evaluator);\r\n\r\n        require(job.status == JobStatus.Open);\r\n\r\n        job.worker = msg.sender;\r\n        job.status = JobStatus.inProgress;\r\n\r\n        JobsByWorker[msg.sender].push(_JobID);\r\n        emit JobClaimed(msg.sender, _JobID);\r\n\r\n        \r\n    }\r\n\r\n\r\n    event EvaluatorSet(uint JobID, address evaluator);\r\n\r\n    /// @notice this function lets a registered address become an evaluator for a job\r\n    /// @param _JobID is the ID of the job for which the sender wants to become an evaluator\r\n    function setEvaluator(uint _JobID) public {\r\n        require(_JobID >= 0);\r\n\r\n        Job storage job = Jobs[_JobID];\r\n\r\n        require(msg.sender != job.manager);\r\n        require(msg.sender != job.worker);\r\n\r\n        job.evaluator = msg.sender;\r\n        emit EvaluatorSet(_JobID, msg.sender);\r\n\r\n    }\r\n\r\n\r\n    event JobCancelled(uint JobID);\r\n\r\n    /// @notice this function lets the manager or arbitrator cancel the job\r\n    /// @dev Uses transfer on the DAI token contract to return DAI from escrow to manager\r\n    /// @param _JobID is the ID of the job to be cancelled\r\n    function cancelJob(uint _JobID) public {\r\n        require(_JobID >= 0);\r\n\r\n        Job storage job = Jobs[_JobID];\r\n\r\n        if(msg.sender != arbitrator){\r\n            require(job.manager == msg.sender);\r\n            require(job.worker == 0x0);\r\n            require(job.status == JobStatus.Open);\r\n        }\r\n\r\n        job.status = JobStatus.Cancelled;\r\n        uint returnAmount = job.salaryDeposited; \r\n\r\n        emit JobCancelled(_JobID);\r\n        DAI.transfer(job.manager, returnAmount);\r\n    }\r\n\r\n\r\n    event PaymentClaimed(address worker, uint amount, uint JobID);\r\n\r\n    /// @notice this function lets the worker claim the approved payment\r\n    /// @dev Uses transfer on the DAI token contract to send DAI from escrow to worker\r\n    /// @param _JobID is the ID of the job from which the worker intends to claim the DAI tokens\r\n    function claimPayment(uint _JobID) public {\r\n        require(_JobID >= 0);\r\n\r\n        Job storage job = Jobs[_JobID];\r\n\r\n        require(job.worker == msg.sender);\r\n\r\n        uint payment = job.paymentAvailableForWorker;\r\n        require(payment > 0);\r\n\r\n        job.paymentAvailableForWorker = 0;\r\n\r\n        emit PaymentClaimed(msg.sender, payment, _JobID);\r\n        DAI.transfer(msg.sender, payment);\r\n        \r\n    }\r\n\r\n\r\n    event PaymentApproved(address manager, uint JobID, uint amount);\r\n\r\n    /// @notice this function lets the manager to approve payment\r\n    /// @param _JobID is the ID of the job for which the payment is approved\r\n    function approvePayment(uint _JobID) public {\r\n        require(_JobID >= 0);\r\n\r\n        Job storage job = Jobs[_JobID];\r\n\r\n        if(msg.sender != arbitrator){\r\n            require(job.manager == msg.sender);\r\n            require(job.proofOfLastWorkVerified == true);\r\n        }\r\n        require(job.noOfTotalPayments > job.noOfPaymentsMade);\r\n\r\n        uint currentPayment = job.salaryDeposited.div(job.noOfTotalPayments);\r\n\r\n        job.paymentAvailableForWorker = job.paymentAvailableForWorker + currentPayment;\r\n        job.totalPaidToWorker = job.totalPaidToWorker + currentPayment;\r\n        job.noOfPaymentsMade++;\r\n\r\n        if(job.noOfTotalPayments == job.noOfPaymentsMade){\r\n            job.status = JobStatus.Completed;\r\n        }\r\n\r\n        emit PaymentApproved(msg.sender, _JobID, currentPayment);\r\n\r\n    }\r\n\r\n\r\n    event EvaluatorPaid(address manager, address evaluator, uint JobID, uint payment);\r\n\r\n    /// @notice this function lets the manager pay DAI to arbitrator\r\n    /// @dev Uses transferFrom on the DAI token contract to send DAI from manager to evaluator\r\n    /// @param _JobID is the ID of the job for which the evaluator is to be paid\r\n    /// @param _payment is the amount of DAI tokens to be paid to evaluator\r\n    function payToEvaluator(uint _JobID, uint _payment) public {\r\n        require(_JobID >= 0);\r\n        require(_payment > 0);\r\n\r\n        Job storage job = Jobs[_JobID];\r\n        require(msg.sender == job.manager);\r\n\r\n        address evaluator = job.evaluator;\r\n\r\n        require(DAI.allowance(job.manager, address(this)) >= _payment);\r\n\r\n        emit EvaluatorPaid(msg.sender, evaluator, _JobID, _payment);\r\n        DAI.transferFrom(job.manager, evaluator, _payment);\r\n\r\n\r\n    }\r\n\r\n\r\n    event ProofOfWorkConfirmed(uint JobID, address evaluator, bool proofVerified);\r\n\r\n    /// @notice this function lets the evaluator confirm the proof of work provided by worker \r\n    /// @param _JobID is the ID of the job for which the evaluator confirms proof of work\r\n    function confirmProofOfWork(uint _JobID) public {\r\n        require(_JobID >= 0);\r\n\r\n        Job storage job = Jobs[_JobID];\r\n        require(msg.sender == job.evaluator);\r\n\r\n        job.proofOfLastWorkVerified = true;\r\n\r\n        emit ProofOfWorkConfirmed(_JobID, job.evaluator, true);\r\n\r\n    }\r\n\r\n    event ProofOfWorkProvided(uint JobID, address worker, bool proofProvided);\r\n\r\n    /// @notice this function lets the worker provide proof of work\r\n    /// @param _JobID is the ID of the job for which worker provides proof\r\n    function provideProofOfWork(uint _JobID) public {\r\n        require(_JobID >= 0);\r\n\r\n        Job storage job = Jobs[_JobID];\r\n        require(msg.sender == job.worker);\r\n\r\n        job.proofOfLastWorkVerified = false;\r\n        emit ProofOfWorkProvided(_JobID, msg.sender, true);\r\n\r\n    }\r\n\r\n\r\n    event TipMade(address from, address to, uint amount);\r\n\r\n    /// @notice this function lets any registered address send DAI tokens to any other address\r\n    /// @dev Uses transferFrom on the DAI token contract to send DAI from sender's address to receiver's address\r\n    /// @param _to is the address of the receiver receiving the DAI tokens\r\n    /// @param _amount is the amount of DAI tokens to be paid to receiving address\r\n    function tip(address _to, uint _amount) public {\r\n        require(_to != 0x0);\r\n        require(_amount > 0);\r\n        require(DAI.allowance(msg.sender, address(this)) >= _amount);\r\n\r\n        emit TipMade(msg.sender, _to, _amount);\r\n        DAI.transferFrom(msg.sender, _to, _amount);\r\n    }\r\n\r\n\r\n    event DAISponsored(uint JobID, uint amount, address sponsor);\r\n    \r\n    /// @notice this function lets any registered address send DAI tokens to any Job as sponsored tokens\r\n    /// @dev Uses transferFrom on the DAI token contract to send DAI from sender's address to Escrow\r\n    /// @param _JobID is the ID of the job for which the sponsor contributes DAI\r\n    /// @param _amount is the amount of DAI tokens to be sponsored to the Job\r\n    function sponsorDAI(uint _JobID, uint _amount) public {\r\n        require(_JobID >= 0);\r\n        require(_amount > 0);\r\n\r\n        Job storage job = Jobs[_JobID];\r\n\r\n        if(job.sponsors[msg.sender] == 0){\r\n            job.sponsorList.push(msg.sender);\r\n        }\r\n\r\n        job.sponsors[msg.sender] = job.sponsors[msg.sender] + _amount;\r\n        job.sponsoredTokens = job.sponsoredTokens + _amount;\r\n\r\n        emit DAISponsored(_JobID, _amount, msg.sender);\r\n        \r\n        require(DAI.allowance(msg.sender, address(this)) >= _amount);\r\n        DAI.transferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n\r\n    event DAIWithdrawn(address receiver, uint amount);\r\n\r\n    /// @notice this function lets arbitrator withdraw DAI to the provided address \r\n    /// @dev Uses transfer on the DAI token contract to send DAI from Escrow to the provided address\r\n    /// @param _receiver is the receiving the withdrawn DAI tokens\r\n    /// @param _amount is the amount of DAI tokens to be withdrawn\r\n    function withdrawDAI(address _receiver, uint _amount) public onlyArbitrator {\r\n        require(_receiver != 0x0);\r\n        require(_amount > 0);\r\n        \r\n        require(DAI.balanceOf(address(this)) >= _amount);\r\n\r\n        DAI.transfer(_receiver, _amount);\r\n        emit DAIWithdrawn(_receiver, _amount);\r\n    }\r\n\r\n\r\n    /// @notice this function lets get an amount of sponsored DAI by an address in a given job\r\n    /// @param _JobID is the Job for the job\r\n    /// @param _sponsor is the address of sponsor for which we are retreiving the sponsored tokens amount\r\n    function get_Sponsored_Amount_in_Job_By_Address(uint _JobID, address _sponsor) public view returns (uint) {\r\n        require(_JobID >= 0);\r\n        require(_sponsor != 0x0);\r\n\r\n        Job storage job = Jobs[_JobID];\r\n\r\n        return job.sponsors[_sponsor];\r\n    }\r\n\r\n\r\n    /// @notice this function lets retreive the list of all sponsors in a given job\r\n    /// @param _JobID is the Job for the job for which we are retrieving the list of sponsors\r\n    function get_Sponsors_list_by_Job(uint _JobID) public view returns (address[] list) {\r\n        require(_JobID >= 0);\r\n\r\n        Job storage job = Jobs[_JobID];\r\n\r\n        list = new address[](job.sponsorsCount);\r\n\r\n        list = job.sponsorList;\r\n    }\r\n\r\n\r\n    function getJob(uint _JobID) public view returns ( string _description, address _manager, uint _salaryDeposited, address _worker, uint _status, uint _noOfTotalPayments, uint _noOfPaymentsMade, uint _paymentAvailableForWorker, uint _totalPaidToWorker, address _evaluator, bool _proofOfLastWorkVerified, uint _sponsoredTokens, uint _sponsorsCount) {\r\n        require(_JobID >= 0);\r\n\r\n        Job storage job = Jobs[_JobID];\r\n        _description = job.description;\r\n        _manager = job.manager;\r\n        _salaryDeposited = job.salaryDeposited;             \r\n        _worker = job.worker;                   \r\n        _status = uint(job.status);                 \r\n        _noOfTotalPayments = job.noOfTotalPayments;           \r\n        _noOfPaymentsMade = job.noOfPaymentsMade;           \r\n        _paymentAvailableForWorker = job.paymentAvailableForWorker;   \r\n        _totalPaidToWorker = job.totalPaidToWorker;           \r\n        _evaluator = job.evaluator;               \r\n        _proofOfLastWorkVerified = job.proofOfLastWorkVerified;     \r\n        _sponsoredTokens = job.sponsoredTokens;             \r\n        _sponsorsCount = job.sponsorsCount;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_JobID\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sponsorDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_JobID\",\"type\":\"uint256\"},{\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"get_Sponsored_Amount_in_Job_By_Address\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_JobID\",\"type\":\"uint256\"}],\"name\":\"cancelJob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Jobs\",\"outputs\":[{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"manager\",\"type\":\"address\"},{\"name\":\"salaryDeposited\",\"type\":\"uint256\"},{\"name\":\"worker\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"noOfTotalPayments\",\"type\":\"uint256\"},{\"name\":\"noOfPaymentsMade\",\"type\":\"uint256\"},{\"name\":\"paymentAvailableForWorker\",\"type\":\"uint256\"},{\"name\":\"totalPaidToWorker\",\"type\":\"uint256\"},{\"name\":\"evaluator\",\"type\":\"address\"},{\"name\":\"proofOfLastWorkVerified\",\"type\":\"bool\"},{\"name\":\"sponsoredTokens\",\"type\":\"uint256\"},{\"name\":\"sponsorsCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_JobID\",\"type\":\"uint256\"}],\"name\":\"get_Sponsors_list_by_Job\",\"outputs\":[{\"name\":\"list\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_JobID\",\"type\":\"uint256\"}],\"name\":\"setEvaluator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"JobsByManager\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jobCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_JobID\",\"type\":\"uint256\"},{\"name\":\"_payment\",\"type\":\"uint256\"}],\"name\":\"payToEvaluator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_salary\",\"type\":\"uint256\"},{\"name\":\"_noOfTotalPayments\",\"type\":\"uint256\"}],\"name\":\"createJob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_JobID\",\"type\":\"uint256\"}],\"name\":\"getJob\",\"outputs\":[{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_salaryDeposited\",\"type\":\"uint256\"},{\"name\":\"_worker\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"uint256\"},{\"name\":\"_noOfTotalPayments\",\"type\":\"uint256\"},{\"name\":\"_noOfPaymentsMade\",\"type\":\"uint256\"},{\"name\":\"_paymentAvailableForWorker\",\"type\":\"uint256\"},{\"name\":\"_totalPaidToWorker\",\"type\":\"uint256\"},{\"name\":\"_evaluator\",\"type\":\"address\"},{\"name\":\"_proofOfLastWorkVerified\",\"type\":\"bool\"},{\"name\":\"_sponsoredTokens\",\"type\":\"uint256\"},{\"name\":\"_sponsorsCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_JobID\",\"type\":\"uint256\"}],\"name\":\"claimPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_JobID\",\"type\":\"uint256\"}],\"name\":\"provideProofOfWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_JobID\",\"type\":\"uint256\"}],\"name\":\"approvePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_JobID\",\"type\":\"uint256\"}],\"name\":\"claimJob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"JobsByWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_JobID\",\"type\":\"uint256\"}],\"name\":\"confirmProofOfWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_DAI\",\"type\":\"address\"},{\"name\":\"_arbitrator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"salary\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"noOfTotalPayments\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"JobID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"JobCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"JobID\",\"type\":\"uint256\"}],\"name\":\"JobClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"JobID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"evaluator\",\"type\":\"address\"}],\"name\":\"EvaluatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"JobID\",\"type\":\"uint256\"}],\"name\":\"JobCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"JobID\",\"type\":\"uint256\"}],\"name\":\"PaymentClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"JobID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"evaluator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"JobID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"EvaluatorPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"JobID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"evaluator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proofVerified\",\"type\":\"bool\"}],\"name\":\"ProofOfWorkConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"JobID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proofProvided\",\"type\":\"bool\"}],\"name\":\"ProofOfWorkProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TipMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"JobID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"DAISponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DAIWithdrawn\",\"type\":\"event\"}]","ContractName":"Escrow","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000a7c2662a534a0ae22e8b0f27d6a099e3b3971c6a","Library":"","SwarmSource":"bzzr://8f1990a7e5d35c6127e1d06afa69ab6156b102c3de27af18120a49c74512a615"}]}