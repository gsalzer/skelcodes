{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: node_modules/zos-lib/contracts/application/versioning/ImplementationProvider.sol\r\n\r\n/**\r\n * @title ImplementationProvider\r\n * @dev Interface for providing implementation addresses for other contracts by name.\r\n */\r\ninterface ImplementationProvider {\r\n  /**\r\n   * @dev Abstract function to return the implementation address of a contract.\r\n   * @param contractName Name of the contract.\r\n   * @return Implementation address of the contract.\r\n   */\r\n  function getImplementation(string contractName) public view returns (address);\r\n}\r\n\r\n// File: node_modules/zos-lib/contracts/upgradeability/Proxy.sol\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  function () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize)\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize)\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize) }\r\n      default { return(0, returndatasize) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/zos-lib/contracts/upgradeability/UpgradeabilityProxy.sol\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _implementation Address of the initial implementation.\r\n   */\r\n  constructor(address _implementation) public {\r\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\r\n\r\n    _setImplementation(_implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) private {\r\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n// File: node_modules/zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Contract constructor.\r\n   * It sets the `msg.sender` as the proxy administrator.\r\n   * @param _implementation address of the initial implementation.\r\n   */\r\n  constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\r\n    assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\r\n\r\n    _setAdmin(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external view ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external view ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be\r\n   * called, as described in\r\n   * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    require(address(this).call.value(msg.value)(data));\r\n  }\r\n\r\n  /**\r\n   * @return The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() internal {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    super._willFallback();\r\n  }\r\n}\r\n\r\n// File: node_modules/zos-lib/contracts/upgradeability/UpgradeabilityProxyFactory.sol\r\n\r\n/**\r\n * @title UpgradeabilityProxyFactory\r\n * @dev Factory to create upgradeability proxies.\r\n */\r\ncontract UpgradeabilityProxyFactory {\r\n  /**\r\n   * @dev Emitted when a new proxy is created.\r\n   * @param proxy Address of the created proxy.\r\n   */\r\n  event ProxyCreated(address proxy);\r\n\r\n  /**\r\n   * @dev Creates an upgradeability proxy with an initial implementation.\r\n   * @param admin Address of the proxy admin.\r\n   * @param implementation Address of the initial implementation.\r\n   * @return Address of the new proxy.\r\n   */\r\n  function createProxy(address admin, address implementation) public returns (AdminUpgradeabilityProxy) {\r\n    AdminUpgradeabilityProxy proxy = _createProxy(implementation);\r\n    proxy.changeAdmin(admin);\r\n    return proxy;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates an upgradeability proxy with an initial implementation and calls it.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param admin Address of the proxy admin.\r\n   * @param implementation Address of the initial implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be\r\n   * called, as described in\r\n   * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\r\n   * @return Address of the new proxy.\r\n   */\r\n  function createProxyAndCall(address admin, address implementation, bytes data) public payable returns (AdminUpgradeabilityProxy) {\r\n    AdminUpgradeabilityProxy proxy = _createProxy(implementation);\r\n    proxy.changeAdmin(admin);\r\n    require(address(proxy).call.value(msg.value)(data));\r\n    return proxy;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to create an upgradeable proxy.\r\n   * @param implementation Address of the initial implementation.\r\n   * @return Address of the new proxy.\r\n   */\r\n  function _createProxy(address implementation) internal returns (AdminUpgradeabilityProxy) {\r\n    AdminUpgradeabilityProxy proxy = new AdminUpgradeabilityProxy(implementation);\r\n    emit ProxyCreated(proxy);\r\n    return proxy;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: node_modules/zos-lib/contracts/application/BaseApp.sol\r\n\r\n/**\r\n * @title BaseApp\r\n * @dev Abstract base contract for upgradeable applications.\r\n * It handles the creation and upgrading of proxies.\r\n */\r\ncontract BaseApp is Ownable {\r\n  /// @dev Factory that creates proxies.\r\n  UpgradeabilityProxyFactory public factory;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   * @param _factory Proxy factory\r\n   */\r\n  constructor(UpgradeabilityProxyFactory _factory) public {\r\n    require(address(_factory) != address(0), \"Cannot set the proxy factory of an app to the zero address\");\r\n    factory = _factory;\r\n  }\r\n\r\n  /**\r\n   * @dev Abstract function to return the implementation provider.\r\n   * @return The implementation provider.\r\n   */\r\n  function getProvider() internal view returns (ImplementationProvider);\r\n\r\n  /**\r\n   * @dev Returns the implementation address for a given contract name, provided by the `ImplementationProvider`.\r\n   * @param contractName Name of the contract.\r\n   * @return Address where the contract is implemented.\r\n   */\r\n  function getImplementation(string contractName) public view returns (address) {\r\n    return getProvider().getImplementation(contractName);\r\n  }\r\n\r\n  /**\r\n   * @dev Creates a new proxy for the given contract.\r\n   * @param contractName Name of the contract.\r\n   * @return Address of the new proxy.\r\n   */\r\n  function create(string contractName) public returns (AdminUpgradeabilityProxy) {\r\n    address implementation = getImplementation(contractName);\r\n    return factory.createProxy(this, implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Creates a new proxy for the given contract and forwards a function call to it.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param contractName Name of the contract.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be\r\n   * called, as described in\r\n   * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\r\n   * @return Address of the new proxy.\r\n   */\r\n   function createAndCall(string contractName, bytes data) payable public returns (AdminUpgradeabilityProxy) {\r\n    address implementation = getImplementation(contractName);\r\n    return factory.createProxyAndCall.value(msg.value)(this, implementation, data);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades a proxy to the newest implementation of a contract.\r\n   * @param proxy Proxy to be upgraded.\r\n   * @param contractName Name of the contract.\r\n   */\r\n  function upgrade(AdminUpgradeabilityProxy proxy, string contractName) public onlyOwner {\r\n    address implementation = getImplementation(contractName);\r\n    proxy.upgradeTo(implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades a proxy to the newest implementation of a contract and forwards a function call to it.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param proxy Proxy to be upgraded.\r\n   * @param contractName Name of the contract.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be\r\n   * called, as described in\r\n   * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeAndCall(AdminUpgradeabilityProxy proxy, string contractName, bytes data) payable public onlyOwner {\r\n    address implementation = getImplementation(contractName);\r\n    proxy.upgradeToAndCall.value(msg.value)(implementation, data);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation of a proxy.\r\n   * This is needed because only the proxy admin can query it.\r\n   * @return The address of the current implementation of the proxy.\r\n   */\r\n  function getProxyImplementation(AdminUpgradeabilityProxy proxy) public view returns (address) {\r\n    return proxy.implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the admin of a proxy.\r\n   * Only the admin can query it.\r\n   * @return The address of the current admin of the proxy.\r\n   */\r\n  function getProxyAdmin(AdminUpgradeabilityProxy proxy) public view returns (address) {\r\n    return proxy.admin();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of a proxy.\r\n   * @param proxy Proxy to change admin.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeProxyAdmin(AdminUpgradeabilityProxy proxy, address newAdmin) public onlyOwner {\r\n    proxy.changeAdmin(newAdmin);\r\n  }\r\n}\r\n\r\n// File: node_modules/zos-lib/contracts/application/versioning/Package.sol\r\n\r\n/**\r\n * @title Package\r\n * @dev Collection of contracts grouped into versions.\r\n * Contracts with the same name can have different implementation addresses in different versions.\r\n */\r\ncontract Package is Ownable {\r\n  /**\r\n   * @dev Emitted when a version is added to the package.\r\n   * XXX The version is not indexed due to truffle testing constraints.\r\n   * @param version Name of the added version.\r\n   * @param provider ImplementationProvider associated with the version.\r\n   */\r\n  event VersionAdded(string version, ImplementationProvider provider);\r\n\r\n  /*\r\n   * @dev Mapping associating versions and their implementation providers.\r\n   */\r\n  mapping (string => ImplementationProvider) internal versions;\r\n\r\n  /**\r\n   * @dev Returns the implementation provider of a version.\r\n   * @param version Name of the version.\r\n   * @return The implementation provider of the version.\r\n   */\r\n  function getVersion(string version) public view returns (ImplementationProvider) {\r\n    ImplementationProvider provider = versions[version];\r\n    return provider;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds the implementation provider of a new version to the package.\r\n   * @param version Name of the version.\r\n   * @param provider ImplementationProvider associated with the version.\r\n   */\r\n  function addVersion(string version, ImplementationProvider provider) public onlyOwner {\r\n    require(!hasVersion(version), \"Given version is already registered in package\");\r\n    versions[version] = provider;\r\n    emit VersionAdded(version, provider);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether a version is present in the package.\r\n   * @param version Name of the version.\r\n   * @return true if the version is already in the package, false otherwise.\r\n   */\r\n  function hasVersion(string version) public view returns (bool) {\r\n    return address(versions[version]) != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the implementation address for a given version and contract name.\r\n   * @param version Name of the version.\r\n   * @param contractName Name of the contract.\r\n   * @return Address where the contract is implemented.\r\n   */\r\n  function getImplementation(string version, string contractName) public view returns (address) {\r\n    ImplementationProvider provider = getVersion(version);\r\n    return provider.getImplementation(contractName);\r\n  }\r\n}\r\n\r\n// File: node_modules/zos-lib/contracts/application/PackagedApp.sol\r\n\r\n/**\r\n * @title PackagedApp\r\n * @dev App for an upgradeable project that can use different versions.\r\n * This is the standard entry point for an upgradeable app.\r\n */\r\ncontract PackagedApp is BaseApp {\r\n  /// @dev Package that stores the contract implementation addresses.\r\n  Package public package;\r\n  /// @dev App version.\r\n  string public version;\r\n\r\n  /**\r\n   * @dev Constructor function.\r\n   * @param _package Package that stores the contract implementation addresses.\r\n   * @param _version Initial version of the app.\r\n   * @param _factory Proxy factory.\r\n   */\r\n  constructor(Package _package, string _version, UpgradeabilityProxyFactory _factory) BaseApp(_factory) public {\r\n    require(address(_package) != address(0), \"Cannot set the package of an app to the zero address\");\r\n    require(_package.hasVersion(_version), \"The requested version must be registered in the given package\");\r\n    package = _package;\r\n    version = _version;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the current version of the application.\r\n   * Contract implementations for the given version must already be registered in the package.\r\n   * @param newVersion Name of the new version.\r\n   */\r\n  function setVersion(string newVersion) public onlyOwner {\r\n    require(package.hasVersion(newVersion), \"The requested version must be registered in the given package\");\r\n    version = newVersion;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the provider for the current version.\r\n   * @return The provider for the current version.\r\n   */\r\n  function getProvider() internal view returns (ImplementationProvider) {\r\n    return package.getVersion(version);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"getImplementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proxy\",\"type\":\"address\"},{\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newVersion\",\"type\":\"string\"}],\"name\":\"setVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proxy\",\"type\":\"address\"},{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proxy\",\"type\":\"address\"},{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"package\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_package\",\"type\":\"address\"},{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_factory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PackagedApp","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000380a4dd169bd92752be49234155ba00365dc00f40000000000000000000000000000000000000000000000000000000000000060000000000000000000000000424661dd9505f77abe0df5f01823af086f5729d00000000000000000000000000000000000000000000000000000000000000005302e312e30000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://6b838c8f638f6efd7a4eb26701db2e72ba65222e83a7bd84250d037f9e19b398"}]}