{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract EtProfit{\r\n\r\n   using SafeMath for uint;\r\n    // array containing information about beneficiaries\r\n    mapping (address => uint) public balances;\r\n    //array containing information about the time of payment\r\n    mapping (address => uint) public time;\r\n    \r\n    //The marks of the balance on the contract after which the percentage of payments will change\r\n    uint steep1 = 1000;\r\n    uint steep2 = 2000;\r\n    uint steep3 = 3000;\r\n    uint steep4 = 4000;\r\n    uint steep5 = 5000;\r\n    \r\n    //the time through which dividends will be paid\r\n    uint dividendsTime = 1 days;\r\n    \r\n    event NewInvestor(address indexed investor, uint deposit);\r\n    event PayOffDividends(address indexed investor, uint value);\r\n    event NewDeposit(address indexed investor, uint value);\r\n    \r\n    uint public allDeposits;\r\n    uint public allPercents;\r\n    uint public allBeneficiaries;\r\n    uint public lastPayment;\r\n    \r\n    \r\n    \r\n    /**\r\n     * The modifier checking the positive balance of the beneficiary\r\n    */\r\n    modifier isIssetRecepient(){\r\n        require(balances[msg.sender] > 0,  \"Deposit not found\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * modifier checking the next payout time\r\n     */\r\n    modifier timeCheck(){\r\n        \r\n         require(now >= time[msg.sender].add(dividendsTime), \"Too fast payout request. The time of payment has not yet come\");\r\n         _;\r\n        \r\n    }\r\n    function getDepositMultiplier()public view  returns(uint){\r\n        uint percent = getPercent();\r\n        uint rate = balances[msg.sender].mul(percent).div(10000);\r\n        uint depositMultiplier = now.sub(time[msg.sender]).div(dividendsTime);\r\n        return(rate.mul(depositMultiplier));\r\n        \r\n    }\r\n    \r\n    /**\r\n    *The method is called upon an empty payment for the contract, pays the interest on the deposit to the final beneficiary.\r\n    * A check is made on the funds on the depositor's account and the time at which he can receive a deposit interest\r\n    */\r\n    function receivePayment()isIssetRecepient timeCheck private{\r\n        \r\n        uint depositMultiplier = getDepositMultiplier();\r\n        time[msg.sender] = now;\r\n        msg.sender.transfer(depositMultiplier);\r\n        \r\n        allPercents+=depositMultiplier;\r\n        lastPayment =now;\r\n        emit PayOffDividends(msg.sender, depositMultiplier);\r\n        \r\n        \r\n    }\r\n    \r\n    /**\r\n     * Method for verifying the availability of interest payments to the ultimate beneficiary\r\n     * @return bool\r\n     */\r\n    function authorizationPayment()public view returns(bool){\r\n        \r\n        if (balances[msg.sender] > 0 && now >= (time[msg.sender].add(dividendsTime))){\r\n            return (true);\r\n        }else{\r\n            return(false);\r\n        }\r\n        \r\n    }\r\n   \r\n    /**\r\n     * Returns the percentage that will be accrued to the final beneficiary,\r\n     * depending on the available balance of the etherium on the contract\r\n     * \r\n     * @return uint percent\r\n     */ \r\n    function getPercent() public view returns(uint){\r\n        \r\n        uint contractBalance = address(this).balance;\r\n        \r\n        uint balanceSteep1 = steep1.mul(1 ether);\r\n        uint balanceSteep2 = steep2.mul(1 ether);\r\n        uint balanceSteep3 = steep3.mul(1 ether);\r\n        uint balanceSteep4 = steep4.mul(1 ether);\r\n        uint balanceSteep5 = steep5.mul(1 ether);\r\n        \r\n        \r\n        if(contractBalance < balanceSteep1){\r\n            return(425);\r\n        }\r\n        if(contractBalance >= balanceSteep1 && contractBalance < balanceSteep2){\r\n            return(450);\r\n        }\r\n        if(contractBalance >= balanceSteep2 && contractBalance < balanceSteep3){\r\n            return(475);\r\n        }\r\n        if(contractBalance >= balanceSteep3 && contractBalance < balanceSteep4){\r\n            return(500);\r\n        }\r\n        if(contractBalance >= balanceSteep4 && contractBalance < balanceSteep5){\r\n            return(525);\r\n        }\r\n        if(contractBalance >= balanceSteep5){\r\n            return(550);\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * The method of accepting payments, if a zero payment has come, then we start the procedure for refunding\r\n     * the interest on the deposit, if the payment is not empty, we record the number of broadcasts on the contract\r\n     * and the payment time\r\n     */\r\n    function createDeposit() private{\r\n        \r\n        if(msg.value > 0){\r\n            \r\n            if (balances[msg.sender] == 0){\r\n                emit NewInvestor(msg.sender, msg.value);\r\n                allBeneficiaries+=1;\r\n            }\r\n            \r\n            \r\n            if(getDepositMultiplier() > 0 && now >= time[msg.sender].add(dividendsTime) ){\r\n                receivePayment();\r\n            }\r\n            \r\n            balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n            time[msg.sender] = now;\r\n            \r\n            allDeposits+=msg.value;\r\n            emit NewDeposit(msg.sender, msg.value);\r\n            \r\n        }else{\r\n            receivePayment();\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * function that is launched when transferring money to a contract\r\n     */\r\n    function() external payable{\r\n        //buffer overflow protection\r\n        require((balances[msg.sender] + msg.value) >= balances[msg.sender]);\r\n        createDeposit();\r\n       \r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"allPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizationPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allBeneficiaries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"NewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayOffDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"}]","ContractName":"EtProfit","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3fb5af51ef50011bccbdbd0320b1b455d6b3030f9a3054d342e558d1a6cf9958"}]}