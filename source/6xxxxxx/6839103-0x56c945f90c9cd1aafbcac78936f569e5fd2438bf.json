{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: lib/CanReclaimToken.sol\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20 compatible tokens\r\n   * @param token ERC20 The address of the token contract\r\n   */\r\n  function reclaimToken(IERC20 token) external onlyOwner {\r\n    if (address(token) == address(0)) {\r\n      owner().transfer(address(this).balance);\r\n      return;\r\n    }\r\n    uint256 balance = token.balanceOf(this);\r\n    token.transfer(owner(), balance);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/HeroUp.sol\r\n\r\ninterface HEROES_NEW {\r\n  function mint(address to, uint256 genes, uint256 level) external returns (uint);\r\n  function mint(uint256 tokenId, address to, uint256 genes, uint256 level) external returns (uint);\r\n}\r\n\r\n\r\ninterface HEROES_OLD {\r\n  function getLock(uint256 _tokenId) external view returns (uint256 lockedTo, uint16 lockId);\r\n  function unlock(uint256 _tokenId, uint16 _lockId) external returns (bool);\r\n  function lock(uint256 _tokenId, uint256 _lockedTo, uint16 _lockId) external returns (bool);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n  function getCharacter(uint256 _tokenId) external view returns (uint256 genes, uint256 mintedAt, uint256 godfather, uint256 mentor, uint32 wins, uint32 losses, uint32 level, uint256 lockedTo, uint16 lockId);\r\n  function ownerOf(uint256 _tokenId) external view returns (address);\r\n}\r\n\r\ncontract HeroUp is Ownable, CanReclaimToken {\r\n  event HeroUpgraded(uint tokenId, address owner);\r\n\r\n  HEROES_OLD public heroesOld;\r\n  HEROES_NEW public heroesNew;\r\n  constructor (HEROES_OLD _heroesOld, HEROES_NEW _heroesNew) public {\r\n    require(address(_heroesOld) != address(0));\r\n    require(address(_heroesNew) != address(0));\r\n    heroesOld = _heroesOld;\r\n    heroesNew = _heroesNew;\r\n  }\r\n\r\n  function() public {}\r\n\r\n  function setOld(HEROES_OLD _heroesOld) public onlyOwner {\r\n    require(address(_heroesOld) != address(0));\r\n    heroesOld = _heroesOld;\r\n  }\r\n\r\n  function setNew(HEROES_NEW _heroesNew) public onlyOwner {\r\n    require(address(_heroesNew) != address(0));\r\n    heroesNew = _heroesNew;\r\n  }\r\n\r\n  function upgrade(uint _tokenId) public {\r\n    require(msg.sender == heroesOld.ownerOf(_tokenId));\r\n    uint256 genes;\r\n    uint32 level;\r\n    uint256 lockedTo;\r\n    uint16 lockId;\r\n\r\n    //transfer old hero\r\n    (genes,,,,,,level,lockedTo,lockId) = heroesOld.getCharacter(_tokenId);\r\n    heroesOld.unlock(_tokenId, lockId);\r\n    heroesOld.lock(_tokenId, 0, 999);\r\n    heroesOld.transferFrom(msg.sender, address(this), _tokenId);\r\n//    heroesOld.unlock(_tokenId, 999);\r\n\r\n    //mint new hero\r\n    heroesNew.mint(_tokenId, msg.sender, genes, level);\r\n\r\n    emit HeroUpgraded(_tokenId, msg.sender);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_heroesOld\",\"type\":\"address\"}],\"name\":\"setOld\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"heroesNew\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"heroesOld\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_heroesNew\",\"type\":\"address\"}],\"name\":\"setNew\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_heroesOld\",\"type\":\"address\"},{\"name\":\"_heroesNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"HeroUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HeroUp","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000ba000163959726c90d41c804386d37718d5edc8000000000000000000000000d2bae9a30a40376d25353773010ffe52dba0d688","Library":"","SwarmSource":"bzzr://7ae8800f55be6fa56301b4b54c361b07ef0a586501cd89c17191917ecd30a123"}]}