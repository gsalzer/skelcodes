{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public proposedOwner = address(0);\r\n\r\n    event OwnershipTransferInitiated(address indexed _proposedOwner);\r\n    event OwnershipTransferCompleted(address indexed _newOwner);\r\n    event OwnershipTransferCanceled();\r\n\r\n\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n\r\n    function isOwner(address _address) public view returns (bool) {\r\n        return (_address == owner);\r\n    }\r\n\r\n\r\n    function initiateOwnershipTransfer(address _proposedOwner) public onlyOwner returns (bool) {\r\n        require(_proposedOwner != address(0));\r\n        require(_proposedOwner != address(this));\r\n        require(_proposedOwner != owner);\r\n\r\n        proposedOwner = _proposedOwner;\r\n\r\n        emit OwnershipTransferInitiated(proposedOwner);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function cancelOwnershipTransfer() public onlyOwner returns (bool) {\r\n        //if proposedOwner address already address(0) then it will return true.\r\n        if (proposedOwner == address(0)) {\r\n            return true;\r\n        }\r\n        //if not then first it will do address(0( then it will return true.\r\n        proposedOwner = address(0);\r\n\r\n        emit OwnershipTransferCanceled();\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function completeOwnershipTransfer() public returns (bool) {\r\n\r\n        require(msg.sender == proposedOwner);\r\n\r\n        owner = msg.sender;\r\n        proposedOwner = address(0);\r\n\r\n        emit OwnershipTransferCompleted(owner);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TokenTransfer {\r\n    // minimal subset of ERC20\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function decimals() public view returns (uint8 tokenDecimals);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n}\r\n\r\ncontract FlexibleTokenSale is  Owned {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //\r\n    // Lifecycle\r\n    //\r\n    bool public suspended;\r\n\r\n    //\r\n    // Pricing\r\n    //\r\n    uint256 public tokenPrice;\r\n    uint256 public tokenPerEther;\r\n    uint256 public contributionMin;\r\n    uint256 public tokenConversionFactor;\r\n\r\n    //\r\n    // Wallets\r\n    //\r\n    address public walletAddress;\r\n\r\n    //\r\n    // Token\r\n    //\r\n    TokenTransfer token;\r\n\r\n\r\n    //\r\n    // Counters\r\n    //\r\n    uint256 public totalTokensSold;\r\n    uint256 public totalEtherCollected;\r\n    \r\n    //\r\n    // Price Update Address\r\n    //\r\n    address public priceUpdateAddress;\r\n\r\n\r\n    //\r\n    // Events\r\n    //\r\n    event Initialized();\r\n    event TokenPriceUpdated(uint256 _newValue);\r\n    event TokenPerEtherUpdated(uint256 _newValue);\r\n    event TokenMinUpdated(uint256 _newValue);\r\n    event WalletAddressUpdated(address indexed _newAddress);\r\n    event SaleSuspended();\r\n    event SaleResumed();\r\n    event TokensPurchased(address indexed _beneficiary, uint256 _cost, uint256 _tokens);\r\n    event TokensReclaimed(uint256 _amount);\r\n    event PriceAddressUpdated(address indexed _newAddress);\r\n\r\n\r\n    constructor(address _tokenAddress,address _walletAddress,uint _tokenPerEther,address _priceUpdateAddress) public\r\n    Owned()\r\n    {\r\n\r\n        require(_walletAddress != address(0));\r\n        require(_walletAddress != address(this));\r\n        require(address(token) == address(0));\r\n        require(address(_tokenAddress) != address(0));\r\n        require(address(_tokenAddress) != address(this));\r\n        require(address(_tokenAddress) != address(walletAddress));\r\n\r\n        walletAddress = _walletAddress;\r\n        priceUpdateAddress = _priceUpdateAddress;\r\n        token = TokenTransfer(_tokenAddress);\r\n        suspended = false;\r\n        tokenPrice = 100;\r\n        tokenPerEther = _tokenPerEther;\r\n        contributionMin     = 5 * 10**18;//minimum 5 DOC token\r\n        totalTokensSold     = 0;\r\n        totalEtherCollected = 0;\r\n        // This factor is used when converting cost <-> tokens.\r\n       // 18 is because of the ETH -> Wei conversion.\r\n      // 2 because toekn price  and etherPerToken Price are expressed as 100 for $1.00  and 100000 for $1000.00 (with 2 decimals).\r\n       tokenConversionFactor = 10**(uint256(18).sub(token.decimals()).add(2));\r\n        assert(tokenConversionFactor > 0);\r\n    }\r\n\r\n\r\n    //\r\n    // Owner Configuation\r\n    //\r\n\r\n    // Allows the owner to change the wallet address which is used for collecting\r\n    // ether received during the token sale.\r\n    function setWalletAddress(address _walletAddress) external onlyOwner returns(bool) {\r\n        require(_walletAddress != address(0));\r\n        require(_walletAddress != address(this));\r\n        require(_walletAddress != address(token));\r\n        require(isOwner(_walletAddress) == false);\r\n\r\n        walletAddress = _walletAddress;\r\n\r\n        emit WalletAddressUpdated(_walletAddress);\r\n\r\n        return true;\r\n    }\r\n\r\n    //set token price in between $1 to $1000, pass 111 for $1.11, 100000 for $1000\r\n    function setTokenPrice(uint _tokenPrice) external onlyOwner returns (bool) {\r\n        require(_tokenPrice >= 100 && _tokenPrice <= 100000);\r\n\r\n        tokenPrice=_tokenPrice;\r\n\r\n        emit TokenPriceUpdated(_tokenPrice);\r\n        return true;\r\n    }\r\n\r\n    function setMinToken(uint256 _minToken) external onlyOwner returns(bool) {\r\n        require(_minToken > 0);\r\n\r\n        contributionMin = _minToken;\r\n\r\n        emit TokenMinUpdated(_minToken);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Allows the owner to suspend the sale until it is manually resumed at a later time.\r\n    function suspend() external onlyOwner returns(bool) {\r\n        if (suspended == true) {\r\n            return false;\r\n        }\r\n\r\n        suspended = true;\r\n\r\n        emit SaleSuspended();\r\n\r\n        return true;\r\n    }\r\n\r\n    // Allows the owner to resume the sale.\r\n    function resume() external onlyOwner returns(bool) {\r\n        if (suspended == false) {\r\n            return false;\r\n        }\r\n\r\n        suspended = false;\r\n\r\n        emit SaleResumed();\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    //\r\n    // Contributions\r\n    //\r\n\r\n    // Default payable function which can be used to purchase tokens.\r\n    function () payable public {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n\r\n    // Allows the caller to purchase tokens for a specific beneficiary (proxy purchase).\r\n    function buyTokens(address _beneficiary) public payable returns (uint256) {\r\n        require(!suspended);\r\n\r\n        require(address(token) !=  address(0));\r\n        require(_beneficiary != address(0));\r\n        require(_beneficiary != address(this));\r\n        require(_beneficiary != address(token));\r\n\r\n\r\n        // We don't want to allow the wallet collecting ETH to\r\n        // directly be used to purchase tokens.\r\n        require(msg.sender != address(walletAddress));\r\n\r\n        // Check how many tokens are still available for sale.\r\n        uint256 saleBalance = token.balanceOf(address(this));\r\n        assert(saleBalance > 0);\r\n\r\n\r\n        return buyTokensInternal(_beneficiary);\r\n    }\r\n\r\n    function updateTokenPerEther(uint _etherPrice) public returns(bool){\r\n        require(_etherPrice > 0);\r\n        require(msg.sender == priceUpdateAddress || msg.sender == owner);\r\n        tokenPerEther=_etherPrice;\r\n        emit TokenPerEtherUpdated(_etherPrice);\r\n        return true;\r\n    }\r\n    \r\n    function updatePriceAddress(address _newAddress) public onlyOwner returns(bool){\r\n        require(_newAddress != address(0));\r\n        priceUpdateAddress=_newAddress;\r\n        emit PriceAddressUpdated(_newAddress);\r\n        return true;\r\n    }\r\n\r\n\r\n    function buyTokensInternal(address _beneficiary) internal returns (uint256) {\r\n\r\n        // Calculate how many tokens the contributor could purchase based on ETH received.\r\n        uint256 tokens =msg.value.mul(tokenPerEther.mul(100).div(tokenPrice)).div(tokenConversionFactor);\r\n        require(tokens >= contributionMin);\r\n\r\n        // This is the actual amount of ETH that can be sent to the wallet.\r\n        uint256 contribution =msg.value;\r\n        walletAddress.transfer(contribution);\r\n        totalEtherCollected = totalEtherCollected.add(contribution);\r\n\r\n        // Update our stats counters.\r\n        totalTokensSold = totalTokensSold.add(tokens);\r\n\r\n        // Transfer tokens to the beneficiary.\r\n        require(token.transfer(_beneficiary, tokens));\r\n\r\n        emit TokensPurchased(_beneficiary, msg.value, tokens);\r\n\r\n        return tokens;\r\n    }\r\n\r\n\r\n    // Allows the owner to take back the tokens that are assigned to the sale contract.\r\n    function reclaimTokens() external onlyOwner returns (bool) {\r\n\r\n        uint256 tokens = token.balanceOf(address(this));\r\n\r\n        if (tokens == 0) {\r\n            return false;\r\n        }\r\n\r\n        require(token.transfer(owner, tokens));\r\n\r\n        emit TokensReclaimed(tokens);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract HCXTokenSaleConfig {\r\n    address WALLET_ADDRESS = 0x6E22277b9A32a88cba52d5108ca7E836d994859f;\r\n    address TOKEN_ADDRESS = 0x44F2cEF73E136E97Abc7923634ebEB447F8a48Ed;\r\n    address UPDATE_PRICE_ADDRESS = 0x29b997d4b41b9840E60b86F32BE029382b14BDCd;\r\n    uint ETHER_PRICE = 14000;//set current ether price. if current price 1000.00 then write 100000\r\n}\r\n\r\ncontract  HCXTokenSale is FlexibleTokenSale, HCXTokenSaleConfig {\r\n\r\n    constructor() public\r\n    FlexibleTokenSale(TOKEN_ADDRESS,WALLET_ADDRESS,ETHER_PRICE,UPDATE_PRICE_ADDRESS)\r\n    {\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenConversionFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minToken\",\"type\":\"uint256\"}],\"name\":\"setMinToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updatePriceAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"suspended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceUpdateAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"setWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etherPrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"initiateOwnershipTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEtherCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"suspend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeOwnershipTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"TokenPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"TokenPerEtherUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"TokenMinUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"WalletAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_cost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"PriceAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipTransferCanceled\",\"type\":\"event\"}]","ContractName":"HCXTokenSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://07281f71f7569e1cd7adf92d4315b93180572b55b3d21098415ba094b213f515"}]}