{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title Eliptic curve signature operations\r\n *\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n *\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n *\r\n */\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using their signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes sig)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * toEthSignedMessageHash\r\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n   * @dev and hash the result\r\n   */\r\n  function toEthSignedMessageHash(bytes32 hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return keccak256(\r\n      \"\\x19Ethereum Signed Message:\\n32\",\r\n      hash\r\n    );\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: contracts/robonomics/XRT.sol\r\n\r\ncontract XRT is MintableToken, BurnableToken {\r\n    string public constant name     = \"Robonomics Beta\";\r\n    string public constant symbol   = \"XRT\";\r\n    uint   public constant decimals = 9;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 10000 * (10 ** uint256(decimals));\r\n\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    }\r\n}\r\n\r\n// File: contracts/robonomics/DutchAuction.sol\r\n\r\n/// @title Dutch auction contract - distribution of XRT tokens using an auction.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\n/// @author Airalab - <research@aira.life> \r\ncontract DutchAuction {\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event BidSubmission(address indexed sender, uint256 amount);\r\n\r\n    /*\r\n     *  Constants\r\n     */\r\n    uint constant public MAX_TOKENS_SOLD = 8000 * 10**9; // 8M XRT = 10M - 1M (Foundation) - 1M (Early investors base)\r\n    uint constant public WAITING_PERIOD = 0; // 1 days;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    XRT     public xrt;\r\n    address public ambix;\r\n    address public wallet;\r\n    address public owner;\r\n    uint public ceiling;\r\n    uint public priceFactor;\r\n    uint public startBlock;\r\n    uint public endTime;\r\n    uint public totalReceived;\r\n    uint public finalPrice;\r\n    mapping (address => uint) public bids;\r\n    Stages public stage;\r\n\r\n    /*\r\n     *  Enums\r\n     */\r\n    enum Stages {\r\n        AuctionDeployed,\r\n        AuctionSetUp,\r\n        AuctionStarted,\r\n        AuctionEnded,\r\n        TradingStarted\r\n    }\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier atStage(Stages _stage) {\r\n        // Contract on stage\r\n        require(stage == _stage);\r\n        _;\r\n    }\r\n\r\n    modifier isOwner() {\r\n        // Only owner is allowed to proceed\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isWallet() {\r\n        // Only wallet is allowed to proceed\r\n        require(msg.sender == wallet);\r\n        _;\r\n    }\r\n\r\n    modifier isValidPayload() {\r\n        require(msg.data.length == 4 || msg.data.length == 36);\r\n        _;\r\n    }\r\n\r\n    modifier timedTransitions() {\r\n        if (stage == Stages.AuctionStarted && calcTokenPrice() <= calcStopPrice())\r\n            finalizeAuction();\r\n        if (stage == Stages.AuctionEnded && now > endTime + WAITING_PERIOD)\r\n            stage = Stages.TradingStarted;\r\n        _;\r\n    }\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Contract constructor function sets owner.\r\n    /// @param _wallet Multisig wallet.\r\n    /// @param _ceiling Auction ceiling.\r\n    /// @param _priceFactor Auction price factor.\r\n    constructor(address _wallet, uint _ceiling, uint _priceFactor)\r\n        public\r\n    {\r\n        require(_wallet != 0 && _ceiling != 0 && _priceFactor != 0);\r\n        owner = msg.sender;\r\n        wallet = _wallet;\r\n        ceiling = _ceiling;\r\n        priceFactor = _priceFactor;\r\n        stage = Stages.AuctionDeployed;\r\n    }\r\n\r\n    /// @dev Setup function sets external contracts' addresses.\r\n    /// @param _xrt Robonomics token address.\r\n    /// @param _ambix Distillation cube address.\r\n    function setup(address _xrt, address _ambix)\r\n        public\r\n        isOwner\r\n        atStage(Stages.AuctionDeployed)\r\n    {\r\n        // Validate argument\r\n        require(_xrt != 0 && _ambix != 0);\r\n        xrt = XRT(_xrt);\r\n        ambix = _ambix;\r\n\r\n        // Validate token balance\r\n        require(xrt.balanceOf(this) == MAX_TOKENS_SOLD);\r\n\r\n        stage = Stages.AuctionSetUp;\r\n    }\r\n\r\n    /// @dev Starts auction and sets startBlock.\r\n    function startAuction()\r\n        public\r\n        isWallet\r\n        atStage(Stages.AuctionSetUp)\r\n    {\r\n        stage = Stages.AuctionStarted;\r\n        startBlock = block.number;\r\n    }\r\n\r\n    /// @dev Changes auction ceiling and start price factor before auction is started.\r\n    /// @param _ceiling Updated auction ceiling.\r\n    /// @param _priceFactor Updated start price factor.\r\n    function changeSettings(uint _ceiling, uint _priceFactor)\r\n        public\r\n        isWallet\r\n        atStage(Stages.AuctionSetUp)\r\n    {\r\n        ceiling = _ceiling;\r\n        priceFactor = _priceFactor;\r\n    }\r\n\r\n    /// @dev Calculates current token price.\r\n    /// @return Returns token price.\r\n    function calcCurrentTokenPrice()\r\n        public\r\n        timedTransitions\r\n        returns (uint)\r\n    {\r\n        if (stage == Stages.AuctionEnded || stage == Stages.TradingStarted)\r\n            return finalPrice;\r\n        return calcTokenPrice();\r\n    }\r\n\r\n    /// @dev Returns correct stage, even if a function with timedTransitions modifier has not yet been called yet.\r\n    /// @return Returns current auction stage.\r\n    function updateStage()\r\n        public\r\n        timedTransitions\r\n        returns (Stages)\r\n    {\r\n        return stage;\r\n    }\r\n\r\n    /// @dev Allows to send a bid to the auction.\r\n    /// @param receiver Bid will be assigned to this address if set.\r\n    function bid(address receiver)\r\n        public\r\n        payable\r\n        isValidPayload\r\n        timedTransitions\r\n        atStage(Stages.AuctionStarted)\r\n        returns (uint amount)\r\n    {\r\n        require(msg.value > 0);\r\n        amount = msg.value;\r\n\r\n        // If a bid is done on behalf of a user via ShapeShift, the receiver address is set.\r\n        if (receiver == 0)\r\n            receiver = msg.sender;\r\n\r\n        // Prevent that more than 90% of tokens are sold. Only relevant if cap not reached.\r\n        uint maxWei = MAX_TOKENS_SOLD * calcTokenPrice() / 10**9 - totalReceived;\r\n        uint maxWeiBasedOnTotalReceived = ceiling - totalReceived;\r\n        if (maxWeiBasedOnTotalReceived < maxWei)\r\n            maxWei = maxWeiBasedOnTotalReceived;\r\n\r\n        // Only invest maximum possible amount.\r\n        if (amount > maxWei) {\r\n            amount = maxWei;\r\n            // Send change back to receiver address. In case of a ShapeShift bid the user receives the change back directly.\r\n            receiver.transfer(msg.value - amount);\r\n        }\r\n\r\n        // Forward funding to ether wallet\r\n        wallet.transfer(amount);\r\n\r\n        bids[receiver] += amount;\r\n        totalReceived += amount;\r\n        BidSubmission(receiver, amount);\r\n\r\n        // Finalize auction when maxWei reached\r\n        if (amount == maxWei)\r\n            finalizeAuction();\r\n    }\r\n\r\n    /// @dev Claims tokens for bidder after auction.\r\n    /// @param receiver Tokens will be assigned to this address if set.\r\n    function claimTokens(address receiver)\r\n        public\r\n        isValidPayload\r\n        timedTransitions\r\n        atStage(Stages.TradingStarted)\r\n    {\r\n        if (receiver == 0)\r\n            receiver = msg.sender;\r\n        uint tokenCount = bids[receiver] * 10**9 / finalPrice;\r\n        bids[receiver] = 0;\r\n        require(xrt.transfer(receiver, tokenCount));\r\n    }\r\n\r\n    /// @dev Calculates stop price.\r\n    /// @return Returns stop price.\r\n    function calcStopPrice()\r\n        view\r\n        public\r\n        returns (uint)\r\n    {\r\n        return totalReceived * 10**9 / MAX_TOKENS_SOLD + 1;\r\n    }\r\n\r\n    /// @dev Calculates token price.\r\n    /// @return Returns token price.\r\n    function calcTokenPrice()\r\n        view\r\n        public\r\n        returns (uint)\r\n    {\r\n        return priceFactor * 10**18 / (block.number - startBlock + 7500) + 1;\r\n    }\r\n\r\n    /*\r\n     *  Private functions\r\n     */\r\n    function finalizeAuction()\r\n        private\r\n    {\r\n        stage = Stages.AuctionEnded;\r\n        finalPrice = totalReceived == ceiling ? calcTokenPrice() : calcStopPrice();\r\n        uint soldTokens = totalReceived * 10**9 / finalPrice;\r\n\r\n        if (totalReceived == ceiling) {\r\n            // Auction contract transfers all unsold tokens to Ambix contract\r\n            require(xrt.transfer(ambix, MAX_TOKENS_SOLD - soldTokens));\r\n        } else {\r\n            // Auction contract burn all unsold tokens\r\n            xrt.burn(MAX_TOKENS_SOLD - soldTokens);\r\n        }\r\n\r\n        endTime = now;\r\n    }\r\n}\r\n\r\n// File: ens/contracts/ENS.sol\r\n\r\ninterface ENS {\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\r\n    function setResolver(bytes32 node, address resolver) public;\r\n    function setOwner(bytes32 node, address owner) public;\r\n    function setTTL(bytes32 node, uint64 ttl) public;\r\n    function owner(bytes32 node) public view returns (address);\r\n    function resolver(bytes32 node) public view returns (address);\r\n    function ttl(bytes32 node) public view returns (uint64);\r\n\r\n}\r\n\r\n// File: ens/contracts/PublicResolver.sol\r\n\r\n/**\r\n * A simple resolver anyone can use; only allows the owner of a node to set its\r\n * address.\r\n */\r\ncontract PublicResolver {\r\n\r\n    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\r\n    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\r\n    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\r\n    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\r\n    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\r\n    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\r\n    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\r\n    bytes4 constant MULTIHASH_INTERFACE_ID = 0xe89401a1;\r\n\r\n    event AddrChanged(bytes32 indexed node, address a);\r\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\r\n    event NameChanged(bytes32 indexed node, string name);\r\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\r\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\r\n    event TextChanged(bytes32 indexed node, string indexedKey, string key);\r\n    event MultihashChanged(bytes32 indexed node, bytes hash);\r\n\r\n    struct PublicKey {\r\n        bytes32 x;\r\n        bytes32 y;\r\n    }\r\n\r\n    struct Record {\r\n        address addr;\r\n        bytes32 content;\r\n        string name;\r\n        PublicKey pubkey;\r\n        mapping(string=>string) text;\r\n        mapping(uint256=>bytes) abis;\r\n        bytes multihash;\r\n    }\r\n\r\n    ENS ens;\r\n\r\n    mapping (bytes32 => Record) records;\r\n\r\n    modifier only_owner(bytes32 node) {\r\n        require(ens.owner(node) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param ensAddr The ENS registrar contract.\r\n     */\r\n    function PublicResolver(ENS ensAddr) public {\r\n        ens = ensAddr;\r\n    }\r\n\r\n    /**\r\n     * Sets the address associated with an ENS node.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param node The node to update.\r\n     * @param addr The address to set.\r\n     */\r\n    function setAddr(bytes32 node, address addr) public only_owner(node) {\r\n        records[node].addr = addr;\r\n        AddrChanged(node, addr);\r\n    }\r\n\r\n    /**\r\n     * Sets the content hash associated with an ENS node.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * Note that this resource type is not standardized, and will likely change\r\n     * in future to a resource type based on multihash.\r\n     * @param node The node to update.\r\n     * @param hash The content hash to set\r\n     */\r\n    function setContent(bytes32 node, bytes32 hash) public only_owner(node) {\r\n        records[node].content = hash;\r\n        ContentChanged(node, hash);\r\n    }\r\n\r\n    /**\r\n     * Sets the multihash associated with an ENS node.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param node The node to update.\r\n     * @param hash The multihash to set\r\n     */\r\n    function setMultihash(bytes32 node, bytes hash) public only_owner(node) {\r\n        records[node].multihash = hash;\r\n        MultihashChanged(node, hash);\r\n    }\r\n    \r\n    /**\r\n     * Sets the name associated with an ENS node, for reverse records.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param node The node to update.\r\n     * @param name The name to set.\r\n     */\r\n    function setName(bytes32 node, string name) public only_owner(node) {\r\n        records[node].name = name;\r\n        NameChanged(node, name);\r\n    }\r\n\r\n    /**\r\n     * Sets the ABI associated with an ENS node.\r\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\r\n     * the empty string.\r\n     * @param node The node to update.\r\n     * @param contentType The content type of the ABI\r\n     * @param data The ABI data.\r\n     */\r\n    function setABI(bytes32 node, uint256 contentType, bytes data) public only_owner(node) {\r\n        // Content types must be powers of 2\r\n        require(((contentType - 1) & contentType) == 0);\r\n        \r\n        records[node].abis[contentType] = data;\r\n        ABIChanged(node, contentType);\r\n    }\r\n    \r\n    /**\r\n     * Sets the SECP256k1 public key associated with an ENS node.\r\n     * @param node The ENS node to query\r\n     * @param x the X coordinate of the curve point for the public key.\r\n     * @param y the Y coordinate of the curve point for the public key.\r\n     */\r\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) public only_owner(node) {\r\n        records[node].pubkey = PublicKey(x, y);\r\n        PubkeyChanged(node, x, y);\r\n    }\r\n\r\n    /**\r\n     * Sets the text data associated with an ENS node and key.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param node The node to update.\r\n     * @param key The key to set.\r\n     * @param value The text data value to set.\r\n     */\r\n    function setText(bytes32 node, string key, string value) public only_owner(node) {\r\n        records[node].text[key] = value;\r\n        TextChanged(node, key, key);\r\n    }\r\n\r\n    /**\r\n     * Returns the text data associated with an ENS node and key.\r\n     * @param node The ENS node to query.\r\n     * @param key The text data key to query.\r\n     * @return The associated text data.\r\n     */\r\n    function text(bytes32 node, string key) public view returns (string) {\r\n        return records[node].text[key];\r\n    }\r\n\r\n    /**\r\n     * Returns the SECP256k1 public key associated with an ENS node.\r\n     * Defined in EIP 619.\r\n     * @param node The ENS node to query\r\n     * @return x, y the X and Y coordinates of the curve point for the public key.\r\n     */\r\n    function pubkey(bytes32 node) public view returns (bytes32 x, bytes32 y) {\r\n        return (records[node].pubkey.x, records[node].pubkey.y);\r\n    }\r\n\r\n    /**\r\n     * Returns the ABI associated with an ENS node.\r\n     * Defined in EIP205.\r\n     * @param node The ENS node to query\r\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\r\n     * @return contentType The content type of the return value\r\n     * @return data The ABI data\r\n     */\r\n    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\r\n        Record storage record = records[node];\r\n        for (contentType = 1; contentType <= contentTypes; contentType <<= 1) {\r\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\r\n                data = record.abis[contentType];\r\n                return;\r\n            }\r\n        }\r\n        contentType = 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the name associated with an ENS node, for reverse records.\r\n     * Defined in EIP181.\r\n     * @param node The ENS node to query.\r\n     * @return The associated name.\r\n     */\r\n    function name(bytes32 node) public view returns (string) {\r\n        return records[node].name;\r\n    }\r\n\r\n    /**\r\n     * Returns the content hash associated with an ENS node.\r\n     * Note that this resource type is not standardized, and will likely change\r\n     * in future to a resource type based on multihash.\r\n     * @param node The ENS node to query.\r\n     * @return The associated content hash.\r\n     */\r\n    function content(bytes32 node) public view returns (bytes32) {\r\n        return records[node].content;\r\n    }\r\n\r\n    /**\r\n     * Returns the multihash associated with an ENS node.\r\n     * @param node The ENS node to query.\r\n     * @return The associated multihash.\r\n     */\r\n    function multihash(bytes32 node) public view returns (bytes) {\r\n        return records[node].multihash;\r\n    }\r\n\r\n    /**\r\n     * Returns the address associated with an ENS node.\r\n     * @param node The ENS node to query.\r\n     * @return The associated address.\r\n     */\r\n    function addr(bytes32 node) public view returns (address) {\r\n        return records[node].addr;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the resolver implements the interface specified by the provided hash.\r\n     * @param interfaceID The ID of the interface to check for.\r\n     * @return True if the contract implements the requested interface.\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\r\n        return interfaceID == ADDR_INTERFACE_ID ||\r\n        interfaceID == CONTENT_INTERFACE_ID ||\r\n        interfaceID == NAME_INTERFACE_ID ||\r\n        interfaceID == ABI_INTERFACE_ID ||\r\n        interfaceID == PUBKEY_INTERFACE_ID ||\r\n        interfaceID == TEXT_INTERFACE_ID ||\r\n        interfaceID == MULTIHASH_INTERFACE_ID ||\r\n        interfaceID == INTERFACE_META_ID;\r\n    }\r\n}\r\n\r\ncontract LightContract {\r\n    /**\r\n     * @dev Shared code smart contract \r\n     */\r\n    address lib;\r\n\r\n    constructor(address _library) public {\r\n        lib = _library;\r\n    }\r\n\r\n    function() public {\r\n        require(lib.delegatecall(msg.data));\r\n    }\r\n}\r\n\r\ncontract LighthouseABI {\r\n    function refill(uint256 _value) external;\r\n    function withdraw(uint256 _value) external;\r\n    function to(address _to, bytes _data) external;\r\n    function () external;\r\n}\r\n\r\ncontract LighthouseAPI {\r\n    address[] public members;\r\n    mapping(address => uint256) indexOf;\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n    uint256 public minimalFreeze;\r\n    uint256 public timeoutBlocks;\r\n\r\n    LiabilityFactory public factory;\r\n    XRT              public xrt;\r\n\r\n    uint256 public keepaliveBlock = 0;\r\n    uint256 public marker = 0;\r\n    uint256 public quota = 0;\r\n\r\n    function quotaOf(address _member) public view returns (uint256)\r\n    { return balances[_member] / minimalFreeze; }\r\n}\r\n\r\ncontract LighthouseLib is LighthouseAPI, LighthouseABI {\r\n\r\n    function refill(uint256 _value) external {\r\n        require(xrt.transferFrom(msg.sender, this, _value));\r\n        require(_value >= minimalFreeze);\r\n\r\n        if (balances[msg.sender] == 0) {\r\n            indexOf[msg.sender] = members.length;\r\n            members.push(msg.sender);\r\n        }\r\n        balances[msg.sender] += _value;\r\n    }\r\n\r\n    function withdraw(uint256 _value) external {\r\n        require(balances[msg.sender] >= _value);\r\n\r\n        balances[msg.sender] -= _value;\r\n        require(xrt.transfer(msg.sender, _value));\r\n\r\n        // Drop member if quota go to zero\r\n        if (quotaOf(msg.sender) == 0) {\r\n            uint256 balance = balances[msg.sender];\r\n            balances[msg.sender] = 0;\r\n            require(xrt.transfer(msg.sender, balance)); \r\n            \r\n            uint256 senderIndex = indexOf[msg.sender];\r\n            uint256 lastIndex = members.length - 1;\r\n            if (senderIndex < lastIndex)\r\n                members[senderIndex] = members[lastIndex];\r\n            members.length -= 1;\r\n        }\r\n    }\r\n\r\n    function nextMember() internal\r\n    { marker = (marker + 1) % members.length; }\r\n\r\n    modifier quoted {\r\n        if (quota == 0) {\r\n            // Step over marker\r\n            nextMember();\r\n\r\n            // Allocate new quota\r\n            quota = quotaOf(members[marker]);\r\n        }\r\n\r\n        // Consume one quota for transaction sending\r\n        assert(quota > 0);\r\n        quota -= 1;\r\n\r\n        _;\r\n    }\r\n\r\n    modifier keepalive {\r\n        if (timeoutBlocks < block.number - keepaliveBlock) {\r\n            // Search keepalive sender\r\n            while (msg.sender != members[marker])\r\n                nextMember();\r\n\r\n            // Allocate new quota\r\n            quota = quotaOf(members[marker]);\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier member {\r\n        // Zero members guard\r\n        require(members.length > 0);\r\n\r\n        // Only member with marker can to send transaction\r\n        require(msg.sender == members[marker]);\r\n\r\n        // Store transaction sending block\r\n        keepaliveBlock = block.number;\r\n\r\n        _;\r\n    }\r\n\r\n    function to(address _to, bytes _data) external keepalive quoted member {\r\n        require(factory.gasUtilizing(_to) > 0);\r\n        require(_to.call(_data));\r\n    }\r\n\r\n    function () external keepalive quoted member\r\n    { require(factory.call(msg.data)); }\r\n}\r\n\r\ncontract Lighthouse is LighthouseAPI, LightContract {\r\n    constructor(\r\n        address _lib,\r\n        uint256 _minimalFreeze,\r\n        uint256 _timeoutBlocks\r\n    ) \r\n        public\r\n        LightContract(_lib)\r\n    {\r\n        minimalFreeze = _minimalFreeze;\r\n        timeoutBlocks = _timeoutBlocks;\r\n        factory = LiabilityFactory(msg.sender);\r\n        xrt = factory.xrt();\r\n    }\r\n}\r\n\r\ncontract RobotLiabilityABI {\r\n    function ask(\r\n        bytes   _model,\r\n        bytes   _objective,\r\n\r\n        ERC20   _token,\r\n        uint256 _cost,\r\n\r\n        address _validator,\r\n        uint256 _validator_fee,\r\n\r\n        uint256 _deadline,\r\n        bytes32 _nonce,\r\n        bytes   _signature\r\n    ) external returns (bool);\r\n\r\n    function bid(\r\n        bytes   _model,\r\n        bytes   _objective,\r\n        \r\n        ERC20   _token,\r\n        uint256 _cost,\r\n\r\n        uint256 _lighthouse_fee,\r\n\r\n        uint256 _deadline,\r\n        bytes32 _nonce,\r\n        bytes   _signature\r\n    ) external returns (bool);\r\n\r\n    function finalize(\r\n        bytes _result,\r\n        bytes _signature,\r\n        bool  _agree\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract RobotLiabilityAPI {\r\n    bytes   public model;\r\n    bytes   public objective;\r\n    bytes   public result;\r\n\r\n    ERC20   public token;\r\n    uint256 public cost;\r\n    uint256 public lighthouseFee;\r\n    uint256 public validatorFee;\r\n\r\n    bytes32 public askHash;\r\n    bytes32 public bidHash;\r\n\r\n    address public promisor;\r\n    address public promisee;\r\n    address public validator;\r\n\r\n    bool    public isConfirmed;\r\n    bool    public isFinalized;\r\n\r\n    LiabilityFactory public factory;\r\n}\r\n\r\ncontract RobotLiabilityLib is RobotLiabilityABI\r\n                            , RobotLiabilityAPI {\r\n    using ECRecovery for bytes32;\r\n\r\n    function ask(\r\n        bytes   _model,\r\n        bytes   _objective,\r\n\r\n        ERC20   _token,\r\n        uint256 _cost,\r\n\r\n        address _validator,\r\n        uint256 _validator_fee,\r\n\r\n        uint256 _deadline,\r\n        bytes32 _nonce,\r\n        bytes   _signature\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == address(factory));\r\n        require(block.number < _deadline);\r\n\r\n        model        = _model;\r\n        objective    = _objective;\r\n        token        = _token;\r\n        cost         = _cost;\r\n        validator    = _validator;\r\n        validatorFee = _validator_fee;\r\n\r\n        askHash = keccak256(abi.encodePacked(\r\n            _model\r\n          , _objective\r\n          , _token\r\n          , _cost\r\n          , _validator\r\n          , _validator_fee\r\n          , _deadline\r\n          , _nonce\r\n        ));\r\n\r\n        promisee = askHash\r\n            .toEthSignedMessageHash()\r\n            .recover(_signature);\r\n        return true;\r\n    }\r\n\r\n    function bid(\r\n        bytes   _model,\r\n        bytes   _objective,\r\n        \r\n        ERC20   _token,\r\n        uint256 _cost,\r\n\r\n        uint256 _lighthouse_fee,\r\n\r\n        uint256 _deadline,\r\n        bytes32 _nonce,\r\n        bytes   _signature\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == address(factory));\r\n        require(block.number < _deadline);\r\n        require(keccak256(model) == keccak256(_model));\r\n        require(keccak256(objective) == keccak256(_objective));\r\n        require(_token == token);\r\n        require(_cost == cost);\r\n\r\n        lighthouseFee = _lighthouse_fee;\r\n\r\n        bidHash = keccak256(abi.encodePacked(\r\n            _model\r\n          , _objective\r\n          , _token\r\n          , _cost\r\n          , _lighthouse_fee\r\n          , _deadline\r\n          , _nonce\r\n        ));\r\n\r\n        promisor = bidHash\r\n            .toEthSignedMessageHash()\r\n            .recover(_signature);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Finalize this liability\r\n     * @param _result Result data hash\r\n     * @param _agree Validation network confirmation\r\n     * @param _signature Result sender signature\r\n     */\r\n    function finalize(\r\n        bytes _result,\r\n        bytes _signature,\r\n        bool  _agree\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint256 gasinit = gasleft();\r\n        require(!isFinalized);\r\n\r\n        address resultSender = keccak256(abi.encodePacked(this, _result))\r\n            .toEthSignedMessageHash()\r\n            .recover(_signature);\r\n        require(resultSender == promisor);\r\n\r\n        result = _result;\r\n        isFinalized = true;\r\n\r\n        if (validator == 0) {\r\n            require(factory.isLighthouse(msg.sender));\r\n            require(token.transfer(promisor, cost));\r\n        } else {\r\n            require(msg.sender == validator);\r\n\r\n            isConfirmed = _agree;\r\n            if (isConfirmed)\r\n                require(token.transfer(promisor, cost));\r\n            else\r\n                require(token.transfer(promisee, cost));\r\n\r\n            if (validatorFee > 0)\r\n                require(factory.xrt().transfer(validator, validatorFee));\r\n        }\r\n\r\n        require(factory.liabilityFinalized(gasinit));\r\n        return true;\r\n    }\r\n}\r\n\r\n// Standard robot liability light contract\r\ncontract RobotLiability is RobotLiabilityAPI, LightContract {\r\n    constructor(address _lib) public LightContract(_lib)\r\n    { factory = LiabilityFactory(msg.sender); }\r\n}\r\n\r\ncontract LiabilityFactory {\r\n    constructor(\r\n        address _robot_liability_lib,\r\n        address _lighthouse_lib,\r\n        DutchAuction _auction,\r\n        XRT _xrt,\r\n        ENS _ens\r\n    ) public {\r\n        robotLiabilityLib = _robot_liability_lib;\r\n        lighthouseLib = _lighthouse_lib;\r\n        auction = _auction;\r\n        xrt = _xrt;\r\n        ens = _ens;\r\n    }\r\n\r\n    /**\r\n     * @dev New liability created \r\n     */\r\n    event NewLiability(address indexed liability);\r\n\r\n    /**\r\n     * @dev New lighthouse created\r\n     */\r\n    event NewLighthouse(address indexed lighthouse, string name);\r\n\r\n    /**\r\n     * @dev Robonomics dutch auction contract\r\n     */\r\n    DutchAuction public auction;\r\n\r\n    /**\r\n     * @dev Robonomics network protocol token\r\n     */\r\n    XRT public xrt;\r\n\r\n    /**\r\n     * @dev Ethereum name system\r\n     */\r\n    ENS public ens;\r\n\r\n    /**\r\n     * @dev Total GAS utilized by Robonomics network\r\n     */\r\n    uint256 public totalGasUtilizing = 0;\r\n\r\n    /**\r\n     * @dev GAS utilized by liability contracts\r\n     */\r\n    mapping(address => uint256) public gasUtilizing;\r\n\r\n    /**\r\n     * @dev The count of utilized gas for switch to next epoch \r\n     */\r\n    uint256 public constant gasEpoch = 347 * 10**10;\r\n\r\n    /**\r\n     * @dev Weighted average gasprice\r\n     */\r\n    uint256 public constant gasPrice = 10 * 10**9;\r\n\r\n    /**\r\n     * @dev Used market orders accounting\r\n     */\r\n    mapping(bytes32 => bool) public usedHash;\r\n\r\n    /**\r\n     * @dev Lighthouse accounting\r\n     */\r\n    mapping(address => bool) public isLighthouse;\r\n\r\n    /**\r\n     * @dev Robot liability shared code smart contract\r\n     */\r\n    address public robotLiabilityLib;\r\n\r\n    /**\r\n     * @dev Lightouse shared code smart contract\r\n     */\r\n    address public lighthouseLib;\r\n\r\n    /**\r\n     * @dev XRT emission value for utilized gas\r\n     */\r\n    function wnFromGas(uint256 _gas) public view returns (uint256) {\r\n        // Just return wn=gas when auction isn't finish\r\n        if (auction.finalPrice() == 0)\r\n            return _gas;\r\n\r\n        // Current gas utilization epoch\r\n        uint256 epoch = totalGasUtilizing / gasEpoch;\r\n\r\n        // XRT emission with addition coefficient by gas utilzation epoch\r\n        uint256 wn = _gas * gasPrice * 2**epoch / 3**epoch / auction.finalPrice();\r\n\r\n        // Check to not permit emission decrease below wn=gas\r\n        return wn < _gas ? _gas : wn;\r\n    }\r\n\r\n    /**\r\n     * @dev Only lighthouse guard\r\n     */\r\n    modifier onlyLighthouse {\r\n        require(isLighthouse[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Parameter can be used only once\r\n     * @param _hash Single usage hash\r\n     */\r\n    function usedHashGuard(bytes32 _hash) internal {\r\n        require(!usedHash[_hash]);\r\n        usedHash[_hash] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Create robot liability smart contract\r\n     * @param _ask ABI-encoded ASK order message \r\n     * @param _bid ABI-encoded BID order message \r\n     */\r\n    function createLiability(\r\n        bytes _ask,\r\n        bytes _bid\r\n    )\r\n        external \r\n        onlyLighthouse\r\n        returns (RobotLiability liability)\r\n    {\r\n        // Store in memory available gas\r\n        uint256 gasinit = gasleft();\r\n\r\n        // Create liability\r\n        liability = new RobotLiability(robotLiabilityLib);\r\n        emit NewLiability(liability);\r\n\r\n        // Parse messages\r\n        require(liability.call(abi.encodePacked(bytes4(0x82fbaa25), _ask))); // liability.ask(...)\r\n        usedHashGuard(liability.askHash());\r\n\r\n        require(liability.call(abi.encodePacked(bytes4(0x66193359), _bid))); // liability.bid(...)\r\n        usedHashGuard(liability.bidHash());\r\n\r\n        // Transfer lighthouse fee to lighthouse worker directly\r\n        require(xrt.transferFrom(liability.promisor(),\r\n                                 tx.origin,\r\n                                 liability.lighthouseFee()));\r\n\r\n        // Transfer liability security and hold on contract\r\n        ERC20 token = liability.token();\r\n        require(token.transferFrom(liability.promisee(),\r\n                                   liability,\r\n                                   liability.cost()));\r\n\r\n        // Transfer validator fee and hold on contract\r\n        if (address(liability.validator()) != 0 && liability.validatorFee() > 0)\r\n            require(xrt.transferFrom(liability.promisee(),\r\n                                     liability,\r\n                                     liability.validatorFee()));\r\n\r\n        // Accounting gas usage of transaction\r\n        uint256 gas = gasinit - gasleft() + 110525; // Including observation error\r\n        totalGasUtilizing       += gas;\r\n        gasUtilizing[liability] += gas;\r\n     }\r\n\r\n    /**\r\n     * @dev Create lighthouse smart contract\r\n     * @param _minimalFreeze Minimal freeze value of XRT token\r\n     * @param _timeoutBlocks Max time of lighthouse silence in blocks\r\n     * @param _name Lighthouse subdomain,\r\n     *              example: for 'my-name' will created 'my-name.lighthouse.1.robonomics.eth' domain\r\n     */\r\n    function createLighthouse(\r\n        uint256 _minimalFreeze,\r\n        uint256 _timeoutBlocks,\r\n        string  _name\r\n    )\r\n        external\r\n        returns (address lighthouse)\r\n    {\r\n        bytes32 lighthouseNode\r\n            // lighthouse.1.robonomics.eth\r\n            = 0x3662a5d633e9a5ca4b4bd25284e1b343c15a92b5347feb9b965a2b1ef3e1ea1a;\r\n\r\n        // Name reservation check\r\n        bytes32 subnode = keccak256(abi.encodePacked(lighthouseNode, keccak256(_name)));\r\n        require(ens.resolver(subnode) == 0);\r\n\r\n        // Create lighthouse\r\n        lighthouse = new Lighthouse(lighthouseLib, _minimalFreeze, _timeoutBlocks);\r\n        emit NewLighthouse(lighthouse, _name);\r\n        isLighthouse[lighthouse] = true;\r\n\r\n        // Register subnode\r\n        ens.setSubnodeOwner(lighthouseNode, keccak256(_name), this);\r\n\r\n        // Register lighthouse address\r\n        PublicResolver resolver = PublicResolver(ens.resolver(lighthouseNode));\r\n        ens.setResolver(subnode, resolver);\r\n        resolver.setAddr(subnode, lighthouse);\r\n    }\r\n\r\n    /**\r\n     * @dev Is called whan after liability finalization\r\n     * @param _gas Liability finalization gas expenses\r\n     */\r\n    function liabilityFinalized(\r\n        uint256 _gas\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(gasUtilizing[msg.sender] > 0);\r\n\r\n        uint256 gas = _gas - gasleft();\r\n        totalGasUtilizing        += gas;\r\n        gasUtilizing[msg.sender] += gas;\r\n        require(xrt.mint(tx.origin, wnFromGas(gasUtilizing[msg.sender])));\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"robotLiabilityLib\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xrt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimalFreeze\",\"type\":\"uint256\"},{\"name\":\"_timeoutBlocks\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createLighthouse\",\"outputs\":[{\"name\":\"lighthouse\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gasUtilizing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLighthouse\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGasUtilizing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"liabilityFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ask\",\"type\":\"bytes\"},{\"name\":\"_bid\",\"type\":\"bytes\"}],\"name\":\"createLiability\",\"outputs\":[{\"name\":\"liability\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"wnFromGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lighthouseLib\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_robot_liability_lib\",\"type\":\"address\"},{\"name\":\"_lighthouse_lib\",\"type\":\"address\"},{\"name\":\"_auction\",\"type\":\"address\"},{\"name\":\"_xrt\",\"type\":\"address\"},{\"name\":\"_ens\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"liability\",\"type\":\"address\"}],\"name\":\"NewLiability\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lighthouse\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NewLighthouse\",\"type\":\"event\"}]","ContractName":"LiabilityFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000962a243601bc20c9828d866939051220225a069000000000000000000000000d1ef9de08b20116b4c844a9f5f1dc42bd8e98f46000000000000000000000000023a3dfff92e4e547f40b2664fd910fd8079fd69000000000000000000000000ff9e8732eb713ba00782a4a48af9959e3666059b000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b","Library":"","SwarmSource":"bzzr://b33de4403e6f4ec75e84775436819468a6e1120231b419acacc80ef530cc7524"}]}