{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {                                                \r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));                                    // to ensure the owner's address isn't an uninitialised address, \"0x0\"\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract WarmWallet is Ownable {\r\n    \r\n    address defaultSweeper;\r\n\r\n    mapping (address => address) sweepers;\r\n    mapping (address => bool) financeFolks;\r\n    mapping (address => bool) destinations;\r\n    mapping (address => bytes32) dstLabels;\r\n    mapping (address => uint256) dstIndex;\r\n    address[] public destKeys;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function sweeperOf(address asset) public view returns (address) {\r\n    \tif (sweepers[asset] == 0x0) {\r\n    \t\treturn defaultSweeper;\r\n    \t}\r\n    \treturn sweepers[asset];\r\n    }\r\n\r\n    function setDefaultSweeper(address sweeper) public onlyOwner {\r\n    \tdefaultSweeper = sweeper;\r\n    }\r\n\r\n    function setSweeper(address asset, address sweeper) public onlyOwner {\r\n    \tsweepers[asset] = sweeper;\r\n    }\r\n\r\n    function authorizeAddress(address actor) public onlyOwner {\r\n    \tfinanceFolks[actor] = true;\r\n    }\r\n\r\n    function revokeAuthorization(address actor) public onlyOwner {\r\n    \tfinanceFolks[actor] = false;\r\n    }\r\n\r\n    function isAuthorized(address actor) public view returns (bool) {\r\n    \treturn financeFolks[actor];\r\n    }\r\n\r\n    function addDestination(address dest, bytes32 label) public onlyOwner {\r\n    \trequire(destinations[dest] == false);\r\n    \tdestinations[dest] = true;\r\n    \tdstIndex[dest] = destKeys.length;\r\n    \tdestKeys.push(dest);\r\n    \tdstLabels[dest] = label;\r\n    }\r\n\r\n    function removeDestination(address dest) public onlyOwner {\r\n    \trequire(destinations[dest] == true);\r\n    \tdestinations[dest] = false;\r\n    \tdelete dstLabels[dest];\r\n    \tuint256 keyindex = dstIndex[dest];\r\n    \tdelete destKeys[keyindex];\r\n    \tdelete dstIndex[dest];\r\n    }\r\n\r\n    function isDestination(address dest) public view returns (bool) {\r\n    \treturn destinations[dest];\r\n    }\r\n\r\n    function destinationLabel(address dest) public view returns (string) {\r\n    \tbytes memory bytesArray = new bytes(32);\r\n    \tfor (uint256 i; i < 32; i++) {\r\n        \tbytesArray[i] = dstLabels[dest][i];\r\n        }\r\n    \treturn string(bytesArray);\r\n    }\r\n\r\n    function () public payable { \r\n        if (msg.value == 0 && financeFolks[msg.sender] == true) {\r\n            address destination = addressAtIndex(msg.data, 2);\r\n            require(destinations[destination] == true);\r\n\r\n            address asset = addressAtIndex(msg.data, 1);\r\n            address _impl = sweeperOf(asset);\r\n            require(_impl != 0x0);\r\n            bytes memory data = msg.data;\r\n\r\n    \t\tassembly {\r\n    \t\t\tlet result := delegatecall(gas, _impl, add(data, 0x20), mload(data), 0, 0)\r\n    \t\t\tlet size := returndatasize\r\n    \t\t\tlet ptr := mload(0x40)\r\n    \t\t\treturndatacopy(ptr, 0, size)\r\n    \t\t\tswitch result\r\n    \t\t\tcase 0 { revert(ptr, size) }\r\n    \t\t\tdefault { return(ptr, size) }\r\n    \t\t}\r\n        }\r\n    }\r\n\r\n    function addressAtIndex(bytes _bytes, uint256 index) internal pure returns (address asset) {\r\n        assembly {\r\n            // mul(32, index) - Each param is 32 bytes, so we use n*32\r\n            // add(4, ^) - 4 function sig bytes\r\n            // add(_bytes, ^) - set the pointer to that position in memory\r\n            // mload(^) - load an addresses worth of value (20 bytes) from memory into asset\r\n            asset := mload(add(_bytes, add(4, mul(32, index))))\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"sweeperOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"authorizeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"removeDestination\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"addDestination\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sweeper\",\"type\":\"address\"}],\"name\":\"setDefaultSweeper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"isDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"revokeAuthorization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sweeper\",\"type\":\"address\"}],\"name\":\"setSweeper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"destinationLabel\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"destKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"WarmWallet","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0d47104cf6c06d2cd5c750a774443b78dbf7fdd001fa807c1713eb6ac135a913"}]}