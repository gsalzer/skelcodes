{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract PD88 is Owned {\r\n    \r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        require (_addr == tx.origin);\r\n        \r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n    \r\n    //Round Global Info\r\n    uint public Round = 1;\r\n    mapping(uint => uint) public RoundDonation;\r\n    mapping(uint => uint) public RoundETH; // Pot\r\n    mapping(uint => uint) public RoundTime;\r\n    mapping(uint => uint) public RoundPayMask;\r\n    mapping(uint => address) public RoundLastDonationMan;\r\n    \r\n    //Globalinfo\r\n    uint256 public Luckybuy;\r\n    \r\n    //Round Personal Info\r\n    mapping(uint => mapping(address => uint)) public RoundMyDonation;\r\n    mapping(uint => mapping(address => uint)) public RoundMyPayMask;\r\n    mapping(address => uint) public MyreferredRevenue;\r\n    \r\n    //Product\r\n    uint public product1_pot;\r\n    uint public product2_pot;\r\n    uint public product3_pot;\r\n    uint public product4_pot;\r\n    \r\n    uint public product1_sell;\r\n    uint public product2_sell;\r\n    uint public product3_sell;\r\n    uint public product4_sell;\r\n    \r\n    uint public product1_luckybuyTracker;\r\n    uint public product2_luckybuyTracker;\r\n    uint public product3_luckybuyTracker;\r\n    uint public product4_luckybuyTracker;\r\n    \r\n    uint public product1 = 0.03 ether;\r\n    uint public product2 = 0.05 ether;\r\n    uint public product3 = 0.09 ether;\r\n    uint public product4 = 0.01 ether;\r\n    \r\n    uint256 private RoundIncrease = 11 seconds; \r\n    uint256 constant private RoundMaxTime = 720 minutes; \r\n    \r\n    uint public lasttimereduce = 0;\r\n    \r\n    //Owner fee\r\n    uint256 public onwerfee;\r\n    \r\n    using SafeMath for *;\r\n    using CalcLong for uint256;\r\n    \r\n    event winnerEvent(address winnerAddr, uint256 newPot, uint256 round);\r\n    event luckybuyEvent(address luckyAddr, uint256 amount, uint256 round, uint product);\r\n    event buydonationEvent(address Addr, uint256 Donationsamount, uint256 ethvalue, uint256 round, address ref);\r\n    event referredEvent(address Addr, address RefAddr, uint256 ethvalue);\r\n    \r\n    event withdrawEvent(address Addr, uint256 ethvalue, uint256 Round);\r\n    event withdrawRefEvent(address Addr, uint256 ethvalue);\r\n    event withdrawOwnerEvent(uint256 ethvalue);\r\n\r\n\r\n    function getDonationPrice() public view returns(uint256)\r\n    {  \r\n        return ( (RoundDonation[Round].add(1000000000000000000)).ethRec(1000000000000000000) );\r\n    }\r\n    \r\n    //Get My Revenue\r\n    function getMyRevenue(uint _round) public view returns(uint256)\r\n    {\r\n        return(  (((RoundPayMask[_round]).mul(RoundMyDonation[_round][msg.sender])) / (1000000000000000000)).sub(RoundMyPayMask[_round][msg.sender])  );\r\n    }\r\n    \r\n    //Get Time Left\r\n    function getTimeLeft() public view returns(uint256)\r\n    {\r\n        if(RoundTime[Round] == 0 || RoundTime[Round] < now) \r\n            return 0;\r\n        else \r\n            return( (RoundTime[Round]).sub(now) );\r\n    }\r\n\r\n    function updateTimer(uint256 _donations) private\r\n    {\r\n        if(RoundTime[Round] == 0)\r\n            RoundTime[Round] = RoundMaxTime.add(now);\r\n        \r\n        uint _newTime = (((_donations) / (1000000000000000000)).mul(RoundIncrease)).add(RoundTime[Round]);\r\n        \r\n        // compare to max and set new end time\r\n        if (_newTime < (RoundMaxTime).add(now))\r\n            RoundTime[Round] = _newTime;\r\n        else\r\n            RoundTime[Round] = RoundMaxTime.add(now);\r\n    }\r\n\r\n\r\n    function buyDonation(address referred, uint8 product) public isHuman() payable {\r\n        \r\n        require(msg.value >= 1000000000, \"pocket lint: not a valid currency\");\r\n        require(msg.value <= 100000000000000000000000, \"no vitalik, no\");\r\n        \r\n        uint8 product_ = 1;\r\n        if(product == 1) {\r\n            require(msg.value >= product1 && msg.value % product1 == 0);\r\n            product1_sell += msg.value / product1;\r\n            product1_pot += msg.value.mul(20) / 100;\r\n            product1_luckybuyTracker++;\r\n            product_ = 1;\r\n        } else if(product == 2) {\r\n            require(msg.value >= product2 && msg.value % product2 == 0);\r\n            product2_sell += msg.value / product2;\r\n            product2_pot += msg.value.mul(20) / 100;\r\n            product2_luckybuyTracker++;\r\n            product_ = 2;\r\n        } else if(product == 3) {\r\n            require(msg.value >= product3 && msg.value % product3 == 0);\r\n            product3_sell += msg.value / product3;\r\n            product3_pot += msg.value.mul(20) / 100;\r\n            product3_luckybuyTracker++;\r\n            product_ = 3;\r\n        } else {\r\n            require(msg.value >= product4 && msg.value % product4 == 0);\r\n            product4_sell += msg.value / product4;\r\n            product4_pot += msg.value.mul(20) / 100;\r\n            product4_luckybuyTracker++;\r\n            product_ = 4;\r\n        }\r\n        \r\n\r\n        //bought at least 1 whole key\r\n        uint256 _donations = (RoundETH[Round]).keysRec(msg.value);\r\n        uint256 _pearn;\r\n        require(_donations >= 1000000000000000000);\r\n        \r\n        require(RoundTime[Round] > now || RoundTime[Round] == 0);\r\n        \r\n        updateTimer(_donations);\r\n        \r\n        RoundDonation[Round] += _donations;\r\n        RoundMyDonation[Round][msg.sender] += _donations;\r\n\r\n        if (referred != address(0) && referred != msg.sender)\r\n        {\r\n             _pearn = (((msg.value.mul(45) / 100).mul(1000000000000000000)) / (RoundDonation[Round])).mul(_donations)/ (1000000000000000000);\r\n\r\n            onwerfee += (msg.value.mul(5) / 100);\r\n            RoundETH[Round] += msg.value.mul(20) / 100;\r\n            \r\n            MyreferredRevenue[referred] += (msg.value.mul(10) / 100);\r\n            \r\n            RoundPayMask[Round] += ((msg.value.mul(45) / 100).mul(1000000000000000000)) / (RoundDonation[Round]);\r\n            RoundMyPayMask[Round][msg.sender] = (((RoundPayMask[Round].mul(_donations)) / (1000000000000000000)).sub(_pearn)).add(RoundMyPayMask[Round][msg.sender]);\r\n\r\n            emit referredEvent(msg.sender, referred, msg.value.mul(10) / 100);\r\n        } else {\r\n             _pearn = (((msg.value.mul(55) / 100).mul(1000000000000000000)) / (RoundDonation[Round])).mul(_donations)/ (1000000000000000000);\r\n\r\n            RoundETH[Round] += msg.value.mul(20) / 100;\r\n\r\n            onwerfee +=(msg.value.mul(5) / 100);\r\n            \r\n            RoundPayMask[Round] += ((msg.value.mul(55) / 100).mul(1000000000000000000)) / (RoundDonation[Round]);\r\n            RoundMyPayMask[Round][msg.sender] = (((RoundPayMask[Round].mul(_donations)) / (1000000000000000000)).sub(_pearn)).add(RoundMyPayMask[Round][msg.sender]);\r\n        }\r\n        \r\n        // airdrops\r\n\r\n        if (luckyBuy(product_) == true)\r\n        {\r\n            \r\n            uint _temp = 0;\r\n            if(product_ == 1) {\r\n                _temp = product1_pot;\r\n                product1_pot = 0;\r\n                product1_luckybuyTracker = 0;\r\n            } else if(product_ == 2) {\r\n                _temp = product2_pot;\r\n                product2_pot = 0;\r\n                product2_luckybuyTracker = 0;\r\n            } else if(product_ == 3) {\r\n                _temp = product3_pot;\r\n                product3_pot = 0;\r\n                product3_luckybuyTracker = 0;\r\n            } else {\r\n                _temp = product4_pot;\r\n                product4_pot = 0;\r\n                product4_luckybuyTracker = 0;\r\n            }\r\n            \r\n            if(_temp != 0)\r\n                msg.sender.transfer(_temp);\r\n                \r\n            emit luckybuyEvent(msg.sender, _temp, Round,product_);\r\n        }\r\n        \r\n        \r\n        RoundLastDonationMan[Round] = msg.sender;\r\n        emit buydonationEvent(msg.sender, _donations, msg.value, Round, referred);\r\n    }\r\n    \r\n    function reducetime() isHuman() public {\r\n        require(now >= lasttimereduce + 12 hours);\r\n        lasttimereduce = now;\r\n        RoundIncrease -= 1 seconds;\r\n    }\r\n    \r\n    function win() isHuman() public {\r\n        require(now > RoundTime[Round] && RoundTime[Round] != 0);\r\n        \r\n        uint Round_ = Round;\r\n        Round++;\r\n        \r\n        //Round End \r\n        RoundLastDonationMan[Round_].transfer(RoundETH[Round_].mul(80) / 100);\r\n        owner.transfer(RoundETH[Round_].mul(20) / 100);\r\n        \r\n        RoundIncrease = 11 seconds;\r\n        lasttimereduce = now;\r\n        emit winnerEvent(RoundLastDonationMan[Round_], RoundETH[Round_], Round_);\r\n    }\r\n    \r\n    //withdrawEarnings\r\n    function withdraw(uint _round) isHuman() public {\r\n        uint _revenue = getMyRevenue(_round);\r\n        uint _revenueRef = MyreferredRevenue[msg.sender];\r\n\r\n        RoundMyPayMask[_round][msg.sender] += _revenue;\r\n        MyreferredRevenue[msg.sender] = 0;\r\n        \r\n        msg.sender.transfer(_revenue + _revenueRef); \r\n        \r\n        emit withdrawRefEvent( msg.sender, _revenue);\r\n        emit withdrawEvent(msg.sender, _revenue, _round);\r\n    }\r\n    \r\n    function withdrawOwner()  public onlyOwner {\r\n        uint _revenue = onwerfee;\r\n        msg.sender.transfer(_revenue);    \r\n        onwerfee = 0;\r\n        emit withdrawOwnerEvent(_revenue);\r\n    }\r\n    \r\n    //LuckyBuy\r\n    function luckyBuy(uint8 product_) private view returns(bool)\r\n    {\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n            \r\n            (block.timestamp).add\r\n            (block.difficulty).add\r\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\r\n            (block.gaslimit).add\r\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\r\n            (block.number)\r\n            \r\n        )));\r\n        \r\n        uint luckybuyTracker_;\r\n        \r\n        if(product_ == 1) {\r\n            luckybuyTracker_ = product1_luckybuyTracker;\r\n        } else if(product_ == 2) {\r\n            luckybuyTracker_ = product2_luckybuyTracker;\r\n        } else if(product_ == 3) {\r\n            luckybuyTracker_ = product3_luckybuyTracker;\r\n        } else {\r\n            luckybuyTracker_ = product4_luckybuyTracker;\r\n        }\r\n        \r\n        if((seed - ((seed / 1000) * 1000)) < luckybuyTracker_)\r\n            return(true);\r\n        else\r\n            return(false);\r\n    }\r\n    \r\n    function getFullround()public view returns(uint[] round,uint[] pot, address[] whowin,uint[] mymoney) {\r\n        uint[] memory whichRound = new uint[](Round);\r\n        uint[] memory totalPool = new uint[](Round);\r\n        address[] memory winner = new address[](Round);\r\n        uint[] memory myMoney = new uint[](Round);\r\n        uint counter = 0;\r\n\r\n        for (uint i = 1; i <= Round; i++) {\r\n            whichRound[counter] = i;\r\n            totalPool[counter] = RoundETH[i];\r\n            winner[counter] = RoundLastDonationMan[i];\r\n            myMoney[counter] = getMyRevenue(i);\r\n            counter++;\r\n        }\r\n   \r\n        return (whichRound,totalPool,winner,myMoney);\r\n    }\r\n}\r\n\r\nlibrary CalcLong {\r\n    using SafeMath for *;\r\n    /**\r\n     * @dev calculates number of keys received given X eth \r\n     * @param _curEth current amount of eth in contract \r\n     * @param _newEth eth being spent\r\n     * @return amount of ticket purchased\r\n     */\r\n    function keysRec(uint256 _curEth, uint256 _newEth)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\r\n    }\r\n    \r\n    /**\r\n     * @dev calculates amount of eth received if you sold X keys \r\n     * @param _curKeys current amount of keys that exist \r\n     * @param _sellKeys amount of keys you wish to sell\r\n     * @return amount of eth received\r\n     */\r\n    function ethRec(uint256 _curKeys, uint256 _sellKeys)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\r\n    }\r\n\r\n    /**\r\n     * @dev calculates how many keys would exist with given an amount of eth\r\n     * @param _eth eth \"in contract\"\r\n     * @return number of keys that would exist\r\n     */\r\n    function keys(uint256 _eth) \r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000);\r\n    }\r\n    \r\n    /**\r\n     * @dev calculates how much eth would be in contract given a number of keys\r\n     * @param _keys number of keys \"in contract\" \r\n     * @return eth that would exists\r\n     */\r\n    function eth(uint256 _keys) \r\n        internal\r\n        pure\r\n        returns(uint256)  \r\n    {\r\n        return ((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"referred\",\"type\":\"address\"},{\"name\":\"product\",\"type\":\"uint8\"}],\"name\":\"buyDonation\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onwerfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getMyRevenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reducetime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product2_sell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product3_sell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Luckybuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"win\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product4_luckybuyTracker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product2_luckybuyTracker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDonationPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product4_pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoundMyPayMask\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product2_pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lasttimereduce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product1_luckybuyTracker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product3_luckybuyTracker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RoundLastDonationMan\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RoundDonation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product1_pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RoundPayMask\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"MyreferredRevenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product4_sell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product3_pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoundMyDonation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RoundETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFullround\",\"outputs\":[{\"name\":\"round\",\"type\":\"uint256[]\"},{\"name\":\"pot\",\"type\":\"uint256[]\"},{\"name\":\"whowin\",\"type\":\"address[]\"},{\"name\":\"mymoney\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RoundTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"product1_sell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"winnerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"luckyAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"product\",\"type\":\"uint256\"}],\"name\":\"luckybuyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Donationsamount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buydonationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"RefAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethvalue\",\"type\":\"uint256\"}],\"name\":\"referredEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Round\",\"type\":\"uint256\"}],\"name\":\"withdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethvalue\",\"type\":\"uint256\"}],\"name\":\"withdrawRefEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethvalue\",\"type\":\"uint256\"}],\"name\":\"withdrawOwnerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PD88","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f8e473ad80be646548fc79e79c286ce35e67802d2b50bc61123cbedfe0eebc4d"}]}