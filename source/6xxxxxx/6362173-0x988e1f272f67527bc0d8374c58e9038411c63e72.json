{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract CappedToken is MintableToken {\r\n\r\n  uint256 public cap;\r\n\r\n  constructor(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\ncontract MatterToken is DetailedERC20, StandardToken, PausableToken, CappedToken, BurnableToken {\r\n  using SafeMath for uint256;\r\n\r\n  event MintApprovalChanged(address indexed minter, uint256 newValue);\r\n  event MintWithData(address indexed to, uint256 amount, bytes data);\r\n\r\n  mapping (address => uint256) mintApprovals;\r\n\r\n  // Override modifier from parent MintableToken contract. We allow anyone\r\n  // to mint, but explicitly check approval in the function code.\r\n  modifier hasMintPermission() {\r\n    _;\r\n  }\r\n\r\n  constructor(uint256 _cap, address[] _holders, uint256[] _amounts)\r\n    DetailedERC20(\"Matter\", \"MTR\", 18)\r\n    CappedToken(_cap)\r\n    public\r\n  {\r\n    require(\r\n      _holders.length == _amounts.length,\r\n      \"_holers and _amounts contain different number of items\"\r\n    );\r\n\r\n    for (uint256 i = 0; i < _holders.length; ++i) {\r\n      address holder = _holders[i];\r\n      uint256 amount = _amounts[i];\r\n      totalSupply_ = totalSupply_.add(amount);\r\n      balances[holder] = balances[holder].add(amount);\r\n      emit Mint(holder, amount);\r\n      emit Transfer(address(0), holder, amount);\r\n    }\r\n\r\n    require(totalSupply_ <= _cap, \"initial total supply is more than cap\");\r\n  }\r\n\r\n  function burn(uint256 _value) public whenNotPaused {\r\n    super.burn(_value);\r\n  }\r\n\r\n  function batchTransfer(address[] _to, uint256[] _amounts) public whenNotPaused {\r\n    require(_to.length == _amounts.length, \"_to and _amounts contain different number of items\");\r\n\r\n    for (uint256 i = 0; i < _to.length; ++i) {\r\n      transfer(_to[i], _amounts[i]);\r\n    }\r\n  }\r\n\r\n  function batchMint(address[] _to, uint256[] _amounts) public whenNotPaused {\r\n    require(_to.length == _amounts.length, \"_to and _amounts contain different number of items\");\r\n\r\n    uint256 totalAmount = 0;\r\n\r\n    for (uint256 i = 0; i < _to.length; ++i) {\r\n      totalAmount = totalAmount.add(_amounts[i]);\r\n      super.mint(_to[i], _amounts[i]);\r\n    }\r\n\r\n    _decreaseMintApprovalAfterMint(msg.sender, totalAmount);\r\n  }\r\n\r\n  function batchMintWithData(address[] _to, uint256[] _amounts, bytes _data) public whenNotPaused {\r\n    require(_to.length == _amounts.length, \"_to and _amounts contain different number of items\");\r\n\r\n    uint256 totalAmount = 0;\r\n\r\n    for (uint256 i = 0; i < _to.length; ++i) {\r\n      emit MintWithData(_to[i], _amounts[i], _data);\r\n      totalAmount = totalAmount.add(_amounts[i]);\r\n      super.mint(_to[i], _amounts[i]);\r\n    }\r\n\r\n    _decreaseMintApprovalAfterMint(msg.sender, totalAmount);\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount)\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    _decreaseMintApprovalAfterMint(msg.sender, _amount);\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n  function mintWithData(address _to, uint256 _amount, bytes _data)\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    _decreaseMintApprovalAfterMint(msg.sender, _amount);\r\n    emit MintWithData(_to, _amount, _data);\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n  function _decreaseMintApprovalAfterMint(address _minter, uint256 _mintedAmount) internal {\r\n    if (_minter != owner) {\r\n      uint256 approval = mintApprovals[_minter];\r\n      require(approval >= _mintedAmount, \"mint approval is insufficient to mint this amount\");\r\n      mintApprovals[_minter] = approval.sub(_mintedAmount);\r\n    }\r\n  }\r\n\r\n  function increaseMintApproval(address _minter, uint256 _addedValue)\r\n    public\r\n    whenNotPaused\r\n    onlyOwner\r\n  {\r\n    require(_minter != owner, \"cannot set mint approval for owner\");\r\n    mintApprovals[_minter] = mintApprovals[_minter].add(_addedValue);\r\n    emit MintApprovalChanged(_minter, mintApprovals[_minter]);\r\n  }\r\n\r\n  function decreaseMintApproval(address _minter, uint256 _subtractedValue)\r\n    public\r\n    whenNotPaused\r\n    onlyOwner\r\n  {\r\n    require(_minter != owner, \"cannot set mint approval for owner\");\r\n    uint256 approval = mintApprovals[_minter];\r\n    if (_subtractedValue >= approval) {\r\n      mintApprovals[_minter] = 0;\r\n    } else {\r\n      mintApprovals[_minter] = approval.sub(_subtractedValue);\r\n    }\r\n    emit MintApprovalChanged(_minter, mintApprovals[_minter]);\r\n  }\r\n\r\n  function getMintApproval(address _minter) public view returns (uint256) {\r\n    return mintApprovals[_minter];\r\n  }\r\n\r\n  function getMintLimit(address _minter) public view returns (uint256) {\r\n    uint256 capLeft = cap.sub(totalSupply_);\r\n\r\n    if (_minter == owner) {\r\n      return capLeft;\r\n    }\r\n\r\n    uint256 approval = mintApprovals[_minter];\r\n    return approval < capLeft ? approval : capLeft;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseMintApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"getMintLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchMintWithData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseMintApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mintWithData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"getMintApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_holders\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MintApprovalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MintWithData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MatterToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000084595161401484a000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000007a00000000000000000000000000000000000000000000000000000000000000039000000000000000000000000767055e6a898cf6a83f181c2fd7abca4c79d845f000000000000000000000000f5f0ca3eaa4a3edebfe72a76f42a81499b75377f000000000000000000000000b87d6e886c62b017f27ac40976209ece7adbc41c0000000000000000000000002981a4b6093d504f08e3ed1746cb2eb6f887b072000000000000000000000000dc372d0e73c39f448782bc488dddad8bda59723600000000000000000000000067dfd201eaed8c53dc604814f9509004d154608e0000000000000000000000008e478097cb934fa033b111b813ff15920bc1a96400000000000000000000000036ca37a2e58009c7d37e24d3f3dd398ec78a1bf9000000000000000000000000d5bbbf454e9afc0b582bce98603cc239e1fa75ea0000000000000000000000008bb0675122567956a72a3371fa3b178bf390fcd200000000000000000000000083c81c3a35dd1a2e0f82c84ef059cf93ecf7102a0000000000000000000000003738762f841cddbe131bf66245b8887eebecd28a000000000000000000000000b480fd453d4302bcf56c3d5aa20d2267a3de5e3200000000000000000000000043fd0c7f3ae09fadb345e2d662c375674191bce100000000000000000000000000444797ba158a7bdb8302e72da98dcbccef0fbc0000000000000000000000006d9d7739d076d5cc4c1084f55297d9cdb908c6e8000000000000000000000000cff58286faf8a80da8474f890bd82c784b64c4e0000000000000000000000000984f05aba983c2c17b2fd1b5d48691121dcb51c5000000000000000000000000b6d0a3120c0e13749c211f48fccd9458dfc99bd0000000000000000000000000165540b886924e5214933a52039b1060f90eee6e000000000000000000000000dbddb6bc594448cc6475f39abb1ff8e6f0ce0c9d0000000000000000000000009e3779b51441e2c017a128a0bb353b68131be15e000000000000000000000000090ea986edc3045b8f5c23c927e209b64ac6e2ea0000000000000000000000004bf8b696b3cf1c1c9c99199c36de8e01ed0a276a000000000000000000000000856591f79996da2ace118bf4786fb5c539afe2b30000000000000000000000004de0e4d5dcadc7d17a9ade42c00d998a05d76f54000000000000000000000000a7b001be32f2c954f726f94281b796889071cf58000000000000000000000000e380131bbcb94590120c6840bb6f77bb96138fdf000000000000000000000000a392a53277b33a35d018c3a77c06be1befe6d918000000000000000000000000d8804c0dc86a28b39953069f6f5d41a5e2b4f73b000000000000000000000000026dcaf1704c66d7cfb63a853252c7401672f99400000000000000000000000032a4e9d38a235e6c7e34017902b81846692ca5770000000000000000000000007124621c522b69e0969064fcd592ac7097b1305b000000000000000000000000e025cf914bc3b77f36cd0061add7912dabeef49f0000000000000000000000000634c54ce082404d03849b4eee14cb3537525e010000000000000000000000009b5e08dc22712543a687d765df3c54f86b6fadc9000000000000000000000000b30588c43b9ecfe7bae953d1e11cde9cc33f8f4d000000000000000000000000321205e2850144055fbc9dd7d73be05f1f9a219c0000000000000000000000003ed8df19c18ded608c6efb110ec3e2f7322639850000000000000000000000005883575a904bd6cf7dfcbcac9be57ebde38437db0000000000000000000000006d1ea6358c74d10f89c81369da03b53d4651bbad0000000000000000000000005767612fe860a5646769d28035a984cda5fd1dab0000000000000000000000005e80a5fd71c5cba9cfc7475f2c3c17460274cade00000000000000000000000082fa248cc9de08bfa5f553b45e00c151001ccfef000000000000000000000000acbb66b4d064c0037d47d0c74e2e98232eee34a0000000000000000000000000eda1a154e78bea2930fc8895811c4cb2a588be0b000000000000000000000000a3651f9829c7ddb276cbcf22f128282a502169cb000000000000000000000000167dea44b6c66a7ac5345e8cf8614c879ee27cf9000000000000000000000000737c53e898ecf14deb98c251538c0702b90f6647000000000000000000000000cf7f61a02780526f579427bd806170ce53c7a442000000000000000000000000392e7943175e5b07a7a8f5960b72de960622a1f8000000000000000000000000fb53722b247f20cea62968543c6a0e342cd6c63f000000000000000000000000f4b15ef519bc50798cb105996a7fed9082f9e61600000000000000000000000085ebe2e8170586422327fdb9b6c1e433842e28b800000000000000000000000051d7cd974d143b5e0041852298f31cde254bda26000000000000000000000000299d8ab32ea99450419bbc530d5ae4742970d25b000000000000000000000000bbdde5b1490e33190f3906f750e4e6ca46f6b65c000000000000000000000000000000000000000000000000000000000000003900000000000000000000000000000000000000000001225639debc68ef27000000000000000000000000000000000000000000000000054b40b1f852bda00000000000000000000000000000000000000000000000000547d665021c8c0400000000000000000000000000000000000000000000000003486fec8ed658bd000000000000000000000000000000000000000000000000032759e4d181149400000000000000000000000000000000000000000000000002544faa778090e0000000000000000000000000000000000000000000000000022f72c52a4bef40000000000000000000000000000000000000000000000000021e19e0c9bab24000000000000000000000000000000000000000000000000001d234f9a33f476000000000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000001a98ca260eae068000000000000000000000000000000000000000000000000016b25e9a9b4e8420000000000000000000000000000000000000000000000000148067e786d90ac00000000000000000000000000000000000000000000000001387d43ea4edd30780000000000000000000000000000000000000000000000010f0cf064dd592000000000000000000000000000000000000000000000000000c789e3fc51f26d08000000000000000000000000000000000000000000000000b2e4b323d9c51000000000000000000000000000000000000000000000000000b02ecf74c31388000000000000000000000000000000000000000000000000006c6b935b8bbd40000000000000000000000000000000000000000000000000005188315f776b80000000000000000000000000000000000000000000000000005150ae84a8cdf0000000000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000001043561a88293000000000000000000000000000000000000000000000000000093739534d286800000000000000000000000000000000000000000000000000072c08050b682e00000000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000028c418afbbb5c0000000000000000000000000000000000000000000000000002629f66e0c53000000000000000000000000000000000000000000000000000025286410621bc0000000000000000000000000000000000000000000000000001ce215d91ac820000000000000000000000000000000000000000000000000001a055690d9db800000000000000000000000000000000000000000000000000015af1d78b58c40000000000000000000000000000000000000000000000000001158e460913d00000000000000000000000000000000000000000000000000001158e460913d00000000000000000000000000000000000000000000000000000c93a592cfb2a0000000000000000000000000000000000000000000000000000c93a592cfb2a0000000000000000000000000000000000000000000000000000b893178898b2000000000000000000000000000000000000000000000000000098a7d9b8314c00000000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000053444835ec5800000000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000003e7336287142000000000000000000000000000000000000000000000000000029a2241af62c000000000000000000000000000000000000000000000000000029a2241af62c000000000000000000000000000000000000000000000000000029a2241af62c00000000000000000000000000000000000000000000000000002013be0dbdd680000000000000000000000000000000000000000000000000000f43fc2c04ee00000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a7640000","Library":"","SwarmSource":"bzzr://f7fffbb17d8fd0c7e2e02b66f3a406a96e720299ee212832b82585af00319ba6"}]}