{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract Withdrawable is Ownable {\r\n    event ReceiveEther(address _from, uint256 _value);\r\n    event WithdrawEther(address _to, uint256 _value);\r\n    event WithdrawToken(address _token, address _to, uint256 _value);\r\n\r\n    /**\r\n         * @dev recording receiving ether from msn.sender\r\n         */\r\n    function () payable public {\r\n        emit ReceiveEther(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n         * @dev withdraw,send ether to target\r\n         * @param _to is where the ether will be sent to\r\n         *        _amount is the number of the ether\r\n         */\r\n    function withdraw(address _to, uint _amount) public onlyOwner returns (bool) {\r\n        require(_to != address(0));\r\n        _to.transfer(_amount);\r\n        emit WithdrawEther(_to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev withdraw tokens, send tokens to target\r\n     *\r\n     * @param _token the token address that will be withdraw\r\n         * @param _to is where the tokens will be sent to\r\n         *        _value is the number of the token\r\n         */\r\n    function withdrawToken(address _token, address _to, uint256 _value) public onlyOwner returns (bool) {\r\n        require(_to != address(0));\r\n        require(_token != address(0));\r\n\r\n        ERC20 tk = ERC20(_token);\r\n        tk.transfer(_to, _value);\r\n        emit WithdrawToken(_token, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev receive approval from an ERC20 token contract, and then gain the tokens,\r\n     *      then take a record\r\n     *\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _value uint256 the amounts of tokens to be sent\r\n     * @param _token address the ERC20 token address\r\n     * @param _extraData bytes the extra data for the record\r\n     */\r\n    // function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public {\r\n    //     require(_token != address(0));\r\n    //     require(_from != address(0));\r\n\r\n    //     ERC20 tk = ERC20(_token);\r\n    //     require(tk.transferFrom(_from, this, _value));\r\n\r\n    //     emit ReceiveDeposit(_from, _value, _token, _extraData);\r\n    // }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract DRCWalletStorage is Withdrawable, Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * withdraw wallet description\r\n     */\r\n    struct WithdrawWallet {\r\n        bytes32 name;\r\n        address walletAddr;\r\n    }\r\n\r\n    /**\r\n     * Deposit data storage\r\n     */\r\n    struct DepositRepository {\r\n        int256 balance; // can be negative\r\n        uint256 frozen;\r\n        WithdrawWallet[] withdrawWallets;\r\n        // mapping (bytes32 => address) withdrawWallets;\r\n    }\r\n\r\n    mapping (address => DepositRepository) depositRepos;\r\n    mapping (address => address) public walletDeposits;\r\n    mapping (address => bool) public frozenDeposits;\r\n    address[] depositAddresses;\r\n    uint256 public size;\r\n\r\n\r\n    /**\r\n         * @dev add deposit contract address for the default withdraw wallet\r\n     *\r\n     * @param _wallet the default withdraw wallet address\r\n     * @param _depositAddr the corresponding deposit address to the default wallet\r\n         */\r\n    function addDeposit(address _wallet, address _depositAddr) onlyOwner public returns (bool) {\r\n        require(_wallet != address(0));\r\n        require(_depositAddr != address(0));\r\n\r\n        walletDeposits[_wallet] = _depositAddr;\r\n        WithdrawWallet[] storage withdrawWalletList = depositRepos[_depositAddr].withdrawWallets;\r\n        withdrawWalletList.push(WithdrawWallet(\"default wallet\", _wallet));\r\n        depositRepos[_depositAddr].balance = 0;\r\n        depositRepos[_depositAddr].frozen = 0;\r\n        depositAddresses.push(_depositAddr);\r\n\r\n        size = size.add(1);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an address from the deposit address list\r\n     *\r\n     * @param _deposit the deposit address in the list\r\n     */\r\n    function removeDepositAddress(address _deposit) internal returns (bool) {\r\n        uint i = 0;\r\n        for (;i < depositAddresses.length; i = i.add(1)) {\r\n            if (depositAddresses[i] == _deposit) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (i >= depositAddresses.length) {\r\n            return false;\r\n        }\r\n\r\n        while (i < depositAddresses.length.sub(1)) {\r\n            depositAddresses[i] = depositAddresses[i.add(1)];\r\n            i = i.add(1);\r\n        }\r\n\r\n        delete depositAddresses[depositAddresses.length.sub(1)];\r\n        depositAddresses.length = depositAddresses.length.sub(1);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev remove deposit contract address from storage\r\n     *\r\n     * @param _depositAddr the corresponding deposit address\r\n         */\r\n    function removeDeposit(address _depositAddr) onlyOwner public returns (bool) {\r\n        require(isExisted(_depositAddr));\r\n\r\n        WithdrawWallet memory withdraw = depositRepos[_depositAddr].withdrawWallets[0];\r\n        delete walletDeposits[withdraw.walletAddr];\r\n        delete depositRepos[_depositAddr];\r\n        delete frozenDeposits[_depositAddr];\r\n        removeDepositAddress(_depositAddr);\r\n\r\n        size = size.sub(1);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev add withdraw address for one deposit addresss\r\n     *\r\n     * @param _deposit the corresponding deposit address\r\n     * @param _name the new withdraw wallet name\r\n     * @param _withdraw the new withdraw wallet address\r\n         */\r\n    function addWithdraw(address _deposit, bytes32 _name, address _withdraw) onlyOwner public returns (bool) {\r\n        require(_deposit != address(0));\r\n\r\n        WithdrawWallet[] storage withdrawWalletList = depositRepos[_deposit].withdrawWallets;\r\n        withdrawWalletList.push(WithdrawWallet(_name, _withdraw));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev increase balance of this deposit address\r\n     *\r\n     * @param _deposit the corresponding deposit address\r\n     * @param _value the amount that the balance will be increased\r\n         */\r\n    function increaseBalance(address _deposit, uint256 _value) onlyOwner public returns (bool) {\r\n        // require(_deposit != address(0));\r\n        require (walletsNumber(_deposit) > 0);\r\n        int256 _balance = depositRepos[_deposit].balance;\r\n        depositRepos[_deposit].balance = _balance + int256(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev decrease balance of this deposit address\r\n     *\r\n     * @param _deposit the corresponding deposit address\r\n     * @param _value the amount that the balance will be decreased\r\n         */\r\n    function decreaseBalance(address _deposit, uint256 _value) onlyOwner public returns (bool) {\r\n        // require(_deposit != address(0));\r\n        require (walletsNumber(_deposit) > 0);\r\n        int256 _balance = depositRepos[_deposit].balance;\r\n        depositRepos[_deposit].balance = _balance - int256(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev change the default withdraw wallet address binding to the deposit contract address\r\n     *\r\n     * @param _oldWallet the old default withdraw wallet\r\n     * @param _newWallet the new default withdraw wallet\r\n         */\r\n    function changeDefaultWallet(address _oldWallet, address _newWallet) onlyOwner public returns (bool) {\r\n        require(_oldWallet != address(0));\r\n        require(_newWallet != address(0));\r\n\r\n        address _deposit = walletDeposits[_oldWallet];\r\n        WithdrawWallet[] storage withdrawWalletList = depositRepos[_deposit].withdrawWallets;\r\n        withdrawWalletList[0].walletAddr = _newWallet;\r\n        // emit ChangeDefaultWallet(_oldWallet, _newWallet);\r\n        walletDeposits[_newWallet] = _deposit;\r\n        delete walletDeposits[_oldWallet];\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev change the name of the withdraw wallet address of the deposit contract address\r\n     *\r\n     * @param _deposit the deposit address\r\n     * @param _newName the wallet name\r\n     * @param _wallet the withdraw wallet\r\n         */\r\n    function changeWalletName(address _deposit, bytes32 _newName, address _wallet) onlyOwner public returns (bool) {\r\n        require(_deposit != address(0));\r\n        require(_wallet != address(0));\r\n\r\n        uint len = walletsNumber(_deposit);\r\n        // default wallet name do not change\r\n        for (uint i = 1; i < len; i = i.add(1)) {\r\n            WithdrawWallet storage wallet = depositRepos[_deposit].withdrawWallets[i];\r\n            if (_wallet == wallet.walletAddr) {\r\n                wallet.name = _newName;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n         * @dev freeze the tokens in the deposit address\r\n     *\r\n     * @param _deposit the deposit address\r\n     * @param _freeze to freeze or release\r\n     * @param _value the amount of tokens need to be frozen\r\n         */\r\n    function freezeTokens(address _deposit, bool _freeze, uint256 _value) onlyOwner public returns (bool) {\r\n        require(_deposit != address(0));\r\n        // require(_value <= balanceOf(_deposit));\r\n\r\n        frozenDeposits[_deposit] = _freeze;\r\n        uint256 _frozen = depositRepos[_deposit].frozen;\r\n        int256 _balance = depositRepos[_deposit].balance;\r\n        int256 freezeAble = _balance - int256(_frozen);\r\n        freezeAble = freezeAble < 0 ? 0 : freezeAble;\r\n        if (_freeze) {\r\n            if (_value > uint256(freezeAble)) {\r\n                _value = uint256(freezeAble);\r\n            }\r\n            depositRepos[_deposit].frozen = _frozen.add(_value);\r\n        } else {\r\n            if (_value > _frozen) {\r\n                _value = _frozen;\r\n            }\r\n            depositRepos[_deposit].frozen = _frozen.sub(_value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev get the wallet address for the deposit address\r\n     *\r\n     * @param _deposit the deposit address\r\n     * @param _ind the wallet index in the list\r\n         */\r\n    function wallet(address _deposit, uint256 _ind) public view returns (address) {\r\n        require(_deposit != address(0));\r\n\r\n        WithdrawWallet[] storage withdrawWalletList = depositRepos[_deposit].withdrawWallets;\r\n        return withdrawWalletList[_ind].walletAddr;\r\n    }\r\n\r\n    /**\r\n         * @dev get the wallet name for the deposit address\r\n     *\r\n     * @param _deposit the deposit address\r\n     * @param _ind the wallet index in the list\r\n         */\r\n    function walletName(address _deposit, uint256 _ind) public view returns (bytes32) {\r\n        require(_deposit != address(0));\r\n\r\n        WithdrawWallet[] storage withdrawWalletList = depositRepos[_deposit].withdrawWallets;\r\n        return withdrawWalletList[_ind].name;\r\n    }\r\n\r\n    /**\r\n         * @dev get the wallet name for the deposit address\r\n     *\r\n     * @param _deposit the deposit address\r\n         */\r\n    function walletsNumber(address _deposit) public view returns (uint256) {\r\n        require(_deposit != address(0));\r\n\r\n        WithdrawWallet[] storage withdrawWalletList = depositRepos[_deposit].withdrawWallets;\r\n        return withdrawWalletList.length;\r\n    }\r\n\r\n    /**\r\n         * @dev get the balance of the deposit account\r\n     *\r\n     * @param _deposit the wallet address\r\n         */\r\n    function isExisted(address _deposit) public view returns (bool) {\r\n        return (walletsNumber(_deposit) > 0);\r\n    }\r\n\r\n    /**\r\n         * @dev get the balance of the deposit account\r\n     *\r\n     * @param _deposit the deposit address\r\n         */\r\n    function balanceOf(address _deposit) public view returns (int256) {\r\n        require(_deposit != address(0));\r\n        return depositRepos[_deposit].balance;\r\n    }\r\n\r\n    /**\r\n         * @dev get the frozen amount of the deposit address\r\n     *\r\n     * @param _deposit the deposit address\r\n         */\r\n    function frozenAmount(address _deposit) public view returns (uint256) {\r\n        require(_deposit != address(0));\r\n        return depositRepos[_deposit].frozen;\r\n    }\r\n\r\n    /**\r\n         * @dev get the deposit address by index\r\n     *\r\n     * @param _ind the deposit address index\r\n         */\r\n    function depositAddressByIndex(uint256 _ind) public view returns (address) {\r\n        return depositAddresses[_ind];\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositAddr\",\"type\":\"address\"}],\"name\":\"removeDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freezeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_depositAddr\",\"type\":\"address\"}],\"name\":\"addDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"depositAddressByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_withdraw\",\"type\":\"address\"}],\"name\":\"addWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"}],\"name\":\"frozenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"}],\"name\":\"isExisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"}],\"name\":\"walletsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldWallet\",\"type\":\"address\"},{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeDefaultWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_newName\",\"type\":\"bytes32\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWalletName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"walletName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceiveEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DRCWalletStorage","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://acfe645a28e8b0870d9390f7d2e6c8292c6842b125717b5a56690e7332860440"}]}