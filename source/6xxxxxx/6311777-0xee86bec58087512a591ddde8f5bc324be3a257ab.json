{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply()public view returns (uint256 total_Supply);\r\n  function balanceOf(address who)public view returns (uint256);\r\n  function allowance(address owner, address spender)public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value)public returns (bool ok);\r\n  function approve(address spender, uint256 value)public returns (bool ok);\r\n  function transfer(address to, uint256 value)public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BNTE is ERC20 { \r\n    using SafeMath for uint256;\r\n    //--- Token configurations ----// \r\n    string public constant name = \"Bountie\";\r\n    string public constant symbol = \"BNTE\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant basePrice = 6500;\r\n    uint public maxCap = 20000 ether;\r\n    \r\n    //--- Token allocations -------//\r\n    uint256 public _totalsupply;\r\n    uint256 public mintedTokens;\r\n    uint256 public ETHcollected;\r\n\r\n    //--- Address -----------------//\r\n    address public owner;\r\n    address public ethFundMain;\r\n    address public novumAddress;\r\n   \r\n    //--- Milestones --------------//\r\n    uint256 public presale1_startdate = 1537675200; // 23-9-2018\r\n    uint256 public presale2_startdate = 1538712000; // 5-10-2018\r\n    uint256 public presale3_startdate = 1539662400; // 16-10-2018\r\n    uint256 public ico_startdate = 1540612800; // 27-10-2018\r\n    uint256 public ico_enddate = 1541563200; // 7-11-2018\r\n    \r\n    //--- Variables ---------------//\r\n    bool public lockstatus = true;\r\n    bool public stopped = false;\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    event Mint(address indexed from, address indexed to, uint256 amount);\r\n    event Burn(address indexed from, uint256 amount);\r\n    \r\n    //ok\r\n    modifier onlyOwner() {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    //ok\r\n    modifier onlyManual() {\r\n        require(now < ico_enddate);\r\n        _;\r\n    }\r\n\r\n    //ok\r\n    modifier onlyICO() {\r\n        require(now >= presale1_startdate && now < ico_enddate);\r\n        _;\r\n    }\r\n\r\n    //ok\r\n    modifier onlyFinishedICO() {\r\n        require(now >= ico_enddate);\r\n        _;\r\n    }\r\n    \r\n    //ok\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n        ethFundMain = 0xDEe3a6b14ef8E21B9df09a059186292C9472045D;\r\n        novumAddress = 0xDEe3a6b14ef8E21B9df09a059186292C9472045D;\r\n    }\r\n\r\n    //ok\r\n    function totalSupply() public view returns (uint256 total_Supply) {\r\n        total_Supply = _totalsupply;\r\n    }\r\n    \r\n    //ok\r\n    function balanceOf(address _owner)public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    //ok\r\n    function transferFrom( address _from, address _to, uint256 _amount ) public onlyFinishedICO returns (bool success)  {\r\n        require( _to != 0x0);\r\n        require(!lockstatus);\r\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n        balances[_from] = (balances[_from]).sub(_amount);\r\n        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    //ok\r\n    function approve(address _spender, uint256 _amount)public onlyFinishedICO returns (bool success)  {\r\n        require(!lockstatus);\r\n        require( _spender != 0x0);\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n  \r\n    //ok\r\n    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n        require( _owner != 0x0 && _spender !=0x0);\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    //ok\r\n    function transfer(address _to, uint256 _amount)public onlyFinishedICO returns (bool success) {\r\n        require(!lockstatus);\r\n        require( _to != 0x0);\r\n        require(balances[msg.sender] >= _amount && _amount >= 0);\r\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    //ok\r\n    function burn(uint256 value) public onlyOwner returns (bool success) {\r\n        uint256 _value = value * 10 ** 18;\r\n        require(balances[msg.sender] >= _value);   \r\n        balances[msg.sender] = (balances[msg.sender]).sub(_value);            \r\n        _totalsupply = _totalsupply.sub(_value);                     \r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    //ok\r\n    // function burnFrom(address _from, uint256 value) public onlyOwner returns (bool success) {\r\n    //     uint256 _value = value * 10 ** 18;\r\n    //     require(balances[_from] >= _value);                \r\n    //     require(_value <= allowed[_from][msg.sender]);    \r\n    //     balances[_from] = (balances[_from]).sub(_value);                         \r\n    //     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_value);             \r\n    //     _totalsupply = _totalsupply.sub(_value);                             \r\n    //     emit Burn(_from, _value);\r\n    //     return true;\r\n    // }\r\n\r\n    //ok\r\n    function stopTransferToken() external onlyOwner onlyFinishedICO {\r\n        require(!lockstatus);\r\n        lockstatus = true;\r\n    }\r\n\r\n    //ok\r\n    function startTransferToken() external onlyOwner onlyFinishedICO {\r\n        require(lockstatus);\r\n        lockstatus = false;\r\n    }\r\n\r\n    //ok\r\n    function manualMint(address receiver, uint256 _tokenQuantity) external onlyOwner onlyManual {\r\n        uint256 tokenQuantity = _tokenQuantity * 10 ** 18;\r\n        uint256 tokenPrice = calculatePrice();\r\n        uint256 ethAmount = tokenQuantity.div(tokenPrice);\r\n        ETHcollected = ETHcollected.add(ethAmount);\r\n        require(ETHcollected <= maxCap);\r\n        mintContract(owner, receiver, tokenQuantity);\r\n    }\r\n\r\n    //ok\r\n    function () public payable onlyICO {\r\n        require(msg.value != 0 && msg.sender != 0x0);\r\n        require(!stopped && msg.sender != owner);\r\n        uint256 tokenPrice = calculatePrice();\r\n        uint256 tokenQuantity = (msg.value).mul(tokenPrice);\r\n        ETHcollected = ETHcollected.add(msg.value);\r\n        require(ETHcollected <= maxCap);\r\n        mintContract(address(this), msg.sender, tokenQuantity);\r\n    }\r\n\r\n    //ok\r\n    function mintContract(address from, address receiver, uint256 tokenQuantity) private {\r\n        require(tokenQuantity > 0);\r\n        mintedTokens = mintedTokens.add(tokenQuantity);\r\n        uint256 novumShare = tokenQuantity * 4 / 65;\r\n        uint256 userManagement = tokenQuantity * 31 / 65;\r\n        balances[novumAddress] = balances[novumAddress].add(novumShare);\r\n        balances[owner] = balances[owner].add(userManagement);\r\n        _totalsupply = _totalsupply.add(tokenQuantity * 100 / 65);\r\n        balances[receiver] = balances[receiver].add(tokenQuantity);\r\n        emit Mint(from, receiver, tokenQuantity);\r\n        emit Transfer(0, receiver, tokenQuantity);\r\n        emit Mint(from, novumAddress, novumShare);\r\n        emit Transfer(0, novumAddress, novumShare);\r\n        emit Mint(from, owner, userManagement);\r\n        emit Transfer(0, owner, userManagement);\r\n    }\r\n    \r\n    //ok\r\n    function calculatePrice() private view returns (uint256){\r\n        uint256 price_token = basePrice;\r\n         \r\n        if(now < presale1_startdate) {\r\n            require(ETHcollected < 10000 ether);\r\n            price_token = basePrice * 6 / 5;   \r\n        }\r\n        else  if (now < presale2_startdate) {\r\n            require(ETHcollected < 11739 ether);\r\n            price_token = basePrice * 23 / 20;   \r\n        }\r\n        else if (now < presale3_startdate) {\r\n            require(ETHcollected < 13557 ether);\r\n            price_token = basePrice * 11 / 10;\r\n        }\r\n        else if (now < ico_startdate) {\r\n            require(ETHcollected < 15462 ether);\r\n            price_token = basePrice * 21 / 20;\r\n        }\r\n        else {\r\n            require(ETHcollected < maxCap);\r\n            price_token = basePrice;\r\n        }\r\n        return price_token;\r\n    }\r\n    \r\n    //ok\r\n    function CrowdSale_Halt() external onlyOwner onlyICO {\r\n        require(!stopped);\r\n        stopped = true;\r\n    }\r\n\r\n    //ok\r\n    function CrowdSale_Resume() external onlyOwner onlyICO {\r\n        require(stopped);\r\n        stopped = false;\r\n    }\r\n    //ok\r\n    function CrowdSale_Change_ReceiveWallet(address New_Wallet_Address) external onlyOwner {\r\n        require(New_Wallet_Address != 0x0);\r\n        ethFundMain = New_Wallet_Address;\r\n    }\r\n\r\n    //ok\r\n\tfunction CrowdSale_AssignOwnership(address newOwner) public onlyOwner {\r\n\t    require(newOwner != 0x0);\r\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    owner = newOwner;\r\n\t    emit Transfer(msg.sender, newOwner, balances[newOwner]);\r\n\t}\r\n\r\n    //ok\r\n    function forwardFunds() external onlyOwner { \r\n        address myAddress = this;\r\n        ethFundMain.transfer(myAddress.balance);\r\n    }\r\n\r\n    //ok\r\n    // function increaseMaxCap(uint256 value) public onlyOwner returns(bool) {\r\n    //     maxCap = maxCap.add(value * 10 ** 18);\r\n    //     return true;\r\n    // }\r\n    \r\n    //ok\r\n    function modify_NovumAddress(address newAddress) public onlyOwner returns(bool) {\r\n        require(newAddress != 0x0 && novumAddress != newAddress);\r\n        uint256 novumBalance = balances[novumAddress];\r\n        address oldAddress = novumAddress;\r\n        balances[newAddress] = (balances[newAddress]).add(novumBalance);\r\n        balances[novumAddress] = 0;\r\n        novumAddress = newAddress;\r\n        emit Transfer(oldAddress, newAddress, novumBalance);\r\n        return true;\r\n    }\r\n    //ok\r\n    // function modify_Presale1StartDate(uint256 newDate) public onlyOwner returns(bool) {\r\n    //     presale1_startdate = newDate;\r\n    //     return true;\r\n    // }\r\n    // //ok\r\n    // function modify_Presale2StartDate(uint256 newDate) public onlyOwner returns(bool) {\r\n    //     presale2_startdate = newDate;\r\n    //     return true;\r\n    // }\r\n    // //ok\r\n    // function modify_Presale3StartDate(uint256 newDate) public onlyOwner returns(bool) {\r\n    //     presale3_startdate = newDate;\r\n    //     return true;\r\n    // }\r\n    // //ok\r\n    // function modify_ICOStartDate(uint256 newDate) public onlyOwner returns(bool) {\r\n    //     ico_startdate = newDate;\r\n    //     return true;\r\n    // }\r\n    // //ok\r\n    // function modify_ICOEndDate(uint256 newDate) public onlyOwner returns(bool) {\r\n    //     ico_enddate = newDate;\r\n    //     return true;\r\n    // }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHcollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale1_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CrowdSale_Halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale3_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"modify_NovumAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CrowdSale_Resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundMain\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forwardFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"CrowdSale_AssignOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"New_Wallet_Address\",\"type\":\"address\"}],\"name\":\"CrowdSale_Change_ReceiveWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"novumAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"_tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"manualMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale2_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockstatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BNTE","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://793667bd6498be2bc025b42eb3d1505c2a1d5545b587149f9771efb7f93cc659"}]}