{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n    contract TMBToken  {\r\n        string public constant name = \"TimeBankToken\";\r\n        string public constant symbol = \"TMB\";\r\n        uint public constant decimals = 18;\r\n        uint256 _totalSupply = 1e9 * (10 ** uint256(decimals)); \r\n        uint public baseStartTime;\r\n        uint256 public distributed = 0;\r\n        mapping (address => bool) public freezed;\r\n        mapping(address => uint256) balances;       \r\n        mapping(address => uint256) distBalances;   \r\n        mapping(address => mapping (address => uint256)) allowed;\r\n        address public founder;\r\n        event AllocateFounderTokens(address indexed sender);\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n        event Burn(address indexed fromAddr, uint256 value);\r\n     \r\n        function TMBToken() {\r\n            founder = msg.sender;\r\n        }\r\n         function totalSupply() constant returns (uint256 supply) {\r\n            return _totalSupply;\r\n        }\r\n \r\n        function balanceOf(address _owner) constant returns (uint256 balance) {\r\n            return balances[_owner];\r\n        }\r\n \r\n        function approve(address _spender, uint256 _value) returns (bool success) {\r\n            allowed[msg.sender][_spender] = _value;\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n \r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n          return allowed[_owner][_spender];\r\n        }\r\n        function setStartTime(uint _startTime) {\r\n            if (msg.sender!=founder) revert();\r\n            baseStartTime = _startTime;\r\n        }\r\n \r\n       \r\n        function distribute(uint256 _amount, address _to) {\r\n            if (msg.sender!=founder) revert();\r\n            if (distributed + _amount > _totalSupply) revert();\r\n            if (freezed[_to]) revert();\r\n            distributed += _amount;\r\n            balances[_to] += _amount;\r\n            distBalances[_to] += _amount;\r\n        }\r\n \r\n      \r\n        function transfer(address _to, uint256 _value) returns (bool success) {\r\n            if (now < baseStartTime) revert();\r\n            if (freezed[msg.sender]) revert();\r\n            if (freezed[_to]) revert();\r\n            \r\n            \r\n            \r\n            if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n                uint _freeAmount = freeAmount(msg.sender);\r\n                if (_freeAmount < _value) {\r\n                    return false;\r\n                } \r\n \r\n                balances[msg.sender] -= _value;\r\n                balances[_to] += _value;\r\n                Transfer(msg.sender, _to, _value);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        function addTokenTotal(uint256 _addAmount) public returns (bool success){\r\n    require(msg.sender == founder);                        \r\n    require(_addAmount > 0);                             \r\n        \r\n    _totalSupply += _addAmount * 10 ** decimals;           \r\n    balances[msg.sender] += _addAmount * 10 ** decimals;  \r\n    return true;\r\n}  \r\n    function unFreezenAccount(address _freezen) public returns (bool success) {\r\n        require(msg.sender == founder);       \r\n        \r\n        freezed[_freezen] = false;\r\n        return true;\r\n    }\r\n    \r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(msg.sender == founder);                  \r\n        require(balances[msg.sender] >= _value);      \r\n        balances[msg.sender] -= _value;\r\n        _totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n   \r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(msg.sender == founder);                  \r\n        require(balances[_from] >= _value);            \r\n        require(_value <= allowed[_from][msg.sender]);  \r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        _totalSupply -= _value;\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n   \r\n\r\n  function freezenAccount(address _freezen) public returns (bool success) {\r\n        require(msg.sender == founder);      \r\n        require(_freezen != founder);         \r\n    \r\n        freezed[_freezen] = true;\r\n        return true;\r\n    }\r\n\r\n        function freeAmount(address user) returns (uint256 amount) {\r\n           \r\n            if (user == founder) {\r\n                return balances[user];\r\n            }\r\n\r\n            if (now < baseStartTime) {\r\n                return 0;\r\n            }\r\n \r\n         \r\n            uint monthDiff = (now - baseStartTime) / (30 days);\r\n \r\n           \r\n            if (monthDiff > 5) {\r\n                return balances[user];\r\n            }\r\n \r\n           \r\n            uint unrestricted = distBalances[user] / 10 + distBalances[user] * 20 / 100 * monthDiff;\r\n            if (unrestricted > distBalances[user]) {\r\n                unrestricted = distBalances[user];\r\n            }\r\n \r\n           \r\n            if (unrestricted + balances[user] < distBalances[user]) {\r\n                amount = 0;\r\n            } else {\r\n                amount = unrestricted + (balances[user] - distBalances[user]);\r\n            }\r\n \r\n            return amount;\r\n        }\r\n \r\n       \r\n        function changeFounder(address newFounder) {\r\n            if (msg.sender!=founder) revert();\r\n            founder = newFounder;\r\n        }\r\n \r\n        \r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n            require(_to != address(0));\r\n            if (freezed[_from]) revert();\r\n            if (freezed[_to]) revert();\r\n            \r\n            if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n                uint _freeAmount = freeAmount(_from);\r\n                if (_freeAmount < _value) {\r\n                    return false;\r\n                } \r\n \r\n                balances[_to] += _value;\r\n                balances[_from] -= _value;\r\n                allowed[_from][msg.sender] -= _value;\r\n                Transfer(_from, _to, _value);\r\n                return true;\r\n            } else { return false; }\r\n        }\r\n        function kill() public {\r\n        require(msg.sender == founder);\r\n        selfdestruct(founder);\r\n        }\r\n\r\n        function() payable {\r\n            if (!founder.call.value(msg.value)()) revert(); \r\n        }\r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freezen\",\"type\":\"address\"}],\"name\":\"unFreezenAccount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"freeAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addAmount\",\"type\":\"uint256\"}],\"name\":\"addTokenTotal\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freezen\",\"type\":\"address\"}],\"name\":\"freezenAccount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllocateFounderTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"TMBToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9015a744199ced64f3e610240070781ef133ab6446f06d8019425569689e6bb1"}]}