{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Base\r\n{\r\n    uint8 constant HEROLEVEL_MIN = 1;\r\n    uint8 constant HEROLEVEL_MAX = 5;\r\n\r\n    uint8 constant LIMITCHIP_MINLEVEL = 3;\r\n    uint constant PARTWEIGHT_NORMAL = 100;\r\n    uint constant PARTWEIGHT_LIMIT = 40;\r\n\r\n    address creator;\r\n\r\n    constructor() public\r\n    {\r\n        creator = msg.sender;\r\n    }\r\n\r\n    modifier CreatorAble()\r\n    {\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n    function IsLimitPart(uint8 level, uint part) internal pure returns(bool)\r\n    {\r\n        if (level < LIMITCHIP_MINLEVEL) return false;\r\n        if (part < GetPartNum(level)) return false;\r\n        return true;\r\n    }\r\n\r\n    function GetPartWeight(uint8 level, uint part) internal pure returns(uint)\r\n    {\r\n        if (IsLimitPart(level, part)) return PARTWEIGHT_LIMIT;\r\n        return PARTWEIGHT_NORMAL;\r\n    }\r\n    \r\n    function GetPartNum(uint8 level) internal pure returns(uint)\r\n    {\r\n        if (level <= 2) return 3;\r\n        else if (level <= 4) return 4;\r\n        return 5;\r\n    }\r\n\r\n    function GetPartLimit(uint8 level, uint part) internal pure returns(uint8)\r\n    {\r\n        if (!IsLimitPart(level, part)) return 0;\r\n        if (level == 5) return 1;\r\n        if (level == 4) return 8;\r\n        return 15;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nlibrary ItemList {\r\n\r\n    struct Data {\r\n        uint32[] m_List;\r\n        mapping(uint32 => uint) m_Maps;\r\n    }\r\n\r\n    function set(Data storage self, uint32 key, uint num) public\r\n    {\r\n        if (!has(self,key)) {\r\n            if (num == 0) return;\r\n            self.m_List.push(key);\r\n            self.m_Maps[key] = num;\r\n        }\r\n        else if (num == 0) {\r\n            delete self.m_Maps[key];\r\n        } \r\n        else {\r\n            uint old = self.m_Maps[key];\r\n            if (old == num) return;\r\n            self.m_Maps[key] = num;\r\n        }\r\n    }\r\n\r\n    function add(Data storage self, uint32 key, uint num) external\r\n    {\r\n        uint iOld = get(self,key);\r\n        uint iNow = iOld+num;\r\n        require(iNow >= iOld);\r\n        set(self,key,iNow);\r\n    }\r\n\r\n    function sub(Data storage self, uint32 key, uint num) external\r\n    {\r\n        uint iOld = get(self,key);\r\n        require(iOld >= num);\r\n        set(self,key,iOld-num);\r\n    }\r\n\r\n    function has(Data storage self, uint32 key) public view returns(bool)\r\n    {\r\n        return self.m_Maps[key] > 0;\r\n    }\r\n\r\n    function get(Data storage self, uint32 key) public view returns(uint)\r\n    {\r\n        return self.m_Maps[key];\r\n    }\r\n\r\n    function list(Data storage self) view external returns(uint32[],uint[])\r\n    {\r\n        uint len = self.m_List.length;\r\n        uint[] memory values = new uint[](len);\r\n        for (uint i=0; i<len; i++)\r\n        {\r\n            uint32 key = self.m_List[i];\r\n            values[i] = self.m_Maps[key];\r\n        }\r\n        return (self.m_List,values);\r\n    }\r\n\r\n    function isEmpty(Data storage self) view external returns(bool)\r\n    {\r\n        return self.m_List.length == 0;\r\n    }\r\n\r\n    function keys(Data storage self) view external returns(uint32[])\r\n    {\r\n        return self.m_List;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract BasicAuth is Base\r\n{\r\n\r\n    mapping(address => bool) auth_list;\r\n\r\n    modifier OwnerAble(address acc)\r\n    {\r\n        require(acc == tx.origin);\r\n        _;\r\n    }\r\n\r\n    modifier AuthAble()\r\n    {\r\n        require(auth_list[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier ValidHandleAuth()\r\n    {\r\n        require(tx.origin==creator || msg.sender==creator);\r\n        _;\r\n    }\r\n   \r\n    function SetAuth(address target) external ValidHandleAuth\r\n    {\r\n        auth_list[target] = true;\r\n    }\r\n\r\n    function ClearAuth(address target) external ValidHandleAuth\r\n    {\r\n        delete auth_list[target];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract StoreGoods is BasicAuth\r\n{\r\n    using ItemList for ItemList.Data;\r\n\r\n    struct Goods\r\n    {\r\n        uint32 m_Index;\r\n        uint32 m_CostItem;\r\n        uint32 m_ItemRef;\r\n        uint32 m_Amount;\r\n        uint32 m_Duration;\r\n        uint32 m_Expire;\r\n        uint8 m_PurchaseLimit;\r\n        uint8 m_DiscountLimit;\r\n        uint8 m_DiscountRate;\r\n        uint m_CostNum;\r\n    }\r\n\r\n    mapping(uint32 => Goods) g_Goods;\r\n    mapping(address => ItemList.Data) g_PurchaseInfo;\r\n\r\n    function AddGoods(uint32 iGoods, uint32 costItem, uint price, uint32 itemRef, uint32 amount, uint32 duration, uint32 expire, uint8 limit, uint8 disCount, uint8 disRate) external CreatorAble\r\n    {\r\n        require(!HasGoods(iGoods));\r\n        g_Goods[iGoods] = Goods({\r\n            m_Index         :iGoods,\r\n            m_CostItem      :costItem,\r\n            m_ItemRef       :itemRef,\r\n            m_CostNum       :price,\r\n            m_Amount        :amount,\r\n            m_Duration      :duration,\r\n            m_Expire        :expire,\r\n            m_PurchaseLimit :limit,\r\n            m_DiscountLimit :disCount,\r\n            m_DiscountRate  :disRate\r\n        });\r\n    }\r\n\r\n    function DelGoods(uint32 iGoods) external CreatorAble\r\n    {\r\n        delete g_Goods[iGoods];\r\n    }\r\n\r\n    function HasGoods(uint32 iGoods) public view returns(bool)\r\n    {\r\n        Goods storage obj = g_Goods[iGoods];\r\n        return obj.m_Index == iGoods;\r\n    }\r\n\r\n    function GetGoodsInfo(uint32 iGoods) external view returns(\r\n        uint32,uint32,uint32,uint32,uint32,uint,uint8,uint8,uint8\r\n    )\r\n    {\r\n        Goods storage obj = g_Goods[iGoods];\r\n        return (\r\n            obj.m_Index,\r\n            obj.m_CostItem,\r\n            obj.m_ItemRef,\r\n            obj.m_Amount,\r\n            obj.m_Duration,\r\n            obj.m_CostNum,\r\n            obj.m_PurchaseLimit,\r\n            obj.m_DiscountLimit,\r\n            obj.m_DiscountRate\r\n        );\r\n    }\r\n\r\n    function GetRealCost(address acc, uint32 iGoods) external view returns(uint)\r\n    {\r\n        Goods storage obj = g_Goods[iGoods];\r\n        if (g_PurchaseInfo[acc].get(iGoods) >= obj.m_DiscountLimit) {\r\n            return obj.m_CostNum;\r\n        }\r\n        else {\r\n            return obj.m_CostNum * obj.m_DiscountRate / 100;\r\n        }\r\n    }\r\n\r\n    function BuyGoods(address acc, uint32 iGoods) external OwnerAble(acc) AuthAble\r\n    {\r\n        g_PurchaseInfo[acc].add(iGoods,1);\r\n    }\r\n\r\n    function IsOnSale(uint32 iGoods) external view returns(bool)\r\n    {\r\n        Goods storage obj = g_Goods[iGoods];\r\n        if (obj.m_Expire == 0) return true;\r\n        if (obj.m_Expire >= now) return true;\r\n        return false;\r\n    }\r\n\r\n    function CheckPurchaseCount(address acc, uint32 iGoods) external view returns(bool)\r\n    {\r\n        Goods storage obj = g_Goods[iGoods];\r\n        if (obj.m_PurchaseLimit == 0) return true;\r\n        if (g_PurchaseInfo[acc].get(iGoods) < obj.m_PurchaseLimit) return true;\r\n        return false;\r\n    }\r\n\r\n    function GetPurchaseInfo(address acc) external view returns(uint32[], uint[])\r\n    {\r\n        return g_PurchaseInfo[acc].list();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"GetPurchaseInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iGoods\",\"type\":\"uint32\"}],\"name\":\"BuyGoods\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"iGoods\",\"type\":\"uint32\"}],\"name\":\"GetGoodsInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iGoods\",\"type\":\"uint32\"}],\"name\":\"CheckPurchaseCount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"iGoods\",\"type\":\"uint32\"}],\"name\":\"HasGoods\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"iGoods\",\"type\":\"uint32\"}],\"name\":\"IsOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iGoods\",\"type\":\"uint32\"}],\"name\":\"GetRealCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"iGoods\",\"type\":\"uint32\"}],\"name\":\"DelGoods\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"SetAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ClearAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"iGoods\",\"type\":\"uint32\"},{\"name\":\"costItem\",\"type\":\"uint32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"itemRef\",\"type\":\"uint32\"},{\"name\":\"amount\",\"type\":\"uint32\"},{\"name\":\"duration\",\"type\":\"uint32\"},{\"name\":\"expire\",\"type\":\"uint32\"},{\"name\":\"limit\",\"type\":\"uint8\"},{\"name\":\"disCount\",\"type\":\"uint8\"},{\"name\":\"disRate\",\"type\":\"uint8\"}],\"name\":\"AddGoods\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StoreGoods","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"ItemList:A33Ff2C7B02171d4be5fD6b8ECe5fE40e5936D1d","SwarmSource":"bzzr://eb8308d886d73153d1f2ec32b9486f7a34763be2c0385c8228d2c4cbb5f6ef90"}]}