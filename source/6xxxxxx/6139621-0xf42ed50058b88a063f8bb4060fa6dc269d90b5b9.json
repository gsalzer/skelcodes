{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  ///bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the \r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\ncontract MyCryptoChampCore{\r\n    struct Champ {\r\n        uint id;\r\n        uint attackPower;\r\n        uint defencePower;\r\n        uint cooldownTime; \r\n        uint readyTime;\r\n        uint winCount;\r\n        uint lossCount;\r\n        uint position; \r\n        uint price; \r\n        uint withdrawCooldown; \r\n        uint eq_sword; \r\n        uint eq_shield; \r\n        uint eq_helmet; \r\n        bool forSale; \r\n    }\r\n    \r\n    struct AddressInfo {\r\n        uint withdrawal;\r\n        uint champsCount;\r\n        uint itemsCount;\r\n        string name;\r\n    }\r\n\r\n    struct Item {\r\n        uint id;\r\n        uint8 itemType; \r\n        uint8 itemRarity; \r\n        uint attackPower;\r\n        uint defencePower;\r\n        uint cooldownReduction;\r\n        uint price;\r\n        uint onChampId; \r\n        bool onChamp; \r\n        bool forSale;\r\n    }\r\n    \r\n    Champ[] public champs;\r\n    Item[] public items;\r\n    mapping (uint => uint) public leaderboard;\r\n    mapping (address => AddressInfo) public addressInfo;\r\n    mapping (bool => mapping(address => mapping (address => bool))) public tokenOperatorApprovals;\r\n    mapping (bool => mapping(uint => address)) public tokenApprovals;\r\n    mapping (bool => mapping(uint => address)) public tokenToOwner;\r\n    mapping (uint => string) public champToName;\r\n    mapping (bool => uint) public tokensForSaleCount;\r\n    uint public pendingWithdrawal = 0;\r\n\r\n    function addWithdrawal(address _address, uint _amount) public;\r\n    function clearTokenApproval(address _from, uint _tokenId, bool _isTokenChamp) public;\r\n    function setChampsName(uint _champId, string _name) public;\r\n    function setLeaderboard(uint _x, uint _value) public;\r\n    function setTokenApproval(uint _id, address _to, bool _isTokenChamp) public;\r\n    function setTokenOperatorApprovals(address _from, address _to, bool _approved, bool _isTokenChamp) public;\r\n    function setTokenToOwner(uint _id, address _owner, bool _isTokenChamp) public;\r\n    function setTokensForSaleCount(uint _value, bool _isTokenChamp) public;\r\n    function transferToken(address _from, address _to, uint _id, bool _isTokenChamp) public;\r\n    function newChamp(uint _attackPower,uint _defencePower,uint _cooldownTime,uint _winCount,uint _lossCount,uint _position,uint _price,uint _eq_sword, uint _eq_shield, uint _eq_helmet, bool _forSale,address _owner) public returns (uint);\r\n    function newItem(uint8 _itemType,uint8 _itemRarity,uint _attackPower,uint _defencePower,uint _cooldownReduction,uint _price,uint _onChampId,bool _onChamp,bool _forSale,address _owner) public returns (uint);\r\n    function updateAddressInfo(address _address, uint _withdrawal, bool _updatePendingWithdrawal, uint _champsCount, bool _updateChampsCount, uint _itemsCount, bool _updateItemsCount, string _name, bool _updateName) public;\r\n    function updateChamp(uint _champId, uint _attackPower,uint _defencePower,uint _cooldownTime,uint _readyTime,uint _winCount,uint _lossCount,uint _position,uint _price,uint _withdrawCooldown,uint _eq_sword, uint _eq_shield, uint _eq_helmet, bool _forSale) public;\r\n    function updateItem(uint _id,uint8 _itemType,uint8 _itemRarity,uint _attackPower,uint _defencePower,uint _cooldownReduction,uint _price,uint _onChampId,bool _onChamp,bool _forSale) public;\r\n\r\n    function getChampStats(uint256 _champId) public view returns(uint256,uint256,uint256);\r\n    function getChampsByOwner(address _owner) external view returns(uint256[]);\r\n    function getTokensForSale(bool _isTokenChamp) view external returns(uint256[]);\r\n    function getItemsByOwner(address _owner) external view returns(uint256[]);\r\n    function getTokenCount(bool _isTokenChamp) external view returns(uint);\r\n    function getTokenURIs(uint _tokenId, bool _isTokenChamp) public view returns(string);\r\n    function onlyApprovedOrOwnerOfToken(uint _id, address _msgsender, bool _isTokenChamp) external view returns(bool);\r\n    \r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address internal contractOwner;\r\n\r\n  constructor () internal {\r\n    if(contractOwner == address(0)){\r\n      contractOwner = msg.sender;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == contractOwner);\r\n    _;\r\n  }\r\n  \r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    contractOwner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC721 is Ownable, SupportsInterfaceWithLookup {\r\n\r\n  using AddressUtils for address;\r\n\r\n  string private _ERC721name = \"Champ\";\r\n  string private _ERC721symbol = \"MXC\";\r\n  bool private tokenIsChamp = true;\r\n  address private controllerAddress;\r\n  MyCryptoChampCore core;\r\n\r\n  function setCore(address newCoreAddress) public onlyOwner {\r\n    core = MyCryptoChampCore(newCoreAddress);\r\n  }\r\n\r\n  function setController(address _address) external onlyOwner {\r\n    controllerAddress = _address;\r\n  }\r\n\r\n  function emitTransfer(address _from, address _to, uint _tokenId) external {\r\n    require(msg.sender == controllerAddress);\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  //ERC721 START\r\n  event Transfer(address indexed _from, address indexed _to, uint indexed _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint indexed _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /**\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /**\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n   /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n  \r\n  bytes4 constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n      bytes4(keccak256('totalSupply()')) ^\r\n      bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n      bytes4(keccak256('tokenByIndex(uint256)'));\r\n  */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n     * 0x5b5e139f ===\r\n     *   bytes4(keccak256('name()')) ^\r\n     *   bytes4(keccak256('symbol()')) ^\r\n     *   bytes4(keccak256('tokenURI(uint256)'))\r\n  */\r\n\r\n   constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n\r\n  /**\r\n * @dev Guarantees msg.sender is owner of the given token\r\n * @param _tokenId uint ID of the token to validate its ownership belongs to msg.sender\r\n */\r\n  modifier onlyOwnerOf(uint _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n * @param _tokenId uint ID of the token to validate\r\n */\r\n  modifier canTransfer(uint _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n}\r\n\r\n  /**\r\n * @dev Gets the balance of the specified address\r\n * @param _owner address to query the balance of\r\n * @return uint representing the amount owned by the passed address\r\n */\r\n  function balanceOf(address _owner) public view returns (uint) {\r\n    require(_owner != address(0));\r\n    uint balance;\r\n    if(tokenIsChamp){\r\n      (,balance,,) = core.addressInfo(_owner);\r\n    }else{\r\n      (,,balance,) = core.addressInfo(_owner);\r\n    }\r\n    return balance;\r\n}\r\n\r\n  /**\r\n * @dev Gets the owner of the specified token ID\r\n * @param _tokenId uint ID of the token to query the owner of\r\n * @return owner address currently marked as the owner of the given token ID\r\n */\r\nfunction ownerOf(uint _tokenId) public view returns (address) {\r\n    address owner = core.tokenToOwner(tokenIsChamp,_tokenId);\r\n    require(owner != address(0));\r\n    return owner;\r\n}\r\n\r\n\r\n/**\r\n * @dev Returns whether the specified token exists\r\n * @param _tokenId uint ID of the token to query the existence of\r\n * @return whether the token exists\r\n */\r\nfunction exists(uint _tokenId) public view returns (bool) {\r\n    address owner = core.tokenToOwner(tokenIsChamp,_tokenId);\r\n    return owner != address(0);\r\n}\r\n\r\n/**\r\n * @dev Approves another address to transfer the given token ID\r\n * The zero address indicates there is no approved address.\r\n * There can only be one approved address per token at a given time.\r\n * Can only be called by the token owner or an approved operator.\r\n * @param _to address to be approved for the given token ID\r\n * @param _tokenId uint ID of the token to be approved\r\n */\r\nfunction approve(address _to, uint _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    core.setTokenApproval(_tokenId, _to,tokenIsChamp);\r\n    emit Approval(owner, _to, _tokenId);\r\n }\r\n\r\n/**\r\n * @dev Gets the approved address for a token ID, or zero if no address set\r\n * @param _tokenId uint ID of the token to query the approval of\r\n * @return address currently approved for the given token ID\r\n */\r\n  function getApproved(uint _tokenId) public view returns (address) {\r\n    return core.tokenApprovals(tokenIsChamp,_tokenId);\r\n  }\r\n\r\n/**\r\n * @dev Sets or unsets the approval of a given operator\r\n * An operator is allowed to transfer all tokens of the sender on their behalf\r\n * @param _to operator address to set the approval\r\n * @param _approved representing the status of the approval to be set\r\n */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    core.setTokenOperatorApprovals(msg.sender,_to,_approved,tokenIsChamp);\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n/**\r\n * @dev Tells whether an operator is approved by a given owner\r\n * @param _owner owner address which you want to query the approval of\r\n * @param _operator operator address which you want to query the approval of\r\n * @return bool whether the given operator is approved by the given owner\r\n */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return core.tokenOperatorApprovals(tokenIsChamp, _owner,_operator);\r\n}\r\n\r\n/**\r\n * @dev Returns whether the given spender can transfer a given token ID\r\n * @param _spender address of the spender to query\r\n * @param _tokenId uint ID of the token to be transferred\r\n * @return bool whether the msg.sender is approved for the given token ID,\r\n *  is an operator of the owner, or is the owner of the token\r\n */\r\nfunction isApprovedOrOwner(\r\n    address _spender,\r\n    uint _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Transfers the ownership of a given token ID to another address\r\n * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n * Requires the msg sender to be the owner, approved, or operator\r\n * @param _from current owner of the token\r\n * @param _to address to receive the ownership of the given token ID\r\n * @param _tokenId uint ID of the token to be transferred\r\n*/\r\nfunction transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    core.clearTokenApproval(_from, _tokenId, tokenIsChamp);\r\n    core.transferToken(_from, _to, _tokenId, tokenIsChamp);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n}\r\n\r\n/**\r\n * @dev Safely transfers the ownership of a given token ID to another address\r\n * If the target address is a contract, it must implement `onERC721Received`,\r\n * which is called upon a safe transfer, and return the magic value\r\n * `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`; otherwise,\r\n * the transfer is reverted.\r\n *\r\n * Requires the msg sender to be the owner, approved, or operator\r\n * @param _from current owner of the token\r\n * @param _to address to receive the ownership of the given token ID\r\n * @param _tokenId uint ID of the token to be transferred\r\n*/\r\nfunction safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n}\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\nfunction safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n}\r\n\r\n/**\r\n * @dev Internal function to invoke `onERC721Received` on a target address\r\n * The call is not executed if the target address is not a contract\r\n * @param _from address representing the previous owner of the given token ID\r\n * @param _to target address that will receive the tokens\r\n * @param _tokenId uint ID of the token to be transferred\r\n * @param _data bytes optional data to send along with the call\r\n * @return whether the call correctly returned the expected magic value\r\n */\r\nfunction checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n}\r\n\r\n  ///\r\n  /// ERC721Enumerable\r\n  ///\r\n  /// @notice Count NFTs tracked by this contract\r\n  /// @return A count of valid NFTs tracked by this contract, where each one of\r\n  ///  them has an assigned and queryable owner not equal to the zero address\r\n  function totalSupply() external view returns (uint){\r\n    return core.getTokenCount(tokenIsChamp);\r\n  }\r\n\r\n  /// @notice Enumerate valid NFTs\r\n  /// @dev Throws if `_index` >= `totalSupply()`.\r\n  /// @param _index A counter less than `totalSupply()`\r\n  /// @return The token identifier for the `_index`th NFT,\r\n  ///  (sort order not specified)\r\n  function tokenByIndex(uint _index) external view returns (uint){\r\n    uint tokenIndexesLength = this.totalSupply();\r\n    require(_index < tokenIndexesLength);\r\n    return _index;\r\n  }\r\n\r\n  \r\n  /// @notice Enumerate NFTs assigned to an owner\r\n  /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\r\n  ///  `_owner` is the zero address, representing invalid NFTs.\r\n  /// @param _owner An address where we are interested in NFTs owned by them\r\n  /// @param _index A counter less than `balanceOf(_owner)`\r\n  /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\r\n  ///   (sort order not specified)\r\n  function tokenOfOwnerByIndex(address _owner, uint _index) external view returns (uint){\r\n      require(_index >= balanceOf(_owner));\r\n      require(_owner!=address(0));\r\n      \r\n      uint[] memory tokens;\r\n      uint tokenId;\r\n      \r\n      if(tokenIsChamp){\r\n          tokens = core.getChampsByOwner(_owner);\r\n      }else{\r\n          tokens = core.getItemsByOwner(_owner);\r\n      }\r\n      \r\n      for(uint i = 0; i < tokens.length; i++){\r\n          if(i + 1 == _index){\r\n              tokenId = tokens[i];\r\n              break;\r\n          }\r\n      }\r\n      \r\n      return tokenId;\r\n  }\r\n  \r\n  \r\n  ///\r\n  /// ERC721Metadata\r\n  ///\r\n  /// @notice A descriptive name for a collection of NFTs in this contract\r\n  function name() external view returns (string _name){\r\n    return _ERC721name;\r\n  }\r\n\r\n  /// @notice An abbreviated name for NFTs in this contract\r\n  function symbol() external view returns (string _symbol){\r\n    return _ERC721symbol;\r\n  }\r\n\r\n  /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n  /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n  ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n  ///  Metadata JSON Schema\".\r\n  function tokenURI(uint _tokenId) external view returns (string){\r\n    require(exists(_tokenId));\r\n    return core.getTokenURIs(_tokenId,tokenIsChamp);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCoreAddress\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"ERC721","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d5407104bdef6502451c0950cab24a0fc5b03f5f2e666ee162c0a3c2efa765e3"}]}