{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Beneficiary.sol\r\n\r\n// solhint-disable-next-line\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/** @title Beneficiary */\r\ncontract Beneficiary is Ownable {\r\n    address public beneficiary;\r\n\r\n    constructor() public {\r\n        beneficiary = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the beneficiary address\r\n     * @param _beneficiary Address of the new beneficiary\r\n     */\r\n    function setBeneficiary(address _beneficiary) public onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n}\r\n\r\n// File: contracts/Affiliate.sol\r\n\r\n// solhint-disable-next-line\r\npragma solidity ^0.4.25;\r\n\r\n\r\n\r\n/** @title Affiliate */\r\ncontract Affiliate is Ownable {\r\n    mapping(address => bool) public canSetAffiliate;\r\n    mapping(address => address) public userToAffiliate;\r\n\r\n    /** @dev Allows an address to set the affiliate address for a user\r\n      * @param _setter The address that should be allowed\r\n      */\r\n    function setAffiliateSetter(address _setter) public onlyOwner {\r\n        canSetAffiliate[_setter] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the affiliate of a user\r\n     * @param _user user to set affiliate for\r\n     * @param _affiliate address to set\r\n     */\r\n    function setAffiliate(address _user, address _affiliate) public {\r\n        require(canSetAffiliate[msg.sender]);\r\n        if (userToAffiliate[_user] == address(0)) {\r\n            userToAffiliate[_user] = _affiliate;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/interfaces/ERC721.sol\r\n\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) ;\r\n    function transfer(address _to, uint256 _tokenId) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n// File: contracts/interfaces/PepeInterface.sol\r\n\r\ncontract PepeInterface is ERC721{\r\n    function cozyTime(uint256 _mother, uint256 _father, address _pepeReceiver) public returns (bool);\r\n    function getCozyAgain(uint256 _pepeId) public view returns(uint64);\r\n}\r\n\r\n// File: contracts/AuctionBase.sol\r\n\r\n// solhint-disable-next-line\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n/** @title AuctionBase */\r\ncontract AuctionBase is Beneficiary {\r\n    mapping(uint256 => PepeAuction) public auctions;//maps pepes to auctions\r\n    PepeInterface public pepeContract;\r\n    Affiliate public affiliateContract;\r\n    uint256 public fee = 37500; //in 1 10000th of a percent so 3.75% at the start\r\n    uint256 public constant FEE_DIVIDER = 1000000; //Perhaps needs better name?\r\n\r\n    struct PepeAuction {\r\n        address seller;\r\n        uint256 pepeId;\r\n        uint64 auctionBegin;\r\n        uint64 auctionEnd;\r\n        uint256 beginPrice;\r\n        uint256 endPrice;\r\n    }\r\n\r\n    event AuctionWon(uint256 indexed pepe, address indexed winner, address indexed seller);\r\n    event AuctionStarted(uint256 indexed pepe, address indexed seller);\r\n    event AuctionFinalized(uint256 indexed pepe, address indexed seller);\r\n\r\n    constructor(address _pepeContract, address _affiliateContract) public {\r\n        pepeContract = PepeInterface(_pepeContract);\r\n        affiliateContract = Affiliate(_affiliateContract);\r\n    }\r\n\r\n    /**\r\n     * @dev Return a pepe from a auction that has passed\r\n     * @param  _pepeId the id of the pepe to save\r\n     */\r\n    function savePepe(uint256 _pepeId) external {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(auctions[_pepeId].auctionEnd < now);//auction must have ended\r\n        require(pepeContract.transfer(auctions[_pepeId].seller, _pepeId));//transfer pepe back to seller\r\n\r\n        emit AuctionFinalized(_pepeId, auctions[_pepeId].seller);\r\n\r\n        delete auctions[_pepeId];//delete auction\r\n    }\r\n\r\n    /**\r\n     * @dev change the fee on pepe sales. Can only be lowerred\r\n     * @param _fee The new fee to set. Must be lower than current fee\r\n     */\r\n    function changeFee(uint256 _fee) external onlyOwner {\r\n        require(_fee < fee);//fee can not be raised\r\n        fee = _fee;\r\n    }\r\n\r\n    /**\r\n     * @dev Start a auction\r\n     * @param  _pepeId Pepe to sell\r\n     * @param  _beginPrice Price at which the auction starts\r\n     * @param  _endPrice Ending price of the auction\r\n     * @param  _duration How long the auction should take\r\n     */\r\n    function startAuction(uint256 _pepeId, uint256 _beginPrice, uint256 _endPrice, uint64 _duration) public {\r\n        require(pepeContract.transferFrom(msg.sender, address(this), _pepeId));\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(now > auctions[_pepeId].auctionEnd);//can only start new auction if no other is active\r\n\r\n        PepeAuction memory auction;\r\n\r\n        auction.seller = msg.sender;\r\n        auction.pepeId = _pepeId;\r\n        // solhint-disable-next-line not-rely-on-time\r\n        auction.auctionBegin = uint64(now);\r\n        // solhint-disable-next-line not-rely-on-time\r\n        auction.auctionEnd = uint64(now) + _duration;\r\n        require(auction.auctionEnd > auction.auctionBegin);\r\n        auction.beginPrice = _beginPrice;\r\n        auction.endPrice = _endPrice;\r\n\r\n        auctions[_pepeId] = auction;\r\n\r\n        emit AuctionStarted(_pepeId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev directly start a auction from the PepeBase contract\r\n     * @param  _pepeId Pepe to put on auction\r\n     * @param  _beginPrice Price at which the auction starts\r\n     * @param  _endPrice Ending price of the auction\r\n     * @param  _duration How long the auction should take\r\n     * @param  _seller The address selling the pepe\r\n     */\r\n    // solhint-disable-next-line max-line-length\r\n    function startAuctionDirect(uint256 _pepeId, uint256 _beginPrice, uint256 _endPrice, uint64 _duration, address _seller) public {\r\n        require(msg.sender == address(pepeContract)); //can only be called by pepeContract\r\n        //solhint-disable-next-line not-rely-on-time\r\n        require(now > auctions[_pepeId].auctionEnd);//can only start new auction if no other is active\r\n\r\n        PepeAuction memory auction;\r\n\r\n        auction.seller = _seller;\r\n        auction.pepeId = _pepeId;\r\n        // solhint-disable-next-line not-rely-on-time\r\n        auction.auctionBegin = uint64(now);\r\n        // solhint-disable-next-line not-rely-on-time\r\n        auction.auctionEnd = uint64(now) + _duration;\r\n        require(auction.auctionEnd > auction.auctionBegin);\r\n        auction.beginPrice = _beginPrice;\r\n        auction.endPrice = _endPrice;\r\n\r\n        auctions[_pepeId] = auction;\r\n\r\n        emit AuctionStarted(_pepeId, _seller);\r\n    }\r\n\r\n  /**\r\n   * @dev Calculate the current price of a auction\r\n   * @param  _pepeId the pepeID to calculate the current price for\r\n   * @return currentBid the current price for the auction\r\n   */\r\n    function calculateBid(uint256 _pepeId) public view returns(uint256 currentBid) {\r\n        PepeAuction storage auction = auctions[_pepeId];\r\n        // solhint-disable-next-line not-rely-on-time\r\n        uint256 timePassed = now - auctions[_pepeId].auctionBegin;\r\n\r\n        // If auction ended return auction end price.\r\n        // solhint-disable-next-line not-rely-on-time\r\n        if (now >= auction.auctionEnd) {\r\n            return auction.endPrice;\r\n        } else {\r\n            // Can be negative\r\n            int256 priceDifference = int256(auction.endPrice) - int256(auction.beginPrice);\r\n            // Always positive\r\n            int256 duration = int256(auction.auctionEnd) - int256(auction.auctionBegin);\r\n\r\n            // As already proven in practice by CryptoKitties:\r\n            //  timePassed -> 64 bits at most\r\n            //  priceDifference -> 128 bits at most\r\n            //  timePassed * priceDifference -> 64 + 128 bits at most\r\n            int256 priceChange = priceDifference * int256(timePassed) / duration;\r\n\r\n            // Will be positive, both operands are less than 256 bits\r\n            int256 price = int256(auction.beginPrice) + priceChange;\r\n\r\n            return uint256(price);\r\n        }\r\n    }\r\n\r\n  /**\r\n   * @dev collect the fees from the auction\r\n   */\r\n    function getFees() public {\r\n        beneficiary.transfer(address(this).balance);\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/PepeAuctionSale.sol\r\n\r\n// solhint-disable-next-line\r\npragma solidity ^0.4.19;\r\n\r\n\r\n\r\n//Most functionality is in the AuctionBase contract.\r\n//This contract is to buy pepes on the auction.\r\ncontract PepeAuctionSale is AuctionBase {\r\n  // solhint-disable-next-line\r\n    constructor(address _pepeContract, address _affiliateContract) AuctionBase(_pepeContract, _affiliateContract) public {\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Buy a pepe from the auction\r\n     * @param  _pepeId The id of the pepe to buy\r\n     */\r\n    function buyPepe(uint256 _pepeId) public payable {\r\n        PepeAuction storage auction = auctions[_pepeId];\r\n\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(now < auction.auctionEnd);// auction must be still going\r\n\r\n        uint256 price = calculateBid(_pepeId);\r\n        require(msg.value >= price); //must send enough ether\r\n        uint256 totalFee = price * fee / FEE_DIVIDER; //safe math needed?\r\n\r\n        //Send ETH to seller\r\n        auction.seller.transfer(price - totalFee);\r\n        //send ETH to beneficiary\r\n\r\n        // solhint-disable-next-line\r\n        if(affiliateContract.userToAffiliate(msg.sender) != address(0) && affiliateContract.userToAffiliate(msg.sender).send(totalFee / 2)) { //if user has affiliate\r\n            //nothing to do here. Just to suppress warning\r\n        }\r\n        //Send pepe to buyer\r\n        if (!pepeContract.transfer(msg.sender, _pepeId)) {\r\n            revert(); //can't complete transfer if this fails\r\n        }\r\n\r\n        emit AuctionWon(_pepeId, msg.sender, auction.seller);\r\n\r\n        if (msg.value > price) { //return ether send to much\r\n            msg.sender.transfer(msg.value - price);\r\n        }\r\n\r\n        delete auctions[_pepeId];//deletes auction\r\n    }\r\n\r\n    /**\r\n     * @dev Buy a pepe and send along affiliate address\r\n     * @param  _pepeId The id of the pepe to buy\r\n     * @param  _affiliate address of the affiliate to set\r\n     */\r\n    // solhint-disable-next-line func-order\r\n    function buyPepeAffiliated(uint256 _pepeId, address _affiliate) external payable {\r\n        affiliateContract.setAffiliate(msg.sender, _affiliate);\r\n        buyPepe(_pepeId);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"affiliateContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pepeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pepeId\",\"type\":\"uint256\"}],\"name\":\"calculateBid\",\"outputs\":[{\"name\":\"currentBid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"pepeId\",\"type\":\"uint256\"},{\"name\":\"auctionBegin\",\"type\":\"uint64\"},{\"name\":\"auctionEnd\",\"type\":\"uint64\"},{\"name\":\"beginPrice\",\"type\":\"uint256\"},{\"name\":\"endPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pepeId\",\"type\":\"uint256\"},{\"name\":\"_beginPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"startAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pepeId\",\"type\":\"uint256\"}],\"name\":\"savePepe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pepeId\",\"type\":\"uint256\"}],\"name\":\"buyPepe\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pepeId\",\"type\":\"uint256\"},{\"name\":\"_beginPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint64\"},{\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"startAuctionDirect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pepeId\",\"type\":\"uint256\"},{\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"buyPepeAffiliated\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_pepeContract\",\"type\":\"address\"},{\"name\":\"_affiliateContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pepe\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pepe\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pepe\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PepeAuctionSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000084ac94f17622241f313511b629e5e98f489ad6e400000000000000000000000008014573ff457d8e08d6fbf2813617def4f28e54","Library":"","SwarmSource":"bzzr://be17e679560c791ac20d0fac375f106649098c8b69346a82b692f0be893c61dc"}]}