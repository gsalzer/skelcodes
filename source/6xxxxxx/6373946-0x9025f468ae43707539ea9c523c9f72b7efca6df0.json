{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Project RESERVED\r\n * Here you can see the code with comments\r\n * Enjoy :)\r\n **/\r\npragma solidity ^0.4.24;\r\ncontract RESERVED {\r\n   \r\n    address owner; //address of contract creator\r\n    address investor; //address of user who just invested money to the contract\r\n    mapping (address => uint256) balances; //amount of investment for each address\r\n    mapping (address => uint256) timestamp; //time from the last payment for each address\r\n    mapping (address => uint16) rate; //rate for each address \r\n    mapping (address => uint256) referrers; //structure for checking whether investor had referrer or not\r\n    uint16 default_rate = 300; //default rate (minimal rate) for investors\r\n    uint16 max_rate = 1000; //maximal possible rate\r\n    uint256 eth = 1000000000000000000; //eth in wei\r\n    uint256 jackpot = 0; //amount of jackpot\r\n    uint256 random_number; //random number from 1 to 100\r\n    uint256 referrer_bonus; //amount of referrer bonus\r\n    uint256 deposit; //amount of investment\r\n    uint256 day = 86400; //seconds in 24 hours\r\n    bytes msg_data; //referrer address\r\n    \r\n    //Store owner as a person created that contract\r\n    constructor() public { owner = msg.sender;}\r\n    \r\n    //Function calls in the moment of investment\r\n    function() external payable{\r\n        \r\n        deposit = msg.value; //amount of investment\r\n        \r\n        investor = msg.sender; //address of investor\r\n        \r\n        msg_data = bytes(msg.data); //address of referrer\r\n        \r\n        owner.transfer(deposit / 10); //transfers 10% to the advertisement fund\r\n        \r\n        tryToWin(); //jackpot\r\n        \r\n        sendPayment(); //sends payment to investors\r\n        \r\n        updateRate(); //updates rates of investors depending on amount of investment\r\n        \r\n        upgradeReferrer(); //sends bonus to referrers and upgrates their rates, also increases the rate of referral\r\n        \r\n        \r\n    }\r\n    \r\n    //Collects jackpot and sends it to lucky investor\r\n    function tryToWin() internal{\r\n        random_number = uint(blockhash(block.number-1))%100 + 1;\r\n        if (deposit >= (eth / 10) && random_number<(deposit/(eth / 10) + 1) && jackpot>0) {\r\n            investor.transfer(jackpot);\r\n            jackpot = deposit / 20;\r\n        }\r\n        else jackpot += deposit / 20;\r\n    }\r\n    \r\n    //Sends payment to investor\r\n    function sendPayment() internal{\r\n        if (balances[investor] != 0){\r\n            uint256 paymentAmount = balances[investor]*rate[investor]/10000*(now-timestamp[investor])/day;\r\n            investor.transfer(paymentAmount);\r\n        }\r\n        timestamp[investor] = now;\r\n        balances[investor] += deposit;\r\n    }\r\n    \r\n    //Assigns a rate depending on the amount of the deposit\r\n    function updateRate() internal{\r\n        require (balances[investor]>0);\r\n        if (balances[investor]>=(10*eth) && rate[investor]<default_rate+75){\r\n                    rate[investor]=default_rate+75;\r\n                }\r\n                else if (balances[investor]>=(5*eth) && rate[investor]<default_rate+50){\r\n                        rate[investor]=default_rate+50;\r\n                    }\r\n                    else if (balances[investor]>=eth && rate[investor]<default_rate+25){\r\n                            rate[investor]=default_rate+25;\r\n                        }\r\n                        else if (rate[investor]<default_rate){\r\n                                rate[investor]=default_rate;\r\n                            }\r\n    }\r\n    \r\n    //Sends bonus to referrers and upgrates their rates, also increases the rate of referral\r\n    function upgradeReferrer() internal{\r\n        if(msg_data.length == 20 && referrers[investor] == 0) {\r\n            address referrer = bytesToAddress(msg_data);\r\n            if(referrer != investor && balances[referrer]>0){\r\n                referrers[investor] = 1;\r\n                rate[investor] += 50; \r\n                referrer_bonus = deposit * rate[referrer] / 10000;\r\n                referrer.transfer(referrer_bonus); \r\n                if(rate[referrer]<max_rate){\r\n                    if (deposit >= 10*eth){\r\n                        rate[referrer] = rate[referrer] + 100;\r\n                    }\r\n                    else if (deposit >= 3*eth){\r\n                            rate[referrer] = rate[referrer] + 50;\r\n                        }\r\n                        else if (deposit >= eth / 2){\r\n                                rate[referrer] = rate[referrer] + 25;\r\n                            }\r\n                            else if (deposit >= eth / 10){\r\n                                    rate[referrer] = rate[referrer] + 10;\r\n                                }\r\n                }\r\n            }\r\n        }    \r\n        referrers[investor] = 1; //Protection from the writing referrer address with the next investment\r\n    }\r\n    \r\n    //Transmits bytes to address\r\n    function bytesToAddress(bytes source) internal pure returns(address) {\r\n        uint result;\r\n        uint mul = 1;\r\n        for(uint i = 20; i > 0; i--) {\r\n            result += uint8(source[i-1])*mul;\r\n            mul = mul*256;\r\n        }\r\n        return address(result);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"RESERVED","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://abfec8cac8b2bf0a095cd06df5eb8ca747a216104408f57853749e222c478e64"}]}