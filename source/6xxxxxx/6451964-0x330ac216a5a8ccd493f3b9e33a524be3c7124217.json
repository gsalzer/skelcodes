{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Bonds {\r\n    /*=================================\r\n    =        MODIFIERS        =\r\n    =================================*/\r\n\r\n    modifier onlyOwner(){\r\n\r\n        require(msg.sender == dev);\r\n        _;\r\n    }\r\n\r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onBondPurchase(\r\n        address customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 bond,\r\n        uint256 newPrice\r\n    );\r\n\r\n    event onWithdraw(\r\n        address customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    // ERC20\r\n    event Transfer(\r\n        address from,\r\n        address to,\r\n        uint256 bond\r\n    );\r\n\r\n\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"NASDAQBONDS\";\r\n    string public symbol = \"BOND\";\r\n\r\n    uint8 constant public nsDivRate = 10;\r\n    uint8 constant public devDivRate = 5;\r\n    uint8 constant public ownerDivRate = 50;\r\n    uint8 constant public distDivRate = 40;\r\n    uint8 constant public referralRate = 5;\r\n\r\n    uint8 constant public decimals = 18;\r\n\r\n    uint public totalBondValue = 9e18;\r\n\r\n\r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n\r\n    mapping(uint => address) internal bondOwner;\r\n    mapping(uint => uint) public bondPrice;\r\n    mapping(uint => uint) internal bondPreviousPrice;\r\n    mapping(address => uint) internal ownerAccounts;\r\n    mapping(uint => uint) internal totalBondDivs;\r\n    mapping(uint => string) internal bondName;\r\n\r\n    uint bondPriceIncrement = 110;   //10% Price Increases\r\n    uint totalDivsProduced = 0;\r\n\r\n    uint public maxBonds = 200;\r\n\r\n    uint public initialPrice = 1e17;   //0.1 ETH\r\n\r\n    uint public nextAvailableBond;\r\n\r\n    bool allowReferral = false;\r\n\r\n    bool allowAutoNewBond = false;\r\n\r\n    uint public bondFund = 0;\r\n\r\n    address dev;\r\n    address fundsDividendAddr;\r\n    address promoter;\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --\r\n    */\r\n    constructor()\r\n        public\r\n    {\r\n        dev = msg.sender;\r\n        fundsDividendAddr = 0xd2e32AFc2949d37A221FBAe53DadF48270926F26;\r\n        promoter = 0xC558895aE123BB02b3c33164FdeC34E9Fb66B660;\r\n        nextAvailableBond = 13;\r\n\r\n        bondOwner[1] = promoter;\r\n        bondPrice[1] = 2e18;//initialPrice;\r\n        bondPreviousPrice[1] = 0;\r\n\r\n        bondOwner[2] = promoter;\r\n        bondPrice[2] = 15e17;//initialPrice;\r\n        bondPreviousPrice[2] = 0;\r\n\r\n        bondOwner[3] = promoter;\r\n        bondPrice[3] = 10e17;//initialPrice;\r\n        bondPreviousPrice[3] = 0;\r\n\r\n        bondOwner[4] = promoter;\r\n        bondPrice[4] = 9e17;//initialPrice;\r\n        bondPreviousPrice[4] = 0;\r\n\r\n        bondOwner[5] = promoter;\r\n        bondPrice[5] = 8e17;//initialPrice;\r\n        bondPreviousPrice[5] = 0;\r\n\r\n        bondOwner[6] = promoter;\r\n        bondPrice[6] = 7e17;//initialPrice;\r\n        bondPreviousPrice[6] = 0;\r\n\r\n        bondOwner[7] = dev;\r\n        bondPrice[7] = 6e17;//initialPrice;\r\n        bondPreviousPrice[7] = 0;\r\n\r\n        bondOwner[8] = dev;\r\n        bondPrice[8] = 5e17;//initialPrice;\r\n        bondPreviousPrice[8] = 0;\r\n\r\n        bondOwner[9] = dev;\r\n        bondPrice[9] = 4e17;//initialPrice;\r\n        bondPreviousPrice[9] = 0;\r\n\r\n        bondOwner[10] = dev;\r\n        bondPrice[10] = 3e17;//initialPrice;\r\n        bondPreviousPrice[10] = 0;\r\n\r\n        bondOwner[11] = dev;\r\n        bondPrice[11] = 2e17;//initialPrice;\r\n        bondPreviousPrice[11] = 0;\r\n\r\n        bondOwner[12] = dev;\r\n        bondPrice[12] = 1e17;//initialPrice;\r\n        bondPreviousPrice[12] = 0;\r\n    }\r\n\r\n    function addTotalBondValue(uint _new, uint _old)\r\n    internal\r\n    {\r\n        //uint newPrice = SafeMath.div(SafeMath.mul(_new,bondPriceIncrement),100);\r\n        totalBondValue = SafeMath.add(totalBondValue, SafeMath.sub(_new,_old));\r\n    }\r\n\r\n    function buy(uint _bond, address _referrer)\r\n        public\r\n        payable\r\n\r\n    {\r\n        require(_bond <= nextAvailableBond);\r\n        require(msg.value >= bondPrice[_bond]);\r\n        require(msg.sender != bondOwner[_bond]);\r\n\r\n        uint _newPrice = SafeMath.div(SafeMath.mul(msg.value,bondPriceIncrement),100);\r\n\r\n         //Determine the total dividends\r\n        uint _baseDividends = msg.value - bondPreviousPrice[_bond];\r\n        totalDivsProduced = SafeMath.add(totalDivsProduced, _baseDividends);\r\n\r\n        uint _nsDividends = SafeMath.div(SafeMath.mul(_baseDividends, nsDivRate),100);\r\n        uint _ownerDividends = SafeMath.div(SafeMath.mul(_baseDividends,ownerDivRate),100);\r\n\r\n        totalBondDivs[_bond] = SafeMath.add(totalBondDivs[_bond],_ownerDividends);\r\n        _ownerDividends = SafeMath.add(_ownerDividends,bondPreviousPrice[_bond]);\r\n\r\n        uint _distDividends = SafeMath.div(SafeMath.mul(_baseDividends,distDivRate),100);\r\n\r\n\r\n        // If referrer is left blank,send to FUND address\r\n        if (allowReferral && _referrer != msg.sender) {\r\n            uint _referralDividends = SafeMath.div(SafeMath.mul(_baseDividends, referralRate), 100);\r\n            _distDividends = SafeMath.sub(_distDividends, _referralDividends);\r\n\r\n            if (_referrer == 0x0) {\r\n                fundsDividendAddr.transfer(_referralDividends);\r\n            }\r\n            else {\r\n                ownerAccounts[_referrer] = SafeMath.add(ownerAccounts[_referrer], _referralDividends);\r\n            }\r\n        }\r\n\r\n        //distribute dividends to accounts\r\n        address _previousOwner = bondOwner[_bond];\r\n        address _newOwner = msg.sender;\r\n\r\n        ownerAccounts[_previousOwner] = SafeMath.add(ownerAccounts[_previousOwner],_ownerDividends);\r\n        fundsDividendAddr.transfer(_nsDividends);\r\n\r\n        bondOwner[_bond] = _newOwner;\r\n\r\n        distributeYield(_distDividends);\r\n        distributeBondFund();\r\n        //Increment the bond Price\r\n        bondPreviousPrice[_bond] = msg.value;\r\n        bondPrice[_bond] = _newPrice;\r\n        addTotalBondValue(_newPrice, bondPreviousPrice[_bond]);\r\n\r\n        emit onBondPurchase(msg.sender, msg.value, _bond, SafeMath.div(SafeMath.mul(msg.value,bondPriceIncrement),100));\r\n\r\n    }\r\n\r\n    function distributeYield(uint _distDividends) internal\r\n\r\n    {\r\n        uint counter = 1;\r\n\r\n        while (counter < nextAvailableBond) {\r\n\r\n            uint _distAmountLocal = SafeMath.div(SafeMath.mul(_distDividends, bondPrice[counter]),totalBondValue);\r\n            ownerAccounts[bondOwner[counter]] = SafeMath.add(ownerAccounts[bondOwner[counter]],_distAmountLocal);\r\n            totalBondDivs[counter] = SafeMath.add(totalBondDivs[counter],_distAmountLocal);\r\n            counter = counter + 1;\r\n        }\r\n\r\n    }\r\n\r\n    function distributeBondFund() internal\r\n\r\n    {\r\n        if(bondFund > 0){\r\n            uint counter = 1;\r\n\r\n            while (counter < nextAvailableBond) {\r\n\r\n                uint _distAmountLocal = SafeMath.div(SafeMath.mul(bondFund, bondPrice[counter]),totalBondValue);\r\n                ownerAccounts[bondOwner[counter]] = SafeMath.add(ownerAccounts[bondOwner[counter]],_distAmountLocal);\r\n                totalBondDivs[counter] = SafeMath.add(totalBondDivs[counter],_distAmountLocal);\r\n                counter = counter + 1;\r\n            }\r\n            bondFund = 0;\r\n        }\r\n    }\r\n\r\n    function extDistributeBondFund() public\r\n    onlyOwner()\r\n    {\r\n        if(bondFund > 0){\r\n            uint counter = 1;\r\n\r\n            while (counter < nextAvailableBond) {\r\n\r\n                uint _distAmountLocal = SafeMath.div(SafeMath.mul(bondFund, bondPrice[counter]),totalBondValue);\r\n                ownerAccounts[bondOwner[counter]] = SafeMath.add(ownerAccounts[bondOwner[counter]],_distAmountLocal);\r\n                totalBondDivs[counter] = SafeMath.add(totalBondDivs[counter],_distAmountLocal);\r\n                counter = counter + 1;\r\n            }\r\n            bondFund = 0;\r\n        }\r\n    }\r\n\r\n\r\n    function withdraw()\r\n\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        require(ownerAccounts[_customerAddress] > 0);\r\n        uint _dividends = ownerAccounts[_customerAddress];\r\n        ownerAccounts[_customerAddress] = 0;\r\n        _customerAddress.transfer(_dividends);\r\n        // fire event\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    function withdrawPart(uint _amount)\r\n\r\n        public\r\n        onlyOwner()\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        require(ownerAccounts[_customerAddress] > 0);\r\n        require(_amount <= ownerAccounts[_customerAddress]);\r\n        ownerAccounts[_customerAddress] = SafeMath.sub(ownerAccounts[_customerAddress],_amount);\r\n        _customerAddress.transfer(_amount);\r\n        // fire event\r\n        emit onWithdraw(_customerAddress, _amount);\r\n    }\r\n\r\n     // Fallback function: add funds to the addional distibution amount.   This is what will be contributed from the exchange\r\n     // and other contracts\r\n\r\n    function()\r\n        payable\r\n        public\r\n    {\r\n        uint devAmount = SafeMath.div(SafeMath.mul(devDivRate,msg.value),100);\r\n        uint bondAmount = msg.value - devAmount;\r\n        bondFund = SafeMath.add(bondFund, bondAmount);\r\n        ownerAccounts[dev] = SafeMath.add(ownerAccounts[dev], devAmount);\r\n    }\r\n\r\n    /**\r\n     * Transfer bond to another address\r\n     */\r\n    function transfer(address _to, uint _bond )\r\n\r\n        public\r\n    {\r\n        require(bondOwner[_bond] == msg.sender);\r\n\r\n        bondOwner[_bond] = _to;\r\n\r\n        emit Transfer(msg.sender, _to, _bond);\r\n\r\n    }\r\n\r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\r\n    /**\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string _name)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string _symbol)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setInitialPrice(uint _price)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        initialPrice = _price;\r\n    }\r\n\r\n    function setMaxbonds(uint _bond)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        maxBonds = _bond;\r\n    }\r\n\r\n    function setBondPrice(uint _bond, uint _price)   //Allow the changing of a bond price owner if the dev owns it\r\n        onlyOwner()\r\n        public\r\n    {\r\n        require(bondOwner[_bond] == dev);\r\n        bondPrice[_bond] = _price;\r\n    }\r\n\r\n    function addNewbond(uint _price)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        require(nextAvailableBond < maxBonds);\r\n        bondPrice[nextAvailableBond] = _price;\r\n        bondOwner[nextAvailableBond] = dev;\r\n        totalBondDivs[nextAvailableBond] = 0;\r\n        bondPreviousPrice[nextAvailableBond] = 0;\r\n        nextAvailableBond = nextAvailableBond + 1;\r\n        addTotalBondValue(_price, 0);\r\n\r\n    }\r\n\r\n    function setAllowReferral(bool _allowReferral)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        allowReferral = _allowReferral;\r\n    }\r\n\r\n    function setAutoNewbond(bool _autoNewBond)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        allowAutoNewBond = _autoNewBond;\r\n    }\r\n\r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n\r\n\r\n    function getMyBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return ownerAccounts[msg.sender];\r\n    }\r\n\r\n    function getOwnerBalance(address _bondOwner)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(msg.sender == dev);\r\n        return ownerAccounts[_bondOwner];\r\n    }\r\n\r\n    function getBondPrice(uint _bond)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(_bond <= nextAvailableBond);\r\n        return bondPrice[_bond];\r\n    }\r\n\r\n    function getBondOwner(uint _bond)\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        require(_bond <= nextAvailableBond);\r\n        return bondOwner[_bond];\r\n    }\r\n\r\n    function gettotalBondDivs(uint _bond)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(_bond <= nextAvailableBond);\r\n        return totalBondDivs[_bond];\r\n    }\r\n\r\n    function getTotalDivsProduced()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n\r\n        return totalDivsProduced;\r\n    }\r\n\r\n    function getBondDivShare(uint _bond)\r\n    public\r\n    view\r\n    returns(uint)\r\n    {\r\n        require(_bond <= nextAvailableBond);\r\n        return SafeMath.div(SafeMath.mul(bondPrice[_bond],10000),totalBondValue);\r\n    }\r\n\r\n    function getTotalBondValue()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n\r\n        return totalBondValue;\r\n    }\r\n\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address (this).balance;\r\n    }\r\n\r\n    function getNextAvailableBond()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return nextAvailableBond;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"getBondDivShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nsDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextAvailableBond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBondValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextAvailableBond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addNewbond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"getBondPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBondValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowReferral\",\"type\":\"bool\"}],\"name\":\"setAllowReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"extDistributeBondFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"setMaxbonds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bondOwner\",\"type\":\"address\"}],\"name\":\"getOwnerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_autoNewBond\",\"type\":\"bool\"}],\"name\":\"setAutoNewbond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bondFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setInitialPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setBondPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalDivsProduced\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"getBondOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"gettotalBondDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBonds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bond\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"onBondPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Bonds","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://040fdfe90752caa72e79f943d639aaa6aa95033e2496a5f2e0f9a028758cdba0"}]}