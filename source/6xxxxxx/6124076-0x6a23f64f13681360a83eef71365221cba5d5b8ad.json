{"status":"1","message":"OK","result":[{"SourceCode":"// Ethertote - Reward/Recogniton contract\r\n// 09.08.18 \r\n//\r\n// ----------------------------------------------------------------------------\r\n// Overview\r\n// ----------------------------------------------------------------------------\r\n//\r\n// There are various individuals we would like to reward over the coming \r\n// weeks with TOTE tokens. Admins will add an ethereum wallet address and a \r\n// number of tokens for each individual to this smart contract. \r\n// The individual simply needs to click on the claim button and claim their tokens.\r\n//\r\n// This function will open immediately after the completion of the token sale, and will \r\n// remain open for 60 days, after which time admin will be able to recover any \r\n// unclaimed tokens \r\n// ----------------------------------------------------------------------------\r\n\r\n\r\npragma solidity 0.4.24;\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// SafeMath Library \r\n///////////////////////////////////////////////////////////////////////////////\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// EXTERNAL CONTRACTS\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract EthertoteToken {\r\n    function thisContractAddress() public pure returns (address) {}\r\n    function balanceOf(address) public pure returns (uint256) {}\r\n    function transfer(address, uint) public {}\r\n}\r\n\r\ncontract TokenSale {\r\n    function closingTime() public pure returns (uint) {}\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// MAIN CONTRACT\r\n\r\ncontract Reward {\r\n        using SafeMath for uint256;\r\n        \r\n    // VARIABLES\r\n    address public admin;\r\n    address public thisContractAddress;\r\n    address public tokenContractAddress = 0x42be9831FFF77972c1D0E1eC0aA9bdb3CaA04D47;\r\n    \r\n    address public tokenSaleAddress = 0x1C49d3c4895E7b136e8F8b804F1279068d4c3c96;\r\n    \r\n    uint public contractCreationBlockNumber;\r\n    uint public contractCreationBlockTime;\r\n    \r\n    uint public tokenSaleClosingTime;\r\n    \r\n    bool public claimTokenWindowOpen;\r\n    uint public windowOpenTime;\r\n  \r\n    // ENUM\r\n    EthertoteToken token;       \r\n    TokenSale tokensale;\r\n    \r\n\r\n    // EVENTS \r\n\tevent Log(string text);\r\n        \r\n    // MODIFIERS\r\n    modifier onlyAdmin { \r\n        require(\r\n            msg.sender == admin\r\n        ); \r\n        _; \r\n    }\r\n        \r\n    modifier onlyContract { \r\n        require(\r\n            msg.sender == admin ||\r\n            msg.sender == thisContractAddress\r\n        ); \r\n        _; \r\n    }   \r\n        \r\n \r\n    // CONSTRUCTOR\r\n    constructor() public payable {\r\n        admin = msg.sender;\r\n        thisContractAddress = address(this);\r\n        contractCreationBlockNumber = block.number;\r\n        token = EthertoteToken(tokenContractAddress);\r\n        tokensale = TokenSale(tokenSaleAddress);\r\n\r\n\t    emit Log(\"Reward contract created.\");\r\n    }\r\n    \r\n    // FALLBACK FUNCTION\r\n    function () private payable {}\r\n    \r\n        \r\n// ----------------------------------------------------------------------------\r\n// Admin Only Functions\r\n// ----------------------------------------------------------------------------\r\n\r\n    // STRUCT \r\n    Claimant[] public claimants;  // special struct variable\r\n    \r\n        struct Claimant {\r\n        address claimantAddress;\r\n        uint claimantAmount;\r\n        bool claimantHasClaimed;\r\n    }\r\n\r\n\r\n    // Admin fuction to add claimants\r\n    function addClaimant(address _address, uint _amount, bool) onlyAdmin public {\r\n            Claimant memory newClaimant = Claimant ({\r\n                claimantAddress: _address,\r\n                claimantAmount: _amount,\r\n                claimantHasClaimed: false\r\n                });\r\n                claimants.push(newClaimant);\r\n    }\r\n    \r\n    \r\n    function adjustEntitlement(address _address, uint _amount) onlyAdmin public {\r\n        for (uint i = 0; i < claimants.length; i++) {\r\n            if(_address == claimants[i].claimantAddress) {\r\n                claimants[i].claimantAmount = _amount;\r\n            }\r\n            else revert();\r\n            }  \r\n    }\r\n    \r\n    // recover tokens tha were not claimed \r\n    function recoverTokens() onlyAdmin public {\r\n        require(now < (showTokenSaleClosingTime().add(61 days)));\r\n        token.transfer(admin, token.balanceOf(thisContractAddress));\r\n    }\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// This method can be used by admin to extract Eth accidentally \r\n// sent to this smart contract.\r\n// ----------------------------------------------------------------------------\r\n    function ClaimEth() onlyAdmin public {\r\n        address(admin).transfer(address(this).balance);\r\n\r\n    }  \r\n    \r\n    \r\n    \r\n// ----------------------------------------------------------------------------\r\n// PUBLIC FUNCTION - To be called by people claiming reward \r\n// ----------------------------------------------------------------------------\r\n\r\n    // callable by claimant after token sale is completed\r\n    function claimTokens() public {\r\n        require(now > showTokenSaleClosingTime());\r\n        require(now < (showTokenSaleClosingTime().add(60 days)));\r\n          for (uint i = 0; i < claimants.length; i++) {\r\n            if(msg.sender == claimants[i].claimantAddress) {\r\n                require(claimants[i].claimantHasClaimed == false);\r\n                token.transfer(msg.sender, claimants[i].claimantAmount);\r\n                claimants[i].claimantHasClaimed = true;\r\n            }\r\n          }\r\n    }\r\n    \r\n    \r\n// ----------------------------------------------------------------------------\r\n// public view Functions\r\n// ----------------------------------------------------------------------------\r\n    \r\n    // check claim entitlement\r\n    function checkClaimEntitlement() public view returns(uint) {\r\n        for (uint i = 0; i < claimants.length; i++) {\r\n            if(msg.sender == claimants[i].claimantAddress) {\r\n                require(claimants[i].claimantHasClaimed == false);\r\n                return claimants[i].claimantAmount;\r\n            }\r\n            else return 0;\r\n        }  \r\n    }\r\n    \r\n    \r\n    // check claim entitlement of any wallet\r\n    function checkClaimEntitlementofWallet(address _address) public view returns(uint) {\r\n        for (uint i = 0; i < claimants.length; i++) {\r\n            if(_address == claimants[i].claimantAddress) {\r\n                require(claimants[i].claimantHasClaimed == false);\r\n                return claimants[i].claimantAmount;\r\n            }\r\n            else return 0;\r\n        }  \r\n    }\r\n    \r\n    \r\n    \r\n    // check Eth balance of this contract\r\n    function thisContractBalance() public view returns(uint) {\r\n      return address(this).balance;\r\n    }\r\n\r\n    // check balance of this smart contract\r\n    function thisContractTokenBalance() public view returns(uint) {\r\n      return token.balanceOf(thisContractAddress);\r\n    }\r\n\r\n\r\n    function showTokenSaleClosingTime() public view returns(uint) {\r\n        return tokensale.closingTime();\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"addClaimant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleClosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkClaimEntitlementofWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ClaimEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adjustEntitlement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisContractTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractCreationBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimTokenWindowOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showTokenSaleClosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkClaimEntitlement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"windowOpenTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractCreationBlockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimants\",\"outputs\":[{\"name\":\"claimantAddress\",\"type\":\"address\"},{\"name\":\"claimantAmount\",\"type\":\"uint256\"},{\"name\":\"claimantHasClaimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"}]","ContractName":"Reward","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1a06c794d166da7e7a1d4a796bf0d5271d1d4bc2d3b309efc372760d41beb74d"}]}