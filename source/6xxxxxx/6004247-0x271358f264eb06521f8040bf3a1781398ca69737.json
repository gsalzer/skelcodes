{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'ExToke.com' Crowdsale contract\r\n//\r\n// Admin       \t : 0xEd86f5216BCAFDd85E5875d35463Aca60925bF16\r\n// fees      \t : zero (0)\r\n// Start/End Time: None\r\n// ExchangeRate  : 1 Token = 0.000001 ETH;\r\n//\r\n// Copyright (c) ExToke.com. The MIT Licence.\r\n// Contract crafted by: GDO Infotech Pvt Ltd (https://GDO.co.in) \r\n// ----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @title SafeMath\r\n     * @dev Math operations with safety checks that throw on error\r\n     */\r\n    library SafeMath {\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n      }\r\n    \r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n      }\r\n    \r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n      }\r\n    \r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n      }\r\n    }\r\n    \r\n    contract owned {\r\n        address public owner;\r\n    \tusing SafeMath for uint256;\r\n    \t\r\n        constructor() public {\r\n            owner = 0xEd86f5216BCAFDd85E5875d35463Aca60925bF16;\r\n        }\r\n    \r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n    \r\n        function transferOwnership(address newOwner) onlyOwner public {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    \r\n    interface token {\r\n    function transfer(address receiver, uint amount) external;\r\n    }\r\n    \r\n    contract ExTokeCrowdSale2 is owned {\r\n        // Public variables of the token\r\n        using SafeMath for uint256;\r\n\t\tuint256 public ExchangeRate=0.000001 * (1 ether);\r\n        token public tokenReward;\r\n        \r\n\t\t// This generates a public event on the blockchain that will notify clients\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        \r\n        constructor (\r\n        address addressOfTokenUsedAsReward\r\n        ) public {\r\n        tokenReward = token(addressOfTokenUsedAsReward);\r\n        }\r\n        function () payable public{\r\n            uint256 ethervalue=msg.value;\r\n            uint256 tokenAmount=ethervalue.div(ExchangeRate);\r\n            tokenReward.transfer(msg.sender, tokenAmount.mul(1 ether));\t\t\t// makes the transfers\r\n\t\t\towner.transfer(msg.value);\t//transfer the fund to admin\r\n        }\r\n        \r\n        function withdrawEtherManually()onlyOwner public{\r\n\t\t    require(msg.sender == owner); \r\n\t\t\tuint256 amount=address(this).balance;\r\n\t\t\towner.transfer(amount);\r\n\t\t}\r\n\t\t\r\n        function withdrawTokenManually(uint256 tokenAmount) onlyOwner public{\r\n            require(msg.sender == owner);\r\n            tokenReward.transfer(msg.sender,tokenAmount);\r\n        }\r\n        \r\n        function setExchangeRate(uint256 NewExchangeRate) onlyOwner public {\r\n            require(msg.sender == owner);\r\n\t\t\tExchangeRate=NewExchangeRate;\r\n        }\r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEtherManually\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenManually\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"NewExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ExTokeCrowdSale2","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000028925299ee1edd8fd68316eaa64b651456694f0f","Library":"","SwarmSource":"bzzr://9b99580f082ce1b432bbb1dc7e4de3229305bdcc6da53ff9fac453c4ef1b5a8c"}]}