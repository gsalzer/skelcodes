{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address internal owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title TradePlaceCrowdsale\r\n * @dev TradePlaceCrowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them EXTP tokens based\r\n * on a EXTP token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  function burnTokens(uint256 _unsoldTokens) onlyOwner public returns (bool) {\r\n    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Med-h Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale is Ownable, Pausable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   *  @MintableToken token - Token Object\r\n   *  @address wallet - Wallet Address\r\n   *  @uint256 rate - Tokens per Ether\r\n   *  @uint256 weiRaised - Total funds raised in Ethers\r\n  */\r\n  MintableToken internal token;\r\n  address internal wallet;\r\n  uint256 public rate;\r\n  uint256 internal weiRaised;\r\n\r\n /**\r\n    *  @uint256 preICOstartTime - pre ICO Start Time\r\n    *  @uint256 preICOEndTime - pre ICO End Time\r\n    *  @uint256 ICOstartTime - ICO Start Time\r\n    *  @uint256 ICOEndTime - ICO End Time\r\n    */\r\n    uint256 public preICOstartTime;\r\n    uint256 public preICOEndTime;\r\n  \r\n    uint256 public ICOstartTime;\r\n    uint256 public ICOEndTime;\r\n    \r\n    // Weeks in UTC\r\n    uint public StageOne;\r\n    uint public StageTwo;\r\n    uint public StageThree;\r\n    uint public StageFour;\r\n\r\n    /**\r\n    *  @uint preIcoBonus \r\n    *  @uint StageOneBonus \r\n    *  @uint StageTwoBonus\r\n    *  @uint StageThreeBonus\r\n    *  @uint StageFourBonus \r\n    */\r\n    uint public StageOneBonus;\r\n    uint public StageTwoBonus;\r\n    uint public StageThreeBonus;\r\n    uint public StageFourBonus;\r\n\r\n    /**\r\n    *  @uint256 totalSupply - Total supply of tokens  ~ 500,000,000 EXTP \r\n    *  @uint256 publicSupply - Total public Supply  ~ 20 percent\r\n    *  @uint256 preIcoSupply - Total PreICO Supply from Public Supply ~ 10 percent\r\n    *  @uint256 icoSupply - Total ICO Supply from Public Supply ~ 10 percent\r\n    *  @uint256 bountySupply - Total Bounty Supply ~ 10 percent\r\n    *  @uint256 reserveSupply - Total Reserve Supply ~ 20 percent\r\n    *  @uint256 advisorSupply - Total Advisor Supply ~ 10 percent\r\n    *  @uint256 founderSupply - Total Founder Supply ~ 20 percent\r\n    *  @uint256 teamSupply - Total team Supply ~ 10 percent\r\n    *  @uint256 rewardSupply - Total reward Supply ~ 10 percent\r\n    */\r\n    uint256 public totalSupply = SafeMath.mul(500000000, 1 ether); // 500000000\r\n    uint256 public publicSupply = SafeMath.mul(100000000, 1 ether);\r\n    uint256 public preIcoSupply = SafeMath.mul(50000000, 1 ether);                     \r\n    uint256 public icoSupply = SafeMath.mul(50000000, 1 ether);\r\n\r\n    uint256 public bountySupply = SafeMath.mul(50000000, 1 ether);\r\n    uint256 public reserveSupply = SafeMath.mul(100000000, 1 ether);\r\n    uint256 public advisorSupply = SafeMath.mul(50000000, 1 ether);\r\n    uint256 public founderSupply = SafeMath.mul(100000000, 1 ether);\r\n    uint256 public teamSupply = SafeMath.mul(50000000, 1 ether);\r\n    uint256 public rewardSupply = SafeMath.mul(50000000, 1 ether);\r\n  \r\n    /**\r\n    *  @uint256 advisorTimeLock - Advisor Timelock \r\n    *  @uint256 founderfounderTimeLock - Founder and Team Timelock \r\n    *  @uint256 reserveTimeLock - Company Reserved Timelock \r\n    *  @uint256 reserveTimeLock - Team Timelock \r\n    */\r\n    uint256 public founderTimeLock;\r\n    uint256 public advisorTimeLock;\r\n    uint256 public reserveTimeLock;\r\n    uint256 public teamTimeLock;\r\n\r\n    // count the number of function calls\r\n    uint public founderCounter = 0; // internal\r\n    uint public teamCounter = 0;\r\n    uint public advisorCounter = 0;\r\n  /**\r\n    *  @bool checkUnsoldTokens - \r\n    *  @bool upgradeICOSupply - Boolean variable updates when the PreICO tokens added to ICO supply\r\n    *  @bool grantReserveSupply - Boolean variable updates when reserve tokens minted\r\n    */\r\n    bool public checkBurnTokens;\r\n    bool public upgradeICOSupply;\r\n    bool public grantReserveSupply;\r\n\r\n /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    /**\r\n   * function Crowdsale - Parameterized Constructor\r\n   * @param _startTime - StartTime of Crowdsale\r\n   * @param _endTime - EndTime of Crowdsale\r\n   * @param _rate - Tokens against Ether\r\n   * @param _wallet - MultiSignature Wallet Address\r\n   */\r\n function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    token = createTokenContract();\r\n    preICOstartTime = _startTime; // Dec - 10 - 2018\r\n    preICOEndTime = 1547769600;  //SafeMath.add(preICOstartTime,3 minutes);   Jan - 18 - 2019\r\n    ICOstartTime = 1548633600; //SafeMath.add(preICOEndTime, 1 minutes); Jan - 28 - 2019\r\n    ICOEndTime = _endTime; // March - 19 - 2019\r\n    rate = _rate; \r\n    wallet = _wallet;\r\n\r\n    /** Calculations of Bonuses in private Sale or Pre-ICO */\r\n    StageOneBonus = SafeMath.div(SafeMath.mul(rate,20),100);\r\n    StageTwoBonus = SafeMath.div(SafeMath.mul(rate,15),100);\r\n    StageThreeBonus = SafeMath.div(SafeMath.mul(rate,10),100);\r\n    StageFourBonus = SafeMath.div(SafeMath.mul(rate,5),100);\r\n\r\n    /** ICO bonuses week calculations */\r\n    StageOne = SafeMath.add(ICOstartTime, 12 days);\r\n    StageTwo = SafeMath.add(StageOne, 12 days);\r\n    StageThree = SafeMath.add(StageTwo, 12 days);\r\n    StageFour = SafeMath.add(StageThree, 12 days);\r\n\r\n    /** Vested Period calculations for team and advisors*/\r\n    founderTimeLock = SafeMath.add(ICOEndTime, 3 minutes);\r\n    advisorTimeLock = SafeMath.add(ICOEndTime, 3 minutes);\r\n    reserveTimeLock = SafeMath.add(ICOEndTime, 3 minutes);\r\n    teamTimeLock = SafeMath.add(ICOEndTime, 3 minutes);\r\n    \r\n    checkBurnTokens = false;\r\n    upgradeICOSupply = false;\r\n    grantReserveSupply = false;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n  /**\r\n   * function preIcoTokens - Calculate Tokens in of PRE-ICO \r\n   */\r\n  function preIcoTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\r\n  \r\n    require(preIcoSupply > 0);\r\n\r\n    tokens = SafeMath.add(tokens, weiAmount.mul(rate));\r\n\r\n    require(preIcoSupply >= tokens);\r\n    \r\n    preIcoSupply = preIcoSupply.sub(tokens);        \r\n    publicSupply = publicSupply.sub(tokens);\r\n\r\n    return tokens;     \r\n  }\r\n\r\n  /**\r\n   * function icoTokens - Calculate Tokens in Main ICO\r\n   */\r\n  function icoTokens(uint256 weiAmount, uint256 tokens, uint256 accessTime) internal returns (uint256) {\r\n\r\n    require(icoSupply > 0);\r\n\r\n      if ( accessTime <= StageOne ) { \r\n        tokens = SafeMath.add(tokens, weiAmount.mul(StageOneBonus));\r\n      } else if (( accessTime <= StageTwo ) && (accessTime > StageOne)) { \r\n        tokens = SafeMath.add(tokens, weiAmount.mul(StageTwoBonus));\r\n      } else if (( accessTime <= StageThree ) && (accessTime > StageTwo)) {  \r\n        tokens = SafeMath.add(tokens, weiAmount.mul(StageThreeBonus));\r\n      } else if (( accessTime <= StageFour ) && (accessTime > StageThree)) {  \r\n        tokens = SafeMath.add(tokens, weiAmount.mul(StageFourBonus));\r\n      }\r\n        tokens = SafeMath.add(tokens, weiAmount.mul(rate)); \r\n      require(icoSupply >= tokens);\r\n      \r\n      icoSupply = icoSupply.sub(tokens);        \r\n      publicSupply = publicSupply.sub(tokens);\r\n\r\n      return tokens;\r\n  }\r\n  \r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // High level token purchase function\r\n  function buyTokens(address beneficiary) whenNotPaused public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n    // minimum investment should be 0.05 ETH \r\n    require((weiAmount >= 50000000000000000));\r\n    \r\n    uint256 accessTime = now;\r\n    uint256 tokens = 0;\r\n\r\n\r\n   if ((accessTime >= preICOstartTime) && (accessTime <= preICOEndTime)) {\r\n           tokens = preIcoTokens(weiAmount, tokens);\r\n\r\n    } else if ((accessTime >= ICOstartTime) && (accessTime <= ICOEndTime)) {\r\n       if (!upgradeICOSupply) {\r\n          icoSupply = SafeMath.add(icoSupply,preIcoSupply);\r\n          upgradeICOSupply = true;\r\n        }\r\n       tokens = icoTokens(weiAmount, tokens, accessTime);\r\n    } else {\r\n      revert();\r\n    }\r\n    \r\n    weiRaised = weiRaised.add(weiAmount);\r\n     if(msg.data.length == 20) {\r\n    address referer = bytesToAddress(bytes(msg.data));\r\n    // self-referrer check\r\n    require(referer != msg.sender);\r\n    uint refererTokens = tokens.mul(6).div(100);\r\n    // bonus for referrer\r\n    token.mint(referer, refererTokens);\r\n  }\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\nfunction bytesToAddress(bytes source) internal pure returns(address) {\r\n  uint result;\r\n  uint mul = 1;\r\n  for(uint i = 20; i > 0; i--) {\r\n    result += uint8(source[i-1])*mul;\r\n    mul = mul*256;\r\n  }\r\n  return address(result);\r\n}\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= preICOstartTime && now <= ICOEndTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n      return now > ICOEndTime;\r\n  }\r\n\r\n  function getTokenAddress() onlyOwner public returns (address) {\r\n    return token;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Allocations is Crowdsale {\r\n\r\n    function bountyDrop(address[] recipients, uint256[] values) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            values[i] = SafeMath.mul(values[i], 1 ether);\r\n            require(bountySupply >= values[i]);\r\n            bountySupply = SafeMath.sub(bountySupply,values[i]);\r\n\r\n            token.mint(recipients[i], values[i]);\r\n        }\r\n    }\r\n\r\n    function rewardDrop(address[] recipients, uint256[] values) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            values[i] = SafeMath.mul(values[i], 1 ether);\r\n            require(rewardSupply >= values[i]);\r\n            rewardSupply = SafeMath.sub(rewardSupply,values[i]);\r\n\r\n            token.mint(recipients[i], values[i]);\r\n        }\r\n    }\r\n\r\n    function grantAdvisorToken(address beneficiary ) public onlyOwner {\r\n        require((advisorCounter < 4) && (advisorTimeLock < now));\r\n        advisorTimeLock = SafeMath.add(advisorTimeLock, 2 minutes);\r\n        token.mint(beneficiary,SafeMath.div(advisorSupply, 4));\r\n        advisorCounter = SafeMath.add(advisorCounter, 1);    \r\n    }\r\n\r\n    function grantFounderToken(address founderAddress) public onlyOwner {\r\n        require((founderCounter < 4) && (founderTimeLock < now));\r\n        founderTimeLock = SafeMath.add(founderTimeLock, 2 minutes);\r\n        token.mint(founderAddress,SafeMath.div(founderSupply, 4));\r\n        founderCounter = SafeMath.add(founderCounter, 1);        \r\n    }\r\n\r\n    function grantTeamToken(address teamAddress) public onlyOwner {\r\n        require((teamCounter < 2) && (teamTimeLock < now));\r\n        teamTimeLock = SafeMath.add(teamTimeLock, 2 minutes);\r\n        token.mint(teamAddress,SafeMath.div(teamSupply, 4));\r\n        teamCounter = SafeMath.add(teamCounter, 1);        \r\n    }\r\n\r\n    function grantReserveToken(address beneficiary) public onlyOwner {\r\n        require((!grantReserveSupply) && (now > reserveTimeLock));\r\n        grantReserveSupply = true;\r\n        token.mint(beneficiary,reserveSupply);\r\n        reserveSupply = 0;\r\n    }\r\n\r\n    function transferFunds(address[] recipients, uint256[] values) public onlyOwner {\r\n        require(!checkBurnTokens);\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            values[i] = SafeMath.mul(values[i], 1 ether);\r\n            require(publicSupply >= values[i]);\r\n            publicSupply = SafeMath.sub(publicSupply,values[i]);\r\n            token.mint(recipients[i], values[i]); \r\n            }\r\n    } \r\n\r\n    function burnToken() public onlyOwner returns (bool) {\r\n        require(hasEnded());\r\n        require(!checkBurnTokens);\r\n        // token.burnTokens(icoSupply);\r\n        totalSupply = SafeMath.sub(totalSupply, icoSupply);\r\n        publicSupply = 0;\r\n        preIcoSupply = 0;\r\n        icoSupply = 0;\r\n        checkBurnTokens = true;\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 internal cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  bool isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalizeCrowdsale() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n    \r\n    finalization();\r\n    Finalized();\r\n    \r\n    isFinalized = true;\r\n    }\r\n  \r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) {\r\n    require(_wallet != 0x0);\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title RefundableCrowdsale\r\n * @dev Extension of Crowdsale contract that adds a funding goal, and\r\n * the possibility of users getting a refund if goal is not met.\r\n * Uses a RefundVault as the crowdsale's vault.\r\n */\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // minimum amount of funds to be raised in weis\r\n  uint256 internal goal;\r\n  // refund vault used to hold funds while crowdsale is running\r\n  RefundVault private vault;\r\n\r\n  function RefundableCrowdsale(uint256 _goal) {\r\n    require(_goal > 0);\r\n    vault = new RefundVault(wallet);\r\n    goal = _goal;\r\n  }\r\n\r\n  // We're overriding the fund forwarding from Crowdsale.\r\n  // In addition to sending the funds, we want to call\r\n  // the RefundVault deposit function\r\n  function forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n\r\n  // if crowdsale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() public {\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n\r\n    vault.refund(msg.sender);\r\n  }\r\n\r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() internal {\r\n    if (goalReached()) { \r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n    super.finalization();\r\n  \r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether funding goal was reached. \r\n   * @return Whether funding goal was reached\r\n   */\r\n  function goalReached() public view returns (bool) {\r\n    return weiRaised >= (goal - (5000 * 1 ether));\r\n  }\r\n\r\n  function getVaultAddress() onlyOwner public returns (address) {\r\n    return vault;\r\n  }\r\n}\r\n\r\n/**\r\n * @title EXTP Token\r\n */\r\n\r\n\r\ncontract TradePlaceToken is MintableToken {\r\n\r\n  string public constant name = \"Trade PLace\";\r\n  string public constant symbol = \"EXTP\";\r\n  uint8 public constant decimals = 18;\r\n  uint256 public totalSupply = SafeMath.mul(500000000 , 1 ether); //500000000\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract TradePlaceCrowdsale is Crowdsale, CappedCrowdsale, RefundableCrowdsale, Allocations {\r\n    /** Constructor TradePlaceCrowdsale */\r\n    function TradePlaceCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _goal, address _wallet)\r\n    CappedCrowdsale(_cap)\r\n    FinalizableCrowdsale()\r\n    RefundableCrowdsale(_goal)\r\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\r\n    {\r\n    }\r\n\r\n    /**TradePlaceToken Contract is generating from here */\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new TradePlaceToken();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"reserveSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBurnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StageTwoBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grantReserveSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOstartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StageFourBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getVaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StageOne\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantReserveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"founderAddress\",\"type\":\"address\"}],\"name\":\"grantFounderToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantAdvisorToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"rewardDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"grantTeamToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StageOneBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StageTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"bountyDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOstartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StageThreeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StageThree\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StageFour\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_goal\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TradePlaceCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005c0dac80000000000000000000000000000000000000000000000000000000005c90310000000000000000000000000000000000000000000000000000000000000009c4000000000000000000000000000000000000000000000fe1c215e8f838e0000000000000000000000000000000000000000000000000023934c5a09da19000000000000000000000000000009f152cc8b39805a8f561e046f91a085c5054b2bd","Library":"","SwarmSource":"bzzr://02cd5c3f83bd505d07856ab3b59a43327fcd74d223bd78e49bfaad72f915fa98"}]}