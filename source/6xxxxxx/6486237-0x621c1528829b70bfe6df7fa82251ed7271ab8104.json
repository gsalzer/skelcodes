{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    \r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n    /**\r\n    * @title Basic token\r\n    * @dev Basic version of StandardToken, with no allowances.\r\n    */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MultiOwnable {\r\n    address public hiddenOwner;\r\n    address public superOwner;\r\n    address public tokenExchanger;\r\n    address[10] public chkOwnerList;\r\n\r\n    mapping (address => bool) public owners;\r\n    \r\n    event AddOwner(address indexed newOwner);\r\n    event DeleteOwner(address indexed toDeleteOwner);\r\n    event SetTex(address indexed newTex);\r\n    event ChangeSuperOwner(address indexed newSuperOwner);\r\n    event ChangeHiddenOwner(address indexed newHiddenOwner);\r\n\r\n    constructor() public {\r\n        hiddenOwner = msg.sender;\r\n        superOwner = msg.sender;\r\n        owners[superOwner] = true;\r\n        chkOwnerList[0] = msg.sender;\r\n        tokenExchanger = msg.sender;\r\n    }\r\n\r\n    modifier onlySuperOwner() {\r\n        require(superOwner == msg.sender);\r\n        _;\r\n    }\r\n    modifier onlyHiddenOwner() {\r\n        require(hiddenOwner == msg.sender);\r\n        _;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function changeSuperOwnership(address newSuperOwner) public onlyHiddenOwner returns(bool) {\r\n        require(newSuperOwner != address(0));\r\n        superOwner = newSuperOwner;\r\n        emit ChangeSuperOwner(superOwner);\r\n        return true;\r\n    }\r\n    \r\n    function changeHiddenOwnership(address newHiddenOwner) public onlyHiddenOwner returns(bool) {\r\n        require(newHiddenOwner != address(0));\r\n        hiddenOwner = newHiddenOwner;\r\n        emit ChangeHiddenOwner(hiddenOwner);\r\n        return true;\r\n    }\r\n\r\n    function addOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {\r\n        require(num < 10);\r\n        require(owner != address(0));\r\n        require(chkOwnerList[num] == address(0));\r\n        owners[owner] = true;\r\n        chkOwnerList[num] = owner;\r\n        emit AddOwner(owner);\r\n        return true;\r\n    }\r\n\r\n    function setTEx(address tex) public onlySuperOwner returns (bool) {\r\n        require(tex != address(0));\r\n        tokenExchanger = tex;\r\n        emit SetTex(tex);\r\n        return true;\r\n    }\r\n\r\n    function deleteOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {\r\n        require(chkOwnerList[num] == owner);\r\n        require(owner != address(0));\r\n        owners[owner] = false;\r\n        chkOwnerList[num] = address(0);\r\n        emit DeleteOwner(owner);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract HasNoEther is MultiOwnable {\r\n    \r\n    /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n    constructor() public payable {\r\n        require(msg.value == 0);\r\n    }\r\n    \r\n    /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n    function() external {\r\n    }\r\n    \r\n    /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n    function reclaimEther() external onlySuperOwner returns(bool) {\r\n        superOwner.transfer(address(this).balance);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Blacklist is MultiOwnable {\r\n   \r\n    mapping(address => bool) blacklisted;\r\n    \r\n    event Blacklisted(address indexed blacklist);\r\n    event Whitelisted(address indexed whitelist);\r\n\r\n    modifier whenPermitted(address node) {\r\n        require(!blacklisted[node]);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Check a certain node is in a blacklist\r\n    * @param node  Check whether the user at a certain node is in a blacklist\r\n    */\r\n    function isPermitted(address node) public view returns (bool) {\r\n        return !blacklisted[node];\r\n    }\r\n\r\n    /**\r\n    * @dev Process blacklisting\r\n    * @param node Process blacklisting. Put the user in the blacklist.   \r\n    */\r\n    function blacklist(address node) public onlyOwner returns (bool) {\r\n        blacklisted[node] = true;\r\n        emit Blacklisted(node);\r\n\r\n        return blacklisted[node];\r\n    }\r\n\r\n    /**\r\n    * @dev Process unBlacklisting. \r\n    * @param node Remove the user from the blacklist.   \r\n    */\r\n    function unblacklist(address node) public onlySuperOwner returns (bool) {\r\n        blacklisted[node] = false;\r\n        emit Whitelisted(node);\r\n\r\n        return blacklisted[node];\r\n    }\r\n}\r\n\r\ncontract TimelockToken is StandardToken, HasNoEther, Blacklist {\r\n    bool public timelock;\r\n    uint256 public openingTime;\r\n\r\n    struct chkBalance {\r\n        uint256 _sent;\r\n        uint256 _initial;\r\n        uint256 _limit;\r\n    }\r\n\r\n    mapping(address => bool) public p2pAddrs;\r\n    mapping(address => chkBalance) public chkInvestorBalance;\r\n    \r\n    event Postcomplete(address indexed _from, address indexed _spender, address indexed _to, uint256 _value);\r\n    event OnTimeLock(address who);\r\n    event OffTimeLock(address who);\r\n    event P2pUnlocker(address addr);\r\n    event P2pLocker(address addr);\r\n    \r\n\r\n    constructor() public {\r\n        openingTime = block.timestamp;\r\n        p2pAddrs[msg.sender] = true;\r\n        timelock = false;\r\n    }\r\n\r\n    function postTransfer(address from, address spender, address to, uint256 value) internal returns (bool) {\r\n        emit Postcomplete(from, spender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function p2pUnlocker (address addr) public onlySuperOwner returns (bool) {\r\n        p2pAddrs[addr] = true;\r\n        \r\n        emit P2pUnlocker(addr);\r\n\r\n        return p2pAddrs[addr];\r\n    }\r\n\r\n    function p2pLocker (address addr) public onlyOwner returns (bool) {\r\n        p2pAddrs[addr] = false;\r\n        \r\n        emit P2pLocker(addr);\r\n\r\n        return p2pAddrs[addr];\r\n    }\r\n\r\n    function onTimeLock() public onlySuperOwner returns (bool) {\r\n        timelock = true;\r\n        \r\n        emit OnTimeLock(msg.sender);\r\n        \r\n        return timelock;\r\n    }\r\n\r\n    function offTimeLock() public onlySuperOwner returns (bool) {\r\n        timelock = false;\r\n        \r\n        emit OffTimeLock(msg.sender);\r\n        \r\n        return timelock;\r\n    }\r\n  \r\n    function transfer(address to, uint256 value) public \r\n    whenPermitted(msg.sender) returns (bool) {\r\n        \r\n        bool ret;\r\n        \r\n        if (!timelock) { // phase 1\r\n            \r\n            require(p2pAddrs[msg.sender]);\r\n            ret = super.transfer(to, value);\r\n        } else { // phase 2\r\n            if (owners[msg.sender]) {\r\n                require(p2pAddrs[msg.sender]);\r\n                \r\n                uint _totalAmount = balances[to].add(value);\r\n                chkInvestorBalance[to] = chkBalance(0,_totalAmount,_totalAmount.div(5));\r\n                ret = super.transfer(to, value);\r\n            } else {\r\n                require(!p2pAddrs[msg.sender] && to == tokenExchanger);\r\n                require(_timeLimit() > 0);\r\n                \r\n                if (chkInvestorBalance[msg.sender]._initial == 0) { // first transfer\r\n                    uint256 new_initial = balances[msg.sender];\r\n                    chkInvestorBalance[msg.sender] = chkBalance(0, new_initial, new_initial.div(5));\r\n                }\r\n                \r\n                uint256 addedValue = chkInvestorBalance[msg.sender]._sent.add(value);\r\n                require(addedValue <= _timeLimit().mul(chkInvestorBalance[msg.sender]._limit));\r\n                chkInvestorBalance[msg.sender]._sent = addedValue;\r\n                ret = super.transfer(to, value);\r\n            }\r\n        }\r\n        if (ret) \r\n            return postTransfer(msg.sender, msg.sender, to, value);\r\n        else\r\n            return false;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public \r\n    whenPermitted(msg.sender) returns (bool) {\r\n        require (owners[msg.sender] && p2pAddrs[msg.sender]);\r\n        require (timelock);\r\n        \r\n        if (owners[from]) {\r\n            uint _totalAmount = balances[to].add(value);\r\n            chkInvestorBalance[to] = chkBalance(0,_totalAmount,_totalAmount.div(5));\r\n        } else {\r\n            require (owners[to] || to == tokenExchanger);\r\n            \r\n            if (chkInvestorBalance[from]._initial == 0) { // first transfer\r\n                uint256 new_initial = balances[from];\r\n                chkInvestorBalance[from] = chkBalance(0, new_initial, new_initial.div(5));\r\n            }\r\n\r\n            uint256 addedValue = chkInvestorBalance[from]._sent.add(value);\r\n            require(addedValue <= _timeLimit().mul(chkInvestorBalance[from]._limit));\r\n            chkInvestorBalance[from]._sent = addedValue;\r\n        }\r\n        \r\n        bool ret = super.transferFrom(from, to, value);\r\n        \r\n        if (ret) \r\n            return postTransfer(from, msg.sender, to, value);\r\n        else\r\n            return false;\r\n    }\r\n\r\n    function _timeLimit() internal view returns (uint256) {\r\n        uint256 presentTime = block.timestamp;\r\n        uint256 timeValue = presentTime.sub(openingTime);\r\n        uint256 _result = timeValue.div(31 days);\r\n\r\n        return _result;\r\n    }\r\n\r\n    function setOpeningTime() public onlySuperOwner returns(bool) {\r\n        openingTime = block.timestamp;\r\n        return true;\r\n    }\r\n\r\n    function getLimitPeriod() external view returns (uint256) {\r\n        uint256 presentTime = block.timestamp;\r\n        uint256 timeValue = presentTime.sub(openingTime);\r\n        uint256 result = timeValue.div(31 days);\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n    /**\r\n    * Returns whether the target address is a contract\r\n    * @dev This function will return false if invoked during the constructor of a contract,\r\n    * as the code is not actually created until after the constructor finishes.\r\n    * @param account address of the account to check\r\n    * @return whether the target address is a contract\r\n    */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract luxbio_bio is TimelockToken {\r\n    using Address for address;\r\n    \r\n    event Burn(address indexed burner, uint256 value);\r\n    \r\n    string public constant name = \"LB-COIN\";\r\n    uint8 public constant decimals = 18;\r\n    string public constant symbol = \"LB\";\r\n    uint256 public constant INITIAL_SUPPLY = 1e10 * (10 ** uint256(decimals)); \r\n\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    function destory() public onlyHiddenOwner returns (bool) {\r\n        \r\n        selfdestruct(superOwner);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function burn(address _to,uint256 _value) public onlySuperOwner {\r\n        _burn(_to, _value);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {     \r\n        require(_value <= balances[_who]);\r\n    \r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n    \r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n  \r\n    // override\r\n    function postTransfer(address from, address spender, address to, uint256 value) internal returns (bool) {\r\n        if (to == tokenExchanger && to.isContract()) {\r\n            emit Postcomplete(from, spender, to, value);\r\n            return luxbio_dapp(to).doExchange(from, spender, to, value);\r\n        }\r\n        return true;\r\n    }\r\n}\r\ncontract luxbio_dapp {\r\n    function doExchange(address from, address spender, address to, uint256 value) public returns (bool);\r\n    event DoExchange(address indexed from, address indexed _spender, address indexed _to, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"addOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchanger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"p2pLocker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"changeSuperOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setOpeningTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"chkInvestorBalance\",\"outputs\":[{\"name\":\"_sent\",\"type\":\"uint256\"},{\"name\":\"_initial\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"offTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isPermitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"p2pUnlocker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destory\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"onTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"p2pAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHiddenOwner\",\"type\":\"address\"}],\"name\":\"changeHiddenOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLimitPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chkOwnerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tex\",\"type\":\"address\"}],\"name\":\"setTEx\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hiddenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Postcomplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"OnTimeLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"OffTimeLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"P2pUnlocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"P2pLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blacklist\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"whitelist\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toDeleteOwner\",\"type\":\"address\"}],\"name\":\"DeleteOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newTex\",\"type\":\"address\"}],\"name\":\"SetTex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"ChangeSuperOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newHiddenOwner\",\"type\":\"address\"}],\"name\":\"ChangeHiddenOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"luxbio_bio","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://75127c76b039725069f6d24d979da064abc4fbd241e99a0c511b6cb083ce9d36"}]}