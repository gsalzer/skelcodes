{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Interface for the ST20 token standard\r\n */\r\ncontract IST20 is StandardToken, DetailedERC20 {\r\n\r\n    // off-chain hash\r\n    string public tokenDetails;\r\n\r\n    //transfer, transferFrom must respect use respect the result of verifyTransfer\r\n    function verifyTransfer(address _from, address _to, uint256 _amount) public returns (bool success);\r\n\r\n    /**\r\n     * @notice mints new tokens and assigns them to the target _investor.\r\n     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\r\n     */\r\n    function mint(address _investor, uint256 _amount) public returns (bool success);\r\n\r\n    /**\r\n     * @notice Burn function used to burn the securityToken\r\n     * @param _value No. of token that get burned\r\n     */\r\n    function burn(uint256 _value) public;\r\n\r\n    event Minted(address indexed to, uint256 amount);\r\n    event Burnt(address indexed _burner, uint256 _value);\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Interface for all security tokens\r\n */\r\ncontract ISecurityToken is IST20, Ownable {\r\n\r\n    uint8 public constant PERMISSIONMANAGER_KEY = 1;\r\n    uint8 public constant TRANSFERMANAGER_KEY = 2;\r\n    uint8 public constant STO_KEY = 3;\r\n    uint8 public constant CHECKPOINT_KEY = 4;\r\n    uint256 public granularity;\r\n\r\n    // Value of current checkpoint\r\n    uint256 public currentCheckpointId;\r\n\r\n    // Total number of non-zero token holders\r\n    uint256 public investorCount;\r\n\r\n    // List of token holders\r\n    address[] public investors;\r\n\r\n    // Permissions this to a Permission module, which has a key of 1\r\n    // If no Permission return false - note that IModule withPerm will allow ST owner all permissions anyway\r\n    // this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\r\n    function checkPermission(address _delegate, address _module, bytes32 _perm) public view returns(bool);\r\n\r\n    /**\r\n     * @notice returns module list for a module type\r\n     * @param _moduleType is which type of module we are trying to remove\r\n     * @param _moduleIndex is the index of the module within the chosen type\r\n     */\r\n    function getModule(uint8 _moduleType, uint _moduleIndex) public view returns (bytes32, address);\r\n\r\n    /**\r\n     * @notice returns module list for a module name - will return first match\r\n     * @param _moduleType is which type of module we are trying to remove\r\n     * @param _name is the name of the module within the chosen type\r\n     */\r\n    function getModuleByName(uint8 _moduleType, bytes32 _name) public view returns (bytes32, address);\r\n\r\n    /**\r\n     * @notice Queries totalSupply as of a defined checkpoint\r\n     * @param _checkpointId Checkpoint ID to query as of\r\n     */\r\n    function totalSupplyAt(uint256 _checkpointId) public view returns(uint256);\r\n\r\n    /**\r\n     * @notice Queries balances as of a defined checkpoint\r\n     * @param _investor Investor to query balance for\r\n     * @param _checkpointId Checkpoint ID to query as of\r\n     */\r\n    function balanceOfAt(address _investor, uint256 _checkpointId) public view returns(uint256);\r\n\r\n    /**\r\n     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\r\n     */\r\n    function createCheckpoint() public returns(uint256);\r\n\r\n    /**\r\n     * @notice gets length of investors array\r\n     * NB - this length may differ from investorCount if list has not been pruned of zero balance investors\r\n     * @return length\r\n     */\r\n    function getInvestorsLength() public view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Interface that any module factory contract should implement\r\n */\r\ncontract IModuleFactory is Ownable {\r\n\r\n    ERC20 public polyToken;\r\n    uint256 public setupCost;\r\n    uint256 public usageCost;\r\n    uint256 public monthlySubscriptionCost;\r\n\r\n    event LogChangeFactorySetupFee(uint256 _oldSetupcost, uint256 _newSetupCost, address _moduleFactory);\r\n    event LogChangeFactoryUsageFee(uint256 _oldUsageCost, uint256 _newUsageCost, address _moduleFactory);\r\n    event LogChangeFactorySubscriptionFee(uint256 _oldSubscriptionCost, uint256 _newMonthlySubscriptionCost, address _moduleFactory);\r\n    event LogGenerateModuleFromFactory(address _module, bytes32 indexed _moduleName, address indexed _moduleFactory, address _creator, uint256 _timestamp);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public {\r\n      polyToken = ERC20(_polyAddress);\r\n      setupCost = _setupCost;\r\n      usageCost = _usageCost;\r\n      monthlySubscriptionCost = _subscriptionCost;\r\n    }\r\n\r\n    //Should create an instance of the Module, or throw\r\n    function deploy(bytes _data) external returns(address);\r\n\r\n    /**\r\n     * @notice Type of the Module factory\r\n     */\r\n    function getType() public view returns(uint8);\r\n\r\n    /**\r\n     * @notice Get the name of the Module\r\n     */\r\n    function getName() public view returns(bytes32);\r\n\r\n    /**\r\n     * @notice Get the description of the Module\r\n     */\r\n    function getDescription() public view returns(string);\r\n\r\n    /**\r\n     * @notice Get the title of the Module\r\n     */\r\n    function getTitle() public view returns(string);\r\n\r\n    /**\r\n     * @notice Get the Instructions that helped to used the module\r\n     */\r\n    function getInstructions() public view returns (string);\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function getTags() public view returns (bytes32[]);\r\n\r\n    //Pull function sig from _data\r\n    function getSig(bytes _data) internal pure returns (bytes4 sig) {\r\n        uint len = _data.length < 4 ? _data.length : 4;\r\n        for (uint i = 0; i < len; i++) {\r\n            sig = bytes4(uint(sig) + uint(_data[i]) * (2 ** (8 * (len - 1 - i))));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice used to change the fee of the setup cost\r\n     * @param _newSetupCost new setup cost\r\n     */\r\n    function changeFactorySetupFee(uint256 _newSetupCost) public onlyOwner {\r\n        emit LogChangeFactorySetupFee(setupCost, _newSetupCost, address(this));\r\n        setupCost = _newSetupCost;\r\n    }\r\n\r\n    /**\r\n     * @notice used to change the fee of the usage cost\r\n     * @param _newUsageCost new usage cost\r\n     */\r\n    function changeFactoryUsageFee(uint256 _newUsageCost) public onlyOwner {\r\n        emit LogChangeFactoryUsageFee(usageCost, _newUsageCost, address(this));\r\n        usageCost = _newUsageCost;\r\n    }\r\n\r\n    /**\r\n     * @notice used to change the fee of the subscription cost\r\n     * @param _newSubscriptionCost new subscription cost\r\n     */\r\n    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) public onlyOwner {\r\n        emit LogChangeFactorySubscriptionFee(monthlySubscriptionCost, _newSubscriptionCost, address(this));\r\n        monthlySubscriptionCost = _newSubscriptionCost;\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Interface that any module contract should implement\r\n */\r\ncontract IModule {\r\n\r\n    address public factory;\r\n\r\n    address public securityToken;\r\n\r\n    bytes32 public constant FEE_ADMIN = \"FEE_ADMIN\";\r\n\r\n    ERC20 public polyToken;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _securityToken Address of the security token\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _securityToken, address _polyAddress) public {\r\n        securityToken = _securityToken;\r\n        factory = msg.sender;\r\n        polyToken = ERC20(_polyAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice This function returns the signature of configure function\r\n     */\r\n    function getInitFunction() public pure returns (bytes4);\r\n\r\n    //Allows owner, factory or permissioned delegate\r\n    modifier withPerm(bytes32 _perm) {\r\n        bool isOwner = msg.sender == ISecurityToken(securityToken).owner();\r\n        bool isFactory = msg.sender == factory;\r\n        require(isOwner||isFactory||ISecurityToken(securityToken).checkPermission(msg.sender, address(this), _perm), \"Permission check failed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == ISecurityToken(securityToken).owner(), \"Sender is not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactory {\r\n        require(msg.sender == factory, \"Sender is not factory\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactoryOwner {\r\n        require(msg.sender == IModuleFactory(factory).owner(), \"Sender is not factory owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the permissions flag that are associated with Module\r\n     */\r\n    function getPermissions() public view returns(bytes32[]);\r\n\r\n    /**\r\n     * @notice used to withdraw the fee by the factory owner\r\n     */\r\n    function takeFee(uint256 _amount) public withPerm(FEE_ADMIN) returns(bool) {\r\n        require(polyToken.transferFrom(address(this), IModuleFactory(factory).owner(), _amount), \"Unable to take fee\");\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Interface to be implemented by all checkpoint modules\r\n */\r\ncontract ICheckpoint is IModule {\r\n\r\n}\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/////////////////////\r\n// Module permissions\r\n/////////////////////\r\n//                                        Owner       DISTRIBUTE\r\n// pushDividendPaymentToAddresses           X               X\r\n// pushDividendPayment                      X               X\r\n// createDividend                           X\r\n// createDividendWithCheckpoint             X\r\n// reclaimDividend                          X\r\n\r\n/**\r\n * @title Checkpoint module for issuing ether dividends\r\n */\r\ncontract EtherDividendCheckpoint is ICheckpoint {\r\n    using SafeMath for uint256;\r\n\r\n    bytes32 public constant DISTRIBUTE = \"DISTRIBUTE\";\r\n\r\n    struct Dividend {\r\n      uint256 checkpointId;\r\n      uint256 created; // Time at which the dividend was created\r\n      uint256 maturity; // Time after which dividend can be claimed - set to 0 to bypass\r\n      uint256 expiry;  // Time until which dividend can be claimed - after this time any remaining amount can be withdrawn by issuer - set to very high value to bypass\r\n      uint256 amount; // Dividend amount in WEI\r\n      uint256 claimedAmount; // Amount of dividend claimed so far\r\n      uint256 totalSupply; // Total supply at the associated checkpoint (avoids recalculating this)\r\n      bool reclaimed;\r\n      mapping (address => bool) claimed; // List of addresses which have claimed dividend\r\n    }\r\n\r\n    // List of all dividends\r\n    Dividend[] public dividends;\r\n\r\n    event EtherDividendDeposited(address indexed _depositor, uint256 _checkpointId, uint256 _created, uint256 _maturity, uint256 _expiry, uint256 _amount, uint256 _totalSupply, uint256 _dividendIndex);\r\n    event EtherDividendClaimed(address indexed _payee, uint256 _dividendIndex, uint256 _amount);\r\n    event EtherDividendReclaimed(address indexed _claimer, uint256 _dividendIndex, uint256 _claimedAmount);\r\n    event EtherDividendClaimFailed(address indexed _payee, uint256 _dividendIndex, uint256 _amount);\r\n\r\n    modifier validDividendIndex(uint256 _dividendIndex) {\r\n        require(_dividendIndex < dividends.length, \"Incorrect dividend index\");\r\n        require(now >= dividends[_dividendIndex].maturity, \"Dividend maturity is in the future\");\r\n        require(now < dividends[_dividendIndex].expiry, \"Dividend expiry is in the past\");\r\n        require(!dividends[_dividendIndex].reclaimed, \"Dividend has been reclaimed by issuer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _securityToken Address of the security token\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _securityToken, address _polyAddress) public\r\n    IModule(_securityToken, _polyAddress)\r\n    {\r\n    }\r\n\r\n    /**\r\n    * @notice Init function i.e generalise function to maintain the structure of the module contract\r\n    * @return bytes4\r\n    */\r\n    function getInitFunction() public pure returns (bytes4) {\r\n        return bytes4(0);\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a dividend and checkpoint for the dividend\r\n     * @param _maturity Time from which dividend can be paid\r\n     * @param _expiry Time until dividend can no longer be paid, and can be reclaimed by issuer\r\n     */\r\n    function createDividend(uint256 _maturity, uint256 _expiry) payable public onlyOwner {\r\n        require(_expiry > _maturity);\r\n        require(_expiry > now);\r\n        require(msg.value > 0);\r\n        uint256 dividendIndex = dividends.length;\r\n        uint256 checkpointId = ISecurityToken(securityToken).createCheckpoint();\r\n        uint256 currentSupply = ISecurityToken(securityToken).totalSupply();\r\n        dividends.push(\r\n          Dividend(\r\n            checkpointId,\r\n            now,\r\n            _maturity,\r\n            _expiry,\r\n            msg.value,\r\n            0,\r\n            currentSupply,\r\n            false\r\n          )\r\n        );\r\n        emit EtherDividendDeposited(msg.sender, checkpointId, now, _maturity, _expiry, msg.value, currentSupply, dividendIndex);\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a dividend with a provided checkpoint\r\n     * @param _maturity Time from which dividend can be paid\r\n     * @param _expiry Time until dividend can no longer be paid, and can be reclaimed by issuer\r\n     * @param _checkpointId Id of the checkpoint from which to issue dividend\r\n     */\r\n    function createDividendWithCheckpoint(uint256 _maturity, uint256 _expiry, uint256 _checkpointId) payable public onlyOwner {\r\n        require(_expiry > _maturity);\r\n        require(_expiry > now);\r\n        require(msg.value > 0);\r\n        require(_checkpointId <= ISecurityToken(securityToken).currentCheckpointId());\r\n        uint256 dividendIndex = dividends.length;\r\n        uint256 currentSupply = ISecurityToken(securityToken).totalSupplyAt(_checkpointId);\r\n        dividends.push(\r\n          Dividend(\r\n            _checkpointId,\r\n            now,\r\n            _maturity,\r\n            _expiry,\r\n            msg.value,\r\n            0,\r\n            currentSupply,\r\n            false\r\n          )\r\n        );\r\n        emit EtherDividendDeposited(msg.sender, _checkpointId, now, _maturity, _expiry, msg.value, currentSupply, dividendIndex);\r\n    }\r\n\r\n    /**\r\n     * @notice Issuer can push dividends to provided addresses\r\n     * @param _dividendIndex Dividend to push\r\n     * @param _payees Addresses to which to push the dividend\r\n     */\r\n    function pushDividendPaymentToAddresses(uint256 _dividendIndex, address[] _payees) public withPerm(DISTRIBUTE) validDividendIndex(_dividendIndex) {\r\n        Dividend storage dividend = dividends[_dividendIndex];\r\n        for (uint256 i = 0; i < _payees.length; i++) {\r\n            if (!dividend.claimed[_payees[i]]) {\r\n                _payDividend(_payees[i], dividend, _dividendIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Issuer can push dividends using the investor list from the security token\r\n     * @param _dividendIndex Dividend to push\r\n     * @param _start Index in investor list at which to start pushing dividends\r\n     * @param _iterations Number of addresses to push dividends for\r\n     */\r\n    function pushDividendPayment(uint256 _dividendIndex, uint256 _start, uint256 _iterations) public withPerm(DISTRIBUTE) validDividendIndex(_dividendIndex) {\r\n        Dividend storage dividend = dividends[_dividendIndex];\r\n        uint256 numberInvestors = ISecurityToken(securityToken).getInvestorsLength();\r\n        for (uint256 i = _start; i < Math.min256(numberInvestors, _start.add(_iterations)); i++) {\r\n            address payee = ISecurityToken(securityToken).investors(i);\r\n            if (!dividend.claimed[payee]) {\r\n                _payDividend(payee, dividend, _dividendIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Investors can pull their own dividends\r\n     * @param _dividendIndex Dividend to pull\r\n     */\r\n    function pullDividendPayment(uint256 _dividendIndex) public validDividendIndex(_dividendIndex)\r\n    {\r\n        Dividend storage dividend = dividends[_dividendIndex];\r\n        require(!dividend.claimed[msg.sender], \"Dividend already reclaimed\");\r\n        _payDividend(msg.sender, dividend, _dividendIndex);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function for paying dividends\r\n     * @param _payee address of investor\r\n     * @param _dividend storage with previously issued dividends\r\n     * @param _dividendIndex Dividend to pay\r\n     */\r\n    function _payDividend(address _payee, Dividend storage _dividend, uint256 _dividendIndex) internal {\r\n        uint256 claim = calculateDividend(_dividendIndex, _payee);\r\n        _dividend.claimed[_payee] = true;\r\n        _dividend.claimedAmount = claim.add(_dividend.claimedAmount);\r\n        if (claim > 0) {\r\n            if (_payee.send(claim)) {\r\n              emit EtherDividendClaimed(_payee, _dividendIndex, claim);\r\n            } else {\r\n              _dividend.claimed[_payee] = false;\r\n              emit EtherDividendClaimFailed(_payee, _dividendIndex, claim);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Issuer can reclaim remaining unclaimed dividend amounts, for expired dividends\r\n     * @param _dividendIndex Dividend to reclaim\r\n     */\r\n    function reclaimDividend(uint256 _dividendIndex) public onlyOwner {\r\n        require(_dividendIndex < dividends.length, \"Incorrect dividend index\");\r\n        require(now >= dividends[_dividendIndex].expiry, \"Dividend expiry is in the future\");\r\n        require(!dividends[_dividendIndex].reclaimed, \"Dividend already claimed\");\r\n        Dividend storage dividend = dividends[_dividendIndex];\r\n        dividend.reclaimed = true;\r\n        uint256 remainingAmount = dividend.amount.sub(dividend.claimedAmount);\r\n        msg.sender.transfer(remainingAmount);\r\n        emit EtherDividendReclaimed(msg.sender, _dividendIndex, remainingAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate amount of dividends claimable\r\n     * @param _dividendIndex Dividend to calculate\r\n     * @param _payee Affected investor address\r\n     * @return unit256\r\n     */\r\n    function calculateDividend(uint256 _dividendIndex, address _payee) public view returns(uint256) {\r\n        Dividend storage dividend = dividends[_dividendIndex];\r\n        if (dividend.claimed[_payee]) {\r\n            return 0;\r\n        }\r\n        uint256 balance = ISecurityToken(securityToken).balanceOfAt(_payee, dividend.checkpointId);\r\n        return balance.mul(dividend.amount).div(dividend.totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the index according to the checkpoint id\r\n     * @param _checkpointId Checkpoint id to query\r\n     * @return uint256\r\n     */\r\n    function getDividendIndex(uint256 _checkpointId) public view returns(uint256[]) {\r\n        uint256 counter = 0;\r\n        for(uint256 i = 0; i < dividends.length; i++) {\r\n            if (dividends[i].checkpointId == _checkpointId) {\r\n                counter++;\r\n            }\r\n        }\r\n\r\n       uint256[] memory index = new uint256[](counter);\r\n       counter = 0;\r\n       for(uint256 j = 0; j < dividends.length; j++) {\r\n           if (dividends[j].checkpointId == _checkpointId) {\r\n               index[counter] = j;\r\n               counter++;\r\n           }\r\n       }\r\n       return index;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the permissions flag that are associated with STO\r\n     * @return bytes32 array\r\n     */\r\n    function getPermissions() public view returns(bytes32[]) {\r\n        bytes32[] memory allPermissions = new bytes32[](1);\r\n        allPermissions[0] = DISTRIBUTE;\r\n        return allPermissions;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Factory for deploying EtherDividendCheckpoint module\r\n */\r\ncontract EtherDividendCheckpointFactory is IModuleFactory {\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _polyAddress Address of the polytoken\r\n     * @param _setupCost Setup cost of the module\r\n     * @param _usageCost Usage cost of the module\r\n     * @param _subscriptionCost Subscription cost of the module\r\n     */\r\n    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public\r\n    IModuleFactory(_polyAddress, _setupCost, _usageCost, _subscriptionCost)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice used to launch the Module with the help of factory\r\n     * @return address Contract address of the Module\r\n     */\r\n    function deploy(bytes /* _data */) external returns(address) {\r\n        if(setupCost > 0)\r\n            require(polyToken.transferFrom(msg.sender, owner, setupCost), \"Failed transferFrom because of sufficent Allowance is not provided\");\r\n        return address(new EtherDividendCheckpoint(msg.sender, address(polyToken)));\r\n    }\r\n\r\n    /**\r\n     * @notice Type of the Module factory\r\n     */\r\n    function getType() public view returns(uint8) {\r\n        return 4;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the name of the Module\r\n     */\r\n    function getName() public view returns(bytes32) {\r\n        return \"EtherDividendCheckpoint\";\r\n    }\r\n\r\n    /**\r\n     * @notice Get the description of the Module\r\n     */\r\n    function getDescription() public view returns(string) {\r\n        return \"Create ETH dividends for token holders at a specific checkpoint\";\r\n    }\r\n\r\n    /**\r\n     * @notice Get the title of the Module\r\n     */\r\n    function getTitle() public  view returns(string) {\r\n        return \"Ether Dividend Checkpoint\";\r\n    }\r\n\r\n    /**\r\n     * @notice Get the Instructions that helped to used the module\r\n     */\r\n    function getInstructions() public view returns(string) {\r\n        return \"Create a dividend which will be paid out to token holders proportional to their balances at the point the dividend is created\";\r\n    }\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function getTags() public view returns(bytes32[]) {\r\n        bytes32[] memory availableTags = new bytes32[](3);\r\n        availableTags[0] = \"ETH\";\r\n        availableTags[1] = \"Checkpoint\";\r\n        availableTags[2] = \"Dividend\";\r\n        return availableTags;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlySubscriptionCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSubscriptionCost\",\"type\":\"uint256\"}],\"name\":\"changeFactorySubscriptionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSetupCost\",\"type\":\"uint256\"}],\"name\":\"changeFactorySetupFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setupCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTags\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUsageCost\",\"type\":\"uint256\"}],\"name\":\"changeFactoryUsageFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usageCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInstructions\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTitle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_polyAddress\",\"type\":\"address\"},{\"name\":\"_setupCost\",\"type\":\"uint256\"},{\"name\":\"_usageCost\",\"type\":\"uint256\"},{\"name\":\"_subscriptionCost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldSetupcost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newSetupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"LogChangeFactorySetupFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldUsageCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newUsageCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"LogChangeFactoryUsageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldSubscriptionCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newMonthlySubscriptionCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"LogChangeFactorySubscriptionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_module\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_moduleName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_moduleFactory\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"LogGenerateModuleFromFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EtherDividendCheckpointFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009992ec3cf6a55b00978cddf2b27bc6882d88d1ec000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://2fad3cf657e6df5bd74c5550e0accca0d22c606812f1f0092e7d98855c406dd6"}]}