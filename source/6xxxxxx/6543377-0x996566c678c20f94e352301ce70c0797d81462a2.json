{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n *  - GAIN UP TO 200% IN 20 DAYS\r\n *\r\n *  - Minimal contribution 0.05 eth\r\n *  - Currency and payment - ETH\r\n *  - Contribution allocation schemes:\r\n *    -- 91 % payments (3 % for Referral Program)\r\n *    -- 6 % marketing\r\n *    -- 3 % administration fee\r\n *\r\n *\r\n *  Percentage of your profit depends on balance of the contract:\r\n *\r\n *              balance     |   %   |  profit\r\n *            -------------------------------\r\n *            <  500 ETH    |  6 %  |   120 %\r\n *            >  500 ETH    |  7 %  |   140 %\r\n *            > 1500 ETH    |  8 %  |   160 %\r\n *            > 2500 ETH    |  9 %  |   180 %\r\n *            > 5000 ETH    | 10 %  |   200 %\r\n *\r\n *\r\n *    Referral program:\r\n *    Add your referrer address to DATA field when you invest or reinvest ETH:\r\n *     - You will get instant cashback 1 % of your Deposit\r\n *     - Your referrer will get bonus 2 % while withdrawing Dividends\r\n *\r\n *     -- You can add new referrer every time you invest money\r\n *     -- Referrer MUST be a participant of the project\r\n *     -- You can't be referrer for yourself\r\n *     -- If you have no referrer 3 % goes to marketing expenses\r\n *\r\n *\r\n *  How to use:\r\n *  1. Send ETH (more than 0.05) to make an investment\r\n *  2a. Claim your profit at any time by sending 0 ether transaction\r\n *  Also you can send less than 0.05 ETH and you will get back your sended amount and dividends.\r\n *  OR\r\n *  2b. Send more ETH to reinvest AND get your profit at the same time\r\n *\r\n *  Any deposit brings money only 20 days from the time of investment.\r\n *\r\n *  RECOMMENDED GAS LIMIT: 250000\r\n *  RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n *\r\n *\r\n *  Contract reviewed and approved by experts!\r\n *\r\n */\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0);\r\n        uint256 c = _a / _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract SmartDoubler {\r\n    using SafeMath for uint;\r\n\r\n    address public owner;\r\n    address marketing;\r\n    address admin;\r\n\r\n    mapping (address => uint) index;\r\n    mapping (address => mapping (uint => uint)) deposit;\r\n    mapping (address => mapping (uint => uint)) finish;\r\n    mapping (address => uint) checkpoint;\r\n\r\n    mapping (address => uint) refBonus;\r\n\r\n    event LogInvestment(address indexed _addr, uint _value);\r\n    event LogPayment(address indexed _addr, uint _value);\r\n    event LogReferralInvestment(address indexed _referrer, address indexed _referral, uint _value);\r\n\r\n    constructor(address _marketing, address _admin) public {\r\n        owner = msg.sender;\r\n        marketing = _marketing;\r\n        admin = _admin;\r\n    }\r\n\r\n    function renounceOwnership() external {\r\n        require(msg.sender == owner);\r\n        owner = 0x0;\r\n    }\r\n\r\n    function bytesToAddress(bytes _source) internal pure returns(address parsedreferrer) {\r\n        assembly {\r\n            parsedreferrer := mload(add(_source,0x14))\r\n        }\r\n        return parsedreferrer;\r\n    }\r\n\r\n    function refSystem() internal {\r\n        address _referrer = bytesToAddress(bytes(msg.data));\r\n        if (_referrer != msg.sender && getInfo3(_referrer) > 0) {\r\n            marketing.transfer(msg.value * 6 / 100);\r\n            msg.sender.transfer(msg.value * 1 / 100);\r\n            refBonus[_referrer] += msg.value * 2 / 100;\r\n\r\n            emit LogReferralInvestment(_referrer, msg.sender, msg.value);\r\n        } else {\r\n            marketing.transfer(msg.value * 9 / 100);\r\n        }\r\n    }\r\n\r\n    function getInterest() public view returns (uint) {\r\n\r\n        if (address(this).balance >= 5000e18) {\r\n            return 10;\r\n        }\r\n        if (address(this).balance >= 2500e18) {\r\n            return 9;\r\n        }\r\n        if (address(this).balance >= 1500e18) {\r\n            return 8;\r\n        }\r\n        if (address(this).balance >= 500e18) {\r\n            return 7;\r\n        } else {\r\n            return 6;\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.value < 50000000000000000) {\r\n            msg.sender.transfer(msg.value);\r\n            withdraw();\r\n        } else {\r\n            invest();\r\n        }\r\n    }\r\n\r\n    function invest() public payable {\r\n\r\n        require(msg.value >= 50000000000000000);\r\n        admin.transfer(msg.value * 3 / 100);\r\n\r\n        if (getInfo3(msg.sender) + getInfo4(msg.sender) > 0) {\r\n            withdraw();\r\n            if (deposit[msg.sender][0] > 0) {\r\n                index[msg.sender] += 1;\r\n            }\r\n        }\r\n\r\n        checkpoint[msg.sender] = block.timestamp;\r\n        finish[msg.sender][index[msg.sender]] = block.timestamp + (20 * 1 days);\r\n        deposit[msg.sender][index[msg.sender]] = msg.value;\r\n\r\n        if (msg.data.length != 0) {\r\n            refSystem();\r\n        } else {\r\n            marketing.transfer(msg.value * 9 / 100);\r\n        }\r\n\r\n        emit LogInvestment(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw() public {\r\n\r\n        uint _payout = refBonus[msg.sender];\r\n        refBonus[msg.sender] = 0;\r\n\r\n        for (uint i = 0; i <= index[msg.sender]; i++) {\r\n            if (checkpoint[msg.sender] < finish[msg.sender][i]) {\r\n                if (block.timestamp > finish[msg.sender][i]) {\r\n                    _payout = _payout.add((deposit[msg.sender][i].mul(getInterest()).div(100)).mul(finish[msg.sender][i].sub(checkpoint[msg.sender])).div(1 days));\r\n                } else {\r\n                    _payout = _payout.add((deposit[msg.sender][i].mul(getInterest()).div(100)).mul(block.timestamp.sub(checkpoint[msg.sender])).div(1 days));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_payout > 0) {\r\n            checkpoint[msg.sender] = block.timestamp;\r\n            msg.sender.transfer(_payout);\r\n\r\n            emit LogPayment(msg.sender, _payout);\r\n        }\r\n    }\r\n\r\n    function getInfo1(address _address) public view returns(uint Invested) {\r\n        uint _sum;\r\n        for (uint i = 0; i <= index[_address]; i++) {\r\n            if (block.timestamp < finish[_address][i]) {\r\n                _sum += deposit[_address][i];\r\n            }\r\n        }\r\n        Invested = _sum;\r\n    }\r\n\r\n    function getInfo2(address _address, uint _number) public view returns(uint Deposit_N) {\r\n        if (block.timestamp < finish[_address][_number - 1]) {\r\n            Deposit_N = deposit[_address][_number - 1];\r\n        } else {\r\n            Deposit_N = 0;\r\n        }\r\n    }\r\n\r\n    function getInfo3(address _address) public view returns(uint Dividends) {\r\n        uint _payout;\r\n        for (uint i = 0; i <= index[_address]; i++) {\r\n            if (checkpoint[_address] < finish[_address][i]) {\r\n                if (block.timestamp > finish[_address][i]) {\r\n                    _payout = _payout.add((deposit[_address][i].mul(getInterest()).div(100)).mul(finish[_address][i].sub(checkpoint[_address])).div(1 days));\r\n                } else {\r\n                    _payout = _payout.add((deposit[_address][i].mul(getInterest()).div(100)).mul(block.timestamp.sub(checkpoint[_address])).div(1 days));\r\n                }\r\n            }\r\n        }\r\n        Dividends = _payout;\r\n    }\r\n\r\n    function getInfo4(address _address) public view returns(uint Bonuses) {\r\n        Bonuses = refBonus[_address];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"getInfo2\",\"outputs\":[{\"name\":\"Deposit_N\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInfo4\",\"outputs\":[{\"name\":\"Bonuses\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInfo1\",\"outputs\":[{\"name\":\"Invested\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInfo3\",\"outputs\":[{\"name\":\"Dividends\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_marketing\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogReferralInvestment\",\"type\":\"event\"}]","ContractName":"SmartDoubler","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000070ba56e4451d05fdefa1e331c32d16eacfbe73b80000000000000000000000003aa1ad293e374aeb6cfc3549b92c646f9071d682","Library":"","SwarmSource":"bzzr://a7de1d698252ad86a32fd1e3317db88f74ba83ce287dfd7409f0fa7d872f920e"}]}