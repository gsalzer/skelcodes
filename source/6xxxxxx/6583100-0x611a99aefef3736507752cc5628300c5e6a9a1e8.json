{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract PowerBall is owned {\r\n    using Strings for string;\r\n    using SafeMath for uint256;\r\n     \r\n    struct Ticket {\r\n        address player;\r\n        uint32 drawDate;\r\n\t\tuint64 price;\r\n        uint8 ball1;\r\n        uint8 ball2;\r\n        uint8 ball3;\r\n        uint8 ball4;\r\n        uint8 redBall;\r\n    }\r\n    struct Draws{\r\n        uint32 count;\r\n        uint32[500000] tickets;\r\n    }\r\n    \r\n\tstruct CurrentPrizes{\r\n\t\taddress special;\r\n\t\taddress first;\r\n\t\taddress second;\r\n\t\taddress third;\r\n\t}\r\n\tstruct Prize{\r\n\t    address[] winners;\r\n\t    uint amout;\r\n\t}\r\n\tstruct LotteryResults{\r\n\t\tPrize special;\r\n\t\tPrize first;\r\n\t\tPrize second;\r\n\t\tPrize third;\r\n\t\tuint8[5] result;\r\n\t\tbool hadDraws;\r\n\t\tbool hadAward;\r\n\t}\r\n\t\r\n\tstruct TicketInfo{\r\n\t\tuint64 priceTicket;\r\n\t\tuint8 specialPrize;\r\n\t\tuint8 firstPrize;\r\n\t\tuint8 secondPrize;\r\n\t\tuint8 thirdPrize;\r\n\t\tuint8 commission;\r\n\t\tuint8 sales;\r\n\t}\r\n    TicketInfo public ticketInfo;\r\n\tCurrentPrizes public prizes;\r\n\taddress SystemSale;\r\n    mapping(address => uint256) private balances;\r\n    mapping (uint => Ticket) private tickets;\r\n    mapping (uint32 => Draws)  _draws;\r\n\tmapping (uint32 => LotteryResults)  _results;\r\n\t\r\n    \r\n\tuint32 idTicket;\r\n    \r\n    event logBuyTicketSumary(\r\n        address user,\r\n        uint32[] ticketId,\r\n\t\tuint drawDate\r\n    );\r\n    \r\n    event logGetPrize(\r\n        string prize,\r\n\t\tuint drawDate,\r\n\t\tuint amout,\r\n\t\taddress[] winners,\r\n\t\tuint8[5] result\r\n\t\t\r\n    );\r\n    \r\n    event logAward(\r\n        string prize,\r\n        uint drawDate,\r\n\t\tuint amout,\r\n\t\taddress[] winners,\r\n\t\tuint8[5] result\r\n    );\r\n    \r\n    event logWithdraw(\r\n        address account,\r\n\t\tuint amout\r\n    );\r\n    \r\n\tconstructor() public{\r\n\t\tticketInfo.priceTicket  = 10000; \t\t//10 GM\r\n\t\tticketInfo.specialPrize = 30; \t\t\t//30 percent\r\n\t\tticketInfo.firstPrize = 2; \t\t\t\t//2 percent\r\n\t\tticketInfo.secondPrize = 5; \t\t\t//5 percent\r\n\t\tticketInfo.thirdPrize = 8; \t\t\t\t//8 percent\r\n\t\tticketInfo.commission = 10; \t\t\t//10 percent\r\n\t\tticketInfo.sales = 45; \t\t\t\t    //45 percent\r\n\t\t\r\n\t\t\r\n\t\tprizes.special = 0x374cC1ed754A448276380872786659ab532CD7fC; //account 3\r\n\t\tprizes.first = 0xF73823D62f8006E8cBF39Ba630479EFDA59419C9; //account 4\r\n\t\tprizes.second = 0x0b744af1F0E55AFBeAb8212B00bBf2586F0EBB8F; //account 5\r\n\t\tprizes.third = 0x6dD465891AcB3570F122f5E7E52eeAA406992Dcf; //account 6\r\n\t\t\r\n\t\r\n\t\tSystemSale = 0xbD6E06b04c2582c4373741ef6EDf39AB37Eb964C; //account 8\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\tfunction setTicketInfo(\r\n\t    uint64 _priceTicket,\r\n\t\tuint8 _specialPrize,\r\n\t\tuint8 _firstPrize,\r\n\t\tuint8 _secondPrize,\r\n\t\tuint8 _thirdPrize,\r\n\t\tuint8 _commission,\r\n\t\tuint8 _sales\r\n\t    ) \r\n\tpublic\r\n\tonlyOwner\r\n\t{\r\n\t    ticketInfo.priceTicket  = _priceTicket;    \r\n\t    ticketInfo.specialPrize = _specialPrize;\r\n\t\tticketInfo.firstPrize = _firstPrize;\r\n\t\tticketInfo.secondPrize = _secondPrize;\r\n\t\tticketInfo.thirdPrize = _thirdPrize;\r\n\t\tticketInfo.commission = _commission;\r\n\t\tticketInfo.sales = _sales;\r\n\t}\r\n\t\r\n\tfunction cumulativeAward(uint _special, uint _first, uint _second, uint _third)\r\n\tpublic\r\n\tonlyOwner\r\n\t{\r\n\t    setBalance(prizes.special,_special);\r\n\t    setBalance(prizes.first,_first);\r\n\t    setBalance(prizes.second,_second);\r\n\t    setBalance(prizes.third,_third);\r\n\t}\r\n\t\r\n\t/**\r\n    * @dev giveTickets buy ticket and give it to another player\r\n    * @param _user The address of the player that will receive the ticket.\r\n    * @param _drawDate The draw date of tickets.\r\n    * @param _balls The ball numbers of the tickets.\r\n    */\r\n\tfunction giveTickets(address _user,uint32 _drawDate, uint8[] _balls) \r\n\tonlyOwner\r\n\tpublic\r\n\t{\r\n\t    require(!_results[_drawDate].hadDraws);\r\n\t    uint32[] memory _idTickets = new uint32[](_balls.length/5);\r\n\t    uint32 id = idTicket;\r\n\t\t\r\n\t    for(uint8 i = 0; i< _balls.length; i+=5){\r\n\t        require(checkRedBall(_balls[i+4]));\r\n\t        require(checkBall(_balls[i]));\r\n\t        require(checkBall(_balls[i+1]));\r\n\t        require(checkBall(_balls[i+2]));\r\n\t        require(checkBall(_balls[i+3]));\r\n\t        id++;\r\n    \t    tickets[id].player = _user;\r\n    \t    tickets[id].drawDate = _drawDate;\r\n    \t    tickets[id].price = ticketInfo.priceTicket;\r\n    \t    tickets[id].redBall = _balls[i+4];\r\n    \t    tickets[id].ball1 = _balls[i];\r\n    \t    tickets[id].ball2 = _balls[i + 1];\r\n    \t    tickets[id].ball3 = _balls[i +2];\r\n    \t    tickets[id].ball4 = _balls[i + 3];\r\n\t\t    _draws[_drawDate].tickets[_draws[_drawDate].count] = id;\r\n    \t    _draws[_drawDate].count ++;\r\n    \t    _idTickets[i/5] = id;\r\n\t    }\r\n\t    idTicket = id;\r\n\t    emit logBuyTicketSumary(_user,_idTickets,_drawDate);\r\n\t}\r\n\t\r\n\t/**\r\n    * @dev addTickets allow admin add ticket to player for buy ticket fail\r\n    * @param _user The address of the player that will receive the ticket.\r\n    * @param _drawDate The draw date of tickets.\r\n    * @param _balls The ball numbers of the tickets.\r\n    * @param _price The price of the tickets.\r\n    */\r\n\tfunction addTickets(address _user,uint32 _drawDate, uint64 _price, uint8[] _balls) \r\n\tonlyOwner\r\n\tpublic\r\n\t{\r\n\t    require(!_results[_drawDate].hadDraws);\r\n\t    uint32[] memory _idTickets = new uint32[](_balls.length/5);\r\n\t    uint32 id = idTicket;\r\n\t\t\r\n\t    for(uint8 i = 0; i< _balls.length; i+=5){\r\n\t        require(checkRedBall(_balls[i+4]));\r\n\t        require(checkBall(_balls[i]));\r\n\t        require(checkBall(_balls[i+1]));\r\n\t        require(checkBall(_balls[i+2]));\r\n\t        require(checkBall(_balls[i+3]));\r\n\t        id++;\r\n    \t    tickets[id].player = _user;\r\n    \t    tickets[id].drawDate = _drawDate;\r\n    \t    tickets[id].price = _price;\r\n    \t    tickets[id].redBall = _balls[i+4];\r\n    \t    tickets[id].ball1 = _balls[i];\r\n    \t    tickets[id].ball2 = _balls[i + 1];\r\n    \t    tickets[id].ball3 = _balls[i +2];\r\n    \t    tickets[id].ball4 = _balls[i + 3];\r\n\t\t    _draws[_drawDate].tickets[_draws[_drawDate].count] = id;\r\n    \t    _draws[_drawDate].count ++;\r\n    \t    _idTickets[i/5] = id;\r\n\t    }\r\n\t    idTicket = id;\r\n\t    emit logBuyTicketSumary(_user,_idTickets,_drawDate);\r\n\t}\r\n\t\r\n\tfunction checkBall(uint8 ball) private pure returns (bool){\r\n\t    return ball > 0 && ball <= 70; \r\n\t}\r\n   \r\n    function checkRedBall(uint8 ball) private pure returns (bool){\r\n\t    return ball > 0 && ball <= 26; \r\n\t}\r\n\t\r\n\t\r\n    /**\r\n    * @dev doDraws buy ticket and give it to another player\r\n    * @param _drawDate The draw date of tickets.\r\n    * @param _result The result of draw.\r\n    */\r\n\tfunction doDraws(uint32 _drawDate, uint8[5] _result)\r\n\tpublic\r\n\tonlyOwner\r\n\treturns (bool success) \r\n\t{\r\n\t\trequire (_draws[_drawDate].count > 0);\r\n\t\trequire(!_results[_drawDate].hadDraws);\r\n\t\t_results[_drawDate].hadDraws =true;\r\n\t\tfor(uint32 i=0; i<_draws[_drawDate].count;i++){\r\n\t\t\tuint8 _prize = checkTicket(_draws[_drawDate].tickets[i],_result);\r\n\t\t\tif(_prize==5){ //special\r\n\t\t\t    _results[_drawDate].special.winners.push(address(0));\r\n\t\t\t\t_results[_drawDate].special.winners[_results[_drawDate].special.winners.length-1] = tickets[_draws[_drawDate].tickets[i]].player;\r\n\t\t\t}else if(_prize == 4){ //First\r\n\t\t\t    _results[_drawDate].first.winners.push(address(0));\r\n\t\t\t\t_results[_drawDate].first.winners[_results[_drawDate].first.winners.length-1] = tickets[_draws[_drawDate].tickets[i]].player;\r\n\t\t\t}else if(_prize == 3){ //Second\r\n\t\t\t    _results[_drawDate].second.winners.push(address(0));\r\n\t\t\t\t_results[_drawDate].second.winners[_results[_drawDate].second.winners.length-1] = tickets[_draws[_drawDate].tickets[i]].player;\r\n\t\t\t}else if(_prize == 2){ //Third\r\n\t\t\t    _results[_drawDate].third.winners.push(address(0));\r\n\t\t\t\t_results[_drawDate].third.winners[_results[_drawDate].third.winners.length-1] = tickets[_draws[_drawDate].tickets[i]].player;\r\n\t\t\t}\r\n\t\t}\r\n\t\t_results[_drawDate].result =_result;\r\n\t\tsetAmoutPrize(_drawDate,_result);\r\n\t\t\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction setDrawsResult(uint32 _drawDate, uint8[5] _result,address[] _special, address[] _first, address[] _second, address[] _third)\r\n\tpublic\r\n\tonlyOwner\r\n\treturns (bool success) \r\n\t{\r\n\t    \r\n\t\trequire (_draws[_drawDate].count > 0);\r\n\t\trequire(!_results[_drawDate].hadDraws);\r\n\t\t_results[_drawDate].hadDraws =true;\r\n\t\t\r\n\t\t_results[_drawDate].special.winners = _special;\r\n\r\n\t\t_results[_drawDate].first.winners = _first;\r\n\r\n\t\t_results[_drawDate].second.winners = _second;\r\n\r\n\t\t_results[_drawDate].third.winners = _third;\r\n\r\n\t\t_results[_drawDate].result =_result;\r\n\t\t\r\n\t\tsetAmoutPrize(_drawDate,_result);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\tfunction doAward(uint32 _drawDate)\r\n\tpublic\r\n\tonlyOwner\r\n\t{\r\n\t    require(_results[_drawDate].hadDraws);\r\n\t    require(!_results[_drawDate].hadAward);\r\n\t    //uint revenue = getRevenue(_drawDate);\r\n\t    uint _prize=0;\r\n\t    if(_results[_drawDate].special.winners.length>0){\r\n    \t    _prize = _results[_drawDate].special.amout / _results[_drawDate].special.winners.length;\r\n    \t    for(uint i=0;i<\t_results[_drawDate].special.winners.length; i++){\r\n    \t        transfer(_results[_drawDate].special.winners[i], _prize);\r\n    \t    }\r\n    \t    emit logAward(\r\n                \"Special prize\",\r\n                _drawDate,\r\n        \t\t_prize,\r\n        \t\t_results[_drawDate].special.winners,\r\n        \t\t_results[_drawDate].result\r\n            );\r\n\t    }\r\n\t    \r\n\t    if( _results[_drawDate].first.winners.length > 0){\r\n    \t    _prize = _results[_drawDate].first.amout / _results[_drawDate].first.winners.length;\r\n    \t    for(i=0;i<\t_results[_drawDate].first.winners.length; i++){\r\n    \t        transfer(_results[_drawDate].first.winners[i], _prize);\r\n    \t    }\r\n    \t    emit logAward(\r\n                \"First prize\",\r\n                _drawDate,\r\n        \t\t_prize,\r\n        \t\t_results[_drawDate].first.winners,\r\n        \t\t_results[_drawDate].result\r\n            );\r\n\t    }\r\n\t    if( _results[_drawDate].second.winners.length > 0){\r\n    \t    _prize = _results[_drawDate].second.amout / _results[_drawDate].second.winners.length;\r\n    \t    for(i=0;i<\t_results[_drawDate].second.winners.length; i++){\r\n    \t        transfer(_results[_drawDate].second.winners[i], _prize);\r\n    \t    }\r\n    \t    emit logAward(\r\n                \"Second prize\",\r\n                _drawDate,\r\n        \t\t_prize,\r\n        \t\t_results[_drawDate].second.winners,\r\n        \t\t_results[_drawDate].result\r\n            );\r\n\t    }\r\n\t    \r\n\t    if( _results[_drawDate].third.winners.length > 0){\r\n    \t    _prize = _results[_drawDate].third.amout / _results[_drawDate].third.winners.length;\r\n    \t    for(i=0;i<\t_results[_drawDate].third.winners.length; i++){\r\n    \t        transfer(_results[_drawDate].third.winners[i], _prize);\r\n    \t    }\r\n    \t    emit logAward(\r\n                \"Third prize\",\r\n                _drawDate,\r\n        \t\t_prize,\r\n        \t\t_results[_drawDate].third.winners,\r\n        \t\t_results[_drawDate].result\r\n            );\r\n\t    }\r\n\t    _results[_drawDate].hadAward = true;\r\n\t}\r\n\t\r\n\r\n\tfunction getRevenue(uint32 _drawDate) private view returns(uint _revenue){\r\n\t    for(uint i=0; i< _draws[_drawDate].count; i++){\r\n\t\t\t_revenue += tickets[_draws[_drawDate].tickets[i]].price;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tfunction resetDraws(uint32 _drawDate)\r\n\tonlyOwner\r\n\tpublic\r\n\t{\r\n\t    require(_results[_drawDate].hadDraws);\r\n\t    require(!_results[_drawDate].hadAward);\r\n\t\tdelete  _results[_drawDate];\r\n\t}\r\n\t\r\n\tfunction setAmoutPrize(uint32 _drawDate,uint8[5] _result)\r\n\tprivate\r\n\t{\r\n\t    //send coin to prize wallets\r\n\t\tuint revenue = getRevenue(_drawDate);\r\n\t\tuint _prizeAmout;\r\n\t\t//send value to system sale\r\n\t\ttransfer(SystemSale,(revenue * ticketInfo.sales / 100));\r\n\t\t//if had special prize\r\n\t\t_prizeAmout = (revenue * ticketInfo.specialPrize / 100);\r\n\t\tif(\t_results[_drawDate].special.winners.length == 0){\r\n\t\t    transfer(prizes.special,_prizeAmout);\r\n\t\t}else{\r\n\t\t    _results[_drawDate].special.amout = _prizeAmout + balanceOf(prizes.special);\r\n\t\t    clear(prizes.special);\r\n\t\t    emit logGetPrize(\r\n\t\t            \"Special\",\r\n\t\t            _drawDate,\r\n\t\t            _results[_drawDate].special.amout,\r\n\t\t            _results[_drawDate].special.winners,\r\n\t\t            _result\r\n\t\t            \r\n\t\t    );\r\n\t\t}\r\n\t\t\r\n\t\t//if had First prize\r\n\t\t_prizeAmout = (revenue * ticketInfo.firstPrize / 100);\r\n\t\tif(\t_results[_drawDate].first.winners.length == 0){\r\n\t\t    transfer(prizes.first,_prizeAmout);\r\n\t\t}else{\r\n\t\t    _results[_drawDate].first.amout = _prizeAmout + balanceOf(prizes.first);\r\n\t\t    clear(prizes.first);\r\n\t\t    emit logGetPrize(\r\n\t\t            \"First prize\",\r\n\t\t            _drawDate,\r\n\t\t            _results[_drawDate].first.amout,\r\n\t\t            _results[_drawDate].first.winners,\r\n\t\t            _result\r\n\t\t            \r\n\t\t    );\r\n\t\t}\r\n\t\t\r\n\t\t//if had seconds prize\r\n\t\t_prizeAmout = (revenue * ticketInfo.secondPrize / 100);\r\n\t\tif(\t_results[_drawDate].second.winners.length == 0){\r\n\t\t    transfer(prizes.second,_prizeAmout);\r\n\t\t}else{\r\n\t\t    _results[_drawDate].second.amout = _prizeAmout + balanceOf(prizes.second);\r\n\t\t    clear(prizes.second);\r\n\t\t    emit logGetPrize(\r\n\t\t            \"Second prize\",\r\n\t\t            _drawDate,\r\n\t\t            _results[_drawDate].second.amout,\r\n\t\t            _results[_drawDate].second.winners,\r\n\t\t            _result\r\n\t\t            \r\n\t\t    );\r\n\t\t}\r\n\t\t\r\n\t\t//if had third prize\r\n\t\t_prizeAmout = (revenue * ticketInfo.thirdPrize / 100);\r\n\t\tif(\t_results[_drawDate].third.winners.length == 0){\r\n\t\t   transfer(prizes.third,_prizeAmout);\r\n\t\t}else{\r\n\t\t    _results[_drawDate].third.amout = _prizeAmout + balanceOf(prizes.third);\r\n\t\t    clear(prizes.third);\r\n\t\t    emit logGetPrize(\r\n\t\t            \"Third prize\",\r\n\t\t            _drawDate,\r\n\t\t            _results[_drawDate].third.amout,\r\n\t\t            _results[_drawDate].third.winners,\r\n\t\t            _result\r\n\t\t            \r\n\t\t    );\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction checkTicket(uint32 _ticketId, uint8[5] _result)\r\n\tprivate\r\n\tview\r\n\treturns(uint8 _prize)\r\n\t{\r\n\t\t//check red ball\r\n\t\tif(_result[4] != tickets[_ticketId].redBall){\r\n\t\t\t_prize = 0;\r\n\t\t\treturn _prize;\r\n\t\t}\r\n\t\t_prize = 1;\r\n\t\t//check white ball 1\r\n\t\tfor(uint8 i=0;i<4; i++){\r\n\t\t\tif(_result[i] == tickets[_ticketId].ball1){\r\n\t\t\t\t_prize ++;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//check white ball 2\r\n\t\tfor(i=0;i<4; i++){\r\n\t\t\tif(_result[i] == tickets[_ticketId].ball2){\r\n\t\t\t\t_prize ++;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//check white ball 3\r\n\t\tfor(i=0;i<4; i++){\r\n\t\t\tif(_result[i] == tickets[_ticketId].ball3){\r\n\t\t\t\t_prize ++;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//check white ball 4\r\n\t\tfor(i=0;i<4; i++){\r\n\t\t\tif(_result[i] == tickets[_ticketId].ball4){\r\n\t\t\t\t_prize ++;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn _prize;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction viewResult(uint32 _drawDate)\r\n\tpublic\r\n\tview\r\n\treturns(uint _revenue, string _special, string _first, string _second,string _third, string _result, bool _wasDrawn, bool _wasAwarded)\r\n\t{\r\n\t\tLotteryResults memory dr = _results[_drawDate];\r\n\t\tuint8 i;\r\n\t\t\r\n\t\t_revenue = getRevenue(_drawDate);\r\n\t\t\r\n\t\t_special = _special.add(uint2str(dr.special.amout)).add(\" / \").add(uint2str(dr.special.winners.length));\r\n\t\t_first = _first.add(uint2str(dr.first.amout)).add(\" / \").add(uint2str(dr.first.winners.length));\r\n\t\t_second = _second.add(uint2str(dr.second.amout)).add(\" / \").add(uint2str(dr.second.winners.length));\r\n\t\t_third = _third.add(uint2str(dr.third.amout)).add(\" / \").add(uint2str(dr.third.winners.length));\r\n\t\t\r\n\t\tfor(i=0; i< dr.result.length; i++){\r\n\t\t\t_result = _result.append(uint2str(dr.result[i]));\r\n\t\t}\r\n\t\t_wasDrawn = dr.hadDraws;\r\n\t\t_wasAwarded = dr.hadAward;\r\n\t}\r\n\t\r\n\r\n\tfunction ViewCumulativeAward()\r\n\tpublic\r\n\tview\r\n\treturns(uint _special, uint _first, uint _second, uint _third)\r\n\t{\r\n\t    _special = balanceOf(prizes.special);\r\n\t    _first = balanceOf(prizes.first);\r\n\t    _second = balanceOf(prizes.second);\r\n\t    _third = balanceOf(prizes.third);\r\n\t}\r\n\t\r\n\t\r\n    \r\n\t\r\n\tfunction viewTicketsInRound(uint32 _drawDate)\r\n\tpublic\r\n\tview\r\n\treturns (uint32 _count, string _tickets, uint _revenue) \r\n\t{\r\n\t    _count = _draws[_drawDate].count;\r\n\t    for(uint i=0; i< _count;i++){\r\n\t        _tickets = _tickets.append(uint2str(_draws[_drawDate].tickets[i]));\r\n\t\t\t_revenue+=  tickets[_draws[_drawDate].tickets[i]].price;\r\n\t    }\r\n\t    return (_count,_tickets,_revenue);\r\n\t}\r\n\t\r\n\tfunction ticketsOfPlayer(address _player, uint32 _drawDate)\r\n\tpublic\r\n\tview\r\n\treturns (uint32 _count, string _tickets) \r\n\t{\r\n\t    for(uint i=0; i<  _draws[_drawDate].count;i++){\r\n\t        if(tickets[_draws[_drawDate].tickets[i]].player == _player){\r\n\t            _count++;\r\n\t            _tickets = _tickets.append(uint2str(_draws[_drawDate].tickets[i]));\r\n\t        }\r\n\t    }\r\n\t    return (_count,_tickets);\r\n\t}\r\n\t\r\n\tfunction ticket(uint _ticketID)\r\n\tpublic\r\n\tview\r\n\treturns(address _player, uint32 _drawDate, uint64 _price, string _balls)\r\n\t{\r\n\t    _player = tickets[_ticketID].player;\r\n\t    _drawDate = tickets[_ticketID].drawDate;\r\n\t    _price = tickets[_ticketID].price;\r\n\t    _balls = _balls.append(uint2str(tickets[_ticketID].ball1))\r\n\t                .append(uint2str(tickets[_ticketID].ball2))\r\n            \t    .append(uint2str(tickets[_ticketID].ball3))\r\n\t                .append(uint2str(tickets[_ticketID].ball4));\r\n\t    _balls = _balls.append(uint2str(tickets[_ticketID].redBall));\r\n\t}\r\n\t\r\n\tfunction uint2str(uint i) internal pure returns (string){\r\n\t\tif (i == 0) return \"0\";\r\n\t\tuint j = i;\r\n\t\tuint length;\r\n\t\twhile (j != 0){\r\n\t\t\tlength++;\r\n\t\t\tj /= 10;\r\n\t\t}\r\n\t\tbytes memory bstr = new bytes(length);\r\n\t\tuint k = length - 1;\r\n\t\twhile (i != 0){\r\n\t\t\tbstr[k--] = byte(48 + i % 10);\r\n\t\t\ti /= 10;\r\n\t\t}\r\n\t\treturn string(bstr);\r\n\t}\r\n\t\r\n\t\r\n\t /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer( address _to, uint256 _value) private returns (bool) {\r\n        require(_to != address(0));\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n        return true;\r\n    }\r\n    \r\n     /**\r\n    * @dev setBalance token for a specified address\r\n    * @param _to The address to set balances to.\r\n    * @param _value The amount to be set balances.\r\n    */\r\n    function setBalance( address _to, uint256 _value) private returns (bool) {\r\n        require(_to != address(0));\r\n\t\tbalances[_to] = _value;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev withdraw token for a specified address\r\n    * @param _from The address to withdraw from.\r\n    * @param _value The amount to be withdraw.\r\n    */\r\n    function withdraw( address _from, uint256 _value) \r\n    public \r\n    onlyOwner\r\n    returns (bool) {\r\n        require(_from != address(0));\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\temit logWithdraw(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev clear reset token for a specified address to zero\r\n    * @param _from The address to withdraw from.\r\n    */\r\n    function clear( address _from) \r\n    private \r\n    onlyOwner returns (bool) {\r\n        require(_from != address(0));\r\n\t\tbalances[_from] = 0;\r\n    \r\n        return true;\r\n    }\r\n   \r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of. \r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\nlibrary Strings {\r\n\tfunction append(string _base, string _value)  internal pure returns (string) {\r\n\t\treturn string(abi.encodePacked(_base,\"[\",_value,\"]\",\" \"));\r\n\t}\r\n\t\r\n\tfunction add(string _base, string _value)  internal pure returns (string) {\r\n\t\treturn string(abi.encodePacked(_base,_value,\" \"));\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_drawDate\",\"type\":\"uint32\"},{\"name\":\"_result\",\"type\":\"uint8[5]\"},{\"name\":\"_special\",\"type\":\"address[]\"},{\"name\":\"_first\",\"type\":\"address[]\"},{\"name\":\"_second\",\"type\":\"address[]\"},{\"name\":\"_third\",\"type\":\"address[]\"}],\"name\":\"setDrawsResult\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizes\",\"outputs\":[{\"name\":\"special\",\"type\":\"address\"},{\"name\":\"first\",\"type\":\"address\"},{\"name\":\"second\",\"type\":\"address\"},{\"name\":\"third\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_drawDate\",\"type\":\"uint32\"}],\"name\":\"resetDraws\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_drawDate\",\"type\":\"uint32\"},{\"name\":\"_result\",\"type\":\"uint8[5]\"}],\"name\":\"doDraws\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_special\",\"type\":\"uint256\"},{\"name\":\"_first\",\"type\":\"uint256\"},{\"name\":\"_second\",\"type\":\"uint256\"},{\"name\":\"_third\",\"type\":\"uint256\"}],\"name\":\"cumulativeAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceTicket\",\"type\":\"uint64\"},{\"name\":\"_specialPrize\",\"type\":\"uint8\"},{\"name\":\"_firstPrize\",\"type\":\"uint8\"},{\"name\":\"_secondPrize\",\"type\":\"uint8\"},{\"name\":\"_thirdPrize\",\"type\":\"uint8\"},{\"name\":\"_commission\",\"type\":\"uint8\"},{\"name\":\"_sales\",\"type\":\"uint8\"}],\"name\":\"setTicketInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_drawDate\",\"type\":\"uint32\"}],\"name\":\"ticketsOfPlayer\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint32\"},{\"name\":\"_tickets\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_drawDate\",\"type\":\"uint32\"}],\"name\":\"viewTicketsInRound\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint32\"},{\"name\":\"_tickets\",\"type\":\"string\"},{\"name\":\"_revenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_drawDate\",\"type\":\"uint32\"},{\"name\":\"_balls\",\"type\":\"uint8[]\"}],\"name\":\"giveTickets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ticketID\",\"type\":\"uint256\"}],\"name\":\"ticket\",\"outputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_drawDate\",\"type\":\"uint32\"},{\"name\":\"_price\",\"type\":\"uint64\"},{\"name\":\"_balls\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_drawDate\",\"type\":\"uint32\"}],\"name\":\"viewResult\",\"outputs\":[{\"name\":\"_revenue\",\"type\":\"uint256\"},{\"name\":\"_special\",\"type\":\"string\"},{\"name\":\"_first\",\"type\":\"string\"},{\"name\":\"_second\",\"type\":\"string\"},{\"name\":\"_third\",\"type\":\"string\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_wasDrawn\",\"type\":\"bool\"},{\"name\":\"_wasAwarded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ViewCumulativeAward\",\"outputs\":[{\"name\":\"_special\",\"type\":\"uint256\"},{\"name\":\"_first\",\"type\":\"uint256\"},{\"name\":\"_second\",\"type\":\"uint256\"},{\"name\":\"_third\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_drawDate\",\"type\":\"uint32\"}],\"name\":\"doAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_drawDate\",\"type\":\"uint32\"},{\"name\":\"_price\",\"type\":\"uint64\"},{\"name\":\"_balls\",\"type\":\"uint8[]\"}],\"name\":\"addTickets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketInfo\",\"outputs\":[{\"name\":\"priceTicket\",\"type\":\"uint64\"},{\"name\":\"specialPrize\",\"type\":\"uint8\"},{\"name\":\"firstPrize\",\"type\":\"uint8\"},{\"name\":\"secondPrize\",\"type\":\"uint8\"},{\"name\":\"thirdPrize\",\"type\":\"uint8\"},{\"name\":\"commission\",\"type\":\"uint8\"},{\"name\":\"sales\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticketId\",\"type\":\"uint32[]\"},{\"indexed\":false,\"name\":\"drawDate\",\"type\":\"uint256\"}],\"name\":\"logBuyTicketSumary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prize\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"drawDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8[5]\"}],\"name\":\"logGetPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prize\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"drawDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8[5]\"}],\"name\":\"logAward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amout\",\"type\":\"uint256\"}],\"name\":\"logWithdraw\",\"type\":\"event\"}]","ContractName":"PowerBall","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aa4743104472ece4cf66f258b9782b3335da9f8c1f7b65f99578c7fbb94854ee"}]}