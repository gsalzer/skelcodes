{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC223Interface {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    function transfer(address to, uint value, bytes data)public ;\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n/**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\n \r\ncontract ERC223ReceivingContract { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n \r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure  returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  \r\n}\r\n\r\ncontract StandardAuth is ERC223Interface {\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOwner(address _newOwner) public onlyOwner{\r\n        owner = _newOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Reference implementation of the ERC223 standard token.\r\n */\r\ncontract StandardToken is StandardAuth {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) balances; // List of user balances.\r\n    mapping(address => bool) optionPoolMembers; //\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 9;\r\n    uint256 public totalSupply;\r\n    uint256 public optionPoolMembersUnlockTime = 1534168800;\r\n    address public optionPool;\r\n    uint256 public optionPoolTotalMax;\r\n    uint256 public optionPoolTotal = 0;\r\n    uint256 public optionPoolMembersAmount = 0;\r\n    \r\n    modifier verifyTheLock {\r\n        if(optionPoolMembers[msg.sender] == true) {\r\n            if(now < optionPoolMembersUnlockTime) {\r\n                revert();\r\n            } else {\r\n                _;\r\n            }\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n    \r\n    // Function to access name of token .\r\n    function name() public view returns (string _name) {\r\n        return name;\r\n    }\r\n    // Function to access symbol of token .\r\n    function symbol() public view returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n    // Function to access decimals of token .\r\n    function decimals() public view returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n    // Function to access total supply of tokens .\r\n    function totalSupply() public view returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n    // Function to access option pool of tokens .\r\n    function optionPool() public view returns (address _optionPool) {\r\n        return optionPool;\r\n    }\r\n    // Function to access option option pool total of tokens .\r\n    function optionPoolTotal() public view returns (uint256 _optionPoolTotal) {\r\n        return optionPoolTotal;\r\n    }\r\n    // Function to access option option pool total max of tokens .\r\n    function optionPoolTotalMax() public view returns (uint256 _optionPoolTotalMax) {\r\n        return optionPoolTotalMax;\r\n    }\r\n    \r\n    function optionPoolBalance() public view returns (uint256 _optionPoolBalance) {\r\n        return balances[optionPool];\r\n    }\r\n    \r\n    function verifyOptionPoolMembers(address _add) public view returns (bool _verifyResults) {\r\n        return optionPoolMembers[_add];\r\n    }\r\n    \r\n    function optionPoolMembersAmount() public view returns (uint _optionPoolMembersAmount) {\r\n        return optionPoolMembersAmount;\r\n    }\r\n    \r\n    function optionPoolMembersUnlockTime() public view returns (uint _optionPoolMembersUnlockTime) {\r\n        return optionPoolMembersUnlockTime;\r\n    }\r\n  \r\n    constructor(uint256 _initialAmount, string _tokenName, string _tokenSymbol, address _tokenOptionPool, uint256 _tokenOptionPoolTotalMax) public  {\r\n        balances[msg.sender] = _initialAmount;               //\r\n        totalSupply = _initialAmount;                        //\r\n        name = _tokenName;                                   //\r\n        symbol = _tokenSymbol;                               //\r\n        optionPool = _tokenOptionPool;\r\n        optionPoolTotalMax = _tokenOptionPoolTotalMax;\r\n    }\r\n   \r\n    function _verifyOptionPoolIncome(address _to, uint _value) private returns (bool _verifyIncomeResults) {\r\n        if(msg.sender == optionPool && _to == owner){\r\n          return false;\r\n        }\r\n        if(_to == optionPool) {\r\n            if(optionPoolTotal + _value <= optionPoolTotalMax){\r\n                optionPoolTotal = optionPoolTotal.add(_value);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function _verifyOptionPoolDefray(address _to) private returns (bool _verifyDefrayResults) {\r\n        if(msg.sender == optionPool) {\r\n            if(optionPoolMembers[_to] != true){\r\n              optionPoolMembers[_to] = true;\r\n              optionPoolMembersAmount++;\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data) public verifyTheLock {\r\n        // Standard function transfer similar to ERC20 transfer with no _data .\r\n        // Added due to backwards compatibility reasons .\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        \r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        require(_verifyOptionPoolIncome(_to, _value));\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        _verifyOptionPoolDefray(_to);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint _value) public verifyTheLock {\r\n        uint codeLength;\r\n        bytes memory empty;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        \r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        require(_verifyOptionPoolIncome(_to, _value));\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        _verifyOptionPoolDefray(_to);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value, empty);\r\n    }\r\n    /**\r\n     * @dev Returns balance of the `_owner`.\r\n     *\r\n     * @param _owner   The address whose balance will be returned.\r\n     * @return balance Balance of the `_owner`.\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionPool\",\"outputs\":[{\"name\":\"_optionPool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionPoolBalance\",\"outputs\":[{\"name\":\"_optionPoolBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"verifyOptionPoolMembers\",\"outputs\":[{\"name\":\"_verifyResults\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionPoolMembersAmount\",\"outputs\":[{\"name\":\"_optionPoolMembersAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionPoolMembersUnlockTime\",\"outputs\":[{\"name\":\"_optionPoolMembersUnlockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionPoolTotal\",\"outputs\":[{\"name\":\"_optionPoolTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionPoolTotalMax\",\"outputs\":[{\"name\":\"_optionPoolTotalMax\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_tokenOptionPool\",\"type\":\"address\"},{\"name\":\"_tokenOptionPoolTotalMax\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"StandardToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000a688906bd8b0000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000066c2c9a72d737b137653a31d2be44bbbd2d5f3490000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000000000000000000013446576656c6f706d656e7454657374436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034454430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://0d1a6a77654865d86a57d3f643b4477b88b7bdbd5681734f1a5c3d335c1d0e3b"}]}