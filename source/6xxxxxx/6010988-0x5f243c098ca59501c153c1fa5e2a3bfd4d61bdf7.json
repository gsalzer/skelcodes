{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * @dev Supports unlimited numbers of roles and addresses.\r\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    emit RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    emit RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ethereum price feed\r\n * @dev Keeps the current ETH price in USD cents to use by crowdsale contracts.\r\n * Price kept up to date by external script polling exchanges tickers\r\n * @author OnGrid Systems\r\n */\r\ncontract PriceOracle is RBAC {\r\n  using SafeMath for uint256;\r\n\r\n  // Average ETH price in USD cents\r\n  uint256 public ethPriceInCents;\r\n\r\n  // The change limit in percent.\r\n  // Provides basic protection from erroneous input.\r\n  uint256 public allowedOracleChangePercent;\r\n\r\n  // Roles in the oracle\r\n  string public constant ROLE_ADMIN = \"admin\";\r\n  string public constant ROLE_ORACLE = \"oracle\";\r\n\r\n  /**\r\n   * @dev modifier to scope access to admins\r\n   * // reverts if called not by admin\r\n   */\r\n  modifier onlyAdmin()\r\n  {\r\n    checkRole(msg.sender, ROLE_ADMIN);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to price keeping oracles (scripts polling exchanges)\r\n   * // reverts if called not by oracle\r\n   */\r\n  modifier onlyOracle()\r\n  {\r\n    checkRole(msg.sender, ROLE_ORACLE);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Initializes oracle contract\r\n   * @param _initialEthPriceInCents Initial Ethereum price in USD cents\r\n   * @param _allowedOracleChangePercent Percent of change allowed per single request\r\n   */\r\n  constructor(\r\n    uint256 _initialEthPriceInCents,\r\n    uint256 _allowedOracleChangePercent\r\n  ) public {\r\n    ethPriceInCents = _initialEthPriceInCents;\r\n    allowedOracleChangePercent = _allowedOracleChangePercent;\r\n    addRole(msg.sender, ROLE_ADMIN);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts ETH (wei) to USD cents\r\n   * @param _wei amount of wei (10e-18 ETH)\r\n   * @return cents amount\r\n   */\r\n  function getUsdCentsFromWei(uint256 _wei) public view returns (uint256) {\r\n    return _wei.mul(ethPriceInCents).div(1 ether);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts USD cents to wei\r\n   * @param _usdCents amount\r\n   * @return wei amount\r\n   */\r\n  function getWeiFromUsdCents(uint256 _usdCents)\r\n    public view returns (uint256)\r\n  {\r\n    return _usdCents.mul(1 ether).div(ethPriceInCents);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets current ETH price in cents\r\n   * @param _cents USD cents\r\n   */\r\n  function setEthPrice(uint256 _cents)\r\n    public\r\n    onlyOracle\r\n  {\r\n    uint256 maxCents = allowedOracleChangePercent.add(100)\r\n    .mul(ethPriceInCents).div(100);\r\n    uint256 minCents = SafeMath.sub(100,allowedOracleChangePercent)\r\n    .mul(ethPriceInCents).div(100);\r\n    require(\r\n      _cents <= maxCents && _cents >= minCents,\r\n      \"Price out of allowed range\"\r\n    );\r\n    ethPriceInCents = _cents;\r\n  }\r\n\r\n  /**\r\n   * @dev Add admin role to an address\r\n   * @param addr address\r\n   */\r\n  function addAdmin(address addr)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    addRole(addr, ROLE_ADMIN);\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke admin privileges from an address\r\n   * @param addr address\r\n   */\r\n  function delAdmin(address addr)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    removeRole(addr, ROLE_ADMIN);\r\n  }\r\n\r\n  /**\r\n   * @dev Add oracle role to an address\r\n   * @param addr address\r\n   */\r\n  function addOracle(address addr)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    addRole(addr, ROLE_ORACLE);\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke oracle role from an address\r\n   * @param addr address\r\n   */\r\n  function delOracle(address addr)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    removeRole(addr, ROLE_ORACLE);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_cents\",\"type\":\"uint256\"}],\"name\":\"setEthPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"getUsdCentsFromWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPriceInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedOracleChangePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_usdCents\",\"type\":\"uint256\"}],\"name\":\"getWeiFromUsdCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ORACLE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialEthPriceInCents\",\"type\":\"uint256\"},{\"name\":\"_allowedOracleChangePercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"}]","ContractName":"PriceOracle","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000b6e10000000000000000000000000000000000000000000000000000000000000014","Library":"","SwarmSource":"bzzr://f7cf58a35531d3866c0b5daf4655a1ee860bf6faa0c46eecac61f17585e9c65b"}]}