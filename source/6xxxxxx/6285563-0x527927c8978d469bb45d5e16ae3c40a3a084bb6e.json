{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity^0.4.11;\r\n\r\nlibrary DLL {\r\n\r\n  uint constant NULL_NODE_ID = 0;\r\n\r\n  struct Node {\r\n    uint next;\r\n    uint prev;\r\n  }\r\n\r\n  struct Data {\r\n    mapping(uint => Node) dll;\r\n  }\r\n\r\n  function isEmpty(Data storage self) public view returns (bool) {\r\n    return getStart(self) == NULL_NODE_ID;\r\n  }\r\n\r\n  function contains(Data storage self, uint _curr) public view returns (bool) {\r\n    if (isEmpty(self) || _curr == NULL_NODE_ID) {\r\n      return false;\r\n    } \r\n\r\n    bool isSingleNode = (getStart(self) == _curr) && (getEnd(self) == _curr);\r\n    bool isNullNode = (getNext(self, _curr) == NULL_NODE_ID) && (getPrev(self, _curr) == NULL_NODE_ID);\r\n    return isSingleNode || !isNullNode;\r\n  }\r\n\r\n  function getNext(Data storage self, uint _curr) public view returns (uint) {\r\n    return self.dll[_curr].next;\r\n  }\r\n\r\n  function getPrev(Data storage self, uint _curr) public view returns (uint) {\r\n    return self.dll[_curr].prev;\r\n  }\r\n\r\n  function getStart(Data storage self) public view returns (uint) {\r\n    return getNext(self, NULL_NODE_ID);\r\n  }\r\n\r\n  function getEnd(Data storage self) public view returns (uint) {\r\n    return getPrev(self, NULL_NODE_ID);\r\n  }\r\n\r\n  /**\r\n  @dev Inserts a new node between _prev and _next. When inserting a node already existing in \r\n  the list it will be automatically removed from the old position.\r\n  @param _prev the node which _new will be inserted after\r\n  @param _curr the id of the new node being inserted\r\n  @param _next the node which _new will be inserted before\r\n  */\r\n  function insert(Data storage self, uint _prev, uint _curr, uint _next) public {\r\n    require(_curr != NULL_NODE_ID);\r\n\r\n    remove(self, _curr);\r\n\r\n    require(_prev == NULL_NODE_ID || contains(self, _prev));\r\n    require(_next == NULL_NODE_ID || contains(self, _next));\r\n\r\n    require(getNext(self, _prev) == _next);\r\n    require(getPrev(self, _next) == _prev);\r\n\r\n    self.dll[_curr].prev = _prev;\r\n    self.dll[_curr].next = _next;\r\n\r\n    self.dll[_prev].next = _curr;\r\n    self.dll[_next].prev = _curr;\r\n  }\r\n\r\n  function remove(Data storage self, uint _curr) public {\r\n    if (!contains(self, _curr)) {\r\n      return;\r\n    }\r\n\r\n    uint next = getNext(self, _curr);\r\n    uint prev = getPrev(self, _curr);\r\n\r\n    self.dll[next].prev = prev;\r\n    self.dll[prev].next = next;\r\n\r\n    delete self.dll[_curr];\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"DLL.Data storage\"},{\"name\":\"_curr\",\"type\":\"uint256\"}],\"name\":\"getNext\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"DLL.Data storage\"},{\"name\":\"_curr\",\"type\":\"uint256\"}],\"name\":\"getPrev\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"DLL.Data storage\"},{\"name\":\"_curr\",\"type\":\"uint256\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"DLL.Data storage\"},{\"name\":\"_curr\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"DLL.Data storage\"}],\"name\":\"getEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"DLL.Data storage\"},{\"name\":\"_prev\",\"type\":\"uint256\"},{\"name\":\"_curr\",\"type\":\"uint256\"},{\"name\":\"_next\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"DLL.Data storage\"}],\"name\":\"isEmpty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"DLL.Data storage\"}],\"name\":\"getStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DLL","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://63534b1924ed9151219b6a6e315f1394fc3c846bbf7d4b8bb95b88111bf25dd8"}]}