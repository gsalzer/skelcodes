{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/controller/Reputation.sol\r\n\r\n/**\r\n * @title Reputation system\r\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\r\n * A reputation is use to assign influence measure to a DAO'S peers.\r\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\r\n * The Reputation contract maintain a map of address to reputation value.\r\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\r\n */\r\n\r\ncontract Reputation is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    mapping (address => uint256) public balances;\r\n    uint256 public totalSupply;\r\n    uint public decimals = 18;\r\n\r\n    // Event indicating minting of reputation to an address.\r\n    event Mint(address indexed _to, uint256 _amount);\r\n    // Event indicating burning of reputation for an address.\r\n    event Burn(address indexed _from, uint256 _amount);\r\n\r\n    /**\r\n    * @dev return the reputation amount of a given owner\r\n    * @param _owner an address of the owner which we want to get his reputation\r\n    */\r\n    function reputationOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Generates `_amount` of reputation that are assigned to `_to`\r\n    * @param _to The address that will be assigned the new reputation\r\n    * @param _amount The quantity of reputation to be generated\r\n    * @return True if the reputation are generated correctly\r\n    */\r\n    function mint(address _to, uint _amount)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n    {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burns `_amount` of reputation from `_from`\r\n    * if _amount tokens to burn > balances[_from] the balance of _from will turn to zero.\r\n    * @param _from The address that will lose the reputation\r\n    * @param _amount The quantity of reputation to burn\r\n    * @return True if the reputation are burned correctly\r\n    */\r\n    function burn(address _from, uint _amount)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n    {\r\n        uint amountMinted = _amount;\r\n        if (balances[_from] < _amount) {\r\n            amountMinted = balances[_from];\r\n        }\r\n        totalSupply = totalSupply.sub(amountMinted);\r\n        balances[_from] = balances[_from].sub(amountMinted);\r\n        emit Burn(_from, amountMinted);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC827/ERC827.sol\r\n\r\n/**\r\n * @title ERC827 interface, an extension of ERC20 token standard\r\n *\r\n * @dev Interface of a ERC827 token, following the ERC20 standard with extra\r\n * methods to transfer value and data and execute calls in transfers and\r\n * approvals.\r\n */\r\ncontract ERC827 is ERC20 {\r\n\r\n    function approveAndCall(address _spender,uint256 _value,bytes _data) public payable returns(bool);\r\n\r\n    function transferAndCall(address _to,uint256 _value,bytes _data) public payable returns(bool);\r\n\r\n    function transferFromAndCall(address _from,address _to,uint256 _value,bytes _data) public payable returns(bool);\r\n\r\n}\r\n\r\n// File: contracts/token/ERC827/ERC827Token.sol\r\n\r\n/* solium-disable security/no-low-level-calls */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC827, an extension of ERC20 token standard\r\n *\r\n * @dev Implementation the ERC827, following the ERC20 standard with extra\r\n * methods to transfer value and data and execute calls in transfers and\r\n * approvals. Uses OpenZeppelin StandardToken.\r\n */\r\ncontract ERC827Token is ERC827, StandardToken {\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. It allows to\r\n   * approve the transfer of value and execute a call with the sent data.\r\n   * Beware that changing an allowance with this method brings the risk that\r\n   * someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race condition\r\n   * is to first reduce the spender's allowance to 0 and set the desired value\r\n   * afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address that will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   * @param _data ABI-encoded contract call to call `_spender` address.\r\n   * @return true if the call function was executed successfully\r\n   */\r\n    function approveAndCall(\r\n        address _spender,\r\n        uint256 _value,\r\n        bytes _data\r\n    )\r\n    public\r\n    payable\r\n    returns (bool)\r\n    {\r\n        require(_spender != address(this));\r\n\r\n        super.approve(_spender, _value);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_spender.call.value(msg.value)(_data));\r\n\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\r\n   * address and execute a call with the sent data on the same transaction\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   * @param _data ABI-encoded contract call to call `_to` address.\r\n   * @return true if the call function was executed successfully\r\n   */\r\n    function transferAndCall(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data\r\n    )\r\n    public\r\n    payable\r\n    returns (bool)\r\n    {\r\n        require(_to != address(this));\r\n\r\n        super.transfer(_to, _value);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_to.call.value(msg.value)(_data));\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\r\n   * another and make a contract call on the same transaction\r\n   * @param _from The address which you want to send tokens from\r\n   * @param _to The address which you want to transfer to\r\n   * @param _value The amout of tokens to be transferred\r\n   * @param _data ABI-encoded contract call to call `_to` address.\r\n   * @return true if the call function was executed successfully\r\n   */\r\n    function transferFromAndCall(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data\r\n    )\r\n    public payable returns (bool)\r\n    {\r\n        require(_to != address(this));\r\n\r\n        super.transferFrom(_from, _to, _value);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_to.call.value(msg.value)(_data));\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Addition to StandardToken methods. Increase the amount of tokens that\r\n   * an owner allowed to a spender and execute a call with the sent data.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   * @param _data ABI-encoded contract call to call `_spender` address.\r\n   */\r\n    function increaseApprovalAndCall(\r\n        address _spender,\r\n        uint _addedValue,\r\n        bytes _data\r\n    )\r\n    public\r\n    payable\r\n    returns (bool)\r\n    {\r\n        require(_spender != address(this));\r\n\r\n        super.increaseApproval(_spender, _addedValue);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_spender.call.value(msg.value)(_data));\r\n\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\r\n   * an owner allowed to a spender and execute a call with the sent data.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   * @param _data ABI-encoded contract call to call `_spender` address.\r\n   */\r\n    function decreaseApprovalAndCall(\r\n        address _spender,\r\n        uint _subtractedValue,\r\n        bytes _data\r\n    )\r\n    public\r\n    payable\r\n    returns (bool)\r\n    {\r\n        require(_spender != address(this));\r\n\r\n        super.decreaseApproval(_spender, _subtractedValue);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_spender.call.value(msg.value)(_data));\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/controller/DAOToken.sol\r\n\r\n/**\r\n * @title DAOToken, base on zeppelin contract.\r\n * @dev ERC20 compatible token. It is a mintable, destructible, burnable token.\r\n */\r\n\r\ncontract DAOToken is ERC827Token,MintableToken,BurnableToken {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    // solium-disable-next-line uppercase\r\n    uint8 public constant decimals = 18;\r\n    uint public cap;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * @param _name - token name\r\n    * @param _symbol - token symbol\r\n    * @param _cap - token cap - 0 value means no cap\r\n    */\r\n    constructor(string _name, string _symbol,uint _cap) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        if (cap > 0)\r\n            require(totalSupply_.add(_amount) <= cap);\r\n        return super.mint(_to, _amount);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Avatar.sol\r\n\r\n/**\r\n * @title An Avatar holds tokens, reputation and ether for a controller\r\n */\r\ncontract Avatar is Ownable {\r\n    bytes32 public orgName;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n\r\n    event GenericAction(address indexed _action, bytes32[] _params);\r\n    event SendEther(uint _amountInWei, address indexed _to);\r\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint _value);\r\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint _value);\r\n    event ExternalTokenIncreaseApproval(StandardToken indexed _externalToken, address _spender, uint _addedValue);\r\n    event ExternalTokenDecreaseApproval(StandardToken indexed _externalToken, address _spender, uint _subtractedValue);\r\n    event ReceiveEther(address indexed _sender, uint _value);\r\n\r\n    /**\r\n    * @dev the constructor takes organization name, native token and reputation system\r\n    and creates an avatar for a controller\r\n    */\r\n    constructor(bytes32 _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\r\n        orgName = _orgName;\r\n        nativeToken = _nativeToken;\r\n        nativeReputation = _nativeReputation;\r\n    }\r\n\r\n    /**\r\n    * @dev enables an avatar to receive ethers\r\n    */\r\n    function() public payable {\r\n        emit ReceiveEther(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @return the return bytes of the called contract's function.\r\n    */\r\n    function genericCall(address _contract,bytes _data) public onlyOwner {\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        bool result = _contract.call(_data);\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n        // Copy the returned data.\r\n        returndatacopy(0, 0, returndatasize)\r\n\r\n        switch result\r\n        // call returns 0 on error.\r\n        case 0 { revert(0, returndatasize) }\r\n        default { return(0, returndatasize) }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev send ethers from the avatar's wallet\r\n    * @param _amountInWei amount to send in Wei units\r\n    * @param _to send the ethers to this address\r\n    * @return bool which represents success\r\n    */\r\n    function sendEther(uint _amountInWei, address _to) public onlyOwner returns(bool) {\r\n        _to.transfer(_amountInWei);\r\n        emit SendEther(_amountInWei, _to);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer\r\n    * @param _externalToken the token contract\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        _externalToken.transfer(_to, _value);\r\n        emit ExternalTokenTransfer(_externalToken, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer from a specific account\r\n    * @param _externalToken the token contract\r\n    * @param _from the account to spend token from\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransferFrom(\r\n        StandardToken _externalToken,\r\n        address _from,\r\n        address _to,\r\n        uint _value\r\n    )\r\n    public onlyOwner returns(bool)\r\n    {\r\n        _externalToken.transferFrom(_from, _to, _value);\r\n        emit ExternalTokenTransferFrom(_externalToken, _from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev increase approval for the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        _externalToken.increaseApproval(_spender, _addedValue);\r\n        emit ExternalTokenIncreaseApproval(_externalToken, _spender, _addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev decrease approval for the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue )\r\n    public onlyOwner returns(bool)\r\n    {\r\n        _externalToken.decreaseApproval(_spender, _subtractedValue);\r\n        emit ExternalTokenDecreaseApproval(_externalToken,_spender, _subtractedValue);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/globalConstraints/GlobalConstraintInterface.sol\r\n\r\ncontract GlobalConstraintInterface {\r\n\r\n    enum CallPhase { Pre, Post,PreAndPost }\r\n\r\n    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    /**\r\n     * @dev when return if this globalConstraints is pre, post or both.\r\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\r\n     */\r\n    function when() public returns(CallPhase);\r\n}\r\n\r\n// File: contracts/controller/ControllerInterface.sol\r\n\r\n/**\r\n * @title Controller contract\r\n * @dev A controller controls the organizations tokens ,reputation and avatar.\r\n * It is subject to a set of schemes and constraints that determine its behavior.\r\n * Each scheme has it own parameters and operation permissions.\r\n */\r\ninterface ControllerInterface {\r\n\r\n    /**\r\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\r\n     * @param  _amount amount of reputation to mint\r\n     * @param _to beneficiary address\r\n     * @return bool which represents a success\r\n    */\r\n    function mintReputation(uint256 _amount, address _to,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev Burns `_amount` of reputation from `_from`\r\n     * @param _amount amount of reputation to burn\r\n     * @param _from The address that will lose the reputation\r\n     * @return bool which represents a success\r\n     */\r\n    function burnReputation(uint256 _amount, address _from,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev mint tokens .\r\n     * @param  _amount amount of token to mint\r\n     * @param _beneficiary beneficiary address\r\n     * @param _avatar address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintTokens(uint256 _amount, address _beneficiary,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n  /**\r\n   * @dev register or update a scheme\r\n   * @param _scheme the address of the scheme\r\n   * @param _paramsHash a hashed configuration of the usage of the scheme\r\n   * @param _permissions the permissions the new scheme will have\r\n   * @param _avatar address\r\n   * @return bool which represents a success\r\n   */\r\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev unregister a scheme\r\n     * @param _avatar address\r\n     * @param _scheme the address of the scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterScheme(address _scheme,address _avatar)\r\n    external\r\n    returns(bool);\r\n    /**\r\n     * @dev unregister the caller's scheme\r\n     * @param _avatar address\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterSelf(address _avatar) external returns(bool);\r\n\r\n    function isSchemeRegistered( address _scheme,address _avatar) external view returns(bool);\r\n\r\n    function getSchemeParameters(address _scheme,address _avatar) external view returns(bytes32);\r\n\r\n    function getGlobalConstraintParameters(address _globalConstraint,address _avatar) external view returns(bytes32);\r\n\r\n    function getSchemePermissions(address _scheme,address _avatar) external view returns(bytes4);\r\n\r\n    /**\r\n     * @dev globalConstraintsCount return the global constraint pre and post count\r\n     * @return uint globalConstraintsPre count.\r\n     * @return uint globalConstraintsPost count.\r\n     */\r\n    function globalConstraintsCount(address _avatar) external view returns(uint,uint);\r\n\r\n    function isGlobalConstraintRegistered(address _globalConstraint,address _avatar) external view returns(bool);\r\n\r\n    /**\r\n     * @dev add or update Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be added.\r\n     * @param _params the constraint parameters hash.\r\n     * @param _avatar the avatar of the organization\r\n     * @return bool which represents a success\r\n     */\r\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params,address _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n     * @dev remove Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @param _avatar the organization avatar.\r\n     * @return bool which represents a success\r\n     */\r\n    function removeGlobalConstraint (address _globalConstraint,address _avatar)\r\n    external  returns(bool);\r\n\r\n  /**\r\n    * @dev upgrade the Controller\r\n    *      The function will trigger an event 'UpgradeController'.\r\n    * @param  _newController the address of the new controller.\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function upgradeController(address _newController,address _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _avatar the controller's avatar address\r\n    * @return bytes32  - the return value of the called _contract's function.\r\n    */\r\n    function genericCall(address _contract,bytes _data,address _avatar)\r\n    external\r\n    returns(bytes32);\r\n\r\n  /**\r\n   * @dev send some ether\r\n   * @param _amountInWei the amount of ether (in Wei) to send\r\n   * @param _to address of the beneficiary\r\n   * @param _avatar address\r\n   * @return bool which represents a success\r\n   */\r\n    function sendEther(uint _amountInWei, address _to,address _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n    * @dev send some amount of arbitrary ERC20 Tokens\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev transfer token \"from\" address \"to\" address\r\n    *      One must to approve the amount of tokens which can be spend from the\r\n    *      \"from\" account.This can be done using externalTokenApprove.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _from address of the account to send from\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransferFrom(StandardToken _externalToken, address _from, address _to, uint _value,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev increase approval for the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev decrease approval for the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev getNativeReputation\r\n     * @param _avatar the organization avatar.\r\n     * @return organization native reputation\r\n     */\r\n    function getNativeReputation(address _avatar)\r\n    external\r\n    view\r\n    returns(address);\r\n}\r\n\r\n// File: contracts/controller/Controller.sol\r\n\r\n/**\r\n * @title Controller contract\r\n * @dev A controller controls the organizations tokens,reputation and avatar.\r\n * It is subject to a set of schemes and constraints that determine its behavior.\r\n * Each scheme has it own parameters and operation permissions.\r\n */\r\ncontract Controller is ControllerInterface {\r\n\r\n    struct Scheme {\r\n        bytes32 paramsHash;  // a hash \"configuration\" of the scheme\r\n        bytes4  permissions; // A bitwise flags of permissions,\r\n                             // All 0: Not registered,\r\n                             // 1st bit: Flag if the scheme is registered,\r\n                             // 2nd bit: Scheme can register other schemes\r\n                             // 3rd bit: Scheme can add/remove global constraints\r\n                             // 4th bit: Scheme can upgrade the controller\r\n                             // 5th bit: Scheme can call genericCall on behalf of\r\n                             //          the organization avatar\r\n    }\r\n\r\n    struct GlobalConstraint {\r\n        address gcAddress;\r\n        bytes32 params;\r\n    }\r\n\r\n    struct GlobalConstraintRegister {\r\n        bool isRegistered; //is registered\r\n        uint index;    //index at globalConstraints\r\n    }\r\n\r\n    mapping(address=>Scheme) public schemes;\r\n\r\n    Avatar public avatar;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n  // newController will point to the new controller after the present controller is upgraded\r\n    address public newController;\r\n  // globalConstraintsPre that determine pre conditions for all actions on the controller\r\n\r\n    GlobalConstraint[] public globalConstraintsPre;\r\n  // globalConstraintsPost that determine post conditions for all actions on the controller\r\n    GlobalConstraint[] public globalConstraintsPost;\r\n  // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a pre global constraint\r\n    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPre;\r\n  // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a post global constraint\r\n    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPost;\r\n\r\n    event MintReputation (address indexed _sender, address indexed _to, uint256 _amount);\r\n    event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount);\r\n    event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount);\r\n    event RegisterScheme (address indexed _sender, address indexed _scheme);\r\n    event UnregisterScheme (address indexed _sender, address indexed _scheme);\r\n    event GenericAction (address indexed _sender, bytes32[] _params);\r\n    event SendEther (address indexed _sender, uint _amountInWei, address indexed _to);\r\n    event ExternalTokenTransfer (address indexed _sender, address indexed _externalToken, address indexed _to, uint _value);\r\n    event ExternalTokenTransferFrom (address indexed _sender, address indexed _externalToken, address _from, address _to, uint _value);\r\n    event ExternalTokenIncreaseApproval (address indexed _sender, StandardToken indexed _externalToken, address _spender, uint _value);\r\n    event ExternalTokenDecreaseApproval (address indexed _sender, StandardToken indexed _externalToken, address _spender, uint _value);\r\n    event UpgradeController(address indexed _oldController,address _newController);\r\n    event AddGlobalConstraint(address indexed _globalConstraint, bytes32 _params,GlobalConstraintInterface.CallPhase _when);\r\n    event RemoveGlobalConstraint(address indexed _globalConstraint ,uint256 _index,bool _isPre);\r\n    event GenericCall(address indexed _contract,bytes _data);\r\n\r\n    constructor( Avatar _avatar) public\r\n    {\r\n        avatar = _avatar;\r\n        nativeToken = avatar.nativeToken();\r\n        nativeReputation = avatar.nativeReputation();\r\n        schemes[msg.sender] = Scheme({paramsHash: bytes32(0),permissions: bytes4(0x1F)});\r\n    }\r\n\r\n  // Do not allow mistaken calls:\r\n    function() external {\r\n        revert();\r\n    }\r\n\r\n  // Modifiers:\r\n    modifier onlyRegisteredScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(1) == bytes4(1));\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegisteringSchemes() {\r\n        require(schemes[msg.sender].permissions&bytes4(2) == bytes4(2));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGlobalConstraintsScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(4) == bytes4(4));\r\n        _;\r\n    }\r\n\r\n    modifier onlyUpgradingScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(8) == bytes4(8));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGenericCallScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(16) == bytes4(16));\r\n        _;\r\n    }\r\n\r\n    modifier onlySubjectToConstraint(bytes32 func) {\r\n        uint idx;\r\n        for (idx = 0;idx<globalConstraintsPre.length;idx++) {\r\n            require((GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress)).pre(msg.sender,globalConstraintsPre[idx].params,func));\r\n        }\r\n        _;\r\n        for (idx = 0;idx<globalConstraintsPost.length;idx++) {\r\n            require((GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress)).post(msg.sender,globalConstraintsPost[idx].params,func));\r\n        }\r\n    }\r\n\r\n    modifier isAvatarValid(address _avatar) {\r\n        require(_avatar == address(avatar));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\r\n     * @param  _amount amount of reputation to mint\r\n     * @param _to beneficiary address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintReputation(uint256 _amount, address _to,address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"mintReputation\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit MintReputation(msg.sender, _to, _amount);\r\n        return nativeReputation.mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns `_amount` of reputation from `_from`\r\n     * @param _amount amount of reputation to burn\r\n     * @param _from The address that will lose the reputation\r\n     * @return bool which represents a success\r\n     */\r\n    function burnReputation(uint256 _amount, address _from,address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"burnReputation\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit BurnReputation(msg.sender, _from, _amount);\r\n        return nativeReputation.burn(_from, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev mint tokens .\r\n     * @param  _amount amount of token to mint\r\n     * @param _beneficiary beneficiary address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintTokens(uint256 _amount, address _beneficiary,address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"mintTokens\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit MintTokens(msg.sender, _beneficiary, _amount);\r\n        return nativeToken.mint(_beneficiary, _amount);\r\n    }\r\n\r\n  /**\r\n   * @dev register a scheme\r\n   * @param _scheme the address of the scheme\r\n   * @param _paramsHash a hashed configuration of the usage of the scheme\r\n   * @param _permissions the permissions the new scheme will have\r\n   * @return bool which represents a success\r\n   */\r\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions,address _avatar)\r\n    external\r\n    onlyRegisteringSchemes\r\n    onlySubjectToConstraint(\"registerScheme\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n\r\n        Scheme memory scheme = schemes[_scheme];\r\n\r\n    // Check scheme has at least the permissions it is changing, and at least the current permissions:\r\n    // Implementation is a bit messy. One must recall logic-circuits ^^\r\n\r\n    // produces non-zero if sender does not have all of the perms that are changing between old and new\r\n        require(bytes4(0x1F)&(_permissions^scheme.permissions)&(~schemes[msg.sender].permissions) == bytes4(0));\r\n\r\n    // produces non-zero if sender does not have all of the perms in the old scheme\r\n        require(bytes4(0x1F)&(scheme.permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\r\n\r\n    // Add or change the scheme:\r\n        schemes[_scheme].paramsHash = _paramsHash;\r\n        schemes[_scheme].permissions = _permissions|bytes4(1);\r\n        emit RegisterScheme(msg.sender, _scheme);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unregister a scheme\r\n     * @param _scheme the address of the scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterScheme( address _scheme,address _avatar)\r\n    external\r\n    onlyRegisteringSchemes\r\n    onlySubjectToConstraint(\"unregisterScheme\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n    //check if the scheme is registered\r\n        if (schemes[_scheme].permissions&bytes4(1) == bytes4(0)) {\r\n            return false;\r\n          }\r\n    // Check the unregistering scheme has enough permissions:\r\n        require(bytes4(0x1F)&(schemes[_scheme].permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\r\n\r\n    // Unregister:\r\n        emit UnregisterScheme(msg.sender, _scheme);\r\n        delete schemes[_scheme];\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unregister the caller's scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterSelf(address _avatar) external isAvatarValid(_avatar) returns(bool) {\r\n        if (_isSchemeRegistered(msg.sender,_avatar) == false) {\r\n            return false;\r\n        }\r\n        delete schemes[msg.sender];\r\n        emit UnregisterScheme(msg.sender, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function isSchemeRegistered(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bool) {\r\n        return _isSchemeRegistered(_scheme,_avatar);\r\n    }\r\n\r\n    function getSchemeParameters(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bytes32) {\r\n        return schemes[_scheme].paramsHash;\r\n    }\r\n\r\n    function getSchemePermissions(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bytes4) {\r\n        return schemes[_scheme].permissions;\r\n    }\r\n\r\n    function getGlobalConstraintParameters(address _globalConstraint,address) external view returns(bytes32) {\r\n\r\n        GlobalConstraintRegister memory register = globalConstraintsRegisterPre[_globalConstraint];\r\n\r\n        if (register.isRegistered) {\r\n            return globalConstraintsPre[register.index].params;\r\n        }\r\n\r\n        register = globalConstraintsRegisterPost[_globalConstraint];\r\n\r\n        if (register.isRegistered) {\r\n            return globalConstraintsPost[register.index].params;\r\n        }\r\n    }\r\n\r\n   /**\r\n    * @dev globalConstraintsCount return the global constraint pre and post count\r\n    * @return uint globalConstraintsPre count.\r\n    * @return uint globalConstraintsPost count.\r\n    */\r\n    function globalConstraintsCount(address _avatar)\r\n        external\r\n        isAvatarValid(_avatar)\r\n        view\r\n        returns(uint,uint)\r\n        {\r\n        return (globalConstraintsPre.length,globalConstraintsPost.length);\r\n    }\r\n\r\n    function isGlobalConstraintRegistered(address _globalConstraint,address _avatar)\r\n        external\r\n        isAvatarValid(_avatar)\r\n        view\r\n        returns(bool)\r\n        {\r\n        return (globalConstraintsRegisterPre[_globalConstraint].isRegistered || globalConstraintsRegisterPost[_globalConstraint].isRegistered);\r\n    }\r\n\r\n    /**\r\n     * @dev add or update Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be added.\r\n     * @param _params the constraint parameters hash.\r\n     * @return bool which represents a success\r\n     */\r\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params,address _avatar)\r\n    external\r\n    onlyGlobalConstraintsScheme\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\r\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {\r\n                globalConstraintsPre.push(GlobalConstraint(_globalConstraint,_params));\r\n                globalConstraintsRegisterPre[_globalConstraint] = GlobalConstraintRegister(true,globalConstraintsPre.length-1);\r\n            }else {\r\n                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;\r\n            }\r\n        }\r\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {\r\n                globalConstraintsPost.push(GlobalConstraint(_globalConstraint,_params));\r\n                globalConstraintsRegisterPost[_globalConstraint] = GlobalConstraintRegister(true,globalConstraintsPost.length-1);\r\n            }else {\r\n                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;\r\n            }\r\n        }\r\n        emit AddGlobalConstraint(_globalConstraint, _params,when);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @return bool which represents a success\r\n     */\r\n    function removeGlobalConstraint (address _globalConstraint,address _avatar)\r\n    external\r\n    onlyGlobalConstraintsScheme\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        GlobalConstraintRegister memory globalConstraintRegister;\r\n        GlobalConstraint memory globalConstraint;\r\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\r\n        bool retVal = false;\r\n\r\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            globalConstraintRegister = globalConstraintsRegisterPre[_globalConstraint];\r\n            if (globalConstraintRegister.isRegistered) {\r\n                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {\r\n                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];\r\n                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;\r\n                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;\r\n                }\r\n                globalConstraintsPre.length--;\r\n                delete globalConstraintsRegisterPre[_globalConstraint];\r\n                retVal = true;\r\n            }\r\n        }\r\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            globalConstraintRegister = globalConstraintsRegisterPost[_globalConstraint];\r\n            if (globalConstraintRegister.isRegistered) {\r\n                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {\r\n                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];\r\n                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;\r\n                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;\r\n                }\r\n                globalConstraintsPost.length--;\r\n                delete globalConstraintsRegisterPost[_globalConstraint];\r\n                retVal = true;\r\n            }\r\n        }\r\n        if (retVal) {\r\n            emit RemoveGlobalConstraint(_globalConstraint,globalConstraintRegister.index,when == GlobalConstraintInterface.CallPhase.Pre);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n  /**\r\n    * @dev upgrade the Controller\r\n    *      The function will trigger an event 'UpgradeController'.\r\n    * @param  _newController the address of the new controller.\r\n    * @return bool which represents a success\r\n    */\r\n    function upgradeController(address _newController,address _avatar)\r\n    external\r\n    onlyUpgradingScheme\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        require(newController == address(0));   // so the upgrade could be done once for a contract.\r\n        require(_newController != address(0));\r\n        newController = _newController;\r\n        avatar.transferOwnership(_newController);\r\n        require(avatar.owner()==_newController);\r\n        if (nativeToken.owner() == address(this)) {\r\n            nativeToken.transferOwnership(_newController);\r\n            require(nativeToken.owner()==_newController);\r\n        }\r\n        if (nativeReputation.owner() == address(this)) {\r\n            nativeReputation.transferOwnership(_newController);\r\n            require(nativeReputation.owner()==_newController);\r\n        }\r\n        emit UpgradeController(this,newController);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _avatar the controller's avatar address\r\n    * @return bytes32  - the return value of the called _contract's function.\r\n    */\r\n    function genericCall(address _contract,bytes _data,address _avatar)\r\n    external\r\n    onlyGenericCallScheme\r\n    onlySubjectToConstraint(\"genericCall\")\r\n    isAvatarValid(_avatar)\r\n    returns (bytes32)\r\n    {\r\n        emit GenericCall(_contract, _data);\r\n        avatar.genericCall(_contract, _data);\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n        // Copy the returned data.\r\n        returndatacopy(0, 0, returndatasize)\r\n        return(0, returndatasize)\r\n        }\r\n    }\r\n\r\n  /**\r\n   * @dev send some ether\r\n   * @param _amountInWei the amount of ether (in Wei) to send\r\n   * @param _to address of the beneficiary\r\n   * @return bool which represents a success\r\n   */\r\n    function sendEther(uint _amountInWei, address _to,address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"sendEther\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit SendEther(msg.sender, _amountInWei, _to);\r\n        return avatar.sendEther(_amountInWei, _to);\r\n    }\r\n\r\n    /**\r\n    * @dev send some amount of arbitrary ERC20 Tokens\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value,address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenTransfer\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit ExternalTokenTransfer(msg.sender, _externalToken, _to, _value);\r\n        return avatar.externalTokenTransfer(_externalToken, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token \"from\" address \"to\" address\r\n    *      One must to approve the amount of tokens which can be spend from the\r\n    *      \"from\" account.This can be done using externalTokenApprove.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _from address of the account to send from\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransferFrom(StandardToken _externalToken, address _from, address _to, uint _value,address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenTransferFrom\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit ExternalTokenTransferFrom(msg.sender, _externalToken, _from, _to, _value);\r\n        return avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev increase approval for the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue,address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenIncreaseApproval\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit ExternalTokenIncreaseApproval(msg.sender,_externalToken,_spender,_addedValue);\r\n        return avatar.externalTokenIncreaseApproval(_externalToken, _spender, _addedValue);\r\n    }\r\n\r\n    /**\r\n    * @dev decrease approval for the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue,address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenDecreaseApproval\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit ExternalTokenDecreaseApproval(msg.sender,_externalToken,_spender,_subtractedValue);\r\n        return avatar.externalTokenDecreaseApproval(_externalToken, _spender, _subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev getNativeReputation\r\n     * @param _avatar the organization avatar.\r\n     * @return organization native reputation\r\n     */\r\n    function getNativeReputation(address _avatar) external isAvatarValid(_avatar) view returns(address) {\r\n        return address(nativeReputation);\r\n    }\r\n\r\n    function _isSchemeRegistered(address _scheme,address _avatar) private isAvatarValid(_avatar) view returns(bool) {\r\n        return (schemes[_scheme].permissions&bytes4(1) != bytes4(0));\r\n    }\r\n}\r\n\r\n// File: contracts/universalSchemes/ExecutableInterface.sol\r\n\r\ncontract ExecutableInterface {\r\n    function execute(bytes32 _proposalId, address _avatar, int _param) public returns(bool);\r\n}\r\n\r\n// File: contracts/VotingMachines/IntVoteInterface.sol\r\n\r\ninterface IntVoteInterface {\r\n    //When implementing this interface please do not only override function and modifier,\r\n    //but also to keep the modifiers on the overridden functions.\r\n    modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}\r\n    modifier votable(bytes32 _proposalId) {revert(); _;}\r\n\r\n    event NewProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _numOfChoices, address _proposer, bytes32 _paramsHash);\r\n    event ExecuteProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _decision, uint _totalReputation);\r\n    event VoteProposal(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter, uint _vote, uint _reputation);\r\n    event CancelProposal(bytes32 indexed _proposalId, address indexed _avatar );\r\n    event CancelVoting(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter);\r\n\r\n    /**\r\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n     * generated by calculating keccak256 of a incremented counter.\r\n     * @param _numOfChoices number of voting choices\r\n     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\r\n     * @param _avatar an address to be sent as the payload to the _executable contract.\r\n     * @param _executable This contract will be executed when vote is over.\r\n     * @param _proposer address\r\n     * @return proposal's id.\r\n     */\r\n    function propose(\r\n        uint _numOfChoices,\r\n        bytes32 _proposalParameters,\r\n        address _avatar,\r\n        ExecutableInterface _executable,\r\n        address _proposer\r\n        ) external returns(bytes32);\r\n\r\n    // Only owned proposals and only the owner:\r\n    function cancelProposal(bytes32 _proposalId) external returns(bool);\r\n\r\n    // Only owned proposals and only the owner:\r\n    function ownerVote(bytes32 _proposalId, uint _vote, address _voter) external returns(bool);\r\n\r\n    function vote(bytes32 _proposalId, uint _vote) external returns(bool);\r\n\r\n    function voteWithSpecifiedAmounts(\r\n        bytes32 _proposalId,\r\n        uint _vote,\r\n        uint _rep,\r\n        uint _token) external returns(bool);\r\n\r\n    function cancelVote(bytes32 _proposalId) external;\r\n\r\n    //@dev execute check if the proposal has been decided, and if so, execute the proposal\r\n    //@param _proposalId the id of the proposal\r\n    //@return bool true - the proposal has been executed\r\n    //             false - otherwise.\r\n    function execute(bytes32 _proposalId) external returns(bool);\r\n\r\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint);\r\n\r\n    function isVotable(bytes32 _proposalId) external view returns(bool);\r\n\r\n    /**\r\n     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _choice the index in the\r\n     * @return voted reputation for the given choice\r\n     */\r\n    function voteStatus(bytes32 _proposalId,uint _choice) external view returns(uint);\r\n\r\n    /**\r\n     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n     * @return bool true or false\r\n     */\r\n    function isAbstainAllow() external pure returns(bool);\r\n\r\n    /**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n    function getAllowedRangeOfChoices() external pure returns(uint min,uint max);\r\n}\r\n\r\n// File: contracts/universalSchemes/UniversalSchemeInterface.sol\r\n\r\ncontract UniversalSchemeInterface {\r\n\r\n    function updateParameters(bytes32 _hashedParameters) public;\r\n\r\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32);\r\n}\r\n\r\n// File: contracts/universalSchemes/UniversalScheme.sol\r\n\r\ncontract UniversalScheme is Ownable, UniversalSchemeInterface {\r\n    bytes32 public hashedParameters; // For other parameters.\r\n\r\n    function updateParameters(\r\n        bytes32 _hashedParameters\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        hashedParameters = _hashedParameters;\r\n    }\r\n\r\n    /**\r\n    *  @dev get the parameters for the current scheme from the controller\r\n    */\r\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {\r\n        return ControllerInterface(_avatar.owner()).getSchemeParameters(this,address(_avatar));\r\n    }\r\n}\r\n\r\n// File: contracts/libs/RealMath.sol\r\n\r\n/**\r\n * RealMath: fixed-point math library, based on fractional and integer parts.\r\n * Using int256 as real216x40, which isn't in Solidity yet.\r\n * 40 fractional bits gets us down to 1E-12 precision, while still letting us\r\n * go up to galaxy scale counting in meters.\r\n * Internally uses the wider int256 for some math.\r\n *\r\n * Note that for addition, subtraction, and mod (%), you should just use the\r\n * built-in Solidity operators. Functions for these operations are not provided.\r\n *\r\n * Note that the fancy functions like sqrt, atan2, etc. aren't as accurate as\r\n * they should be. They are (hopefully) Good Enough for doing orbital mechanics\r\n * on block timescales in a game context, but they may not be good enough for\r\n * other applications.\r\n */\r\n\r\n\r\nlibrary RealMath {\r\n\r\n    /**\r\n     * How many total bits are there?\r\n     */\r\n    int256 constant REAL_BITS = 256;\r\n\r\n    /**\r\n     * How many fractional bits are there?\r\n     */\r\n    int256 constant REAL_FBITS = 40;\r\n\r\n    /**\r\n     * How many integer bits are there?\r\n     */\r\n    int256 constant REAL_IBITS = REAL_BITS - REAL_FBITS;\r\n\r\n    /**\r\n     * What's the first non-fractional bit\r\n     */\r\n    int256 constant REAL_ONE = int256(1) << REAL_FBITS;\r\n\r\n    /**\r\n     * What's the last fractional bit?\r\n     */\r\n    int256 constant REAL_HALF = REAL_ONE >> 1;\r\n\r\n    /**\r\n     * What's two? Two is pretty useful.\r\n     */\r\n    int256 constant REAL_TWO = REAL_ONE << 1;\r\n\r\n    /**\r\n     * And our logarithms are based on ln(2).\r\n     */\r\n    int256 constant REAL_LN_TWO = 762123384786;\r\n\r\n    /**\r\n     * It is also useful to have Pi around.\r\n     */\r\n    int256 constant REAL_PI = 3454217652358;\r\n\r\n    /**\r\n     * And half Pi, to save on divides.\r\n     * TODO: That might not be how the compiler handles constants.\r\n     */\r\n    int256 constant REAL_HALF_PI = 1727108826179;\r\n\r\n    /**\r\n     * And two pi, which happens to be odd in its most accurate representation.\r\n     */\r\n    int256 constant REAL_TWO_PI = 6908435304715;\r\n\r\n    /**\r\n     * What's the sign bit?\r\n     */\r\n    int256 constant SIGN_MASK = int256(1) << 255;\r\n\r\n\r\n    /**\r\n     * Convert an integer to a real. Preserves sign.\r\n     */\r\n    function toReal(int216 ipart) internal pure returns (int256) {\r\n        return int256(ipart) * REAL_ONE;\r\n    }\r\n\r\n    /**\r\n     * Convert a real to an integer. Preserves sign.\r\n     */\r\n    function fromReal(int256 realValue) internal pure returns (int216) {\r\n        return int216(realValue / REAL_ONE);\r\n    }\r\n\r\n    /**\r\n     * Round a real to the nearest integral real value.\r\n     */\r\n    function round(int256 realValue) internal pure returns (int256) {\r\n        // First, truncate.\r\n        int216 ipart = fromReal(realValue);\r\n        if ((fractionalBits(realValue) & (uint40(1) << (REAL_FBITS - 1))) > 0) {\r\n            // High fractional bit is set. Round up.\r\n            if (realValue < int256(0)) {\r\n                // Rounding up for a negative number is rounding down.\r\n                ipart -= 1;\r\n            } else {\r\n                ipart += 1;\r\n            }\r\n        }\r\n        return toReal(ipart);\r\n    }\r\n\r\n    /**\r\n     * Get the absolute value of a real. Just the same as abs on a normal int256.\r\n     */\r\n    function abs(int256 realValue) internal pure returns (int256) {\r\n        if (realValue > 0) {\r\n            return realValue;\r\n        } else {\r\n            return -realValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the fractional bits of a real. Ignores the sign of the real.\r\n     */\r\n    function fractionalBits(int256 realValue) internal pure returns (uint40) {\r\n        return uint40(abs(realValue) % REAL_ONE);\r\n    }\r\n\r\n    /**\r\n     * Get the fractional part of a real, as a real. Ignores sign (so fpart(-0.5) is 0.5).\r\n     */\r\n    function fpart(int256 realValue) internal pure returns (int256) {\r\n        // This gets the fractional part but strips the sign\r\n        return abs(realValue) % REAL_ONE;\r\n    }\r\n\r\n    /**\r\n     * Get the fractional part of a real, as a real. Respects sign (so fpartSigned(-0.5) is -0.5).\r\n     */\r\n    function fpartSigned(int256 realValue) internal pure returns (int256) {\r\n        // This gets the fractional part but strips the sign\r\n        int256 fractional = fpart(realValue);\r\n        if (realValue < 0) {\r\n            // Add the negative sign back in.\r\n            return -fractional;\r\n        } else {\r\n            return fractional;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the integer part of a fixed point value.\r\n     */\r\n    function ipart(int256 realValue) internal pure returns (int256) {\r\n        // Subtract out the fractional part to get the real part.\r\n        return realValue - fpartSigned(realValue);\r\n    }\r\n\r\n    /**\r\n     * Multiply one real by another. Truncates overflows.\r\n     */\r\n    function mul(int256 realA, int256 realB) internal pure returns (int256) {\r\n        // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.\r\n        // So we just have to clip off the extra REAL_FBITS fractional bits.\r\n        return int256((int256(realA) * int256(realB)) >> REAL_FBITS);\r\n    }\r\n\r\n    /**\r\n     * Divide one real by another real. Truncates overflows.\r\n     */\r\n    function div(int256 realNumerator, int256 realDenominator) internal pure returns (int256) {\r\n        // We use the reverse of the multiplication trick: convert numerator from\r\n        // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.\r\n        return int256((int256(realNumerator) * REAL_ONE) / int256(realDenominator));\r\n    }\r\n\r\n    /**\r\n     * Create a real from a rational fraction.\r\n     */\r\n    function fraction(int216 numerator, int216 denominator) internal pure returns (int256) {\r\n        return div(toReal(numerator), toReal(denominator));\r\n    }\r\n\r\n    // Now we have some fancy math things (like pow and trig stuff). This isn't\r\n    // in the RealMath that was deployed with the original Macroverse\r\n    // deployment, so it needs to be linked into your contract statically.\r\n\r\n    /**\r\n     * Raise a number to a positive integer power in O(log power) time.\r\n     * See <https://stackoverflow.com/a/101613>\r\n     */\r\n    function ipow(int256 realBase, int216 exponent) internal pure returns (int256) {\r\n        if (exponent < 0) {\r\n            // Negative powers are not allowed here.\r\n            revert();\r\n        }\r\n\r\n        int256 tempRealBase = realBase;\r\n        int256 tempExponent = exponent;\r\n\r\n        // Start with the 0th power\r\n        int256 realResult = REAL_ONE;\r\n        while (tempExponent != 0) {\r\n            // While there are still bits set\r\n            if ((tempExponent & 0x1) == 0x1) {\r\n                // If the low bit is set, multiply in the (many-times-squared) base\r\n                realResult = mul(realResult, tempRealBase);\r\n            }\r\n            // Shift off the low bit\r\n            tempExponent = tempExponent >> 1;\r\n            // Do the squaring\r\n            tempRealBase = mul(tempRealBase, tempRealBase);\r\n        }\r\n\r\n        // Return the final result.\r\n        return realResult;\r\n    }\r\n\r\n    /**\r\n     * Zero all but the highest set bit of a number.\r\n     * See <https://stackoverflow.com/a/53184>\r\n     */\r\n    function hibit(uint256 _val) internal pure returns (uint256) {\r\n        // Set all the bits below the highest set bit\r\n        uint256 val = _val;\r\n        val |= (val >> 1);\r\n        val |= (val >> 2);\r\n        val |= (val >> 4);\r\n        val |= (val >> 8);\r\n        val |= (val >> 16);\r\n        val |= (val >> 32);\r\n        val |= (val >> 64);\r\n        val |= (val >> 128);\r\n        return val ^ (val >> 1);\r\n    }\r\n\r\n    /**\r\n     * Given a number with one bit set, finds the index of that bit.\r\n     */\r\n    function findbit(uint256 val) internal pure returns (uint8 index) {\r\n        index = 0;\r\n        // We and the value with alternating bit patters of various pitches to find it.\r\n        if (val & 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA != 0) {\r\n            // Picth 1\r\n            index |= 1;\r\n        }\r\n        if (val & 0xCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC != 0) {\r\n            // Pitch 2\r\n            index |= 2;\r\n        }\r\n        if (val & 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0 != 0) {\r\n            // Pitch 4\r\n            index |= 4;\r\n        }\r\n        if (val & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00 != 0) {\r\n            // Pitch 8\r\n            index |= 8;\r\n        }\r\n        if (val & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000 != 0) {\r\n            // Pitch 16\r\n            index |= 16;\r\n        }\r\n        if (val & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000 != 0) {\r\n            // Pitch 32\r\n            index |= 32;\r\n        }\r\n        if (val & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000 != 0) {\r\n            // Pitch 64\r\n            index |= 64;\r\n        }\r\n        if (val & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 != 0) {\r\n            // Pitch 128\r\n            index |= 128;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shift realArg left or right until it is between 1 and 2. Return the\r\n     * rescaled value, and the number of bits of right shift applied. Shift may be negative.\r\n     *\r\n     * Expresses realArg as realScaled * 2^shift, setting shift to put realArg between [1 and 2).\r\n     *\r\n     * Rejects 0 or negative arguments.\r\n     */\r\n    function rescale(int256 realArg) internal pure returns (int256 realScaled, int216 shift) {\r\n        if (realArg <= 0) {\r\n            // Not in domain!\r\n            revert();\r\n        }\r\n\r\n        // Find the high bit\r\n        int216 highBit = findbit(hibit(uint256(realArg)));\r\n\r\n        // We'll shift so the high bit is the lowest non-fractional bit.\r\n        shift = highBit - int216(REAL_FBITS);\r\n\r\n        if (shift < 0) {\r\n            // Shift left\r\n            realScaled = realArg << -shift;\r\n        } else if (shift >= 0) {\r\n            // Shift right\r\n            realScaled = realArg >> shift;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate the natural log of a number. Rescales the input value and uses\r\n     * the algorithm outlined at <https://math.stackexchange.com/a/977836> and\r\n     * the ipow implementation.\r\n     *\r\n     * Lets you artificially limit the number of iterations.\r\n     *\r\n     * Note that it is potentially possible to get an un-converged value; lack\r\n     * of convergence does not throw.\r\n     */\r\n    function lnLimited(int256 realArg, int maxIterations) internal pure returns (int256) {\r\n        if (realArg <= 0) {\r\n            // Outside of acceptable domain\r\n            revert();\r\n        }\r\n\r\n        if (realArg == REAL_ONE) {\r\n            // Handle this case specially because people will want exactly 0 and\r\n            // not ~2^-39 ish.\r\n            return 0;\r\n        }\r\n\r\n        // We know it's positive, so rescale it to be between [1 and 2)\r\n        int256 realRescaled;\r\n        int216 shift;\r\n        (realRescaled, shift) = rescale(realArg);\r\n\r\n        // Compute the argument to iterate on\r\n        int256 realSeriesArg = div(realRescaled - REAL_ONE, realRescaled + REAL_ONE);\r\n\r\n        // We will accumulate the result here\r\n        int256 realSeriesResult = 0;\r\n\r\n        for (int216 n = 0; n < maxIterations; n++) {\r\n            // Compute term n of the series\r\n            int256 realTerm = div(ipow(realSeriesArg, 2 * n + 1), toReal(2 * n + 1));\r\n            // And add it in\r\n            realSeriesResult += realTerm;\r\n            if (realTerm == 0) {\r\n                // We must have converged. Next term is too small to represent.\r\n                break;\r\n            }\r\n            // If we somehow never converge I guess we will run out of gas\r\n        }\r\n\r\n        // Double it to account for the factor of 2 outside the sum\r\n        realSeriesResult = mul(realSeriesResult, REAL_TWO);\r\n\r\n        // Now compute and return the overall result\r\n        return mul(toReal(shift), REAL_LN_TWO) + realSeriesResult;\r\n\r\n    }\r\n\r\n    /**\r\n     * Calculate a natural logarithm with a sensible maximum iteration count to\r\n     * wait until convergence. Note that it is potentially possible to get an\r\n     * un-converged value; lack of convergence does not throw.\r\n     */\r\n    function ln(int256 realArg) internal pure returns (int256) {\r\n        return lnLimited(realArg, 100);\r\n    }\r\n\r\n    /**\r\n     * Calculate e^x. Uses the series given at\r\n     * <http://pages.mtu.edu/~shene/COURSES/cs201/NOTES/chap04/exp.html>.\r\n     *\r\n     * Lets you artificially limit the number of iterations.\r\n     *\r\n     * Note that it is potentially possible to get an un-converged value; lack\r\n     * of convergence does not throw.\r\n     */\r\n    function expLimited(int256 realArg, int maxIterations) internal pure returns (int256) {\r\n        // We will accumulate the result here\r\n        int256 realResult = 0;\r\n\r\n        // We use this to save work computing terms\r\n        int256 realTerm = REAL_ONE;\r\n\r\n        for (int216 n = 0; n < maxIterations; n++) {\r\n            // Add in the term\r\n            realResult += realTerm;\r\n\r\n            // Compute the next term\r\n            realTerm = mul(realTerm, div(realArg, toReal(n + 1)));\r\n\r\n            if (realTerm == 0) {\r\n                // We must have converged. Next term is too small to represent.\r\n                break;\r\n            }\r\n            // If we somehow never converge I guess we will run out of gas\r\n        }\r\n\r\n        // Return the result\r\n        return realResult;\r\n\r\n    }\r\n\r\n    /**\r\n     * Calculate e^x with a sensible maximum iteration count to wait until\r\n     * convergence. Note that it is potentially possible to get an un-converged\r\n     * value; lack of convergence does not throw.\r\n     */\r\n    function exp(int256 realArg) internal pure returns (int256) {\r\n        return expLimited(realArg, 100);\r\n    }\r\n\r\n    /**\r\n     * Raise any number to any power, except for negative bases to fractional powers.\r\n     */\r\n    function pow(int256 realBase, int256 realExponent) internal pure returns (int256) {\r\n        if (realExponent == 0) {\r\n            // Anything to the 0 is 1\r\n            return REAL_ONE;\r\n        }\r\n\r\n        if (realBase == 0) {\r\n            if (realExponent < 0) {\r\n                // Outside of domain!\r\n                revert();\r\n            }\r\n            // Otherwise it's 0\r\n            return 0;\r\n        }\r\n\r\n        if (fpart(realExponent) == 0) {\r\n            // Anything (even a negative base) is super easy to do to an integer power.\r\n\r\n            if (realExponent > 0) {\r\n                // Positive integer power is easy\r\n                return ipow(realBase, fromReal(realExponent));\r\n            } else {\r\n                // Negative integer power is harder\r\n                return div(REAL_ONE, ipow(realBase, fromReal(-realExponent)));\r\n            }\r\n        }\r\n\r\n        if (realBase < 0) {\r\n            // It's a negative base to a non-integer power.\r\n            // In general pow(-x^y) is undefined, unless y is an int or some\r\n            // weird rational-number-based relationship holds.\r\n            revert();\r\n        }\r\n\r\n        // If it's not a special case, actually do it.\r\n        return exp(mul(realExponent, ln(realBase)));\r\n    }\r\n\r\n    /**\r\n     * Compute the square root of a number.\r\n     */\r\n    function sqrt(int256 realArg) internal pure returns (int256) {\r\n        return pow(realArg, REAL_HALF);\r\n    }\r\n\r\n    /**\r\n     * Compute the sin of a number to a certain number of Taylor series terms.\r\n     */\r\n    function sinLimited(int256 _realArg, int216 maxIterations) internal pure returns (int256) {\r\n        // First bring the number into 0 to 2 pi\r\n        // TODO: This will introduce an error for very large numbers, because the error in our Pi will compound.\r\n        // But for actual reasonable angle values we should be fine.\r\n        int256 realArg = _realArg;\r\n        realArg = realArg % REAL_TWO_PI;\r\n\r\n        int256 accumulator = REAL_ONE;\r\n\r\n        // We sum from large to small iteration so that we can have higher powers in later terms\r\n        for (int216 iteration = maxIterations - 1; iteration >= 0; iteration--) {\r\n            accumulator = REAL_ONE - mul(div(mul(realArg, realArg), toReal((2 * iteration + 2) * (2 * iteration + 3))), accumulator);\r\n            // We can't stop early; we need to make it to the first term.\r\n        }\r\n\r\n        return mul(realArg, accumulator);\r\n    }\r\n\r\n    /**\r\n     * Calculate sin(x) with a sensible maximum iteration count to wait until\r\n     * convergence.\r\n     */\r\n    function sin(int256 realArg) internal pure returns (int256) {\r\n        return sinLimited(realArg, 15);\r\n    }\r\n\r\n    /**\r\n     * Calculate cos(x).\r\n     */\r\n    function cos(int256 realArg) internal pure returns (int256) {\r\n        return sin(realArg + REAL_HALF_PI);\r\n    }\r\n\r\n    /**\r\n     * Calculate tan(x). May overflow for large results. May throw if tan(x)\r\n     * would be infinite, or return an approximation, or overflow.\r\n     */\r\n    function tan(int256 realArg) internal pure returns (int256) {\r\n        return div(sin(realArg), cos(realArg));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ECRecovery.sol\r\n\r\n/**\r\n * @title Eliptic curve signature operations\r\n *\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n *\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n *\r\n */\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using their signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes sig)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * toEthSignedMessageHash\r\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n   * @dev and hash the result\r\n   */\r\n  function toEthSignedMessageHash(bytes32 hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return keccak256(\r\n      \"\\x19Ethereum Signed Message:\\n32\",\r\n      hash\r\n    );\r\n  }\r\n}\r\n\r\n// File: contracts/libs/OrderStatisticTree.sol\r\n\r\nlibrary OrderStatisticTree {\r\n\r\n    struct Node {\r\n        mapping (bool => uint) children; // a mapping of left(false) child and right(true) child nodes\r\n        uint parent; // parent node\r\n        bool side;   // side of the node on the tree (left or right)\r\n        uint height; //Height of this node\r\n        uint count; //Number of tree nodes below this node (including this one)\r\n        uint dupes; //Number of duplicates values for this node\r\n    }\r\n\r\n    struct Tree {\r\n        // a mapping between node value(uint) to Node\r\n        // the tree's root is always at node 0 ,which points to the \"real\" tree\r\n        // as its right child.this is done to eliminate the need to update the tree\r\n        // root in the case of rotation.(saving gas).\r\n        mapping(uint => Node) nodes;\r\n    }\r\n    /**\r\n     * @dev rank - find the rank of a value in the tree,\r\n     *      i.e. its index in the sorted list of elements of the tree\r\n     * @param _tree the tree\r\n     * @param _value the input value to find its rank.\r\n     * @return smaller - the number of elements in the tree which their value is\r\n     * less than the input value.\r\n     */\r\n    function rank(Tree storage _tree,uint _value) internal view returns (uint smaller) {\r\n        if (_value != 0) {\r\n            smaller = _tree.nodes[0].dupes;\r\n\r\n            uint cur = _tree.nodes[0].children[true];\r\n            Node storage currentNode = _tree.nodes[cur];\r\n\r\n            while (true) {\r\n                if (cur <= _value) {\r\n                    if (cur<_value) {\r\n                        smaller = smaller + 1+currentNode.dupes;\r\n                    }\r\n                    uint leftChild = currentNode.children[false];\r\n                    if (leftChild!=0) {\r\n                        smaller = smaller + _tree.nodes[leftChild].count;\r\n                    }\r\n                }\r\n                if (cur == _value) {\r\n                    break;\r\n                }\r\n                cur = currentNode.children[cur<_value];\r\n                if (cur == 0) {\r\n                    break;\r\n                }\r\n                currentNode = _tree.nodes[cur];\r\n            }\r\n        }\r\n    }\r\n\r\n    function count(Tree storage _tree) internal view returns (uint) {\r\n        Node storage root = _tree.nodes[0];\r\n        Node memory child = _tree.nodes[root.children[true]];\r\n        return root.dupes+child.count;\r\n    }\r\n\r\n    function updateCount(Tree storage _tree,uint _value) private {\r\n        Node storage n = _tree.nodes[_value];\r\n        n.count = 1+_tree.nodes[n.children[false]].count+_tree.nodes[n.children[true]].count+n.dupes;\r\n    }\r\n\r\n    function updateCounts(Tree storage _tree,uint _value) private {\r\n        uint parent = _tree.nodes[_value].parent;\r\n        while (parent!=0) {\r\n            updateCount(_tree,parent);\r\n            parent = _tree.nodes[parent].parent;\r\n        }\r\n    }\r\n\r\n    function updateHeight(Tree storage _tree,uint _value) private {\r\n        Node storage n = _tree.nodes[_value];\r\n        uint heightLeft = _tree.nodes[n.children[false]].height;\r\n        uint heightRight = _tree.nodes[n.children[true]].height;\r\n        if (heightLeft > heightRight)\r\n            n.height = heightLeft+1;\r\n        else\r\n            n.height = heightRight+1;\r\n    }\r\n\r\n    function balanceFactor(Tree storage _tree,uint _value) private view returns (int bf) {\r\n        Node storage n = _tree.nodes[_value];\r\n        return int(_tree.nodes[n.children[false]].height)-int(_tree.nodes[n.children[true]].height);\r\n    }\r\n\r\n    function rotate(Tree storage _tree,uint _value,bool dir) private {\r\n        bool otherDir = !dir;\r\n        Node storage n = _tree.nodes[_value];\r\n        bool side = n.side;\r\n        uint parent = n.parent;\r\n        uint valueNew = n.children[otherDir];\r\n        Node storage nNew = _tree.nodes[valueNew];\r\n        uint orphan = nNew.children[dir];\r\n        Node storage p = _tree.nodes[parent];\r\n        Node storage o = _tree.nodes[orphan];\r\n        p.children[side] = valueNew;\r\n        nNew.side = side;\r\n        nNew.parent = parent;\r\n        nNew.children[dir] = _value;\r\n        n.parent = valueNew;\r\n        n.side = dir;\r\n        n.children[otherDir] = orphan;\r\n        o.parent = _value;\r\n        o.side = otherDir;\r\n        updateHeight(_tree,_value);\r\n        updateHeight(_tree,valueNew);\r\n        updateCount(_tree,_value);\r\n        updateCount(_tree,valueNew);\r\n    }\r\n\r\n    function rebalanceInsert(Tree storage _tree,uint _nValue) private {\r\n        updateHeight(_tree,_nValue);\r\n        Node storage n = _tree.nodes[_nValue];\r\n        uint pValue = n.parent;\r\n        if (pValue!=0) {\r\n            int pBf = balanceFactor(_tree,pValue);\r\n            bool side = n.side;\r\n            int sign;\r\n            if (side)\r\n                sign = -1;\r\n            else\r\n                sign = 1;\r\n            if (pBf == sign*2) {\r\n                if (balanceFactor(_tree,_nValue) == (-1 * sign)) {\r\n                    rotate(_tree,_nValue,side);\r\n                }\r\n                rotate(_tree,pValue,!side);\r\n            } else if (pBf != 0) {\r\n                rebalanceInsert(_tree,pValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rebalanceDelete(Tree storage _tree,uint _pValue,bool side) private {\r\n        if (_pValue!=0) {\r\n            updateHeight(_tree,_pValue);\r\n            int pBf = balanceFactor(_tree,_pValue);\r\n            int sign;\r\n            if (side)\r\n                sign = 1;\r\n            else\r\n                sign = -1;\r\n            int bf = balanceFactor(_tree,_pValue);\r\n            if (bf==(2*sign)) {\r\n                Node storage p = _tree.nodes[_pValue];\r\n                uint sValue = p.children[!side];\r\n                int sBf = balanceFactor(_tree,sValue);\r\n                if (sBf == (-1 * sign)) {\r\n                    rotate(_tree,sValue,!side);\r\n                }\r\n                rotate(_tree,_pValue,side);\r\n                if (sBf!=0) {\r\n                    p = _tree.nodes[_pValue];\r\n                    rebalanceDelete(_tree,p.parent,p.side);\r\n                }\r\n            } else if (pBf != sign) {\r\n                p = _tree.nodes[_pValue];\r\n                rebalanceDelete(_tree,p.parent,p.side);\r\n            }\r\n        }\r\n    }\r\n\r\n    function fixParents(Tree storage _tree,uint parent,bool side) private {\r\n        if (parent!=0) {\r\n            updateCount(_tree,parent);\r\n            updateCounts(_tree,parent);\r\n            rebalanceDelete(_tree,parent,side);\r\n        }\r\n    }\r\n\r\n    function insertHelper(Tree storage _tree,uint _pValue,bool _side,uint _value) private {\r\n        Node storage root = _tree.nodes[_pValue];\r\n        uint cValue = root.children[_side];\r\n        if (cValue==0) {\r\n            root.children[_side] = _value;\r\n            Node storage child = _tree.nodes[_value];\r\n            child.parent = _pValue;\r\n            child.side = _side;\r\n            child.height = 1;\r\n            child.count = 1;\r\n            updateCounts(_tree,_value);\r\n            rebalanceInsert(_tree,_value);\r\n        } else if (cValue==_value) {\r\n            _tree.nodes[cValue].dupes++;\r\n            updateCount(_tree,_value);\r\n            updateCounts(_tree,_value);\r\n        } else {\r\n            insertHelper(_tree,cValue,(_value >= cValue),_value);\r\n        }\r\n    }\r\n\r\n    function insert(Tree storage _tree,uint _value) internal {\r\n        if (_value==0) {\r\n            _tree.nodes[_value].dupes++;\r\n        } else {\r\n            insertHelper(_tree,0,true,_value);\r\n        }\r\n    }\r\n\r\n    function rightmostLeaf(Tree storage _tree,uint _value) private view returns (uint leaf) {\r\n        uint child = _tree.nodes[_value].children[true];\r\n        if (child!=0) {\r\n            return rightmostLeaf(_tree,child);\r\n        } else {\r\n            return _value;\r\n        }\r\n    }\r\n\r\n    function zeroOut(Tree storage _tree,uint _value) private {\r\n        Node storage n = _tree.nodes[_value];\r\n        n.parent = 0;\r\n        n.side = false;\r\n        n.children[false] = 0;\r\n        n.children[true] = 0;\r\n        n.count = 0;\r\n        n.height = 0;\r\n        n.dupes = 0;\r\n    }\r\n\r\n    function removeBranch(Tree storage _tree,uint _value,uint _left) private {\r\n        uint ipn = rightmostLeaf(_tree,_left);\r\n        Node storage i = _tree.nodes[ipn];\r\n        uint dupes = i.dupes;\r\n        removeHelper(_tree,ipn);\r\n        Node storage n = _tree.nodes[_value];\r\n        uint parent = n.parent;\r\n        Node storage p = _tree.nodes[parent];\r\n        uint height = n.height;\r\n        bool side = n.side;\r\n        uint ncount = n.count;\r\n        uint right = n.children[true];\r\n        uint left = n.children[false];\r\n        p.children[side] = ipn;\r\n        i.parent = parent;\r\n        i.side = side;\r\n        i.count = ncount+dupes-n.dupes;\r\n        i.height = height;\r\n        i.dupes = dupes;\r\n        if (left!=0) {\r\n            i.children[false] = left;\r\n            _tree.nodes[left].parent = ipn;\r\n        }\r\n        if (right!=0) {\r\n            i.children[true] = right;\r\n            _tree.nodes[right].parent = ipn;\r\n        }\r\n        zeroOut(_tree,_value);\r\n        updateCounts(_tree,ipn);\r\n    }\r\n\r\n    function removeHelper(Tree storage _tree,uint _value) private {\r\n        Node storage n = _tree.nodes[_value];\r\n        uint parent = n.parent;\r\n        bool side = n.side;\r\n        Node storage p = _tree.nodes[parent];\r\n        uint left = n.children[false];\r\n        uint right = n.children[true];\r\n        if ((left == 0) && (right == 0)) {\r\n            p.children[side] = 0;\r\n            zeroOut(_tree,_value);\r\n            fixParents(_tree,parent,side);\r\n        } else if ((left != 0) && (right != 0)) {\r\n            removeBranch(_tree,_value,left);\r\n        } else {\r\n            uint child = left+right;\r\n            Node storage c = _tree.nodes[child];\r\n            p.children[side] = child;\r\n            c.parent = parent;\r\n            c.side = side;\r\n            zeroOut(_tree,_value);\r\n            fixParents(_tree,parent,side);\r\n        }\r\n    }\r\n\r\n    function remove(Tree storage _tree,uint _value) internal {\r\n        Node storage n = _tree.nodes[_value];\r\n        if (_value==0) {\r\n            if (n.dupes==0) {\r\n                return;\r\n            }\r\n        } else {\r\n            if (n.count==0) {\r\n                return;\r\n            }\r\n        }\r\n        if (n.dupes>0) {\r\n            n.dupes--;\r\n            if (_value!=0) {\r\n                n.count--;\r\n            }\r\n            fixParents(_tree,n.parent,n.side);\r\n        } else {\r\n            removeHelper(_tree,_value);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/VotingMachines/GenesisProtocol.sol\r\n\r\n/**\r\n * @title GenesisProtocol implementation -an organization's voting machine scheme.\r\n */\r\n\r\n\r\ncontract GenesisProtocol is IntVoteInterface,UniversalScheme {\r\n    using SafeMath for uint;\r\n    using RealMath for int216;\r\n    using RealMath for int256;\r\n    using ECRecovery for bytes32;\r\n    using OrderStatisticTree for OrderStatisticTree.Tree;\r\n\r\n    enum ProposalState { None ,Closed, Executed, PreBoosted,Boosted,QuietEndingPeriod }\r\n    enum ExecutionState { None, PreBoostedTimeOut, PreBoostedBarCrossed, BoostedTimeOut,BoostedBarCrossed }\r\n\r\n    //Organization's parameters\r\n    struct Parameters {\r\n        uint preBoostedVoteRequiredPercentage; // the absolute vote percentages bar.\r\n        uint preBoostedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.\r\n        uint boostedVotePeriodLimit; //the time limit for a proposal to be in an relative voting mode.\r\n        uint thresholdConstA;//constant A for threshold calculation . threshold =A * (e ** (numberOfBoostedProposals/B))\r\n        uint thresholdConstB;//constant B for threshold calculation . threshold =A * (e ** (numberOfBoostedProposals/B))\r\n        uint minimumStakingFee; //minimum staking fee allowed.\r\n        uint quietEndingPeriod; //quite ending period\r\n        uint proposingRepRewardConstA;//constant A for calculate proposer reward. proposerReward =(A*(RTotal) +B*(R+ - R-))/1000\r\n        uint proposingRepRewardConstB;//constant B for calculate proposing reward.proposerReward =(A*(RTotal) +B*(R+ - R-))/1000\r\n        uint stakerFeeRatioForVoters; // The “ratio of stake” to be paid to voters.\r\n                                      // All stakers pay a portion of their stake to all voters, stakerFeeRatioForVoters * (s+ + s-).\r\n                                      //All voters (pre and during boosting period) divide this portion in proportion to their reputation.\r\n        uint votersReputationLossRatio;//Unsuccessful pre booster voters lose votersReputationLossRatio% of their reputation.\r\n        uint votersGainRepRatioFromLostRep; //the percentages of the lost reputation which is divided by the successful pre boosted voters,\r\n                                            //in proportion to their reputation.\r\n                                            //The rest (100-votersGainRepRatioFromLostRep)% of lost reputation is divided between the successful wagers,\r\n                                            //in proportion to their stake.\r\n        uint daoBountyConst;//The DAO adds up a bounty for successful staker.\r\n                            //The bounty formula is: s * daoBountyConst, where s+ is the wager staked for the proposal,\r\n                            //and  daoBountyConst is a constant factor that is configurable and changeable by the DAO given.\r\n                            //  daoBountyConst should be greater than stakerFeeRatioForVoters and less than 2 * stakerFeeRatioForVoters.\r\n        uint daoBountyLimit;//The daoBounty cannot be greater than daoBountyLimit.\r\n\r\n\r\n\r\n    }\r\n    struct Voter {\r\n        uint vote; // YES(1) ,NO(2)\r\n        uint reputation; // amount of voter's reputation\r\n        bool preBoosted;\r\n    }\r\n\r\n    struct Staker {\r\n        uint vote; // YES(1) ,NO(2)\r\n        uint amount; // amount of staker's stake\r\n        uint amountForBounty; // amount of staker's stake which will be use for bounty calculation\r\n    }\r\n\r\n    struct Proposal {\r\n        address avatar; // the organization's avatar the proposal is target to.\r\n        uint numOfChoices;\r\n        ExecutableInterface executable; // will be executed if the proposal will pass\r\n        uint votersStakes;\r\n        uint submittedTime;\r\n        uint boostedPhaseTime; //the time the proposal shift to relative mode.\r\n        ProposalState state;\r\n        uint winningVote; //the winning vote.\r\n        address proposer;\r\n        uint currentBoostedVotePeriodLimit;\r\n        bytes32 paramsHash;\r\n        uint daoBountyRemain;\r\n        uint[2] totalStakes;// totalStakes[0] - (amount staked minus fee) - Total number of tokens staked which can be redeemable by stakers.\r\n                            // totalStakes[1] - (amount staked) - Total number of redeemable tokens.\r\n        //      vote      reputation\r\n        mapping(uint    =>  uint     ) votes;\r\n        //      vote      reputation\r\n        mapping(uint    =>  uint     ) preBoostedVotes;\r\n        //      address     voter\r\n        mapping(address =>  Voter    ) voters;\r\n        //      vote        stakes\r\n        mapping(uint    =>  uint     ) stakes;\r\n        //      address  staker\r\n        mapping(address  => Staker   ) stakers;\r\n    }\r\n\r\n    event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);\r\n    event Stake(bytes32 indexed _proposalId, address indexed _avatar, address indexed _staker,uint _vote,uint _amount);\r\n    event Redeem(bytes32 indexed _proposalId, address indexed _avatar, address indexed _beneficiary,uint _amount);\r\n    event RedeemDaoBounty(bytes32 indexed _proposalId, address indexed _avatar, address indexed _beneficiary,uint _amount);\r\n    event RedeemReputation(bytes32 indexed _proposalId, address indexed _avatar, address indexed _beneficiary,uint _amount);\r\n\r\n    mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters\r\n    mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.\r\n\r\n    mapping(bytes=>bool) stakeSignatures; //stake signatures\r\n\r\n    uint constant public NUM_OF_CHOICES = 2;\r\n    uint constant public NO = 2;\r\n    uint constant public YES = 1;\r\n    uint public proposalsCnt; // Total number of proposals\r\n    mapping(address=>uint) orgBoostedProposalsCnt;\r\n    StandardToken public stakingToken;\r\n    mapping(address=>OrderStatisticTree.Tree) proposalsExpiredTimes; //proposals expired times\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor(StandardToken _stakingToken) public\r\n    {\r\n        stakingToken = _stakingToken;\r\n    }\r\n\r\n  /**\r\n   * @dev Check that the proposal is votable (open and not executed yet)\r\n   */\r\n    modifier votable(bytes32 _proposalId) {\r\n        require(_isVotable(_proposalId));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n     * generated by calculating keccak256 of a incremented counter.\r\n     * @param _numOfChoices number of voting choices\r\n     * @param _avatar an address to be sent as the payload to the _executable contract.\r\n     * @param _executable This contract will be executed when vote is over.\r\n     * @param _proposer address\r\n     * @return proposal's id.\r\n     */\r\n    function propose(uint _numOfChoices, bytes32 , address _avatar, ExecutableInterface _executable,address _proposer)\r\n        external\r\n        returns(bytes32)\r\n    {\r\n          // Check valid params and number of choices:\r\n        require(_numOfChoices == NUM_OF_CHOICES);\r\n        require(ExecutableInterface(_executable) != address(0));\r\n        //Check parameters existence.\r\n        bytes32 paramsHash = getParametersFromController(Avatar(_avatar));\r\n\r\n        require(parameters[paramsHash].preBoostedVoteRequiredPercentage > 0);\r\n        // Generate a unique ID:\r\n        bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));\r\n        proposalsCnt++;\r\n        // Open proposal:\r\n        Proposal memory proposal;\r\n        proposal.numOfChoices = _numOfChoices;\r\n        proposal.avatar = _avatar;\r\n        proposal.executable = _executable;\r\n        proposal.state = ProposalState.PreBoosted;\r\n        // solium-disable-next-line security/no-block-members\r\n        proposal.submittedTime = now;\r\n        proposal.currentBoostedVotePeriodLimit = parameters[paramsHash].boostedVotePeriodLimit;\r\n        proposal.proposer = _proposer;\r\n        proposal.winningVote = NO;\r\n        proposal.paramsHash = paramsHash;\r\n        proposals[proposalId] = proposal;\r\n        emit NewProposal(proposalId, _avatar, _numOfChoices, _proposer, paramsHash);\r\n        return proposalId;\r\n    }\r\n\r\n  /**\r\n   * @dev Cancel a proposal, only the owner can call this function and only if allowOwner flag is true.\r\n   */\r\n    function cancelProposal(bytes32 ) external returns(bool) {\r\n        //This is not allowed.\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev staking function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote  NO(2) or YES(1).\r\n     * @param _amount the betting amount\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function stake(bytes32 _proposalId, uint _vote, uint _amount) external returns(bool) {\r\n        return _stake(_proposalId,_vote,_amount,msg.sender);\r\n    }\r\n\r\n    // Digest describing the data the user signs according EIP 712.\r\n    // Needs to match what is passed to Metamask.\r\n    bytes32 public constant DELEGATION_HASH_EIP712 =\r\n    keccak256(abi.encodePacked(\"address GenesisProtocolAddress\",\"bytes32 ProposalId\", \"uint Vote\",\"uint AmountToStake\",\"uint Nonce\"));\r\n    // web3.eth.sign prefix\r\n    string public constant ETH_SIGN_PREFIX= \"\\x19Ethereum Signed Message:\\n32\";\r\n\r\n    /**\r\n     * @dev stakeWithSignature function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote  NO(2) or YES(1).\r\n     * @param _amount the betting amount\r\n     * @param _nonce nonce value ,it is part of the signature to ensure that\r\n              a signature can be received only once.\r\n     * @param _signatureType signature type\r\n              1 - for web3.eth.sign\r\n              2 - for eth_signTypedData according to EIP #712.\r\n     * @param _signature  - signed data by the staker\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function stakeWithSignature(\r\n        bytes32 _proposalId,\r\n        uint _vote,\r\n        uint _amount,\r\n        uint _nonce,\r\n        uint _signatureType,\r\n        bytes _signature\r\n        )\r\n        external\r\n        returns(bool)\r\n        {\r\n        require(stakeSignatures[_signature] == false);\r\n        // Recreate the digest the user signed\r\n        bytes32 delegationDigest;\r\n        if (_signatureType == 2) {\r\n            delegationDigest = keccak256(\r\n                abi.encodePacked(\r\n                    DELEGATION_HASH_EIP712, keccak256(\r\n                        abi.encodePacked(\r\n                           address(this),\r\n                          _proposalId,\r\n                          _vote,\r\n                          _amount,\r\n                          _nonce)))\r\n            );\r\n        } else {\r\n            delegationDigest = keccak256(\r\n                abi.encodePacked(\r\n                    ETH_SIGN_PREFIX, keccak256(\r\n                        abi.encodePacked(\r\n                            address(this),\r\n                           _proposalId,\r\n                           _vote,\r\n                           _amount,\r\n                           _nonce)))\r\n            );\r\n        }\r\n        address staker = delegationDigest.recover(_signature);\r\n        //a garbage staker address due to wrong signature will revert due to lack of approval and funds.\r\n        require(staker!=address(0));\r\n        stakeSignatures[_signature] = true;\r\n        return _stake(_proposalId,_vote,_amount,staker);\r\n    }\r\n\r\n  /**\r\n   * @dev voting function\r\n   * @param _proposalId id of the proposal\r\n   * @param _vote NO(2) or YES(1).\r\n   * @return bool true - the proposal has been executed\r\n   *              false - otherwise.\r\n   */\r\n    function vote(bytes32 _proposalId, uint _vote) external votable(_proposalId) returns(bool) {\r\n        return internalVote(_proposalId, msg.sender, _vote, 0);\r\n    }\r\n\r\n  /**\r\n   * @dev voting function with owner functionality (can vote on behalf of someone else)\r\n   * @return bool true - the proposal has been executed\r\n   *              false - otherwise.\r\n   */\r\n    function ownerVote(bytes32 , uint , address ) external returns(bool) {\r\n      //This is not allowed.\r\n        return false;\r\n    }\r\n\r\n    function voteWithSpecifiedAmounts(bytes32 _proposalId,uint _vote,uint _rep,uint) external votable(_proposalId) returns(bool) {\r\n        return internalVote(_proposalId,msg.sender,_vote,_rep);\r\n    }\r\n\r\n  /**\r\n   * @dev Cancel the vote of the msg.sender.\r\n   * cancel vote is not allow in genesisProtocol so this function doing nothing.\r\n   * This function is here in order to comply to the IntVoteInterface .\r\n   */\r\n    function cancelVote(bytes32 _proposalId) external votable(_proposalId) {\r\n       //this is not allowed\r\n        return;\r\n    }\r\n\r\n  /**\r\n    * @dev getNumberOfChoices returns the number of choices possible in this proposal\r\n    * @param _proposalId the ID of the proposals\r\n    * @return uint that contains number of choices\r\n    */\r\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint) {\r\n        return proposals[_proposalId].numOfChoices;\r\n    }\r\n\r\n    /**\r\n     * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _voter the address of the voter\r\n     * @return uint vote - the voters vote\r\n     *        uint reputation - amount of reputation committed by _voter to _proposalId\r\n     */\r\n    function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {\r\n        Voter memory voter = proposals[_proposalId].voters[_voter];\r\n        return (voter.vote, voter.reputation);\r\n    }\r\n\r\n    /**\r\n    * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n    * @param _proposalId the ID of the proposal\r\n    * @param _choice the index in the\r\n    * @return voted reputation for the given choice\r\n    */\r\n    function voteStatus(bytes32 _proposalId,uint _choice) external view returns(uint) {\r\n        return proposals[_proposalId].votes[_choice];\r\n    }\r\n\r\n    /**\r\n    * @dev isVotable check if the proposal is votable\r\n    * @param _proposalId the ID of the proposal\r\n    * @return bool true or false\r\n    */\r\n    function isVotable(bytes32 _proposalId) external view returns(bool) {\r\n        return _isVotable(_proposalId);\r\n    }\r\n\r\n    /**\r\n    * @dev proposalStatus return the total votes and stakes for a given proposal\r\n    * @param _proposalId the ID of the proposal\r\n    * @return uint preBoostedVotes YES\r\n    * @return uint preBoostedVotes NO\r\n    * @return uint stakersStakes\r\n    * @return uint totalRedeemableStakes\r\n    * @return uint total stakes YES\r\n    * @return uint total stakes NO\r\n    */\r\n    function proposalStatus(bytes32 _proposalId) external view returns(uint, uint, uint ,uint, uint ,uint) {\r\n        return (\r\n                proposals[_proposalId].preBoostedVotes[YES],\r\n                proposals[_proposalId].preBoostedVotes[NO],\r\n                proposals[_proposalId].totalStakes[0],\r\n                proposals[_proposalId].totalStakes[1],\r\n                proposals[_proposalId].stakes[YES],\r\n                proposals[_proposalId].stakes[NO]\r\n        );\r\n    }\r\n\r\n  /**\r\n    * @dev proposalAvatar return the avatar for a given proposal\r\n    * @param _proposalId the ID of the proposal\r\n    * @return uint total reputation supply\r\n    */\r\n    function proposalAvatar(bytes32 _proposalId) external view returns(address) {\r\n        return (proposals[_proposalId].avatar);\r\n    }\r\n\r\n  /**\r\n    * @dev scoreThresholdParams return the score threshold params for a given\r\n    * organization.\r\n    * @param _avatar the organization's avatar\r\n    * @return uint thresholdConstA\r\n    * @return uint thresholdConstB\r\n    */\r\n    function scoreThresholdParams(address _avatar) external view returns(uint,uint) {\r\n        bytes32 paramsHash = getParametersFromController(Avatar(_avatar));\r\n        Parameters memory params = parameters[paramsHash];\r\n        return (params.thresholdConstA,params.thresholdConstB);\r\n    }\r\n\r\n    /**\r\n      * @dev getStaker return the vote and stake amount for a given proposal and staker\r\n      * @param _proposalId the ID of the proposal\r\n      * @param _staker staker address\r\n      * @return uint vote\r\n      * @return uint amount\r\n    */\r\n    function getStaker(bytes32 _proposalId,address _staker) external view returns(uint,uint) {\r\n        return (proposals[_proposalId].stakers[_staker].vote,proposals[_proposalId].stakers[_staker].amount);\r\n    }\r\n\r\n    /**\r\n      * @dev state return the state for a given proposal\r\n      * @param _proposalId the ID of the proposal\r\n      * @return ProposalState proposal state\r\n    */\r\n    function state(bytes32 _proposalId) external view returns(ProposalState) {\r\n        return proposals[_proposalId].state;\r\n    }\r\n\r\n    /**\r\n    * @dev winningVote return the winningVote for a given proposal\r\n    * @param _proposalId the ID of the proposal\r\n    * @return uint winningVote\r\n    */\r\n    function winningVote(bytes32 _proposalId) external view returns(uint) {\r\n        return proposals[_proposalId].winningVote;\r\n    }\r\n\r\n   /**\r\n    * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n    * @return bool true or false\r\n    */\r\n    function isAbstainAllow() external pure returns(bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n    function getAllowedRangeOfChoices() external pure returns(uint min,uint max) {\r\n        return (NUM_OF_CHOICES,NUM_OF_CHOICES);\r\n    }\r\n\r\n    /**\r\n    * @dev execute check if the proposal has been decided, and if so, execute the proposal\r\n    * @param _proposalId the id of the proposal\r\n    * @return bool true - the proposal has been executed\r\n    *              false - otherwise.\r\n   */\r\n    function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev redeem a reward for a successful stake, vote or proposing.\r\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\r\n     * users to redeem on behalf of someone else.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _beneficiary - the beneficiary address\r\n     * @return rewards -\r\n     *         rewards[0] - stakerTokenAmount\r\n     *         rewards[1] - stakerReputationAmount\r\n     *         rewards[2] - voterTokenAmount\r\n     *         rewards[3] - voterReputationAmount\r\n     *         rewards[4] - proposerReputationAmount\r\n     * @return reputation - redeem reputation\r\n     */\r\n    function redeem(bytes32 _proposalId,address _beneficiary) public returns (uint[5] rewards) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        require((proposal.state == ProposalState.Executed) || (proposal.state == ProposalState.Closed),\"wrong proposal state\");\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        uint amount;\r\n        uint reputation;\r\n        uint lostReputation;\r\n        if (proposal.winningVote == YES) {\r\n            lostReputation = proposal.preBoostedVotes[NO];\r\n        } else {\r\n            lostReputation = proposal.preBoostedVotes[YES];\r\n        }\r\n        lostReputation = (lostReputation * params.votersReputationLossRatio)/100;\r\n        //as staker\r\n        Staker storage staker = proposal.stakers[_beneficiary];\r\n        if ((staker.amount>0) &&\r\n             (staker.vote == proposal.winningVote)) {\r\n            uint totalWinningStakes = proposal.stakes[proposal.winningVote];\r\n            if (totalWinningStakes != 0) {\r\n                rewards[0] = (staker.amount * proposal.totalStakes[0]) / totalWinningStakes;\r\n            }\r\n            if (proposal.state != ProposalState.Closed) {\r\n                rewards[1] = (staker.amount * ( lostReputation - ((lostReputation * params.votersGainRepRatioFromLostRep)/100)))/proposal.stakes[proposal.winningVote];\r\n            }\r\n            staker.amount = 0;\r\n        }\r\n        //as voter\r\n        Voter storage voter = proposal.voters[_beneficiary];\r\n        if ((voter.reputation != 0 ) && (voter.preBoosted)) {\r\n            uint preBoostedVotes = proposal.preBoostedVotes[YES] + proposal.preBoostedVotes[NO];\r\n            if (preBoostedVotes>0) {\r\n                rewards[2] = ((proposal.votersStakes * voter.reputation) / preBoostedVotes);\r\n            }\r\n            if (proposal.state == ProposalState.Closed) {\r\n              //give back reputation for the voter\r\n                rewards[3] = ((voter.reputation * params.votersReputationLossRatio)/100);\r\n            } else if (proposal.winningVote == voter.vote ) {\r\n                rewards[3] = (((voter.reputation * params.votersReputationLossRatio)/100) +\r\n                (((voter.reputation * lostReputation * params.votersGainRepRatioFromLostRep)/100)/preBoostedVotes));\r\n            }\r\n            voter.reputation = 0;\r\n        }\r\n        //as proposer\r\n        if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {\r\n            rewards[4] = (params.proposingRepRewardConstA.mul(proposal.votes[YES]+proposal.votes[NO]) + params.proposingRepRewardConstB.mul(proposal.votes[YES]-proposal.votes[NO]))/1000;\r\n            proposal.proposer = 0;\r\n        }\r\n        amount = rewards[0] + rewards[2];\r\n        reputation = rewards[1] + rewards[3] + rewards[4];\r\n        if (amount != 0) {\r\n            proposal.totalStakes[1] = proposal.totalStakes[1].sub(amount);\r\n            require(stakingToken.transfer(_beneficiary, amount));\r\n            emit Redeem(_proposalId,proposal.avatar,_beneficiary,amount);\r\n        }\r\n        if (reputation != 0 ) {\r\n            ControllerInterface(Avatar(proposal.avatar).owner()).mintReputation(reputation,_beneficiary,proposal.avatar);\r\n            emit RedeemReputation(_proposalId,proposal.avatar,_beneficiary,reputation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev redeemDaoBounty a reward for a successful stake, vote or proposing.\r\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\r\n     * users to redeem on behalf of someone else.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _beneficiary - the beneficiary address\r\n     * @return redeemedAmount - redeem token amount\r\n     * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the avatar )\r\n     */\r\n    function redeemDaoBounty(bytes32 _proposalId,address _beneficiary) public returns(uint redeemedAmount,uint potentialAmount) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        require((proposal.state == ProposalState.Executed) || (proposal.state == ProposalState.Closed));\r\n        uint totalWinningStakes = proposal.stakes[proposal.winningVote];\r\n        if (\r\n          // solium-disable-next-line operator-whitespace\r\n            (proposal.stakers[_beneficiary].amountForBounty>0)&&\r\n            (proposal.stakers[_beneficiary].vote == proposal.winningVote)&&\r\n            (proposal.winningVote == YES)&&\r\n            (totalWinningStakes != 0))\r\n        {\r\n            //as staker\r\n            Parameters memory params = parameters[proposal.paramsHash];\r\n            uint beneficiaryLimit = (proposal.stakers[_beneficiary].amountForBounty.mul(params.daoBountyLimit)) / totalWinningStakes;\r\n            potentialAmount = (params.daoBountyConst.mul(proposal.stakers[_beneficiary].amountForBounty))/100;\r\n            if (potentialAmount > beneficiaryLimit) {\r\n                potentialAmount = beneficiaryLimit;\r\n            }\r\n        }\r\n        if ((potentialAmount != 0)&&(stakingToken.balanceOf(proposal.avatar) >= potentialAmount)) {\r\n            proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);\r\n            require(ControllerInterface(Avatar(proposal.avatar).owner()).externalTokenTransfer(stakingToken,_beneficiary,potentialAmount,proposal.avatar));\r\n            proposal.stakers[_beneficiary].amountForBounty = 0;\r\n            redeemedAmount = potentialAmount;\r\n            emit RedeemDaoBounty(_proposalId,proposal.avatar,_beneficiary,redeemedAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev shouldBoost check if a proposal should be shifted to boosted phase.\r\n     * @param _proposalId the ID of the proposal\r\n     * @return bool true or false.\r\n     */\r\n    function shouldBoost(bytes32 _proposalId) public view returns(bool) {\r\n        Proposal memory proposal = proposals[_proposalId];\r\n        return (_score(_proposalId) >= threshold(proposal.paramsHash,proposal.avatar));\r\n    }\r\n\r\n    /**\r\n     * @dev score return the proposal score\r\n     * @param _proposalId the ID of the proposal\r\n     * @return uint proposal score.\r\n     */\r\n    function score(bytes32 _proposalId) public view returns(int) {\r\n        return _score(_proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev getBoostedProposalsCount return the number of boosted proposal for an organization\r\n     * @param _avatar the organization avatar\r\n     * @return uint number of boosted proposals\r\n     */\r\n    function getBoostedProposalsCount(address _avatar) public view returns(uint) {\r\n        uint expiredProposals;\r\n        if (proposalsExpiredTimes[_avatar].count() != 0) {\r\n          // solium-disable-next-line security/no-block-members\r\n            expiredProposals = proposalsExpiredTimes[_avatar].rank(now);\r\n        }\r\n        return orgBoostedProposalsCnt[_avatar].sub(expiredProposals);\r\n    }\r\n\r\n    /**\r\n     * @dev threshold return the organization's score threshold which required by\r\n     * a proposal to shift to boosted state.\r\n     * This threshold is dynamically set and it depend on the number of boosted proposal.\r\n     * @param _avatar the organization avatar\r\n     * @param _paramsHash the organization parameters hash\r\n     * @return int organization's score threshold.\r\n     */\r\n    function threshold(bytes32 _paramsHash,address _avatar) public view returns(int) {\r\n        uint boostedProposals = getBoostedProposalsCount(_avatar);\r\n        int216 e = 2;\r\n\r\n        Parameters memory params = parameters[_paramsHash];\r\n        require(params.thresholdConstB > 0,\"should be a valid parameter hash\");\r\n        int256 power = int216(boostedProposals).toReal().div(int216(params.thresholdConstB).toReal());\r\n\r\n        if (power.fromReal() > 100 ) {\r\n            power = int216(100).toReal();\r\n        }\r\n        int256 res = int216(params.thresholdConstA).toReal().mul(e.toReal().pow(power));\r\n        return res.fromReal();\r\n    }\r\n\r\n    /**\r\n     * @dev hash the parameters, save them if necessary, and return the hash value\r\n     * @param _params a parameters array\r\n     *    _params[0] - _preBoostedVoteRequiredPercentage,\r\n     *    _params[1] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.\r\n     *    _params[2] -_boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.\r\n     *    _params[3] -_thresholdConstA\r\n     *    _params[4] -_thresholdConstB\r\n     *    _params[5] -_minimumStakingFee\r\n     *    _params[6] -_quietEndingPeriod\r\n     *    _params[7] -_proposingRepRewardConstA\r\n     *    _params[8] -_proposingRepRewardConstB\r\n     *    _params[9] -_stakerFeeRatioForVoters\r\n     *    _params[10] -_votersReputationLossRatio\r\n     *    _params[11] -_votersGainRepRatioFromLostRep\r\n     *    _params[12] - _daoBountyConst\r\n     *    _params[13] - _daoBountyLimit\r\n    */\r\n    function setParameters(\r\n        uint[14] _params //use array here due to stack too deep issue.\r\n    )\r\n    public\r\n    returns(bytes32)\r\n    {\r\n        require(_params[0] <= 100 && _params[0] > 0,\"0 < preBoostedVoteRequiredPercentage <= 100\");\r\n        require(_params[4] > 0 && _params[4] <= 100000000,\"0 < thresholdConstB < 100000000 \");\r\n        require(_params[3] <= 100000000 ether,\"thresholdConstA <= 100000000 wei\");\r\n        require(_params[9] <= 100,\"stakerFeeRatioForVoters <= 100\");\r\n        require(_params[10] <= 100,\"votersReputationLossRatio <= 100\");\r\n        require(_params[11] <= 100,\"votersGainRepRatioFromLostRep <= 100\");\r\n        require(_params[2] >= _params[6],\"boostedVotePeriodLimit >= quietEndingPeriod\");\r\n        require(_params[7] <= 100000000,\"proposingRepRewardConstA <= 100000000\");\r\n        require(_params[8] <= 100000000,\"proposingRepRewardConstB <= 100000000\");\r\n        require(_params[12] <= (2 * _params[9]),\"daoBountyConst <= 2 * stakerFeeRatioForVoters\");\r\n        require(_params[12] >= _params[9],\"daoBountyConst >= stakerFeeRatioForVoters\");\r\n\r\n\r\n        bytes32 paramsHash = getParametersHash(_params);\r\n        parameters[paramsHash] = Parameters({\r\n            preBoostedVoteRequiredPercentage: _params[0],\r\n            preBoostedVotePeriodLimit: _params[1],\r\n            boostedVotePeriodLimit: _params[2],\r\n            thresholdConstA:_params[3],\r\n            thresholdConstB:_params[4],\r\n            minimumStakingFee: _params[5],\r\n            quietEndingPeriod: _params[6],\r\n            proposingRepRewardConstA: _params[7],\r\n            proposingRepRewardConstB:_params[8],\r\n            stakerFeeRatioForVoters:_params[9],\r\n            votersReputationLossRatio:_params[10],\r\n            votersGainRepRatioFromLostRep:_params[11],\r\n            daoBountyConst:_params[12],\r\n            daoBountyLimit:_params[13]\r\n        });\r\n        return paramsHash;\r\n    }\r\n\r\n  /**\r\n   * @dev hashParameters returns a hash of the given parameters\r\n   */\r\n    function getParametersHash(\r\n        uint[14] _params) //use array here due to stack too deep issue.\r\n        public\r\n        pure\r\n        returns(bytes32)\r\n        {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n            _params[0],\r\n            _params[1],\r\n            _params[2],\r\n            _params[3],\r\n            _params[4],\r\n            _params[5],\r\n            _params[6],\r\n            _params[7],\r\n            _params[8],\r\n            _params[9],\r\n            _params[10],\r\n            _params[11],\r\n            _params[12],\r\n            _params[13]));\r\n    }\r\n\r\n    /**\r\n    * @dev execute check if the proposal has been decided, and if so, execute the proposal\r\n    * @param _proposalId the id of the proposal\r\n    * @return bool true - the proposal has been executed\r\n    *              false - otherwise.\r\n   */\r\n    function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        Proposal memory tmpProposal = proposal;\r\n        uint totalReputation = Avatar(proposal.avatar).nativeReputation().totalSupply();\r\n        uint executionBar = totalReputation * params.preBoostedVoteRequiredPercentage/100;\r\n        ExecutionState executionState = ExecutionState.None;\r\n\r\n        if (proposal.state == ProposalState.PreBoosted) {\r\n            // solium-disable-next-line security/no-block-members\r\n            if ((now - proposal.submittedTime) >= params.preBoostedVotePeriodLimit) {\r\n                proposal.state = ProposalState.Closed;\r\n                proposal.winningVote = NO;\r\n                executionState = ExecutionState.PreBoostedTimeOut;\r\n             } else if (proposal.votes[proposal.winningVote] > executionBar) {\r\n              // someone crossed the absolute vote execution bar.\r\n                proposal.state = ProposalState.Executed;\r\n                executionState = ExecutionState.PreBoostedBarCrossed;\r\n               } else if ( shouldBoost(_proposalId)) {\r\n                //change proposal mode to boosted mode.\r\n                proposal.state = ProposalState.Boosted;\r\n                // solium-disable-next-line security/no-block-members\r\n                proposal.boostedPhaseTime = now;\r\n                proposalsExpiredTimes[proposal.avatar].insert(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\r\n                orgBoostedProposalsCnt[proposal.avatar]++;\r\n              }\r\n           }\r\n\r\n        if ((proposal.state == ProposalState.Boosted) ||\r\n            (proposal.state == ProposalState.QuietEndingPeriod)) {\r\n            // solium-disable-next-line security/no-block-members\r\n            if ((now - proposal.boostedPhaseTime) >= proposal.currentBoostedVotePeriodLimit) {\r\n                proposalsExpiredTimes[proposal.avatar].remove(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\r\n                orgBoostedProposalsCnt[tmpProposal.avatar] = orgBoostedProposalsCnt[tmpProposal.avatar].sub(1);\r\n                proposal.state = ProposalState.Executed;\r\n                executionState = ExecutionState.BoostedTimeOut;\r\n             } else if (proposal.votes[proposal.winningVote] > executionBar) {\r\n               // someone crossed the absolute vote execution bar.\r\n                orgBoostedProposalsCnt[tmpProposal.avatar] = orgBoostedProposalsCnt[tmpProposal.avatar].sub(1);\r\n                proposalsExpiredTimes[proposal.avatar].remove(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\r\n                proposal.state = ProposalState.Executed;\r\n                executionState = ExecutionState.BoostedBarCrossed;\r\n            }\r\n       }\r\n        if (executionState != ExecutionState.None) {\r\n            if (proposal.winningVote == YES) {\r\n                uint daoBountyRemain = (params.daoBountyConst.mul(proposal.stakes[proposal.winningVote]))/100;\r\n                if (daoBountyRemain > params.daoBountyLimit) {\r\n                    daoBountyRemain = params.daoBountyLimit;\r\n                }\r\n                proposal.daoBountyRemain = daoBountyRemain;\r\n            }\r\n            emit ExecuteProposal(_proposalId, proposal.avatar, proposal.winningVote, totalReputation);\r\n            emit GPExecuteProposal(_proposalId, executionState);\r\n            (tmpProposal.executable).execute(_proposalId, tmpProposal.avatar, int(proposal.winningVote));\r\n        }\r\n        return (executionState != ExecutionState.None);\r\n    }\r\n\r\n    /**\r\n     * @dev staking function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote  NO(2) or YES(1).\r\n     * @param _amount the betting amount\r\n     * @param _staker the staker address\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function _stake(bytes32 _proposalId, uint _vote, uint _amount,address _staker) internal returns(bool) {\r\n        // 0 is not a valid vote.\r\n\r\n        require(_vote <= NUM_OF_CHOICES && _vote > 0);\r\n        require(_amount > 0);\r\n        if (_execute(_proposalId)) {\r\n            return true;\r\n        }\r\n\r\n        Proposal storage proposal = proposals[_proposalId];\r\n\r\n        if (proposal.state != ProposalState.PreBoosted) {\r\n            return false;\r\n        }\r\n\r\n        // enable to increase stake only on the previous stake vote\r\n        Staker storage staker = proposal.stakers[_staker];\r\n        if ((staker.amount > 0) && (staker.vote != _vote)) {\r\n            return false;\r\n        }\r\n\r\n        uint amount = _amount;\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        require(amount >= params.minimumStakingFee);\r\n        require(stakingToken.transferFrom(_staker, address(this), amount));\r\n        proposal.totalStakes[1] = proposal.totalStakes[1].add(amount); //update totalRedeemableStakes\r\n        staker.amount += amount;\r\n        staker.amountForBounty = staker.amount;\r\n        staker.vote = _vote;\r\n\r\n        proposal.votersStakes += (params.stakerFeeRatioForVoters * amount)/100;\r\n        proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);\r\n        amount = amount - ((params.stakerFeeRatioForVoters*amount)/100);\r\n\r\n        proposal.totalStakes[0] = amount.add(proposal.totalStakes[0]);\r\n      // Event:\r\n        emit Stake(_proposalId, proposal.avatar, _staker, _vote, _amount);\r\n      // execute the proposal if this vote was decisive:\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead\r\n     * @param _proposalId id of the proposal\r\n     * @param _voter used in case the vote is cast for someone else\r\n     * @param _vote a value between 0 to and the proposal's number of choices.\r\n     * @param _rep how many reputation the voter would like to stake for this vote.\r\n     *         if  _rep==0 so the voter full reputation will be use.\r\n     * @return true in case of proposal execution otherwise false\r\n     * throws if proposal is not open or if it has been executed\r\n     * NB: executes the proposal if a decision has been reached\r\n     */\r\n    function internalVote(bytes32 _proposalId, address _voter, uint _vote, uint _rep) internal returns(bool) {\r\n        // 0 is not a valid vote.\r\n        require(_vote <= NUM_OF_CHOICES && _vote > 0,\"0 < _vote <= 2\");\r\n        if (_execute(_proposalId)) {\r\n            return true;\r\n        }\r\n\r\n        Parameters memory params = parameters[proposals[_proposalId].paramsHash];\r\n        Proposal storage proposal = proposals[_proposalId];\r\n\r\n        // Check voter has enough reputation:\r\n        uint reputation = Avatar(proposal.avatar).nativeReputation().reputationOf(_voter);\r\n        require(reputation >= _rep);\r\n        uint rep = _rep;\r\n        if (rep == 0) {\r\n            rep = reputation;\r\n        }\r\n        // If this voter has already voted, return false.\r\n        if (proposal.voters[_voter].reputation != 0) {\r\n            return false;\r\n        }\r\n        // The voting itself:\r\n        proposal.votes[_vote] = rep.add(proposal.votes[_vote]);\r\n        //check if the current winningVote changed or there is a tie.\r\n        //for the case there is a tie the current winningVote set to NO.\r\n        if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||\r\n           ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&\r\n             proposal.winningVote == YES))\r\n        {\r\n           // solium-disable-next-line security/no-block-members\r\n            uint _now = now;\r\n            if ((proposal.state == ProposalState.QuietEndingPeriod) ||\r\n               ((proposal.state == ProposalState.Boosted) && ((_now - proposal.boostedPhaseTime) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod)))) {\r\n                //quietEndingPeriod\r\n                proposalsExpiredTimes[proposal.avatar].remove(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\r\n                if (proposal.state != ProposalState.QuietEndingPeriod) {\r\n                    proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;\r\n                    proposal.state = ProposalState.QuietEndingPeriod;\r\n                }\r\n                proposal.boostedPhaseTime = _now;\r\n                proposalsExpiredTimes[proposal.avatar].insert(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\r\n            }\r\n            proposal.winningVote = _vote;\r\n        }\r\n        proposal.voters[_voter] = Voter({\r\n            reputation: rep,\r\n            vote: _vote,\r\n            preBoosted:(proposal.state == ProposalState.PreBoosted)\r\n        });\r\n        if (proposal.state == ProposalState.PreBoosted) {\r\n            proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);\r\n            uint reputationDeposit = (params.votersReputationLossRatio * rep)/100;\r\n            ControllerInterface(Avatar(proposal.avatar).owner()).burnReputation(reputationDeposit,_voter,proposal.avatar);\r\n        }\r\n        // Event:\r\n        emit VoteProposal(_proposalId, proposal.avatar, _voter, _vote, rep);\r\n        // execute the proposal if this vote was decisive:\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev _score return the proposal score\r\n     * For dual choice proposal S = (S+) - (S-)\r\n     * @param _proposalId the ID of the proposal\r\n     * @return int proposal score.\r\n     */\r\n    function _score(bytes32 _proposalId) private view returns(int) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        return int(proposal.stakes[YES]) - int(proposal.stakes[NO]);\r\n    }\r\n\r\n    /**\r\n      * @dev _isVotable check if the proposal is votable\r\n      * @param _proposalId the ID of the proposal\r\n      * @return bool true or false\r\n    */\r\n    function _isVotable(bytes32 _proposalId) private view returns(bool) {\r\n        ProposalState pState = proposals[_proposalId].state;\r\n        return ((pState == ProposalState.PreBoosted)||(pState == ProposalState.Boosted)||(pState == ProposalState.QuietEndingPeriod));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"parameters\",\"outputs\":[{\"name\":\"preBoostedVoteRequiredPercentage\",\"type\":\"uint256\"},{\"name\":\"preBoostedVotePeriodLimit\",\"type\":\"uint256\"},{\"name\":\"boostedVotePeriodLimit\",\"type\":\"uint256\"},{\"name\":\"thresholdConstA\",\"type\":\"uint256\"},{\"name\":\"thresholdConstB\",\"type\":\"uint256\"},{\"name\":\"minimumStakingFee\",\"type\":\"uint256\"},{\"name\":\"quietEndingPeriod\",\"type\":\"uint256\"},{\"name\":\"proposingRepRewardConstA\",\"type\":\"uint256\"},{\"name\":\"proposingRepRewardConstB\",\"type\":\"uint256\"},{\"name\":\"stakerFeeRatioForVoters\",\"type\":\"uint256\"},{\"name\":\"votersReputationLossRatio\",\"type\":\"uint256\"},{\"name\":\"votersGainRepRatioFromLostRep\",\"type\":\"uint256\"},{\"name\":\"daoBountyConst\",\"type\":\"uint256\"},{\"name\":\"daoBountyLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numOfChoices\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"_avatar\",\"type\":\"address\"},{\"name\":\"_executable\",\"type\":\"address\"},{\"name\":\"_proposer\",\"type\":\"address\"}],\"name\":\"propose\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"voteInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalsCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashedParameters\",\"type\":\"bytes32\"}],\"name\":\"updateParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"name\":\"_vote\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_HASH_EIP712\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"avatar\",\"type\":\"address\"},{\"name\":\"numOfChoices\",\"type\":\"uint256\"},{\"name\":\"executable\",\"type\":\"address\"},{\"name\":\"votersStakes\",\"type\":\"uint256\"},{\"name\":\"submittedTime\",\"type\":\"uint256\"},{\"name\":\"boostedPhaseTime\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"winningVote\",\"type\":\"uint256\"},{\"name\":\"proposer\",\"type\":\"address\"},{\"name\":\"currentBoostedVotePeriodLimit\",\"type\":\"uint256\"},{\"name\":\"paramsHash\",\"type\":\"bytes32\"},{\"name\":\"daoBountyRemain\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"winningVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"name\":\"_vote\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signatureType\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"stakeWithSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllowedRangeOfChoices\",\"outputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAbstainAllow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_params\",\"type\":\"uint256[14]\"}],\"name\":\"getParametersHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"scoreThresholdParams\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"redeemDaoBounty\",\"outputs\":[{\"name\":\"redeemedAmount\",\"type\":\"uint256\"},{\"name\":\"potentialAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_params\",\"type\":\"uint256[14]\"}],\"name\":\"setParameters\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"proposalStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_SIGN_PREFIX\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"shouldBoost\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"cancelVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUM_OF_CHOICES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"name\":\"_vote\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"getNumberOfChoices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"name\":\"_vote\",\"type\":\"uint256\"},{\"name\":\"_rep\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteWithSpecifiedAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"voteStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"isVotable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"name\":\"rewards\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"score\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_paramsHash\",\"type\":\"bytes32\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"getBoostedProposalsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"proposalAvatar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashedParameters\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_stakingToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_executionState\",\"type\":\"uint8\"}],\"name\":\"GPExecuteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_vote\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RedeemDaoBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RedeemReputation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_numOfChoices\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_proposer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_paramsHash\",\"type\":\"bytes32\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_decision\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalReputation\",\"type\":\"uint256\"}],\"name\":\"ExecuteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_vote\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reputation\",\"type\":\"uint256\"}],\"name\":\"VoteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"CancelProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"CancelVoting\",\"type\":\"event\"}]","ContractName":"GenesisProtocol","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000543ff227f64aa17ea132bf9886cab5db55dcaddf","Library":"","SwarmSource":"bzzr://6ea5ea3ce2996dc54260013487ca75ba95fa62dd99eab61e53c4b7950cfe21e6"}]}