{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Adminable.sol\r\n\r\n/**\r\n * @title Adminable\r\n * @dev The adminable contract has an admin address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Adminable is Ownable {\r\n    address public admin;\r\n\r\n    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\r\n\r\n    /**\r\n     * @dev The Mintable constructor sets the original `minter` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the admin.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Only admin is allowed to execute this method.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the admin to newAdmin\r\n     */\r\n    function transferAdmin(address newAdmin) public onlyOwner {\r\n        require(newAdmin != address(0));\r\n        emit AdminTransferred(admin, newAdmin);\r\n        admin = newAdmin;\r\n    }\r\n}\r\n\r\n// File: contracts/EpicsLimitedEdition.sol\r\n\r\ncontract EpicsLimitedEdition is Ownable, Adminable {\r\n    event LimitedEditionRunCreated(uint256 runId);\r\n    event UUIDAdded(uint256 runId, string uuid);\r\n\r\n    struct LimitedEditionRun {\r\n        string name;\r\n        uint32 cardCount;\r\n        string created;\r\n    }\r\n\r\n    LimitedEditionRun[] runs;\r\n    mapping (string => uint256) internal uuidToRunId;\r\n    mapping (string => uint256) internal nameToRunId;\r\n    mapping (uint256 => string[]) internal runToUuids;\r\n    mapping (string => bool) internal uuidExists;\r\n    mapping (string => bool) internal runExists;\r\n\r\n\r\n    function createRun(string name, uint32 cardCount, string created) public onlyAdmin {\r\n        require(runExists[name] == false, \"Limited edition run with that name already exists.\");\r\n        LimitedEditionRun memory _run = LimitedEditionRun({name: name, cardCount: cardCount, created: created});\r\n        uint256 _runId = runs.push(_run) - 1;\r\n        runToUuids[_runId] = new string[](0);\r\n        nameToRunId[name] = _runId;\r\n        runExists[name] = true;\r\n        emit LimitedEditionRunCreated(_runId);\r\n    }\r\n\r\n    function getRun(uint256 runId) public view returns (string name, uint32 cardCount, string created) {\r\n        require(runId < runs.length, \"Run ID does not exist.\");\r\n        LimitedEditionRun memory run = runs[runId];\r\n        name = run.name;\r\n        cardCount = run.cardCount;\r\n        created = run.created;\r\n    }\r\n\r\n    function getRunIdForName(string name) public view returns (uint256 runId) {\r\n        require(runExists[name] == true, \"Run with that name does not exist.\");\r\n        return nameToRunId[name];\r\n    }\r\n\r\n    function getRunIdForUUID(string uuid) public view returns (uint256 runId) {\r\n        require(uuidExists[uuid] == true, \"UUID is not added to any run.\");\r\n        return uuidToRunId[uuid];\r\n    }\r\n\r\n    function getRunUUIDAtIndex(uint256 runId, uint256 index) public view returns (string uuid) {\r\n        require(runId < runs.length, \"Run ID does not exist.\");\r\n        require(index < runToUuids[runId].length, \"That UUID index is out of range.\");\r\n        uuid = runToUuids[runId][index];\r\n    }\r\n\r\n    function getTotalRuns() public constant returns (uint256 totalRuns) {\r\n        return runs.length;\r\n    }\r\n\r\n    function add1UUID(uint256 runId, string uuid) public onlyAdmin {\r\n        require(runId < runs.length, \"Run ID does not exist.\");\r\n        require(uuidExists[uuid] == false, \"UUID already added.\");\r\n        runToUuids[runId].push(uuid);\r\n        uuidToRunId[uuid] = runId;\r\n        uuidExists[uuid] = true;\r\n        emit UUIDAdded(runId, uuid);\r\n    }\r\n\r\n    function add5UUIDs(uint256 runId, string uuid1, string uuid2, string uuid3, string uuid4, string uuid5) public onlyAdmin {\r\n        add1UUID(runId, uuid1);\r\n        add1UUID(runId, uuid2);\r\n        add1UUID(runId, uuid3);\r\n        add1UUID(runId, uuid4);\r\n        add1UUID(runId, uuid5);\r\n    }\r\n\r\n    function add10UUIDs(uint256 runId, string uuid1, string uuid2, string uuid3, string uuid4, string uuid5,\r\n                        string uuid6, string uuid7, string uuid8, string uuid9, string uuid10) public onlyAdmin {\r\n        add1UUID(runId, uuid1);\r\n        add1UUID(runId, uuid2);\r\n        add1UUID(runId, uuid3);\r\n        add1UUID(runId, uuid4);\r\n        add1UUID(runId, uuid5);\r\n        add1UUID(runId, uuid6);\r\n        add1UUID(runId, uuid7);\r\n        add1UUID(runId, uuid8);\r\n        add1UUID(runId, uuid9);\r\n        add1UUID(runId, uuid10);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getRunIdForName\",\"outputs\":[{\"name\":\"runId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"getRun\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"cardCount\",\"type\":\"uint32\"},{\"name\":\"created\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"runId\",\"type\":\"uint256\"},{\"name\":\"uuid1\",\"type\":\"string\"},{\"name\":\"uuid2\",\"type\":\"string\"},{\"name\":\"uuid3\",\"type\":\"string\"},{\"name\":\"uuid4\",\"type\":\"string\"},{\"name\":\"uuid5\",\"type\":\"string\"}],\"name\":\"add5UUIDs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"runId\",\"type\":\"uint256\"},{\"name\":\"uuid1\",\"type\":\"string\"},{\"name\":\"uuid2\",\"type\":\"string\"},{\"name\":\"uuid3\",\"type\":\"string\"},{\"name\":\"uuid4\",\"type\":\"string\"},{\"name\":\"uuid5\",\"type\":\"string\"},{\"name\":\"uuid6\",\"type\":\"string\"},{\"name\":\"uuid7\",\"type\":\"string\"},{\"name\":\"uuid8\",\"type\":\"string\"},{\"name\":\"uuid9\",\"type\":\"string\"},{\"name\":\"uuid10\",\"type\":\"string\"}],\"name\":\"add10UUIDs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"runId\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRunUUIDAtIndex\",\"outputs\":[{\"name\":\"uuid\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"runId\",\"type\":\"uint256\"},{\"name\":\"uuid\",\"type\":\"string\"}],\"name\":\"add1UUID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"cardCount\",\"type\":\"uint32\"},{\"name\":\"created\",\"type\":\"string\"}],\"name\":\"createRun\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uuid\",\"type\":\"string\"}],\"name\":\"getRunIdForUUID\",\"outputs\":[{\"name\":\"runId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalRuns\",\"outputs\":[{\"name\":\"totalRuns\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"LimitedEditionRunCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"runId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"uuid\",\"type\":\"string\"}],\"name\":\"UUIDAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EpicsLimitedEdition","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a67ea2ec576013bf4d50cf31afa7034c10d2c57cc6e0c84ac1ca3c9b3ccc9d3b"}]}