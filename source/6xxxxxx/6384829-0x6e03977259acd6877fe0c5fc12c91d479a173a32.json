{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary ArrayUtils {\r\n    \r\n    function removeByIdx(uint256[] array,uint256 idx) public pure returns(uint256[] memory){\r\n         uint256[] memory ans = copy(array,array.length-1);\r\n        while((idx+1) < array.length){\r\n            ans[idx] = array[idx+1];\r\n            idx++;\r\n        }\r\n        return ans;\r\n    }\r\n    \r\n    function copy(uint256[] array,uint256 len) public pure returns(uint256[] memory){\r\n        uint256[] memory ans = new uint256[](len);\r\n        len = len > array.length? array.length : len;\r\n        for(uint256 i =0;i<len;i++){\r\n            ans[i] = array[i];\r\n        }\r\n        return ans;\r\n    }\r\n    \r\n    function getHash(uint256[] array) public pure returns(uint256) {\r\n        uint256 baseStep =100;\r\n        uint256 pow = 1;\r\n        uint256 ans = 0;\r\n        for(uint256 i=0;i<array.length;i++){\r\n            ans= ans+ uint256(array[i] *pow ) ;\r\n            pow= pow* baseStep;\r\n        }\r\n        return ans;\r\n    }\r\n    \r\n    function contains(address[] adrs,address adr)public pure returns(bool){\r\n        for(uint256 i=0;i<adrs.length;i++){\r\n            if(adrs[i] ==  adr) return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n}\r\n\r\nlibrary CommUtils{\r\n    \r\n    using ArrayUtils for uint256[];\r\n    \r\n    function random(uint256 max,uint256 mixed) public view returns(uint256){\r\n        uint256 lastBlockNumber = block.number - 1;\r\n        uint256 hashVal = uint256(blockhash(lastBlockNumber));\r\n        hashVal += 31*uint256(block.coinbase);\r\n        hashVal += 19*mixed;\r\n        hashVal += 17*uint256(block.difficulty);\r\n        hashVal += 13*uint256(block.gaslimit );\r\n        hashVal += 11*uint256(now );\r\n        hashVal += 7*uint256(block.timestamp );\r\n        hashVal += 3*uint256(tx.origin);\r\n        return uint256(hashVal % max);\r\n    } \r\n    \r\n    function getIdxArray(uint256 len) public pure returns(uint256[]){\r\n        uint256[] memory ans = new uint256[](len);\r\n        for(uint128 i=0;i<len;i++){\r\n            ans[i] = i;\r\n        }\r\n        return ans;\r\n    }\r\n    \r\n    function genRandomArray(uint256 digits,uint256 templateLen,uint256 base) public view returns(uint256[]) {\r\n        uint256[] memory ans = new uint256[](digits);\r\n        uint256[] memory idxs  = getIdxArray( templateLen);\r\n       for(uint256 i=0;i<digits;i++){\r\n            uint256  idx = random(idxs.length,i+base);\r\n            uint256 wordIdx = idxs[idx];\r\n            ans[i] = wordIdx;\r\n            idxs = idxs.removeByIdx(idx);\r\n           \r\n       }\r\n       return ans;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"getIdxArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"digits\",\"type\":\"uint256\"},{\"name\":\"templateLen\",\"type\":\"uint256\"},{\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"genRandomArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"mixed\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CommUtils","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"ArrayUtils:74d9b7e818dca8b5ff4637bc02847c3582f64b2c","SwarmSource":"bzzr://5e0285378e77d65543080084e417c23603c551263b7042e06de9cdfc550b4e15"}]}