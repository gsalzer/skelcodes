{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title IRegistry\r\n * @dev This contract represents the interface of a registry contract\r\n */\r\ninterface IRegistry {\r\n    /**\r\n    * @dev This event will be emitted every time a new proxy is created\r\n    * @param proxy representing the address of the proxy created\r\n    */\r\n    event ProxyCreated(address proxy);\r\n\r\n    /**\r\n    * @dev This event will be emitted every time a new implementation is registered\r\n    * @param version representing the version name of the registered implementation\r\n    * @param implementation representing the address of the registered implementation\r\n    */\r\n    event VersionAdded(string version, address implementation);\r\n\r\n    /**\r\n    * @dev Registers a new version with its implementation address\r\n    * @param version representing the version name of the new implementation to be registered\r\n    * @param implementation representing the address of the new implementation to be registered\r\n    */\r\n    function addVersion(string version, address implementation) external;\r\n\r\n    /**\r\n    * @dev Tells the address of the implementation for a given version\r\n    * @param version to query the implementation of\r\n    * @return address of the implementation registered for the given version\r\n    */\r\n    function getVersion(string version) external view returns (address);\r\n}\r\n\r\n/**\r\n * @title UpgradeabilityStorage\r\n * @dev This contract holds all the necessary state variables to support the upgrade functionality\r\n */\r\ncontract UpgradeabilityStorage {\r\n    // Versions registry\r\n    IRegistry internal registry;\r\n\r\n    // Address of the current implementation\r\n    address internal _implementation;\r\n\r\n    /**\r\n    * @dev Tells the address of the current implementation\r\n    * @return address of the current implementation\r\n    */\r\n    function implementation() public view returns (address) {\r\n        return _implementation;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Upgradeable\r\n * @dev This contract holds all the minimum required functionality for a behavior to be upgradeable.\r\n * This means, required state variables for owned upgradeability purpose and simple initialization validation.\r\n */\r\ncontract Upgradeable is UpgradeabilityStorage {\r\n    /**\r\n    * @dev Validates the caller is the versions registry.\r\n    * THIS FUNCTION SHOULD BE OVERRIDDEN CALLING SUPER\r\n    * @param sender representing the address deploying the initial behavior of the contract\r\n    */\r\n    function initialize(address sender) public payable {\r\n        require(msg.sender == address(registry));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Marketplace logic implementation\r\n */\r\ncontract Marketplace is Upgradeable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    address public cashout;\r\n\r\n    // 0.01% = 1, 1% = 100, 100% = 10000\r\n    uint256 public platformCommissionRate;\r\n    uint256 public userCommissionRate;\r\n\r\n    struct User {\r\n        bool exists;\r\n        bool blocked;\r\n        address[] productContracts; // array of unique addresses\r\n    }\r\n    mapping (address => User) public users;\r\n\r\n    struct ProductContract {\r\n        bool exists;\r\n        address user;   \r\n    }\r\n    mapping (address => ProductContract) public productContracts;\r\n\r\n    event UserRegistered(address userAddress);\r\n    event UserBlocked(address userAddress);\r\n    event UserUnblocked(address userAddress);\r\n    event ProductContractRegistered(address userAddress, address contractAddress);\r\n    event PlatformIncomingTransactionCommission(address contractAddress, uint256 amount, address clientAddress);\r\n    event PlatformOutgoingTransactionCommission(address contractAddress, uint256 amount);\r\n    event UserIncomingTransactionCommission(address contractAddress, uint256 amount, address clientAddress);\r\n    event UserOutgoingTransactionCommission(address contractAddress, uint256 amount);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Init upgradable contract\r\n     */\r\n    function initialize(address sender) public payable {\r\n        super.initialize(sender);\r\n        owner = sender;\r\n        cashout = 0xb9520aD773139c4a127a6a2BF70c3728376194A0;\r\n    }\r\n\r\n    /**\r\n     * @dev Default: 0.5%\r\n     * @param newPlatformCommissionRate ex: 0.01% = 1, 1% = 100, 100% = 10000\r\n     */\r\n    function setPlatformCommissionRate(uint256 newPlatformCommissionRate) public onlyOwner {\r\n        platformCommissionRate = newPlatformCommissionRate;\r\n    }\r\n\r\n    /**\r\n     * @param weiAmount value\r\n     * @return uint256 calculated commission\r\n     */\r\n    function calculatePlatformCommission(uint256 weiAmount) public view returns (uint256) {\r\n        return weiAmount.mul(platformCommissionRate).div(10000);\r\n    }\r\n\r\n    /**\r\n     * @dev Default: 30%\r\n     * @param newUserCommissionRate ex: 0.01% = 1, 1% = 100, 100% = 10000\r\n     */\r\n    function setUserCommissionRate(uint256 newUserCommissionRate) public onlyOwner {\r\n        userCommissionRate = newUserCommissionRate;\r\n    }\r\n\r\n    /**\r\n     * @param weiAmount value\r\n     * @return uint256 calculated commission\r\n     */\r\n    function calculateUserCommission(uint256 weiAmount) public view returns (uint256) {\r\n        return weiAmount.mul(userCommissionRate).div(10000);\r\n    }\r\n\r\n    /**\r\n     * @dev New marketplace user registration\r\n     * @param userAddress wallet\r\n     */\r\n    function registerUser(address userAddress) public onlyOwner {\r\n        // Check for duplicate user\r\n        require(!users[userAddress].exists);\r\n        \r\n        // Add user to mapping\r\n        users[userAddress] = User(true, false, new address[](0));\r\n        emit UserRegistered(userAddress);\r\n    }\r\n\r\n    /**\r\n     * @param userAddress wallet\r\n     * @return bool\r\n     */\r\n    function isUserBlocked(address userAddress) public view returns (bool) {\r\n        // Check user existance\r\n        require(users[userAddress].exists);\r\n        return users[userAddress].blocked;\r\n    }\r\n\r\n    /**\r\n     * @param contractAddress product contract\r\n     * @return bool\r\n     */\r\n    function isUserBlockedByContract(address contractAddress) public view returns (bool) {\r\n        // Check contract existance\r\n        require(productContracts[contractAddress].exists);\r\n        return users[productContracts[contractAddress].user].blocked;\r\n    }\r\n\r\n    /**\r\n     * @param userAddress wallet\r\n     */\r\n    function blockUser(address userAddress) public onlyOwner {\r\n        // Check user existance\r\n        require(users[userAddress].exists);\r\n        users[userAddress].blocked = true;\r\n        emit UserBlocked(userAddress);\r\n    }\r\n\r\n    /**\r\n     * @param userAddress wallet\r\n     */\r\n    function unblockUser(address userAddress) public onlyOwner {\r\n        // Check user existance\r\n        require(users[userAddress].exists);\r\n        users[userAddress].blocked = false;\r\n        emit UserUnblocked(userAddress);\r\n    }\r\n\r\n    /**\r\n     * @return array of all user contracts\r\n     */\r\n    function getUserProductContracts(address userAddress) public view onlyOwner returns (address[]) {\r\n        // Check user existance\r\n        require(users[userAddress].exists);\r\n        return users[userAddress].productContracts;\r\n    }\r\n\r\n    /**\r\n     * @dev Register contract to user\r\n     * @param userAddress wallet\r\n     * @param contractAddress that belons to user\r\n     */\r\n    function registerProductContract(address userAddress, address contractAddress) public onlyOwner {\r\n        // Check user existance, caller should create user first\r\n        require(users[userAddress].exists);\r\n\r\n        // Check for duplicate contract\r\n        require(!productContracts[contractAddress].exists);\r\n\r\n        // Add contract to user\r\n        users[userAddress].productContracts.push(contractAddress);\r\n\r\n        // Add contract to mapping\r\n        productContracts[contractAddress] = ProductContract(true, userAddress);\r\n        emit ProductContractRegistered(userAddress, contractAddress);\r\n    }\r\n\r\n    /**\r\n     * @return user wallet\r\n     */\r\n    function getProductContractUser(address contractAddress) public view onlyOwner returns (address) {\r\n        // Check contract existance\r\n        require(productContracts[contractAddress].exists);\r\n        return productContracts[contractAddress].user;\r\n    }\r\n\r\n    /**\r\n     * @dev Commission paid by user clients on incoming transactions\r\n     */\r\n    function payPlatformIncomingTransactionCommission(address clientAddress) public payable {\r\n        // Check contract existance\r\n        require(productContracts[msg.sender].exists);\r\n        emit PlatformIncomingTransactionCommission(msg.sender, msg.value, clientAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Commission paid by user clients on outgoing transactions\r\n     */\r\n    function payPlatformOutgoingTransactionCommission() public payable {\r\n        // Check contract existance\r\n        require(productContracts[msg.sender].exists);\r\n        emit PlatformOutgoingTransactionCommission(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Commission paid by users (users contract) on incoming transactions\r\n     */\r\n    function payUserIncomingTransactionCommission(address clientAddress) public payable {\r\n        // Check contract existance\r\n        require(productContracts[msg.sender].exists);\r\n        emit UserIncomingTransactionCommission(msg.sender, msg.value, clientAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Commission paid by users (users contract) on outgoing transactions\r\n     */\r\n    function payUserOutgoingTransactionCommission() public payable {\r\n        // Check contract existance\r\n        require(productContracts[msg.sender].exists);\r\n        emit UserOutgoingTransactionCommission(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Send ether to cashout wallet\r\n     */\r\n    function transferEth(uint256 amount) public onlyOwner {\r\n        require(address(this).balance >= amount);\r\n        cashout.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the current balance to the cash out wallet and terminates the contract\r\n     */\r\n    function destroy() public onlyOwner {\r\n        selfdestruct(cashout);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"payPlatformIncomingTransactionCommission\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPlatformCommissionRate\",\"type\":\"uint256\"}],\"name\":\"setPlatformCommissionRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserProductContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformCommissionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"unblockUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"blockUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"calculateUserCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"productContracts\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"user\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isUserBlockedByContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payPlatformOutgoingTransactionCommission\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"payUserIncomingTransactionCommission\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashout\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payUserOutgoingTransactionCommission\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"blocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"calculatePlatformCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isUserBlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userCommissionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"registerProductContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getProductContractUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUserCommissionRate\",\"type\":\"uint256\"}],\"name\":\"setUserCommissionRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"UserBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"UserUnblocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ProductContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"PlatformIncomingTransactionCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlatformOutgoingTransactionCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"UserIncomingTransactionCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserOutgoingTransactionCommission\",\"type\":\"event\"}]","ContractName":"Marketplace","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cdc61ace1a05d97747126bab84bf16001f6d9b86bc0f1720e63c394f763f8b1b"}]}