{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n\r\n    Lambo Lotto Win | Dapps game for real crypto human\r\n    site: https://llotto.win/\r\n    telegram: https://t.me/Lambollotto/\r\n    discord: https://discord.gg/VWV5jeW/\r\n    \r\n    Rules of the game:\r\n    - Jackpot from 0.1 Ether;    \r\n    - Jackpot is currently 1.5% of the turnover for the jackpot period;    \r\n    - 2.5% of the bet goes to the next jackpot;   \r\n    - jackpot win number 888 (may vary during games);      \r\n    - in case of a jackpot from 0 to 15, the player wins a small jackpot which is equal to 0.5 of the turnover during the jackpot period;\r\n    - when the jackpot is between 500 and 515, the player wins the small jackpot which is equal to 0.3 of the turnover during the jackpot period;\r\n    - the minimum win is 15% of the bet amount, the maximum win is 150% (may be changed by the administration during the game but does not affect the existing bets);\r\n    - administration commission of 2.5% + 2.5% for the development and maintenance of the project;\r\n    - the administration also reserves the right to dispose of the entire bank including jackpots in the event of termination of interest in the game from the users ( \r\nwhat happened in Las Vegas stays in Las Vegas:) );\r\n    - there is an opportunity to add marketing wallets if you are interested in advertising our project;\r\n\r\n*/\r\n\r\ncontract lambolotto {\r\n    \r\n    using SafeMath\r\n    for uint;\r\n\r\n    modifier onlyAdministrator(){    \r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyActive(){    \r\n        require(boolContractActive);\r\n        _;\r\n    }\r\n    \r\n\tmodifier onlyHumans() { \r\n\t    require (msg.sender == tx.origin, \"only approved contracts allowed\"); \r\n\t    _; \r\n\t  }     \r\n\r\n    constructor () public {\r\n    \r\n        administrators[msg.sender] = true;          \r\n    }\r\n    \r\n    uint templeContractPercent = 0;\r\n    \r\n    address private adminGet;\r\n\taddress private promoGet;\r\n    \r\n    uint public forAdminGift = 25;\r\n    \r\n    uint public jackPot_percent_now = 15;\r\n    uint public jackPot_percent_next = 25;\r\n    \r\n    uint public jackPotWin = 888;\r\n    uint public jackPotWinMinAmount = 0.1 ether;\r\n    uint public maxBetsVolume = 10 ether;\r\n    \r\n    uint public jackPot_little_first = 5;\r\n    uint public jackPot_little_first_min = 0;    \r\n    uint public jackPot_little_first_max = 15;\r\n    \r\n    uint public jackPot_little_second = 3;\r\n    uint public jackPot_little_second_min = 500;    \r\n    uint public jackPot_little_second_max = 515;\r\n    \r\n    uint public addPercent = 15;\r\n    \r\n    uint public rand_pmin = 0;\r\n    uint public rand_pmax = 1350; \r\n    \r\n    uint public rand_jmin = 0;\r\n    uint public rand_jmax = 1000;\r\n\r\n    uint public currentReceiverIndex;\r\n    uint public totalInvested;\r\n\r\n    uint public betsNum;\r\n    uint public jackPot_now;\r\n    uint public jackPot_next;\r\n    uint public jackPot_lf;\r\n    uint public jackPot_ls;    \r\n    \r\n    uint public jackPotNum = 0;\r\n    uint public jackPotLFNum = 0;\r\n    uint public jackPotLSNum = 0;\r\n    \r\n    struct Deposit {\r\n    \r\n        address depositor;\r\n        uint deposit;\r\n        uint winAmount;\r\n        uint depositJackPotValue;\r\n        uint payout;\r\n    }\r\n    \r\n    Deposit[] public queue;\r\n    \r\n    uint nonce;\r\n    \r\n    bool public boolContractActive = true;    \r\n    mapping(address => bool) public administrators;   \r\n    \r\n    address mkt = 0x0;\r\n    uint mktRate = 0;\r\n\r\n    event bets(\r\n        address indexed customerAddress,\r\n        uint timestamp,\r\n        uint amount,\r\n        uint winAmount,\r\n        uint jackPotValue,\r\n        uint payout\r\n    );\r\n\r\n    event jackPot(\r\n        uint indexed numIndex,\r\n        address customerAddress,\r\n        uint timestamp,\r\n        uint jackAmount\r\n    );\r\n\r\n    event jackPotLittleFirst(\r\n        uint indexed numIndex,\r\n        address customerAddress,\r\n        uint timestamp,\r\n        uint jackAmount\r\n    );\r\n\r\n    event jackPotLitteleSecond(\r\n        uint indexed numIndex,\r\n        address customerAddress,\r\n        uint timestamp,\r\n        uint jackAmount\r\n    );\r\n    \r\n    function ()\r\n        onlyActive()\r\n        onlyHumans()\r\n        public payable{\r\n\r\n        if(msg.value > 0){\r\n        \r\n            require(gasleft() >= 250000); \r\n            require(msg.value >= 0.001 ether && msg.value <= maxBetsVolume);\r\n            \r\n            uint winningNumber = rand(rand_pmin, rand_pmax);\r\n\r\n            totalInvested += msg.value;\r\n            jackPot_now += msg.value.mul(jackPot_percent_now).div(1000);\r\n            jackPot_next += msg.value.mul(jackPot_percent_next).div(1000);\r\n            \r\n            jackPot_lf += msg.value.mul(jackPot_little_first).div(1000);\r\n            jackPot_ls += msg.value.mul(jackPot_little_second).div(1000);\r\n            \r\n            betsNum++;\r\n            \r\n            uint depositJPV = 0;\r\n            \r\n            if( msg.value >= jackPotWinMinAmount)\r\n            {                \r\n                depositJPV = rand(rand_jmin, rand_jmax);\r\n            \r\n                if (depositJPV == jackPotWin){     \r\n\r\n                        msg.sender.transfer(jackPot_now);                        \r\n                        jackPotNum++;\r\n                        \r\n                        emit jackPot(jackPotNum,  msg.sender, now, jackPot_now );\r\n\r\n                        jackPot_now = jackPot_next;  \r\n                        jackPot_next = 0;\r\n                }\r\n                \r\n                if ( depositJPV > jackPot_little_first_min && depositJPV <= jackPot_little_first_max){     \r\n\r\n                        msg.sender.transfer(jackPot_lf);   \r\n                        jackPotLFNum++;\r\n                                        \r\n                        emit jackPotLittleFirst(jackPotLFNum,  msg.sender, now, jackPot_lf );\r\n                        \r\n                        jackPot_lf = 0; \r\n                }\r\n                \r\n                if ( depositJPV >= jackPot_little_second_min && depositJPV <= jackPot_little_second_max){     \r\n\r\n                        msg.sender.transfer(jackPot_ls);                        \r\n                        jackPotLSNum++;                        \r\n                        emit jackPotLitteleSecond(jackPotLSNum,  msg.sender, now, jackPot_ls );\r\n                        \r\n                        jackPot_ls = 0;\r\n                }\r\n                \r\n                uint totalPayout = msg.value.mul(winningNumber.div(10).add(addPercent)).div(100);\r\n                            \r\n                emit bets(msg.sender, now, msg.value, winningNumber, depositJPV, totalPayout);\r\n                \r\n            }\r\n            \r\n            queue.push( Deposit(msg.sender, msg.value, winningNumber, depositJPV, 0) );\r\n            \r\n            uint adminGetValue = msg.value.mul(forAdminGift).div(1000); \r\n            adminGet.transfer(adminGetValue);\r\n            \r\n\t\t\tuint promoGetValue = msg.value.mul(forAdminGift).div(1000);\r\n            promoGet.transfer(promoGetValue);\r\n            \r\n            if (mkt != 0x0 && mktRate != 0){\r\n                \r\n                uint mktGetValue = msg.value.mul(mktRate).div(1000);\r\n                mkt.transfer(mktGetValue);                \r\n            }\r\n            \r\n            pay();\r\n        }\r\n    }\r\n\r\n    function pay() internal {\r\n\r\n        uint money = address(this).balance.sub(jackPot_now.add(jackPot_next).add(jackPot_lf).add(jackPot_ls));\r\n        \r\n        for (uint i = 0; i < queue.length; i++){   \r\n        \r\n            uint idx = currentReceiverIndex.add(i); \r\n                \r\n                if(idx <= queue.length.sub(1)){\r\n                \r\n                    Deposit storage dep = queue[idx]; \r\n                    uint totalPayout = dep.deposit.mul(dep.winAmount.div(10).add(addPercent)).div(100);\r\n\r\n                    if(totalPayout > dep.payout) { uint leftPayout = totalPayout.sub(dep.payout); }\r\n\r\n                    if(money >= leftPayout){ \r\n                    \r\n                        if (leftPayout > 0){                        \r\n                            dep.depositor.transfer(leftPayout); \r\n                            dep.payout += leftPayout;                                                   \r\n                            money -= leftPayout; \r\n                        }\r\n\r\n                    }else{\r\n                        dep.depositor.transfer(money); \r\n                        dep.payout += money;   \r\n                        break; \r\n                    }\r\n\r\n                    if(gasleft() <= 55000){ break; }   \r\n                    \r\n                }else{ break; }                \r\n        }\r\n        currentReceiverIndex += i; \r\n    }\r\n    \r\n    function rand(uint minValue, uint maxValue) internal returns (uint){\r\n    \r\n        nonce++;        \r\n        uint nonce_ = block.difficulty.div(block.number).mul(now).mod(nonce);        \r\n        uint mixUint = SafeMath.sub(SafeMath.mod(uint(keccak256(abi.encodePacked(nonce_))), SafeMath.add(minValue,maxValue)), minValue);\r\n        nonce += mixUint; \r\n        return mixUint;        \r\n    }\r\n \r\n    function donate()\r\n        public payable{        \r\n    } \r\n\r\n    function setJackPotNowValue()\r\n        onlyAdministrator()\r\n        public payable{\r\n      \r\n        require(msg.value > jackPot_now);      \r\n        jackPot_now = msg.value;     \r\n    } \r\n    \r\n    function setJackPotNextValue()\r\n        onlyAdministrator()\r\n        public payable{\r\n      \r\n        require(msg.value > jackPot_next);      \r\n        jackPot_next = msg.value;     \r\n    } \r\n    \r\n    function setJackPotLFValue()\r\n        onlyAdministrator()\r\n        public payable{\r\n      \r\n        require(msg.value > jackPot_lf);      \r\n        jackPot_lf = msg.value;     \r\n    }  \r\n    \r\n    function setJackPotLSValue()\r\n        onlyAdministrator()\r\n        public payable{\r\n      \r\n        require(msg.value > jackPot_ls);      \r\n        jackPot_ls =  msg.value;     \r\n    }     \r\n\r\n    function setjackPotLillteF(uint _newJPLF)\r\n        onlyAdministrator()\r\n        public{\r\n      \r\n        jackPot_little_first = _newJPLF;     \r\n    }       \r\n    \r\n    function setjackPotLillteS(uint _newJPLS)\r\n        onlyAdministrator()\r\n        public{\r\n      \r\n        jackPot_little_second =  _newJPLS;     \r\n    }    \r\n    \r\n    function setMarket(address _newMkt)\r\n        onlyAdministrator()\r\n        public{\r\n      \r\n        mkt =  _newMkt;     \r\n    }\r\n    \r\n    function setMarketingRates(uint _newMktRate)\r\n        onlyAdministrator()\r\n        public{\r\n       \r\n        mktRate =  _newMktRate;\r\n    }  \r\n\r\n    function setAdminGet(address _newAdminGet)\r\n        onlyAdministrator()\r\n        public{\r\n      \r\n        adminGet =  _newAdminGet;     \r\n    }     \r\n    \r\n    function setPromoGet(address _newPromoGet)\r\n        onlyAdministrator()\r\n        public{\r\n      \r\n        promoGet =  _newPromoGet;     \r\n    }   \r\n\r\n    function setForAdminGift(uint _newAdminGift)\r\n        onlyAdministrator()\r\n        public{\r\n       \r\n        forAdminGift =  _newAdminGift;\r\n    }      \r\n    \r\n   function setJeckPotPercentNow(uint _newJeckPotPercentNow)\r\n        onlyAdministrator()\r\n        public{\r\n       \r\n        jackPot_percent_now =  _newJeckPotPercentNow;\r\n    }  \r\n \r\n   function setJeckPotPercentNext(uint _newJeckPotPercentNext)\r\n        onlyAdministrator()\r\n        public{\r\n       \r\n        jackPot_percent_next =  _newJeckPotPercentNext;\r\n    }   \r\n \r\n   function setJeckPotWin(uint _newJeckPotWin)\r\n        onlyAdministrator()\r\n        public{\r\n       \r\n        jackPotWin =  _newJeckPotWin;\r\n    } \r\n    \r\n   function setAddPercent(uint _newAddPercent)\r\n        onlyAdministrator()\r\n        public{\r\n       \r\n        addPercent =  _newAddPercent;\r\n    } \r\n\r\n   function setRandPMax(uint _newRandPMax)\r\n        onlyAdministrator()\r\n        public{\r\n       \r\n        rand_pmax =  _newRandPMax;\r\n    }\r\n\r\n   function setRandJMax(uint _newRandJMax)\r\n        onlyAdministrator()\r\n        public{\r\n       \r\n        rand_jmax =  _newRandJMax;\r\n    }\r\n    \r\n   function setNonce(uint _newNonce)\r\n        onlyAdministrator()\r\n        public{\r\n       \r\n        nonce =  _newNonce;\r\n    }    \r\n \r\n   function setNewMaxVolume(uint _newMaxVol)\r\n        onlyAdministrator()\r\n        public{\r\n       \r\n        maxBetsVolume =  _newMaxVol;\r\n    }    \r\n    \r\n    function setContractActive(bool _status)\r\n        onlyAdministrator()\r\n        public{\r\n        \r\n        boolContractActive = _status;\r\n        \r\n    } \r\n    \r\n    function setAdministrator(address _identifier, bool _status)\r\n        onlyAdministrator()\r\n        public{\r\n        \r\n        administrators[_identifier] = _status;\r\n    } \r\n    \r\n    function getAllDepoIfGameStop() \r\n        onlyAdministrator()\r\n        public{        \r\n        \r\n        jackPot_now = 0;\r\n        jackPot_next = 0;\r\n        jackPot_lf = 0;\r\n        jackPot_ls = 0;\r\n        \r\n        uint money = address(this).balance;\r\n        adminGet.transfer(money);\r\n    }\r\n\r\n\r\n}    \r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newJPLS\",\"type\":\"uint256\"}],\"name\":\"setjackPotLillteS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setJackPotLFValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newJeckPotPercentNext\",\"type\":\"uint256\"}],\"name\":\"setJeckPotPercentNext\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rand_jmin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAllDepoIfGameStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMktRate\",\"type\":\"uint256\"}],\"name\":\"setMarketingRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setJackPotNextValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxVol\",\"type\":\"uint256\"}],\"name\":\"setNewMaxVolume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPotWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReceiverIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newJeckPotWin\",\"type\":\"uint256\"}],\"name\":\"setJeckPotWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdminGift\",\"type\":\"uint256\"}],\"name\":\"setForAdminGift\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_little_second_max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rand_pmin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forAdminGift\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddPercent\",\"type\":\"uint256\"}],\"name\":\"setAddPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_little_first_min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rand_jmax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newJPLF\",\"type\":\"uint256\"}],\"name\":\"setjackPotLillteF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_next\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMkt\",\"type\":\"address\"}],\"name\":\"setMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_little_second\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setJackPotLSValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_little_first\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_lf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdminGet\",\"type\":\"address\"}],\"name\":\"setAdminGet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_now\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPotLSNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_percent_now\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_percent_next\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setJackPotNowValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boolContractActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_little_first_max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRandJMax\",\"type\":\"uint256\"}],\"name\":\"setRandJMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rand_pmax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBetsVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPotWinMinAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"winAmount\",\"type\":\"uint256\"},{\"name\":\"depositJackPotValue\",\"type\":\"uint256\"},{\"name\":\"payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_little_second_min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPotLFNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_ls\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPromoGet\",\"type\":\"address\"}],\"name\":\"setPromoGet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRandPMax\",\"type\":\"uint256\"}],\"name\":\"setRandPMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newNonce\",\"type\":\"uint256\"}],\"name\":\"setNonce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newJeckPotPercentNow\",\"type\":\"uint256\"}],\"name\":\"setJeckPotPercentNow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betsNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPotNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackPotValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"bets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"numIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackAmount\",\"type\":\"uint256\"}],\"name\":\"jackPot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"numIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackAmount\",\"type\":\"uint256\"}],\"name\":\"jackPotLittleFirst\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"numIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackAmount\",\"type\":\"uint256\"}],\"name\":\"jackPotLitteleSecond\",\"type\":\"event\"}]","ContractName":"lambolotto","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2354725a005e6824234126bc71f12c7db9c1cfcab994dd3c192199d0fa0f8edb"}]}