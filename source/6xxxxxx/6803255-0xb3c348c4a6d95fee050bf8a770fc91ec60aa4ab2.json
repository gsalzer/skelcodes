{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\ncontract Arbitration {\r\n    function requestArbitration(\r\n        bytes32 id,\r\n        uint256 tokens,\r\n        address supplier,\r\n        address purchaser\r\n    )\r\n        external;\r\n}\r\n\r\ncontract TestArbitration is Arbitration, Ownable {\r\n    event Arbitrate(\r\n        bytes32 id,\r\n        uint256 tokens,\r\n        address supplier,\r\n        address purchaser\r\n    );\r\n\r\n    function requestArbitration(\r\n        bytes32 id,\r\n        uint256 tokens,\r\n        address supplier,\r\n        address purchaser\r\n    )\r\n        external\r\n    {\r\n        emit Arbitrate(id, tokens, supplier, purchaser);\r\n    }\r\n}\r\n\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) public whitelisted;\r\n\r\n    function whitelist(address caller) public onlyOwner {\r\n        whitelisted[caller] = true;\r\n    }\r\n\r\n    function blacklist(address caller) public onlyOwner {\r\n        whitelisted[caller] = false;\r\n    }\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(whitelisted[msg.sender], \"Approved callers only.\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Payments is Ownable {\r\n    struct Details {\r\n        bool active;\r\n        address supplier;\r\n        uint64 cancelDeadline;\r\n        address purchaser;\r\n        uint64 disputeDeadline;\r\n        uint256 price;\r\n        uint256 deposit;\r\n        uint256 cancellationFee;\r\n    }\r\n\r\n    event Invoice (\r\n        bytes32 id,\r\n        address supplier,\r\n        address purchaser,\r\n        uint256 price,\r\n        uint256 deposit,\r\n        uint256 cancellationFee,\r\n        uint64 cancelDeadline,\r\n        uint64 disputeDeadline\r\n    );\r\n    event Payout (\r\n        bytes32 id,\r\n        address supplier,\r\n        address purchaser,\r\n        uint256 price,\r\n        uint256 deposit\r\n    );\r\n    event Cancel (\r\n        bytes32 id,\r\n        address supplier,\r\n        address purchaser,\r\n        uint256 price,\r\n        uint256 deposit,\r\n        uint256 cancellationFee\r\n    );\r\n    event Refund (\r\n        bytes32 id,\r\n        address supplier,\r\n        address purchaser,\r\n        uint256 price,\r\n        uint256 deposit\r\n    );\r\n    event Dispute (\r\n        bytes32 id,\r\n        address arbitration,\r\n        address disputant,\r\n        address supplier,\r\n        address purchaser,\r\n        uint256 price,\r\n        uint256 deposit\r\n    );\r\n\r\n    modifier onlyPurchaser(bytes32 id) {\r\n        require(msg.sender == details[id].purchaser, \"Purchaser only.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySupplier(bytes32 id) {\r\n        require(msg.sender == details[id].supplier, \"Supplier only.\");\r\n        _;        \r\n    }\r\n\r\n    modifier onlyOwnerOrSupplier(bytes32 id) {\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == details[id].supplier,\r\n            \"Owner or supplier only.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyParticipant(bytes32 id) {\r\n        require(\r\n            msg.sender == details[id].supplier ||\r\n            msg.sender == details[id].purchaser,\r\n            \"Participant only.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier deactivates(bytes32 id) {\r\n        require(details[id].active, \"Unknown id.\");\r\n        details[id].active = false;\r\n        _;\r\n    }\r\n\r\n    modifier invoices(bytes32 id) {\r\n        require(details[id].supplier == 0x0, \"Given id already exists.\");\r\n        _;\r\n        emit Invoice(\r\n            id,\r\n            details[id].supplier,\r\n            details[id].purchaser,\r\n            details[id].price,\r\n            details[id].deposit,\r\n            details[id].cancellationFee,\r\n            details[id].cancelDeadline,\r\n            details[id].disputeDeadline\r\n        );\r\n    }\r\n\r\n    modifier pays(bytes32 id) {\r\n        /* solium-disable-next-line security/no-block-members */\r\n        require(now > details[id].disputeDeadline, \"Dispute deadline not met.\");\r\n        _;\r\n        emit Payout(\r\n            id,\r\n            details[id].supplier,\r\n            details[id].purchaser,\r\n            details[id].price,\r\n            details[id].deposit\r\n        );\r\n    }\r\n\r\n    modifier cancels(bytes32 id) {\r\n        /* solium-disable-next-line security/no-block-members */\r\n        require(now < details[id].cancelDeadline, \"Cancel deadline passed.\");\r\n        _;\r\n        emit Cancel(\r\n            id,\r\n            details[id].supplier,\r\n            details[id].purchaser,\r\n            details[id].price,\r\n            details[id].deposit,\r\n            details[id].cancellationFee\r\n        );\r\n    }\r\n\r\n    modifier refunds(bytes32 id) {\r\n        _;\r\n        emit Refund(\r\n            id,\r\n            details[id].supplier,\r\n            details[id].purchaser,\r\n            details[id].price,\r\n            details[id].deposit\r\n        );\r\n    }\r\n\r\n    modifier disputes(bytes32 id) {\r\n        /* solium-disable-next-line security/no-block-members */\r\n        require(now < details[id].disputeDeadline, \"Dispute deadline passed.\");\r\n        _;\r\n        emit Dispute(\r\n            id,\r\n            arbitration,\r\n            msg.sender,\r\n            details[id].supplier,\r\n            details[id].purchaser,\r\n            details[id].price,\r\n            details[id].deposit\r\n        );\r\n    }\r\n\r\n    mapping(bytes32 => Details) public details;\r\n    Arbitration public arbitration;\r\n}\r\n\r\ncontract TokenPayments is Whitelist, Payments {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 public token;\r\n    uint64 public cancelPeriod;\r\n    uint64 public disputePeriod;\r\n\r\n    constructor(\r\n        address _token,\r\n        address _arbitration,\r\n        uint64 _cancelPeriod,\r\n        uint64 _disputePeriod\r\n    )\r\n        public\r\n    {\r\n        token = ERC20(_token);\r\n        arbitration = Arbitration(_arbitration);\r\n        cancelPeriod = _cancelPeriod;\r\n        disputePeriod = _disputePeriod;\r\n    }\r\n\r\n    function invoice(\r\n        bytes32 id,\r\n        address supplier,\r\n        address purchaser,\r\n        uint256 price,\r\n        uint256 deposit,\r\n        uint256 cancellationFee,\r\n        uint64 cancelDeadline,\r\n        uint64 disputeDeadline\r\n    )\r\n        external\r\n        onlyWhitelisted\r\n        invoices(id)\r\n    {\r\n        require(\r\n            supplier != address(0x0),\r\n            \"Must provide a valid supplier address.\"\r\n        );\r\n        require(\r\n            purchaser != address(0x0),\r\n            \"Must provide a valid purchaser address.\"\r\n        );\r\n        require(\r\n            /* solium-disable-next-line security/no-block-members */\r\n            cancelDeadline > now.add(cancelPeriod),\r\n            \"Cancel deadline too soon.\"\r\n        );\r\n        require(\r\n            disputeDeadline > uint256(cancelDeadline).add(disputePeriod),\r\n            \"Dispute deadline too soon.\"\r\n        );\r\n        require(\r\n            price.add(deposit) >= cancellationFee,\r\n            \"Cancellation fee exceeds total.\"\r\n        );\r\n        details[id] = Details({\r\n            active: true,\r\n            supplier: supplier,\r\n            cancelDeadline: cancelDeadline,\r\n            purchaser: purchaser,\r\n            disputeDeadline: disputeDeadline,\r\n            price: price,\r\n            deposit: deposit,\r\n            cancellationFee: cancellationFee\r\n        });\r\n        uint256 expectedBalance = getTotal(id)\r\n            .add(token.balanceOf(address(this)));\r\n        require(\r\n            token.transferFrom(purchaser, address(this), getTotal(id)),\r\n            \"Transfer failed during invoice.\"\r\n        );\r\n        require(\r\n            token.balanceOf(address(this)) == expectedBalance,\r\n            \"Transfer appears incomplete during invoice.\"\r\n        );\r\n    }\r\n\r\n    function cancel(bytes32 id) \r\n        external\r\n        onlyPurchaser(id)\r\n        deactivates(id)\r\n        cancels(id)\r\n    {\r\n        uint256 fee = details[id].cancellationFee;\r\n        uint256 refund = getTotal(id).sub(fee);\r\n        transfer(details[id].purchaser, refund);\r\n        transfer(details[id].supplier, fee);\r\n    }\r\n\r\n    function payout(bytes32 id)\r\n        external\r\n        onlySupplier(id)\r\n        deactivates(id)\r\n        pays(id)\r\n    {\r\n        transfer(details[id].supplier, details[id].price);\r\n        transfer(details[id].purchaser, details[id].deposit);\r\n    }\r\n\r\n    function refund(bytes32 id)\r\n        external\r\n        onlyOwnerOrSupplier(id)\r\n        deactivates(id)\r\n        refunds(id)\r\n    {\r\n        transfer(details[id].purchaser, getTotal(id));\r\n    }\r\n\r\n    function dispute(bytes32 id)\r\n        external\r\n        onlyParticipant(id)\r\n        deactivates(id)\r\n        disputes(id)\r\n    {\r\n        require(\r\n            token.approve(arbitration, getTotal(id)),\r\n            \"Approval for transfer failed during dispute.\"\r\n        );\r\n        arbitration.requestArbitration(\r\n            id,\r\n            getTotal(id),\r\n            details[id].supplier,\r\n            details[id].purchaser\r\n        );\r\n    }\r\n\r\n    function getTotal(bytes32 id) private view returns (uint256) {\r\n        return details[id].price.add(details[id].deposit);\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) internal {\r\n        uint256 expectedBalance = token.balanceOf(address(this)).sub(amount);\r\n        uint256 expectedRecipientBalance = token.balanceOf(to).add(amount);\r\n        require(token.transfer(to, amount), \"Transfer failed.\");\r\n        require(\r\n            token.balanceOf(address(this)) == expectedBalance,\r\n            \"Post-transfer validation of contract funds failed.\"\r\n        );\r\n        require(\r\n            token.balanceOf(to) == expectedRecipientBalance,\r\n            \"Post-transfer validation of recipient funds failed.\"\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"disputePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cancelPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"details\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"supplier\",\"type\":\"address\"},{\"name\":\"cancelDeadline\",\"type\":\"uint64\"},{\"name\":\"purchaser\",\"type\":\"address\"},{\"name\":\"disputeDeadline\",\"type\":\"uint64\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"cancellationFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitration\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"dispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"supplier\",\"type\":\"address\"},{\"name\":\"purchaser\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"cancellationFee\",\"type\":\"uint256\"},{\"name\":\"cancelDeadline\",\"type\":\"uint64\"},{\"name\":\"disputeDeadline\",\"type\":\"uint64\"}],\"name\":\"invoice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_arbitration\",\"type\":\"address\"},{\"name\":\"_cancelPeriod\",\"type\":\"uint64\"},{\"name\":\"_disputePeriod\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cancellationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cancelDeadline\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"disputeDeadline\",\"type\":\"uint64\"}],\"name\":\"Invoice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cancellationFee\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"arbitration\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"disputant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"Dispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenPayments","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004d8fc1453a0f359e99c9675954e656d80d996fbf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000015180","Library":"","SwarmSource":"bzzr://5e52ef3106a42f159aed1b00567605092f1a45ab991b4a464691fb9b80af56a7"}]}