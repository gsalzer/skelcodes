{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Controlled {\r\n    address public controller;\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n    // @notice Constructor\r\n    constructor() public { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) public onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\n// ERC Token Standard #20 Interface\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract SofiaToken is ERC20Interface,Controlled {\r\n\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    /*\r\n     * @notice 'constructor()' initiates the Token by setting its funding\r\n       parameters\r\n     * @param _totalSupply Total supply of tokens\r\n     */\r\n    constructor(uint _totalSupply) public {\r\n      symbol = \"SFX\";\r\n      name = \"Sofia Token\";\r\n      decimals = 18;\r\n      totalSupply = _totalSupply.mul(1 ether);\r\n      balances[msg.sender] = totalSupply; //transfer all Tokens to contract creator\r\n      emit Transfer(address(0),controller,totalSupply);\r\n    }\r\n\r\n    /*\r\n     * @notice ERC20 Standard method to return total number of tokens\r\n     */\r\n    function totalSupply() public view returns (uint){\r\n      return totalSupply;\r\n    }\r\n\r\n    /*\r\n     * @notice ERC20 Standard method to return the token balance of an address\r\n     * @param tokenOwner Address to query\r\n     */\r\n    function balanceOf(address tokenOwner) public view returns (uint balance){\r\n       return balances[tokenOwner];\r\n    }\r\n\r\n    /*\r\n     * @notice ERC20 Standard method to return spending allowance\r\n     * @param tokenOwner Owner of the tokens, who allows\r\n     * @param spender Token spender\r\n     */\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining){\r\n      if (allowed[tokenOwner][spender] < balances[tokenOwner]) {\r\n        return allowed[tokenOwner][spender];\r\n      }\r\n      return balances[tokenOwner];\r\n    }\r\n\r\n    /*\r\n     * @notice ERC20 Standard method to tranfer tokens\r\n     * @param to Address where the tokens will be transfered to\r\n     * @param tokens Number of tokens to be transfered\r\n     */\r\n    function transfer(address to, uint tokens) public  returns (bool success){\r\n      return doTransfer(msg.sender,to,tokens);\r\n    }\r\n\r\n    /*\r\n     * @notice ERC20 Standard method to transfer tokens on someone elses behalf\r\n     * @param from Address where the tokens are held\r\n     * @param to Address where the tokens will be transfered to\r\n     * @param tokens Number of tokens to be transfered\r\n     */\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success){\r\n      if(allowed[from][msg.sender] > 0 && allowed[from][msg.sender] >= tokens)\r\n      {\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        return doTransfer(from,to,tokens);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /*\r\n     * @notice method that does the actual transfer of the tokens, to be used by both transfer and transferFrom methods\r\n     * @param from Address where the tokens are held\r\n     * @param to Address where the tokens will be transfered to\r\n     * @param tokens Number of tokens to be transfered\r\n     */\r\n    function doTransfer(address from,address to, uint tokens) internal returns (bool success){\r\n        if( tokens > 0 && balances[from] >= tokens){\r\n            balances[from] = balances[from].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(from,to,tokens);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * @notice ERC20 Standard method to give a spender an allowance\r\n     * @param spender Address that wil receive the allowance\r\n     * @param tokens Number of tokens in the allowance\r\n     */\r\n    function approve(address spender, uint tokens) public returns (bool success){\r\n      if(balances[msg.sender] >= tokens){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /*\r\n     * @notice revert any incoming ether\r\n     */\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n  /*\r\n   * @notice a specific amount of tokens. Only controller can burn tokens\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint _value) public onlyController{\r\n    require(_value <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    emit Burn(msg.sender, _value);\r\n    emit Transfer(msg.sender, address(0), _value);\r\n  }\r\n\r\n  /*\r\n   * Events\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n  event Burn(address indexed burner, uint value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"SofiaToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000003b9aca00","Library":"","SwarmSource":"bzzr://ef5a663d31cc3b0fb69f8891aba87cc3f4ba3096b9c95cd021815bdd6766f70b"}]}