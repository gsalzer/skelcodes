{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address _who) public view returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract Rays is ERC20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) internal balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private allowed;\r\n\r\n  uint256 internal totalSupply_;\r\n  \r\n  \r\n  event Burn(address indexed burner, uint256 value);\r\n  \r\n  string public name = \"Rays Network\";\r\n  string public symbol = \"RAYS\";\r\n  uint8 public decimals = 18;\r\n  uint256 public constant INITIAL_SUPPLY = 500000000 * 10**18;\r\n\r\n  constructor() public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n  }\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  \r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param _account The account that will receive the created tokens.\r\n   * @param _amount The amount that will be created.\r\n   */\r\n  function _mint(address _account, uint256 _amount) public onlyOwner {\r\n    require(_account != 0);\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_account] = balances[_account].add(_amount);\r\n    emit Transfer(address(0), _account, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param _account The account whose tokens will be burnt.\r\n   * @param _amount The amount that will be burnt.\r\n   */\r\n  function _burn(address _account, uint256 _amount) public onlyOwner {\r\n    require(_account != 0);\r\n    require(_amount <= balances[_account]);\r\n\r\n    totalSupply_ = totalSupply_.sub(_amount);\r\n    balances[_account] = balances[_account].sub(_amount);\r\n    emit Transfer(_account, address(0), _amount);\r\n  }\r\n  \r\n}\r\n\r\ncontract Crowdsale is Rays {\r\n    // ICO rounds\r\n    enum IcoStages {preSale, preIco, ico} \r\n    IcoStages Stage;\r\n    bool private crowdsaleFinished;\r\n    \r\n    uint private startPreSaleDate;\r\n    uint private endPreSaleDate;\r\n    uint public preSaleGoal;\r\n    uint private preSaleRaised;\r\n    \r\n    uint private startPreIcoDate;\r\n    uint private endPreIcoDate;\r\n    uint public preIcoGoal;\r\n    uint private preIcoRaised;\r\n    \r\n    uint private startIcoDate;\r\n    uint private endIcoDate;\r\n    uint public icoGoal;\r\n    uint private icoRaised;\r\n    \r\n    uint private softCup; // 2 000 000 $ (300$ = 1 ether)\r\n    uint private totalCup;\r\n    uint private price;\r\n    uint private total;\r\n    uint private reserved;\r\n    uint private hardCup;// 20 000 000 $ (300$ = 1 ether)\r\n    \r\n    struct Benefeciary{ // collect all participants of ICO\r\n        address wallet;\r\n        uint amount;\r\n    }\r\n    Benefeciary[] private benefeciary;\r\n    uint private ethersRefund;\r\n    \r\n    constructor() public {\r\n        startPreSaleDate = 1534723200; // insert here your pre sale start date\r\n        endPreSaleDate = 1536969600; // insert here your pre sale end date\r\n        preSaleGoal = 60000000; // pre-sale goal \r\n        preSaleRaised = 0; // raised on pre-sale stage\r\n        startPreIcoDate = 1534723200; // insert here your pre ico start date\r\n        endPreIcoDate = 1538265600; // insert here your pre ico end date\r\n        preIcoGoal = 60000000; // pre ico goal \r\n        preIcoRaised = 0; // raised on pre ico\r\n        startIcoDate = 1534723200; // insert here your ico start date\r\n        endIcoDate = 1546214400; // insert here your ico end date\r\n        icoGoal = 80000000; // ico goal \r\n        icoRaised = 0; // raised on ico stage\r\n        softCup = 6670 * 10**18; \r\n        hardCup = 66670 * 10**18;\r\n        totalCup = 0;\r\n        price = 1160;\r\n        total = preSaleGoal + preIcoGoal + icoGoal;\r\n        reserved = (70000000 + 200000000 + 5000000 + 25000000) * 10**18;\r\n        crowdsaleFinished = false;\r\n    }\r\n  \r\n    function getCrowdsaleInfo() private returns(uint stage, \r\n                                               uint tokenAvailable, \r\n                                               uint bonus){\r\n        // Token calculating\r\n        if(now <= endPreSaleDate && preSaleRaised < preSaleGoal){\r\n            Stage = IcoStages.preSale;\r\n            tokenAvailable = preSaleGoal - preSaleRaised;\r\n            total -= preSaleRaised;\r\n            bonus = 0; // insert your bonus value on pre sale phase\r\n        } else if(startPreIcoDate <= now && now <= endPreIcoDate && preIcoRaised < preIcoGoal){\r\n            Stage = IcoStages.preIco;\r\n            tokenAvailable = preIcoGoal - preIcoRaised;\r\n            total -= preIcoRaised;\r\n            bonus = 50; // + 50% seems like bonus\r\n        } else if(startIcoDate <= now && now <= endIcoDate && icoRaised < total){\r\n            tokenAvailable = total - icoRaised;\r\n            Stage = IcoStages.ico;\r\n            bonus = 0;\r\n        } else {\r\n            // if ICO has not been started\r\n            revert();\r\n        }\r\n        return (uint(Stage), tokenAvailable, bonus);\r\n    }\r\n    //per 0.1 ether will recieved 116 tokens\r\n    function evaluateTokens(uint _value, address _sender) private returns(uint tokens){\r\n        ethersRefund = 0;\r\n        uint bonus;\r\n        uint tokenAvailable;\r\n        uint stage;\r\n        (stage,tokenAvailable,bonus) = getCrowdsaleInfo();\r\n        tokens = _value * price / 10**18; \r\n        if(bonus != 0){\r\n            tokens = tokens + (tokens * bonus / 100); // calculate bonus tokens\r\n        } \r\n        if(tokenAvailable < tokens){ // if not enough tokens in reserve\r\n            tokens = tokenAvailable;\r\n            ethersRefund = _value - (tokens / price * 10**18); // calculate how many ethers will respond to user\r\n            _sender.transfer(ethersRefund);// payback \r\n        }\r\n        owner.transfer(_value - ethersRefund);\r\n        // Add token value to raised variable\r\n        if(stage == 0){\r\n            preSaleRaised += tokens;\r\n        } else if(stage == 1){\r\n            preIcoRaised += tokens;\r\n        } else if(stage == 2){\r\n            icoRaised += tokens;\r\n        } \r\n        addInvestor(_sender, _value);\r\n        return tokens;\r\n    }\r\n    \r\n    function addInvestor(address _sender, uint _value) private {\r\n        Benefeciary memory ben;\r\n        for(uint i = 0; i < benefeciary.length; i++){\r\n            if(benefeciary[i].wallet == _sender){\r\n                benefeciary[i].amount = benefeciary[i].amount + _value - ethersRefund;\r\n            }\r\n        }\r\n        ben.wallet = msg.sender;\r\n        ben.amount = msg.value - ethersRefund;\r\n        benefeciary.push(ben);\r\n    }\r\n    \r\n    \r\n    function() public payable {\r\n        require(startPreSaleDate <= now && now <= endIcoDate);\r\n        require(msg.value >= 0.1 ether);\r\n        require(!crowdsaleFinished);\r\n        totalCup += msg.value;\r\n        uint token = evaluateTokens(msg.value, msg.sender);\r\n        // send tokens to buyer\r\n        balances[msg.sender] = balances[msg.sender].add(token * 10**18);\r\n        balances[owner] = balances[owner].sub(token * 10**18);\r\n        emit Transfer(owner, msg.sender, token * 10**18);\r\n    }\r\n    \r\n    function showParticipantWei(address _wallet) public view onlyOwner returns(uint){\r\n        for(uint i = 0; i < benefeciary.length; i++){\r\n            if(benefeciary[i].wallet == _wallet){\r\n                return benefeciary[i].amount;// show in wei\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function burnUnsoldTokens() public onlyOwner icoHasFinished{\r\n        _burn(owner, balanceOf(owner).sub(reserved));\r\n    }\r\n    \r\n    function crowdSaleStage() public view returns(string){\r\n        string memory result;\r\n        if(uint(Stage) == 0){\r\n            result = \"Pre Sale\";\r\n        } else if(uint(Stage) == 1){\r\n            result = \"Pre-ICO\";\r\n        } else if(uint(Stage) == 2){\r\n            result = \"ICO\";\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    function preSaleRaise() public view returns(uint){\r\n        return preSaleRaised;\r\n    }\r\n    \r\n    function preIcoRaise() public view returns(uint){\r\n        return preIcoRaised;\r\n    }\r\n    \r\n    function icoRaise() public view returns(uint){\r\n        return icoRaised;\r\n    }\r\n    \r\n    modifier icoHasFinished() {\r\n        require(now >= endIcoDate || icoRaised == total || crowdsaleFinished);\r\n        _;\r\n    }\r\n    \r\n    function endIcoByCup() public onlyOwner{\r\n        require(!crowdsaleFinished);\r\n        require(totalCup >= softCup && totalCup <= hardCup);\r\n        crowdsaleFinished = true;\r\n    }\r\n    \r\n    // Output all funds in wei\r\n    function showAllFunds() public onlyOwner view returns(uint){\r\n        return totalCup;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Rays","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://15cdee5c3d3c7d4b52f75b254b429cce1ec03b08597fe775a1048b2eccff260f"}]}