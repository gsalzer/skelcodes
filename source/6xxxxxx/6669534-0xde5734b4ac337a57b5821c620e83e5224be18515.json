{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n ____   _______  _______  _______  __   __    __   __  _______  __    _  ___   _  _______  __   __ \r\n|    | |  _    ||  _    ||       ||  | |  |  |  |_|  ||       ||  |  | ||   | | ||       ||  | |  |\r\n |   | | | |   || | |   ||_     _||  |_|  |  |       ||   _   ||   |_| ||   |_| ||    ___||  |_|  |\r\n |   | | | |   || | |   |  |   |  |       |  |       ||  | |  ||       ||      _||   |___ |       |\r\n |   | | |_|   || |_|   |  |   |  |       |  |       ||  |_|  ||  _    ||     |_ |    ___||_     _|\r\n |   | |       ||       |  |   |  |   _   |  | ||_|| ||       || | |   ||    _  ||   |___   |   |  \r\n |___| |_______||_______|  |___|  |__| |__|  |_|   |_||_______||_|  |__||___| |_||_______|  |___|  \r\n\r\n                                          \r\n                                           `oyyydssydy-                                             \r\n                                    `/so/`:hyyhhhyyhhhddyooo+/:-`                                   \r\n                                     `:dhhdhyhhyyhhyhhhhhhhhhhyyyso+-`                              \r\n                               `-+oyhhhhhhhhhhhhhhhhhhhhyysssyyyyysoos+/.                           \r\n                           `:oydhhhhhhhhhhhhhhhhhhhhhhyyyyyyysssssssso+/oo/`                        \r\n                        `/ydhhhhhhhhhhhhhhhhhhhhhhhyysssssssssssssssossso++s+`                      \r\n                      -sysyhhhhhhhhhhhhhhhhhhhhhyyssssssysssssssoooosooosso+oy+`                    \r\n                    .sy+ohhhhhhhhhhhhhhhhhhhhyyyyyyyyyyysssssssssssooosoossso+sy:                   \r\n                  `oy++syhhhhhhhhhhhhhhddhhhhhhhhhhhhhhhhhhhyysssssssssssssssoosys`                 \r\n                 :hs+oyhhhhhhhhhhhddddddhysyhhhhhhhhhhhhhhhhhhhhyysssssysssssyssssy`                \r\n                ohosyhhhhhhhhhhhhhddddhhsyhyhhhhhhhhddddddddddddhhhyysssyysssyhyhyhh`  `----.       \r\n              `yhsyhhhhhhdddddddddddhhhyhyshhhhhddhyo+//:::://oshddhhhssshhysyhhhhdds:/-.```-/:`    \r\n             `yhhhhhhhhhhddmdddddhhhhhhhhhhhhddyo/:-------------:+yddhhyshhhhhhhddhy:`.-//+/-..+`   \r\n             yhhhhhhhhddddddddddmdddhhhhhhhhdy+:--:::::-----------:ohddhhhhhhhhddhs:-/oyysssyo-.o   \r\n            +hhhhhhdddhys+/////ydhddddhhdhdds/-:++/::---------------+dmdhhhhhddhho///ss++++++ss.::  \r\n           `dhhhhdddy+/:------/ddyshdhdddddy/-+s+/-::/+++++:--------:sdddhhhhddho/+ooo+++///++y:.o  \r\n    `-::::-+dhhhddh+:---::://:oh+/+dhdhsddd+--s////++:`./++oo/-------+hmdhhhddhdhdho+++oo+////+:`o  \r\n  .:-.`..-/dhhhddy/:-::::::/+os+//odddo+hdd/--:///o/` omo..:hy+------/hmddhdddmddmhddddyssyo///-`o  \r\n ::`.-:////mhhhdh//------://++++:-/yddo//sd/:--//++  oNmy-.-sNh/-----/hmddddhdddddmmddyy+++s///--/  \r\n::`./ssooysmhhddo/-----/o/.`.:/o+:-:/os+:-:/:--:/s-  dNNNmmmNNNo-----/hmdddddddddddddyo++//////.o`  \r\n+..:s+++++omdhdd+/----:s. :y:-/yyo:----::::-----/o:  sNNNNNNNNNo-----+dmdddddddddmmmmmmy///////:/   \r\no`-/s/////+dhhdd+/----++  mdo/+dNm+-------------:+s. `dNNNNNNNh/-----sddddddddddddmdyoos///////o    \r\no`-/o//:://yhhhdo/:---/o` dNNNNNNNy:-------------:/o-``+dNNNmdosoo+-/hmddddddddddmNddo++/////++     \r\n+.-://+syssydhhhh//---:o: .dNNNNNNy:----::::::::::::+++/:+shho/----:ymdddddddddddNsso+++++//o/      \r\n`+.-///+oyyhdhhhds/:---:o+.`/ydmdh+:/++//:::-:---::::////+yo:-----:ymmdddddddddddm////////+/`       \r\n -/.:+/+oohdhhhhhds//----/++///+oo+/:-------------------://+::--:/hmmdddddddddddmmhs++++/:`         \r\n  :/./s/:ydhdhhhhhds//:--+soosss+:--------------------------//++sdmmmdddddddmmmmmmmh                \r\n   -+.-osy+odddhhhhdho//::---/+:-----------://:::--------------/odmmmdddddddmmmmmmd.                \r\n    `//--:++hyyhdhhhdmhs+///o/--:-:/:-----::-/++/----------------/sdmmddddddmmmmmd.                 \r\n      .//----:+oyddddddmmdhs/--+-/+oo+/:--:+++/+/-------------...-/ohmmddddmmmmmy`                  \r\n        `-:/++++/smmdddddmh/---:::++oo+/--//////:---------:++:--:///+hmmddmmmmd/                    \r\n              ``/hmmdddddd+:------::///:--:///::----------:/ooo+/////sdmmmmmdo`                     \r\n              -dmdmmmdhyhs//:-------------------------::/oss/////////odmmmh/`                       \r\n              d/`dmmmdo/:----::::::::::::::-------::/ooo+++//////////odh+.                          \r\n              . `d-+dmds+/:::---......-----::://+oo+:.``+o///////////s`                             \r\n                 `  /dy-+o++++++o+++++++ooo+++/:.`   -+s+///////////o-                              \r\n                     `.   +/////+oshddddy+-.`  `.-/oyhs/://////////o-                               \r\n                           :+///////+oyddddhhhhhhhhhs+:-/////////++.                                \r\n                            `//////////+oshhdhhhyso/:--:///////++-                                  \r\n                              ./+/////////:::::-....-://////+o/.                                    \r\n                                `:/+/////////:::::///////++/-                                       \r\n                                    .::/++/////////+++/:-`                                          \r\n                                         `.-------.`        \r\n\r\nThe game starts on Saturday, November 10, 2018 at 5:00:00 PM (GMT)\r\n\r\nhttps://monkey.game\r\nhttps://discord.gg/3UQ4dNj\r\n\r\nDISCLAIMER:\r\n\r\nPlease note, during your use of this contract, that online gambling is an entertainment vehicle, and that it carries with it a certain degree of financial risk. \r\nPlayers should be aware of this risk, and govern themselves accordingly. All users of this contract should exercise responsibility when playing in online casinos, lotteries, and dAPPS. \r\nCIRCUS FREAKS PRODUCTIONS have undertaken the appropriate steps to inform all those interested in online gaming about the dangers of excess play; that could potentially result from such an activity. \r\nThere is nothing contained herein that constitutes a guarantee of winning, nor is there an intention to induce anyone into violating any local, state or national laws. \r\nRecognizing that the laws and regulations involving online gaming are different everywhere, readers are advised to check with the laws that exist within their own jurisdiction to ascertain the legality of the activities which are covered.\r\n\r\n*/\r\n\r\npragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"the SafeMath multiplication check failed\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0, \"the SafeMath division check failed\");\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a, \"the SafeMath subtraction check failed\");\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"the SafeMath addition check failed\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b != 0, \"the SafeMath modulo check failed\");\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\ncontract OneHundredthMonkey {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\t///////////\r\n\t//STORAGE//\r\n\t///////////\r\n\r\n\t//ADMIN\r\n\tuint256 public adminBalance;\r\n\tuint256 public foundationBalance;\r\n\taddress public adminBank;\r\n\taddress public foundationFund;\r\n\taddress[] public admins;\r\n\tmapping (address => bool) public isAdmin;\r\n\r\n\t//GLOBAL\r\n\tbool public gameActive = false;\r\n\tbool public earlyResolveACalled = false;\r\n\tbool public earlyResolveBCalled = false;\r\n\tuint256 public activationTime = 1541869200; // (GMT): Saturday, November 10, 2018 5:00:00 PM\r\n\tuint256 public miniGamesPerRound = 100; \r\n\tuint256 public miniGamesPerCycle = 1000; \r\n\tuint256 public miniGamePotRate = 25; //25%\r\n\tuint256 public progressivePotRate = 25; //25%\r\n\tuint256 public roundDivRate = 20; //20%\r\n\tuint256 public miniGameDivRate = 10; //10%\r\n\tuint256 public referralRate = 10; //10%\r\n\tuint256 public miniGameAirdropRate = 5; //5%\r\n\tuint256 public adminFeeRate = 5; //5%\r\n\tuint256 public roundPotRate = 48; //48% of progressive pot \r\n\tuint256 internal precisionFactor = 18; \r\n\tuint256 public seedAreward = 25000000000000000; \r\n\tuint256 public seedBreward = 25000000000000000; \r\n\tmapping (uint256 => bool) public miniGameSeedAawarded;\r\n\tmapping (uint256 => bool) public miniGameSeedBawarded;\r\n\t\r\n\t//RNG\r\n\tuint256 internal RNGblockDelay = 1;\r\n\tuint256 internal salt = 0; \r\n\tbytes32 internal hashA; \r\n\tbytes32 internal hashB; \r\n\r\n\t//MINIGAME TRACKING\r\n\tbool public miniGameProcessing;\r\n\tuint256 public miniGameCount;\r\n\tuint256 public miniGameProcessingBegun;\r\n\tmapping (uint256 => bool) public miniGamePrizeClaimed;\r\n\tmapping (uint256 => bool) public miniGameAirdropClaimed;\r\n\tmapping (uint256 => uint256) public miniGameStartTime;\r\n\tmapping (uint256 => uint256) public miniGameEndTime;\r\n\tmapping (uint256 => uint256) public miniGameTokens;\r\n\tmapping (uint256 => uint256) public miniGameTokensLeft;\r\n\tmapping (uint256 => uint256) public miniGameTokensActive;\r\n\tmapping (uint256 => uint256) public miniGameTokenRangeMin;\r\n\tmapping (uint256 => uint256) public miniGameTokenRangeMax;\r\n\tmapping (uint256 => uint256) public miniGamePrizeNumber;\r\n\tmapping (uint256 => uint256) public miniGameAirdropNumber;\r\n\tmapping (uint256 => uint256) public miniGamePrizePot;\r\n\tmapping (uint256 => uint256) public miniGameAirdropPot;\r\n\tmapping (uint256 => uint256) public miniGameDivs;\r\n\tmapping (uint256 => uint256) public miniGameDivsClaimed;\r\n\tmapping (uint256 => address) public miniGamePrizeWinner;\r\n\tmapping (uint256 => address) public miniGameAirdropWinner;\r\n\r\n\t//ROUND TRACKING\r\n\tuint256 public roundCount;\r\n\tmapping (uint256 => bool) public roundPrizeClaimed;\r\n\tmapping (uint256 => bool) public roundPrizeTokenRangeIdentified;\r\n\tmapping (uint256 => uint256) public roundStartTime;\r\n\tmapping (uint256 => uint256) public roundEndTime;\r\n\tmapping (uint256 => uint256) public roundTokens;\r\n\tmapping (uint256 => uint256) public roundTokensActive;\r\n\tmapping (uint256 => uint256) public roundTokenRangeMin;\r\n\tmapping (uint256 => uint256) public roundTokenRangeMax;\r\n\tmapping (uint256 => uint256) public roundPrizeNumber;\r\n\tmapping (uint256 => uint256) public roundPrizePot;\r\n\tmapping (uint256 => uint256) public roundDivs;\r\n\tmapping (uint256 => uint256) public roundDivsClaimed;\r\n\tmapping (uint256 => uint256) public roundPrizeInMinigame;\r\n\tmapping (uint256 => address) public roundPrizeWinner;\r\n\r\n\t//CYCLE TRACKING\r\n\tbool public cycleOver = false;\r\n\tbool public cylcePrizeClaimed;\r\n\tbool public cyclePrizeTokenRangeIdentified;\r\n\tuint256 public totalVolume;\r\n\tuint256 public totalBuys;\r\n\tuint256 public tokenSupply;\r\n\tuint256 public cycleActiveTokens;\r\n\tuint256 public cycleCount;\r\n\tuint256 public cycleEnded;\r\n\tuint256 public cycleProgressivePot;\r\n\tuint256 public cyclePrizeWinningNumber;\r\n\tuint256 public cyclePrizeInMinigame;\r\n\tuint256 public cyclePrizeInRound;\r\n\tuint256 public cycleStartTime;\r\n\taddress public cyclePrizeWinner;\r\n\r\n\t//TOKEN TRACKING\r\n\tuint256 public tokenPrice = 0.001 ether; \r\n\tuint256 public tokenPriceIncrement = 0.0005 ether; \r\n\tuint256 public minTokensPerMiniGame = 10000; //between 1x and 2x this amount of tokens generated each minigame \r\n\r\n\t//USER TRACKING PUBLIC\r\n\taddress[] public uniqueAddress;\r\n\tmapping (address => bool) public knownUsers;\r\n\tmapping (address => uint256) public userTokens;\r\n\tmapping (address => uint256) public userBalance;\r\n\tmapping (address => mapping (uint256 => uint256)) public userMiniGameTokens;\r\n\tmapping (address => mapping (uint256 => uint256)) public userRoundTokens;\r\n\tmapping (address => mapping (uint256 => uint256[])) public userMiniGameTokensMin;\r\n\tmapping (address => mapping (uint256 => uint256[])) public userMiniGameTokensMax;\r\n\r\n\t//USER TRACKING INTERNAL\r\n\tmapping (address => bool) internal userCycleChecked;\r\n\tmapping (address => uint256) internal userLastMiniGameInteractedWith;\r\n\tmapping (address => uint256) internal userLastRoundInteractedWith;\r\n\tmapping (address => uint256) internal userLastMiniGameChecked;\r\n\tmapping (address => uint256) internal userLastRoundChecked;\r\n\tmapping (address => mapping (uint256 => uint256)) internal userShareMiniGame;\r\n\tmapping (address => mapping (uint256 => uint256)) internal userDivsMiniGameTotal;\r\n\tmapping (address => mapping (uint256 => uint256)) internal userDivsMiniGameClaimed;\r\n\tmapping (address => mapping (uint256 => uint256)) internal userDivsMiniGameUnclaimed;\r\n\tmapping (address => mapping (uint256 => uint256)) internal userShareRound;\r\n\tmapping (address => mapping (uint256 => uint256)) internal userDivsRoundTotal;\r\n\tmapping (address => mapping (uint256 => uint256)) internal userDivsRoundClaimed;\r\n\tmapping (address => mapping (uint256 => uint256)) internal userDivsRoundUnclaimed;\r\n\r\n\t\r\n\t///////////////\r\n\t//CONSTRUCTOR//\r\n\t///////////////\r\n\r\n\tconstructor(address _adminBank, address _foundationFund, address _adminTwo, address _adminThree, address _adminFour) public {\r\n\t\t//set dev bank address and admins\r\n\t\tadminBank = _adminBank;\r\n\t\tfoundationFund = _foundationFund;\r\n\t\tadmins.push(msg.sender);\r\n\t\tisAdmin[msg.sender] = true;\r\n\t\tadmins.push(_adminTwo);\r\n\t\tisAdmin[_adminTwo] = true; \r\n\t\tadmins.push(_adminThree);\r\n\t\tisAdmin[_adminThree] = true; \r\n\t\tadmins.push(_adminFour);\r\n\t\tisAdmin[_adminFour] = true; \r\n\t}\r\n\r\n\t\r\n\t/////////////\r\n\t//MODIFIERS//\r\n\t/////////////\r\n\r\n\tmodifier onlyAdmins() {\r\n\t\trequire (isAdmin[msg.sender] == true, \"you must be an admin\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyHumans() { \r\n\t    require (msg.sender == tx.origin, \"only approved contracts allowed\"); \r\n\t    _; \r\n\t  }\r\n\r\n\tmodifier gameOpen() {\r\n\t\trequire (gameActive == true || now >= activationTime, \"the game must be open\");\r\n\t  \tif (miniGameProcessing == true) {\r\n\t  \t\trequire (block.number > miniGameProcessingBegun + RNGblockDelay, \"the round is still processing. try again soon\");\r\n\t  \t}\r\n\t  \t_;\r\n\t}\r\n    \r\n    \r\n    //////////\r\n\t//EVENTS//\r\n\t//////////\r\n\r\n\tevent adminWithdrew(\r\n\t\tuint256 _amount,\r\n\t\taddress indexed _caller,\r\n\t\tstring _message \r\n\t);\r\n\r\n\tevent cycleStarted(\r\n\t\taddress indexed _caller,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent adminAdded(\r\n\t\taddress indexed _caller,\r\n\t\taddress indexed _newAdmin,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent resolvedEarly(\r\n\t\taddress indexed _caller,\r\n\t\tuint256 _pot,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent processingRestarted(\r\n\t\taddress indexed _caller,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent contractDestroyed(\r\n\t\taddress indexed _caller,\r\n\t\tuint256 _balance,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent userBought(\r\n\t\taddress indexed _user,\r\n\t\tuint256 _tokensBought,\r\n\t\tuint256 indexed _miniGameID,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent userReinvested(\r\n\t\taddress indexed _user,\r\n\t\tuint256 _amount,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent userWithdrew(\r\n\t\taddress indexed _user,\r\n\t\tuint256 _amount,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent processingStarted(\r\n\t\taddress indexed _caller,\r\n\t\tuint256 indexed _miniGameID,\r\n\t\tuint256 _blockNumber,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent processingFinished(\r\n\t\taddress indexed _caller,\r\n\t\tuint256 indexed _miniGameID,\r\n\t\tuint256 _blockNumber,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent newMinigameStarted(\r\n\t\tuint256 indexed _miniGameID,\r\n\t\tuint256 _newTokens,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent miniGamePrizeAwarded(\r\n\t\tuint256 indexed _miniGameID,\r\n\t\tuint256 _winningNumber,\r\n\t\tuint256 _prize,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent miniGameAirdropAwarded(\r\n\t\tuint256 indexed _miniGameID,\r\n\t\tuint256 _winningNumber,\r\n\t\tuint256 _prize,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent roundPrizeAwarded(\r\n\t\tuint256 indexed _roundID,\r\n\t\tuint256 _winningNumber,\r\n\t\tuint256 _prize,\r\n\t\tstring _message\r\n\t);\r\n\r\n\tevent cyclePrizeAwarded(\r\n\t\tuint256 _winningNumber,\r\n\t\tuint256 _prize,\r\n\t\tstring _message\r\n\t);\r\n\r\n\r\n\t///////////////////\r\n\t//ADMIN FUNCTIONS//\r\n\t///////////////////\r\n\r\n\tfunction adminWithdraw() external {\r\n\t\trequire (isAdmin[msg.sender] == true || msg.sender == adminBank);\r\n\t\trequire (adminBalance > 0, \"there must be a balance\");\r\n\t\tuint256 balance = adminBalance;\r\n\t\tadminBalance = 0;\r\n\t\tadminBank.call.value(balance).gas(100000)();\r\n\r\n\t\temit adminWithdrew(balance, msg.sender, \"an admin just withdrew to the admin bank\");\r\n\t}\r\n\r\n\tfunction foundationWithdraw() external {\r\n\t\trequire (isAdmin[msg.sender] == true || msg.sender == foundationFund);\r\n\t\trequire (adminBalance > 0, \"there must be a balance\");\r\n\t\tuint256 balance = foundationBalance;\r\n\t\tfoundationBalance = 0;\r\n\t\tfoundationFund.call.value(balance).gas(100000)();\r\n\r\n\t\temit adminWithdrew(balance, msg.sender, \"an admin just withdrew to the foundation fund\");\r\n\t}\r\n\r\n\t//this function begins resolving the round in the event that the game has stalled\r\n\t//it can be called no sooner than 1 week after the start of a minigame \r\n\t//can only be called once. can be restarted with restartMiniGame if 256 blocks pass\r\n\tfunction earlyResolveA() external onlyAdmins() onlyHumans() gameOpen() {\r\n\t\trequire (now > miniGameStartTime[miniGameCount] + 604800 && miniGameProcessing == false, \"earlyResolveA cannot be called yet\"); //1 week\r\n\t\trequire (miniGamePrizePot[miniGameCount].sub(seedAreward).sub(seedBreward) >= 0);\r\n\t\t\r\n\t\tgameActive = false;\r\n\t\tearlyResolveACalled = true;\r\n\t\tgenerateSeedA();\r\n\t}\r\n\r\n\t//this function comlpetes the resolution and ends the game \r\n\tfunction earlyResolveB() external onlyAdmins() onlyHumans() {\r\n\t\trequire (earlyResolveACalled == true && earlyResolveBCalled == false && miniGameProcessing == true && block.number > miniGameProcessingBegun + RNGblockDelay, \"earlyResolveB cannot be called yet\"); \r\n\t\t\r\n\t\tearlyResolveBCalled = true;\r\n\t\tresolveCycle();\r\n\r\n\t\temit resolvedEarly(msg.sender, cycleProgressivePot, \"the cycle was resolved early\"); \r\n\t}\r\n\r\n\t//resets the first seed in case the processing is not completed within 256 blocks \r\n\tfunction restartMiniGame() external onlyAdmins() onlyHumans() {\r\n\t\trequire (miniGameProcessing == true && block.number > miniGameProcessingBegun + 256, \"restartMiniGame cannot be called yet\");\r\n\t\t\r\n\t\tgenerateSeedA();\r\n\r\n\t\temit processingRestarted(msg.sender, \"mini-game processing was restarted\");\r\n\t}\r\n\r\n\t//admins can close the contract no sooner than 30 days after a full cycle completes \r\n\t//users need to withdraw funds before this date or risk losing them\r\n\tfunction zeroOut() external onlyAdmins() onlyHumans() {\r\n\t    require (now >= cycleEnded + 30 days && cycleOver == true, \"too early to close the contract\"); \r\n\t    \r\n\t  \t//event emited before selfdestruct\r\n\t    emit contractDestroyed(msg.sender, address(this).balance, \"contract destroyed\"); \r\n\r\n\t    selfdestruct(foundationFund);\r\n\t}\r\n\r\n\r\n\t//////////////////\r\n\t//USER FUNCTIONS//\r\n\t//////////////////\r\n\r\n\tfunction () external payable onlyHumans() gameOpen() {\r\n\t\t//funds sent directly to contract will trigger buy\r\n\t\t//no refferal on fallback \r\n\t\tbuyInternal(msg.value, 0x0);\r\n\t}\r\n\r\n\tfunction buy(address _referral) public payable onlyHumans() gameOpen() {\r\n\t\tbuyInternal(msg.value, _referral);\r\n\t}\r\n\t\r\n\tfunction reinvest(uint256 _amount, address _referral) external onlyHumans() gameOpen() {\r\n\t\t//update userBalance at beginning of function in case user has new funds to reinvest\r\n\t\tupdateUserBalance(msg.sender);\r\n\r\n\t\trequire (_amount <= userBalance[msg.sender], \"insufficient balance\");\r\n\t\trequire (_amount >= tokenPrice, \"you must buy at least one token\");\r\n\r\n\t\t//take funds from user persistent storage and buy\r\n\t\tuserBalance[msg.sender] = userBalance[msg.sender].sub(_amount);\r\n\t\t\r\n\t\tbuyInternal(_amount, _referral);\r\n\r\n\t\temit userReinvested(msg.sender, _amount, \"a user reinvested\");\r\n\t}\r\n\r\n\tfunction withdraw() external onlyHumans() {\r\n\t\t//update userBalance at beginning of function in case user has new funds to reinvest\r\n\t\tupdateUserBalance(msg.sender);\r\n\r\n\t\trequire (userBalance[msg.sender] > 0, \"no balance to withdraw\");\r\n\t\trequire (userBalance[msg.sender] <= address(this).balance, \"you cannot withdraw more than the contract holds\");\r\n\r\n\t\t//update user accounting and transfer\r\n\t\tuint256 toTransfer = userBalance[msg.sender];\r\n\t\tuserBalance[msg.sender] = 0;\r\n\t\tmsg.sender.transfer(toTransfer);\r\n\r\n\t\temit userWithdrew(msg.sender, toTransfer, \"a user withdrew\");\r\n\t}\r\n\r\n\r\n\t//////////////////\r\n\t//VIEW FUNCTIONS//\r\n\t//////////////////\r\n\r\n\t//helper function for front end token value\r\n\tfunction getValueOfRemainingTokens() public view returns(uint256 _tokenValue){\r\n\t\treturn miniGameTokensLeft[miniGameCount].mul(tokenPrice);\r\n\t}\r\n\r\n\t//helper function for front end minigame prize pot\r\n\tfunction getCurrentMinigamePrizePot() public view returns(uint256 _mgPrize){\r\n\t    return miniGamePrizePot[miniGameCount];\r\n\t}\r\n\r\n\t//helper function for front end round prize pot\r\n\tfunction getCurrentRoundPrizePot() public view returns(uint256 _rndPrize){\r\n\t    return roundPrizePot[roundCount];\r\n\t}\r\n\r\n\t//helper function to return contract balance \r\n\tfunction contractBalance() external view returns(uint256 _contractBalance) {\r\n\t    return address(this).balance;\r\n\t}\r\n\r\n\t//check for user divs available\r\n\tfunction checkUserDivsAvailable(address _user) external view returns(uint256 _userDivsAvailable) {\r\n\t\treturn userBalance[_user] + checkDivsMgView(_user) + checkDivsRndView(_user) + checkPrizesView(_user);\r\n\t}\r\n\r\n\t//user chance of winning minigame prize or airdrop\r\n\tfunction userOddsMiniGame(address _user) external view returns(uint256) {\r\n\t\t//returns percentage precise to two decimal places (eg 1428 == 14.28% odds)\r\n\t\treturn userMiniGameTokens[_user][miniGameCount].mul(10 ** 5).div(miniGameTokensActive[miniGameCount]).add(5).div(10);\r\n\t}\r\n\r\n\t//user chance of winning round prize or airdrop\r\n\tfunction userOddsRound(address _user) external view returns(uint256) {\r\n\t\t//returns percentage precise to two decimal places (eg 1428 == 14.28% odds)\r\n\t\treturn userRoundTokens[_user][roundCount].mul(10 ** 5).div(roundTokensActive[roundCount]).add(5).div(10);\r\n\t}\r\n\r\n\t//user chance of winning cycle prize\r\n\tfunction userOddsCycle(address _user) external view returns(uint256) {\r\n\t\t//returns percentage precise to two decimal places (eg 1428 == 14.28% odds)\r\n\t\treturn userTokens[_user].mul(10 ** 5).div(cycleActiveTokens).add(5).div(10);\r\n\t}\r\n\r\n\t//helper function for minigame data\r\n\tfunction miniGameInfo() external view returns(\r\n\t\tuint256 _id,\r\n\t\tuint256 _miniGameTokens,\r\n\t\tuint256 _miniGameTokensLeft,\r\n\t\tuint256 _miniGamePrizePot,\r\n\t\tuint256 _miniGameAirdropPot,\r\n\t\tuint256 _miniGameStartTime\r\n\t\t) {\r\n\r\n\t\treturn (\r\n\t\t\tminiGameCount,\r\n\t\t\tminiGameTokens[miniGameCount],\r\n\t\t\tminiGameTokensLeft[miniGameCount],\r\n\t\t\tminiGamePrizePot[miniGameCount],\r\n\t\t\tminiGameAirdropPot[miniGameCount],\r\n\t\t\tminiGameStartTime[miniGameCount]\r\n\t\t);\r\n\t}\r\n\r\n\t//helper function for round data\r\n\tfunction roundInfo() external view returns(\r\n\t\tuint256 _id,\r\n\t\tuint256 _roundPrize,\r\n\t\tuint256 _roundStart\r\n\t\t) {\r\n\r\n\t\treturn (\r\n\t\t\troundCount,\r\n\t\t\tcycleProgressivePot / 2,\r\n\t\t\troundStartTime[roundCount]\r\n\t\t);\r\n\t}\r\n\r\n\t//helper function for contract data\r\n\tfunction contractInfo() external view returns(\r\n\t\tuint256 _balance,\r\n\t\tuint256 _volume,\r\n\t\tuint256 _totalBuys,\r\n\t\tuint256 _totalUsers,\r\n\t\tuint256 _tokenSupply,\r\n\t\tuint256 _tokenPrice\r\n\t\t) {\r\n\r\n\t\treturn (\r\n\t\t\taddress(this).balance,\r\n\t\t\ttotalVolume,\r\n\t\t\ttotalBuys,\r\n\t\t\tuniqueAddress.length,\r\n\t\t\ttokenSupply,\r\n\t\t\ttokenPrice\r\n\t\t);\r\n\t}\r\n\r\n\t//cycle data\t\r\n\tfunction cycleInfo() external view returns(\r\n\t\tbool _cycleComplete,\r\n\t\tuint256 _currentRound,\r\n\t\tuint256 _currentMinigame,\r\n\t\tuint256 _tokenSupply,\r\n\t\tuint256 _progressivePot,\r\n\t\tbool _prizeClaimed,\r\n\t\tuint256 _winningNumber\r\n\t\t) {\r\n\t\tbool isActive;\r\n\t\tif (miniGameCount < 1000) {\r\n\t\t\tisActive = true;\r\n\t\t\t} else {\r\n\t\t\t\tisActive = false;\r\n\t\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\tisActive,\r\n\t\t\troundCount,\r\n\t\t\tminiGameCount,\r\n\t\t\ttokenSupply,\r\n\t\t\tcycleProgressivePot,\r\n\t\t\tcylcePrizeClaimed,\r\n\t\t\tcyclePrizeWinningNumber\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t//////////////////////\r\n\t//INTERNAL FUNCTIONS//\r\n\t//////////////////////\r\n\r\n\tfunction startCycle() internal {\r\n\t\trequire (gameActive == false && cycleCount == 0, \"the cycle has already been started\");\r\n\t\t\r\n\t\tgameActive = true;\r\n\t\tcycleStart();\r\n\t\troundStart();\r\n\t\tminiGameStart();\r\n\r\n\t\temit cycleStarted(msg.sender, \"a new cycle just started\"); \r\n\t}\r\n\r\n\tfunction buyInternal(uint256 _amount, address _referral) internal {\r\n\t\trequire (_amount >= tokenPrice, \"you must buy at least one token\");\r\n\t\trequire (userMiniGameTokensMin[msg.sender][miniGameCount].length < 10, \"you are buying too often in this round\"); //sets up bounded loop \r\n\r\n\t\t//start cycle on first buy\r\n\t\tif (gameActive == false && now >= activationTime) {\r\n\t\t\tstartCycle();\r\n\t\t}\r\n\r\n\t\t//update divs here to prevent overwriting userLastRoundInteractedWith\r\n\t\tif (userLastRoundInteractedWith[msg.sender] < roundCount || userLastMiniGameInteractedWith[msg.sender] < miniGameCount) {\r\n\t\t\tupdateUserBalance(msg.sender);\r\n\t\t}\r\n\r\n\t\t//if this is the first tx after processing period is over, call generateSeedB\r\n\t\tif (miniGameProcessing == true && block.number > miniGameProcessingBegun + RNGblockDelay) {\r\n\t\t\tgenerateSeedB();\r\n\t\t}\r\n\r\n\t\t//track user\r\n\t\tif (knownUsers[msg.sender] == false) {\r\n\t\t\tuniqueAddress.push(msg.sender);\r\n\t\t\tknownUsers[msg.sender] = true;\r\n\t\t}\r\n\r\n\t\t//assign tokens\r\n\t\tuint256 tokensPurchased;\r\n\t\tuint256 ethSpent = _amount;\r\n\t\tuint256 valueOfRemainingTokens = miniGameTokensLeft[miniGameCount].mul(tokenPrice);\r\n\r\n\t\t//if round tokens are all sold, push difference to user balance and call generateSeedA\r\n\t\tif (ethSpent >= valueOfRemainingTokens) {\r\n\t\t\tuint256 incomingValue = ethSpent;\r\n\t\t\tethSpent = valueOfRemainingTokens;\r\n\t\t\ttokensPurchased = miniGameTokensLeft[miniGameCount];\r\n\t\t\tminiGameTokensLeft[miniGameCount] = 0;\r\n\t\t\tuint256 ethCredit = incomingValue.sub(ethSpent);\r\n\t\t\tuserBalance[msg.sender] += ethCredit;\r\n\t\t\tgenerateSeedA();\r\n\t\t} else {\r\n\t\t\ttokensPurchased = ethSpent.div(tokenPrice);\r\n\t\t}\r\n\r\n\t\t//update user token accounting\r\n\t\tuserTokens[msg.sender] += tokensPurchased;\r\n\t\tuserMiniGameTokens[msg.sender][miniGameCount] += tokensPurchased;\r\n\t\tuserRoundTokens[msg.sender][roundCount] += tokensPurchased;\r\n\t\t//add min ranges and save in user accounting\r\n\t\tuserMiniGameTokensMin[msg.sender][miniGameCount].push(cycleActiveTokens + 1);\r\n\t\tuserMiniGameTokensMax[msg.sender][miniGameCount].push(cycleActiveTokens + tokensPurchased);\r\n\t\t//log last eligible rounds for withdraw checking \r\n\t\tuserLastMiniGameInteractedWith[msg.sender] = miniGameCount;\r\n\t\tuserLastRoundInteractedWith[msg.sender] = roundCount;\t\r\n\r\n\t\tuint256 referralShare = (ethSpent.mul(referralRate)).div(100);\r\n\t\t//check referral\r\n\t\t\tif (_referral != 0x0000000000000000000000000000000000000000 && _referral != msg.sender) {\r\n\t      // assign refferal\r\n\t      userBalance[_referral] += referralShare;\r\n\t   \t} else if (_referral == 0x0000000000000000000000000000000000000000 || _referral == msg.sender){\r\n\t   \t\t//if no referral used, add to progessive pot \r\n\t   \t\tcycleProgressivePot += referralShare;\r\n\t   \t}\r\n\r\n\t\t//divide amount by various percentages and distribute\r\n\t\tuint256 adminShare = (ethSpent.mul(adminFeeRate)).div(100);\r\n\t\tadminBalance += adminShare;\r\n\r\n\t\tuint256 mgDivs = (ethSpent.mul(miniGameDivRate)).div(100);\r\n\t\tminiGameDivs[miniGameCount] += mgDivs;\r\n\r\n\t\tuint256 roundDivShare = ethSpent.mul(roundDivRate).div(100);\r\n\t\troundDivs[roundCount] += roundDivShare;\r\n\r\n\t\tuint256 miniGamePrize = ethSpent.mul(miniGamePotRate).div(100);\r\n\t\tminiGamePrizePot[miniGameCount] += miniGamePrize;\r\n\r\n\t\tuint256 miniGameAirdrop = ethSpent.mul(miniGameAirdropRate).div(100);\r\n\t\tminiGameAirdropPot[miniGameCount] += miniGameAirdrop;\r\n\r\n\t\tuint256 cyclePot = ethSpent.mul(progressivePotRate).div(100);\r\n\t\tcycleProgressivePot += cyclePot;\r\n\r\n     \t//update global token accounting \r\n     \tif (miniGameTokensLeft[miniGameCount] > 0) {\r\n\t\t\tminiGameTokensLeft[miniGameCount] = miniGameTokensLeft[miniGameCount].sub(tokensPurchased);\r\n\t\t}\r\n\t\tcycleActiveTokens += tokensPurchased;\r\n\t\troundTokensActive[roundCount] += tokensPurchased;\r\n\t\tminiGameTokensActive[miniGameCount] += tokensPurchased;\r\n\t\ttotalVolume += ethSpent;\r\n\t\ttotalBuys++;\r\n\r\n        //update user balance, if necessary. done here to keep ensure updateUserBalance never has to search through multiple minigames \r\n\t\tupdateUserBalance(msg.sender);\r\n\r\n\t\temit userBought(msg.sender, tokensPurchased, miniGameCount, \"a user just bought tokens\");\r\n\t}\r\n\r\n\tfunction checkDivs(address _user) internal {\r\n\t\t//set up local shorthand\r\n\t\tuint256 _mg = userLastMiniGameInteractedWith[_user];\r\n\t\tuint256 _rnd = userLastRoundInteractedWith[_user];\r\n\r\n\t\t//calculate minigame divs \r\n\t\tuserShareMiniGame[_user][_mg] = userMiniGameTokens[_user][_mg].mul(10 ** (precisionFactor + 1)).div(miniGameTokens[_mg] + 5).div(10);\r\n\t    userDivsMiniGameTotal[_user][_mg] = miniGameDivs[_mg].mul(userShareMiniGame[_user][_mg]).div(10 ** precisionFactor);\r\n\t    userDivsMiniGameUnclaimed[_user][_mg] = userDivsMiniGameTotal[_user][_mg].sub(userDivsMiniGameClaimed[_user][_mg]);\r\n\t    //add to user balance\r\n\t    if (userDivsMiniGameUnclaimed[_user][_mg] > 0) {\r\n\t\t\t//sanity check\r\n\t\t\tassert(userDivsMiniGameUnclaimed[_user][_mg] <= miniGameDivs[_mg]);\r\n\t\t\tassert(userDivsMiniGameUnclaimed[_user][_mg] <= address(this).balance);\r\n\t\t\t//update user accounting\r\n\t\t\tuserDivsMiniGameClaimed[_user][_mg] = userDivsMiniGameTotal[_user][_mg];\r\n\t\t\tuint256 shareTempMg = userDivsMiniGameUnclaimed[_user][_mg];\r\n\t\t\tuserDivsMiniGameUnclaimed[_user][_mg] = 0;\r\n\t\t\tuserBalance[_user] += shareTempMg;\r\n\t\t\tminiGameDivsClaimed[_mg] += shareTempMg;\r\n\t\t    }\r\n\t    //calculate round divs \r\n\t\tuserShareRound[_user][_rnd] = userRoundTokens[_user][_rnd].mul(10 ** (precisionFactor + 1)).div(roundTokensActive[_rnd] + 5).div(10);\r\n\t    userDivsRoundTotal[_user][_rnd] = roundDivs[_rnd].mul(userShareRound[_user][_rnd]).div(10 ** precisionFactor);\r\n\t    userDivsRoundUnclaimed[_user][_rnd] = userDivsRoundTotal[_user][_rnd].sub(userDivsRoundClaimed[_user][_rnd]);\r\n\t    //add to user balance\r\n\t    if (userDivsRoundUnclaimed[_user][_rnd] > 0) {\r\n\t\t\t//sanity check\r\n\t\t\tassert(userDivsRoundUnclaimed[_user][_rnd] <= roundDivs[_rnd]);\r\n\t\t\tassert(userDivsRoundUnclaimed[_user][_rnd] <= address(this).balance);\r\n\t\t\t//update user accounting\r\n\t\t\tuserDivsRoundClaimed[_user][_rnd] = userDivsRoundTotal[_user][_rnd];\r\n\t\t\tuint256 shareTempRnd = userDivsRoundUnclaimed[_user][_rnd];\r\n\t\t\tuserDivsRoundUnclaimed[_user][_rnd] = 0;\r\n\t\t\tuserBalance[_user] += shareTempRnd;\r\n\t\t\troundDivsClaimed[_rnd] += shareTempRnd;\r\n\t    }\t\r\n\t}\r\n\r\n\tfunction checkPrizes(address _user) internal {\r\n\t\t//push cycle prizes to persistent storage\r\n\t\tif (cycleOver == true && userCycleChecked[_user] == false) {\r\n\t\t\t//get minigame cycle prize was in \r\n\t\t\tuint256 mg = cyclePrizeInMinigame;\r\n\t\t\t//check if user won cycle prize \r\n\t\t\tif (cylcePrizeClaimed == false && userMiniGameTokensMax[_user][mg].length > 0) {\r\n\t\t\t\t//check if user won minigame \r\n\t\t\t\t//loop iterations bounded to a max of 10 on buy()\r\n\t  \t\t\tfor (uint256 i = 0; i < userMiniGameTokensMin[_user][mg].length; i++) {\r\n\t  \t\t\t\tif (cyclePrizeWinningNumber >= userMiniGameTokensMin[_user][mg][i] && cyclePrizeWinningNumber <= userMiniGameTokensMax[_user][mg][i]) {\r\n\t  \t\t\t\t\tuserBalance[_user] += cycleProgressivePot;\r\n\t  \t\t\t\t\tcylcePrizeClaimed = true;\r\n\t\t\t\t\t\tcyclePrizeWinner = msg.sender;\t\t\t\t\r\n\t  \t\t\t\t\tbreak;\r\n\t  \t\t\t\t}\r\n\t  \t\t\t}\r\n\t\t\t}\r\n\t\t\tuserCycleChecked[_user] = true;\r\n\t\t}\r\n\t\t//push round prizes to persistent storage\r\n\t\tif (roundPrizeClaimed[userLastRoundInteractedWith[_user]] == false && roundPrizeTokenRangeIdentified[userLastRoundInteractedWith[_user]]) {\r\n\t\t\t//get minigame round prize was in \r\n\t\t\tuint256 rnd = userLastRoundInteractedWith[_user];\r\n\t\t\tuint256 mgp = roundPrizeInMinigame[rnd];\r\n\t\t\t//check if user won round prize\r\n\t\t\tfor (i = 0; i < userMiniGameTokensMin[_user][mgp].length; i++) {\r\n\t\t\t\tif (roundPrizeNumber[rnd] >= userMiniGameTokensMin[_user][mgp][i] && roundPrizeNumber[rnd] <= userMiniGameTokensMax[_user][mgp][i]) {\r\n\t\t\t\t\tuserBalance[_user] += roundPrizePot[mgp];\r\n\t\t\t\t\troundPrizeClaimed[rnd] = true;\r\n\t\t\t\t\troundPrizeWinner[rnd] = msg.sender;\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tuserLastRoundChecked[_user] = userLastRoundInteractedWith[_user];\r\n\t\t}\r\n\t\t//push minigame prizes to persistent storage\r\n\t\tif (userLastMiniGameChecked[_user] < userLastMiniGameInteractedWith[_user] && miniGameCount > userLastMiniGameInteractedWith[_user]) {\r\n\t\t\t//check if user won minigame \r\n\t\t\tmg = userLastMiniGameInteractedWith[_user];\r\n\t\t\tfor (i = 0; i < userMiniGameTokensMin[_user][mg].length; i++) {\r\n\t\t\t\tif (miniGamePrizeNumber[mg] >= userMiniGameTokensMin[_user][mg][i] && miniGamePrizeNumber[mg] <= userMiniGameTokensMax[_user][mg][i]) {\r\n\t\t\t\t\tuserBalance[_user] += miniGamePrizePot[mg];\r\n\t\t\t\t\tminiGamePrizeClaimed[mg] = true;\r\n\t\t\t\t\tminiGamePrizeWinner[mg] = msg.sender;\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//check if user won airdrop\r\n\t\t\tfor (i = 0; i < userMiniGameTokensMin[_user][mg].length; i++) {\r\n\t\t\t\tif (miniGameAirdropNumber[mg] >= userMiniGameTokensMin[_user][mg][i] && miniGameAirdropNumber[mg] <= userMiniGameTokensMax[_user][mg][i]) {\r\n\t\t\t\t\tuserBalance[_user] += miniGameAirdropPot[mg];\r\n\t\t\t\t\tminiGameAirdropClaimed[mg] = true;\r\n\t\t\t\t\tminiGameAirdropWinner[mg] = msg.sender;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//update last mini game checked \r\n\t\t\tuserLastMiniGameChecked[_user] = userLastMiniGameInteractedWith[_user];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateUserBalance(address _user) internal {\r\n\t\tcheckDivs(_user);\r\n\t\tcheckPrizes(_user);\r\n\t}\r\n\r\n\tfunction miniGameStart() internal {\r\n\t\trequire (cycleOver == false, \"the cycle cannot be over\");\r\n\t\t\r\n\t\tminiGameCount++;\r\n\t\tminiGameStartTime[miniGameCount] = now;\r\n\t\t//set up special case for correct token range on first minigame \r\n\t\tif (tokenSupply != 0) {\r\n\t\t\tminiGameTokenRangeMin[miniGameCount] = tokenSupply + 1;\r\n\t\t} else {\r\n\t\t\tminiGameTokenRangeMin[miniGameCount] = 0;\r\n\t\t}\r\n\t\t//genreate tokens and update accounting \r\n\t\tminiGameTokens[miniGameCount] = generateTokens();\r\n\t\tminiGameTokensLeft[miniGameCount] = miniGameTokens[miniGameCount];\r\n\t\tminiGameTokenRangeMax[miniGameCount] = tokenSupply;\r\n\t\t//increment token price after 1st minigame \r\n\t\tif (miniGameCount > 1) {\r\n\t\t\ttokenPrice += tokenPriceIncrement;\r\n\t\t}\r\n\t\t//award prizes and start new round if current round is complete \r\n\t\tif (miniGameCount % miniGamesPerRound == 0 && miniGameCount > 1) {\r\n\t\t\tawardRoundPrize();\r\n\t\t\troundStart();\r\n\t\t\ttokenPrice = 0.001 ether + 0.0005 ether * roundCount.sub(1);\r\n\t\t}\r\n\t\t//award prize if cycle is complete \r\n\t\tif (miniGameCount % (miniGamesPerCycle + 1) == 0 && miniGameCount > 1) {\r\n\t\t\tawardCyclePrize();\r\n\t\t}\r\n\r\n\t\temit newMinigameStarted(miniGameCount, miniGameTokens[miniGameCount], \"new minigame started\");\r\n\t}\r\n\r\n\tfunction roundStart() internal {\r\n\t\trequire (cycleOver == false, \"the cycle cannot be over\");\r\n\r\n\t\troundCount++;\r\n\t\troundStartTime[roundCount] = now;\r\n\t\t//set up special case for correct token range on first round \r\n\t\tif (tokenSupply != 0) {\r\n\t\t\troundTokenRangeMin[roundCount] = miniGameTokenRangeMax[miniGameCount.sub(1)] + 1;\r\n\t\t} else {\r\n\t\t\troundTokenRangeMin[roundCount] = 0;\r\n\t\t}\r\n\t\t//log max only when round is complete \r\n\t\tif (roundCount >= 2) {\r\n\t\t\troundTokenRangeMax[roundCount.sub(1)] = miniGameTokenRangeMax[miniGameCount.sub(1)];\r\n\t\t\troundTokens[roundCount.sub(1)] = tokenSupply.sub(roundTokenRangeMin[roundCount.sub(1)]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction cycleStart() internal {\r\n\t\trequire (cycleOver == false, \"the cycle cannot be over\");\r\n\r\n\t\tcycleCount++;\r\n\t\tcycleStartTime = now;\r\n\t}\r\n\r\n\tfunction generateTokens() internal returns(uint256 _tokens) {\r\n\t\tbytes32 hash = keccak256(abi.encodePacked(salt, hashA, hashB));\r\n\t\tuint256 randTokens = uint256(hash).mod(minTokensPerMiniGame);\r\n    \tuint256 newMinGameTokens = randTokens + minTokensPerMiniGame;\r\n\t\ttokenSupply += newMinGameTokens;\r\n\t\tsalt++;\r\n\r\n\t\treturn newMinGameTokens;\r\n\t}\r\n\r\n\tfunction generateSeedA() internal {\r\n\t\trequire (miniGameProcessing == false || miniGameProcessing == true && block.number > miniGameProcessingBegun + 256, \"seed A cannot be regenerated right now\");\r\n\t\trequire (miniGameTokensLeft[miniGameCount] == 0 || earlyResolveACalled == true, \"active tokens remain in this minigame\");\r\n\t\t\r\n\t\tminiGameProcessing = true;\r\n\t\tminiGameProcessingBegun = block.number;\r\n\t\t//generate seed \r\n\t\thashA = blockhash(miniGameProcessingBegun - 1);\r\n\t\t//log end times\r\n\t\tif (miniGameCount > 1) {\r\n\t\t\tminiGameEndTime[miniGameCount] = now;\r\n\t\t}\r\n\t\tif (miniGameCount % miniGamesPerRound == 0) {\r\n\t\t\troundEndTime[roundCount] = now;\r\n\t\t}\r\n\t\t//award processing bounty\r\n\t\tif (miniGameSeedAawarded[miniGameCount] == false) {\r\n\t\t\tuserBalance[msg.sender] += seedAreward;\r\n\t\t\tminiGameSeedAawarded[miniGameCount] = true;\r\n\t\t}\r\n\t\tsalt++;\r\n\r\n\t\temit processingStarted(msg.sender, miniGameCount, block.number, \"processing started\");\r\n\t}\r\n\r\n\tfunction generateSeedB() internal {\r\n\t\t//gererate seed \r\n\t\thashB = blockhash(miniGameProcessingBegun + RNGblockDelay);\r\n\t\t//awared prizes \r\n\t\tawardMiniGamePrize();\r\n\t\tawardMiniGameAirdrop();\r\n\t\t//award processing bounty \r\n\t\tif (miniGameSeedBawarded[miniGameCount] == false) {\r\n\t\t\tuserBalance[msg.sender] += seedBreward;\r\n\t\t\tminiGameSeedBawarded[miniGameCount] = true;\r\n\t\t}\r\n\t\t//start next minigame\r\n\t\tminiGameStart();\r\n\t\tminiGameProcessing = false;\r\n\t\tsalt++;\r\n\r\n\t\temit processingFinished(msg.sender, miniGameCount, block.number, \"processing finished\");\r\n\t}\r\n\r\n\tfunction awardMiniGamePrize() internal {\r\n\t\tbytes32 hash = keccak256(abi.encodePacked(salt, hashA, hashB));\r\n\t    uint256 winningNumber = uint256(hash).mod(miniGameTokens[miniGameCount].sub(miniGameTokensLeft[miniGameCount]));\r\n\t    miniGamePrizeNumber[miniGameCount] = winningNumber + miniGameTokenRangeMin[miniGameCount];\r\n\t    miniGamePrizePot[miniGameCount] = miniGamePrizePot[miniGameCount].sub(seedAreward).sub(seedBreward);\r\n\t    salt++;\r\n\r\n\t    emit miniGamePrizeAwarded(miniGameCount, winningNumber, miniGamePrizePot[miniGameCount], \"minigame prize awarded\");\r\n\t}\r\n\r\n\tfunction awardMiniGameAirdrop() internal {\r\n\t\tbytes32 hash = keccak256(abi.encodePacked(salt, hashA, hashB));\r\n\t    uint256 winningNumber = uint256(hash).mod(miniGameTokens[miniGameCount].sub(miniGameTokensLeft[miniGameCount]));\r\n\t    miniGameAirdropNumber[miniGameCount] = winningNumber + miniGameTokenRangeMin[miniGameCount];\r\n\t    salt++;\r\n\r\n\t    emit miniGameAirdropAwarded(miniGameCount, winningNumber, miniGameAirdropPot[miniGameCount], \"minigame airdrop awarded\");\r\n\t}\r\n\r\n\tfunction awardRoundPrize() internal {\r\n\t\tbytes32 hash = keccak256(abi.encodePacked(salt, hashA, hashB));\r\n\t\tuint256 currentRoundTokens;\r\n\t\tif (miniGameCount > 1) {\r\n\t\t\tcurrentRoundTokens = miniGameTokenRangeMax[miniGameCount.sub(1)].sub(roundTokenRangeMin[roundCount]);\r\n\t\t//handles edge case of early resolve during the first minigame \r\n\t\t} else if (miniGameCount == 1) {\r\n\t\t\tcurrentRoundTokens = miniGameTokensActive[1];\r\n\t\t}\r\n\t    uint256 winningNumber = uint256(hash).mod(currentRoundTokens);\r\n\t    roundPrizeNumber[roundCount] = winningNumber + roundTokenRangeMin[roundCount];\r\n\t    //calculate round prize here \r\n\t    uint256 roundPrize = cycleProgressivePot.mul(roundPotRate).div(100);\r\n\t\tuint256 adminShare = cycleProgressivePot.mul(4).div(100);\r\n\t\tfoundationBalance += adminShare;\r\n\t    roundPrizePot[roundCount] = roundPrize;\r\n\t    cycleProgressivePot = roundPrize;\r\n\t    narrowRoundPrize(roundCount);\r\n\t    salt++;\r\n\r\n\t\temit roundPrizeAwarded(roundCount, winningNumber, roundPrize, \"round prize awarded\");\r\n\t}\r\n\r\n\tfunction awardCyclePrize() internal {\r\n\t\tbytes32 hash = keccak256(abi.encodePacked(salt, hashA, hashB));\r\n\t    uint256 winningNumber;\r\n\t    if (miniGameCount > 1) {\r\n\t    \twinningNumber = uint256(hash).mod(miniGameTokenRangeMax[miniGameCount - 1]);\r\n\t    //handles edge case of early resolve during the first minigame \r\n\t    } else if (miniGameCount == 1) {\r\n\t    \twinningNumber = uint256(hash).mod(miniGameTokensActive[1]);\r\n\t    }\r\n\t    cyclePrizeWinningNumber = winningNumber;\r\n\t    gameActive = false;\r\n\t    cycleEnded = now;\r\n\t    cycleOver = true;\r\n\t    narrowCyclePrize();\r\n\t    salt++;\r\n\r\n\t\temit cyclePrizeAwarded(winningNumber, cycleProgressivePot, \"cycle prize awarded\");\r\n\t}\r\n\r\n\tfunction resolveCycle() internal {\r\n\t\t//generate hashB here in instead of calling generateSeedB\r\n\t\thashB = blockhash(miniGameProcessingBegun + RNGblockDelay);\r\n\t\t//award prizes \r\n\t\tawardMiniGamePrize();\r\n\t\tawardMiniGameAirdrop();\r\n\t\tawardRoundPrize();\r\n\t\tawardCyclePrize();\r\n\t\t//close game\r\n\t\tminiGameProcessing = false;\r\n\t\tgameActive = false;\r\n\t}\r\n\r\n\t//narrows down the token range of a round to a specific miniGame\r\n\t//reduces the search space on user prize updates \r\n\tfunction narrowRoundPrize(uint256 _ID) internal returns(uint256 _miniGameID) {\r\n\t\t//set up local accounting\r\n\t\tuint256 miniGameRangeMin; \r\n\t\tuint256 miniGameRangeMax;\r\n\t\tif (_ID == 1) {\r\n\t\t\tminiGameRangeMin = 1;\r\n\t\t\tminiGameRangeMax = miniGamesPerRound;\r\n\t\t} else if (_ID >= 2) {\r\n\t\t\tminiGameRangeMin = _ID.mul(miniGamesPerRound);\r\n\t\t\tminiGameRangeMax = miniGameRangeMin + miniGamesPerRound - 1;\r\n\t\t}\t\r\n\t\t//loop through each minigame to check prize number\r\n\t\t//log globaly so this only needs to be called once per prize \r\n\t    for (uint256 i = miniGameRangeMin; i <= miniGameRangeMax; i++) {\r\n\t\t    if (roundPrizeNumber[_ID] >= miniGameTokenRangeMin[i] && roundPrizeNumber[_ID] <= miniGameTokenRangeMax[i]) {\r\n\t        roundPrizeInMinigame[_ID] = i;\r\n\t        roundPrizeTokenRangeIdentified[_ID] = true;\r\n\t        return roundPrizeInMinigame[_ID];\r\n\t        break;\r\n\t\t    }\r\n\t    }\t\r\n\t}\r\n\r\n\t//narrows down the token range of a round to a specific miniGame\r\n\t//reduces the search space on user prize updates \r\n\tfunction narrowCyclePrize() internal returns(uint256 _miniGameID) {\r\n\t\t//first identify round \r\n\t    for (uint256 i = 1; i <= roundCount; i++) {\r\n\t      if (cyclePrizeWinningNumber >= roundTokenRangeMin[i] && cyclePrizeWinningNumber <= roundTokenRangeMax[i]) {\r\n\t        cyclePrizeInRound = i;\r\n\t        break;\r\n\t      }\r\n\t    }\r\n\t    //set up minigame local accounting \r\n\t    uint256 miniGameRangeMin; \r\n\t\tuint256 miniGameRangeMax;\r\n\t\tuint256 _ID = cyclePrizeInRound;\r\n\t\tif (_ID == 1) {\r\n\t\t\tminiGameRangeMin = 1;\r\n\t\t\tminiGameRangeMax = miniGamesPerRound;\r\n\t\t} else if (_ID >= 2) {\r\n\t\t\tminiGameRangeMin = _ID.mul(miniGamesPerRound);\r\n\t\t\tminiGameRangeMax = miniGameRangeMin + miniGamesPerRound - 1;\r\n\t\t}\t\r\n\t\t//loop through each minigame to check prize number\r\n\t\t//log globaly so this only needs to be called once per prize  \r\n\t    for (i = miniGameRangeMin; i <= miniGameRangeMax; i++) {\r\n\t\t\tif (cyclePrizeWinningNumber >= miniGameTokenRangeMin[i] && cyclePrizeWinningNumber <= miniGameTokenRangeMax[i]) {\r\n\t\t\t\tcyclePrizeInMinigame = i;\r\n\t\t\t\tcyclePrizeTokenRangeIdentified = true;\r\n\t\t\t\treturn cyclePrizeInMinigame;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t    }\t\r\n\t}\r\n\r\n\t//helper function for up to date front end balances without state change\r\n\tfunction checkDivsMgView(address _user) internal view returns(uint256 _divs) {\r\n\t\t//set up local shorthand\r\n\t\tuint256 _mg = userLastMiniGameChecked[_user];\r\n\t\tuint256 mgShare = userShareMiniGame[_user][_mg];\r\n\t\tuint256 mgTotal = userDivsMiniGameTotal[_user][_mg];\r\n\t\tuint256 mgUnclaimed = userDivsMiniGameUnclaimed[_user][_mg];\r\n\t\t//calculate minigame divs \r\n\t\tmgShare = userMiniGameTokens[_user][_mg].mul(10 ** (precisionFactor + 1)).div(miniGameTokens[_mg] + 5).div(10);\r\n\t    mgTotal = miniGameDivs[_mg].mul(mgShare).div(10 ** precisionFactor);\r\n\t    mgUnclaimed = mgTotal.sub(userDivsMiniGameClaimed[_user][_mg]);\r\n\r\n\t    return mgUnclaimed;\r\n\t}\r\n\t\r\n\t//helper function for up to date front end balances without state change\r\n\tfunction checkDivsRndView(address _user) internal view returns(uint256 _divs) {\r\n\t\t//set up local shorthand\r\n\t\tuint256 _rnd = userLastRoundChecked[_user];\r\n\t\tuint256 rndShare = userShareRound[_user][_rnd];\r\n\t\tuint256 rndTotal = userDivsRoundTotal[_user][_rnd];\r\n\t\tuint256 rndUnclaimed = userDivsRoundUnclaimed[_user][_rnd];\r\n        //calculate round divs \r\n\t\trndShare = userRoundTokens[_user][_rnd].mul(10 ** (precisionFactor + 1)).div(roundTokensActive[_rnd] + 5).div(10);\r\n\t    rndTotal = roundDivs[_rnd].mul(rndShare).div(10 ** precisionFactor);\r\n\t    rndUnclaimed = rndTotal.sub(userDivsRoundClaimed[_user][_rnd]);\r\n\r\n\t    return rndUnclaimed;\r\n\t}\r\n\r\n\t//helper function for up to date front end balances without state change\r\n\tfunction checkPrizesView(address _user) internal view returns(uint256 _prizes) {\r\n\t\t//local accounting\r\n\t\tuint256 prizeValue;\r\n\t\t//push cycle prizes to persistent storage\r\n\t\tif (cycleOver == true && userCycleChecked[_user] == false) {\r\n\t\t\t//get minigame cycle prize was in \r\n\t\t\tuint256 mg;\r\n\t\t\tif (cyclePrizeTokenRangeIdentified == true) {\r\n\t\t\t\tmg = cyclePrizeInMinigame;\r\n\t\t\t} else {\r\n\t\t\t\tnarrowCyclePrizeView();\r\n\t\t\t\tmg = cyclePrizeInMinigame;\r\n\t\t\t}\r\n\t\t\t//check if user won cycle prize \r\n\t\t\tif (cylcePrizeClaimed == false && userMiniGameTokensMax[_user][mg].length > 0) {\r\n\t\t\t\t//check if user won minigame \r\n\t\t\t\t//loop iterations bounded to a max of 10 on buy()\r\n\t\t\t\tfor (uint256 i = 0; i < userMiniGameTokensMin[_user][mg].length; i++) {\r\n\t\t\t\t\tif (cyclePrizeWinningNumber >= userMiniGameTokensMin[_user][mg][i] && cyclePrizeWinningNumber <= userMiniGameTokensMax[_user][mg][i]) {\r\n\t\t\t\t\t\tprizeValue += cycleProgressivePot;\t\t\t\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//push round prizes to persistent storage\r\n\t\tif (userLastRoundChecked[_user] < userLastRoundInteractedWith[_user] && roundCount > userLastRoundInteractedWith[_user]) {\r\n\t\t\t//get minigame round prize was in \r\n\t\t\tuint256 mgp;\r\n\t\t\tuint256 _ID = userLastRoundChecked[_user];\r\n\t\t\tif (roundPrizeTokenRangeIdentified[_ID] == true) {\r\n\t\t\t\tmgp = roundPrizeInMinigame[_ID];\r\n\t\t\t} else {\r\n\t\t\t\tnarrowRoundPrizeView(_ID);\r\n\t\t\t\tmgp = roundPrizeInMinigame[_ID];\r\n\t\t\t}\r\n\t\t\t//check if user won round prize\r\n\t\t\tfor (i = 0; i < userMiniGameTokensMin[_user][mgp].length; i++) {\r\n\t\t\t\tif (roundPrizeNumber[_ID] >= userMiniGameTokensMin[_user][mgp][i] && roundPrizeNumber[_ID] <= userMiniGameTokensMax[_user][mgp][i]) {\r\n\t\t\t\t\tprizeValue += roundPrizePot[mgp];\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//push minigame prizes to persistent storage\r\n\t\tif (userLastMiniGameChecked[_user] < userLastMiniGameInteractedWith[_user] && miniGameCount > userLastMiniGameInteractedWith[_user]) {\r\n\t\t\t//check if user won minigame \r\n\t\t\tmg = userLastMiniGameInteractedWith[_user];\r\n\t\t\tfor (i = 0; i < userMiniGameTokensMin[_user][mg].length; i++) {\r\n\t\t\t\tif (miniGamePrizeNumber[mg] >= userMiniGameTokensMin[_user][mg][i] && miniGamePrizeNumber[mg] <= userMiniGameTokensMax[_user][mg][i]) {\r\n\t\t\t\t\tprizeValue += miniGamePrizePot[mg];\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//check if user won airdrop\r\n\t\t\tfor (i = 0; i < userMiniGameTokensMin[_user][mg].length; i++) {\r\n\t\t\t\tif (miniGameAirdropNumber[mg] >= userMiniGameTokensMin[_user][mg][i] && miniGameAirdropNumber[mg] <= userMiniGameTokensMax[_user][mg][i]) {\r\n\t\t\t\t\tprizeValue += miniGameAirdropPot[mg];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn prizeValue;\r\n\t}\r\n\r\n\t//helper function for up to date front end balances without state change\r\n\tfunction narrowRoundPrizeView(uint256 _ID) internal view returns(uint256 _miniGameID) {\r\n\t\t//set up local accounting\r\n\t\tuint256 winningNumber = roundPrizeNumber[_ID];\r\n\t\tuint256 miniGameRangeMin; \r\n\t\tuint256 miniGameRangeMax;\r\n\t\tif (_ID == 1) {\r\n\t\t\tminiGameRangeMin = 1;\r\n\t\t\tminiGameRangeMax = miniGamesPerRound;\r\n\t\t} else if (_ID >= 2) {\r\n\t\t\tminiGameRangeMin = _ID.mul(miniGamesPerRound);\r\n\t\t\tminiGameRangeMax = miniGameRangeMin + miniGamesPerRound - 1;\r\n\t\t}\t\r\n\t\t//loop through each minigame to check prize number\r\n\t\t//log globaly so this only needs to be called once per prize \r\n\t    for (uint256 i = miniGameRangeMin; i <= miniGameRangeMax; i++) {\r\n\t\t\tif (winningNumber >= miniGameTokenRangeMin[i] && winningNumber <= miniGameTokenRangeMax[i]) {\r\n\t\t\t\treturn i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t    }\t\t\r\n\t}\r\n\r\n\t//helper function for up to date front end balances without state change\r\n\tfunction narrowCyclePrizeView() internal view returns(uint256 _miniGameID) {\r\n\t\t//set up local accounting\r\n\t\tuint256 winningNumber = cyclePrizeWinningNumber;\r\n\t\tuint256 rnd;\r\n\t\t//first identify round \r\n\t    for (uint256 i = 1; i <= roundCount; i++) {\r\n\t\t\tif (winningNumber >= roundTokenRangeMin[i] && winningNumber <= roundTokenRangeMax[i]) {\r\n\t\t\t\trnd = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t    }\r\n\t    //set up minigame local accounting \r\n\t    uint256 miniGameRangeMin; \r\n\t\t\tuint256 miniGameRangeMax;\r\n\t\t\tuint256 _ID = rnd;\r\n\t\t\tif (_ID == 1) {\r\n\t\t\t\tminiGameRangeMin = 1;\r\n\t\t\t\tminiGameRangeMax = miniGamesPerRound;\r\n\t\t\t} else if (_ID >= 2) {\r\n\t\t\t\tminiGameRangeMin = _ID.mul(miniGamesPerRound);\r\n\t\t\t\tminiGameRangeMax = miniGameRangeMin + miniGamesPerRound - 1;\r\n\t\t\t}\t\r\n\t\t\t//loop through each minigame to check prize number\r\n\t\t\t//log globaly so this only needs to be called once per prize  \r\n\t    for (i = miniGameRangeMin; i <= miniGameRangeMax; i++) {\r\n\t\t\tif (winningNumber >= miniGameTokenRangeMin[i] && winningNumber <= miniGameTokenRangeMax[i]) {\r\n\t\t\t\treturn i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t    }\t\t\t\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceIncrement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cycleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miniGamesPerCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyResolveACalled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cycleActiveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundPrizePot\",\"outputs\":[{\"name\":\"_rndPrize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedBreward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGamePrizeClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameAirdropPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"},{\"name\":\"_volume\",\"type\":\"uint256\"},{\"name\":\"_totalBuys\",\"type\":\"uint256\"},{\"name\":\"_totalUsers\",\"type\":\"uint256\"},{\"name\":\"_tokenSupply\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cyclePrizeWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cylcePrizeClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTokensPerMiniGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundTokensActive\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cycleCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cyclePrizeWinningNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cycleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userOddsRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miniGameInfo\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_miniGameTokens\",\"type\":\"uint256\"},{\"name\":\"_miniGameTokensLeft\",\"type\":\"uint256\"},{\"name\":\"_miniGamePrizePot\",\"type\":\"uint256\"},{\"name\":\"_miniGameAirdropPot\",\"type\":\"uint256\"},{\"name\":\"_miniGameStartTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqueAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userOddsMiniGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameSeedAawarded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedAreward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cycleInfo\",\"outputs\":[{\"name\":\"_cycleComplete\",\"type\":\"bool\"},{\"name\":\"_currentRound\",\"type\":\"uint256\"},{\"name\":\"_currentMinigame\",\"type\":\"uint256\"},{\"name\":\"_tokenSupply\",\"type\":\"uint256\"},{\"name\":\"_progressivePot\",\"type\":\"uint256\"},{\"name\":\"_prizeClaimed\",\"type\":\"bool\"},{\"name\":\"_winningNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miniGameCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miniGamesPerRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMiniGameTokensMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundPotRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminBank\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameSeedBawarded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundDivsClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserDivsAvailable\",\"outputs\":[{\"name\":\"_userDivsAvailable\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cycleProgressivePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPrizePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMiniGameTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBuys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMiniGameTokensMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"zeroOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPrizeClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameTokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"earlyResolveA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMinigamePrizePot\",\"outputs\":[{\"name\":\"_mgPrize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundTokenRangeMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameTokenRangeMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"_contractBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGamePrizePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGamePrizeWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getValueOfRemainingTokens\",\"outputs\":[{\"name\":\"_tokenValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameDivsClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cyclePrizeTokenRangeIdentified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameTokensActive\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyResolveBCalled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameAirdropNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPrizeInMinigame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cyclePrizeInRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPrizeWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"progressivePotRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameAirdropClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameAirdropWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGamePrizeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPrizeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundInfo\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_roundPrize\",\"type\":\"uint256\"},{\"name\":\"_roundStart\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miniGameProcessingBegun\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"earlyResolveB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miniGameAirdropRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cycleOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameTokenRangeMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRoundTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"foundationWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cyclePrizeInMinigame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPrizeTokenRangeIdentified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miniGameProcessing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userOddsCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miniGamePotRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adminWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miniGameDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundTokenRangeMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"knownUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_adminBank\",\"type\":\"address\"},{\"name\":\"_foundationFund\",\"type\":\"address\"},{\"name\":\"_adminTwo\",\"type\":\"address\"},{\"name\":\"_adminThree\",\"type\":\"address\"},{\"name\":\"_adminFour\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"adminWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"cycleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"adminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_pot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"resolvedEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"processingRestarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"contractDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokensBought\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_miniGameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"userBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"userReinvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"userWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_miniGameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"processingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_miniGameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"processingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_miniGameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"newMinigameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_miniGameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winningNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"miniGamePrizeAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_miniGameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winningNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"miniGameAirdropAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_roundID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winningNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"roundPrizeAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_winningNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"cyclePrizeAwarded\",\"type\":\"event\"}]","ContractName":"OneHundredthMonkey","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006e226310db63ac3701f657bcc62c153c1aaa3004000000000000000000000000b32bb54cfec824f51e77199248e35d7e3b917ace0000000000000000000000002597afe84661669e590016e51f8fb0059d1ad63e0000000000000000000000002e6c1b2b4f7307dc588c289c9150deeb1a66b73d00000000000000000000000087395d203b35834f79b46cd16313e6027ae4c9d4","Library":"","SwarmSource":"bzzr://50143ac61dbe89807838e6302ec4835ca817e4b37ae79d3aaec7eda5d25f4f2f"}]}