{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n * Базовый контракт, который поддерживает остановку продаж\r\n */\r\n\r\ncontract Haltable is Ownable {\r\n    bool public halted;\r\n\r\n    modifier stopInEmergency {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    /* Модификатор, который вызывается в потомках */\r\n    modifier onlyInEmergency {\r\n        require(halted);\r\n        _;\r\n    }\r\n\r\n    /* Вызов функции прервет продажи, вызывать может только владелец */\r\n    function halt() external onlyOwner {\r\n        halted = true;\r\n    }\r\n\r\n    /* Вызов возвращает режим продаж */\r\n    function unhalt() external onlyOwner onlyInEmergency {\r\n        halted = false;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\nuint256 public totalSupply;\r\nfunction balanceOf(address who) constant returns (uint256);\r\nfunction transfer(address to, uint256 value) returns (bool);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * Интерфейс контракта токена\r\n */\r\n\r\ncontract ImpToken is ERC20Basic {\r\n    function decimals() public returns (uint) {}\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/* Контракт продаж */\r\n\r\ncontract Sale is Haltable {\r\n    using SafeMath for uint;\r\n\r\n    /* Токен, который продаем */\r\n    ImpToken public impToken;\r\n\r\n    /* Собранные средства будут переводиться сюда */\r\n    address public destinationWallet;\r\n\r\n    /*  Сколько сейчас стоит 1 IMP в wei */\r\n    uint public oneImpInWei;\r\n\r\n    /*  Минимальное кол-во токенов, которое можно продать */\r\n    uint public minBuyTokenAmount;\r\n\r\n    /*  Максимальное кол-во токенов, которое можно купить за 1 раз */\r\n    uint public maxBuyTokenAmount;\r\n\r\n    /* Событие покупки токена */\r\n    event Invested(address receiver, uint weiAmount, uint tokenAmount);\r\n\r\n    /* Конструктор */\r\n    function Sale(address _impTokenAddress, address _destinationWallet) {\r\n        require(_impTokenAddress != 0);\r\n        require(_destinationWallet != 0);\r\n\r\n        impToken = ImpToken(_impTokenAddress);\r\n\r\n        destinationWallet = _destinationWallet;\r\n    }\r\n\r\n    /**\r\n     * Fallback функция вызывающаяся при переводе эфира\r\n     */\r\n    function() payable stopInEmergency {\r\n        uint weiAmount = msg.value;\r\n        address receiver = msg.sender;\r\n\r\n        uint tokenMultiplier = 10 ** impToken.decimals();\r\n        uint tokenAmount = weiAmount.mul(tokenMultiplier).div(oneImpInWei);\r\n\r\n        require(tokenAmount > 0);\r\n\r\n        require(tokenAmount >= minBuyTokenAmount && tokenAmount <= maxBuyTokenAmount);\r\n\r\n        // Сколько осталось токенов на контракте продаж\r\n        uint tokensLeft = getTokensLeft();\r\n\r\n        require(tokensLeft > 0);\r\n\r\n        require(tokenAmount <= tokensLeft);\r\n\r\n        // Переводим токены инвестору\r\n        assignTokens(receiver, tokenAmount);\r\n\r\n        // Шлем на кошелёк эфир\r\n        destinationWallet.transfer(weiAmount);\r\n\r\n        // Вызываем событие\r\n        Invested(receiver, weiAmount, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * Адрес кошелька для сбора средств\r\n     */\r\n    function setDestinationWallet(address destinationAddress) external onlyOwner {\r\n        destinationWallet = destinationAddress;\r\n    }\r\n\r\n    /**\r\n     *  Минимальное кол-во токенов, которое можно продать\r\n     */\r\n    function setMinBuyTokenAmount(uint value) external onlyOwner {\r\n        minBuyTokenAmount = value;\r\n    }\r\n\r\n    /**\r\n     *  Максимальное кол-во токенов, которое можно продать\r\n     */\r\n    function setMaxBuyTokenAmount(uint value) external onlyOwner {\r\n        maxBuyTokenAmount = value;\r\n    }\r\n\r\n    /**\r\n     * Функция, которая задает текущий курс ETH в центах\r\n     */\r\n    function setOneImpInWei(uint value) external onlyOwner {\r\n        require(value > 0);\r\n\r\n        oneImpInWei = value;\r\n    }\r\n\r\n    /**\r\n     * Перевод токенов покупателю\r\n     */\r\n    function assignTokens(address receiver, uint tokenAmount) private {\r\n        impToken.transfer(receiver, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * Возвращает кол-во нераспроданных токенов\r\n     */\r\n    function getTokensLeft() public constant returns (uint) {\r\n        return impToken.balanceOf(address(this));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"destinationAddress\",\"type\":\"address\"}],\"name\":\"setDestinationWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuyTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"impToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destinationWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBuyTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinBuyTokenAmount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyTokenAmount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneImpInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setOneImpInWei\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_impTokenAddress\",\"type\":\"address\"},{\"name\":\"_destinationWallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Sale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"00000000000000000000000048ff53777f747cfb694101222a944de070c15d360000000000000000000000007a50e3210ba376c08f920f12d7441f37a20ee0e5","Library":"","SwarmSource":"bzzr://24d0df881b72a17da705ea3310d782493e7305bb2424ea7d2e07544ccfd8dbb7"}]}