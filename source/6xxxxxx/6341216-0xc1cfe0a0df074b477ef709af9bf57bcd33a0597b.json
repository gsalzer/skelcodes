{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n * Released under the MIT license.\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\r\n*/\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n * Released under the MIT license.\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\r\n*/\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20Interface.sol\r\n\r\n/**\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n * Released under the MIT license.\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\r\n*/\r\n\r\n/**\r\n * @title \r\n * @dev \r\n */\r\ncontract ERC20Interface {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20Standard.sol\r\n\r\n/**\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n * Released under the MIT license.\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\r\n*/\r\n\r\n\r\n\r\n/**\r\n * @title \r\n * @dev \r\n */\r\ncontract ERC20Standard is ERC20Interface {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) external returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * \r\n   * To avoid this issue, allowances are only allowed to be changed between zero and non-zero.\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) external returns (bool) {\r\n    require(allowed[msg.sender][_spender] == 0 || _value == 0);\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() external view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) external view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) external view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) external returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/ERC223/ERC223Interface.sol\r\n\r\n/**\r\n * Released under the MIT license.\r\n * https://github.com/Dexaran/ERC223-token-standard/blob/master/LICENSE\r\n*/\r\n\r\ncontract ERC223Interface {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value, bytes data) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ERC223/ERC223ReceivingContract.sol\r\n\r\n/**\r\n * Released under the MIT license.\r\n * https://github.com/Dexaran/ERC223-token-standard/blob/master/LICENSE\r\n*/\r\n\r\n\r\n/**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\n \r\ncontract ERC223ReceivingContract { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n// File: contracts/token/ERC223/ERC223Standard.sol\r\n\r\n/**\r\n * Released under the MIT license.\r\n * https://github.com/Dexaran/ERC223-token-standard/blob/master/LICENSE\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Reference implementation of the ERC223 standard token.\r\n */\r\ncontract ERC223Standard is ERC223Interface, ERC20Standard {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint256 _value, bytes _data) external returns(bool){\r\n        // Standard function transfer similar to ERC20 transfer with no _data .\r\n        // Added due to backwards compatibility reasons .\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) external returns(bool){\r\n        uint256 codeLength;\r\n        bytes memory empty;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n \r\n}\r\n\r\n// File: contracts/token/extentions/MintableToken.sol\r\n\r\n/**\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n * Released under the MIT license.\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is ERC223Standard, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/DAICOVO/TokenController.sol\r\n\r\n/// @title A controller that manages permissions to mint specific ERC20/ERC223 token.\r\n/// @author ICOVO AG\r\n/// @dev The target must be a mintable ERC20/ERC223 and also be set its ownership\r\n///      to this controller. It changes permissions in each 3 phases - before the\r\n///      token-sale, during the token-sale and after the token-sale.\r\n///     \r\n///      Before the token-sale (State = Init):\r\n///       Only the owner of this contract has a permission to mint tokens.\r\n///      During the token-sale (State = Tokensale):\r\n///       Only the token-sale contract has a permission to mint tokens.\r\n///      After the token-sale (State = Public):\r\n///       Nobody has any permissions. Will be expand in the future:\r\ncontract TokenController is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    MintableToken public targetToken;\r\n    address public votingAddr;\r\n    address public tokensaleManagerAddr;\r\n\r\n    State public state;\r\n\r\n    enum State {\r\n        Init,\r\n        Tokensale,\r\n        Public\r\n    }\r\n\r\n    /// @dev The deployer must change the ownership of the target token to this contract.\r\n    /// @param _targetToken : The target token this contract manage the rights to mint.\r\n    /// @return \r\n    constructor (\r\n        MintableToken _targetToken\r\n    ) public {\r\n        targetToken = MintableToken(_targetToken);\r\n        state = State.Init;\r\n    }\r\n\r\n    /// @dev Mint and distribute specified amount of tokens to an address.\r\n    /// @param to An address that receive the minted tokens.\r\n    /// @param amount Amount to mint.\r\n    /// @return True if the distribution is successful, revert otherwise.\r\n    function mint (address to, uint256 amount) external returns (bool) {\r\n        /*\r\n          being called from voting contract will be available in the future\r\n          ex. if (state == State.Public && msg.sender == votingAddr) \r\n        */\r\n\r\n        if ((state == State.Init && msg.sender == owner) ||\r\n            (state == State.Tokensale && msg.sender == tokensaleManagerAddr)) {\r\n            return targetToken.mint(to, amount);\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    /// @dev Change the phase from \"Init\" to \"Tokensale\".\r\n    /// @param _tokensaleManagerAddr A contract address of token-sale.\r\n    /// @return True if the change of the phase is successful, revert otherwise.\r\n    function openTokensale (address _tokensaleManagerAddr)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        /* check if the owner of the target token is set to this contract */\r\n        require(MintableToken(targetToken).owner() == address(this));\r\n        require(state == State.Init);\r\n        require(_tokensaleManagerAddr != address(0x0));\r\n\r\n        tokensaleManagerAddr = _tokensaleManagerAddr;\r\n        state = State.Tokensale;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Change the phase from \"Tokensale\" to \"Public\". This function will be\r\n    ///      cahnged in the future to receive an address of voting contract as an\r\n    ///      argument in order to handle the result of minting proposal.\r\n    /// @return True if the change of the phase is successful, revert otherwise.\r\n    function closeTokensale () external returns (bool) {\r\n        require(state == State.Tokensale && msg.sender == tokensaleManagerAddr);\r\n\r\n        state = State.Public;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Check if the state is \"Init\" or not.\r\n    /// @return True if the state is \"Init\", false otherwise.\r\n    function isStateInit () external view returns (bool) {\r\n        return (state == State.Init);\r\n    }\r\n\r\n    /// @dev Check if the state is \"Tokensale\" or not.\r\n    /// @return True if the state is \"Tokensale\", false otherwise.\r\n    function isStateTokensale () external view returns (bool) {\r\n        return (state == State.Tokensale);\r\n    }\r\n\r\n    /// @dev Check if the state is \"Public\" or not.\r\n    /// @return True if the state is \"Public\", false otherwise.\r\n    function isStatePublic () external view returns (bool) {\r\n        return (state == State.Public);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStatePublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeTokensale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensaleManagerAddr\",\"type\":\"address\"}],\"name\":\"openTokensale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensaleManagerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStateTokensale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStateInit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_targetToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenController","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008929af76b0b66d260dd6f80ff813fc958e8ea8ff","Library":"","SwarmSource":"bzzr://5a206a71416381a648e44e1ce4663e5a55cf1d1fd20ee02279645d7b2e784869"}]}