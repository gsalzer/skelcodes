{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// This is the Alethena Share Token. \r\n// To learn more, visit https://github.com/Alethena/Alethena-Shares-Token\r\n// Or contact us at contact@alethena.com\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public master = 0x8fED3492dB590ad34ed42b0F509EB3c9626246Fc;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original 'owner' of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the master to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address _newOwner) public {\r\n        require(msg.sender == master);\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract Claimable is ERC20Basic, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Claim {\r\n        address claimant; // the person who created the claim\r\n        uint256 collateral; // the amount of wei deposited\r\n        uint256 timestamp;  // the timestamp of the block in which the claim was made\r\n    }\r\n\r\n    struct PreClaim {\r\n        bytes32 msghash; // the hash of nonce + address to be claimed\r\n        uint256 timestamp;  // the timestamp of the block in which the preclaim was made\r\n    }\r\n\r\n    /** @param collateralRate Sets the collateral needed per share to file a claim */\r\n    uint256 public collateralRate = 5*10**15 wei;\r\n\r\n    uint256 public claimPeriod = 60*60*24*180; // In seconds ;\r\n    uint256 public preClaimPeriod = 60*60*24; // In seconds ;\r\n\r\n    mapping(address => Claim) public claims; // there can be at most one claim per address, here address is claimed address\r\n    mapping(address => PreClaim) public preClaims; // there can be at most one preclaim per address, here address is claimer\r\n\r\n\r\n    function setClaimParameters(uint256 _collateralRateInWei, uint256 _claimPeriodInDays) public onlyOwner() {\r\n        uint256 claimPeriodInSeconds = _claimPeriodInDays*60*60*24;\r\n        require(_collateralRateInWei > 0);\r\n        require(_claimPeriodInDays > 90); // must be at least 90 days\r\n        collateralRate = _collateralRateInWei;\r\n        claimPeriod = claimPeriodInSeconds;\r\n        emit ClaimParametersChanged(collateralRate, claimPeriod);\r\n    }\r\n\r\n    event ClaimMade(address indexed _lostAddress, address indexed _claimant, uint256 _balance);\r\n    event ClaimPrepared(address indexed _claimer);\r\n    event ClaimCleared(address indexed _lostAddress, uint256 collateral);\r\n    event ClaimDeleted(address indexed _lostAddress, address indexed _claimant, uint256 collateral);\r\n    event ClaimResolved(address indexed _lostAddress, address indexed _claimant, uint256 collateral);\r\n    event ClaimParametersChanged(uint256 _collateralRate, uint256  _claimPeriodInDays);\r\n\r\n\r\n  /** Anyone can declare that the private key to a certain address was lost by calling declareLost\r\n    * providing a deposit/collateral. There are three possibilities of what can happen with the claim:\r\n    * 1) The claim period expires and the claimant can get the deposit and the shares back by calling resolveClaim\r\n    * 2) The \"lost\" private key is used at any time to call clearClaim. In that case, the claim is deleted and\r\n    *    the deposit sent to the shareholder (the owner of the private key). It is recommended to call resolveClaim\r\n    *    whenever someone transfers funds to let claims be resolved automatically when the \"lost\" private key is\r\n    *    used again.\r\n    * 3) The owner deletes the claim and assigns the deposit to the claimant. This is intended to be used to resolve\r\n    *    disputes. Generally, using this function implies that you have to trust the issuer of the tokens to handle\r\n    *    the situation well. As a rule of thumb, the contract owner should assume the owner of the lost address to be the\r\n    *    rightful owner of the deposit.\r\n    * It is highly recommended that the owner observes the claims made and informs the owners of the claimed addresses\r\n    * whenever a claim is made for their address (this of course is only possible if they are known to the owner, e.g.\r\n    * through a shareholder register).\r\n    * To prevent frontrunning attacks, a claim can only be made if the information revealed when calling \"declareLost\"\r\n    * was previously commited using the \"prepareClaim\" function.\r\n    */\r\n\r\n    function prepareClaim(bytes32 _hashedpackage) public{\r\n        preClaims[msg.sender] = PreClaim({\r\n            msghash: _hashedpackage,\r\n            timestamp: block.timestamp\r\n        });\r\n        emit ClaimPrepared(msg.sender);\r\n    }\r\n\r\n    function validateClaim(address _lostAddress, bytes32 _nonce) private view returns (bool){\r\n        PreClaim memory preClaim = preClaims[msg.sender];\r\n        require(preClaim.msghash != 0);\r\n        require(preClaim.timestamp + preClaimPeriod <= block.timestamp);\r\n        require(preClaim.timestamp + 2*preClaimPeriod >= block.timestamp);\r\n        return preClaim.msghash == keccak256(abi.encodePacked(_nonce, msg.sender, _lostAddress));\r\n    }\r\n\r\n    function declareLost(address _lostAddress, bytes32 _nonce) public payable{\r\n        uint256 balance = balanceOf(_lostAddress);\r\n        require(balance > 0);\r\n        require(msg.value >= balance.mul(collateralRate));\r\n        require(claims[_lostAddress].collateral == 0);\r\n        require(validateClaim(_lostAddress, _nonce));\r\n\r\n        claims[_lostAddress] = Claim({\r\n            claimant: msg.sender,\r\n            collateral: msg.value,\r\n            timestamp: block.timestamp\r\n        });\r\n        delete preClaims[msg.sender];\r\n        emit ClaimMade(_lostAddress, msg.sender, balance);\r\n    }\r\n\r\n    function getClaimant(address _lostAddress) public view returns (address){\r\n        return claims[_lostAddress].claimant;\r\n    }\r\n\r\n    function getCollateral(address _lostAddress) public view returns (uint256){\r\n        return claims[_lostAddress].collateral;\r\n    }\r\n\r\n    function getTimeStamp(address _lostAddress) public view returns (uint256){\r\n        return claims[_lostAddress].timestamp;\r\n    }\r\n\r\n    function getPreClaimTimeStamp(address _claimerAddress) public view returns (uint256){\r\n        return preClaims[_claimerAddress].timestamp;\r\n    }\r\n\r\n    function getMsgHash(address _claimerAddress) public view returns (bytes32){\r\n        return preClaims[_claimerAddress].msghash;\r\n    }\r\n\r\n    /**\r\n     * @dev Clears a claim after the key has been found again and assigns the collateral to the \"lost\" address.\r\n     */\r\n    function clearClaim() public returns (uint256){\r\n        uint256 collateral = claims[msg.sender].collateral;\r\n        if (collateral != 0){\r\n            delete claims[msg.sender];\r\n            msg.sender.transfer(collateral);\r\n            emit ClaimCleared(msg.sender, collateral);\r\n            return collateral;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n   /**\r\n    * @dev This function is used to resolve a claim.\r\n    * @dev After waiting period, the tokens on the lost address and collateral can be transferred.\r\n   */\r\n    function resolveClaim(address _lostAddress) public returns (uint256){\r\n        Claim memory claim = claims[_lostAddress];\r\n        require(claim.collateral != 0, \"No claim found\");\r\n        require(claim.claimant == msg.sender);\r\n        require(claim.timestamp + claimPeriod <= block.timestamp);\r\n        address claimant = claim.claimant;\r\n        delete claims[_lostAddress];\r\n        claimant.transfer(claim.collateral);\r\n        internalTransfer(_lostAddress, claimant, balanceOf(_lostAddress));\r\n        emit ClaimResolved(_lostAddress, claimant, claim.collateral);\r\n        return claim.collateral;\r\n    }\r\n\r\n    function internalTransfer(address _from, address _to, uint256 _value) internal;\r\n\r\n     /** @dev This function is to be executed by the owner only in case a dispute needs to be resolved manually. */\r\n    function deleteClaim(address _lostAddress) public onlyOwner(){\r\n        Claim memory claim = claims[_lostAddress];\r\n        require(claim.collateral != 0, \"No claim found\");\r\n        delete claims[_lostAddress];\r\n        claim.claimant.transfer(claim.collateral);\r\n        emit ClaimDeleted(_lostAddress, claim.claimant, claim.collateral);\r\n    }\r\n\r\n}\r\n\r\ncontract AlethenaShares is ERC20, Claimable {\r\n\r\n    string public constant name = \"Alethena Equity\";\r\n    string public constant symbol = \"ALEQ\";\r\n    uint8 public constant decimals = 0; // legally, shares are not divisible\r\n\r\n    using SafeMath for uint256;\r\n\r\n      /** URL where the source code as well as the terms and conditions can be found. */\r\n    string public constant termsAndConditions = \"shares.alethena.com\";\r\n\r\n    mapping(address => uint256) balances;\r\n    uint256 totalSupply_;        // total number of tokenized shares, sum of all balances\r\n    uint256 totalShares_ = 1397188; // total number of outstanding shares, maybe not all tokenized\r\n\r\n    event Mint(address indexed shareholder, uint256 amount, string message);\r\n    event Unmint(uint256 amount, string message);\r\n\r\n  /** @dev Total number of tokens in existence */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n  /** @dev Total number of shares in existence, not necessarily all represented by a token.\r\n    * @dev This could be useful to calculate the total market cap.\r\n    */\r\n    function totalShares() public view returns (uint256) {\r\n        return totalShares_;\r\n    }\r\n\r\n    function setTotalShares(uint256 _newTotalShares) public onlyOwner() {\r\n        require(_newTotalShares >= totalSupply());\r\n        totalShares_ = _newTotalShares;\r\n    }\r\n\r\n  /** Increases the number of the tokenized shares. If the shares are newly issued, the share total also needs to be increased. */\r\n    function mint(address shareholder, uint256 _amount, string _message) public onlyOwner() {\r\n        require(_amount > 0);\r\n        require(totalSupply_.add(_amount) <= totalShares_);\r\n        balances[shareholder] = balances[shareholder].add(_amount);\r\n        totalSupply_ = totalSupply_ + _amount;\r\n        emit Mint(shareholder, _amount, _message);\r\n    }\r\n\r\n/** Decrease the number of the tokenized shares. There are two use-cases for this function:\r\n *  1) a capital decrease with a destruction of the shares, in which case the law requires that the\r\n *     destroyed shares are currently owned by the company.\r\n *  2) a shareholder wants to take shares offline. This can only happen with the agreement of the\r\n *     the company. To do so, the shares must be transferred to the company first, the company call\r\n *     this function and then assigning the untokenized shares back to the shareholder in whatever\r\n *     way the new form (e.g. printed certificate) of the shares requires.\r\n */\r\n    function unmint(uint256 _amount, string _message) public onlyOwner() {\r\n        require(_amount > 0);\r\n        require(_amount <= balanceOf(owner));\r\n        balances[owner] = balances[owner].sub(_amount);\r\n        totalSupply_ = totalSupply_ - _amount;\r\n        emit Unmint(_amount, _message);\r\n    }\r\n\r\n  /** This contract is pausible.  */\r\n    bool public isPaused = false;\r\n\r\n  /** @dev Function to set pause.\r\n   *  This could for example be used in case of a fork of the network, in which case all\r\n   *  \"wrong\" forked contracts should be paused in their respective fork. Deciding which\r\n   *  fork is the \"right\" one is up to the owner of the contract.\r\n   */\r\n    function pause(bool _pause, string _message, address _newAddress, uint256 _fromBlock) public onlyOwner() {\r\n        isPaused = _pause;\r\n        emit Pause(_pause, _message, _newAddress, _fromBlock);\r\n    }\r\n\r\n    event Pause(bool paused, string message, address newAddress, uint256 fromBlock);\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/**\r\nThe next section contains standard ERC20 routines.\r\nMain change: Transfer functions have an additional post function which resolves claims if applicable.\r\n */\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        clearClaim();\r\n        internalTransfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function internalTransfer(address _from, address _to, uint256 _value) internal {\r\n        require(!isPaused);\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        internalTransfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(!isPaused);\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    event Approval(address approver, address spender, uint256 value);\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n        require(!isPaused);\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        require(!isPaused);\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lostAddress\",\"type\":\"address\"}],\"name\":\"getClaimant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lostAddress\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"declareLost\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_claimerAddress\",\"type\":\"address\"}],\"name\":\"getMsgHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lostAddress\",\"type\":\"address\"}],\"name\":\"deleteClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preClaims\",\"outputs\":[{\"name\":\"msghash\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashedpackage\",\"type\":\"bytes32\"}],\"name\":\"prepareClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_claimerAddress\",\"type\":\"address\"}],\"name\":\"getPreClaimTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_collateralRateInWei\",\"type\":\"uint256\"},{\"name\":\"_claimPeriodInDays\",\"type\":\"uint256\"}],\"name\":\"setClaimParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lostAddress\",\"type\":\"address\"}],\"name\":\"resolveClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pause\",\"type\":\"bool\"},{\"name\":\"_message\",\"type\":\"string\"},{\"name\":\"_newAddress\",\"type\":\"address\"},{\"name\":\"_fromBlock\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lostAddress\",\"type\":\"address\"}],\"name\":\"getCollateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"unmint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTotalShares\",\"type\":\"uint256\"}],\"name\":\"setTotalShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claims\",\"outputs\":[{\"name\":\"claimant\",\"type\":\"address\"},{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"shareholder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lostAddress\",\"type\":\"address\"}],\"name\":\"getTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preClaimPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"termsAndConditions\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"shareholder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Unmint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromBlock\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"ClaimMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"ClaimPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_lostAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_collateralRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_claimPeriodInDays\",\"type\":\"uint256\"}],\"name\":\"ClaimParametersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AlethenaShares","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1d17d0aa52b5bb37df3d3c2b7913c06f8e5a717b832d27cc4a22e29e9db7bd95"}]}