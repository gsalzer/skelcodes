{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract Erc20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * @dev (from OpenZeppelin)\r\n */\r\nlibrary LibSafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Safe a * b / c\r\n     */\r\n    function mulDiv(uint256 a, uint256 b, uint256 c) internal pure returns (uint256) {\r\n        uint256 d = mul(a, b);\r\n        return div(d, c);\r\n    }\r\n}\r\n\r\n\r\ncontract OwnedToken {\r\n    using LibSafeMath for uint256;\r\n    \r\n    /**\r\n     * ERC20 info\r\n     */\r\n    string public name = 'Altty';\r\n    string public symbol = 'LTT';\r\n    uint8 public decimals = 18;\r\n    /**\r\n     * Allowence list\r\n     */\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n    /**\r\n     * Count of token at each account\r\n     */\r\n    mapping(address => uint256) private shares;\r\n    /**\r\n     * Total amount\r\n     */\r\n    uint256 private shareCount_;\r\n    /**\r\n     * Owner (main admin)\r\n     */\r\n    address public owner = msg.sender;\r\n    /**\r\n     * List of admins\r\n     */\r\n    mapping(address => bool) public isAdmin;\r\n    /**\r\n     * List of address on hold\r\n     */\r\n    mapping(address => bool) public holded;\r\n\r\n    /**\r\n     * Events\r\n     */\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed owner, uint256 amount);\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Throws if not admin\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner\r\n     * @param newOwner The address to transfer ownership to\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0)); // if omittet addres, default is 0\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    /**\r\n     * Empower/fire admin\r\n     */\r\n    function empowerAdmin(address _user) onlyOwner public {\r\n        isAdmin[_user] = true;\r\n    }\r\n    function fireAdmin(address _user) onlyOwner public {\r\n        isAdmin[_user] = false;\r\n    }\r\n    /**\r\n     * Hold account\r\n     */\r\n    function hold(address _user) onlyOwner public {\r\n        holded[_user] = true;\r\n    }\r\n    /**\r\n     * Unhold account\r\n     */\r\n    function unhold(address _user) onlyOwner public {\r\n        holded[_user] = false;\r\n    }\r\n    \r\n    /**\r\n     * Edit token info\r\n     */\r\n    function setName(string _name)  onlyOwner public {\r\n        name = _name;\r\n    }\r\n    function setSymbol(string _symbol)  onlyOwner public {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return shareCount_;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param _owner The address to query the the balance of\r\n     * @return An uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return shares[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal transfer tokens from one address to another\r\n     * @dev if adress is zero - mint or destroy tokens\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function shareTransfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n        require(!holded[_from]);\r\n        if(_from == address(0)) {\r\n            emit Mint(_to, _value);\r\n            shareCount_ =shareCount_.add(_value);\r\n        } else {\r\n            require(_value <= shares[_from]);\r\n            shares[_from] = shares[_from].sub(_value);\r\n        }\r\n        if(_to == address(0)) {\r\n            emit Burn(msg.sender, _value);\r\n            shareCount_ =shareCount_.sub(_value);\r\n        } else {\r\n            shares[_to] =shares[_to].add(_value);\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to\r\n     * @param _value The amount to be transferred\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        return shareTransfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        return shareTransfer(_from, _to, _value);\r\n    }\r\n \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw ethereum for a specified address\r\n     * @param _to The address to transfer to\r\n     * @param _value The amount to be transferred\r\n     */\r\n    function withdraw(address _to, uint256 _value) onlyOwner public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= address(this).balance);\r\n        _to.transfer(_value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw token (assets of our contract) for a specified address\r\n     * @param token The address of token for transfer\r\n     * @param _to The address to transfer to\r\n     * @param amount The amount to be transferred\r\n     */\r\n    function withdrawToken(address token, address _to, uint256 amount) onlyOwner public returns (bool) {\r\n        require(token != address(0));\r\n        require(Erc20Basic(token).balanceOf(address(this)) >= amount);\r\n        bool transferOk = Erc20Basic(token).transfer(_to, amount);\r\n        require(transferOk);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TenderToken is OwnedToken {\r\n    // dividends\r\n    uint256 public price = 1 ether;\r\n    uint256 public sellComission = 2900; // 2.9%\r\n    uint256 public buyComission = 2900; // 2.9%\r\n    \r\n    // dividers\r\n    uint256 public priceUnits = 3 ether / 1000000; \r\n    uint256 public sellComissionUnits = 100000;\r\n    uint256 public buyComissionUnits = 100000;\r\n    \r\n    /**\r\n     * Orders structs\r\n     */\r\n    struct SellOrder {\r\n        address user; \r\n        uint256 shareNumber;\r\n    }\r\n    struct BuyOrder {\r\n        address user; \r\n        uint256 amountWei;\r\n    }\r\n    \r\n    /**\r\n     * Current orders list and total amounts in order\r\n     */\r\n    SellOrder[] internal sellOrder;\r\n    BuyOrder[] internal buyOrder;\r\n    uint256 public sellOrderTotal;\r\n    uint256 public buyOrderTotal;\r\n    \r\n\r\n    /**\r\n     * Magic buy-order create\r\n     * NB!!! big gas cost (non standart), see docs\r\n     */\r\n    function() public payable {\r\n        if(!isAdmin[msg.sender]) {\r\n            buyOrder.push(BuyOrder(msg.sender, msg.value));\r\n            buyOrderTotal += msg.value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Magic sell-order create\r\n     */\r\n    function shareTransfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n        if(_to == address(this)) {\r\n            sellOrder.push(SellOrder(msg.sender, _value));\r\n            sellOrderTotal += _value;\r\n        }\r\n        return super.shareTransfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Configurate current price/comissions\r\n     */\r\n    function setPrice(uint256 _price) onlyAdmin public {\r\n        price = _price;\r\n    }\r\n    function setSellComission(uint _sellComission) onlyOwner public {\r\n        sellComission = _sellComission;\r\n    }\r\n    function setBuyComission(uint _buyComission) onlyOwner public {\r\n        buyComission = _buyComission;\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculate default price for selected number of shares\r\n     * @param shareNumber number of shares\r\n     * @return amount\r\n     */\r\n    function shareToWei(uint256 shareNumber) public view returns (uint256) {\r\n        uint256 amountWei = shareNumber.mulDiv(price, priceUnits);\r\n        uint256 comissionWei = amountWei.mulDiv(sellComission, sellComissionUnits);\r\n        return amountWei.sub(comissionWei);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate count of shares what can buy with selected amount for default price\r\n     * @param amountWei amount for buy share\r\n     * @return number of shares\r\n     */\r\n    function weiToShare(uint256 amountWei) public view returns (uint256) {\r\n        uint256 shareNumber = amountWei.mulDiv(priceUnits, price);\r\n        uint256 comissionShare = shareNumber.mulDiv(buyComission, buyComissionUnits);\r\n        return shareNumber.sub(comissionShare);\r\n    }\r\n    \r\n    /**\r\n     * Confirm all buys\r\n     */\r\n    function confirmAllBuys() external onlyAdmin {\r\n        while(buyOrder.length > 0) {\r\n            _confirmOneBuy();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Confirm all sells\r\n     */\r\n    function confirmAllSells() external onlyAdmin {\r\n        while(sellOrder.length > 0) {\r\n            _confirmOneSell();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Confirm one sell/buy (for problems fix)\r\n     */\r\n    function confirmOneBuy() external onlyAdmin {\r\n        if(buyOrder.length > 0) {\r\n            _confirmOneBuy();\r\n        }\r\n    }\r\n    function confirmOneSell() external onlyAdmin {\r\n        _confirmOneSell();\r\n    }\r\n    \r\n    /**\r\n     * Cancel one sell (for problem fix)\r\n     */\r\n    function cancelOneSell() internal {\r\n        uint256 i = sellOrder.length-1;\r\n        shareTransfer(address(this), sellOrder[i].user, sellOrder[i].shareNumber);\r\n        sellOrderTotal -= sellOrder[i].shareNumber;\r\n        delete sellOrder[sellOrder.length-1];\r\n        sellOrder.length--;\r\n    }\r\n    \r\n    /**\r\n     * Internal buy/sell\r\n     */\r\n    function _confirmOneBuy() internal {\r\n        uint256 i = buyOrder.length-1;\r\n        uint256 amountWei = buyOrder[i].amountWei;\r\n        uint256 shareNumber = weiToShare(amountWei);\r\n        address user = buyOrder[i].user;\r\n        shareTransfer(address(0), user, shareNumber);\r\n        buyOrderTotal -= amountWei;\r\n        delete buyOrder[buyOrder.length-1];\r\n        buyOrder.length--;\r\n    }\r\n    function _confirmOneSell() internal {\r\n        uint256 i = sellOrder.length-1;\r\n        uint256 shareNumber = sellOrder[i].shareNumber;\r\n        uint256 amountWei = shareToWei(shareNumber);\r\n        address user = sellOrder[i].user;\r\n        shareTransfer(address(this), address(0), shareNumber);\r\n        sellOrderTotal -= shareNumber;\r\n        user.transfer(amountWei);\r\n        delete sellOrder[sellOrder.length-1];\r\n        sellOrder.length--;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellComissionUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOneBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"shareNumber\",\"type\":\"uint256\"}],\"name\":\"shareToWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellOrderTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"weiToShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"fireAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyComission\",\"type\":\"uint256\"}],\"name\":\"setBuyComission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellComission\",\"type\":\"uint256\"}],\"name\":\"setSellComission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unhold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOneSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellComission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"empowerAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmAllBuys\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyComissionUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyComission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmAllSells\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyOrderTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"}]","ContractName":"TenderToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7533cae6190a5159cf9c6c9b8d114609759f7f0a2385991486a1e17b5875459e"}]}