{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >= 0.4.24 < 0.6.0;\r\n\r\n\r\n/**\r\n * @title Mega Coin for Megabit trading-mining\r\n * @author Willy Lee\r\n * See the manuals.\r\n */\r\n\r\n\r\n/**\r\n * @title ERC20 Standard Interface\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * removed functions : transferFrom, approve, allowance\r\n * removed events : Approval\r\n * Some functions are restricted.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    //function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    //function approve(address spender, uint256 value) external returns (bool);\r\n    //function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    //event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title MegaCoin implementation\r\n * @author Willy Lee\r\n */\r\ncontract MegaCoin is IERC20 {\r\n    //using SafeMath for uint256;   //  unnecessary lib\r\n\r\n    string public name = \"MEGA\";\r\n    string public symbol = \"MEGA\";\r\n    uint8 public decimals = 18;\r\n    \r\n    uint256 _totalSupply;\r\n    mapping(address => uint256) balances;\r\n\r\n    // Admin Address\r\n    address public owner;\r\n    address public team;\r\n    \r\n    // keep reserved coins in vault for each purpose\r\n    enum VaultEnum {mining, mkt, op, team, presale}\r\n    string[] VaultName = [\"mining\", \"mkt\", \"op\", \"team\", \"presale\"];\r\n    mapping(string => uint256) vault;\r\n\r\n    modifier isOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        uint256 discardCoins;    //  burning amount at initial time\r\n\r\n        owner = msg.sender;\r\n        team = 0xB20a2214E60fa99911eb597faa1216DAc006fc29;\r\n        require(owner != team);\r\n\r\n        setVaultBalanceInDecimal(VaultEnum.mining,   10000000000);   //  10 B\r\n        setVaultBalanceInDecimal(VaultEnum.mkt,      1000000000);    //  1 B\r\n        setVaultBalanceInDecimal(VaultEnum.op,       2000000000);    //  2 B\r\n        setVaultBalanceInDecimal(VaultEnum.team,     3000000000);    //  3 B, time lock to 2019-12-22\r\n        setVaultBalanceInDecimal(VaultEnum.presale,  2999645274);    //  2,999,645,274\r\n\r\n        discardCoins = convertToWei(1000354726);            //  1,000,354,726\r\n\r\n        // total must be 20 B\r\n        _totalSupply = \r\n            getVaultBalance(VaultEnum.mining) +\r\n            getVaultBalance(VaultEnum.mkt) +\r\n            getVaultBalance(VaultEnum.op) +\r\n            getVaultBalance(VaultEnum.team) +\r\n            getVaultBalance(VaultEnum.presale) +\r\n            discardCoins;\r\n            \r\n        require(_totalSupply == convertToWei(20000000000));\r\n        \r\n        _totalSupply -= discardCoins;   // delete unnecessary coins;\r\n        balances[owner] = _totalSupply;\r\n\r\n        emit Transfer(address(0), owner, balances[owner]);\r\n    }\r\n    \r\n    /** @dev transfer mining coins to Megabit Exchanges address\r\n     */\r\n    function transferForMining(address to) external isOwner {\r\n        require(to != owner);\r\n        withdrawCoins(VaultName[uint256(VaultEnum.mining)], to);\r\n    }\r\n    \r\n    /** @dev withdraw coins for marketing budget to specified address\r\n     */\r\n    function withdrawForMkt(address to) external isOwner {\r\n        require(to != owner);\r\n        withdrawCoins(VaultName[uint256(VaultEnum.mkt)], to);\r\n    }\r\n    \r\n    /** @dev withdraw coins for maintenance cost to specified address\r\n     */\r\n    function withdrawForOp(address to) external isOwner {\r\n        require(to != owner);\r\n        withdrawCoins(VaultName[uint256(VaultEnum.op)], to);\r\n    }\r\n\r\n    /** @dev withdraw coins for Megabit team to reserved address after locked date\r\n     */\r\n    function withdrawTeamFunds() external isOwner {\r\n        uint256 balance = getVaultBalance(VaultEnum.team);\r\n        require(balance > 0);\r\n\r\n        withdrawCoins(VaultName[uint256(VaultEnum.team)], team);\r\n    }\r\n\r\n    /** @dev transfer sold(pre-sale) coins to specified address\r\n     */\r\n    function transferPresaleCoins(address to, uint256 amount) external isOwner {\r\n        require(to != owner);\r\n        require(balances[owner] >= amount);\r\n        require(getVaultBalance(VaultEnum.presale) >= amount);\r\n        \r\n        balances[owner] -= amount;\r\n        balances[to] += amount;\r\n        vault[VaultName[uint256(VaultEnum.presale)]] -= amount;\r\n\r\n        emit Transfer(owner, to, amount);\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address who) public view returns (uint256) {\r\n        return balances[who];\r\n    }\r\n    \r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        require(msg.sender != to);\r\n        require(msg.sender != owner);   // owner is not free to transfer\r\n        require(to != owner);\r\n        require(value > 0);\r\n        \r\n        require( balances[msg.sender] >= value );\r\n        require( balances[to] + value >= balances[to] );    // prevent overflow\r\n\r\n        if(msg.sender == team) {\r\n            require(now >= 1576940400);     // lock to 2019-12-22\r\n        }\r\n        balances[msg.sender] -= value;\r\n        balances[to] += value;\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    // burn holder's own coins \r\n    function burnCoins(uint256 value) public {\r\n        require(msg.sender != owner);   // owner can't burn any coin\r\n        require(balances[msg.sender] >= value);\r\n        require(_totalSupply >= value);\r\n        \r\n        balances[msg.sender] -= value;\r\n        _totalSupply -= value;\r\n\r\n        emit Transfer(msg.sender, address(0), value);\r\n    }\r\n\r\n    function vaultBalance(string vaultName) public view returns (uint256) {\r\n        return vault[vaultName];\r\n    }\r\n    \r\n    // for check numbers\r\n    function getStat() public isOwner view returns (uint256 vaultTotal) {\r\n\r\n        uint256 totalVault =\r\n            getVaultBalance(VaultEnum.mining) +\r\n            getVaultBalance(VaultEnum.mkt) +\r\n            getVaultBalance(VaultEnum.op) +\r\n            getVaultBalance(VaultEnum.team) +\r\n            getVaultBalance(VaultEnum.presale);\r\n\r\n        return totalVault;\r\n    }\r\n        \r\n    /** @dev implementation of withdrawal\r\n     *  @dev it is available once for each vault\r\n     */\r\n    function withdrawCoins(string vaultName, address to) private returns (uint256) {\r\n        uint256 balance = vault[vaultName];\r\n        \r\n        require(balance > 0);\r\n        require(balances[owner] >= balance);\r\n        require(owner != to);\r\n\r\n        balances[owner] -= balance;\r\n        balances[to] += balance;\r\n        vault[vaultName] = 0;\r\n        \r\n        emit Transfer(owner, to, balance);\r\n        return balance;\r\n    }\r\n    \r\n    /** @dev private functions for manage vault\r\n     */\r\n    function setVaultBalanceInDecimal(VaultEnum vaultNum, uint256 amount) private {\r\n        vault[VaultName[uint256(vaultNum)]] = convertToWei(amount);\r\n    }\r\n    \r\n    function getVaultBalance(VaultEnum vaultNum) private constant returns (uint256) {\r\n        return vault[VaultName[uint256(vaultNum)]];\r\n    }\r\n    \r\n    function convertToWei(uint256 value) private constant returns (uint256) {\r\n        return value * (10 ** uint256(decimals));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"vaultName\",\"type\":\"string\"}],\"name\":\"vaultBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStat\",\"outputs\":[{\"name\":\"vaultTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTeamFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawForOp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferPresaleCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawForMkt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferForMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MegaCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ec91375f55252bcbefd7db8c6c7e7c1ef2fa0334b522a263237aaf3382fdd098"}]}