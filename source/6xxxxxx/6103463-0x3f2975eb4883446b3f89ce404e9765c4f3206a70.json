{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control \r\n* functions, this simplifies the implementation of \"user permissions\". \r\n*/ \r\ncontract Ownable {\r\n    address public owner;\r\n\r\n/** \r\n* @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n* account.\r\n*/\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title ERC20Basic\r\n* @dev Simpler version of ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/179\r\n*/\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns  (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n* @title Basic token\r\n* @dev Basic version of StandardToken, with no allowances. \r\n*/\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of. \r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n    /**\r\n    * @title ERC20 interface\r\n    * @dev see https://github.com/ethereum/EIPs/issues/20\r\n    */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n* @dev https://github.com/ethereum/EIPs/issues/20\r\n* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*/\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amout of tokens to be transfered\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }       \r\n\r\n    /**\r\n    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n/*Token  Contract*/\r\ncontract ZXCToken is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Token Information\r\n    string  public constant name = \"MK7 Coin\";\r\n    string  public constant symbol = \"MK7\";\r\n    uint8   public constant decimals = 18;\r\n\r\n    // Sale period1.\r\n    uint256 public startDate1;\r\n    uint256 public endDate1;\r\n\r\n    // Sale period2.\r\n    uint256 public startDate2;\r\n    uint256 public endDate2;\r\n\r\n    //SaleCap\r\n    uint256 public saleCap;\r\n\r\n    // Address Where Token are keep\r\n    address public tokenWallet;\r\n\r\n    // Address where funds are collected.\r\n    address public fundWallet;\r\n\r\n    // Amount of raised money in wei.\r\n    uint256 public weiRaised;\r\n\r\n    // Event\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n    event PreICOTokenPushed(address indexed buyer, uint256 amount);\r\n\r\n    // Modifiers\r\n    modifier uninitialized() {\r\n        require(tokenWallet == 0x0);\r\n        require(fundWallet == 0x0);\r\n        _;\r\n    }\r\n\r\n    constructor() public {}\r\n    // Trigger with Transfer event\r\n    // Fallback function can be used to buy tokens\r\n    function () public payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    //Initial Contract\r\n    function initialize(address _tokenWallet, address _fundWallet, uint256 _start1, uint256 _end1,\r\n                        uint256 _saleCap, uint256 _totalSupply) public\r\n                        onlyOwner uninitialized {\r\n        require(_start1 < _end1);\r\n        require(_tokenWallet != 0x0);\r\n        require(_fundWallet != 0x0);\r\n        require(_totalSupply >= _saleCap);\r\n\r\n        startDate1 = _start1;\r\n        endDate1 = _end1;\r\n        saleCap = _saleCap;\r\n        tokenWallet = _tokenWallet;\r\n        fundWallet = _fundWallet;\r\n        totalSupply = _totalSupply;\r\n\r\n        balances[tokenWallet] = saleCap;\r\n        balances[0xb1] = _totalSupply.sub(saleCap);\r\n    }\r\n\r\n    //Set PreSale Time\r\n    function setPeriod(uint period, uint256 _start, uint256 _end) public onlyOwner {\r\n        require(_end > _start);\r\n        if (period == 1) {\r\n            startDate1 = _start;\r\n            endDate1 = _end;\r\n        }else if (period == 2) {\r\n            require(_start > endDate1);\r\n            startDate2 = _start;\r\n            endDate2 = _end;      \r\n        }\r\n    }\r\n\r\n    // For pushing pre-ICO records\r\n    function sendForPreICO(address buyer, uint256 amount) public onlyOwner {\r\n        require(saleCap >= amount);\r\n\r\n        saleCap = saleCap - amount;\r\n        // Transfer\r\n        balances[tokenWallet] = balances[tokenWallet].sub(amount);\r\n        balances[buyer] = balances[buyer].add(amount);\r\n        emit PreICOTokenPushed(buyer, amount);\r\n        emit Transfer(tokenWallet, buyer, amount);\r\n    }\r\n\r\n    //Set SaleCap\r\n    function setSaleCap(uint256 _saleCap) public onlyOwner {\r\n        require(balances[0xb1].add(balances[tokenWallet]).sub(_saleCap) > 0);\r\n        uint256 amount=0;\r\n        //Check SaleCap\r\n        if (balances[tokenWallet] > _saleCap) {\r\n            amount = balances[tokenWallet].sub(_saleCap);\r\n            balances[0xb1] = balances[0xb1].add(amount);\r\n        } else {\r\n            amount = _saleCap.sub(balances[tokenWallet]);\r\n            balances[0xb1] = balances[0xb1].sub(amount);\r\n        }\r\n        balances[tokenWallet] = _saleCap;\r\n        saleCap = _saleCap;\r\n    }\r\n\r\n    //Calcute Bouns\r\n    function getBonusByTime(uint256 atTime) public constant returns (uint256) {\r\n        if (atTime < startDate1) {\r\n            return 0;\r\n        } else if (endDate1 > atTime && atTime > startDate1) {\r\n            return 5000;\r\n        } else if (endDate2 > atTime && atTime > startDate2) {\r\n            return 2500;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getBounsByAmount(uint256 etherAmount, uint256 tokenAmount) public pure returns (uint256) {\r\n        //Max 40%\r\n        uint256 bonusRatio = etherAmount.div(500 ether);\r\n        if (bonusRatio > 4) {\r\n            bonusRatio = 4;\r\n        }\r\n        uint256 bonusCount = SafeMath.mul(bonusRatio, 10);\r\n        uint256 bouns = SafeMath.mul(tokenAmount, bonusCount);\r\n        uint256 realBouns = SafeMath.div(bouns, 100);\r\n        return realBouns;\r\n    }\r\n\r\n    //Stop Contract\r\n    function finalize() public onlyOwner {\r\n        require(!saleActive());\r\n\r\n        // Transfer the rest of token to tokenWallet\r\n        balances[tokenWallet] = balances[tokenWallet].add(balances[0xb1]);\r\n        balances[0xb1] = 0;\r\n    }\r\n    \r\n    //Check SaleActive\r\n    function saleActive() public constant returns (bool) {\r\n        return (\r\n            (getCurrentTimestamp() >= startDate1 &&\r\n                getCurrentTimestamp() < endDate1 && saleCap > 0) ||\r\n            (getCurrentTimestamp() >= startDate2 &&\r\n                getCurrentTimestamp() < endDate2 && saleCap > 0)\r\n                );\r\n    }\r\n   \r\n    //Get CurrentTS\r\n    function getCurrentTimestamp() internal view returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n     //Buy Token\r\n    function buyTokens(address sender, uint256 value) internal {\r\n        //Check Sale Status\r\n        require(saleActive());\r\n        \r\n        //Minum buying limit\r\n        require(value >= 0.5 ether);\r\n\r\n        // Calculate token amount to be purchased\r\n        uint256 bonus = getBonusByTime(getCurrentTimestamp());\r\n        uint256 amount = value.mul(bonus);\r\n        // If ETH > 500 the add 10%\r\n        if (getCurrentTimestamp() >= startDate1 && getCurrentTimestamp() < endDate1) {\r\n            uint256 p1Bouns = getBounsByAmount(value, amount);\r\n            amount = amount + p1Bouns;\r\n        }\r\n        // We have enough token to sale\r\n        require(saleCap >= amount);\r\n\r\n        // Transfer\r\n        balances[tokenWallet] = balances[tokenWallet].sub(amount);\r\n        balances[sender] = balances[sender].add(amount);\r\n        emit TokenPurchase(sender, value, amount);\r\n        emit Transfer(tokenWallet, sender, amount);\r\n        \r\n        saleCap = saleCap - amount;\r\n\r\n        // Update state.\r\n        weiRaised = weiRaised + value;\r\n\r\n        // Forward the fund to fund collection wallet.\r\n        fundWallet.transfer(msg.value);\r\n    }   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getBounsByAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"getBonusByTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenWallet\",\"type\":\"address\"},{\"name\":\"_fundWallet\",\"type\":\"address\"},{\"name\":\"_start1\",\"type\":\"uint256\"},{\"name\":\"_end1\",\"type\":\"uint256\"},{\"name\":\"_saleCap\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendForPreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleCap\",\"type\":\"uint256\"}],\"name\":\"setSaleCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PreICOTokenPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ZXCToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2db4bb0f5a8b53c617c3b875de807f6dbb3d92a5d86dbe30b65a14a76422dc14"}]}