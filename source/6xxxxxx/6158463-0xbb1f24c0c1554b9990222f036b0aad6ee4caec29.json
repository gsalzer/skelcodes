{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 result = a * b;\r\n        assert(a == 0 || result / a == b);\r\n        return result;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b)internal pure returns (uint256) {\r\n        uint256 result = a / b;\r\n        return result;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a); \r\n        return a - b; \r\n    } \r\n  \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) { \r\n        uint256 result = a + b; \r\n        assert(result >= a);\r\n        return result;\r\n    }\r\n \r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function balanceOf(address who) public view returns(uint256);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    struct WalletData {\r\n        uint256 tokensAmount;  //Tokens amount on wallet\r\n        uint256 freezedAmount;  //Freezed tokens amount on wallet.\r\n        bool canFreezeTokens;  //Is wallet can freeze tokens or not.\r\n        uint unfreezeDate; // Date when we can unfreeze tokens on wallet.\r\n    }\r\n   \r\n    mapping(address => WalletData) wallets;\r\n\r\n    function transfer(address _to, uint256 _value) public notSender(_to) returns(bool) {    \r\n        require(_to != address(0) \r\n        && wallets[msg.sender].tokensAmount >= _value \r\n        && checkIfCanUseTokens(msg.sender, _value)); \r\n\r\n        uint256 amount = wallets[msg.sender].tokensAmount.sub(_value);\r\n        wallets[msg.sender].tokensAmount = amount;\r\n        wallets[_to].tokensAmount = wallets[_to].tokensAmount.add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns(uint256 balance) {\r\n        return wallets[_owner].tokensAmount;\r\n    }\r\n    // Check wallet on unfreeze tokens amount\r\n    function checkIfCanUseTokens(address _owner, uint256 _amount) internal view returns(bool) {\r\n        uint256 unfreezedAmount = wallets[_owner].tokensAmount - wallets[_owner].freezedAmount;\r\n        return _amount <= unfreezedAmount;\r\n    }\r\n    \r\n    // Prevents user to send transaction on his own address\r\n    modifier notSender(address _owner) {\r\n        require(msg.sender != _owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract StandartToken is ERC20, BasicToken{\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n  \r\n    function approve(address _spender, uint256 _value) public returns (bool) { \r\n        allowed[msg.sender][_spender] = _value; \r\n        emit Approval(msg.sender, _spender, _value); \r\n        return true; \r\n    }\r\n  \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) { \r\n        return allowed[_owner][_spender]; \r\n    } \r\n  \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0) &&\r\n        checkIfCanUseTokens(_from, _value) &&\r\n        _value <= wallets[_from].tokensAmount &&\r\n        _value <= allowed[_from][msg.sender]); \r\n        wallets[_from].tokensAmount = wallets[_from].tokensAmount.sub(_value); \r\n        wallets[_to].tokensAmount = wallets[_to].tokensAmount.add(_value); \r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \r\n        emit Transfer(_from, _to, _value); \r\n        return true; \r\n   } \r\n    \r\n}\r\n\r\ncontract Ownable {\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    event TransferOwnership(address indexed _previousOwner, address indexed _newOwner);\r\n    address public owner = 0x0;\r\n    //wallet that can change owner\r\n    address internal masterKey = 0x4977A392d8D207B49c7fDE8A6B91C23bCebE7291;\r\n   \r\n    function transferOwnership(address _newOwner) public returns(bool);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract FreezableToken is StandartToken, Ownable {\r\n    event ChangeFreezePermission(address indexed _owner, bool _permission);\r\n    event FreezeTokens(address indexed _owner, uint256 _freezeAmount);\r\n    event UnfreezeTokens(address indexed _owner, uint256 _unfreezeAmount);\r\n    \r\n    // Give\\deprive permission to a wallet for freeze tokens.\r\n    function giveFreezePermission(address[] _owners, bool _permission) public onlyOwner returns(bool) {\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n        wallets[_owners[i]].canFreezeTokens = _permission;\r\n        emit ChangeFreezePermission(_owners[i], _permission);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function freezeAllowance(address _owner) public view returns(bool) { \r\n        return wallets[_owner].canFreezeTokens;   \r\n    }\r\n    // Freeze tokens on sender wallet if have permission.\r\n    function freezeTokens(uint256 _amount, uint _unfreezeDate) public isFreezeAllowed returns(bool) {\r\n        //We can freeze tokens only if there are no frozen tokens on the wallet.\r\n        require(wallets[msg.sender].freezedAmount == 0\r\n        && wallets[msg.sender].tokensAmount >= _amount); \r\n        wallets[msg.sender].freezedAmount = _amount;\r\n        wallets[msg.sender].unfreezeDate = _unfreezeDate;\r\n        emit FreezeTokens(msg.sender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function showFreezedTokensAmount(address _owner) public view returns(uint256) {\r\n        return wallets[_owner].freezedAmount;\r\n    }\r\n    \r\n    function unfreezeTokens() public returns(bool) {\r\n        require(wallets[msg.sender].freezedAmount > 0\r\n        && now >= wallets[msg.sender].unfreezeDate);\r\n        emit UnfreezeTokens(msg.sender, wallets[msg.sender].freezedAmount);\r\n        wallets[msg.sender].freezedAmount = 0; // Unfreeze all tokens.\r\n        wallets[msg.sender].unfreezeDate = 0;\r\n        return true;\r\n    }\r\n    //Show date in UNIX time format.\r\n    function showTokensUnfreezeDate(address _owner) public view returns(uint) {\r\n        //If wallet don't have freezed tokens - function will return 0.\r\n        return wallets[_owner].unfreezeDate;\r\n    }\r\n    \r\n    function getUnfreezedTokens(address _owner) internal view returns(uint256) {\r\n        return wallets[_owner].tokensAmount - wallets[_owner].freezedAmount;\r\n    }\r\n    \r\n    modifier isFreezeAllowed() {\r\n        require(freezeAllowance(msg.sender));\r\n        _;\r\n    }\r\n}\r\n\r\ncontract MultisendableToken is FreezableToken {\r\n\r\n    function massTransfer(address[] _addresses, uint[] _values) public onlyOwner returns(bool) {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            transferFromOwner(_addresses[i], _values[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function massApprove(address[] _spenders, uint256[] _values) public returns (bool succes) {\r\n        for(uint i = 0; i < _spenders.length; i++) {\r\n        approve(_spenders[i], _values[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferFromOwner(address _to, uint256 _value) internal notSender(_to) onlyOwner {\r\n        require(_to != address(0)\r\n        && wallets[owner].tokensAmount >= _value\r\n        && checkIfCanUseTokens(owner, _value));\r\n        wallets[owner].tokensAmount = wallets[owner].tokensAmount.sub(_value); \r\n        wallets[_to].tokensAmount = wallets[_to].tokensAmount.add(_value);\r\n        emit Transfer(owner, _to, _value);\r\n    }\r\n    \r\n}\r\n\r\ncontract CryptosoulToken is MultisendableToken {\r\n    \r\n    event AllowMinting();\r\n    event Burn(address indexed _from, uint256 _value);\r\n    event Mint(address indexed _to, uint256 _value);\r\n    \r\n    string constant public name = \"CryptoSoul\";\r\n    string constant public symbol = \"SOUL\";\r\n    uint constant public decimals = 18;\r\n    \r\n    uint256 constant public START_TOKENS = 500000000 * 10**decimals; //500M start\r\n    uint256 constant public MINT_AMOUNT = 1370000 * 10**decimals;\r\n    uint256 constant public MINT_INTERVAL = 1 days; // 24 hours\r\n    uint256 constant private MAX_BALANCE_VALUE = 10000000000 * 10**decimals;\r\n    \r\n    uint256 public nextMintPossibleDate = 0;\r\n    bool public canMint = false;\r\n    \r\n    constructor() public {\r\n        wallets[owner].tokensAmount = START_TOKENS;\r\n        wallets[owner].canFreezeTokens = true;\r\n        totalSupply = START_TOKENS;\r\n        nextMintPossibleDate = 1538352000; //01.10.2018 (DD, MM, YYYY)\r\n        emit Mint(owner, START_TOKENS);\r\n    }\r\n\r\n    function allowMinting() public onlyOwner {\r\n        // Can start minting token after 01.10.2018\r\n        require(!canMint\r\n        && now >= nextMintPossibleDate);\r\n        nextMintPossibleDate = now;\r\n        canMint = true;\r\n        emit AllowMinting();\r\n    }\r\n\r\n    function mint() public onlyOwner returns(bool) {\r\n        require(canMint\r\n        && now >= nextMintPossibleDate\r\n        && totalSupply + MINT_AMOUNT <= MAX_BALANCE_VALUE);\r\n        nextMintPossibleDate = nextMintPossibleDate.add(MINT_INTERVAL);\r\n        wallets[owner].tokensAmount = wallets[owner].tokensAmount.\r\n                                             add(MINT_AMOUNT);  \r\n        totalSupply = totalSupply.add(MINT_AMOUNT);\r\n        emit Mint(owner, MINT_AMOUNT);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 value) public onlyOwner returns(bool) {\r\n        require(checkIfCanUseTokens(owner, value)\r\n        && wallets[owner].tokensAmount >= value);\r\n        wallets[owner].tokensAmount = wallets[owner].\r\n                                             tokensAmount.sub(value);\r\n        totalSupply = totalSupply.sub(value);                             \r\n        emit Burn(owner, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferOwnership(address _newOwner) public notSender(_newOwner) returns(bool) {\r\n        require(msg.sender == masterKey \r\n        && _newOwner != address(0));\r\n        emit TransferOwnership(owner, _newOwner);\r\n        owner = _newOwner;\r\n        return true;\r\n    }\r\n    \r\n    function() public payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"massTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spenders\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"massApprove\",\"outputs\":[{\"name\":\"succes\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freezeAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextMintPossibleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_INTERVAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"showFreezedTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_unfreezeDate\",\"type\":\"uint256\"}],\"name\":\"freezeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_permission\",\"type\":\"bool\"}],\"name\":\"giveFreezePermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"showTokensUnfreezeDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_permission\",\"type\":\"bool\"}],\"name\":\"ChangeFreezePermission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_freezeAmount\",\"type\":\"uint256\"}],\"name\":\"FreezeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_unfreezeAmount\",\"type\":\"uint256\"}],\"name\":\"UnfreezeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CryptosoulToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ace41cd482f673ef86bb2795e89256a3500ced93484bb5bb37c5d3158f83e5b1"}]}