{"status":"1","message":"OK","result":[{"SourceCode":"// MarketPay-System-1.2.sol\r\n\r\n/*\r\nMarketPay Solidity Libraries\r\ndeveloped by:\r\n\tMarketPay.io , 2018\r\n\thttps://marketpay.io/\r\n\thttps://goo.gl/kdECQu\r\n\r\nv1.2 \r\n\t+ Haltable by SC owner\r\n\t+ Constructors upgraded to new syntax\r\n\t\r\nv1.1 \r\n\t+ Upgraded to Solidity 0.4.22\r\n\t\r\nv1.0\r\n\t+ System functions\r\n\r\n*/\r\n\r\npragma solidity ^0.4.22;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title System\r\n * @dev Abstract contract that includes some useful generic functions.\r\n */\r\ncontract System {\r\n\tusing SafeMath for uint256;\r\n\t\r\n\taddress owner;\r\n\t\r\n\t// **** MODIFIERS\r\n\r\n\t// @notice To limit functions usage to contract owner\r\n\tmodifier onlyOwner() {\r\n\t\tif (msg.sender != owner) {\r\n\t\t\terror('System: onlyOwner function called by user that is not owner');\r\n\t\t} else {\r\n\t\t\t_;\r\n\t\t}\r\n\t}\r\n\r\n\t// @notice To limit functions usage to contract owner, directly or indirectly (through another contract call)\r\n\tmodifier onlyOwnerOrigin() {\r\n\t\tif (msg.sender != owner && tx.origin != owner) {\r\n\t\t\terror('System: onlyOwnerOrigin function called by user that is not owner nor a contract called by owner at origin');\r\n\t\t} else {\r\n\t\t\t_;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t// **** FUNCTIONS\r\n\t\r\n\t// @notice Calls whenever an error occurs, logs it or reverts transaction\r\n\tfunction error(string _error) internal {\r\n\t\t// revert(_error);\r\n\t\t// in case revert with error msg is not yet fully supported\r\n\t\t\temit Error(_error);\r\n\t\t\t// throw;\r\n\t}\r\n\r\n\t// @notice For debugging purposes when using solidity online browser, remix and sandboxes\r\n\tfunction whoAmI() public constant returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\t\r\n\t// @notice Get the current timestamp from last mined block\r\n\tfunction timestamp() public constant returns (uint256) {\r\n\t\treturn block.timestamp;\r\n\t}\r\n\t\r\n\t// @notice Get the balance in weis of this contract\r\n\tfunction contractBalance() public constant returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\t\r\n\t// @notice System constructor, defines owner\r\n\tconstructor() public {\r\n\t\t// This is the constructor, so owner should be equal to msg.sender, and this method should be called just once\r\n\t\towner = msg.sender;\r\n\t\t\r\n\t\t// make sure owner address is configured\r\n\t\tif(owner == 0x0) error('System constructor: Owner address is 0x0'); // Never should happen, but just in case...\r\n\t}\r\n\t\r\n\t// **** EVENTS\r\n\r\n\t// @notice A generic error log\r\n\tevent Error(string _error);\r\n\r\n\t// @notice For debug purposes\r\n\tevent DebugUint256(uint256 _data);\r\n\r\n}\r\n\r\n/**\r\n * @title Haltable\r\n * @dev Abstract contract that allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Haltable is System {\r\n\tbool public halted;\r\n\t\r\n\t// **** MODIFIERS\r\n\r\n\tmodifier stopInEmergency {\r\n\t\tif (halted) {\r\n\t\t\terror('Haltable: stopInEmergency function called and contract is halted');\r\n\t\t} else {\r\n\t\t\t_;\r\n\t\t}\r\n\t}\r\n\r\n\tmodifier onlyInEmergency {\r\n\t\tif (!halted) {\r\n\t\t\terror('Haltable: onlyInEmergency function called and contract is not halted');\r\n\t\t} {\r\n\t\t\t_;\r\n\t\t}\r\n\t}\r\n\r\n\t// **** FUNCTIONS\r\n\t\r\n\t// called by the owner on emergency, triggers stopped state\r\n\tfunction halt() external onlyOwner {\r\n\t\thalted = true;\r\n\t\temit Halt(true, msg.sender, timestamp()); // Event log\r\n\t}\r\n\r\n\t// called by the owner on end of emergency, returns to normal state\r\n\tfunction unhalt() external onlyOwner onlyInEmergency {\r\n\t\thalted = false;\r\n\t\temit Halt(false, msg.sender, timestamp()); // Event log\r\n\t}\r\n\t\r\n\t// **** EVENTS\r\n\t// @notice Triggered when owner halts contract\r\n\tevent Halt(bool _switch, address _halter, uint256 _timestamp);\r\n}\r\n // Voting-1.4.sol\r\n\r\n/*\r\nVoting Smart Contracts v1.4\r\ndeveloped by:\r\n\tMarketPay.io , 2017-2018\r\n\thttps://marketpay.io/\r\n\thttps://goo.gl/kdECQu\r\n\r\nv1.5 https://gitlab.com/lemonandmarket/third.io.marketpay.alcobendas/blob/master/contracts/Voting.sol\r\n\t+ new eVotingStatus\r\n\t+ Teller can endTesting() and reset all test votes\r\n\t+ Added full scan of tellers endpoint\r\n\r\nv1.4 https://gist.github.com/computerphysicslab/7a92baf53a66e6b6f104b9daf19ab33a\r\n\t+ grantTeller should call grantOracle\r\n\t+ remove constrain on voter being registered to vote (teller should check that a posteriori)\r\n\t+ store voter pubkey when registered and endpoint to query it, getVoterPubKey()\r\n\t+ System library\r\n\t+ function isACitizen() to public\r\n\t\r\nv1.3 https://gist.github.com/computerphysicslab/106a25a062cb611685b5f36abf1a3eea\r\n\t+ Tellers contract records public key of tellers, in order to voters send their votes ciphered for the tellers\r\n\r\nv1.2 https://gist.github.com/computerphysicslab/057c10515b38f0dcacdbd5d3cb6e9d61\r\n\t+ Tellers contract is actually another instance of Oracle contract\r\n\t+ Tellers only can close the poll\r\n\t+ SC Owner defines tellers\r\n\r\nv1.1 https://gist.github.com/computerphysicslab/c592bbe6d4ad56a11b39bae31852f17c\r\n\t+ Oracles contract\r\n\t+ Oracles only are allowed to grantVote\r\n\t+ SC Owner defines oracles\r\n\r\nv1.0 https://gist.github.com/computerphysicslab/39a7a8bc2c364d4a17c5ef0362904aeb\r\n\t+ Storage of votes\r\n\t+ Poll closes on deadline\r\n\t+ Forbid double vote\r\n\t+ Oracle grants whitelist of addresses to vote\r\n\t+ Full scan query of votes\r\n*/\r\n\r\n\r\n/**\r\n * @title Oracles\r\n * @dev This contract is used to validate Oracles\r\n */\r\ncontract Oracles is Haltable {\r\n\t// **** DATA\r\n\tstruct oracle {\r\n\t\tuint256 oracleId;\r\n\t\tbool oracleAuth;\r\n\t\taddress oracleAddress;\r\n\t}\r\n\tmapping (address => oracle) oracleData;\r\n\tmapping (uint256 => address) oracleAddressById; // indexed oracles so as to be fully scannable\r\n\tuint256 lastId;\r\n\r\n\r\n\t// **** METHODS\r\n\r\n\t// Checks whether a given user is an authorized oracle\r\n\tfunction isOracle(address _oracle) public constant returns (bool) {\r\n\t\treturn (oracleData[_oracle].oracleAuth);\r\n\t}\r\n\r\n\tfunction newOracle(address _oracle) internal onlyOwner returns (uint256 id) {\r\n\t\t// Update Index\r\n\t\tid = ++lastId;\r\n\t\toracleData[_oracle].oracleId = id;\r\n\t\toracleData[_oracle].oracleAuth = false;\r\n\t\toracleData[_oracle].oracleAddress = _oracle;\r\n\t\toracleAddressById[id] = _oracle;\r\n\r\n\t\temit NewOracle(_oracle, id, timestamp()); // Event log\r\n\t}\r\n\r\n\tfunction grantOracle(address _oracle) public onlyOwner {\r\n\t\t// Checks whether this user has been previously added as an oracle\r\n\t\tuint256 id;\r\n\t\tif (oracleData[_oracle].oracleId > 0) {\r\n\t\t\tid = oracleData[_oracle].oracleId;\r\n\t\t} else {\r\n\t\t\tid = newOracle(_oracle);\r\n\t\t}\r\n\r\n\t\toracleData[_oracle].oracleAuth = true;\r\n\r\n\t\temit GrantOracle(_oracle, id, timestamp()); // Event log\r\n\t}\r\n\r\n\tfunction revokeOracle(address _oracle) external onlyOwner {\r\n\t\toracleData[_oracle].oracleAuth = false;\r\n\r\n\t\temit RevokeOracle(_oracle, timestamp()); // Event log\r\n\t}\r\n\r\n\t// Queries the oracle, knowing the address\r\n\tfunction getOracleByAddress(address _oracle) public constant returns (uint256 _oracleId, bool _oracleAuth, address _oracleAddress) {\r\n\t\treturn (oracleData[_oracle].oracleId, oracleData[_oracle].oracleAuth, oracleData[_oracle].oracleAddress);\r\n\t}\r\n\r\n\t// Queries the oracle, knowing the id\r\n\tfunction getOracleById(uint256 id) public constant returns (uint256 _oracleId, bool _oracleAuth, address _oracleAddress) {\r\n\t\treturn (getOracleByAddress(oracleAddressById[id]));\r\n\t}\r\n\r\n\r\n\t// **** EVENTS\r\n\r\n\t// Triggered when a new oracle is created\r\n\tevent NewOracle(address indexed _who, uint256 indexed _id, uint256 _timestamp);\r\n\r\n\t// Triggered when a user is granted to become an oracle\r\n\tevent GrantOracle(address indexed _who, uint256 indexed _id, uint256 _timestamp);\r\n\r\n\t// Triggered when a user is revoked for being an oracle\r\n\tevent RevokeOracle(address indexed _who, uint256 _timestamp);\r\n}\r\n\r\n  // Voting-1.4.sol\r\n\r\n/*\r\nVoting Smart Contracts v1.4\r\ndeveloped by:\r\n\tMarketPay.io , 2017-2018\r\n\thttps://marketpay.io/\r\n\thttps://goo.gl/kdECQu\r\n\r\nv1.5 https://gitlab.com/lemonandmarket/third.io.marketpay.alcobendas/blob/master/contracts/Voting.sol\r\n\t+ new eVotingStatus\r\n\t+ Teller can endTesting() and reset all test votes\r\n\t+ Added full scan of tellers endpoint\r\n\r\nv1.4 https://gist.github.com/computerphysicslab/7a92baf53a66e6b6f104b9daf19ab33a\r\n\t+ grantTeller should call grantOracle\r\n\t+ remove constrain on voter being registered to vote (teller should check that a posteriori)\r\n\t+ store voter pubkey when registered and endpoint to query it, getVoterPubKey()\r\n\t+ System library\r\n\t+ function isACitizen() to public\r\n\t\r\nv1.3 https://gist.github.com/computerphysicslab/106a25a062cb611685b5f36abf1a3eea\r\n\t+ Tellers contract records public key of tellers, in order to voters send their votes ciphered for the tellers\r\n\r\nv1.2 https://gist.github.com/computerphysicslab/057c10515b38f0dcacdbd5d3cb6e9d61\r\n\t+ Tellers contract is actually another instance of Oracle contract\r\n\t+ Tellers only can close the poll\r\n\t+ SC Owner defines tellers\r\n\r\nv1.1 https://gist.github.com/computerphysicslab/c592bbe6d4ad56a11b39bae31852f17c\r\n\t+ Oracles contract\r\n\t+ Oracles only are allowed to grantVote\r\n\t+ SC Owner defines oracles\r\n\r\nv1.0 https://gist.github.com/computerphysicslab/39a7a8bc2c364d4a17c5ef0362904aeb\r\n\t+ Storage of votes\r\n\t+ Poll closes on deadline\r\n\t+ Forbid double vote\r\n\t+ Oracle grants whitelist of addresses to vote\r\n\t+ Full scan query of votes\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Tellers\r\n * @dev This contract is used to validate Tellers that can read ciphered votes and close the voting process\r\n */\r\ncontract Tellers is Oracles {\r\n\t// **** DATA\r\n\taddress[] public tellersArray; // full scan of tellers\r\n\tmapping (address => bytes) public pubKeys;\r\n\tbytes[] public pubKeysArray; // full scan of tellers' pubkeys\r\n\r\n\tfunction grantTeller(address _teller, bytes _pubKey) external onlyOwner {\r\n\t\t// Checks whether this user has been previously added as a teller\r\n\t\tif (keccak256(pubKeys[_teller]) != keccak256(\"\")) { // A workaround to bytes comparison: if (pubKeys[_teller] != '') ...\r\n\t\t\terror('grantTeller: This teller is already granted');\r\n\t\t}\r\n\r\n\t\ttellersArray.push(_teller);\r\n\t\tpubKeys[_teller] = _pubKey;\r\n\t\tpubKeysArray.push(_pubKey);\r\n\r\n\t\tgrantOracle(_teller); // A teller inherits oracle behaviour\r\n\r\n\t\temit GrantTeller(_teller, _pubKey, timestamp()); // Event log\r\n\t}\r\n\r\n\t// Triggered when a user is granted to become a teller\r\n\tevent GrantTeller(address indexed _who, bytes _pubKey, uint256 _timestamp);\r\n}\r\n\r\n\r\n  // Voting-1.4.sol\r\n\r\n/*\r\nVoting Smart Contracts v1.4\r\ndeveloped by:\r\n\tMarketPay.io , 2017-2018\r\n\thttps://marketpay.io/\r\n\thttps://goo.gl/kdECQu\r\n\r\nv1.5 https://gitlab.com/lemonandmarket/third.io.marketpay.alcobendas/blob/master/contracts/Voting.sol\r\n\t+ new eVotingStatus\r\n\t+ Teller can endTesting() and reset all test votes\r\n\t+ Added full scan of tellers endpoint\r\n\r\nv1.4 https://gist.github.com/computerphysicslab/7a92baf53a66e6b6f104b9daf19ab33a\r\n\t+ grantTeller should call grantOracle\r\n\t+ remove constrain on voter being registered to vote (teller should check that a posteriori)\r\n\t+ store voter pubkey when registered and endpoint to query it, getVoterPubKey()\r\n\t+ System library\r\n\t+ function isACitizen() to public\r\n\t\r\nv1.3 https://gist.github.com/computerphysicslab/106a25a062cb611685b5f36abf1a3eea\r\n\t+ Tellers contract records public key of tellers, in order to voters send their votes ciphered for the tellers\r\n\r\nv1.2 https://gist.github.com/computerphysicslab/057c10515b38f0dcacdbd5d3cb6e9d61\r\n\t+ Tellers contract is actually another instance of Oracle contract\r\n\t+ Tellers only can close the poll\r\n\t+ SC Owner defines tellers\r\n\r\nv1.1 https://gist.github.com/computerphysicslab/c592bbe6d4ad56a11b39bae31852f17c\r\n\t+ Oracles contract\r\n\t+ Oracles only are allowed to grantVote\r\n\t+ SC Owner defines oracles\r\n\r\nv1.0 https://gist.github.com/computerphysicslab/39a7a8bc2c364d4a17c5ef0362904aeb\r\n\t+ Storage of votes\r\n\t+ Poll closes on deadline\r\n\t+ Forbid double vote\r\n\t+ Oracle grants whitelist of addresses to vote\r\n\t+ Full scan query of votes\r\n*/\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Voting\r\n * @dev This contract is used to store votes\r\n */\r\ncontract Voting is Haltable {\r\n\t// **** DATA\r\n\tmapping (address => string) votes;\r\n\tuint256 public numVotes;\r\n\r\n\tmapping (address => bool) allowed; // Only granted addresses are allowed to issue a vote in the poll\r\n\taddress[] votersArray;\r\n\tuint256 public numVoters;\r\n\r\n\tuint256 public deadline;\r\n\teVotingStatus public VotingStatus; // Tellers are allowed to close the poll\r\n\tenum eVotingStatus { Test, Voting, Closed }\r\n\r\n\r\n\tOracles public SCOracles; // Contract that defines who is an oracle. Oracles allow wallets to vote\r\n\tTellers public SCTellers; // Contract that defines who is a teller. Tellers are allowed to close the poll and have an associated pubKey stored on contract\r\n\r\n\tmapping (address => bytes) public pubKeys; // Voters' pubkeys\r\n\r\n\r\n\t// **** MODIFIERS\r\n\tmodifier votingClosed() { if (now >= deadline || VotingStatus == eVotingStatus.Closed) _; }\r\n\tmodifier votingActive() { if (now < deadline && VotingStatus != eVotingStatus.Closed) _; }\r\n\r\n\t// To limit voteGranting function just to authorized oracles\r\n\tmodifier onlyOracle() {\r\n\t\tif (!SCOracles.isOracle(msg.sender)) {\r\n\t\t\terror('onlyOracle function called by user that is not an authorized oracle');\r\n\t\t} else {\r\n\t\t\t_;\r\n\t\t}\r\n\t}\r\n\r\n\t// To limit closeVoting function just to authorized tellers\r\n\tmodifier onlyTeller() {\r\n\t\tif (!SCTellers.isOracle(msg.sender)) {\r\n\t\t\terror('onlyTeller function called by user that is not an authorized teller');\r\n\t\t} else {\r\n\t\t\t_;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// **** METHODS\r\n\tconstructor(address _SCOracles, address _SCTellers) public {\r\n\t\tSCOracles = Oracles(_SCOracles);\r\n\t\tSCTellers = Tellers(_SCTellers);\r\n\t\tdeadline = now + 60 days;\r\n\t\tVotingStatus = eVotingStatus.Test;\r\n\t}\r\n\r\n\tfunction pollStatus() public constant returns (eVotingStatus) {\r\n\t\tif (now >= deadline) {\r\n\t\t\treturn eVotingStatus.Closed;\r\n\t\t}\r\n\t\treturn VotingStatus;\r\n\t}\r\n\r\n\tfunction isACitizen(address _voter) public constant returns (bool) {\r\n\t\tif (allowed[_voter]) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction amIACitizen() public constant returns (bool) {\r\n\t\treturn (isACitizen(msg.sender));\r\n\t}\r\n\r\n\tfunction canItVote(address _voter) internal constant returns (bool) {\r\n\t\tif (bytes(votes[_voter]).length == 0) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction canIVote() public constant returns (bool) {\r\n\t\treturn (canItVote(msg.sender));\r\n\t}\r\n\r\n\tfunction sendVote(string _vote) votingActive public returns (bool) {\r\n\t\t// Check whether voter has not previously casted a vote\r\n\t\tif (!canIVote()) {\r\n\t\t\terror('sendVote: sender cannot vote because it has previously casted another vote');\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Check whether vote is not empty\r\n\t\tif (bytes(_vote).length < 1) {\r\n\t\t\terror('sendVote: vote is empty');\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Cast the vote\r\n\t\tvotes[msg.sender] = _vote;\r\n\t\tnumVotes ++;\r\n\r\n\t\temit SendVote(msg.sender, _vote); // Event log\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getVoter(uint256 _idVoter) /* votingClosed */ public constant returns (address) {\r\n\t\treturn (votersArray[_idVoter]);\r\n\t}\r\n\r\n\tfunction readVote(address _voter) /* votingClosed */ public constant returns (string) {\r\n\t\treturn (votes[_voter]);\r\n\t}\r\n\r\n\t// Low level grantVoter w/o pubKey, avoid adding the same voter twice\r\n\tfunction _grantVoter(address _voter) onlyOracle public {\r\n\t\tif(!allowed[_voter]) {\r\n\t\t\tallowed[_voter] = true;\r\n\t\t\tvotersArray.push(_voter);\r\n\t\t\tnumVoters ++;\r\n\r\n\t\t\temit GrantVoter(_voter); // Event log\r\n\t\t}\r\n\t}\r\n\r\n\t// New endpoint that sets pubKey as well\r\n\tfunction grantVoter(address _voter, bytes _pubKey) onlyOracle public {\r\n\t\t_grantVoter(_voter);\r\n\r\n\t\tpubKeys[_voter] = _pubKey;\r\n\t}\r\n\r\n\tfunction getVoterPubKey(address _voter) public constant returns (bytes) {\r\n\t\treturn (pubKeys[_voter]);\r\n\t}\r\n\r\n\tfunction closeVoting() onlyTeller public {\r\n\t\tVotingStatus = eVotingStatus.Closed;\r\n\r\n\t\temit CloseVoting(true); // Event log\r\n\t}\r\n\r\n\tfunction endTesting() onlyTeller public {\r\n\t\tnumVotes = 0;\r\n\t\tuint256 l = votersArray.length;\r\n\t\tfor(uint256 i = 0;i<l;i++) {\r\n\t\t\tdelete votes[votersArray[i]];\r\n\t\t}\r\n\t\tVotingStatus = eVotingStatus.Voting;\r\n\t}\r\n\r\n\t// fallback function. This SC doesn't accept any Ether\r\n\tfunction () payable public {\r\n\t\trevert();\r\n\t}\r\n\r\n\r\n\t// **** EVENTS\r\n\t// Triggered when a voter issues a vote\r\n\tevent SendVote(address indexed _from, string _vote);\r\n\r\n\t// Triggered when a voter is granted by the Oracle\r\n\tevent GrantVoter(address indexed _voter);\r\n\r\n\t// Triggered when Contract Owner closes the voting\r\n\tevent CloseVoting(bool _VotingClosed);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_vote\",\"type\":\"string\"}],\"name\":\"sendVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_pubKey\",\"type\":\"bytes\"}],\"name\":\"grantVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endTesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCOracles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVoterPubKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCTellers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canIVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amIACitizen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"_grantVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"isACitizen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pollStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeVoting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VotingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idVoter\",\"type\":\"uint256\"}],\"name\":\"getVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pubKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"readVote\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whoAmI\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_SCOracles\",\"type\":\"address\"},{\"name\":\"_SCTellers\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_vote\",\"type\":\"string\"}],\"name\":\"SendVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"GrantVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_VotingClosed\",\"type\":\"bool\"}],\"name\":\"CloseVoting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_switch\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_halter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Halt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_error\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_data\",\"type\":\"uint256\"}],\"name\":\"DebugUint256\",\"type\":\"event\"}]","ContractName":"Voting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ad62f221073d41cea4fea6ed914864cc63907ba40000000000000000000000009d319e3be585e98de0059f4feaa0e4973ddddd44","Library":"","SwarmSource":"bzzr://a84c216160e827c53dc13b0850035c3b1469630a744a0bfa683072f2011384a4"}]}