{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/idv/CvcValidatorRegistryInterface.sol\r\n\r\n/**\r\n * @title CvcValidatorRegistryInterface\r\n * @dev This contract defines Validator Registry interface.\r\n */\r\ncontract CvcValidatorRegistryInterface {\r\n\r\n    /**\r\n    * @dev Adds a new Validator record or updates the existing one.\r\n    * @param _name Validator name.\r\n    * @param _description Validator description.\r\n    */\r\n    function set(address _idv, string _name, string _description) external;\r\n\r\n    /**\r\n    * @dev Returns Validator entry.\r\n    * @param _idv Validator address.\r\n    * @return name Validator name.\r\n    * @return description Validator description.\r\n    */\r\n    function get(address _idv) external view returns (string name, string description);\r\n\r\n    /**\r\n    * @dev Verifies whether Validator is registered.\r\n    * @param _idv Validator address.\r\n    * @return bool\r\n    */\r\n    function exists(address _idv) external view returns (bool);\r\n}\r\n\r\n// File: contracts/upgradeability/EternalStorage.sol\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract defines the generic storage structure\r\n * so that it could be re-used to implement any domain specific storage functionality\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n    mapping(bytes32 => bytes32) internal bytes32Storage;\r\n\r\n}\r\n\r\n// File: contracts/upgradeability/ImplementationStorage.sol\r\n\r\n/**\r\n * @title ImplementationStorage\r\n * @dev This contract stores proxy implementation address.\r\n */\r\ncontract ImplementationStorage {\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"cvc.proxy.implementation\", and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0xa490aab0d89837371982f93f57ffd20c47991f88066ef92475bc8233036969bb;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    */\r\n    constructor() public {\r\n        assert(IMPLEMENTATION_SLOT == keccak256(\"cvc.proxy.implementation\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     * @return Address of the current implementation\r\n     */\r\n    function implementation() public view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeability/Initializable.sol\r\n\r\n/**\r\n * @title Initializable\r\n * @dev This contract provides basic initialization control\r\n */\r\ncontract Initializable is EternalStorage, ImplementationStorage {\r\n\r\n    /**\r\n    Data structures and storage layout:\r\n    mapping(bytes32 => bool) initialized;\r\n    **/\r\n\r\n    /**\r\n     * @dev Throws if called before contract was initialized.\r\n     */\r\n    modifier onlyInitialized() {\r\n        // require(initialized[implementation()]);\r\n        require(boolStorage[keccak256(abi.encodePacked(implementation(), \"initialized\"))], \"Contract is not initialized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Controls the initialization state, allowing to call an initialization function only once.\r\n     */\r\n    modifier initializes() {\r\n        address impl = implementation();\r\n        // require(!initialized[implementation()]);\r\n        require(!boolStorage[keccak256(abi.encodePacked(impl, \"initialized\"))], \"Contract is already initialized\");\r\n        _;\r\n        // initialized[implementation()] = true;\r\n        boolStorage[keccak256(abi.encodePacked(impl, \"initialized\"))] = true;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeability/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n\r\n    /**\r\n    Data structures and storage layout:\r\n    address owner;\r\n    **/\r\n\r\n    /**\r\n     * @dev Event to show ownership has been transferred\r\n     * @param previousOwner representing the address of the previous owner\r\n     * @param newOwner representing the address of the new owner\r\n     */\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner(), \"Message sender must be contract admin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the address of the owner\r\n     * @return the address of the owner\r\n     */\r\n    function owner() public view returns (address) {\r\n        // return owner;\r\n        return addressStorage[keccak256(\"owner\")];\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner the address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Contract owner cannot be zero address\");\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new owner address\r\n     */\r\n    function setOwner(address newOwner) internal {\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        // owner = newOwner;\r\n        addressStorage[keccak256(\"owner\")] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/idv/CvcValidatorRegistry.sol\r\n\r\n/**\r\n * @title CvcValidatorRegistry\r\n * @dev This contract is a registry for Identity Validators (IDV). It is part of the marketplace access control mechanism.\r\n * Only registered and authorized Identity Validators can perform certain actions on marketplace.\r\n */\r\ncontract CvcValidatorRegistry is EternalStorage, Initializable, Ownable, CvcValidatorRegistryInterface {\r\n\r\n    /**\r\n    Data structures and storage layout:\r\n    struct Validator {\r\n        string name;\r\n        string description;\r\n    }\r\n    mapping(address => Validator) validators;\r\n    **/\r\n\r\n    /**\r\n    * @dev Constructor: invokes initialization function\r\n    */\r\n    constructor() public {\r\n        initialize(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Registers a new Validator or updates the existing one.\r\n    * @param _idv Validator address.\r\n    * @param _name Validator name.\r\n    * @param _description Validator description.\r\n    */\r\n    function set(address _idv, string _name, string _description) external onlyInitialized onlyOwner {\r\n        require(_idv != address(0), \"Cannot register IDV with zero address\");\r\n        require(bytes(_name).length > 0, \"Cannot register IDV with empty name\");\r\n\r\n        setValidatorName(_idv, _name);\r\n        setValidatorDescription(_idv, _description);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns Validator data.\r\n    * @param _idv Validator address.\r\n    * @return name Validator name.\r\n    * @return description Validator description.\r\n    */\r\n    function get(address _idv) external view onlyInitialized returns (string name, string description) {\r\n        name = getValidatorName(_idv);\r\n        description = getValidatorDescription(_idv);\r\n    }\r\n\r\n    /**\r\n    * @dev Verifies whether Validator is registered.\r\n    * @param _idv Validator address.\r\n    * @return bool\r\n    */\r\n    function exists(address _idv) external view onlyInitialized returns (bool) {\r\n        return bytes(getValidatorName(_idv)).length > 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Contract initialization method.\r\n    * @param _owner Owner address\r\n    */\r\n    function initialize(address _owner) public initializes {\r\n        setOwner(_owner);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns Validator name.\r\n    * @param _idv Validator address.\r\n    * @return string\r\n    */\r\n    function getValidatorName(address _idv) private view returns (string) {\r\n        // return validators[_idv].name;\r\n        return stringStorage[keccak256(abi.encodePacked(\"validators.\", _idv, \".name\"))];\r\n    }\r\n\r\n    /**\r\n    * @dev Saves Validator name.\r\n    * @param _idv Validator address.\r\n    * @param _name Validator name.\r\n    */\r\n    function setValidatorName(address _idv, string _name) private {\r\n        // validators[_idv].name = _name;\r\n        stringStorage[keccak256(abi.encodePacked(\"validators.\", _idv, \".name\"))] = _name;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns Validator description.\r\n    * @param _idv Validator address.\r\n    * @return string\r\n    */\r\n    function getValidatorDescription(address _idv) private view returns (string) {\r\n        // return validators[_idv].description;\r\n        return stringStorage[keccak256(abi.encodePacked(\"validators.\", _idv, \".description\"))];\r\n    }\r\n\r\n    /**\r\n    * @dev Saves Validator description.\r\n    * @param _idv Validator address.\r\n    * @param _description Validator description.\r\n    */\r\n    function setValidatorDescription(address _idv, string _description) private {\r\n        // validators[_idv].description = _description;\r\n        stringStorage[keccak256(abi.encodePacked(\"validators.\", _idv, \".description\"))] = _description;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idv\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idv\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idv\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CvcValidatorRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7f4d6db0f81c1a93ca4e6796cd3d538378f19781202534655a1f3b16cd46bcdf"}]}