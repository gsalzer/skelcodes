{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4 .24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n\tfunction add(uint a, uint b) internal pure returns(uint c) {\r\n\t\tc = a + b;\r\n\t\trequire(c >= a);\r\n\t}\r\n\r\n\tfunction sub(uint a, uint b) internal pure returns(uint c) {\r\n\t\trequire(b <= a);\r\n\t\tc = a - b;\r\n\t}\r\n\r\n\tfunction mul(uint a, uint b) internal pure returns(uint c) {\r\n\t\tc = a * b;\r\n\t\trequire(a == 0 || c / a == b);\r\n\t}\r\n\r\n\tfunction div(uint a, uint b) internal pure returns(uint c) {\r\n\t\trequire(b > 0);\r\n\t\tc = a / b;\r\n\t}\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\tfunction totalSupply() public constant returns(uint);\r\n\r\n\tfunction balanceOf(address tokenOwner) public constant returns(uint balance);\r\n\r\n\tfunction allowance(address tokenOwner, address spender) public constant returns(uint remaining);\r\n\r\n\tfunction transfer(address to, uint tokens) public returns(bool success);\r\n\r\n\tfunction approve(address spender, uint tokens) public returns(bool success);\r\n\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns(bool success);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n\tfunction receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n\taddress public owner;\r\n\taddress public newOwner;\r\n\r\n\tevent OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address _newOwner) public onlyOwner {\r\n\t\tnewOwner = _newOwner;\r\n\t}\r\n\r\n\tfunction acceptOwnership() public {\r\n\t\trequire(msg.sender == newOwner);\r\n\t\temit OwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t\tnewOwner = address(0);\r\n\t}\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and a\r\n// fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract BTYCToken is ERC20Interface, Owned {\r\n\tusing SafeMath\r\n\tfor uint;\r\n\r\n\tstring public symbol;\r\n\tstring public name;\r\n\tuint8 public decimals;\r\n\tuint _totalSupply;\r\n\r\n\tuint256 public sellPrice; //出售价格 1枚代币换多少以太 /1000\r\n\tuint256 public buyPrice; //购买价格 多少以太可购买1枚代币 /1000\r\n\tuint256 public sysPrice; //挖矿的衡量值\r\n\tuint256 public sysPer; //挖矿的增量百分比 /100\r\n\r\n\tuint256 public onceOuttime; //增量的时间 测试  \r\n\tuint256 public onceAddTime; //挖矿的时间 测试\r\n\r\n\tmapping(address => uint) balances;\r\n\tmapping(address => mapping(address => uint)) allowed;\r\n\r\n\t/* 冻结账户 */\r\n\tmapping(address => bool) public frozenAccount;\r\n\t// 记录各个账户的冻结数目\r\n\t//mapping(address => uint256) public freezeOf;\r\n\t// 记录各个账户的可用数目\r\n\t//mapping(address => uint256) public canOf;\r\n\tstruct roundsOwn {\r\n\t\tuint256 addtime; // 添加时间\r\n\t\tuint256 addmoney; // 金额\r\n\t}\r\n\tmapping(address => roundsOwn[]) public mycan;\r\n    mapping(address => uint256) public tradenum;\r\n\t// 记录各个账户的释放时间\r\n\t//mapping(address => uint) public cronoutOf;\r\n\t// 记录各个账户的增量时间\r\n\tmapping(address => uint) public cronaddOf;\r\n\r\n\t/* 通知 */\r\n\tevent FrozenFunds(address target, bool frozen);\r\n\t// ------------------------------------------------------------------------\r\n\t// Constructor\r\n\t// ------------------------------------------------------------------------\r\n\tconstructor() public {\r\n\r\n\t\tsymbol = \"BTYC\";\r\n\t\tname = \"BTYC Coin\";\r\n\t\tdecimals = 18;\r\n\t\t_totalSupply = 84000000 * 10 ** uint(decimals);\r\n\r\n\t\tsellPrice = 510; //出售价格 1枚代币换多少以太 /1000000\r\n\t\tbuyPrice = 526; //购买价格 多少以太可购买1枚代币 /1000000\r\n\t\tsysPrice = 766; //挖矿的衡量值\r\n\t\tsysPer = 225; //挖矿的增量百分比 /100\r\n\r\n\t\tonceOuttime = 86400; //增量的时间 正式 \r\n\t\tonceAddTime = 864000; //挖矿的时间 正式\r\n\r\n\t\t//onceOuttime = 10; //增量的时间 测试  \r\n\t\t//onceAddTime = 10; //挖矿的时间 测试\r\n\t\tbalances[owner] = _totalSupply;\r\n\t\temit Transfer(address(0), owner, _totalSupply);\r\n\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Get the token balance for account `tokenOwner`\r\n\t// ------------------------------------------------------------------------\r\n\r\n\tfunction balanceOf(address tokenOwner) public view returns(uint balance) {\r\n\t\treturn balances[tokenOwner];\r\n\t}\r\n\r\n\tfunction addmoney(address _addr, uint256 _money) private{\r\n\t    roundsOwn stateVar;\r\n\t    uint256 _now = now;\r\n\t    stateVar.addtime = _now;\r\n\t    stateVar.addmoney = _money;\r\n\t\tmycan[_addr].push(stateVar);\r\n\t\ttradenum[_addr] = tradenum[_addr] + 1;\r\n\t}\r\n\r\n\r\n\tfunction getcanuse(address tokenOwner) public view returns(uint balance) {\r\n\t    uint256 _now = now;\r\n\t    uint256 _left = 0;\r\n\t    for(uint256 i = 0; i < tradenum[tokenOwner]; i++) {\r\n\t        roundsOwn mydata = mycan[tokenOwner][i];\r\n\t        uint256 stime = mydata.addtime;\r\n\t        uint256 smoney = mydata.addmoney;\r\n\t        uint256 lefttimes = _now - stime;\r\n\t        if(lefttimes >= onceOuttime) {\r\n\t            uint256 leftpers = lefttimes / onceOuttime;\r\n\t            if(leftpers > 100){\r\n\t                leftpers = 100;\r\n\t            }\r\n\t            _left = smoney*leftpers/100 + _left;\r\n\t        }\r\n\t    }\r\n\t    return(_left);\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Transfer the balance from token owner's account to `to` account\r\n\t// - Owner's account must have sufficient balance to transfer\r\n\t// - 0 value transfers are allowed\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transfer(address to, uint tokens) public returns(bool success) {\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\trequire(!frozenAccount[to]);\r\n\t\tuint256 canuse = getcanuse(msg.sender);\r\n\t\trequire(canuse >= tokens);\r\n\t\t//canOf[msg.sender] = myuseOf(msg.sender);\r\n\t\t//canOf[msg.sender] = canOf[msg.sender].sub(tokens);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(tokens);\r\n\t\tbalances[to] = balances[to].add(tokens);\r\n\t\taddmoney(to, tokens);\r\n\t\temit Transfer(msg.sender, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\t/*\r\n\tfunction buytoken(address user, uint256 amount) public{\r\n\t    balances[user] = balances[user].sub(amount);\r\n\t    //buyeth(amount);\r\n\t    emit Transfer(address(0), user, amount);\r\n\t}*/\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n\t// from the token owner's account\r\n\t//\r\n\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\t// recommends that there are no checks for the approval double-spend attack\r\n\t// as this should be implemented in user interfaces \r\n\t// ------------------------------------------------------------------------\r\n\tfunction approve(address spender, uint tokens) public returns(bool success) {\r\n\t\tallowed[msg.sender][spender] = tokens;\r\n\t\temit Approval(msg.sender, spender, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Transfer `tokens` from the `from` account to the `to` account\r\n\t// \r\n\t// The calling account must already have sufficient tokens approve(...)-d\r\n\t// for spending from the `from` account and\r\n\t// - From account must have sufficient balance to transfer\r\n\t// - Spender must have sufficient allowance to transfer\r\n\t// - 0 value transfers are allowed\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns(bool success) {\r\n\t\tbalances[from] = balances[from].sub(tokens);\r\n\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n\t\tbalances[to] = balances[to].add(tokens);\r\n\t\temit Transfer(from, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Returns the amount of tokens approved by the owner that can be\r\n\t// transferred to the spender's account\r\n\t// ------------------------------------------------------------------------\r\n\tfunction allowance(address tokenOwner, address spender) public view returns(uint remaining) {\r\n\t\treturn allowed[tokenOwner][spender];\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n\t// from the token owner's account. The `spender` contract function\r\n\t// `receiveApproval(...)` is then executed\r\n\t// ------------------------------------------------------------------------\r\n\tfunction approveAndCall(address spender, uint tokens, bytes data) public returns(bool success) {\r\n\t\tallowed[msg.sender][spender] = tokens;\r\n\t\temit Approval(msg.sender, spender, tokens);\r\n\t\tApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// 冻结 or 解冻账户\r\n\tfunction freezeAccount(address target, bool freeze) onlyOwner public {\r\n\t\tfrozenAccount[target] = freeze;\r\n\t\temit FrozenFunds(target, freeze);\r\n\t}\r\n\t// 设置销售购买价格\r\n\tfunction setPrices(uint256 newBuyPrice, uint256 newSellPrice, uint256 systyPrice, uint256 sysPermit) onlyOwner public {\r\n\t\tbuyPrice = newBuyPrice;\r\n\t\tsellPrice = newSellPrice;\r\n\t\tsysPrice = systyPrice;\r\n\t\tsysPer = sysPermit;\r\n\t}\r\n\t// 获取价格 \r\n\tfunction getprice() public view returns(uint256 bprice, uint256 spice, uint256 sprice, uint256 sper) {\r\n\t\tbprice = buyPrice;\r\n\t\tspice = sellPrice;\r\n\t\tsprice = sysPrice;\r\n\t\tsper = sysPer;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Total supply\r\n\t// ------------------------------------------------------------------------\r\n\tfunction totalSupply() public view returns(uint) {\r\n\t\treturn _totalSupply.sub(balances[address(0)]);\r\n\t}\r\n\t/// 向指定账户拨发资金\r\n\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n\t\trequire(!frozenAccount[target]);\r\n        if(cronaddOf[msg.sender] < 1) {\r\n\t\t\tcronaddOf[msg.sender] = now + onceAddTime;\r\n\t\t}\r\n\t\tbalances[target] += mintedAmount;\r\n\t\t//_totalSupply -= mintedAmount;\r\n\t\taddmoney(target, mintedAmount);\r\n\t\t//emit Transfer(0, this, mintedAmount);\r\n\t\temit Transfer(this, target, mintedAmount);\r\n\r\n\t}\r\n\t//用户每隔10天挖矿一次\r\n\tfunction mintme() public {\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\trequire(now > cronaddOf[msg.sender]);\r\n\t\tuint256 mintAmount = balances[msg.sender] * sysPer / 10000;\r\n\t\tbalances[msg.sender] += mintAmount;\r\n\t\t//_totalSupply -= mintAmount;\r\n\t\tcronaddOf[msg.sender] = now + onceAddTime;\r\n\t\taddmoney(msg.sender, mintAmount);\r\n\t\t//emit Transfer(0, this, mintAmount);\r\n\t\temit Transfer(this, msg.sender, mintAmount);\r\n\r\n\t}\r\n    \r\n\tfunction buy(uint256 money) public payable returns(uint256 amount) {\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\tamount = money * buyPrice;\r\n\t\tbalances[msg.sender] += amount;\r\n\t\tbalances[this] -= amount;  \r\n\t\t//_totalSupply -= amount;\r\n\t\taddmoney(msg.sender, amount);\r\n\t\t//msg.sender.transfer(money);\r\n\t\temit Transfer(this, msg.sender, amount); \r\n\t\treturn(amount);\r\n\t}\r\n\r\n\tfunction() payable public {\r\n\t\tbuy(msg.value);\r\n\t}\r\n\t/*\r\n\tfunction selleth(uint amount) public payable {\r\n\t    //address user = msg.sender;\r\n\t    //canOf[user] = myuseOf(user);\r\n\t    //require(balances[user] >= amount );\r\n\t    //uint money = amount * sellPrice;\r\n\t   // balances[msg.sender] += money;\r\n\t    owner.transfer(amount);\r\n\t}*/\r\n\r\n\tfunction sell(uint256 amount) public returns(bool success) {\r\n\t\t//address user = msg.sender;\r\n\t\t//canOf[msg.sender] = myuseOf(msg.sender);\r\n\t\t//require(!frozenAccount[msg.sender]);\r\n\t\tuint256 canuse = getcanuse(msg.sender);\r\n\t\trequire(canuse >= amount);\r\n\t\tuint moneys = amount / sellPrice;\r\n\t\trequire(msg.sender.send(moneys));\r\n\t\tbalances[msg.sender] -= amount;\r\n\t\tbalances[this] += amount;\r\n\t\t//_totalSupply += amount;\r\n\t\t//canOf[msg.sender] -= amount;\r\n\t\t\r\n\t\t//this.transfer(moneys);Transfer(this, msg.sender, revenue);  \r\n\t\temit Transfer(this, msg.sender, moneys);\r\n\t\t//canOf[user] -= amount;\r\n\t\treturn(true);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintme\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sysPer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getprice\",\"outputs\":[{\"name\":\"bprice\",\"type\":\"uint256\"},{\"name\":\"spice\",\"type\":\"uint256\"},{\"name\":\"sprice\",\"type\":\"uint256\"},{\"name\":\"sper\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onceAddTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getcanuse\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sysPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mycan\",\"outputs\":[{\"name\":\"addtime\",\"type\":\"uint256\"},{\"name\":\"addmoney\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cronaddOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"systyPrice\",\"type\":\"uint256\"},{\"name\":\"sysPermit\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradenum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onceOuttime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BTYCToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dc9e6b2e1726c9fc6afe1042941e7881e449f01a8a705530c6bd4e45171a85d9"}]}