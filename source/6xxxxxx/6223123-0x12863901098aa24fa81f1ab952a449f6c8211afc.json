{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/ext/CheckedERC20.sol\r\n\r\nlibrary CheckedERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function checkedTransfer(ERC20 _token, address _to, uint256 _value) internal {\r\n        if (_value == 0) {\r\n            return;\r\n        }\r\n        uint256 balance = _token.balanceOf(this);\r\n        _token.transfer(_to, _value);\r\n        require(_token.balanceOf(this) == balance.sub(_value), \"checkedTransfer: Final balance didn't match\");\r\n    }\r\n\r\n    function checkedTransferFrom(ERC20 _token, address _from, address _to, uint256 _value) internal {\r\n        if (_value == 0) {\r\n            return;\r\n        }\r\n        uint256 toBalance = _token.balanceOf(_to);\r\n        _token.transferFrom(_from, _to, _value);\r\n        require(_token.balanceOf(_to) == toBalance.add(_value), \"checkedTransfer: Final balance didn't match\");\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IBasicMultiToken.sol\r\n\r\ncontract IBasicMultiToken is ERC20 {\r\n    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\r\n    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\r\n\r\n    function tokensCount() public view returns(uint256);\r\n    function tokens(uint256 _index) public view returns(ERC20);\r\n    function allTokens() public view returns(ERC20[]);\r\n    function allDecimals() public view returns(uint8[]);\r\n    function allBalances() public view returns(uint256[]);\r\n    function allTokensDecimalsBalances() public view returns(ERC20[], uint8[], uint256[]);\r\n\r\n    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public;\r\n    function bundle(address _beneficiary, uint256 _amount) public;\r\n\r\n    function unbundle(address _beneficiary, uint256 _value) public;\r\n    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public;\r\n}\r\n\r\n// File: contracts/interface/IMultiToken.sol\r\n\r\ncontract IMultiToken is IBasicMultiToken {\r\n    event Update();\r\n    event Change(address indexed _fromToken, address indexed _toToken, address indexed _changer, uint256 _amount, uint256 _return);\r\n\r\n    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256 returnAmount);\r\n    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256 returnAmount);\r\n\r\n    function allWeights() public view returns(uint256[] _weights);\r\n    function allTokensDecimalsBalancesWeights() public view returns(ERC20[] _tokens, uint8[] _decimals, uint256[] _balances, uint256[] _weights);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/registry/MultiSeller.sol\r\n\r\ncontract MultiSeller is CanReclaimToken {\r\n    using SafeMath for uint256;\r\n    using CheckedERC20 for ERC20;\r\n    using CheckedERC20 for IMultiToken;\r\n\r\n    function() public payable {\r\n        require(tx.origin != msg.sender);\r\n    }\r\n\r\n    function sellOnApproveForOrigin(\r\n        IMultiToken _mtkn,\r\n        uint256 _amount,\r\n        ERC20 _throughToken,\r\n        address[] _exchanges,\r\n        bytes _datas,\r\n        uint[] _datasIndexes // including 0 and LENGTH values\r\n    )\r\n        public\r\n    {\r\n        sellOnApprove(\r\n            _mtkn,\r\n            _amount,\r\n            _throughToken,\r\n            _exchanges,\r\n            _datas,\r\n            _datasIndexes,\r\n            tx.origin\r\n        );\r\n    }\r\n\r\n    function sellOnApprove(\r\n        IMultiToken _mtkn,\r\n        uint256 _amount,\r\n        ERC20 _throughToken,\r\n        address[] _exchanges,\r\n        bytes _datas,\r\n        uint[] _datasIndexes, // including 0 and LENGTH values\r\n        address _for\r\n    )\r\n        public\r\n    {\r\n        if (_throughToken == address(0)) {\r\n            require(_mtkn.tokensCount() == _exchanges.length, \"sell: _mtkn should have the same tokens count as _exchanges\");\r\n        } else {\r\n            require(_mtkn.tokensCount() + 1 == _exchanges.length, \"sell: _mtkn should have tokens count + 1 equal _exchanges length\");\r\n        }\r\n        require(_datasIndexes.length == _exchanges.length + 1, \"sell: _datasIndexes should start with 0 and end with LENGTH\");\r\n\r\n        _mtkn.transferFrom(msg.sender, this, _amount);\r\n        _mtkn.unbundle(this, _amount);\r\n\r\n        for (uint i = 0; i < _exchanges.length; i++) {\r\n            bytes memory data = new bytes(_datasIndexes[i + 1] - _datasIndexes[i]);\r\n            for (uint j = _datasIndexes[i]; j < _datasIndexes[i + 1]; j++) {\r\n                data[j - _datasIndexes[i]] = _datas[j];\r\n            }\r\n            if (data.length == 0) {\r\n                continue;\r\n            }\r\n\r\n            if (i == _exchanges.length - 1 && _throughToken != address(0)) {\r\n                if (_throughToken.allowance(this, _exchanges[i]) == 0) {\r\n                    _throughToken.approve(_exchanges[i], uint256(-1));\r\n                }\r\n            } else {\r\n                ERC20 token = _mtkn.tokens(i);\r\n                if (_exchanges[i] == 0) {\r\n                    token.transfer(_for, token.balanceOf(this));\r\n                    continue;\r\n                }\r\n                token.approve(_exchanges[i], token.balanceOf(this));\r\n            }\r\n            require(_exchanges[i].call(data), \"sell: exchange arbitrary call failed\");\r\n        }\r\n\r\n        _for.transfer(address(this).balance);\r\n        if (_throughToken != address(0) && _throughToken.balanceOf(this) > 0) {\r\n            _throughToken.transfer(_for, _throughToken.balanceOf(this));\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mtkn\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_throughToken\",\"type\":\"address\"},{\"name\":\"_exchanges\",\"type\":\"address[]\"},{\"name\":\"_datas\",\"type\":\"bytes\"},{\"name\":\"_datasIndexes\",\"type\":\"uint256[]\"}],\"name\":\"sellOnApproveForOrigin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mtkn\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_throughToken\",\"type\":\"address\"},{\"name\":\"_exchanges\",\"type\":\"address[]\"},{\"name\":\"_datas\",\"type\":\"bytes\"},{\"name\":\"_datasIndexes\",\"type\":\"uint256[]\"},{\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"sellOnApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MultiSeller","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e49a1c830413c799c05e709ad8b793be99ccc2948e83b4308cd703f5db49fd1a"}]}