{"status":"1","message":"OK","result":[{"SourceCode":"// Verfication token for U42 token distribution\r\n//\r\n// Standard ERC-20 methods and the SafeMath library are adapated from OpenZeppelin's standard contract types\r\n// as at https://github.com/OpenZeppelin/openzeppelin-solidity/commit/5daaf60d11ee2075260d0f3adfb22b1c536db983\r\n// note that uint256 is used explicitly in place of uint\r\n\r\npragma solidity ^0.4.24;\r\n\r\n//safemath extensions added to uint256\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Verify_U42 {\r\n\t//use OZ SafeMath to avoid uint256 overflows\r\n\tusing SafeMath for uint256;\r\n\r\n\tstring public constant name = \"Verification token for U42 distribution\";\r\n\tstring public constant symbol = \"VU42\";\r\n\tuint8 public constant decimals = 18;\r\n\tuint256 public constant initialSupply = 525000000 * (10 ** uint256(decimals));\r\n\tuint256 internal totalSupply_ = initialSupply;\r\n\taddress public contractOwner;\r\n\r\n\t//token balances\r\n\tmapping(address => uint256) balances;\r\n\r\n\t//for each balance address, map allowed addresses to amount allowed\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\t//methods emit the following events (note that these are a subset \r\n\tevent Transfer (\r\n\t\taddress indexed from, \r\n\t\taddress indexed to, \r\n\t\tuint256 value );\r\n\r\n\tevent TokensBurned (\r\n\t\taddress indexed burner, \r\n\t\tuint256 value );\r\n\r\n\tevent Approval (\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value );\r\n\r\n\r\n\tconstructor() public {\r\n\t\t//contract creator holds all tokens at creation\r\n\t\tbalances[msg.sender] = totalSupply_;\r\n\r\n\t\t//record contract owner for later reference (e.g. in ownerBurn)\r\n\t\tcontractOwner=msg.sender;\r\n\r\n\t\t//indicate all tokens were sent to contract address\r\n\t\temit Transfer(address(0), msg.sender, totalSupply_);\r\n\t}\r\n\r\n\tfunction ownerBurn ( \r\n\t\t\tuint256 _value )\r\n\t\tpublic returns (\r\n\t\t\tbool success) {\r\n\r\n\t\t//only the contract owner can burn tokens\r\n\t\trequire(msg.sender == contractOwner);\r\n\r\n\t\t//can only burn tokens held by the owner\r\n\t\trequire(_value <= balances[contractOwner]);\r\n\r\n\t\t//total supply of tokens is decremented when burned\r\n\t\ttotalSupply_ = totalSupply_.sub(_value);\r\n\r\n\t\t//balance of the contract owner is reduced (the contract owner's tokens are burned)\r\n\t\tbalances[contractOwner] = balances[contractOwner].sub(_value);\r\n\r\n\t\t//burning tokens emits a transfer to 0, as well as TokensBurned\r\n\t\temit Transfer(contractOwner, address(0), _value);\r\n\t\temit TokensBurned(contractOwner, _value);\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\t\r\n\t\r\n\tfunction totalSupply ( ) public view returns (\r\n\t\tuint256 ) {\r\n\r\n\t\treturn totalSupply_;\r\n\t}\r\n\r\n\tfunction balanceOf (\r\n\t\t\taddress _owner ) \r\n\t\tpublic view returns (\r\n\t\t\tuint256 ) {\r\n\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tfunction transfer (\r\n\t\t\taddress _to, \r\n\t\t\tuint256 _value ) \r\n\t\tpublic returns (\r\n\t\t\tbool ) {\r\n\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n   \t//changing approval with this method has the same underlying issue as https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   \t//in that transaction order can be modified in a block to spend, change approval, spend again\r\n   \t//the method is kept for ERC-20 compatibility, but a set to zero, set again or use of the below increase/decrease should be used instead\r\n\tfunction approve (\r\n\t\t\taddress _spender, \r\n\t\t\tuint256 _value ) \r\n\t\tpublic returns (\r\n\t\t\tbool ) {\r\n\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseApproval (\r\n\t\t\taddress _spender, \r\n\t\t\tuint256 _addedValue ) \r\n\t\tpublic returns (\r\n\t\t\tbool ) {\r\n\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseApproval (\r\n\t\t\taddress _spender,\r\n\t\t\tuint256 _subtractedValue ) \r\n\t\tpublic returns (\r\n\t\t\tbool ) {\r\n\r\n\t\tuint256 oldValue = allowed[msg.sender][_spender];\r\n\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance (\r\n\t\t\taddress _owner, \r\n\t\t\taddress _spender ) \r\n\t\tpublic view returns (\r\n\t\t\tuint256 remaining ) {\r\n\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\tfunction transferFrom (\r\n\t\t\taddress _from, \r\n\t\t\taddress _to, \r\n\t\t\tuint256 _value ) \r\n\t\tpublic returns (\r\n\t\t\tbool ) {\r\n\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[_from]);\r\n\t\trequire(_value <= allowed[_from][msg.sender]);\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerBurn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Verify_U42","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://08e512ffbb98062f0ac80897ea15bf40bca3b3baf537a95df1e9a5a2ceaec8fd"}]}