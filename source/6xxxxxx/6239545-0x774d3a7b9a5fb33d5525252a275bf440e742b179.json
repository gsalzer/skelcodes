{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply()public view returns (uint256 total_Supply);\r\n  function balanceOf(address _owner)public view returns (uint256 balance);\r\n  function allowance(address _owner, address _spender)public view returns (uint256 remaining);\r\n  function transferFrom(address _from, address _to, uint256 _amount)public returns (bool ok);\r\n  function approve(address _spender, uint256 _amount)public returns (bool ok);\r\n  function transfer(address _to, uint256 _amount)public returns (bool ok);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n}\r\n\r\ncontract ROC2 is ERC20\r\n{\r\n    using SafeMath for uint256;\r\n    string public constant symbol = \"ROC2\";\r\n    string public constant name = \"Rasputin Party Mansion\";\r\n    uint8 public constant decimals = 10;\r\n    uint256 public _totalSupply = 27000000 * 10 ** 10;     // 27 milion supply           \r\n    // Balances for each account\r\n    mapping(address => uint256) balances;  \r\n    mapping (address => mapping (address => uint)) allowed;\r\n    // Owner of this contract\r\n    address public owner;\r\n    \r\n    uint public perTokenPrice = 0;\r\n    uint256 public owner_balance = 12000000 * 10 **10;\r\n    uint256 public one_ether_usd_price = 0;\r\n    uint256 public bonus_percentage = 0;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    \r\n    bool public ICO_state = false;\r\n    \r\n    modifier onlyOwner() {\r\n      if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n        }\r\n    \r\n    constructor () public\r\n    {\r\n        owner = msg.sender;\r\n        balances[owner] = owner_balance; // 12 million with owner\r\n        balances[this] = 15000000 * 10**10; // 15 million with contract address\r\n        perTokenPrice = 275;\r\n        bonus_percentage= 30;\r\n        \r\n        emit Transfer(0x00, owner, owner_balance);\r\n        emit Transfer(0x00, this, balances[this]);\r\n    }\r\n    \r\n    function () public payable \r\n    {\r\n        require(ICO_state && msg.value > 0);\r\n        distributeToken(msg.value,msg.sender);\r\n    }\r\n    \r\n     function distributeToken(uint val, address user_address ) private {\r\n         \r\n        require(one_ether_usd_price > 0);\r\n        uint256 tokens = ((one_ether_usd_price * val) )  / (perTokenPrice * 10**14); \r\n        require(balances[address(this)] >= tokens);\r\n         \r\n        if(bonus_percentage >0)\r\n        {\r\n            tokens = tokens.add(bonus_percentage.mul(tokens)/100); \r\n        }\r\n        \r\n            balances[address(this)] = balances[address(this)].sub(tokens);\r\n            balances[user_address] = balances[user_address].add(tokens);\r\n            emit Transfer(address(this), user_address, tokens);\r\n    }\r\n    \r\n    \r\n     // total supply of the tokens\r\n    function totalSupply() public view returns (uint256 total_Supply) {\r\n         total_Supply = _totalSupply;\r\n     }\r\n  \r\n     //  balance of a particular account\r\n     function balanceOf(address _owner)public view returns (uint256 balance) {\r\n         return balances[_owner];\r\n     }\r\n  \r\n     // Transfer the balance from owner's account to another account\r\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\r\n         require( _to != 0x0);\r\n         require(balances[msg.sender] >= _amount \r\n             && _amount >= 0\r\n             && balances[_to] + _amount >= balances[_to]);\r\n             balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n             balances[_to] = balances[_to].add(_amount);\r\n             emit Transfer(msg.sender, _to, _amount);\r\n             return true;\r\n     }\r\n  \r\n     // Send _value amount of tokens from address _from to address _to\r\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n     // fees in sub-currencies; the command should fail unless the _from account has\r\n     // deliberately authorized the sender of the message via some mechanism; we propose\r\n     // these standardized APIs for approval:\r\n     function transferFrom(\r\n         address _from,\r\n         address _to,\r\n         uint256 _amount\r\n     )public returns (bool success) {\r\n        require(_to != 0x0); \r\n         require(balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount >= 0\r\n             && balances[_to] + _amount >= balances[_to]);\r\n             balances[_from] = balances[_from].sub(_amount);\r\n             allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n             balances[_to] = balances[_to].add(_amount);\r\n             emit Transfer(_from, _to, _amount);\r\n             return true;\r\n             }\r\n \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\r\n         allowed[msg.sender][_spender] = _amount;\r\n         emit Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n   }\r\n   \r\n   \t//In case the ownership needs to be transferred\r\n\tfunction transferOwnership(address newOwner)public onlyOwner\r\n\t{\r\n\t    require( newOwner != 0x0);\r\n\t    balances[newOwner] = balances[newOwner].add(balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    address oldOwner = owner;\r\n\t    owner = newOwner;\r\n\t    \r\n\t    emit Transfer(oldOwner, owner, balances[newOwner]);\r\n\t}\r\n\t\r\n\t //Burning tokens should be called after ICo ends\r\n    function burntokens(uint256 burn_amount) external onlyOwner {\r\n        require(burn_amount >0 && burn_amount <= balances[address(this)]);\r\n         _totalSupply = (_totalSupply).sub(burn_amount);\r\n         balances[address(this)] = (balances[address(this)].sub(burn_amount));\r\n          emit Transfer(address(this), 0x00, burn_amount);\r\n     }\r\n\t\r\n\t// drain ether called by only owner\r\n\tfunction drain() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function setbonusprcentage(uint256 percent) public onlyOwner{ // percent to be 30,20,10\r\n        \r\n        bonus_percentage = percent;\r\n    }\r\n    \r\n    //price should be in cents\r\n    function setTokenPrice(uint _price) public onlyOwner{\r\n        \r\n        perTokenPrice = _price;\r\n    }\r\n    \r\n    // need to be called before the ICO to set ether price in USD upto 8 decimals. \r\n    function setEtherPrice(uint etherPrice) public onlyOwner\r\n    {\r\n        one_ether_usd_price = etherPrice;\r\n    }\r\n    \r\n    function startICO() public onlyOwner{\r\n        \r\n        ICO_state = true;\r\n    }\r\n    \r\n    function StopICO() public onlyOwner{\r\n        ICO_state = false;\r\n    }\r\n    \r\n    // used to send tokens to other contract and notify\r\n    \r\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setbonusprcentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherPrice\",\"type\":\"uint256\"}],\"name\":\"setEtherPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus_percentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_state\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burn_amount\",\"type\":\"uint256\"}],\"name\":\"burntokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"one_ether_usd_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ROC2","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ebd1448e269a566d90c8f1df78c0818c3265ee52a9908539a762e19709fb9d72"}]}