{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract TestVesting is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  address public teamWallet;\r\n \r\n  \r\n  uint256 public teamTimeLock = 60 minutes;\r\n \r\n  \r\n  //amount of allocation\r\n  uint256 public teamAllocation = 3 * (10 ** 1) * (10 ** 5);\r\n  \r\n  uint256 public totalAllocation = 3 * (10 ** 1) * (10 ** 5);\r\n  \r\n  uint256 public teamStageSetting = 6;\r\n  \r\n  ERC20Basic public token;\r\n  //token start time\r\n  uint256 public start;\r\n  //lock start time\r\n  uint256 public lockStartTime; \r\n   /** Reserve allocations */\r\n    mapping(address => uint256) public allocations;\r\n    \r\n    mapping(address => uint256) public stageSettings;\r\n    \r\n    mapping(address => uint256) public timeLockDurations;\r\n\r\n    /** How many tokens each reserve wallet has claimed */\r\n    mapping(address => uint256) public releasedAmounts;\r\n    \r\n    modifier onlyReserveWallets {\r\n        require(allocations[msg.sender] > 0);\r\n        _;\r\n    }\r\n    function TestVesting(ERC20Basic _token,\r\n                          address _teamWallet,\r\n                          uint256 _start,\r\n                          uint256 _lockTime)public{\r\n        require(_start > 0);\r\n        require(_lockTime > 0);\r\n        require(_start.add(_lockTime) > 0);\r\n        require(_teamWallet != address(0));\r\n        \r\n        token = _token;\r\n        teamWallet = _teamWallet;\r\n      \r\n        start = _start;\r\n        lockStartTime = start.add(_lockTime);\r\n    }\r\n    \r\n    function allocateToken() onlyOwner public{\r\n        require(block.timestamp > lockStartTime);\r\n        //only claim  once\r\n        require(allocations[teamWallet] == 0);\r\n        require(token.balanceOf(address(this)) >= totalAllocation);\r\n        \r\n        allocations[teamWallet] = teamAllocation;\r\n        \r\n        stageSettings[teamWallet] = teamStageSetting;\r\n       \r\n        timeLockDurations[teamWallet] = teamTimeLock;\r\n       \r\n    }\r\n    function releaseToken() onlyReserveWallets public{\r\n        uint256 totalUnlocked = unlockAmount();\r\n        require(totalUnlocked <= allocations[msg.sender]);\r\n        require(releasedAmounts[msg.sender] < totalUnlocked);\r\n        uint256 payment = totalUnlocked.sub(releasedAmounts[msg.sender]);\r\n        \r\n        releasedAmounts[msg.sender] = totalUnlocked;\r\n        require(token.transfer(msg.sender, payment));\r\n    }\r\n    function unlockAmount() public view onlyReserveWallets returns(uint256){\r\n        uint256 stage = vestStage();\r\n        uint256 totalUnlocked = stage.mul(allocations[msg.sender]).div(stageSettings[msg.sender]);\r\n        return totalUnlocked;\r\n    }\r\n    \r\n    function vestStage() public view onlyReserveWallets returns(uint256){\r\n        uint256 vestingMonths = timeLockDurations[msg.sender].div(stageSettings[msg.sender]);\r\n        uint256 stage = (block.timestamp.sub(lockStartTime)).div(vestingMonths);\r\n        \r\n        if(stage > stageSettings[msg.sender]){\r\n            stage = stageSettings[msg.sender];\r\n        }\r\n        return stage;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stageSettings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamStageSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeLockDurations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasedAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_teamWallet\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TestVesting","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001ebd8d3ca115451b9b6bbaa7ee2f7b0f96e49fd8000000000000000000000000b6ba2b46bd4357b7a1b4f4e8b4f6caf90eb794df000000000000000000000000000000000000000000000000000000005b73ea64000000000000000000000000000000000000000000000000000000000000012c","Library":"","SwarmSource":"bzzr://0a1972208016959aa22ef35424ddc370e70bd2ca16d2a87ef02a36ba9bc99993"}]}