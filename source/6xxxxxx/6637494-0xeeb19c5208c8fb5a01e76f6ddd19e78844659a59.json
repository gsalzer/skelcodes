{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n// <ORACLIZE_API>\r\n/*\r\nCopyright (c) 2015-2016 Oraclize SRL\r\nCopyright (c) 2016 Oraclize LTD\r\n\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\n\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\n// This api is currently targeted at 0.4.18, please import oraclizeAPI_pre0.4.sol or oraclizeAPI_0.4 where necessary\r\n\r\n//pragma solidity ^0.4.18;// Incompatible compiler version... please select one stated within pragma solidity or use different oraclizeAPI version\r\n\r\ncontract OraclizeI {\r\n    address public cbAddress;\r\n    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);\r\n    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\r\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);\r\n    function getPrice(string _datasource) public returns (uint _dsprice);\r\n    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\r\n    function setProofType(byte _proofType) external;\r\n    function setCustomGasPrice(uint _gasPrice) external;\r\n    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);\r\n}\r\n\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() public returns (address _addr);\r\n}\r\n\r\n/*\r\nBegin solidity-cborutils\r\n\r\nhttps://github.com/smartcontractkit/solidity-cborutils\r\n\r\nMIT License\r\n\r\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n */\r\n\r\nlibrary Buffer {\r\n    struct buffer {\r\n        bytes buf;\r\n        uint capacity;\r\n    }\r\n\r\n    function init(buffer memory buf, uint _capacity) internal pure {\r\n        uint capacity = _capacity;\r\n        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);\r\n        // Allocate space for the buffer data\r\n        buf.capacity = capacity;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(buf, ptr)\r\n            mstore(ptr, 0)\r\n            mstore(0x40, add(ptr, capacity))\r\n        }\r\n    }\r\n\r\n    function resize(buffer memory buf, uint capacity) private pure {\r\n        bytes memory oldbuf = buf.buf;\r\n        init(buf, capacity);\r\n        append(buf, oldbuf);\r\n    }\r\n\r\n    function max(uint a, uint b) private pure returns(uint) {\r\n        if(a > b) {\r\n            return a;\r\n        }\r\n        return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte array to the end of the buffer. Resizes if doing so\r\n     *      would exceed the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer.\r\n     */\r\n    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {\r\n        if(data.length + buf.buf.length > buf.capacity) {\r\n            resize(buf, max(buf.capacity, data.length) * 2);\r\n        }\r\n\r\n        uint dest;\r\n        uint src;\r\n        uint len = data.length;\r\n        assembly {\r\n            // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n            // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n            // Start address = buffer address + buffer length + sizeof(buffer length)\r\n            dest := add(add(bufptr, buflen), 32)\r\n            // Update buffer length\r\n            mstore(bufptr, add(buflen, mload(data)))\r\n            src := add(data, 32)\r\n        }\r\n\r\n        // Copy word-length chunks while possible\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\r\n     * exceed the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer.\r\n     */\r\n    function append(buffer memory buf, uint8 data) internal pure {\r\n        if(buf.buf.length + 1 > buf.capacity) {\r\n            resize(buf, buf.capacity * 2);\r\n        }\r\n\r\n        assembly {\r\n            // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n            // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n            // Address = buffer address + buffer length + sizeof(buffer length)\r\n            let dest := add(add(bufptr, buflen), 32)\r\n            mstore8(dest, data)\r\n            // Update buffer length\r\n            mstore(bufptr, add(buflen, 1))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\r\n     * exceed the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer.\r\n     */\r\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\r\n        if(len + buf.buf.length > buf.capacity) {\r\n            resize(buf, max(buf.capacity, len) * 2);\r\n        }\r\n\r\n        uint mask = 256 ** len - 1;\r\n        assembly {\r\n            // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n            // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n            // Address = buffer address + buffer length + sizeof(buffer length) + len\r\n            let dest := add(add(bufptr, buflen), len)\r\n            mstore(dest, or(and(mload(dest), not(mask)), data))\r\n            // Update buffer length\r\n            mstore(bufptr, add(buflen, len))\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\nlibrary CBOR {\r\n    using Buffer for Buffer.buffer;\r\n\r\n    uint8 private constant MAJOR_TYPE_INT = 0;\r\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\r\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\r\n    uint8 private constant MAJOR_TYPE_STRING = 3;\r\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\r\n    uint8 private constant MAJOR_TYPE_MAP = 5;\r\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\r\n\r\n    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private pure {\r\n        if(value <= 23) {\r\n            buf.append(uint8((major << 5) | value));\r\n        } else if(value <= 0xFF) {\r\n            buf.append(uint8((major << 5) | 24));\r\n            buf.appendInt(value, 1);\r\n        } else if(value <= 0xFFFF) {\r\n            buf.append(uint8((major << 5) | 25));\r\n            buf.appendInt(value, 2);\r\n        } else if(value <= 0xFFFFFFFF) {\r\n            buf.append(uint8((major << 5) | 26));\r\n            buf.appendInt(value, 4);\r\n        } else if(value <= 0xFFFFFFFFFFFFFFFF) {\r\n            buf.append(uint8((major << 5) | 27));\r\n            buf.appendInt(value, 8);\r\n        }\r\n    }\r\n\r\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\r\n        buf.append(uint8((major << 5) | 31));\r\n    }\r\n\r\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\r\n        encodeType(buf, MAJOR_TYPE_INT, value);\r\n    }\r\n\r\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\r\n        if(value >= 0) {\r\n            encodeType(buf, MAJOR_TYPE_INT, uint(value));\r\n        } else {\r\n            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\r\n        }\r\n    }\r\n\r\n    function encodeBytes(Buffer.buffer memory buf, bytes value) internal pure {\r\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\r\n        buf.append(value);\r\n    }\r\n\r\n    function encodeString(Buffer.buffer memory buf, string value) internal pure {\r\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\r\n        buf.append(bytes(value));\r\n    }\r\n\r\n    function startArray(Buffer.buffer memory buf) internal pure {\r\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\r\n    }\r\n\r\n    function startMap(Buffer.buffer memory buf) internal pure {\r\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\r\n    }\r\n\r\n    function endSequence(Buffer.buffer memory buf) internal pure {\r\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\r\n    }\r\n}\r\n\r\n/*\r\nEnd solidity-cborutils\r\n */\r\n\r\ncontract usingOraclize {\r\n    uint constant day = 60*60*24;\r\n    uint constant week = 60*60*24*7;\r\n    uint constant month = 60*60*24*30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofType_Ledger = 0x30;\r\n    byte constant proofType_Android = 0x40;\r\n    byte constant proofType_Native = 0xF0;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n\r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\r\n            oraclize_setNetwork(networkID_auto);\r\n\r\n        if(address(oraclize) != OAR.getAddress())\r\n            oraclize = OraclizeI(OAR.getAddress());\r\n\r\n        _;\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        _;\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\r\n      return oraclize_setNetwork();\r\n      networkID; // silence the warning and remain backwards compatible\r\n    }\r\n    function oraclize_setNetwork() internal returns(bool){\r\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\r\n            oraclize_setNetworkName(\"eth_mainnet\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\r\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\r\n            oraclize_setNetworkName(\"eth_ropsten3\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\r\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\r\n            oraclize_setNetworkName(\"eth_kovan\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\r\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\r\n            oraclize_setNetworkName(\"eth_rinkeby\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\r\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\r\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\r\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function __callback(bytes32 myid, string result) public {\r\n        __callback(myid, result, new bytes(0));\r\n    }\r\n    function __callback(bytes32 myid, string result, bytes proof) public {\r\n      return;\r\n      myid; result; proof; // Silence compiler warnings\r\n    }\r\n\r\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource);\r\n    }\r\n\r\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN.value(price)(0, datasource, args);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN.value(price)(0, datasource, args);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }\r\n\r\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\r\n        return oraclize.randomDS_getSessionPubKeyHash();\r\n    }\r\n\r\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n    function parseAddr(string _a) internal pure returns (address){\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i=2; i<2+2*20; i+=2){\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i+1]);\r\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\r\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\r\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1*16+b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n    function strCompare(string _a, string _b) internal pure returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function indexOf(string _haystack, string _needle) internal pure returns (int) {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\r\n            return -1;\r\n        else if(h.length > (2**128 -1))\r\n            return -1;\r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0])\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\r\n                    {\r\n                        subindex++;\r\n                    }\r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal pure returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal pure returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i=0; i<bresult.length; i++){\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n                if (decimals){\r\n                   if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10**_b;\r\n        return mint;\r\n    }\r\n\r\n    function uint2str(uint i) internal pure returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0){\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    using CBOR for Buffer.buffer;\r\n    function stra2cbor(string[] arr) internal pure returns (bytes) {\r\n        safeMemoryCleaner();\r\n        Buffer.buffer memory buf;\r\n        Buffer.init(buf, 1024);\r\n        buf.startArray();\r\n        for (uint i = 0; i < arr.length; i++) {\r\n            buf.encodeString(arr[i]);\r\n        }\r\n        buf.endSequence();\r\n        return buf.buf;\r\n    }\r\n\r\n    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\r\n        safeMemoryCleaner();\r\n        Buffer.buffer memory buf;\r\n        Buffer.init(buf, 1024);\r\n        buf.startArray();\r\n        for (uint i = 0; i < arr.length; i++) {\r\n            buf.encodeBytes(arr[i]);\r\n        }\r\n        buf.endSequence();\r\n        return buf.buf;\r\n    }\r\n\r\n    string oraclize_network_name;\r\n    function oraclize_setNetworkName(string _network_name) internal {\r\n        oraclize_network_name = _network_name;\r\n    }\r\n\r\n    function oraclize_getNetworkName() internal view returns (string) {\r\n        return oraclize_network_name;\r\n    }\r\n\r\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\r\n        require((_nbytes > 0) && (_nbytes <= 32));\r\n        // Convert from seconds to ledger timer ticks\r\n        _delay *= 10;\r\n        bytes memory nbytes = new bytes(1);\r\n        nbytes[0] = byte(_nbytes);\r\n        bytes memory unonce = new bytes(32);\r\n        bytes memory sessionKeyHash = new bytes(32);\r\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\r\n        assembly {\r\n            mstore(unonce, 0x20)\r\n            // the following variables can be relaxed\r\n            // check relaxed random contract under ethereum-examples repo\r\n            // for an idea on how to override and replace comit hash vars\r\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\r\n            mstore(sessionKeyHash, 0x20)\r\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\r\n        }\r\n        bytes memory delay = new bytes(32);\r\n        assembly {\r\n            mstore(add(delay, 0x20), _delay)\r\n        }\r\n\r\n        bytes memory delay_bytes8 = new bytes(8);\r\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\r\n\r\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\r\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\r\n\r\n        bytes memory delay_bytes8_left = new bytes(8);\r\n\r\n        assembly {\r\n            let x := mload(add(delay_bytes8, 0x20))\r\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\r\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\r\n\r\n        }\r\n\r\n        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\r\n        return queryId;\r\n    }\r\n\r\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\r\n        oraclize_randomDS_args[queryId] = commitment;\r\n    }\r\n\r\n    mapping(bytes32=>bytes32) oraclize_randomDS_args;\r\n    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\r\n\r\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\r\n        bool sigok;\r\n        address signer;\r\n\r\n        bytes32 sigr;\r\n        bytes32 sigs;\r\n\r\n        bytes memory sigr_ = new bytes(32);\r\n        uint offset = 4+(uint(dersig[3]) - 0x20);\r\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\r\n        bytes memory sigs_ = new bytes(32);\r\n        offset += 32 + 2;\r\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\r\n\r\n        assembly {\r\n            sigr := mload(add(sigr_, 32))\r\n            sigs := mload(add(sigs_, 32))\r\n        }\r\n\r\n\r\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\r\n        if (address(keccak256(pubkey)) == signer) return true;\r\n        else {\r\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\r\n            return (address(keccak256(pubkey)) == signer);\r\n        }\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\r\n        bool sigok;\r\n\r\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\r\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\r\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\r\n\r\n        bytes memory appkey1_pubkey = new bytes(64);\r\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\r\n\r\n        bytes memory tosign2 = new bytes(1+65+32);\r\n        tosign2[0] = byte(1); //role\r\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\r\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\r\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\r\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\r\n\r\n        if (sigok == false) return false;\r\n\r\n\r\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\r\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\r\n\r\n        bytes memory tosign3 = new bytes(1+65);\r\n        tosign3[0] = 0xFE;\r\n        copyBytes(proof, 3, 65, tosign3, 1);\r\n\r\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\r\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\r\n\r\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\r\n\r\n        return sigok;\r\n    }\r\n\r\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\r\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\r\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\r\n\r\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\r\n        require(proofVerified);\r\n\r\n        _;\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\r\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\r\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\r\n\r\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\r\n        if (proofVerified == false) return 2;\r\n\r\n        return 0;\r\n    }\r\n\r\n    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\r\n        bool match_ = true;\r\n\r\n        require(prefix.length == n_random_bytes);\r\n\r\n        for (uint256 i=0; i< n_random_bytes; i++) {\r\n            if (content[i] != prefix[i]) match_ = false;\r\n        }\r\n\r\n        return match_;\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\r\n\r\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\r\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\r\n        bytes memory keyhash = new bytes(32);\r\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\r\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\r\n\r\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\r\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\r\n\r\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\r\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\r\n\r\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\r\n        // This is to verify that the computed args match with the ones specified in the query.\r\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\r\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\r\n\r\n        bytes memory sessionPubkey = new bytes(64);\r\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\r\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\r\n\r\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\r\n        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n            delete oraclize_randomDS_args[queryId];\r\n        } else return false;\r\n\r\n\r\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\r\n        bytes memory tosign1 = new bytes(32+8+1+32);\r\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\r\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\r\n\r\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\r\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\r\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\r\n        }\r\n\r\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\r\n    }\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\r\n        uint minLength = length + toOffset;\r\n\r\n        // Buffer too small\r\n        require(to.length >= minLength); // Should be a better way?\r\n\r\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\r\n        uint i = 32 + fromOffset;\r\n        uint j = 32 + toOffset;\r\n\r\n        while (i < (32 + fromOffset + length)) {\r\n            assembly {\r\n                let tmp := mload(add(from, i))\r\n                mstore(add(to, j), tmp)\r\n            }\r\n            i += 32;\r\n            j += 32;\r\n        }\r\n\r\n        return to;\r\n    }\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\r\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\r\n        // We do our own memory management here. Solidity uses memory offset\r\n        // 0x40 to store the current end of memory. We write past it (as\r\n        // writes are memory extensions), but don't update the offset so\r\n        // Solidity will reuse it. The memory used here is only needed for\r\n        // this context.\r\n\r\n        // FIXME: inline assembly can't access return values\r\n        bool ret;\r\n        address addr;\r\n\r\n        assembly {\r\n            let size := mload(0x40)\r\n            mstore(size, hash)\r\n            mstore(add(size, 32), v)\r\n            mstore(add(size, 64), r)\r\n            mstore(add(size, 96), s)\r\n\r\n            // NOTE: we can reuse the request memory because we deal with\r\n            //       the return code\r\n            ret := call(3000, 1, 0, size, 128, size, 32)\r\n            addr := mload(size)\r\n        }\r\n\r\n        return (ret, addr);\r\n    }\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        if (sig.length != 65)\r\n          return (false, 0);\r\n\r\n        // The signature format is a compact form of:\r\n        //   {bytes32 r}{bytes32 s}{uint8 v}\r\n        // Compact means, uint8 is not padded to 32 bytes.\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n\r\n            // Here we are loading the last 32 bytes. We exploit the fact that\r\n            // 'mload' will pad with zeroes if we overread.\r\n            // There is no 'mload8' to do this, but that would be nicer.\r\n            v := byte(0, mload(add(sig, 96)))\r\n\r\n            // Alternative solution:\r\n            // 'byte' is not working due to the Solidity parser, so lets\r\n            // use the second best option, 'and'\r\n            // v := and(mload(add(sig, 65)), 255)\r\n        }\r\n\r\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\r\n        // to match the YP range of [27, 28]\r\n        //\r\n        // geth uses [0, 1] and some clients have followed. This might change, see:\r\n        //  https://github.com/ethereum/go-ethereum/issues/2053\r\n        if (v < 27)\r\n          v += 27;\r\n\r\n        if (v != 27 && v != 28)\r\n            return (false, 0);\r\n\r\n        return safer_ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    function safeMemoryCleaner() internal pure {\r\n        assembly {\r\n            let fmem := mload(0x40)\r\n            codecopy(fmem, codesize, sub(msize, fmem))\r\n        }\r\n    }\r\n\r\n}\r\n// </ORACLIZE_API>\r\n\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender == owner)\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary strings {\r\n    struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) private {\r\n        // Copy word-length chunks while possible\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire string.\r\n     * @param self The string to make a slice from.\r\n     * @return A newly allocated slice containing the entire string.\r\n     */\r\n    function toSlice(string self) internal returns (slice) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the length of a null-terminated bytes32 string.\r\n     * @param self The value to find the length of.\r\n     * @return The length of the string, from 0 to 32.\r\n     */\r\n    function len(bytes32 self) internal returns (uint) {\r\n        uint ret;\r\n        if (self == 0)\r\n            return 0;\r\n        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\r\n            ret += 16;\r\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\r\n        }\r\n        if (self & 0xffffffffffffffff == 0) {\r\n            ret += 8;\r\n            self = bytes32(uint(self) / 0x10000000000000000);\r\n        }\r\n        if (self & 0xffffffff == 0) {\r\n            ret += 4;\r\n            self = bytes32(uint(self) / 0x100000000);\r\n        }\r\n        if (self & 0xffff == 0) {\r\n            ret += 2;\r\n            self = bytes32(uint(self) / 0x10000);\r\n        }\r\n        if (self & 0xff == 0) {\r\n            ret += 1;\r\n        }\r\n        return 32 - ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\r\n     *      null-termintaed utf-8 string.\r\n     * @param self The bytes32 value to convert to a slice.\r\n     * @return A new slice containing the value of the input argument up to the\r\n     *         first null.\r\n     */\r\n    function toSliceB32(bytes32 self) internal returns (slice ret) {\r\n        // Allocate space for `self` in memory, copy it there, and point ret at it\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(0x40, add(ptr, 0x20))\r\n            mstore(ptr, self)\r\n            mstore(add(ret, 0x20), ptr)\r\n        }\r\n        ret._len = len(self);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a new slice containing the same data as the current slice.\r\n     * @param self The slice to copy.\r\n     * @return A new slice containing the same data as `self`.\r\n     */\r\n    function copy(slice self) internal returns (slice) {\r\n        return slice(self._len, self._ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Copies a slice to a new string.\r\n     * @param self The slice to copy.\r\n     * @return A newly allocated string containing the slice's text.\r\n     */\r\n    function toString(slice self) internal returns (string) {\r\n        var ret = new string(self._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        memcpy(retptr, self._ptr, self._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the length in runes of the slice. Note that this operation\r\n     *      takes time proportional to the length of the slice; avoid using it\r\n     *      in loops, and call `slice.empty()` if you only need to know whether\r\n     *      the slice is empty or not.\r\n     * @param self The slice to operate on.\r\n     * @return The length of the slice in runes.\r\n     */\r\n    function len(slice self) internal returns (uint) {\r\n        // Starting at ptr-31 means the LSB will be the byte we care about\r\n        var ptr = self._ptr - 31;\r\n        var end = ptr + self._len;\r\n        for (uint len = 0; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the slice is empty (has a length of 0).\r\n     * @param self The slice to operate on.\r\n     * @return True if the slice is empty, False otherwise.\r\n     */\r\n    function empty(slice self) internal returns (bool) {\r\n        return self._len == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a positive number if `other` comes lexicographically after\r\n     *      `self`, a negative number if it comes before, or zero if the\r\n     *      contents of the two slices are equal. Comparison is done per-rune,\r\n     *      on unicode codepoints.\r\n     * @param self The first slice to compare.\r\n     * @param other The second slice to compare.\r\n     * @return The result of the comparison.\r\n     */\r\n    function compare(slice self, slice other) internal returns (int) {\r\n        uint shortest = self._len;\r\n        if (other._len < self._len)\r\n            shortest = other._len;\r\n\r\n        var selfptr = self._ptr;\r\n        var otherptr = other._ptr;\r\n        for (uint idx = 0; idx < shortest; idx += 32) {\r\n            uint a;\r\n            uint b;\r\n            assembly {\r\n                a := mload(selfptr)\r\n                b := mload(otherptr)\r\n            }\r\n            if (a != b) {\r\n                // Mask out irrelevant bytes and check again\r\n                uint mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\r\n                var diff = (a & mask) - (b & mask);\r\n                if (diff != 0)\r\n                    return int(diff);\r\n            }\r\n            selfptr += 32;\r\n            otherptr += 32;\r\n        }\r\n        return int(self._len) - int(other._len);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the two slices contain the same text.\r\n     * @param self The first slice to compare.\r\n     * @param self The second slice to compare.\r\n     * @return True if the slices are equal, false otherwise.\r\n     */\r\n    function equals(slice self, slice other) internal returns (bool) {\r\n        return compare(self, other) == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\r\n     *      slice to point to the next rune and returning `self`.\r\n     * @param self The slice to operate on.\r\n     * @param rune The slice that will contain the first rune.\r\n     * @return `rune`.\r\n     */\r\n    function nextRune(slice self, slice rune) internal returns (slice) {\r\n        rune._ptr = self._ptr;\r\n\r\n        if (self._len == 0) {\r\n            rune._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        uint len;\r\n        uint b;\r\n        // Load the first byte of the rune into the LSBs of b\r\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\r\n        if (b < 0x80) {\r\n            len = 1;\r\n        } else if(b < 0xE0) {\r\n            len = 2;\r\n        } else if(b < 0xF0) {\r\n            len = 3;\r\n        } else {\r\n            len = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (len > self._len) {\r\n            rune._len = self._len;\r\n            self._ptr += self._len;\r\n            self._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        self._ptr += len;\r\n        self._len -= len;\r\n        rune._len = len;\r\n        return rune;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the first rune in the slice, advancing the slice to point\r\n     *      to the next rune.\r\n     * @param self The slice to operate on.\r\n     * @return A slice containing only the first rune from `self`.\r\n     */\r\n    function nextRune(slice self) internal returns (slice ret) {\r\n        nextRune(self, ret);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the number of the first codepoint in the slice.\r\n     * @param self The slice to operate on.\r\n     * @return The number of the first codepoint in the slice.\r\n     */\r\n    function ord(slice self) internal returns (uint ret) {\r\n        if (self._len == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint word;\r\n        uint len;\r\n        uint div = 2 ** 248;\r\n\r\n        // Load the rune into the MSBs of b\r\n        assembly { word:= mload(mload(add(self, 32))) }\r\n        var b = word / div;\r\n        if (b < 0x80) {\r\n            ret = b;\r\n            len = 1;\r\n        } else if(b < 0xE0) {\r\n            ret = b & 0x1F;\r\n            len = 2;\r\n        } else if(b < 0xF0) {\r\n            ret = b & 0x0F;\r\n            len = 3;\r\n        } else {\r\n            ret = b & 0x07;\r\n            len = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (len > self._len) {\r\n            return 0;\r\n        }\r\n\r\n        for (uint i = 1; i < len; i++) {\r\n            div = div / 256;\r\n            b = (word / div) & 0xFF;\r\n            if (b & 0xC0 != 0x80) {\r\n                // Invalid UTF-8 sequence\r\n                return 0;\r\n            }\r\n            ret = (ret * 64) | (b & 0x3F);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the keccak-256 hash of the slice.\r\n     * @param self The slice to hash.\r\n     * @return The hash of the slice.\r\n     */\r\n    function keccak(slice self) internal returns (bytes32 ret) {\r\n        assembly {\r\n            ret := sha3(mload(add(self, 32)), mload(self))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if `self` starts with `needle`.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function startsWith(slice self, slice needle) internal returns (bool) {\r\n        if (self._len < needle._len) {\r\n            return false;\r\n        }\r\n\r\n        if (self._ptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let len := mload(needle)\r\n            let selfptr := mload(add(self, 0x20))\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n        }\r\n        return equal;\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` starts with `needle`, `needle` is removed from the\r\n     *      beginning of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function beyond(slice self, slice needle) internal returns (slice) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        bool equal = true;\r\n        if (self._ptr != needle._ptr) {\r\n            assembly {\r\n                let len := mload(needle)\r\n                let selfptr := mload(add(self, 0x20))\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n            self._ptr += needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the slice ends with `needle`.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function endsWith(slice self, slice needle) internal returns (bool) {\r\n        if (self._len < needle._len) {\r\n            return false;\r\n        }\r\n\r\n        var selfptr = self._ptr + self._len - needle._len;\r\n\r\n        if (selfptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let len := mload(needle)\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n        }\r\n\r\n        return equal;\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` ends with `needle`, `needle` is removed from the\r\n     *      end of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function until(slice self, slice needle) internal returns (slice) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        var selfptr = self._ptr + self._len - needle._len;\r\n        bool equal = true;\r\n        if (selfptr != needle._ptr) {\r\n            assembly {\r\n                let len := mload(needle)\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    // Returns the memory address of the first byte of the first occurrence of\r\n    // `needle` in `self`, or the first byte after `self` if not found.\r\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n        uint idx;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 68 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    let end := add(selfptr, sub(selflen, needlelen))\r\n                    ptr := selfptr\r\n                    loop:\r\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := add(ptr, 1)\r\n                    jumpi(loop, lt(sub(ptr, 1), end))\r\n                    ptr := add(selfptr, selflen)\r\n                    exit:\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := sha3(needleptr, needlelen) }\r\n                ptr = selfptr;\r\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := sha3(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr;\r\n                    ptr += 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr + selflen;\r\n    }\r\n\r\n    // Returns the memory address of the first byte after the last occurrence of\r\n    // `needle` in `self`, or the address of `self` if not found.\r\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 69 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    ptr := add(selfptr, sub(selflen, needlelen))\r\n                    loop:\r\n                    jumpi(ret, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := sub(ptr, 1)\r\n                    jumpi(loop, gt(add(ptr, 1), selfptr))\r\n                    ptr := selfptr\r\n                    jump(exit)\r\n                    ret:\r\n                    ptr := add(ptr, needlelen)\r\n                    exit:\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := sha3(needleptr, needlelen) }\r\n                ptr = selfptr + (selflen - needlelen);\r\n                while (ptr >= selfptr) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := sha3(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr + needlelen;\r\n                    ptr -= 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies `self` to contain everything from the first occurrence of\r\n     *      `needle` to the end of the slice. `self` is set to the empty slice\r\n     *      if `needle` is not found.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function find(slice self, slice needle) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len -= ptr - self._ptr;\r\n        self._ptr = ptr;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies `self` to contain the part of the string from the start of\r\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\r\n     *      is not found, `self` is set to the empty slice.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function rfind(slice self, slice needle) internal returns (slice) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len = ptr - self._ptr;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and `token` to everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function split(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = self._ptr;\r\n        token._len = ptr - self._ptr;\r\n        if (ptr == self._ptr + self._len) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n            self._ptr = ptr + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and returning everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` up to the first occurrence of `delim`.\r\n     */\r\n    function split(slice self, slice needle) internal returns (slice token) {\r\n        split(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything before the last\r\n     *      occurrence of `needle`, and `token` to everything after it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function rsplit(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = ptr;\r\n        token._len = self._len - (ptr - self._ptr);\r\n        if (ptr == self._ptr) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything before the last\r\n     *      occurrence of `needle`, and returning everything after it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` after the last occurrence of `delim`.\r\n     */\r\n    function rsplit(slice self, slice needle) internal returns (slice token) {\r\n        rsplit(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The number of occurrences of `needle` found in `self`.\r\n     */\r\n    function count(slice self, slice needle) internal returns (uint count) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\r\n        while (ptr <= self._ptr + self._len) {\r\n            count++;\r\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns True if `self` contains `needle`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return True if `needle` is found in `self`, false otherwise.\r\n     */\r\n    function contains(slice self, slice needle) internal returns (bool) {\r\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a newly allocated string containing the concatenation of\r\n     *      `self` and `other`.\r\n     * @param self The first slice to concatenate.\r\n     * @param other The second slice to concatenate.\r\n     * @return The concatenation of the two strings.\r\n     */\r\n    function concat(slice self, slice other) internal returns (string) {\r\n        var ret = new string(self._len + other._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n        memcpy(retptr, self._ptr, self._len);\r\n        memcpy(retptr + self._len, other._ptr, other._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\r\n     *      newly allocated string.\r\n     * @param self The delimiter to use.\r\n     * @param parts A list of slices to join.\r\n     * @return A newly allocated string containing all the slices in `parts`,\r\n     *         joined with `self`.\r\n     */\r\n    function join(slice self, slice[] parts) internal returns (string) {\r\n        if (parts.length == 0)\r\n            return \"\";\r\n\r\n        uint len = self._len * (parts.length - 1);\r\n        for(uint i = 0; i < parts.length; i++)\r\n            len += parts[i]._len;\r\n\r\n        var ret = new string(len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        for(i = 0; i < parts.length; i++) {\r\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\r\n            retptr += parts[i]._len;\r\n            if (i < parts.length - 1) {\r\n                memcpy(retptr, self._ptr, self._len);\r\n                retptr += self._len;\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n}\r\n\r\n//import \"github.com/oraclize/ethereum-api/oraclizeAPI.sol\";\r\n\r\ncontract PowerEtherBase is Ownable {\r\n    \r\n    /**\r\n     * \r\n     *  \r\n     *      ╔═╗╦  ╦╔═╗╔╗╔╦╗╔═╗\r\n     *      ║╣ ╚╗╔╝║╣ ║║║║ ╚═╗\r\n     *      ╚═╝ ╚╝ ╚═╝╝╚╝╩ ╚═╝\r\n     *    \r\n     * \r\n     */\r\n    \r\n    /**\r\n     * @dev Fired whenever a PowerEther game is won or lost.\r\n     */\r\n    event PowerEtherResults(\r\n        address playerAddress,\r\n        uint256 resultSerialNumber,\r\n        uint256 gameType,           // 1 - PowerOne, 2 - PowerTwo, 4 - PowerFour\r\n        uint256 powerNumberOne,\r\n        uint256 powerNumberTwo,\r\n        uint256 powerNumberThree,\r\n        uint256 powerNumberFour,\r\n        uint256 jackpot,\r\n        bool isGameWon,\r\n        bool isMegaJackpotWon\r\n        );\r\n    \r\n    /**\r\n     * @dev Fired, whenever a MegaJackpot is won via reached cap.\r\n     */\r\n    event MegaJackpotCapWin(\r\n        address playerAddress,\r\n        uint256 megaJackpot\r\n        );\r\n    \r\n    /**\r\n     * @dev Fired, whenever a refund is initiated.\r\n     */\r\n    event Refund(\r\n        address playerAddress,\r\n        uint256 gameType\r\n        );\r\n    \r\n    /**\r\n     * @dev Fired to log the Oraclize query.\r\n     */\r\n    event LogQuery(\r\n        address playerAddress,  \r\n        uint256 gameType,           // 1 - PowerOne, 2 - PowerTwo, 4 - PowerFour\r\n        uint256 randomQueryId,\r\n        uint256 powerNumberOne,\r\n        uint256 powerNumberTwo,\r\n        uint256 powerNumberThree,\r\n        uint256 powerNumberFour\r\n        );\r\n        \r\n    /**\r\n     * @dev Fired whenever ether is manually added to the balance by the CEO.\r\n     */\r\n    event balanceUpdated(\r\n        uint256 _amount\r\n        );\r\n        \r\n    /**\r\n     *\r\n     * \r\n     *      ╦  ╦╔═╗╦═╗╦╔═╗╔╗ ╦  ╔═╗╔═╗\r\n     *      ╚╗╔╝╠═╣╠╦╝║╠═╣╠╩╗║  ║╣ ╚═╗\r\n     *       ╚╝ ╩ ╩╩╚═╩╩ ╩╚═╝╩═╝╚═╝╚═╝\r\n     *\r\n     * \r\n     */\r\n    \r\n    /// Public constants for PromiseCoin contract.\r\n    string public constant NAME = \"PowerEther\";\r\n    \r\n    /// The bid amount for PowerOne game.\r\n    uint256 public powerOneBid = 0.03 ether;\r\n    \r\n    /// The fee amount for PowerOne game.\r\n    uint256 public powerOneFee = 0.01 ether;\r\n    \r\n    /// The bid amount for PowerTwo game.\r\n    uint256 public powerTwoBid = 0.02 ether;\r\n    \r\n    /// The fee amount for PowerTwo game.\r\n    uint256 public powerTwoFee = 0.01 ether;\r\n    \r\n    /// The bid amount for PowerFour game.\r\n    uint256 public powerFourBid = 0.01 ether;\r\n    \r\n    /// The fee amount for PowerTwo game.\r\n    uint256 public powerFourFee = 0.01 ether;\r\n    \r\n    /// The jackpot of PowerOne game.\r\n    uint256 public powerOneJackpot = 0 ether;\r\n    \r\n    /// The jackpot of PowerTwo game.\r\n    uint256 public powerTwoJackpot = 0 ether;\r\n    \r\n    /// The jackpot of PowerFour game.\r\n    uint256 public powerFourJackpot = 0 ether;\r\n    \r\n    /// The MegaJackpot that is won whenever a PowerFour game has been won.\r\n    uint256 public megaJackpot = 0 ether;\r\n    \r\n    /// The MegaJackpot that is won whenever a PowerFour game has been won.\r\n    uint256 public megaJackpotFee = 0.01 ether;\r\n    \r\n    /**\r\n     * @dev Sets the hard cap of the MegaJackpot. Once reached, the MegaJackpot\r\n     * is split among the last 1000 players.\r\n     */\r\n    uint256 public megaJackpotCap = 100 ether;\r\n    \r\n    /// Counts MegaJacpot wins.\r\n    uint256 public megaJackpotWinCount = 0;\r\n    \r\n    /// The counter for PowerOne game.\r\n    uint256 public powerOneWinCounter = 0;\r\n    \r\n    /// The counter for PowerTwo game.\r\n    uint256 public powerTwoWinCounter = 0;\r\n    \r\n    /// The counter for PowerFour game.\r\n    uint256 public powerFourWinCounter = 0;\r\n\r\n    /// @dev The CEO address to transfer the cut.\r\n    address public ceoAddress;\r\n    \r\n    /// @dev The platform cut (as denumenator in the calculation equation).\r\n    uint256 public platformCut = 95;\r\n    \r\n    /// @dev Counts uncollected fees for PowerOne.\r\n    uint256 public powerOneFeesToCollect;\r\n    \r\n    /// @dev Counts uncollected fees for PowerTwo.\r\n    uint256 public powerTwoFeesToCollect;\r\n    \r\n    /// @dev Counts uncollected fees for PowerFour.\r\n    uint256 public powerFourFeesToCollect;\r\n    \r\n    /// @dev Contract activation switch.\r\n    bool public activated_ = false;\r\n    \r\n    /// @dev Sanity check for maximum and minimum inputs.\r\n    uint256 public minNumber;\r\n    uint256 public maxNumber;\r\n    \r\n    /// @dev Gas for Oraclize.\r\n    uint32 public gasForOraclize;\r\n    \r\n    /// @dev Oraclize random Query ID counter.\r\n    uint256 public randomQueryId;\r\n\r\n    /// @dev Stats - total Ether won.\r\n    uint256 public totalEtherWon;\r\n\r\n    /// @dev Stats - total games played.\r\n    uint256 public totalGamesPlayed;\r\n    \r\n    /// @dev A mapping form a queryId to the player's address.\r\n    mapping (bytes32 => address) senderAddresses;\r\n    \r\n    /// @dev A mapping form a queryId to the game type.\r\n    mapping (bytes32 => uint256) gameTypes;\r\n    \r\n    /// @dev A mapping form a queryId to the first Power Number.\r\n    mapping (bytes32 => uint256) powerNumberOne;\r\n    \r\n    /// @dev A mapping form a queryId to the second Power Number.\r\n    mapping (bytes32 => uint256) powerNumberTwo;\r\n    \r\n    /// @dev A mapping form a queryId to the third Power Number.\r\n    mapping (bytes32 => uint256) powerNumberThree;\r\n    \r\n    /// @dev A mapping form a queryId to the fourth Power Number.\r\n    mapping (bytes32 => uint256) powerNumberFour;\r\n    \r\n    /// @dev A mapping from the player address to the pending withdrawal amount.\r\n    mapping (address => uint256) playerFundsToWithdraw;\r\n    \r\n    /**\r\n     *\r\n     * \r\n     *      ╔╦╗╔═╗╔╦╗╦╔═╗╦╔═╗╦═╗╔═╗\r\n     *      ║║║║ ║ ║║║╠╣ ║║╣ ╠╦╝╚═╗\r\n     *      ╩ ╩╚═╝═╩╝╩╚  ╩╚═╝╩╚═╚═╝\r\n     *\r\n     * \r\n     */\r\n\r\n    /// @dev Access only to the CEO-functionality.\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress, \"This action is available only to the current CEO\");\r\n        _;\r\n    }\r\n    \r\n    /// @dev Checks for contract activation.\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"The contract is inactive\");\r\n        _;\r\n    }\r\n    \r\n    /// @dev Sanity check for incoming transactions\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"Too little\");\r\n        require(_eth <= 100000000000000000000000, \"Woah! Too much!\");\r\n        _;    \r\n    }\r\n    \r\n    /// @dev Checks for human interaction\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"This contract can interact only with humans\");\r\n        _;\r\n    }\r\n    \r\n}\r\n\r\ncontract PowerEtherHelper is PowerEtherBase {\r\n    \r\n    using SafeMath for *;\r\n    using strings for *;\r\n    \r\n    /**\r\n     *\r\n     * \r\n     *      ╦ ╦╔═╗╦  ╔═╗╔═╗╦═╗  ╔═╗╦ ╦╔╗╔╔═╗╔╦╗╦╔═╗╔╗╔╔═╗\r\n     *      ╠═╣║╣ ║  ╠═╝║╣ ╠╦╝  ╠╣ ║ ║║║║║   ║ ║║ ║║║║╚═╗\r\n     *      ╩ ╩╚═╝╩═╝╩  ╚═╝╩╚═  ╚  ╚═╝╝╚╝╚═╝ ╩ ╩╚═╝╝╚╝╚═╝\r\n     *\r\n     * \r\n     */\r\n    \r\n    /**\r\n     * @dev Activates the contract.\r\n     */\r\n    function activate() \r\n        external \r\n        onlyCEO {\r\n            \r\n            require(msg.sender != address(0));\r\n        \r\n            activated_ = !activated_;\r\n        }\r\n    \r\n    /**\r\n     * @dev Deactivates the contract.\r\n     */    \r\n    function deactivate() \r\n        external \r\n        onlyCEO {\r\n            \r\n            require(msg.sender != address(0));\r\n        \r\n            activated_ = false;\r\n        }\r\n    \r\n    /**\r\n     * @dev Sets the new CEO address. Only available to the current CFO. \r\n     */\r\n    function setCEO(address _newCEO) \r\n        external \r\n        onlyCEO \r\n        isHuman {\r\n            \r\n            require(_newCEO != address(0));\r\n\r\n            ceoAddress = _newCEO;\r\n        }\r\n    \r\n    /**\r\n     * @dev Sets the Bid price for the PowerOne game. Only available to the \r\n     * current CEO. \r\n     */\r\n    function setPowerOneBidPrice(uint256 _newBid) \r\n        external \r\n        onlyCEO \r\n        isHuman \r\n        isWithinLimits(_newBid) {\r\n            \r\n            powerOneBid = _newBid;\r\n        }\r\n    \r\n    /**\r\n     * @dev Sets the Fee price for the PowerOne game. Only available to the\r\n     * current CEO. \r\n     */\r\n    function setPowerOneFeePrice(uint256 _newFee) \r\n        external \r\n        onlyCEO \r\n        isHuman \r\n        isWithinLimits(_newFee) {\r\n            \r\n            powerOneFee = _newFee;\r\n        }\r\n    \r\n    /**\r\n     * @dev Sets the Bid price for the PowerTwo game. Only available to the \r\n     * current CEO. \r\n     */\r\n    function setPowerTwoBidPrice(uint256 _newBid) \r\n        external \r\n        onlyCEO \r\n        isHuman \r\n        isWithinLimits(_newBid) {\r\n            \r\n            powerTwoBid = _newBid;\r\n        }\r\n    \r\n    /**\r\n     * @dev Sets the Fee price for the PowerTwo game. Only available to the\r\n     * current CEO. \r\n     */\r\n    function setPowerTwoFeePrice(uint256 _newFee) \r\n        external \r\n        onlyCEO \r\n        isHuman \r\n        isWithinLimits(_newFee) {\r\n            \r\n            powerTwoFee = _newFee;\r\n        }\r\n    \r\n    /**\r\n     * @dev Sets the Bid price for the PowerFour game. Only available to the \r\n     * current CEO. \r\n     */\r\n    function setPowerFourBidPrice(uint256 _newBid) \r\n        external \r\n        onlyCEO \r\n        isHuman \r\n        isWithinLimits(_newBid) {\r\n            \r\n            powerFourBid = _newBid;\r\n        }\r\n    \r\n    /**\r\n     * @dev Sets the Fee price for the PowerFour game. Only available to the\r\n     * current CEO. \r\n     */\r\n    function setPowerFourFeePrice(uint256 _newFee) \r\n        external \r\n        onlyCEO \r\n        isHuman \r\n        isWithinLimits(_newFee) {\r\n            \r\n            powerFourFee = _newFee;\r\n        }\r\n    \r\n    /**\r\n     * @dev Sets the platform cut denumenator percentage. \r\n     * Only available to the current CEO. \r\n     */\r\n    function setPlatformCut(uint256 _newPlatformCut)\r\n        external\r\n        onlyCEO\r\n        isHuman {\r\n            \r\n            platformCut = _newPlatformCut;\r\n            \r\n        }\r\n    \r\n    /**\r\n     * @dev Sets the new limit for the megaJackpotCap. Only available to the\r\n     * current CEO.\r\n     */\r\n    function setMegaJackpotCap(uint256 _newCap)\r\n        external\r\n        onlyCEO\r\n        isHuman {\r\n            \r\n            megaJackpotCap = _newCap;\r\n            \r\n        }\r\n        \r\n    /**\r\n     * @dev Sets the new MegaJackpot fee.\r\n     */\r\n    function setMegaJackpotFee(uint256 _newMegaJackpotFee)\r\n        external\r\n        onlyCEO\r\n        isHuman {\r\n            \r\n            megaJackpotFee = _newMegaJackpotFee;\r\n            \r\n        }\r\n        \r\n    /**\r\n     * @dev Sets the gas limit for Oraclize Query.\r\n     */\r\n    function setGasForOraclize(uint32 _newGasLimit)\r\n        external\r\n        onlyCEO\r\n        isHuman {\r\n            \r\n            gasForOraclize = _newGasLimit;\r\n            \r\n        }\r\n        \r\n    /**\r\n     * @dev Sets the new minNumber.\r\n     */\r\n    function setMinNumber(uint256 _newMinNumber)\r\n        external\r\n        onlyCEO\r\n        isHuman {\r\n            \r\n            minNumber = _newMinNumber;\r\n            \r\n        }\r\n    \r\n    /**\r\n     * @dev Sets the new maxNumber.\r\n     */\r\n    function setMaxNumber(uint256 _newMaxNumber)\r\n        external\r\n        onlyCEO\r\n        isHuman {\r\n            \r\n            maxNumber = _newMaxNumber;\r\n            \r\n        }\r\n    \r\n    /**\r\n     * @dev Internal function to check the PowerNumbers of PowerTwo Game.\r\n     */\r\n    function _checkTwo(\r\n        uint256 _resultNumberOne,\r\n        uint256 _resultNumberTwo,\r\n        uint256 _powerNumberOne,\r\n        uint256 _powerNumberTwo\r\n        ) \r\n        internal \r\n        returns (bool) {\r\n            if ((_resultNumberOne == _powerNumberOne ||\r\n                _resultNumberOne == _powerNumberTwo) &&\r\n                (_resultNumberTwo == _powerNumberOne ||\r\n                _resultNumberTwo == _powerNumberTwo)\r\n                ) {\r\n                    return (true);\r\n                } else {\r\n                    return (false);\r\n                }\r\n        }\r\n    \r\n    /**\r\n     * @dev Internal function to check the PowerNumbers of PowerFour Game.\r\n     */\r\n    function _checkFour(\r\n        uint256 _resultNumberOne,\r\n        uint256 _resultNumberTwo,\r\n        uint256 _resultNumberThree,\r\n        uint256 _resultNumberFour,\r\n        uint256 _powerNumberOne,\r\n        uint256 _powerNumberTwo,\r\n        uint256 _powerNumberThree,\r\n        uint256 _powerNumberFour\r\n        )\r\n        internal\r\n        returns (bool) {\r\n            if ((_resultNumberOne == _powerNumberOne ||\r\n                _resultNumberOne == _powerNumberTwo ||\r\n                _resultNumberOne == _powerNumberThree ||\r\n                _resultNumberOne == _powerNumberFour) &&\r\n                (_resultNumberTwo == _powerNumberOne ||\r\n                _resultNumberTwo == _powerNumberTwo ||\r\n                _resultNumberTwo == _powerNumberThree ||\r\n                _resultNumberTwo == _powerNumberFour) &&\r\n                (_resultNumberThree == _powerNumberOne ||\r\n                _resultNumberThree == _powerNumberTwo ||\r\n                _resultNumberThree == _powerNumberThree ||\r\n                _resultNumberThree == _powerNumberFour) &&\r\n                (_resultNumberFour == _powerNumberOne ||\r\n                _resultNumberFour == _powerNumberTwo ||\r\n                _resultNumberFour == _powerNumberThree ||\r\n                _resultNumberFour == _powerNumberFour)) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n        }\r\n        \r\n    /**\r\n     * @dev Collects the fees for transactions. Only available to the current\r\n     * CEO.\r\n     */\r\n    function collectFees()\r\n        external\r\n        onlyCEO\r\n        isHuman {\r\n            \r\n            uint256 powerOnePayouts = SafeMath.mul(powerOneFee, powerOneFeesToCollect);\r\n            uint256 powerTwoPayouts = SafeMath.mul(powerTwoFee, powerTwoFeesToCollect);\r\n            uint256 powerFourPayouts = SafeMath.mul(powerFourFee, powerFourFeesToCollect);\r\n            \r\n            uint256 totalOneTwo = SafeMath.add(powerOnePayouts, powerTwoPayouts);\r\n            uint256 totalAll = SafeMath.add(totalOneTwo, powerFourPayouts);\r\n            \r\n            require(totalAll <= address(this).balance, \"Insufficient funds!\");\r\n            \r\n            ceoAddress.transfer(totalAll);\r\n            \r\n            // reset the counters\r\n            powerOneFeesToCollect = 0;\r\n            powerTwoFeesToCollect = 0;\r\n            powerFourFeesToCollect = 0;\r\n            \r\n        }\r\n    \r\n    /**\r\n     * @dev Checks whether the MegaJackpotCap has been reached. If so,\r\n     * transfers the MegaJackpot to the current player.\r\n     */\r\n    function _checkMegaJackpotCap(address playerAddress) \r\n        internal\r\n        returns (bool) {\r\n            \r\n        // Checking for the MegaJackpotCap.\r\n        if (megaJackpot >= megaJackpotCap) {\r\n                    \r\n        require(megaJackpot <= address(this).balance, \"Insufficient funds!\");\r\n                    \r\n        uint256 megaJackpotPayout = SafeMath.div(SafeMath.mul(megaJackpot, platformCut), 100);\r\n        uint256 platformMegaCutPayout = SafeMath.sub(megaJackpot, megaJackpotPayout);\r\n                        \r\n        emit MegaJackpotCapWin(\r\n            playerAddress,\r\n            megaJackpotPayout\r\n        );\r\n                    \r\n        playerAddress.transfer(megaJackpotPayout);\r\n        ceoAddress.transfer(platformMegaCutPayout);\r\n                    \r\n        megaJackpot = 0;\r\n        megaJackpotWinCount ++;\r\n\r\n        totalEtherWon += megaJackpotPayout;\r\n\r\n        return true;\r\n                    \r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * @dev Updates the contract balance. Only available to the current CEO. \r\n     */\r\n    function updateBalance(uint256 etherToAdd)\r\n        public\r\n        payable\r\n        onlyCEO {\r\n        \r\n            emit balanceUpdated(etherToAdd);\r\n        \r\n        }\r\n    \r\n    /**\r\n     * @dev Updates the PowerOne balance. Only available to the current CEO. \r\n     */\r\n    function updatePowerOneBalance(uint256 etherToAdd)\r\n        public\r\n        payable\r\n        onlyCEO {\r\n            \r\n            powerOneJackpot += etherToAdd;\r\n            emit balanceUpdated(etherToAdd);\r\n        \r\n        }\r\n    \r\n    /**\r\n     * @dev Updates the PowerTwo balance. Only available to the current CEO. \r\n     */\r\n    function updatePowerTwoBalance(uint256 etherToAdd)\r\n        public\r\n        payable\r\n        onlyCEO {\r\n            \r\n            powerTwoJackpot += etherToAdd;\r\n            emit balanceUpdated(etherToAdd);\r\n        \r\n        }\r\n    \r\n    /**\r\n     * @dev Updates the PowerFour balance. Only available to the current CEO. \r\n     */\r\n    function updatePowerFourBalance(uint256 etherToAdd)\r\n        public\r\n        payable\r\n        onlyCEO {\r\n            \r\n            powerFourJackpot += etherToAdd;\r\n            emit balanceUpdated(etherToAdd);\r\n        \r\n        }\r\n    \r\n    /**\r\n     * @dev Player manually withdraws funds if there was a transaction error.\r\n     */\r\n    function withdrawPendingTransactions() \r\n        public \r\n        isHuman\r\n        isActivated\r\n        returns (bool) {\r\n            \r\n            uint256 amount = playerFundsToWithdraw[msg.sender];\r\n            \r\n            playerFundsToWithdraw[msg.sender] = 0;\r\n        \r\n            if (msg.sender.call.value(amount)()) {\r\n                \r\n                return true;\r\n                \r\n            } else {\r\n            \r\n            // Can try to refund later if goes wrong.\r\n            playerFundsToWithdraw[msg.sender] = amount;\r\n            \r\n            return false;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Checks for the pending withdrawals.\r\n     */\r\n\r\n    function getPendingTransactions(address playerAddress) \r\n        public \r\n        constant \r\n        returns (uint256) {\r\n            \r\n            return playerFundsToWithdraw[playerAddress];\r\n        }\r\n    \r\n}\r\n\r\n\r\ncontract PowerOne is PowerEtherHelper, usingOraclize {\r\n    \r\n    /// @dev checks only Oraclize address is calling\r\n    modifier onlyOraclize {\r\n        require(msg.sender == oraclize_cbAddress());\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Makes the bid to the PowerOne game.\r\n     */\r\n    function makePowerOneBid(uint256 numberOne)\r\n        public\r\n        payable\r\n        isHuman\r\n        isActivated {\r\n            \r\n            require(numberOne >= minNumber && numberOne <= maxNumber, \"The number chosen is invalid!\");\r\n            \r\n            uint256 payment = SafeMath.add(powerOneBid, powerOneFee);\r\n            uint256 totalPayment = SafeMath.add(payment, megaJackpotFee);\r\n            \r\n            require(msg.value == totalPayment, \"Wrong payment value!\");\r\n            \r\n            randomQueryId += 1;\r\n            \r\n            powerOneFeesToCollect ++;\r\n            \r\n            // Compose the Oraclize query\r\n            string memory queryStringOne = \"[URL] ['json(https://api.random.org/json-rpc/1/invoke).result.random[\\\"serialNumber\\\",\\\"data\\\"]', '\\\\n{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"generateSignedIntegers\\\",\\\"params\\\":{\\\"apiKey\\\":\\\"${[decrypt] BEna2ojyJ8x3euQmExkugHrukwYeMH2Z7o3e9XEqATmN1ApOokRElT5IJEp1JNFhbn3dvdEo3wLaDaZJu5PqRUaoI4ZnbDTwAmMtkfLP1jBD7OldcYReDzG4cc5tdjCdP2KbzhIOEuXskoW3PzkqHzGq641e}\\\",\\\"n\\\":1,\\\"min\\\":1,\\\"max\\\":10,\\\"replacement\\\":false,\\\"base\\\":10${[identity] \\\"}\\\"},\\\"id\\\":\";\r\n            string memory queryStringTwo = uint2str(randomQueryId);\r\n            string memory queryStringThree = \"${[identity] \\\"}\\\"}']\";\r\n            \r\n            string memory queryStringOne_Two = queryStringOne.toSlice().concat(queryStringTwo.toSlice());\r\n            string memory queryStringOne_Two_Three = queryStringOne_Two.toSlice().concat(queryStringThree.toSlice());\r\n            \r\n            bytes32 queryId = oraclize_query(\"nested\", queryStringOne_Two_Three, gasForOraclize);\r\n            \r\n            senderAddresses[queryId] = msg.sender;\r\n            \r\n            gameTypes[queryId] = 1;\r\n            \r\n            powerNumberOne[queryId] = numberOne;\r\n            \r\n            powerOneJackpot += powerOneBid;\r\n            \r\n            megaJackpot += megaJackpotFee;\r\n\r\n            totalGamesPlayed ++;\r\n            \r\n            emit LogQuery(\r\n                msg.sender,\r\n                1,\r\n                randomQueryId,\r\n                numberOne,\r\n                0,\r\n                0,\r\n                0\r\n                );\r\n                \r\n        }\r\n    \r\n    /**\r\n     * @dev Internal core logic of the PowerOne game\r\n     */\r\n    function _powerOne(\r\n        string result,\r\n        uint256 pnOne,\r\n        address playerAddress\r\n        ) internal {\r\n        // Sanity check\r\n        require(pnOne != 0, \"Invalid game, refunded!\");\r\n                \r\n        require(powerOneJackpot <= address(this).balance, \"Insufficient funds!\");\r\n                \r\n        strings.slice memory res = result.toSlice();\r\n        strings.slice memory delim = \" \".toSlice();\r\n        uint256[] memory parts = new uint256[](res.count(delim) + 1);\r\n        for (uint256 i = 0; i < parts.length; i ++) {\r\n            parts[i] = parseInt(res.split(delim).toString());\r\n        }\r\n                \r\n        // Refunding if the result is 0 or no proof is provided.       \r\n        if (bytes(result).length == 0) {\r\n                    \r\n            emit Refund(\r\n                playerAddress,\r\n                1\r\n                );\r\n                \r\n            if (!playerAddress.send(SafeMath.add(powerOneBid, powerOneFee))) {\r\n                \r\n                playerFundsToWithdraw[playerAddress] = SafeMath.add(powerOneBid, powerOneFee);                     \r\n            }\r\n                    \r\n            playerAddress = 0x0;\r\n                    \r\n            return;\r\n                    \r\n        }\r\n                \r\n        if (parts[1] == pnOne) {\r\n                    \r\n            if(_checkMegaJackpotCap(playerAddress)) {\r\n                bool checkResult = true;\r\n            } else {\r\n                checkResult = false;\r\n            }\r\n                       \r\n            powerOneWinCounter ++;\r\n                    \r\n            // Calculating the eligible payout\r\n            uint256 eligiblePayout = SafeMath.div(SafeMath.mul(powerOneJackpot, platformCut), 100);\r\n            uint256 platformCutPayout = SafeMath.sub(powerOneJackpot, eligiblePayout);\r\n                    \r\n            playerAddress.transfer(eligiblePayout);\r\n                    \r\n            ceoAddress.transfer(platformCutPayout);\r\n\r\n            emit PowerEtherResults(\r\n                playerAddress,\r\n                parts[0],\r\n                1,\r\n                pnOne,\r\n                0,\r\n                0,\r\n                0,\r\n                eligiblePayout,\r\n                true,\r\n                checkResult\r\n                );\r\n\r\n            totalEtherWon += eligiblePayout;\r\n                    \r\n            powerOneJackpot = 0;\r\n                    \r\n            playerAddress = 0x0;            \r\n\r\n        } else if (parts[1] != pnOne) {\r\n                    \r\n            emit PowerEtherResults(\r\n                playerAddress,\r\n                parts[0],\r\n                1,\r\n                pnOne,\r\n                0,\r\n                0,\r\n                0,\r\n                eligiblePayout,\r\n                false,\r\n                false\r\n                );\r\n                    \r\n            playerAddress = 0x0;\r\n\r\n        }\r\n        \r\n    }\r\n    \r\n}\r\n\r\ncontract PowerTwo is PowerOne {\r\n    \r\n    /**\r\n     * @dev Makes the bid to the PowerTwo game.\r\n     */\r\n    function makePowerTwoBid(\r\n        uint256 numberOne,\r\n        uint256 numberTwo\r\n        )\r\n        public\r\n        payable\r\n        isHuman\r\n        isActivated {\r\n            \r\n            require(numberOne >= minNumber && numberOne <= maxNumber, \"The first  number chosen is invalid!\");\r\n            require(numberTwo >= minNumber && numberTwo <= maxNumber, \"The second number chosen is invalid!\");\r\n            \r\n            uint256 payment = SafeMath.add(powerTwoBid, powerTwoFee);\r\n            uint256 totalPayment = SafeMath.add(payment, megaJackpotFee);\r\n            \r\n            require(msg.value == totalPayment, \"Wrong payment value!\");\r\n            \r\n            randomQueryId += 1;\r\n            \r\n            powerTwoFeesToCollect ++;\r\n            \r\n            // Compose the Oraclize query\r\n            string memory queryStringOne = \"[URL] ['json(https://api.random.org/json-rpc/1/invoke).result.random[\\\"serialNumber\\\",\\\"data\\\"]', '\\\\n{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"generateSignedIntegers\\\",\\\"params\\\":{\\\"apiKey\\\":\\\"${[decrypt] BEna2ojyJ8x3euQmExkugHrukwYeMH2Z7o3e9XEqATmN1ApOokRElT5IJEp1JNFhbn3dvdEo3wLaDaZJu5PqRUaoI4ZnbDTwAmMtkfLP1jBD7OldcYReDzG4cc5tdjCdP2KbzhIOEuXskoW3PzkqHzGq641e}\\\",\\\"n\\\":2,\\\"min\\\":1,\\\"max\\\":10,\\\"replacement\\\":false,\\\"base\\\":10${[identity] \\\"}\\\"},\\\"id\\\":\";\r\n            string memory queryStringTwo = uint2str(randomQueryId);\r\n            string memory queryStringThree = \"${[identity] \\\"}\\\"}']\";\r\n            \r\n            string memory queryStringOne_Two = queryStringOne.toSlice().concat(queryStringTwo.toSlice());\r\n            string memory queryStringOne_Two_Three = queryStringOne_Two.toSlice().concat(queryStringThree.toSlice());\r\n            \r\n            bytes32 queryId = oraclize_query(\"nested\", queryStringOne_Two_Three, gasForOraclize);\r\n            \r\n            senderAddresses[queryId] = msg.sender;\r\n            \r\n            gameTypes[queryId] = 2;\r\n            \r\n            powerNumberOne[queryId] = numberOne;\r\n            powerNumberTwo[queryId] = numberTwo;\r\n            \r\n            powerTwoJackpot += powerTwoBid;\r\n            \r\n            megaJackpot += megaJackpotFee;\r\n\r\n            totalGamesPlayed ++;\r\n            \r\n            emit LogQuery(\r\n                msg.sender,\r\n                2,\r\n                randomQueryId,\r\n                numberOne,\r\n                numberTwo,\r\n                0,\r\n                0\r\n                );\r\n                \r\n        }\r\n    \r\n    /**\r\n     * @dev Internal core logic of the PowerTwo game\r\n     */\r\n    function _powerTwo(\r\n        string result,\r\n        uint256 pnOne,\r\n        uint256 pnTwo,\r\n        address playerAddress\r\n        ) internal {\r\n            \r\n        // Sanity check\r\n        require(pnOne != 0, \"Invalid game, refunded!\");\r\n        require(pnTwo != 0, \"Invalid game, refunded!\");\r\n                \r\n        require(powerTwoJackpot <= address(this).balance, \"Insufficient funds!\");\r\n                \r\n        strings.slice memory res = result.toSlice();\r\n        strings.slice memory delim = \" \".toSlice();\r\n        uint256[] memory parts = new uint256[](res.count(delim) + 1);\r\n        for (uint256 i = 0; i < parts.length; i ++) {\r\n            parts[i] = parseInt(res.split(delim).toString());\r\n        }\r\n                \r\n        // Refunding if the result is 0 or no proof is provided.\r\n        if (bytes(result).length == 0) {\r\n                    \r\n            emit Refund(\r\n                playerAddress,\r\n                1\r\n                );\r\n                \r\n            if (!playerAddress.send(SafeMath.add(powerTwoBid, powerTwoFee))) {\r\n                \r\n                playerFundsToWithdraw[playerAddress] = SafeMath.add(powerTwoBid, powerTwoFee);                     \r\n            }\r\n                    \r\n            playerAddress = 0x0;\r\n                    \r\n            return;\r\n                    \r\n        }\r\n                \r\n        if (_checkTwo(\r\n            parts[1],\r\n            parts[2],\r\n            pnOne,\r\n            pnTwo)) {\r\n                        \r\n            if(_checkMegaJackpotCap(playerAddress)) {\r\n                bool checkResult = true;\r\n            } else {\r\n                checkResult = false;\r\n            }\r\n                    \r\n            powerTwoWinCounter ++;\r\n                    \r\n            // Calculating the eligible payout\r\n            uint256 eligiblePayout = SafeMath.div(SafeMath.mul(powerTwoJackpot, platformCut), 100);\r\n            uint256 platformCutPayout = SafeMath.sub(powerTwoJackpot, eligiblePayout);\r\n                    \r\n            playerAddress.transfer(SafeMath.div(SafeMath.mul(powerTwoJackpot, platformCut), 100));\r\n                    \r\n            ceoAddress.transfer(platformCutPayout);\r\n\r\n            emit PowerEtherResults(\r\n                playerAddress,\r\n                parts[0],\r\n                2,\r\n                pnOne,\r\n                pnTwo,\r\n                0,\r\n                0,\r\n                eligiblePayout,\r\n                true,\r\n                checkResult\r\n                );\r\n\r\n            totalEtherWon += eligiblePayout;\r\n                    \r\n            powerTwoJackpot = 0;\r\n                        \r\n            playerAddress = 0x0;\r\n\r\n        } else if (!_checkTwo(\r\n            parts[1],\r\n            parts[2],\r\n            pnOne,\r\n            pnTwo)) {\r\n                    \r\n            emit PowerEtherResults(\r\n                playerAddress,\r\n                parts[0],\r\n                2,\r\n                pnOne,\r\n                pnTwo,\r\n                0,\r\n                0,\r\n                eligiblePayout,\r\n                false,\r\n                false\r\n                );\r\n                    \r\n            playerAddress = 0x0;\r\n\r\n        }\r\n        \r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract PowerFour is PowerTwo {\r\n    \r\n    /**\r\n     * @dev Makes the bid to the PowerFour game.\r\n     */\r\n    function makePowerFourBid(\r\n        uint256 numberOne,\r\n        uint256 numberTwo,\r\n        uint256 numberThree,\r\n        uint256 numberFour\r\n        )\r\n        public\r\n        payable\r\n        isHuman\r\n        isActivated {\r\n            \r\n            require(numberOne >= minNumber && numberOne <= maxNumber, \"The first number chosen is invalid!\");\r\n            require(numberTwo >= minNumber && numberTwo <= maxNumber, \"The second number chosen is invalid!\");\r\n            require(numberThree >= minNumber && numberThree <= maxNumber, \"The third number chosen is invalid!\");\r\n            require(numberFour >= minNumber && numberFour <= maxNumber, \"The fourth chosen is invalid!\");\r\n            \r\n            uint256 payment = SafeMath.add(powerFourBid, powerFourFee);\r\n            uint256 totalPayment = SafeMath.add(payment, megaJackpotFee);\r\n            \r\n            require(msg.value == totalPayment, \"Wrong payment value!\");\r\n            \r\n            randomQueryId += 1;\r\n            \r\n            powerFourFeesToCollect ++;\r\n            \r\n            // Compose the Oraclize query\r\n            string memory queryStringOne = \"[URL] ['json(https://api.random.org/json-rpc/1/invoke).result.random[\\\"serialNumber\\\",\\\"data\\\"]', '\\\\n{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"generateSignedIntegers\\\",\\\"params\\\":{\\\"apiKey\\\":\\\"${[decrypt] BEna2ojyJ8x3euQmExkugHrukwYeMH2Z7o3e9XEqATmN1ApOokRElT5IJEp1JNFhbn3dvdEo3wLaDaZJu5PqRUaoI4ZnbDTwAmMtkfLP1jBD7OldcYReDzG4cc5tdjCdP2KbzhIOEuXskoW3PzkqHzGq641e}\\\",\\\"n\\\":4,\\\"min\\\":1,\\\"max\\\":10,\\\"replacement\\\":false,\\\"base\\\":10${[identity] \\\"}\\\"},\\\"id\\\":\";\r\n            string memory queryStringTwo = uint2str(randomQueryId);\r\n            string memory queryStringThree = \"${[identity] \\\"}\\\"}']\";\r\n            \r\n            string memory queryStringOne_Two = queryStringOne.toSlice().concat(queryStringTwo.toSlice());\r\n            string memory queryStringOne_Two_Three = queryStringOne_Two.toSlice().concat(queryStringThree.toSlice());\r\n            \r\n            bytes32 queryId = oraclize_query(\"nested\", queryStringOne_Two_Three, gasForOraclize);\r\n            \r\n            senderAddresses[queryId] = msg.sender;\r\n            \r\n            gameTypes[queryId] = 4;\r\n            \r\n            powerNumberOne[queryId] = numberOne;\r\n            powerNumberTwo[queryId] = numberTwo;\r\n            powerNumberThree[queryId] = numberThree;\r\n            powerNumberFour[queryId] = numberFour;\r\n            \r\n            powerFourJackpot += powerFourBid;\r\n            \r\n            megaJackpot += megaJackpotFee;\r\n\r\n            totalGamesPlayed ++;\r\n                \r\n        }\r\n        \r\n    /**\r\n     * @dev Internal core logic of the PowerFour game\r\n     */\r\n    \r\n    function _powerFour(\r\n        string result,\r\n        uint256 pnOne,\r\n        uint256 pnTwo,\r\n        uint256 pnThree,\r\n        uint256 pnFour,\r\n        address playerAddress\r\n        ) internal {\r\n            \r\n        // Sanity check\r\n        require(pnOne != 0, \"Invalid game, refunded!\");\r\n        require(pnTwo != 0, \"Invalid game, refunded!\");\r\n        require(pnThree != 0, \"Invalid game, refunded!\");\r\n        require(pnFour != 0, \"Invalid game, refunded!\");\r\n                \r\n        require(powerFourJackpot <= address(this).balance, \"Insufficient funds!\");\r\n                \r\n        strings.slice memory res = result.toSlice();\r\n        strings.slice memory delim = \" \".toSlice();\r\n        uint256[] memory parts = new uint256[](res.count(delim) + 1);\r\n        for (uint256 i = 0; i < parts.length; i ++) {\r\n            parts[i] = parseInt(res.split(delim).toString());\r\n        }\r\n                \r\n        // Refunding if the result is 0 or no proof is provided.\r\n        if (bytes(result).length == 0) {\r\n                      \r\n            emit Refund(\r\n                playerAddress,\r\n                1\r\n                );\r\n                \r\n            if (!playerAddress.send(SafeMath.add(powerFourBid, powerFourFee))) {\r\n                \r\n                playerFundsToWithdraw[playerAddress] = SafeMath.add(powerFourBid, powerFourFee);                  \r\n            }\r\n                    \r\n            playerAddress = 0x0;\r\n                    \r\n            return;\r\n                    \r\n        }\r\n                \r\n        if (_checkFour(\r\n            parts[1],\r\n            parts[2],\r\n            parts[3],\r\n            parts[4],\r\n            pnOne,\r\n            pnTwo,\r\n            pnThree,\r\n            pnFour)) {\r\n                        \r\n            _checkMegaJackpotCap(playerAddress);\r\n                    \r\n            // Calculating the eligible payout\r\n            uint256 eligiblePayout = SafeMath.div(SafeMath.mul(powerFourJackpot, platformCut), 100);\r\n            uint256 platformCutPayout = SafeMath.sub(powerFourJackpot, eligiblePayout);\r\n                    \r\n            playerAddress.transfer(eligiblePayout);\r\n                    \r\n            // Transfering the MegaJackpot to the winner\r\n            playerAddress.transfer(megaJackpot);\r\n                    \r\n            ceoAddress.transfer(platformCutPayout);\r\n\r\n            emit PowerEtherResults(\r\n                playerAddress,\r\n                parts[0],\r\n                4,\r\n                pnOne,\r\n                pnTwo,\r\n                pnThree,\r\n                pnFour,\r\n                eligiblePayout,\r\n                true,\r\n                true\r\n                );\r\n\r\n            totalEtherWon += eligiblePayout;\r\n                    \r\n            powerFourWinCounter ++;\r\n                    \r\n            megaJackpot = 0;\r\n                    \r\n            powerFourJackpot = 0;\r\n                    \r\n            playerAddress = 0x0;\r\n\r\n        } else if (!_checkFour(\r\n            parts[1],\r\n            parts[2],\r\n            parts[3],\r\n            parts[4],\r\n            pnOne,\r\n            pnTwo,\r\n            pnThree,\r\n            pnFour)) {\r\n                        \r\n            emit PowerEtherResults(\r\n                playerAddress,\r\n                parts[0],\r\n                4,\r\n                pnOne,\r\n                pnTwo,\r\n                pnThree,\r\n                pnFour,\r\n                eligiblePayout,\r\n                false,\r\n                false\r\n                );\r\n\r\n            playerAddress = 0x0;\r\n\r\n        }\r\n        \r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract PowerEther is PowerFour {\r\n    \r\n    /**\r\n     * \r\n     *    _______ _            ____  _            _    _____  _                                  \r\n     *   |__   __| |          |  _ \\| |          | |  |  __ \\| |                           \r\n     *      | |  | |__   ___  | |_) | | ___   ___| | _| |__) | | __ _ _   _     \r\n     *      | |  | '_ \\ / _ \\ |  _ <| |/ _ \\ / __| |/ /  ___/| |/ _` | | | |    \r\n     *      | |  | | | |  __/ | |_) | | (_) | (__|   <| |    | | (_| | |_| |    \r\n     *      |_|  |_| |_|\\___| |____/|_|\\___/ \\___|_|\\_\\_|    |_|\\__,_|\\__, |    \r\n     *                                                                 __/ |                            \r\n     *                                                                |___/                             \r\n     *                      \r\n     *                                ╔═╗╦═╗╔═╗╦ ╦╔╦╗╦ ╦ ╦   \r\n     *                                ╠═╝╠╦╝║ ║║ ║ ║║║ ╚╦╝   \r\n     *                                ╩  ╩╚═╚═╝╚═╝═╩╝╩═╝╩    \r\n     *                              ╔═╗╦═╗╔═╗╔═╗╔═╗╔╗╔╦╗╔═╗\r\n     *                              ╠═╝╠╦╝║╣ ╚═╗║╣ ║║║║ ╚═╗\r\n     *                              ╩  ╩╚═╚═╝╚═╝╚═╝╝╚╝╩ ╚═╝\r\n     * \r\n     *\r\n     * \r\n     *  \r\n     *  ██████╗  ██████╗ ██╗    ██╗███████╗██████╗ ███████╗████████╗██╗  ██╗███████╗██████╗ \r\n     *  ██╔══██╗██╔═══██╗██║    ██║██╔════╝██╔══██╗██╔════╝╚══██╔══╝██║  ██║██╔════╝██╔══██╗\r\n     *  ██████╔╝██║   ██║██║ █╗ ██║█████╗  ██████╔╝█████╗     ██║   ███████║█████╗  ██████╔╝\r\n     *  ██╔═══╝ ██║   ██║██║███╗██║██╔══╝  ██╔══██╗██╔══╝     ██║   ██╔══██║██╔══╝  ██╔══██╗\r\n     *  ██║     ╚██████╔╝╚███╔███╔╝███████╗██║  ██║███████╗   ██║   ██║  ██║███████╗██║  ██║\r\n     *  ╚═╝      ╚═════╝  ╚══╝╚══╝ ╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝\r\n     *                                                                              \r\n     *\r\n     * \r\n     * \r\n     * PowerEther is the first honest Ethereum lottery based on PowerBall\r\n     * mechanics. There are three types of games: PowerOne - guess one number,\r\n     * PowerTwo - guess two numbers, and PowerFour - guess four numbers.\r\n     * \r\n     * The rules are simple: if the player does not win the round, the bid is\r\n     * added to the balance of that certain game type. If the game is won, the\r\n     * player gets all the balance of that certain game.\r\n     * \r\n     * Every time a player loses, a small amount is transferred to the\r\n     * MegaJackpot. the MegaJackpot is won either whenever a PowerFour game is\r\n     * won, or when the hard cap has been reached. If the cap\r\n     * has been reached, the first winner of ANY game gets the MegaJacpot!\r\n     * \r\n     * Play PowerEther and win TONS of Ether!\r\n     * \r\n     * \r\n     * \r\n     */\r\n     \r\n    /**\r\n     * \r\n     *\r\n     *      ╔═╗╔═╗╔╗╔╔═╗╔╦╗╦═╗╦ ╦╔═╗╔╦╗╔═╗╦═╗\r\n     *      ║  ║ ║║║║╚═╗ ║ ╠╦╝║ ║║   ║ ║ ║╠╦╝\r\n     *      ╚═╝╚═╝╝╚╝╚═╝ ╩ ╩╚═╚═╝╚═╝ ╩ ╚═╝╩╚═\r\n     *\r\n     * \r\n     */\r\n     \r\n    constructor() public {\r\n        \r\n        /// Activating the contract.\r\n        activated_ = true;\r\n        \r\n        /// Setting the initial address of the CEO.\r\n        ceoAddress = msg.sender;\r\n        \r\n        /// Setting the gas amount for Oraclize.\r\n        gasForOraclize = 335000;\r\n        \r\n        /// Setting the initial value for the randomQueryId\r\n        randomQueryId = 777;\r\n        \r\n        /// Sets the min and max numbers.\r\n        minNumber = 1;\r\n        maxNumber = 10;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev The Oraclize callback function.\r\n     */\r\n    \r\n    function __callback(\r\n        bytes32 myid, \r\n        string result) \r\n        public   \r\n\t\tonlyOraclize\r\n\t\tisActivated {\r\n\r\n            require(senderAddresses[myid] != address(0), \"Wrong player address!\");\r\n            \r\n            if (gameTypes[myid] == 1) {\r\n                \r\n                _powerOne(result, powerNumberOne[myid], senderAddresses[myid]);\r\n                \r\n            } else if (gameTypes[myid] == 2) {\r\n                \r\n                _powerTwo(result, powerNumberOne[myid], powerNumberTwo[myid], senderAddresses[myid]);\r\n                \r\n            } else if (gameTypes[myid] == 4) {\r\n\r\n                _powerFour(result, powerNumberOne[myid], powerNumberTwo[myid], powerNumberThree[myid], powerNumberFour[myid], senderAddresses[myid]);\r\n                    \r\n        }\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newBid\",\"type\":\"uint256\"}],\"name\":\"setPowerTwoBidPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerTwoFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerTwoBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEtherWon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerOneJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerTwoWinCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerOneWinCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxNumber\",\"type\":\"uint256\"}],\"name\":\"setMaxNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setPowerOneFeePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberOne\",\"type\":\"uint256\"}],\"name\":\"makePowerOneBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomQueryId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerTwoJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBid\",\"type\":\"uint256\"}],\"name\":\"setPowerFourBidPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherToAdd\",\"type\":\"uint256\"}],\"name\":\"updatePowerTwoBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setPowerFourFeePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deactivate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGasLimit\",\"type\":\"uint32\"}],\"name\":\"setGasForOraclize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGamesPlayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPendingTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerFourBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerOneBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasForOraclize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinNumber\",\"type\":\"uint256\"}],\"name\":\"setMinNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerFourFeesToCollect\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMegaJackpotFee\",\"type\":\"uint256\"}],\"name\":\"setMegaJackpotFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerFourWinCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBid\",\"type\":\"uint256\"}],\"name\":\"setPowerOneBidPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherToAdd\",\"type\":\"uint256\"}],\"name\":\"updatePowerFourBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"setMegaJackpotCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerTwoFeesToCollect\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"megaJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"megaJackpotWinCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerOneFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherToAdd\",\"type\":\"uint256\"}],\"name\":\"updateBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPendingTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerFourFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberOne\",\"type\":\"uint256\"},{\"name\":\"numberTwo\",\"type\":\"uint256\"}],\"name\":\"makePowerTwoBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"megaJackpotFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherToAdd\",\"type\":\"uint256\"}],\"name\":\"updatePowerOneBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPlatformCut\",\"type\":\"uint256\"}],\"name\":\"setPlatformCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"megaJackpotCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerFourJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerOneFeesToCollect\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setPowerTwoFeePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberOne\",\"type\":\"uint256\"},{\"name\":\"numberTwo\",\"type\":\"uint256\"},{\"name\":\"numberThree\",\"type\":\"uint256\"},{\"name\":\"numberFour\",\"type\":\"uint256\"}],\"name\":\"makePowerFourBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"resultSerialNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"powerNumberOne\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"powerNumberTwo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"powerNumberThree\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"powerNumberFour\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isGameWon\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"isMegaJackpotWon\",\"type\":\"bool\"}],\"name\":\"PowerEtherResults\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"megaJackpot\",\"type\":\"uint256\"}],\"name\":\"MegaJackpotCapWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameType\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"randomQueryId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"powerNumberOne\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"powerNumberTwo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"powerNumberThree\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"powerNumberFour\",\"type\":\"uint256\"}],\"name\":\"LogQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"balanceUpdated\",\"type\":\"event\"}]","ContractName":"PowerEther","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3778036015b13a05d6d706209845c3471ddb536d9be9ae8fd37d2d6e682dc8a0"}]}