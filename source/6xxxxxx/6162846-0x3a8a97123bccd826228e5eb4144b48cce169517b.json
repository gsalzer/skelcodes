{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// File: zeppelin/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/QravityTeamTimelock.sol\r\n\r\ncontract QravityTeamTimelock {\r\n    using SafeMath for uint256;\r\n\r\n    uint16 constant ORIGIN_YEAR = 1970;\r\n\r\n    // Account that can release tokens\r\n    address public controller;\r\n\r\n    uint256 public releasedAmount;\r\n\r\n    ERC20Basic token;\r\n\r\n    function QravityTeamTimelock(ERC20Basic _token, address _controller)\r\n    public\r\n    {\r\n        require(address(_token) != 0x0);\r\n        require(_controller != 0x0);\r\n        token = _token;\r\n        controller = _controller;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     */\r\n    function release(address _beneficiary, uint256 _amount)\r\n    public\r\n    {\r\n        require(msg.sender == controller);\r\n        require(_amount > 0);\r\n        require(_amount <= availableAmount(now));\r\n        token.transfer(_beneficiary, _amount);\r\n        releasedAmount = releasedAmount.add(_amount);\r\n    }\r\n\r\n    function availableAmount(uint256 timestamp)\r\n    public view\r\n    returns (uint256 amount)\r\n    {\r\n        uint256 totalWalletAmount = releasedAmount.add(token.balanceOf(this));\r\n        uint256 canBeReleasedAmount = totalWalletAmount.mul(availablePercent(timestamp)).div(100);\r\n        return canBeReleasedAmount.sub(releasedAmount);\r\n    }\r\n\r\n    function availablePercent(uint256 timestamp)\r\n    public view\r\n    returns (uint256 factor)\r\n    {\r\n       uint256[10] memory releasePercent = [uint256(0), 20, 30, 40, 50, 60, 70, 80, 90, 100];\r\n       uint[10] memory releaseTimes = [\r\n           toTimestamp(2020, 4, 1),\r\n           toTimestamp(2020, 7, 1),\r\n           toTimestamp(2020, 10, 1),\r\n           toTimestamp(2021, 1, 1),\r\n           toTimestamp(2021, 4, 1),\r\n           toTimestamp(2021, 7, 1),\r\n           toTimestamp(2021, 10, 1),\r\n           toTimestamp(2022, 1, 1),\r\n           toTimestamp(2022, 4, 1),\r\n           0\r\n        ];\r\n\r\n        // Set default to the 0% bonus.\r\n        uint256 timeIndex = 0;\r\n\r\n        for (uint256 i = 0; i < releaseTimes.length; i++) {\r\n            if (timestamp < releaseTimes[i] || releaseTimes[i] == 0) {\r\n                timeIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        return releasePercent[timeIndex];\r\n    }\r\n\r\n    // Timestamp functions based on\r\n    // https://github.com/pipermerriam/ethereum-datetime/blob/master/contracts/DateTime.sol\r\n    function toTimestamp(uint16 year, uint8 month, uint8 day)\r\n    internal pure returns (uint timestamp) {\r\n        uint16 i;\r\n\r\n        // Year\r\n        timestamp += (year - ORIGIN_YEAR) * 1 years;\r\n        timestamp += (leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR)) * 1 days;\r\n\r\n        // Month\r\n        uint8[12] memory monthDayCounts;\r\n        monthDayCounts[0] = 31;\r\n        if (isLeapYear(year)) {\r\n                monthDayCounts[1] = 29;\r\n        }\r\n        else {\r\n                monthDayCounts[1] = 28;\r\n        }\r\n        monthDayCounts[2] = 31;\r\n        monthDayCounts[3] = 30;\r\n        monthDayCounts[4] = 31;\r\n        monthDayCounts[5] = 30;\r\n        monthDayCounts[6] = 31;\r\n        monthDayCounts[7] = 31;\r\n        monthDayCounts[8] = 30;\r\n        monthDayCounts[9] = 31;\r\n        monthDayCounts[10] = 30;\r\n        monthDayCounts[11] = 31;\r\n\r\n        for (i = 1; i < month; i++) {\r\n            timestamp += monthDayCounts[i - 1] * 1 days;\r\n        }\r\n\r\n        // Day\r\n        timestamp += (day - 1) * 1 days;\r\n\r\n        // Hour, Minute, and Second are assumed as 0 (we calculate in GMT)\r\n\r\n        return timestamp;\r\n    }\r\n\r\n    function leapYearsBefore(uint year)\r\n    internal pure returns (uint) {\r\n        year -= 1;\r\n        return year / 4 - year / 100 + year / 400;\r\n    }\r\n\r\n    function isLeapYear(uint16 year)\r\n    internal pure returns (bool) {\r\n        if (year % 4 != 0) {\r\n            return false;\r\n        }\r\n        if (year % 100 != 0) {\r\n            return true;\r\n        }\r\n        if (year % 400 != 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/Bonus.sol\r\n\r\nlibrary Bonus {\r\n    uint16 constant ORIGIN_YEAR = 1970;\r\n    struct BonusData {\r\n        uint[7] factors; // aditional entry for 0% bonus\r\n        uint[6] cutofftimes;\r\n    }\r\n\r\n    // Use storage keyword so that we write this to persistent storage.\r\n    function initBonus(BonusData storage data)\r\n    internal\r\n    {\r\n        data.factors = [uint256(300), 250, 200, 150, 100, 50, 0];\r\n        data.cutofftimes = [toTimestamp(2018, 9, 1),\r\n                            toTimestamp(2018, 9, 8),\r\n                            toTimestamp(2018, 9, 15),\r\n                            toTimestamp(2018, 9, 22),\r\n                            toTimestamp(2018, 9, 29),\r\n                            toTimestamp(2018, 10, 8)];\r\n    }\r\n\r\n    function getBonusFactor(uint timestamp, BonusData storage data)\r\n    internal view returns (uint256 factor)\r\n    {\r\n        uint256 countcutoffs = data.cutofftimes.length;\r\n        // Set default to the 0% bonus.\r\n        uint256 timeIndex = countcutoffs;\r\n\r\n        for (uint256 i = 0; i < countcutoffs; i++) {\r\n            if (timestamp < data.cutofftimes[i]) {\r\n                timeIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return data.factors[timeIndex];\r\n    }\r\n\r\n    function getFollowingCutoffTime(uint timestamp, BonusData storage data)\r\n    internal view returns (uint nextTime)\r\n    {\r\n        uint256 countcutoffs = data.cutofftimes.length;\r\n        // Set default to 0 meaning \"no cutoff any more\".\r\n        nextTime = 0;\r\n\r\n        for (uint256 i = 0; i < countcutoffs; i++) {\r\n            if (timestamp < data.cutofftimes[i]) {\r\n                nextTime = data.cutofftimes[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        return nextTime;\r\n    }\r\n\r\n    // Timestamp functions based on\r\n    // https://github.com/pipermerriam/ethereum-datetime/blob/master/contracts/DateTime.sol\r\n    function toTimestamp(uint16 year, uint8 month, uint8 day)\r\n    internal pure returns (uint timestamp) {\r\n        uint16 i;\r\n\r\n        // Year\r\n        timestamp += (year - ORIGIN_YEAR) * 1 years;\r\n        timestamp += (leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR)) * 1 days;\r\n\r\n        // Month\r\n        uint8[12] memory monthDayCounts;\r\n        monthDayCounts[0] = 31;\r\n        if (isLeapYear(year)) {\r\n                monthDayCounts[1] = 29;\r\n        }\r\n        else {\r\n                monthDayCounts[1] = 28;\r\n        }\r\n        monthDayCounts[2] = 31;\r\n        monthDayCounts[3] = 30;\r\n        monthDayCounts[4] = 31;\r\n        monthDayCounts[5] = 30;\r\n        monthDayCounts[6] = 31;\r\n        monthDayCounts[7] = 31;\r\n        monthDayCounts[8] = 30;\r\n        monthDayCounts[9] = 31;\r\n        monthDayCounts[10] = 30;\r\n        monthDayCounts[11] = 31;\r\n\r\n        for (i = 1; i < month; i++) {\r\n            timestamp += monthDayCounts[i - 1] * 1 days;\r\n        }\r\n\r\n        // Day\r\n        timestamp += (day - 1) * 1 days;\r\n\r\n        // Hour, Minute, and Second are assumed as 0 (we calculate in GMT)\r\n\r\n        return timestamp;\r\n    }\r\n\r\n    function leapYearsBefore(uint year)\r\n    internal pure returns (uint) {\r\n        year -= 1;\r\n        return year / 4 - year / 100 + year / 400;\r\n    }\r\n\r\n    function isLeapYear(uint16 year)\r\n    internal pure returns (bool) {\r\n        if (year % 4 != 0) {\r\n            return false;\r\n        }\r\n        if (year % 100 != 0) {\r\n            return true;\r\n        }\r\n        if (year % 400 != 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/QCOToken.sol\r\n\r\n/*\r\nImplements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20.\r\n*/\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\ncontract QCOToken is StandardToken {\r\n\r\n    // data structures\r\n    enum States {\r\n        Initial, // deployment time\r\n        ValuationSet,\r\n        Ico, // whitelist addresses, accept funds, update balances\r\n        Aborted, // ICO aborted\r\n        Operational, // production phase\r\n        Paused         // for contract upgrades\r\n    }\r\n\r\n    mapping(address => uint256) public ethPossibleRefunds;\r\n\r\n    uint256 public soldTokens;\r\n\r\n    string public constant name = \"Qravity Coin Token\";\r\n\r\n    string public constant symbol = \"QCO\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    mapping(address => bool) public whitelist;\r\n\r\n    address public stateControl;\r\n\r\n    address public whitelistControl;\r\n\r\n    address public withdrawControl;\r\n\r\n    address public tokenAssignmentControl;\r\n\r\n    address public teamWallet;\r\n\r\n    address public reserves;\r\n\r\n    States public state;\r\n\r\n    uint256 public endBlock;\r\n\r\n    uint256 public ETH_QCO; //number of tokens per ETH\r\n\r\n    uint256 constant pointMultiplier = 1e18; //100% = 1*10^18 points\r\n\r\n    uint256 public constant maxTotalSupply = 1000000000 * pointMultiplier; //1B tokens\r\n\r\n    uint256 public constant percentForSale = 50;\r\n\r\n    Bonus.BonusData bonusData;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    //pausing the contract should extend the ico dates into the future.\r\n    uint256 public pauseOffset = 0;\r\n\r\n    uint256 public pauseLastStart = 0;\r\n\r\n\r\n    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\r\n    function QCOToken(\r\n        address _stateControl\r\n    , address _whitelistControl\r\n    , address _withdrawControl\r\n    , address _tokenAssignmentControl\r\n    , address _teamControl\r\n    , address _reserves)\r\n    public\r\n    {\r\n        stateControl = _stateControl;\r\n        whitelistControl = _whitelistControl;\r\n        withdrawControl = _withdrawControl;\r\n        tokenAssignmentControl = _tokenAssignmentControl;\r\n        moveToState(States.Initial);\r\n        endBlock = 0;\r\n        ETH_QCO = 0;\r\n        totalSupply = maxTotalSupply;\r\n        soldTokens = 0;\r\n        Bonus.initBonus(bonusData);\r\n        teamWallet = address(new QravityTeamTimelock(this, _teamControl));\r\n\r\n        reserves = _reserves;\r\n        balances[reserves] = totalSupply;\r\n        Mint(reserves, totalSupply);\r\n        Transfer(0x0, reserves, totalSupply);\r\n    }\r\n\r\n    event Whitelisted(address addr);\r\n\r\n    event StateTransition(States oldState, States newState);\r\n\r\n    modifier onlyWhitelist() {\r\n        require(msg.sender == whitelistControl);\r\n        _;\r\n    }\r\n\r\n    modifier onlyStateControl() {\r\n        require(msg.sender == stateControl);\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenAssignmentControl() {\r\n        require(msg.sender == tokenAssignmentControl);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWithdraw() {\r\n        require(msg.sender == withdrawControl);\r\n        _;\r\n    }\r\n\r\n    modifier requireState(States _requiredState) {\r\n        require(state == _requiredState);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    BEGIN ICO functions\r\n    */\r\n\r\n    //this is the main funding function, it updates the balances of tokens during the ICO.\r\n    //no particular incentive schemes have been implemented here\r\n    //it is only accessible during the \"ICO\" phase.\r\n    function() payable\r\n    public\r\n    requireState(States.Ico)\r\n    {\r\n        require(whitelist[msg.sender] == true);\r\n        require(msg.value > 0);\r\n        // We have reports that some wallet contracts may end up sending a single null-byte.\r\n        // Still reject calls of unknown functions, which are always at least 4 bytes of data.\r\n        require(msg.data.length < 4);\r\n        require(block.number < endBlock);\r\n\r\n        uint256 soldToTuserWithBonus = calcBonus(msg.value);\r\n\r\n        issueTokensToUser(msg.sender, soldToTuserWithBonus);\r\n        ethPossibleRefunds[msg.sender] = ethPossibleRefunds[msg.sender].add(msg.value);\r\n    }\r\n\r\n    function issueTokensToUser(address beneficiary, uint256 amount)\r\n    internal\r\n    {\r\n        uint256 soldTokensAfterInvestment = soldTokens.add(amount);\r\n        require(soldTokensAfterInvestment <= maxTotalSupply.mul(percentForSale).div(100));\r\n\r\n        balances[beneficiary] = balances[beneficiary].add(amount);\r\n        balances[reserves] = balances[reserves].sub(amount);\r\n        soldTokens = soldTokensAfterInvestment;\r\n        Transfer(reserves, beneficiary, amount);\r\n    }\r\n\r\n    function getCurrentBonusFactor()\r\n    public view\r\n    returns (uint256 factor)\r\n    {\r\n        //we pass in  now-pauseOffset as the \"now time\" for purposes of calculating the bonus factor\r\n        return Bonus.getBonusFactor(now - pauseOffset, bonusData);\r\n    }\r\n\r\n    function getNextCutoffTime()\r\n    public view returns (uint timestamp)\r\n    {\r\n        return Bonus.getFollowingCutoffTime(now - pauseOffset, bonusData);\r\n    }\r\n\r\n    function calcBonus(uint256 weiAmount)\r\n    constant\r\n    public\r\n    returns (uint256 resultingTokens)\r\n    {\r\n        uint256 basisTokens = weiAmount.mul(ETH_QCO);\r\n        //percentages are integer numbers as per mill (promille) so we can accurately calculate 0.5% = 5. 100% = 1000\r\n        uint256 perMillBonus = getCurrentBonusFactor();\r\n        //100% + bonus % times original amount divided by 100%.\r\n        return basisTokens.mul(per_mill + perMillBonus).div(per_mill);\r\n    }\r\n\r\n    uint256 constant per_mill = 1000;\r\n\r\n\r\n    function moveToState(States _newState)\r\n    internal\r\n    {\r\n        StateTransition(state, _newState);\r\n        state = _newState;\r\n    }\r\n    // ICO contract configuration function\r\n    // new_ETH_QCO is the new rate of ETH in QCO to use when no bonus applies\r\n    // newEndBlock is the absolute block number at which the ICO must stop. It must be set after now + silence period.\r\n    function updateEthICOVariables(uint256 _new_ETH_QCO, uint256 _newEndBlock)\r\n    public\r\n    onlyStateControl\r\n    {\r\n        require(state == States.Initial || state == States.ValuationSet);\r\n        require(_new_ETH_QCO > 0);\r\n        require(block.number < _newEndBlock);\r\n        endBlock = _newEndBlock;\r\n        // initial conversion rate of ETH_QCO set now, this is used during the Ico phase.\r\n        ETH_QCO = _new_ETH_QCO;\r\n        moveToState(States.ValuationSet);\r\n    }\r\n\r\n    function startICO()\r\n    public\r\n    onlyStateControl\r\n    requireState(States.ValuationSet)\r\n    {\r\n        require(block.number < endBlock);\r\n        moveToState(States.Ico);\r\n    }\r\n\r\n    function addPresaleAmount(address beneficiary, uint256 amount)\r\n    public\r\n    onlyTokenAssignmentControl\r\n    {\r\n        require(state == States.ValuationSet || state == States.Ico);\r\n        issueTokensToUser(beneficiary, amount);\r\n    }\r\n\r\n\r\n    function endICO()\r\n    public\r\n    onlyStateControl\r\n    requireState(States.Ico)\r\n    {\r\n        burnAndFinish();\r\n        moveToState(States.Operational);\r\n    }\r\n\r\n    function anyoneEndICO()\r\n    public\r\n    requireState(States.Ico)\r\n    {\r\n        require(block.number > endBlock);\r\n        burnAndFinish();\r\n        moveToState(States.Operational);\r\n    }\r\n\r\n    function burnAndFinish()\r\n    internal\r\n    {\r\n        totalSupply = soldTokens.mul(100).div(percentForSale);\r\n\r\n        uint256 teamAmount = totalSupply.mul(22).div(100);\r\n        balances[teamWallet] = teamAmount;\r\n        Transfer(reserves, teamWallet, teamAmount);\r\n\r\n        uint256 reservesAmount = totalSupply.sub(soldTokens).sub(teamAmount);\r\n        // Burn all tokens over the target amount.\r\n        Transfer(reserves, 0x0, balances[reserves].sub(reservesAmount).sub(teamAmount));\r\n        balances[reserves] = reservesAmount;\r\n\r\n        mintingFinished = true;\r\n        MintFinished();\r\n    }\r\n\r\n    function addToWhitelist(address _whitelisted)\r\n    public\r\n    onlyWhitelist\r\n        //    requireState(States.Ico)\r\n    {\r\n        whitelist[_whitelisted] = true;\r\n        Whitelisted(_whitelisted);\r\n    }\r\n\r\n\r\n    //emergency pause for the ICO\r\n    function pause()\r\n    public\r\n    onlyStateControl\r\n    requireState(States.Ico)\r\n    {\r\n        moveToState(States.Paused);\r\n        pauseLastStart = now;\r\n    }\r\n\r\n    //in case we want to completely abort\r\n    function abort()\r\n    public\r\n    onlyStateControl\r\n    requireState(States.Paused)\r\n    {\r\n        moveToState(States.Aborted);\r\n    }\r\n\r\n    //un-pause\r\n    function resumeICO()\r\n    public\r\n    onlyStateControl\r\n    requireState(States.Paused)\r\n    {\r\n        moveToState(States.Ico);\r\n        //increase pauseOffset by the time it was paused\r\n        pauseOffset = pauseOffset + (now - pauseLastStart);\r\n    }\r\n\r\n    //in case of a failed/aborted ICO every investor can get back their money\r\n    function requestRefund()\r\n    public\r\n    requireState(States.Aborted)\r\n    {\r\n        require(ethPossibleRefunds[msg.sender] > 0);\r\n        //there is no need for updateAccount(msg.sender) since the token never became active.\r\n        uint256 payout = ethPossibleRefunds[msg.sender];\r\n        //reverse calculate the amount to pay out\r\n        ethPossibleRefunds[msg.sender] = 0;\r\n        msg.sender.transfer(payout);\r\n    }\r\n\r\n    //after the ICO has run its course, the withdraw account can drain funds bit-by-bit as needed.\r\n    function requestPayout(uint _amount)\r\n    public\r\n    onlyWithdraw //very important!\r\n    requireState(States.Operational)\r\n    {\r\n        msg.sender.transfer(_amount);\r\n    }\r\n\r\n    //if this contract gets a balance in some other ERC20 contract - or even iself - then we can rescue it.\r\n    function rescueToken(ERC20Basic _foreignToken, address _to)\r\n    public\r\n    onlyTokenAssignmentControl\r\n    {\r\n        _foreignToken.transfer(_to, _foreignToken.balanceOf(this));\r\n    }\r\n    /**\r\n    END ICO functions\r\n    */\r\n\r\n    /**\r\n    BEGIN ERC20 functions\r\n    */\r\n    function transfer(address _to, uint256 _value)\r\n    public\r\n    requireState(States.Operational)\r\n    returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public\r\n    requireState(States.Operational)\r\n    returns (bool success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    END ERC20 functions\r\n    */\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"stateControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"calcBonus\",\"outputs\":[{\"name\":\"resultingTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseOffset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_QCO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"anyoneEndICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_ETH_QCO\",\"type\":\"uint256\"},{\"name\":\"_newEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateEthICOVariables\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_foreignToken\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextCutoffTime\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserves\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBonusFactor\",\"outputs\":[{\"name\":\"factor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseLastStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAssignmentControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addPresaleAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelisted\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethPossibleRefunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_stateControl\",\"type\":\"address\"},{\"name\":\"_whitelistControl\",\"type\":\"address\"},{\"name\":\"_withdrawControl\",\"type\":\"address\"},{\"name\":\"_tokenAssignmentControl\",\"type\":\"address\"},{\"name\":\"_teamControl\",\"type\":\"address\"},{\"name\":\"_reserves\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"StateTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"QCOToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ff89c17b57cb419a3836db9aa03df1141f71210e00000000000000000000000042d8483f7b26ca1832edccbc89c5f6d3f6a9a95e0000000000000000000000006591c31af3026133d6a98991dcb2583f5d0f336c00000000000000000000000002ac4f727fca7ba22c896b858e109f6323bcb3e9000000000000000000000000edaad6c55337355bd4a939db1d705748f8d5d18400000000000000000000000076bccab7e540bafc3aa2a4cb6ca697f136b1e6ae","Library":"","SwarmSource":"bzzr://a64107b873852fa68f373aba8ece0a73b3566920de55da095f2759d81657cfc6"}]}