{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n// @title SafeMath\r\n// @dev Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n\r\n  // @dev Multiplies two numbers, throws on overflow.\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    require(c / a == b, \"mul failed\");\r\n    return c;\r\n  }\r\n\r\n  // @dev Integer division of two numbers, truncating the quotient.\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  // @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"sub fail\");\r\n    return a - b;\r\n  }\r\n\r\n  // @dev Adds two numbers, throws on overflow.\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    require(c >= a, \"add fail\");\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n// @title ERC20 interface\r\n// @dev see https://github.com/ethereum/EIPs/issues/20\r\ncontract iERC20 {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// @title iNovaStaking\r\n// @dev The interface for cross-contract calls to the Nova Staking contract\r\n// @author Dragon Foundry (https://www.nvt.gg)\r\n// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\r\ncontract iNovaStaking {\r\n\r\n  function balanceOf(address _owner) public view returns (uint256);\r\n}\r\n\r\n\r\n\r\n// @title iNovaGame\r\n// @dev The interface for cross-contract calls to the Nova Game contract\r\n// @author Dragon Foundry (https://www.nvt.gg)\r\n// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\r\ncontract iNovaGame {\r\n  function isAdminForGame(uint _game, address account) external view returns(bool);\r\n\r\n  // List of all games tracked by the Nova Game contract\r\n  uint[] public games;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// @title NovaMasterAccess\r\n// @dev NovaMasterAccess contract for controlling access to Nova Token contract functions\r\n// @author Dragon Foundry (https://www.nvt.gg)\r\n// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\r\ncontract NovaMasterAccess {\r\n  using SafeMath for uint256;\r\n\r\n  event OwnershipTransferred(address previousOwner, address newOwner);\r\n  event PromotedGame(uint game, bool isPromoted, string json);\r\n  event SuppressedGame(uint game, bool isSuppressed);\r\n\r\n  // Reference to the address of the Nova Token ERC20 contract\r\n  iERC20 public nvtContract;\r\n\r\n  // Reference to the address of the Nova Game contract\r\n  iNovaGame public gameContract;\r\n\r\n  // The Owner can perform all admin tasks.\r\n  address public owner;\r\n\r\n  // The Recovery account can change the Owner account.\r\n  address public recoveryAddress;\r\n\r\n\r\n  // @dev The original `owner` of the contract is the contract creator.\r\n  constructor() \r\n    internal \r\n  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  // @dev Access control modifier to limit access to the Owner account\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // @dev Access control modifier to limit access to the Recovery account\r\n  modifier onlyRecovery() {\r\n    require(msg.sender == recoveryAddress);\r\n    _;\r\n  }\r\n\r\n  // @dev Assigns a new address to act as the Owner.\r\n  // @notice Can only be called by the recovery account\r\n  // @param _newOwner The address of the new Owner\r\n  function setOwner(address _newOwner) \r\n    external \r\n    onlyRecovery \r\n  {\r\n    require(_newOwner != address(0));\r\n    require(_newOwner != recoveryAddress);\r\n\r\n    owner = _newOwner;\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n  }\r\n\r\n  // @dev Assigns a new address to act as the Recovery address.\r\n  // @notice Can only be called by the Owner account\r\n  // @param _newRecovery The address of the new Recovery account\r\n  function setRecovery(address _newRecovery) \r\n    external \r\n    onlyOwner \r\n  {\r\n    require(_newRecovery != address(0));\r\n    require(_newRecovery != owner);\r\n\r\n    recoveryAddress = _newRecovery;\r\n  }\r\n\r\n  // @dev Adds or removes a game from the list of promoted games\r\n  // @param _game - the game to be promoted\r\n  // @param _isPromoted - true for promoted, false for not\r\n  // @param _json - A json string to be used to display promotional information\r\n  function setPromotedGame(uint _game, bool _isPromoted, string _json)\r\n    external\r\n    onlyOwner\r\n  {\r\n    uint gameId = gameContract.games(_game);\r\n    require(gameId == _game, \"gameIds must match\");\r\n    emit PromotedGame(_game, _isPromoted, _isPromoted ? _json : \"\");\r\n  }\r\n\r\n  // @dev Adds or removes a game from the list of suppressed games.\r\n  //   Suppressed games won't show up on the site, but can still be interacted with\r\n  //   by users.\r\n  // @param _game - the game to be promoted\r\n  // @param _isSuppressed - true for suppressed, false for not\r\n  function setSuppressedGame(uint _game, bool _isSuppressed)\r\n    external\r\n    onlyOwner\r\n  {\r\n    uint gameId = gameContract.games(_game);\r\n    require(gameId == _game, \"gameIds must match\");\r\n    emit SuppressedGame(_game, _isSuppressed);\r\n  }\r\n}\r\n\r\n\r\n\r\n// @title ERC20 Sidechain manager imlpementation\r\n// @dev Utility contract that manages Ethereum and ERC-20 tokens transferred in from the main chain\r\n// @dev Can manage any number of tokens\r\n// @author Dragon Foundry (https://www.nvt.gg)\r\n// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\r\ncontract NovaStakingBase is NovaMasterAccess, iNovaStaking {\r\n  using SafeMath for uint256;\r\n\r\n  uint public constant WEEK_ZERO_START = 1538352000; // 10/1/2018 @ 00:00:00\r\n  uint public constant SECONDS_PER_WEEK = 604800;\r\n\r\n  // The Nova Token balances of all games and users on the system\r\n  mapping(address => uint) public balances;\r\n  \r\n  // The number of Nova Tokens stored as income each week\r\n  mapping(uint => uint) public storedNVTbyWeek;\r\n\r\n  // @dev Access control modifier to limit access to game admin accounts\r\n  modifier onlyGameAdmin(uint _game) {\r\n    require(gameContract.isAdminForGame(_game, msg.sender));\r\n    _;\r\n  }\r\n\r\n  // @dev Used on deployment to link the Staking and Game contracts.\r\n  // @param _gameContract - the address of a valid GameContract instance\r\n  function linkContracts(address _gameContract)\r\n    external\r\n    onlyOwner\r\n  {\r\n    gameContract = iNovaGame(_gameContract);\r\n  }\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Balance(address account, uint256 value);\r\n  event StoredNVT(uint week, uint stored);\r\n\r\n  // @dev Gets the balance of the specified address.\r\n  // @param _owner The address to query the the balance of.\r\n  // @returns An uint256 representing the amount owned by the passed address.\r\n  function balanceOf(address _owner) \r\n    public\r\n    view\r\n  returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  // Internal transfer of ERC20 tokens to complete payment of an auction.\r\n  // @param _from The address which you want to send tokens from\r\n  // @param _to The address which you want to transfer to\r\n  // @param _value The amout of tokens to be transferred\r\n  function _transfer(address _from, address _to, uint _value) \r\n    internal\r\n  {\r\n    require(_from != _to, \"can't transfer to yourself\");\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    emit Balance(_from, balances[_from]);\r\n    emit Balance(_to, balances[_to]);\r\n  }\r\n\r\n  // @dev Gets the current week, as calculated by this smart contract\r\n  // @returns uint - the current week\r\n  function getCurrentWeek()\r\n    external\r\n    view\r\n  returns(uint) {\r\n    return _getCurrentWeek();\r\n  }\r\n\r\n  // @dev Internal function to calculate the current week\r\n  // @returns uint - the current week\r\n  function _getCurrentWeek()\r\n    internal\r\n    view\r\n  returns(uint) {\r\n    return (now - WEEK_ZERO_START) / SECONDS_PER_WEEK;\r\n  }\r\n}\r\n\r\n\r\n// @title Nova Stake Management\r\n// @dev NovaStakeManagement contract for managing stakes and game balances\r\n// @author Dragon Foundry (https://www.nvt.gg)\r\n// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\r\ncontract NovaStakeManagement is NovaStakingBase {\r\n\r\n  // Emitted whenever a user or game takes a payout from the system\r\n  event Payout(address indexed staker, uint amount, uint endWeek);\r\n\r\n  // Emitted whenever a user's stake is increased or decreased.\r\n  event ChangeStake(uint week, uint indexed game, address indexed staker, uint prevStake, uint newStake,\r\n    uint accountStake, uint gameStake, uint totalStake);\r\n\r\n  // @dev Tracks current stake levels for all accounts and games.\r\n  //   Tracks separately for accounts by game, accounts, games, and the total stake on the system\r\n  // Mapping(Game => Mapping(Account => Stake))\r\n  mapping(uint => mapping(address => uint)) public gameAccountStaked;\r\n  // Mapping(Account => Stake)\r\n  mapping(address => uint) public accountStaked;\r\n  // Mapping(Game => Stake)\r\n  mapping(uint => uint) public gameStaked;\r\n  // Stake\r\n  uint public totalStaked;\r\n\r\n  // @dev Tracks stakes by week for accounts and games. Each is updated when a user changes their stake.\r\n  //   These can be zero if they haven't been updated during the current week, so \"zero\"\r\n  //     just means \"look at the week before\", as no stakes have been changed.\r\n  //   When setting a stake to zero, the system records a \"1\". This is safe, because it's stored\r\n  //     with 18 significant digits, and the calculation \r\n  // Mapping(Week => Mapping(Game => Mapping(Account => Stake)))\r\n  mapping(uint => mapping(uint => mapping(address => uint))) public weekGameAccountStakes;\r\n  // Mapping(Week => Mapping(Account => Stake))\r\n  mapping(uint => mapping(address => uint)) public weekAccountStakes;\r\n  // Mapping(Week => Mapping(Game => Stake))\r\n  mapping(uint => mapping(uint => uint)) public weekGameStakes;\r\n  // Mapping(Week => Stake)\r\n  mapping(uint => uint) public weekTotalStakes;\r\n\r\n  // The last week that an account took a payout. Used for calculating the remaining payout for the account\r\n  mapping(address => uint) public lastPayoutWeekByAccount;\r\n  // The last week that a game took a payout. Used for calculating the remaining payout for the game\r\n  mapping(uint => uint) public lastPayoutWeekByGame;\r\n\r\n  // Tracks the amount of income the system has taken in.\r\n  // All income is paid out to games (50%) and stakers (50%)\r\n  mapping(uint => uint) public weeklyIncome;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    weekTotalStakes[_getCurrentWeek() - 1] = 1;\r\n  }\r\n\r\n\r\n  // @dev Sets the sender's stake on a game to an amount.\r\n  // @param _game - the game to increase or decrease the sender's stake on\r\n  // @param _newStake - The new stake value. Can be an increase or decrease,\r\n  //   but must be different than their current stake, and lower than their staking balance.\r\n  function setStake(uint _game, uint _newStake)\r\n    public\r\n  {\r\n    uint currentStake = gameAccountStaked[_game][msg.sender];\r\n    if (currentStake < _newStake) {\r\n      increaseStake(_game, _newStake - currentStake);\r\n    } else \r\n    if (currentStake > _newStake) {\r\n      decreaseStake(_game, currentStake - _newStake);\r\n\r\n    }\r\n  }\r\n\r\n  // @dev Increases the sender's stake on a game by an amount.\r\n  // @param _game - the game to increase the sender's stake on\r\n  // @param _increase - The increase must be non-zero, and less than \r\n  //   or equal to the user's available staking balance\r\n  function increaseStake(uint _game, uint _increase)\r\n    public\r\n  returns(uint newStake) {\r\n    require(_increase > 0, \"Must be a non-zero change\");\r\n    // Take the payment\r\n    uint newBalance = balances[msg.sender].sub(_increase);\r\n    balances[msg.sender] = newBalance;\r\n    emit Balance(msg.sender, newBalance);\r\n\r\n    uint prevStake = gameAccountStaked[_game][msg.sender];\r\n    newStake = prevStake.add(_increase);\r\n    uint gameStake = gameStaked[_game].add(_increase);\r\n    uint accountStake = accountStaked[msg.sender].add(_increase);\r\n    uint totalStake = totalStaked.add(_increase);\r\n\r\n    _storeStakes(_game, msg.sender, prevStake, newStake, gameStake, accountStake, totalStake);\r\n  }\r\n\r\n  // @dev Decreases the sender's stake on a game by an amount.\r\n  // @param _game - the game to decrease the sender's stake on\r\n  // @param _decrease - The decrease must be non-zero, and less than or equal to the user's stake on the game\r\n  function decreaseStake(uint _game, uint _decrease)\r\n    public\r\n  returns(uint newStake) {\r\n    require(_decrease > 0, \"Must be a non-zero change\");\r\n    uint newBalance = balances[msg.sender].add(_decrease);\r\n    balances[msg.sender] = newBalance;\r\n    emit Balance(msg.sender, newBalance);\r\n\r\n    uint prevStake = gameAccountStaked[_game][msg.sender];\r\n    newStake = prevStake.sub(_decrease);\r\n    uint gameStake = gameStaked[_game].sub(_decrease);\r\n    uint accountStake = accountStaked[msg.sender].sub(_decrease);\r\n    uint totalStake = totalStaked.sub(_decrease);\r\n\r\n    _storeStakes(_game, msg.sender, prevStake, newStake, gameStake, accountStake, totalStake);\r\n  }\r\n\r\n  // @dev Lets a  staker collect the current payout for all their stakes.\r\n  // @param _numberOfWeeks - the number of weeks to collect. Set to 0 to collect all weeks.\r\n  // @returns _payout - the total payout over all the collected weeks\r\n  function collectPayout(uint _numberOfWeeks) \r\n    public\r\n  returns(uint _payout) {\r\n    uint startWeek = lastPayoutWeekByAccount[msg.sender];\r\n    require(startWeek > 0, \"must be a valid start week\");\r\n    uint endWeek = _getEndWeek(startWeek, _numberOfWeeks);\r\n    require(startWeek < endWeek, \"must be at least one week to pay out\");\r\n    \r\n    uint lastWeekStake;\r\n    for (uint i = startWeek; i < endWeek; i++) {\r\n      // Get the stake for the week. Use the last week's stake if the stake hasn't changed\r\n      uint weeklyStake = weekAccountStakes[i][msg.sender] == 0 \r\n          ? lastWeekStake \r\n          : weekAccountStakes[i][msg.sender];\r\n      lastWeekStake = weeklyStake;\r\n\r\n      uint weekStake = _getWeekTotalStake(i);\r\n      uint storedNVT = storedNVTbyWeek[i];\r\n      uint weeklyPayout = storedNVT > 1 && weeklyStake > 1 && weekStake > 1 \r\n        ? weeklyStake.mul(storedNVT) / weekStake / 2\r\n        : 0;\r\n      _payout = _payout.add(weeklyPayout);\r\n\r\n    }\r\n    // If the weekly stake for the end week is not set, set it to the\r\n    //   last week's stake, to ensure we know what to pay out.\r\n    // This works even if the end week is the current week; the value\r\n    //   will be overwritten if necessary by future stake changes\r\n    if(weekAccountStakes[endWeek][msg.sender] == 0) {\r\n      weekAccountStakes[endWeek][msg.sender] = lastWeekStake;\r\n    }\r\n    // Always update the last payout week\r\n    lastPayoutWeekByAccount[msg.sender] = endWeek;\r\n\r\n    _transfer(address(this), msg.sender, _payout);\r\n    emit Payout(msg.sender, _payout, endWeek);\r\n  }\r\n\r\n  // @dev Lets a game admin collect the current payout for their game.\r\n  // @param _game - the game to collect\r\n  // @param _numberOfWeeks - the number of weeks to collect. Set to 0 to collect all weeks.\r\n  // @returns _payout - the total payout over all the collected weeks\r\n  function collectGamePayout(uint _game, uint _numberOfWeeks)\r\n    external\r\n    onlyGameAdmin(_game)\r\n  returns(uint _payout) {\r\n    uint week = lastPayoutWeekByGame[_game];\r\n    require(week > 0, \"must be a valid start week\");\r\n    uint endWeek = _getEndWeek(week, _numberOfWeeks);\r\n    require(week < endWeek, \"must be at least one week to pay out\");\r\n\r\n    uint lastWeekStake;\r\n    for (week; week < endWeek; week++) {\r\n      // Get the stake for the week. Use the last week's stake if the stake hasn't changed\r\n      uint weeklyStake = weekGameStakes[week][_game] == 0 \r\n          ? lastWeekStake \r\n          : weekGameStakes[week][_game];\r\n      lastWeekStake = weeklyStake;\r\n\r\n      uint weekStake = _getWeekTotalStake(week);\r\n      uint storedNVT = storedNVTbyWeek[week];\r\n      uint weeklyPayout = storedNVT > 1 && weeklyStake > 1 && weekStake > 1 \r\n        ? weeklyStake.mul(storedNVT) / weekStake / 2\r\n        : 0;\r\n      _payout = _payout.add(weeklyPayout);\r\n    }\r\n    // If the weekly stake for the end week is not set, set it to \r\n    //   the last week's stake, to ensure we know what to pay out\r\n    //   This works even if the end week is the current week; the value\r\n    //   will be overwritten if necessary by future stake changes\r\n    if(weekGameStakes[endWeek][_game] == 0) {\r\n      weekGameStakes[endWeek][_game] = lastWeekStake;\r\n    }\r\n    // Always update the last payout week\r\n    lastPayoutWeekByGame[_game] = endWeek;\r\n\r\n    _transfer(address(this), address(_game), _payout);\r\n    emit Payout(address(_game), _payout, endWeek);\r\n  }\r\n\r\n  // @dev Internal function to calculate the game, account, and total stakes on a stake change\r\n  // @param _game - the game to be staked on\r\n  // @param _staker - the account doing the staking\r\n  // @param _prevStake - the previous stake of the staker on that game\r\n  // @param _newStake - the newly updated stake of the staker on that game\r\n  // @param _gameStake - the new total stake for the game\r\n  // @param _accountStake - the new total stake for the staker's account\r\n  // @param _totalStake - the new total stake for the system as a whole\r\n  function _storeStakes(uint _game, address _staker, uint _prevStake, uint _newStake,\r\n    uint _gameStake, uint _accountStake, uint _totalStake)\r\n    internal\r\n  {\r\n    uint _currentWeek = _getCurrentWeek();\r\n\r\n    gameAccountStaked[_game][msg.sender] = _newStake;\r\n    gameStaked[_game] = _gameStake;\r\n    accountStaked[msg.sender] = _accountStake;\r\n    totalStaked = _totalStake;\r\n    \r\n    // Each of these stores the weekly stake as \"1\" if it's been set to 0.\r\n    // This tracks the difference between \"not set this week\" and \"set to zero this week\"\r\n    weekGameAccountStakes[_currentWeek][_game][_staker] = _newStake > 0 ? _newStake : 1;\r\n    weekAccountStakes[_currentWeek][_staker] = _accountStake > 0 ? _accountStake : 1;\r\n    weekGameStakes[_currentWeek][_game] = _gameStake > 0 ? _gameStake : 1;\r\n    weekTotalStakes[_currentWeek] = _totalStake > 0 ? _totalStake : 1;\r\n\r\n    // Get the last payout week; set it to this week if there hasn't been a week.\r\n    // This lets the user iterate payouts correctly.\r\n    if(lastPayoutWeekByAccount[_staker] == 0) {\r\n      lastPayoutWeekByAccount[_staker] = _currentWeek - 1;\r\n      if (lastPayoutWeekByGame[_game] == 0) {\r\n        lastPayoutWeekByGame[_game] = _currentWeek - 1;\r\n      }\r\n    }\r\n\r\n    emit ChangeStake(_currentWeek, _game, _staker, _prevStake, _newStake, \r\n      _accountStake, _gameStake, _totalStake);\r\n  }\r\n\r\n  // @dev Internal function to get the total stake for a given week\r\n  // @notice This updates the stored values for intervening weeks, \r\n  //   as that's more efficient at 100 or more users\r\n  // @param _week - the week in which to calculate the total stake\r\n  // @returns _stake - the total stake in that week\r\n  function _getWeekTotalStake(uint _week)\r\n    internal\r\n  returns(uint _stake) {\r\n    _stake = weekTotalStakes[_week];\r\n    if(_stake == 0) {\r\n      uint backWeek = _week;\r\n      while(_stake == 0) {\r\n        backWeek--;\r\n        _stake = weekTotalStakes[backWeek];\r\n      }\r\n      weekTotalStakes[_week] = _stake;\r\n    }\r\n  }\r\n\r\n  // @dev Internal function to get the end week based on start, number of weeks, and current week\r\n  // @param _startWeek - the start of the range\r\n  // @param _numberOfWeeks - the length of the range\r\n  // @returns endWeek - either the current week, or the end of the range\r\n  // @notice This throws if it tries to get a week range longer than the current week\r\n  function _getEndWeek(uint _startWeek, uint _numberOfWeeks)\r\n    internal\r\n    view\r\n  returns(uint endWeek) {\r\n    uint _currentWeek = _getCurrentWeek();\r\n    require(_startWeek < _currentWeek, \"must get at least one week\");\r\n    endWeek = _numberOfWeeks == 0 ? _currentWeek : _startWeek + _numberOfWeeks;\r\n    require(endWeek <= _currentWeek, \"can't get more than the current week\");\r\n  }\r\n}\r\n\r\n\r\n\r\n// @title NovaToken ERC20 contract\r\n// @dev ERC20 management contract, designed to make using ERC-20 tokens easier\r\n// @author Dragon Foundry (https://www.nvt.gg)\r\n// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\r\ncontract NovaStaking is NovaStakeManagement {\r\n\r\n  event Deposit(address account, uint256 amount, uint256 balance);\r\n  event Withdrawal(address account, uint256 amount, uint256 balance);\r\n\r\n  // @dev Constructor creates a reference to the NFT ownership contract\r\n  //  and verifies the manager cut is in the valid range.\r\n  // @param _nvtContract - address of the mainnet NovaToken contract\r\n  constructor(iERC20 _nvtContract)\r\n    public\r\n  {\r\n    nvtContract = _nvtContract;\r\n  }\r\n\r\n  // @dev Allows a user to deposit NVT through approveAndCall.\r\n  // @notice Other methods of sending NVT to this contract will still work, but will result in you losing your NVT.\r\n  // @param _sender is the original sender of the message\r\n  // @param _amount is the amount of NVT that was approved\r\n  // @param _contract is the contract that sent the approval; we check to be sure it's the NVT contract\r\n  // @param _data is the data that is passed in along with the call. It's not used here\r\n  function receiveApproval(address _sender, uint _amount, address _contract, bytes _data)\r\n    public\r\n  {\r\n    require(_data.length == 0, \"you must pass no data\");\r\n    require(_contract == address(nvtContract), \"sending from a non-NVT contract is not allowed\");\r\n\r\n    // Track the transferred NVT\r\n    uint newBalance = balances[_sender].add(_amount);\r\n    balances[_sender] = newBalance;\r\n\r\n    emit Balance(_sender, newBalance);\r\n    emit Deposit(_sender, _amount, newBalance);\r\n\r\n    // Transfer the NVT to this\r\n    require(nvtContract.transferFrom(_sender, address(this), _amount), \"must successfully transfer\");\r\n  }\r\n\r\n  function receiveNVT(uint _amount, uint _week) \r\n    external\r\n  {\r\n    require(_week >= _getCurrentWeek(), \"Current Week must be equal or greater\");\r\n    uint totalDonation = weeklyIncome[_week].add(_amount);\r\n    weeklyIncome[_week] = totalDonation;\r\n\r\n    uint stored = storedNVTbyWeek[_week].add(_amount);\r\n    storedNVTbyWeek[_week] = stored;\r\n    emit StoredNVT(_week, stored);\r\n    // transfer the donation\r\n    _transfer(msg.sender, address(this), _amount);\r\n  }\r\n\r\n  // @dev Allows a user to withdraw some or all of their NVT stored in this contract\r\n  // @param _sender is the original sender of the message\r\n  // @param _amount is the amount of NVT to be withdrawn. Withdraw(0) will withdraw all.\r\n  // @returns true if successful, false if unsuccessful, but will most throw on most failures\r\n  function withdraw(uint amount)\r\n    external\r\n  {\r\n    uint withdrawalAmount = amount > 0 ? amount : balances[msg.sender];\r\n    require(withdrawalAmount > 0, \"Can't withdraw - zero balance\");\r\n    uint newBalance = balances[msg.sender].sub(withdrawalAmount);\r\n    balances[msg.sender] = newBalance;\r\n    emit Withdrawal(msg.sender, withdrawalAmount, newBalance);\r\n    emit Balance(msg.sender, newBalance);\r\n    nvtContract.transfer(msg.sender, withdrawalAmount);\r\n  }\r\n\r\n  // @dev Add more ERC-20 tokens to a game. Can be used to fund games with Nova Tokens for card creation\r\n  // @param _game - the # of the game to add tokens to\r\n  // @param _tokensToToAdd - the number of Nova Tokens to transfer from the calling account\r\n  function addNVTtoGame(uint _game, uint _tokensToToAdd)\r\n    external\r\n    onlyGameAdmin(_game)\r\n  {\r\n    // Take the funding, and apply it to the GAME's address (a fake ETH address...)\r\n    _transfer(msg.sender, address(_game), _tokensToToAdd);\r\n  }\r\n\r\n  // @dev Withdraw earned (or funded) Nova Tokens from a game.\r\n  // @param _game - the # of the game to add tokens to\r\n  // @param _tokensToWithdraw - the number of NVT to transfer from the game to the calling account\r\n  function withdrawNVTfromGame(uint _game, uint _tokensToWithdraw)\r\n    external\r\n    onlyGameAdmin(_game)\r\n  {\r\n    // Take the NVT funds from the game, and apply them to the game admin's address\r\n    _transfer(address(_game), msg.sender, _tokensToWithdraw);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastPayoutWeekByGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"},{\"name\":\"_newStake\",\"type\":\"uint256\"}],\"name\":\"setStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"},{\"name\":\"_decrease\",\"type\":\"uint256\"}],\"name\":\"decreaseStake\",\"outputs\":[{\"name\":\"newStake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEEK_ZERO_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"},{\"name\":\"_numberOfWeeks\",\"type\":\"uint256\"}],\"name\":\"collectGamePayout\",\"outputs\":[{\"name\":\"_payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"},{\"name\":\"_isSuppressed\",\"type\":\"bool\"}],\"name\":\"setSuppressedGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weekTotalStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPayoutWeekByAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameAccountStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"storedNVTbyWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberOfWeeks\",\"type\":\"uint256\"}],\"name\":\"collectPayout\",\"outputs\":[{\"name\":\"_payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recoveryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"},{\"name\":\"_isPromoted\",\"type\":\"bool\"},{\"name\":\"_json\",\"type\":\"string\"}],\"name\":\"setPromotedGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_week\",\"type\":\"uint256\"}],\"name\":\"receiveNVT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECONDS_PER_WEEK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameContract\",\"type\":\"address\"}],\"name\":\"linkContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weekAccountStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weekGameStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"},{\"name\":\"_tokensToToAdd\",\"type\":\"uint256\"}],\"name\":\"addNVTtoGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"},{\"name\":\"_increase\",\"type\":\"uint256\"}],\"name\":\"increaseStake\",\"outputs\":[{\"name\":\"newStake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nvtContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weekGameAccountStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRecovery\",\"type\":\"address\"}],\"name\":\"setRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"},{\"name\":\"_tokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawNVTfromGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nvtContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endWeek\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"week\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevStake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newStake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accountStake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameStake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalStake\",\"type\":\"uint256\"}],\"name\":\"ChangeStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Balance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"week\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stored\",\"type\":\"uint256\"}],\"name\":\"StoredNVT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isPromoted\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"json\",\"type\":\"string\"}],\"name\":\"PromotedGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isSuppressed\",\"type\":\"bool\"}],\"name\":\"SuppressedGame\",\"type\":\"event\"}]","ContractName":"NovaStaking","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000009d8b66c48424324b25754a873e290cae5dca439","Library":"","SwarmSource":"bzzr://97fd233605a4d632faad84b940eee57f324707b285a890a2e4d48d63b955bc24"}]}