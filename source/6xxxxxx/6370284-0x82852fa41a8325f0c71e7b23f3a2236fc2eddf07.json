{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n///@title Dremabridge Payment contract\r\n///@author Arq\r\n///@notice Simple payment contract that checks an address for an \"Operating Threshold\" which is a set balance of ether, the remaining balance to another Address called Cold Storage.\r\n\r\ncontract paymentContract {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address operatingAddress;\r\n    address coldStorage;\r\n\r\n    uint public opThreshold;\r\n    \r\n///@author Arq\r\n///@notice Constructor function determines the payment parties and threshold.\r\n///@param _operatingAddress - The Address that will be refilled by payments to this contract.\r\n///@param _coldStorage - The Address of the Cold Storage wallet, where overflow funds are sent.\r\n///@param _threshold - The level to which this contract will replenish the funds in the operatingAddress wallet.\r\n    constructor(address _operatingAddress, address _coldStorage, uint _threshold) public {\r\n        operatingAddress = _operatingAddress;\r\n        coldStorage = _coldStorage;\r\n        opThreshold = _threshold * 1 ether;\r\n    }\r\n///@author Arq\r\n///@notice The Fallback Function that accepts payments.\r\n///@dev Contract can be used as a payment source.\r\n    function () public payable {\r\n        distribute();\r\n    }\r\n\r\n    ///@author Arq\r\n    ///@notice Function that sends funds to either Cold Storage, Operating Address, or both based on the Operating Threshold.\r\n    ///@dev opThreshold determines what the balance in the operatingAddress should be, at a minimum.\r\n        function distribute() internal {\r\n            if(operatingAddress.balance < opThreshold) {\r\n                if(address(this).balance < (opThreshold - operatingAddress.balance)){\r\n                    operatingAddress.transfer(address(this).balance);\r\n                } else {\r\n                    operatingAddress.transfer(opThreshold - operatingAddress.balance);\r\n                    coldStorage.transfer(address(this).balance);\r\n                }\r\n            } else {\r\n                coldStorage.transfer(address(this).balance);\r\n            }\r\n        }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"opThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_operatingAddress\",\"type\":\"address\"},{\"name\":\"_coldStorage\",\"type\":\"address\"},{\"name\":\"_threshold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"paymentContract","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000485582650fb521fd4af5b53810b8b1797505696e000000000000000000000000ac87ec0b5624ad4610486fe64902bf0c4d17772d0000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://208434d762cc0c205951f40fc5152ba673804f926f9d601654f00f4793048e51"}]}