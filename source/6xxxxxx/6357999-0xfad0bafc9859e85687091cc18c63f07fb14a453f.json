{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(_owner);\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\ncontract FINPointRecord is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // claimRate is the multiplier to calculate the number of FIN ERC20 claimable per FIN points reorded\r\n    // e.g., 100 = 1:1 claim ratio\r\n    // this claim rate can be seen as a kind of airdrop for exsisting FIN point holders at the time of claiming\r\n    uint256 public claimRate;\r\n\r\n    // an address map used to store the per account claimable FIN ERC20 record\r\n    // as a result of swapped FIN points\r\n    mapping (address => uint256) public claimableFIN;\r\n\r\n    event FINRecordCreate(\r\n        address indexed _recordAddress,\r\n        uint256 _finPointAmount,\r\n        uint256 _finERC20Amount\r\n    );\r\n\r\n    event FINRecordUpdate(\r\n        address indexed _recordAddress,\r\n        uint256 _finPointAmount,\r\n        uint256 _finERC20Amount\r\n    );\r\n\r\n    event FINRecordMove(\r\n        address indexed _oldAddress,\r\n        address indexed _newAddress,\r\n        uint256 _finERC20Amount\r\n    );\r\n\r\n    event ClaimRateSet(uint256 _claimRate);\r\n\r\n    /**\r\n     * Throws if claim rate is not set\r\n    */\r\n    modifier canRecord() {\r\n        require(claimRate > 0);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev sets the claim rate for FIN ERC20\r\n     * @param _claimRate is the claim rate applied during record creation\r\n    */\r\n    function setClaimRate(uint256 _claimRate) public onlyOwner{\r\n        require(_claimRate <= 1000); // maximum 10x migration rate\r\n        require(_claimRate >= 100); // minimum 1x migration rate\r\n        claimRate = _claimRate;\r\n        emit ClaimRateSet(claimRate);\r\n    }\r\n\r\n    /**\r\n    * @dev Used to calculate and store the amount of claimable FIN ERC20 from existing FIN point balances\r\n    * @param _recordAddress - the registered address assigned to FIN ERC20 claiming\r\n    * @param _finPointAmount - the original amount of FIN points to be moved, this param should always be entered as base units\r\n    * i.e., 1 FIN = 10**18 base units\r\n    * @param _applyClaimRate - flag to apply the claim rate or not, any Finterra Technologies company FIN point allocations\r\n    * are strictly moved at one to one and do not recive the claim (airdrop) bonus applied to FIN point user balances\r\n    */\r\n    function recordCreate(address _recordAddress, uint256 _finPointAmount, bool _applyClaimRate) public onlyOwner canRecord {\r\n        require(_finPointAmount >= 100000); // minimum allowed FIN 0.000000000001 (in base units) to avoid large rounding errors\r\n\r\n        uint256 finERC20Amount;\r\n\r\n        if(_applyClaimRate == true) {\r\n            finERC20Amount = _finPointAmount.mul(claimRate).div(100);\r\n        } else {\r\n            finERC20Amount = _finPointAmount;\r\n        }\r\n\r\n        claimableFIN[_recordAddress] = claimableFIN[_recordAddress].add(finERC20Amount);\r\n\r\n        emit FINRecordCreate(_recordAddress, _finPointAmount, claimableFIN[_recordAddress]);\r\n    }\r\n\r\n    /**\r\n    * @dev Used to calculate and update the amount of claimable FIN ERC20 from existing FIN point balances\r\n    * @param _recordAddress - the registered address assigned to FIN ERC20 claiming\r\n    * @param _finPointAmount - the original amount of FIN points to be migrated, this param should always be entered as base units\r\n    * i.e., 1 FIN = 10**18 base units\r\n    * @param _applyClaimRate - flag to apply claim rate or not, any Finterra Technologies company FIN point allocations\r\n    * are strictly migrated at one to one and do not recive the claim (airdrop) bonus applied to FIN point user balances\r\n    */\r\n    function recordUpdate(address _recordAddress, uint256 _finPointAmount, bool _applyClaimRate) public onlyOwner canRecord {\r\n        require(_finPointAmount >= 100000); // minimum allowed FIN 0.000000000001 (in base units) to avoid large rounding errors\r\n\r\n        uint256 finERC20Amount;\r\n\r\n        if(_applyClaimRate == true) {\r\n            finERC20Amount = _finPointAmount.mul(claimRate).div(100);\r\n        } else {\r\n            finERC20Amount = _finPointAmount;\r\n        }\r\n\r\n        claimableFIN[_recordAddress] = finERC20Amount;\r\n\r\n        emit FINRecordUpdate(_recordAddress, _finPointAmount, claimableFIN[_recordAddress]);\r\n    }\r\n\r\n    /**\r\n    * @dev Used to move FIN ERC20 records from one address to another, primarily in case a user has lost access to their originally registered account\r\n    * @param _oldAddress - the original registered address\r\n    * @param _newAddress - the new registerd address\r\n    */\r\n    function recordMove(address _oldAddress, address _newAddress) public onlyOwner canRecord {\r\n        require(claimableFIN[_oldAddress] != 0);\r\n        require(claimableFIN[_newAddress] == 0);\r\n\r\n        claimableFIN[_newAddress] = claimableFIN[_oldAddress];\r\n        claimableFIN[_oldAddress] = 0;\r\n\r\n        emit FINRecordMove(_oldAddress, _newAddress, claimableFIN[_newAddress]);\r\n    }\r\n\r\n    /**\r\n    * @dev Used to retrieve the FIN ERC20 migration records for an address, for FIN ERC20 claiming\r\n    * @param _recordAddress - the registered address where FIN ERC20 tokens can be claimed\r\n    * @return uint256 - the amount of recorded FIN ERC20 after FIN point migration\r\n    */\r\n    function recordGet(address _recordAddress) public view returns (uint256) {\r\n        return claimableFIN[_recordAddress];\r\n    }\r\n\r\n    // cannot send ETH to this contract\r\n    function () public payable {\r\n        revert (); \r\n    }  \r\n\r\n}\r\ncontract Claimable is Ownable {\r\n    // FINPointRecord var definition\r\n    FINPointRecord public finPointRecordContract;\r\n\r\n    // an address map used to store the mintAllowed flag, so we do not mint more than once\r\n    mapping (address => bool) public isMinted;\r\n\r\n    event RecordSourceTransferred(\r\n        address indexed previousRecordContract,\r\n        address indexed newRecordContract\r\n    );\r\n\r\n\r\n    /**\r\n    * @dev The Claimable constructor sets the original `claimable record contract` to the provided _claimContract\r\n    * address.\r\n    */\r\n    constructor(FINPointRecord _finPointRecordContract) public {\r\n        finPointRecordContract = _finPointRecordContract;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Allows to change the record information source contract.\r\n    * @param _newRecordContract The address of the new record contract\r\n    */\r\n    function transferRecordSource(FINPointRecord _newRecordContract) public onlyOwner {\r\n        _transferRecordSource(_newRecordContract);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the reference of the record contract to a newRecordContract.\r\n    * @param _newRecordContract The address of the new record contract\r\n    */\r\n    function _transferRecordSource(FINPointRecord _newRecordContract) internal {\r\n        require(_newRecordContract != address(0));\r\n        emit RecordSourceTransferred(finPointRecordContract, _newRecordContract);\r\n        finPointRecordContract = _newRecordContract;\r\n    }\r\n}\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function allowance(address owner, address spender)public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value)public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner,address indexed spender,uint256 value);\r\n\r\n}\r\ncontract StandardToken is ERC20Interface {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply_;\r\n\r\n    // the following variables need to be here for scoping to properly freeze normal transfers after migration has started\r\n    // migrationStart flag\r\n    bool public migrationStart;\r\n    // var for storing the the TimeLock contract deployment address (for vesting FIN allocations)\r\n    TimeLock public timeLockContract;\r\n\r\n    /**\r\n     * @dev Modifier for allowing only TimeLock transactions to occur after the migration period has started\r\n    */\r\n    modifier migrateStarted {\r\n        if(migrationStart == true){\r\n            require(msg.sender == address(timeLockContract));\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(string _name, string _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public migrateStarted returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n        )\r\n        public\r\n        migrateStarted\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\ncontract TimeLock {\r\n    //FINERC20 var definition\r\n    MintableToken public ERC20Contract;\r\n    // custom data structure to hold locked funds and time\r\n    struct accountData {\r\n        uint256 balance;\r\n        uint256 releaseTime;\r\n    }\r\n\r\n    event Lock(address indexed _tokenLockAccount, uint256 _lockBalance, uint256 _releaseTime);\r\n    event UnLock(address indexed _tokenUnLockAccount, uint256 _unLockBalance, uint256 _unLockTime);\r\n\r\n    // only one locked account per address\r\n    mapping (address => accountData) public accounts;\r\n\r\n    /**\r\n    * @dev Constructor in which we pass the ERC20Contract address for reference and method calls\r\n    */\r\n\r\n    constructor(MintableToken _ERC20Contract) public {\r\n        ERC20Contract = _ERC20Contract;\r\n    }\r\n\r\n    function timeLockTokens(uint256 _lockTimeS) public {\r\n\r\n        uint256 lockAmount = ERC20Contract.allowance(msg.sender, this); // get this time lock contract's approved amount of tokens\r\n\r\n\r\n        require(lockAmount != 0); // check that this time lock contract has been approved to lock an amount of tokens on the msg.sender's behalf\r\n\r\n        if (accounts[msg.sender].balance > 0) { // if locked balance already exists, add new amount to the old balance and retain the same release time\r\n            accounts[msg.sender].balance = SafeMath.add(accounts[msg.sender].balance, lockAmount);\r\n      } else { // else populate the balance and set the release time for the newly locked balance\r\n            accounts[msg.sender].balance = lockAmount;\r\n            accounts[msg.sender].releaseTime = SafeMath.add(block.timestamp, _lockTimeS);\r\n        }\r\n\r\n        emit Lock(msg.sender, lockAmount, accounts[msg.sender].releaseTime);\r\n\r\n        ERC20Contract.transferFrom(msg.sender, this, lockAmount);\r\n\r\n    }\r\n\r\n    function tokenRelease() public {\r\n        // check if user has funds due for pay out because lock time is over\r\n        require (accounts[msg.sender].balance != 0 && accounts[msg.sender].releaseTime <= block.timestamp);\r\n        uint256 transferUnlockedBalance = accounts[msg.sender].balance;\r\n        accounts[msg.sender].balance = 0;\r\n        accounts[msg.sender].releaseTime = 0;\r\n        emit UnLock(msg.sender, transferUnlockedBalance, block.timestamp);\r\n        ERC20Contract.transfer(msg.sender, transferUnlockedBalance);\r\n    }\r\n\r\n    /**\r\n    * @dev Used to retrieve FIN ERC20 contract address that this deployment is attatched to\r\n    * @return address - the FIN ERC20 contract address that this deployment is attatched to\r\n    */\r\n    function getERC20() public view returns (address) {\r\n        return ERC20Contract;\r\n    }\r\n}\r\ncontract FINERC20Migrate is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Address map used to store the per account migratable FIN balances\r\n    // as per the account's FIN ERC20 tokens on the Ethereum Network\r\n\r\n    mapping (address => uint256) public migratableFIN;\r\n    \r\n    MintableToken public ERC20Contract;\r\n\r\n    constructor(MintableToken _finErc20) public {\r\n        ERC20Contract = _finErc20;\r\n    }   \r\n\r\n    // Note: _totalMigratableFIN is a running total of FIN claimed as migratable in this contract, \r\n    // but does not represent the actual amount of FIN migrated to the Gallactic network\r\n    event FINMigrateRecordUpdate(\r\n        address indexed _account,\r\n        uint256 _totalMigratableFIN\r\n    ); \r\n\r\n    /**\r\n    * @dev Used to calculate and store the amount of FIN ERC20 token balances to be migrated to the Gallactic network\r\n    * \r\n    * @param _balanceToMigrate - the requested balance to reserve for migration (in most cases this should be the account's total balance)\r\n    *    - primarily included as a parameter for simple validation on the Gallactic side of the migration\r\n    */\r\n    function initiateMigration(uint256 _balanceToMigrate) public {\r\n        uint256 migratable = ERC20Contract.migrateTransfer(msg.sender, _balanceToMigrate);\r\n        migratableFIN[msg.sender] = migratableFIN[msg.sender].add(migratable);\r\n        emit FINMigrateRecordUpdate(msg.sender, migratableFIN[msg.sender]);\r\n    }\r\n\r\n    /**\r\n    * @dev Used to retrieve the FIN ERC20 total migration records for an Etheruem account\r\n    * @param _account - the account to be checked for a migratable balance\r\n    * @return uint256 - the running total amount of migratable FIN ERC20 tokens\r\n    */\r\n    function getFINMigrationRecord(address _account) public view returns (uint256) {\r\n        return migratableFIN[_account];\r\n    }\r\n\r\n    /**\r\n    * @dev Used to retrieve FIN ERC20 contract address that this deployment is attatched to\r\n    * @return address - the FIN ERC20 contract address that this deployment is attatched to\r\n    */\r\n    function getERC20() public view returns (address) {\r\n        return ERC20Contract;\r\n    }\r\n}\r\ncontract MintableToken is StandardToken, Claimable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    event SetMigrationAddress(address _finERC20MigrateAddress);\r\n    event SetTimeLockAddress(address _timeLockAddress);\r\n    event MigrationStarted();\r\n    event Migrated(address indexed account, uint256 amount);\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    // var for storing the the FINERC20Migrate contract deployment address (for migration to the GALLACTIC network)\r\n    FINERC20Migrate public finERC20MigrationContract;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier allowing only the set FINERC20Migrate.sol deployment to call a function\r\n    */\r\n    modifier onlyMigrate {\r\n        require(msg.sender == address(finERC20MigrationContract));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor to pass the finPointMigrationContract address to the Claimable constructor\r\n    */\r\n    constructor(FINPointRecord _finPointRecordContract, string _name, string _symbol, uint8 _decimals)\r\n\r\n    public\r\n    Claimable(_finPointRecordContract)\r\n    StandardToken(_name, _symbol, _decimals) {\r\n\r\n    }\r\n\r\n   // fallback to prevent send ETH to this contract\r\n    function () public payable {\r\n        revert (); \r\n    }  \r\n\r\n    /**\r\n    * @dev Allows addresses with FIN migration records to claim thier ERC20 FIN tokens. This is the only way minting can occur.\r\n    * @param _ethAddress address for the token holder\r\n    */\r\n    function mintAllowance(address _ethAddress) public onlyOwner {\r\n        require(finPointRecordContract.recordGet(_ethAddress) != 0);\r\n        require(isMinted[_ethAddress] == false);\r\n        isMinted[_ethAddress] = true;\r\n        mint(msg.sender, finPointRecordContract.recordGet(_ethAddress));\r\n        approve(_ethAddress, finPointRecordContract.recordGet(_ethAddress));\r\n    }\r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n        private\r\n        canMint\r\n        returns (bool)\r\n    {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to stop all minting of new tokens.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function finishMinting() public onlyOwner canMint returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    * @dev Function to set the migration contract address\r\n    * @return True if the operation was successful.\r\n    */\r\n    function setMigrationAddress(FINERC20Migrate _finERC20MigrationContract) public onlyOwner returns (bool) {\r\n        // check that this FIN ERC20 deployment is the migration contract's attached ERC20 token\r\n        require(_finERC20MigrationContract.getERC20() == address(this));\r\n\r\n        finERC20MigrationContract = _finERC20MigrationContract;\r\n        emit SetMigrationAddress(_finERC20MigrationContract);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    * @dev Function to set the TimeLock contract address\r\n    * @return True if the operation was successful.\r\n    */\r\n    function setTimeLockAddress(TimeLock _timeLockContract) public onlyOwner returns (bool) {\r\n        // check that this FIN ERC20 deployment is the timelock contract's attached ERC20 token\r\n        require(_timeLockContract.getERC20() == address(this));\r\n\r\n        timeLockContract = _timeLockContract;\r\n        emit SetTimeLockAddress(_timeLockContract);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    * @dev Function to start the migration period\r\n    * @return True if the operation was successful.\r\n    */\r\n    function startMigration() onlyOwner public returns (bool) {\r\n        require(migrationStart == false);\r\n        // check that the FIN migration contract address is set\r\n        require(finERC20MigrationContract != address(0));\r\n        // // check that the TimeLock contract address is set\r\n        require(timeLockContract != address(0));\r\n\r\n        migrationStart = true;\r\n        emit MigrationStarted();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to modify the FIN ERC-20 balance in compliance with migration to FIN ERC-777 on the GALLACTIC Network\r\n     *      - called by the FIN-ERC20-MIGRATE FINERC20Migrate.sol Migration Contract to record the amount of tokens to be migrated\r\n     * @dev modifier onlyMigrate - Permissioned only to the deployed FINERC20Migrate.sol Migration Contract\r\n     * @param _account The Ethereum account which holds some FIN ERC20 balance to be migrated to Gallactic\r\n     * @param _amount The amount of FIN ERC20 to be migrated\r\n    */\r\n    function migrateTransfer(address _account, uint256 _amount) onlyMigrate public returns (uint256) {\r\n\r\n        require(migrationStart == true);\r\n\r\n        uint256 userBalance = balanceOf(_account);\r\n        require(userBalance >= _amount);\r\n\r\n        emit Migrated(_account, _amount);\r\n\r\n        balances[_account] = balances[_account].sub(_amount);\r\n\r\n        return _amount;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMigration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrateTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLockContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finPointRecordContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_finERC20MigrationContract\",\"type\":\"address\"}],\"name\":\"setMigrationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeLockContract\",\"type\":\"address\"}],\"name\":\"setTimeLockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finERC20MigrationContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethAddress\",\"type\":\"address\"}],\"name\":\"mintAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRecordContract\",\"type\":\"address\"}],\"name\":\"transferRecordSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_finPointRecordContract\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_finERC20MigrateAddress\",\"type\":\"address\"}],\"name\":\"SetMigrationAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timeLockAddress\",\"type\":\"address\"}],\"name\":\"SetTimeLockAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MigrationStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousRecordContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRecordContract\",\"type\":\"address\"}],\"name\":\"RecordSourceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MintableToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000baca61bda46d0c5849e1c3f7812818df46cacbcb000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000f46494e20455243323020546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000346494e0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://61c6e231faf5fe7a08d6f4eebebee228adec1b933eb4e7fe5486e91a90b1ebe2"}]}