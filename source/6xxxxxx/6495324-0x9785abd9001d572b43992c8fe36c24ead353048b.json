{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Token Interface\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ncontract ERC20Token {\r\n  function name() public view returns (string);\r\n  function symbol() public view returns (string);\r\n  function decimals() public view returns (uint);\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address account) public view returns (uint);\r\n  function transfer(address to, uint amount) public returns (bool);\r\n  function transferFrom(address from, address to, uint amount) public returns (bool);\r\n  function approve(address spender, uint amount) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title This contract handles the airdrop distribution\r\n */\r\ncontract INNBCAirdropDistribution is Ownable {\r\n  address public tokenINNBCAddress;\r\n\r\n  /**\r\n   * @dev Sets the address of the INNBC token\r\n   * @param tokenAddress The address of the INNBC token contract\r\n   */\r\n  function setINNBCTokenAddress(address tokenAddress) external onlyOwner() {\r\n    require(tokenAddress != address(0), \"Token address cannot be null\");\r\n\r\n    tokenINNBCAddress = tokenAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Batch transfers tokens from the owner account to the recipients\r\n   * @param recipients An array of the addresses of the recipients\r\n   * @param amountPerRecipient An array of amounts of tokens to give to each recipient\r\n   */\r\n  function airdropTokens(address[] recipients, uint[] amountPerRecipient) external onlyOwner() {\r\n    /* 100 recipients is the limit, otherwise we may reach the gas limit */\r\n    require(recipients.length <= 100, \"Recipients list is too long\");\r\n\r\n    /* Both arrays need to have the same length */\r\n    require(recipients.length == amountPerRecipient.length, \"Arrays do not have the same length\");\r\n\r\n    /* We check if the address of the token contract is set */\r\n    require(tokenINNBCAddress != address(0), \"INNBC token contract address cannot be null\");\r\n\r\n    ERC20Token tokenINNBC = ERC20Token(tokenINNBCAddress);\r\n\r\n    /* We check if the owner has enough tokens for everyone */\r\n    require(\r\n      calculateSum(amountPerRecipient) <= tokenINNBC.balanceOf(msg.sender),\r\n      \"Sender does not have enough tokens\"\r\n    );\r\n\r\n    /* We check if the contract is allowed to handle this amount */\r\n    require(\r\n      calculateSum(amountPerRecipient) <= tokenINNBC.allowance(msg.sender, address(this)),\r\n      \"This contract is not allowed to handle this amount\"\r\n    );\r\n\r\n    /* If everything is okay, we can transfer the tokens */\r\n    for (uint i = 0; i < recipients.length; i += 1) {\r\n      tokenINNBC.transferFrom(msg.sender, recipients[i], amountPerRecipient[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the sum of an array of uints\r\n   * @param a An array of uints\r\n   * @return The sum as an uint\r\n   */\r\n  function calculateSum(uint[] a) private pure returns (uint) {\r\n    uint sum;\r\n\r\n    for (uint i = 0; i < a.length; i = SafeMath.add(i, 1)) {\r\n      sum = SafeMath.add(sum, a[i]);\r\n    }\r\n\r\n    return sum;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"amountPerRecipient\",\"type\":\"uint256[]\"}],\"name\":\"airdropTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setINNBCTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenINNBCAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"INNBCAirdropDistribution","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://83a7474be63ab47bb95f0c279d83b543109a215c576c8c57c7381e9e8fe02c16"}]}