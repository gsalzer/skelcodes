{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a - b;\r\n        require(c <= a && c <= b);\r\n        return c;\r\n    }\r\n\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == c/a && b == c/b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a != 0 && b != 0);\r\n        uint256 c = a/b;\r\n        require(a == b * c + a % b);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract T {\r\n    // use SafeMath for uint256 mul div add sub\r\n    using SafeMath for *;\r\n    address public owner;\r\n    uint256 public totalSupply;\r\n    uint256 public decimal;\r\n    string public symbol;\r\n    string public name;\r\n\r\n    mapping (address => uint256) internal balance;\r\n    mapping (uint256 => address) internal tokenIndexToAddress; // record every address owned token\r\n    mapping (address => mapping (address => uint256)) internal allowance;\r\n    mapping (address => uint256) internal amountToFrozenAddress; // record token amount that address been forzen\r\n\r\n    // 88888,8,\"T\",\"center for digital finacial assets\"\r\n    constructor(\r\n        uint256 _totalSupply,\r\n        uint256 _decimal,\r\n        string _symbol,\r\n        string _name\r\n    ) public {\r\n        owner = msg.sender;\r\n        totalSupply = _totalSupply;\r\n        decimal = _decimal;\r\n        symbol = _symbol;\r\n        name = _name;\r\n        balance[msg.sender] = _totalSupply;\r\n\r\n    }\r\n\r\n    event TransferTo(address indexed _from, address indexed _to, uint256 _amount);\r\n    event ApproveTo(address indexed _from, address indexed _spender, uint256 _amount);\r\n    // event froze and un froze\r\n    event FrozenAddress(address indexed _owner, uint256 _amount);\r\n    event UnFrozenAddress(address indexed _owner, uint256 _amount);\r\n    // owner's token been burn\r\n    event Burn(address indexed _owner, uint256 indexed _amount);\r\n\r\n    modifier onlyHolder() {\r\n        require(msg.sender == owner, \"only holder can call this function\");\r\n        _;\r\n    }\r\n\r\n    // require available_balance > total_balance -forzen_balance\r\n    modifier isAvailableEnough(address _owner, uint256 _amount) {\r\n        require(balance[_owner].safeSub(amountToFrozenAddress[_owner]) >= _amount, \"no enough available balance\");\r\n        _;\r\n    }\r\n\r\n    // this contract not acccpt ether transfer\r\n    function () public payable {\r\n        revert(\"can not recieve ether\");\r\n    }\r\n\r\n    // set new owner\r\n    function setOwner(address _newOwner) public onlyHolder {\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function balanceOf(address _account) public view returns (uint256) {\r\n        require(_account != address(0));\r\n        return balance[_account];\r\n    }\r\n\r\n    function getTotalSupply()public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public isAvailableEnough(msg.sender, _amount) {\r\n       //not transfer to 0 account\r\n        require(_to != address(0));\r\n        balance[msg.sender] = balance[msg.sender].safeSub(_amount);\r\n        balance[_to] = balance[_to].safeAdd(_amount);\r\n        // record address which owned token\r\n        // tokenIndexToAccount[accountNumber] = _to;\r\n        emit TransferTo(msg.sender, _to, _amount);\r\n    }\r\n\r\n    // approve will reset old allowance and give a new allowance to privileges address,\r\n    //allowance allowed larger than balance[msg.sender]\r\n    function approve(address _spender, uint256 _amount) public {\r\n        require(_spender != address(0));\r\n        allowance[msg.sender][_spender] = _amount;\r\n        emit ApproveTo(msg.sender, _spender, _amount);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public isAvailableEnough(_from, _amount) {\r\n        require(_from != address(0) && _to != address(0));\r\n        //require(_amount == uint256(_amount));\r\n        //require(allowance[_from][msg.sender] >= _amount && balance[_from] >= _amount);\r\n        balance[_from] = balance[_from].safeSub(_amount);\r\n        balance[_to] = balance[_to].safeAdd(_amount);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].safeSub(_amount);\r\n        emit TransferTo(_from, _to, _amount);\r\n    }\r\n\r\n    // froze token owned by _woner address\r\n    function froze(address _owner, uint256 _amount) public onlyHolder {\r\n        amountToFrozenAddress[_owner] = _amount;\r\n        emit FrozenAddress(_owner, _amount);\r\n    }\r\n\r\n    function unFroze(address _owner, uint256 _amount) public onlyHolder {\r\n        amountToFrozenAddress[_owner] = amountToFrozenAddress[_owner].safeSub(_amount);\r\n        emit UnFrozenAddress(_owner, _amount);\r\n    }\r\n\r\n    // burn token owned by _woner address and decrease totalSupply permanently\r\n    function burn(address _owner, uint256 _amount) public onlyHolder {\r\n        require(_owner != address(0));\r\n        balance[_owner] = balance[_owner].safeSub(_amount);\r\n        totalSupply = totalSupply.safeSub(_amount);\r\n        emit Burn(_owner, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unFroze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"froze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_decimal\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ApproveTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FrozenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UnFrozenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"T","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000081595c438000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000015400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002243656e74657220666f72204469676974616c2046696e616369616c20417373657473000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://bb8f868919ff6fc50e538cd92c15ab130bf56e08d13b74166bf12e2b0559bc5d"}]}