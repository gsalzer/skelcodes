{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 _a, uint256 _b) pure internal returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        assert(c >= _a && c >= _b);\r\n        \r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) pure internal returns (uint256) {\r\n        assert(_b <= _a);\r\n\r\n        return _a - _b;\r\n    }\r\n\r\n    function mul(uint256 _a, uint256 _b) pure internal returns (uint256) {\r\n        uint256 c = _a * _b;\r\n        assert(_a == 0 || c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) pure internal returns (uint256) {\r\n        assert(_b != 0);\r\n\r\n        return _a / _b;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\ncontract Token {\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool _success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success);\r\n    function approve(address _spender, uint256 _value) public returns (bool _success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract TokenSale {\r\n    using SafeMath for uint256;\r\n\r\n    address public token;\r\n    address public owner;\r\n    address public vault;\r\n    mapping (address => uint256) public rate;\r\n\r\n    event RateChange(address indexed token, uint256 rate);\r\n    event VaultChange(address indexed vault);\r\n    event Transfer(address indexed to, address indexed token, uint256 received, uint256 sent);\r\n\r\n    modifier isOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isValidAddress {\r\n        assert(msg.sender != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier hasPayloadSize(uint256 size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }    \r\n\r\n    constructor(address _token, address _vault) public {\r\n        owner = msg.sender;\r\n        token = _token;\r\n        _setVault(_vault);\r\n    }\r\n\r\n    function setVault(address _vault) isOwner public {\r\n        _setVault(_vault);\r\n    }\r\n\r\n    function _setVault(address _vault) private {\r\n        if (vault != _vault) {\r\n            vault = _vault;\r\n            \r\n            emit VaultChange(_vault);\r\n        }\r\n    }\r\n\r\n    function setRate(address _address, uint256 _rate) isOwner public {\r\n        _setRate(_address, _rate);\r\n    }\r\n\r\n    function setRates(address[] _address, uint256[] _rate) isOwner public {\r\n        for (uint256 i = 0; i < _address.length; i++) {\r\n            _setRate(_address[i], _rate[i]);\r\n        }\r\n    }\r\n\r\n    function _setRate(address _address, uint256 _rate) private {\r\n        if (rate[_address] != _rate) {\r\n            rate[_address] = _rate;\r\n\r\n            emit RateChange(_address, _rate);\r\n        }\r\n    }\r\n\r\n    function() isValidAddress payable public {\r\n        deposit();\r\n    }\r\n\r\n    function deposit() isValidAddress payable public {\r\n        require(msg.value > 0);\r\n        require(rate[0x0] > 0);\r\n        uint256 amount = msg.value.mul(rate[0x0]).div(1 ether);\r\n        require(Token(token).transferFrom(vault, msg.sender, amount));\r\n        require(address(vault).send(msg.value));\r\n\r\n        emit Transfer(msg.sender, 0x0, msg.value, amount);\r\n    }\r\n\r\n    function depositToken(address _token, uint256 _amount) isValidAddress public {\r\n        require(rate[_token] > 0);\r\n        uint256 amount = _amount.mul(rate[_token]).div(1 ether);\r\n        require(Token(token).balanceOf(vault) >= amount);\r\n        require(Token(_token).transferFrom(msg.sender, vault, _amount));\r\n        require(Token(token).transferFrom(vault, msg.sender, amount));\r\n\r\n        emit Transfer(msg.sender, _token, _amount, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address[]\"},{\"name\":\"_rate\",\"type\":\"uint256[]\"}],\"name\":\"setRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"received\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sent\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000033d133f175b5cee9aac255448d52394818b76cd0000000000000000000000000bb9a718d42e68ac1019fc557f35eb0bacd6793fc","Library":"","SwarmSource":"bzzr://55f202a98c38aa957bc1b811111c194715c0322b279ee9af7cbb46d177becb47"}]}