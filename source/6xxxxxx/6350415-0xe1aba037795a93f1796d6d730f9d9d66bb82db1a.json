{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/ERC780.sol\r\n\r\n/// @title ERC780\r\n/// @notice The ERC780 interface for storing and interacting with claims.\r\n/// See https://github.com/ethereum/EIPs/issues/780\r\ncontract ERC780 {\r\n    function setClaim(address subject, bytes32 key, bytes32 value) public;\r\n    function setSelfClaim(bytes32 key, bytes32 value) public;\r\n    function getClaim(address issuer, address subject, bytes32 key) public view returns (bytes32);\r\n    function removeClaim(address issuer, address subject, bytes32 key) public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/RBACInterface.sol\r\n\r\n/// @title RBACInterface\r\n/// @notice The interface for Role-Based Access Control.\r\ncontract RBACInterface {\r\n    function hasRole(address addr, string role) public view returns (bool);\r\n}\r\n\r\n// File: contracts/RBACManaged.sol\r\n\r\n/// @title RBACManaged\r\n/// @notice Controls access by delegating to a deployed RBAC contract.\r\ncontract RBACManaged is Ownable {\r\n\r\n    RBACInterface public rbac;\r\n\r\n    /// @param rbacAddr The address of the RBAC contract which controls access.\r\n    constructor(address rbacAddr) public {\r\n        rbac = RBACInterface(rbacAddr);\r\n    }\r\n\r\n    function roleAdmin() internal pure returns (string);\r\n\r\n    /// @notice Check if an address has a role.\r\n    /// @param addr The address.\r\n    /// @param role The role.\r\n    /// @return A boolean indicating whether the address has the role.\r\n    function hasRole(address addr, string role) public view returns (bool) {\r\n        return rbac.hasRole(addr, role);\r\n    }\r\n\r\n    modifier onlyRole(string role) {\r\n        require(hasRole(msg.sender, role), \"Access denied: missing role\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(\r\n            msg.sender == owner || hasRole(msg.sender, roleAdmin()), \"Access denied: missing role\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Change the address of the deployed RBAC contract which\r\n    /// controls access. Only the owner or an admin can change the address.\r\n    /// @param rbacAddr The address of the RBAC contract which controls access.\r\n    function setRBACAddress(address rbacAddr) public onlyOwnerOrAdmin {\r\n        rbac = RBACInterface(rbacAddr);\r\n    }\r\n}\r\n\r\n// File: contracts/UserAddressAliasable.sol\r\n\r\n/// @title UserAddressAliasable\r\n/// @notice Allows the address that represents an entity (individual) to be\r\n/// changed by setting aliases. Any data about an entity should be associated\r\n/// to the original (canonical) address.\r\ncontract UserAddressAliasable is RBACManaged {\r\n\r\n    event UserAddressAliased(address indexed oldAddr, address indexed newAddr);\r\n\r\n    mapping(address => address) addressAlias;  // canonical => alias\r\n\r\n    function roleAddressAliaser() internal pure returns (string);\r\n\r\n    /// @notice Alias a new address to an old address. Requires caller to have\r\n    /// the address aliaser role returned by roleAddressAliaser(). Requires\r\n    /// that neither address is already aliased to another address.\r\n    /// @param oldAddr The old address.\r\n    /// @param newAddr The new address.\r\n    function setAddressAlias(address oldAddr, address newAddr) public onlyRole(roleAddressAliaser()) {\r\n        require(addressAlias[oldAddr] == address(0), \"oldAddr is already aliased to another address\");\r\n        require(addressAlias[newAddr] == address(0), \"newAddr is already aliased to another address\");\r\n        require(oldAddr != newAddr, \"oldAddr and newAddr must be different\");\r\n        setAddressAliasUnsafe(oldAddr, newAddr);\r\n    }\r\n\r\n    /// @notice Alias a new address to an old address, bypassing all safety\r\n    /// checks. Can result in broken state, so use at your own peril. Requires\r\n    /// caller to have the address aliaser role returned by\r\n    /// roleAddressAliaser().\r\n    /// @param oldAddr The old address.\r\n    /// @param newAddr The new address.\r\n    function setAddressAliasUnsafe(address oldAddr, address newAddr) public onlyRole(roleAddressAliaser()) {\r\n        addressAlias[newAddr] = oldAddr;\r\n        emit UserAddressAliased(oldAddr, newAddr);\r\n    }\r\n\r\n    /// @notice Change an address to no longer alias to anything else. Calling\r\n    /// setAddressAlias(oldAddr, newAddr) is reversed by calling\r\n    /// unsetAddressAlias(newAddr).\r\n    /// @param addr The address to unalias. Equivalent to newAddr in setAddressAlias.\r\n    function unsetAddressAlias(address addr) public onlyRole(roleAddressAliaser()) {\r\n        setAddressAliasUnsafe(0, addr);\r\n    }\r\n\r\n    /// @notice Resolve an address to its canonical address.\r\n    /// @param addr The address to resolve.\r\n    /// @return The canonical address.\r\n    function resolveAddress(address addr) public view returns (address) {\r\n        address parentAddr = addressAlias[addr];\r\n        if (parentAddr == address(0)) {\r\n            return addr;\r\n        } else {\r\n            return parentAddr;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ODEMClaimsRegistry.sol\r\n\r\n/// @title ODEMClaimsRegistry\r\n/// @notice When an individual completes an event (educational course) with\r\n/// ODEM, ODEM generates a certificate of completion and sets a corresponding\r\n/// claim in this contract. The claim contains the URI (usually an IPFS path)\r\n/// where the certificate can be downloaded, and its hash (SHA-256) to prove its\r\n/// authenticity.\r\n/// If an individual changes their Ethereum address, for example if they lose\r\n/// access to their account, ODEM may alias the new address to the old\r\n/// address. Then claims apply automatically to both addresses.\r\n/// Implements the ERC780 interface.\r\ncontract ODEMClaimsRegistry is RBACManaged, UserAddressAliasable, ERC780 {\r\n\r\n    event ClaimSet(\r\n        address indexed issuer,\r\n        address indexed subject,\r\n        bytes32 indexed key,\r\n        bytes32 value,\r\n        uint updatedAt\r\n    );\r\n    event ClaimRemoved(\r\n        address indexed issuer,\r\n        address indexed subject,\r\n        bytes32 indexed key,\r\n        uint removedAt\r\n    );\r\n\r\n    string constant ROLE_ADMIN = \"claims__admin\";\r\n    string constant ROLE_ISSUER = \"claims__issuer\";\r\n    string constant ROLE_ADDRESS_ALIASER = \"claims__address_aliaser\";\r\n\r\n    struct Claim {\r\n        bytes uri;\r\n        bytes32 hash;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => Claim)) internal claims;  // subject => key => claim\r\n\r\n    // Used for safe address aliasing. Never reset to false.\r\n    mapping(address => bool) internal hasClaims;\r\n\r\n    /// @param rbacAddr The address of the RBAC contract which controls access to this\r\n    /// contract.\r\n    constructor(address rbacAddr) RBACManaged(rbacAddr) public {}\r\n\r\n    /// @notice Get an ODEM claim.\r\n    /// @param subject The address of the individual.\r\n    /// @param key The ODEM event code.\r\n    /// @return The URI where the certificate can be downloaded, and the hash\r\n    /// of the certificate file.\r\n    function getODEMClaim(address subject, bytes32 key) public view returns (bytes uri, bytes32 hash) {\r\n        address resolved = resolveAddress(subject);\r\n        return (claims[resolved][key].uri, claims[resolved][key].hash);\r\n    }\r\n\r\n    /// @notice Set an ODEM claim.\r\n    /// Only ODEM can set claims.\r\n    /// @dev Requires caller to have the role \"claims__issuer\".\r\n    /// @param subject The address of the individual.\r\n    /// @param key The ODEM event code.\r\n    /// @param uri The URI where the certificate can be downloaded.\r\n    /// @param hash The hash of the certificate file.\r\n    function setODEMClaim(address subject, bytes32 key, bytes uri, bytes32 hash) public onlyRole(ROLE_ISSUER) {\r\n        address resolved = resolveAddress(subject);\r\n        claims[resolved][key].uri = uri;\r\n        claims[resolved][key].hash = hash;\r\n        hasClaims[resolved] = true;\r\n        emit ClaimSet(msg.sender, subject, key, hash, now);\r\n    }\r\n\r\n    /// @notice Remove an ODEM claim. Anyone can remove a claim about\r\n    /// themselves.\r\n    /// Only ODEM can remove claims about others.\r\n    /// @dev Requires caller to have the role \"claims__issuer\" or to be the\r\n    /// subject.\r\n    /// @param subject The address of the individual.\r\n    /// @param key The ODEM event code.\r\n    function removeODEMClaim(address subject, bytes32 key) public {\r\n        require(hasRole(msg.sender, ROLE_ISSUER) || msg.sender == subject, \"Access denied: missing role\");\r\n        address resolved = resolveAddress(subject);\r\n        delete claims[resolved][key];\r\n        emit ClaimRemoved(msg.sender, subject, key, now);\r\n    }\r\n\r\n    /// @notice Alias a new address to an old address.\r\n    /// Only ODEM can set aliases.\r\n    /// @dev Requires caller to have the role \"claims__address_aliaser\".\r\n    /// Requires that neither address is already aliased to another address,\r\n    /// and that the new address does not already have claims.\r\n    /// @param oldAddr The old address.\r\n    /// @param newAddr The new address.\r\n    function setAddressAlias(address oldAddr, address newAddr) public onlyRole(ROLE_ADDRESS_ALIASER) {\r\n        require(!hasClaims[newAddr], \"newAddr already has claims\");\r\n        super.setAddressAlias(oldAddr, newAddr);\r\n    }\r\n\r\n    /// @notice Get a claim. Provided for compatibility with ERC780.\r\n    /// Only gets claims where the issuer is ODEM.\r\n    /// @param issuer The address which set the claim.\r\n    /// @param subject The address of the individual.\r\n    /// @param key The ODEM event code.\r\n    /// @return The hash of the certificate file.\r\n    function getClaim(address issuer, address subject, bytes32 key) public view returns (bytes32) {\r\n        if (hasRole(issuer, ROLE_ISSUER)) {\r\n            return claims[subject][key].hash;\r\n        } else {\r\n            return bytes32(0);\r\n        }\r\n    }\r\n\r\n    /// @notice Provided for compatibility with ERC780. Always fails.\r\n    function setClaim(address subject, bytes32 key, bytes32 value) public {\r\n        revert();\r\n    }\r\n\r\n    /// @notice Provided for compatibility with ERC780. Always fails.\r\n    function setSelfClaim(bytes32 key, bytes32 value) public {\r\n        revert();\r\n    }\r\n\r\n    /// @notice Remove a claim. Provided for compatibility with ERC780.\r\n    /// Only removes claims where the issuer is ODEM.\r\n    /// Anyone can remove a claim about themselves. Only ODEM can remove\r\n    /// claims about others.\r\n    /// @dev Requires issuer to have the role \"claims__issuer\".\r\n    /// Requires caller to have the role \"claims__issuer\" or to be the\r\n    /// subject.\r\n    /// @param issuer The address which set the claim.\r\n    /// @param subject The address of the individual.\r\n    /// @param key The ODEM event code.\r\n    function removeClaim(address issuer, address subject, bytes32 key) public {\r\n        require(hasRole(issuer, ROLE_ISSUER), \"Issuer not recognized\");\r\n        removeODEMClaim(subject, key);\r\n    }\r\n\r\n    // Required by RBACManaged.\r\n    function roleAdmin() internal pure returns (string) {\r\n        return ROLE_ADMIN;\r\n    }\r\n\r\n    // Required by UserAddressAliasable\r\n    function roleAddressAliaser() internal pure returns (string) {\r\n        return ROLE_ADDRESS_ALIASER;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rbacAddr\",\"type\":\"address\"}],\"name\":\"setRBACAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subject\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getODEMClaim\",\"outputs\":[{\"name\":\"uri\",\"type\":\"bytes\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldAddr\",\"type\":\"address\"},{\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setAddressAliasUnsafe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldAddr\",\"type\":\"address\"},{\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setAddressAlias\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subject\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"uri\",\"type\":\"bytes\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"setODEMClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"setSelfClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unsetAddressAlias\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subject\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"setClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rbac\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subject\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"removeODEMClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"subject\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"removeClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"subject\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"resolveAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rbacAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"ClaimSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"removedAt\",\"type\":\"uint256\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"UserAddressAliased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ODEMClaimsRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c1e7aa3025c0deb80853f2c9786c3b221a91b44f","Library":"","SwarmSource":"bzzr://9ed40b937f60051030caaa87d57ef920488b04f274424d2d893852e1a63cddd2"}]}