{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/lib/ownership/Ownable.sol\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n    constructor() public { owner = msg.sender; }\r\n\r\n    /// @dev Throws if called by any contract other than latest designated caller\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n       require(newOwner != address(0));\r\n       emit OwnershipTransferred(owner, newOwner);\r\n       owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ownership/ZapCoordinatorInterface.sol\r\n\r\ncontract ZapCoordinatorInterface is Ownable {\r\n\tfunction addImmutableContract(string contractName, address newAddress) external;\r\n\tfunction updateContract(string contractName, address newAddress) external;\r\n\tfunction getContractName(uint index) public view returns (string);\r\n\tfunction getContract(string contractName) public view returns (address);\r\n\tfunction updateAllDependencies() external;\r\n}\r\n\r\n// File: contracts/lib/ownership/Upgradable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract Upgradable {\r\n\r\n\taddress coordinatorAddr;\r\n\tZapCoordinatorInterface coordinator;\r\n\r\n\tconstructor(address c) public{\r\n\t\tcoordinatorAddr = c;\r\n\t\tcoordinator = ZapCoordinatorInterface(c);\r\n\t}\r\n\r\n    function updateDependencies() external coordinatorOnly {\r\n       _updateDependencies();\r\n    }\r\n\r\n    function _updateDependencies() internal;\r\n\r\n    modifier coordinatorOnly() {\r\n    \trequire(msg.sender == coordinatorAddr, \"Error: Coordinator Only Function\");\r\n    \t_;\r\n    }\r\n}\r\n\r\n// File: contracts/platform/database/DatabaseInterface.sol\r\n\r\ncontract DatabaseInterface is Ownable {\r\n\tfunction setStorageContract(address _storageContract, bool _allowed) public;\r\n\t/*** Bytes32 ***/\r\n\tfunction getBytes32(bytes32 key) external view returns(bytes32);\r\n\tfunction setBytes32(bytes32 key, bytes32 value) external;\r\n\t/*** Number **/\r\n\tfunction getNumber(bytes32 key) external view returns(uint256);\r\n\tfunction setNumber(bytes32 key, uint256 value) external;\r\n\t/*** Bytes ***/\r\n\tfunction getBytes(bytes32 key) external view returns(bytes);\r\n\tfunction setBytes(bytes32 key, bytes value) external;\r\n\t/*** String ***/\r\n\tfunction getString(bytes32 key) external view returns(string);\r\n\tfunction setString(bytes32 key, string value) external;\r\n\t/*** Bytes Array ***/\r\n\tfunction getBytesArray(bytes32 key) external view returns (bytes32[]);\r\n\tfunction getBytesArrayIndex(bytes32 key, uint256 index) external view returns (bytes32);\r\n\tfunction getBytesArrayLength(bytes32 key) external view returns (uint256);\r\n\tfunction pushBytesArray(bytes32 key, bytes32 value) external;\r\n\tfunction setBytesArrayIndex(bytes32 key, uint256 index, bytes32 value) external;\r\n\tfunction setBytesArray(bytes32 key, bytes32[] value) external;\r\n\t/*** Int Array ***/\r\n\tfunction getIntArray(bytes32 key) external view returns (int[]);\r\n\tfunction getIntArrayIndex(bytes32 key, uint256 index) external view returns (int);\r\n\tfunction getIntArrayLength(bytes32 key) external view returns (uint256);\r\n\tfunction pushIntArray(bytes32 key, int value) external;\r\n\tfunction setIntArrayIndex(bytes32 key, uint256 index, int value) external;\r\n\tfunction setIntArray(bytes32 key, int[] value) external;\r\n\t/*** Address Array ***/\r\n\tfunction getAddressArray(bytes32 key) external view returns (address[]);\r\n\tfunction getAddressArrayIndex(bytes32 key, uint256 index) external view returns (address);\r\n\tfunction getAddressArrayLength(bytes32 key) external view returns (uint256);\r\n\tfunction pushAddressArray(bytes32 key, address value) external;\r\n\tfunction setAddressArrayIndex(bytes32 key, uint256 index, address value) external;\r\n\tfunction setAddressArray(bytes32 key, address[] value) external;\r\n}\r\n\r\n// File: contracts/lib/ownership/ZapCoordinator.sol\r\n\r\ncontract ZapCoordinator is Ownable, ZapCoordinatorInterface {\r\n\r\n\tevent UpdatedContract(string name, address previousAddr, address newAddr);\r\n\tevent UpdatedDependencies(uint timestamp, string contractName, address contractAddr);\r\n\r\n\tmapping(string => address) contracts; \r\n\r\n\t// names of upgradable contracts\r\n\tstring[] public loadedContracts;\r\n\r\n\tDatabaseInterface public db;\r\n\r\n\t// used for adding contracts like Database and ZapToken\r\n\tfunction addImmutableContract(string contractName, address newAddress) external onlyOwner {\r\n\t\tassert(contracts[contractName] == address(0));\r\n\t\tcontracts[contractName] = newAddress;\r\n\r\n\t\t// Create DB object when Database is added to Coordinator\r\n\t\tbytes32 hash = keccak256(abi.encodePacked(contractName));\r\n\t\tif(hash == keccak256(abi.encodePacked(\"DATABASE\"))) db = DatabaseInterface(newAddress);\r\n\t}\r\n\r\n\t// used for modifying an existing contract or adding a new contract to the system\r\n\tfunction updateContract(string contractName, address newAddress) external onlyOwner {\r\n\t\taddress prev = contracts[contractName];\r\n\t\tif (prev == address(0) ) {\r\n\t\t\t// First time adding this contract\r\n\t\t\tloadedContracts.push(contractName);\r\n\t\t} else {\r\n\t\t\t// Deauth the old contract\r\n\t\t\tdb.setStorageContract(prev, false);\r\n\t\t}\r\n\t\t// give new contract database access permission\r\n\t\tdb.setStorageContract(newAddress, true);\r\n\r\n\t\temit UpdatedContract(contractName, prev, newAddress);\r\n\t\tcontracts[contractName] = newAddress;\r\n\t}\r\n\r\n\tfunction getContractName(uint index) public view returns (string) {\r\n\t\treturn loadedContracts[index];\r\n\t}\r\n\r\n\tfunction getContract(string contractName) public view returns (address) {\r\n\t\treturn contracts[contractName];\r\n\t}\r\n\r\n\tfunction updateAllDependencies() external onlyOwner {\r\n\t\tfor ( uint i = 0; i < loadedContracts.length; i++ ) {\r\n\t\t\taddress c = contracts[loadedContracts[i]];\r\n\t\t\tUpgradable(c).updateDependencies();\r\n\t\t\temit UpdatedDependencies(block.timestamp, loadedContracts[i], c);\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getContractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateAllDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addImmutableContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"db\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loadedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"previousAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"UpdatedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"UpdatedDependencies\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ZapCoordinator","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3ff1b180fbb3db27d1828fdbef07edb950a2dae65450ff8fc5793418414ac2c1"}]}