{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract CryptoProtect is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    ERC20Interface tokenInterface;\r\n    \r\n    // Policy State --\r\n    // 1 - active\r\n    // 2 - inactive\r\n    // 3 - claimed\r\n    struct Policy {\r\n        uint256 premiumAmount;\r\n        uint256 payoutAmount;\r\n        uint256 endDate;\r\n        uint8 state;\r\n    }\r\n    \r\n    struct Token {\r\n        mapping (string => Policy) token;\r\n    }\r\n    \r\n    struct Exchange {\r\n        mapping (string => Token) exchange;\r\n    }\r\n    \r\n    struct Pool{\r\n        uint256 endDate;\r\n        uint256 amount;\r\n    }\r\n    \r\n    mapping(address => Exchange) policies;\r\n    \r\n    Pool[]              private poolRecords;\r\n    uint                private poolRecordsIndex;\r\n    uint256             private poolBackedAmount;\r\n    \r\n    // poolState state --\r\n    // 1 - active\r\n    // 2 - not active\r\n    uint8               public poolState;\r\n    uint256             public poolMaxAmount;\r\n    uint256             public poolStartDate;\r\n    \r\n    uint256             public minPremium;\r\n    uint256             public maxPremium;\r\n    \r\n    string             public contractName;\r\n    \r\n    event PoolStateUpdate(uint8 indexed state);\r\n    event PremiumReceived(address indexed addr, uint256 indexed amount, uint indexed id);\r\n    event ClaimSubmitted(address indexed addr, string indexed exchange, string indexed token);\r\n    event ClaimPayout(address indexed addr, string indexed exchange, string indexed token);\r\n    event PoolBackedAmountUpdate(uint256 indexed amount);\r\n    event PoolPremiumLimitUpdate(uint256 indexed min, uint256 indexed max);\r\n\r\n    constructor(\r\n        string _contractName,\r\n        address _tokenContract,\r\n        uint256 _poolMaxAmount,\r\n        uint256 _poolBackedAmount,\r\n        uint256 _minPremium,\r\n        uint256 _maxPremium\r\n    )\r\n        public\r\n    {\r\n        contractName = _contractName;\r\n        tokenInterface = ERC20Interface(_tokenContract);\r\n        \r\n        poolState = 1;\r\n        poolStartDate = now;\r\n        poolMaxAmount = _poolMaxAmount;\r\n        poolBackedAmount = _poolBackedAmount;\r\n        \r\n        minPremium = _minPremium;\r\n        maxPremium = _maxPremium;\r\n    }\r\n    \r\n    /**\r\n     * @dev Modifier to check pool state\r\n     */\r\n    modifier verifyPoolState() {\r\n        require(poolState == 1);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Check policy eligibility\r\n     */\r\n    function isEligible(address _addr, string _exchange, string _token) internal view \r\n        returns (bool)\r\n    {\r\n        if (\r\n            policies[_addr].exchange[_exchange].token[_token].state == 0 ||\r\n            policies[_addr].exchange[_exchange].token[_token].endDate < now\r\n        ) {\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * @dev Compute Pool Amount\r\n     */\r\n    function computePoolAmount() internal view \r\n        returns (uint256)\r\n    {\r\n        uint256 currentPoolAmount = 0;\r\n        \r\n        // limited by gas\r\n        for (uint i = poolRecordsIndex; i< poolRecords.length; i++) {\r\n            if (poolRecords[i].endDate < now) {\r\n                continue;\r\n            }\r\n            \r\n            currentPoolAmount = currentPoolAmount.add(poolRecords[i].amount);\r\n        }\r\n        \r\n        return currentPoolAmount.add(poolBackedAmount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Make Transaction\r\n     * Make transaction using transferFrom\r\n     */\r\n    function MakeTransaction(\r\n        address _tokenOwner,\r\n        uint256 _premiumAmount,\r\n        uint256 _payoutAmount,\r\n        string _exchange,\r\n        string _token,\r\n        uint8 _id\r\n    ) \r\n        external\r\n        verifyPoolState()\r\n    {\r\n        // check parameters\r\n        require(_tokenOwner != address(0));\r\n        \r\n        require(_premiumAmount < _payoutAmount);\r\n        require(_premiumAmount >= minPremium);\r\n        require(_premiumAmount <= maxPremium);\r\n        \r\n        require(bytes(_exchange).length > 0);\r\n        require(bytes(_token).length > 0);\r\n        require(_id > 0);\r\n        \r\n        // require(computePoolAmount() < poolMaxAmount); // reduce cost\r\n        \r\n        // check eligibility\r\n        require(isEligible(_tokenOwner, _exchange, _token));\r\n        \r\n        // check that token owner address has valid amount\r\n        require(tokenInterface.balanceOf(_tokenOwner) >= _premiumAmount);\r\n        require(tokenInterface.allowance(_tokenOwner, address(this)) >= _premiumAmount);\r\n        \r\n        // record data\r\n        policies[_tokenOwner].exchange[_exchange].token[_token].premiumAmount = _premiumAmount;\r\n        policies[_tokenOwner].exchange[_exchange].token[_token].payoutAmount = _payoutAmount;\r\n        policies[_tokenOwner].exchange[_exchange].token[_token].endDate = now.add(90 * 1 days);\r\n        policies[_tokenOwner].exchange[_exchange].token[_token].state = 1;\r\n        \r\n        // record pool\r\n        poolRecords.push(Pool(now.add(90 * 1 days), _premiumAmount));\r\n        \r\n        // transfer amount\r\n        tokenInterface.transferFrom(_tokenOwner, address(this), _premiumAmount);\r\n        \r\n        emit PremiumReceived(_tokenOwner, _premiumAmount, _id);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get Policy\r\n     */\r\n    function GetPolicy(address _addr, string _exchange, string _token) public view \r\n        returns (\r\n            uint256 premiumAmount,\r\n            uint256 payoutAmount,\r\n            uint256 endDate,\r\n            uint8 state\r\n        )\r\n    {\r\n        return (\r\n            policies[_addr].exchange[_exchange].token[_token].premiumAmount,\r\n            policies[_addr].exchange[_exchange].token[_token].payoutAmount,\r\n            policies[_addr].exchange[_exchange].token[_token].endDate,\r\n            policies[_addr].exchange[_exchange].token[_token].state\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @dev Get Policy\r\n     */\r\n    function SubmitClaim(address _addr, string _exchange, string _token) public \r\n        returns (bool submitted)\r\n    {\r\n        require(policies[_addr].exchange[_exchange].token[_token].state == 1);\r\n        require(policies[_addr].exchange[_exchange].token[_token].endDate > now);\r\n        \r\n        emit ClaimSubmitted(_addr, _exchange, _token);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get Current Pool Amount\r\n     */\r\n    function GetCurrentPoolAmount() public view \r\n        returns (uint256)\r\n    {\r\n        return computePoolAmount();\r\n    }\r\n    \r\n    /**\r\n     * @dev Check Eligibility\r\n     */\r\n    function CheckEligibility(address _addr, string _exchange, string _token) public view\r\n        returns (bool) \r\n    {\r\n        return(isEligible(_addr, _exchange, _token));\r\n    }\r\n    \r\n    /**\r\n     * @dev Check Token Balance\r\n     */\r\n    function CheckBalance(address _addr) public view returns (uint256){\r\n        return tokenInterface.balanceOf(_addr);\r\n    }\r\n    \r\n    /**\r\n     * @dev Check Token Allowance\r\n     */\r\n    function CheckAllowance(address _addr) public view returns (uint256){\r\n        return tokenInterface.allowance(_addr, address(this));\r\n    }\r\n    \r\n    /**\r\n     * @dev Update Pool State\r\n     */\r\n    function UpdatePolicyState(address _addr, string _exchange, string _token, uint8 _state) external\r\n        onlyOwner\r\n    {\r\n        require(policies[_addr].exchange[_exchange].token[_token].state != 0);\r\n        policies[_addr].exchange[_exchange].token[_token].state = _state;\r\n        \r\n        if (_state == 3) {\r\n            emit ClaimPayout(_addr, _exchange, _token);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Update Pool State\r\n     */\r\n    function UpdatePoolState(uint8 _state) external\r\n        onlyOwner\r\n    {\r\n        poolState = _state;\r\n        emit PoolStateUpdate(_state);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update Backed Amount\r\n     */\r\n    function UpdateBackedAmount(uint256 _amount) external\r\n        onlyOwner\r\n    {\r\n        poolBackedAmount = _amount;\r\n        \r\n        emit PoolBackedAmountUpdate(_amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update Premium Limit\r\n     */\r\n    function UpdatePremiumLimit(uint256 _min, uint256 _max) external\r\n        onlyOwner\r\n    {\r\n        require(_min < _max);\r\n        minPremium = _min;\r\n        maxPremium = _max;\r\n        \r\n        emit PoolPremiumLimitUpdate(_min, _max);\r\n    }\r\n    \r\n    /**\r\n     * @dev Initiate Payout\r\n     */\r\n    function InitiatePayout(address _addr, string _exchange, string _token) external\r\n        onlyOwner\r\n    {\r\n        require(policies[_addr].exchange[_exchange].token[_token].state == 1);\r\n        require(policies[_addr].exchange[_exchange].token[_token].payoutAmount > 0);\r\n        \r\n        uint256 payoutAmount = policies[_addr].exchange[_exchange].token[_token].payoutAmount;\r\n        require(payoutAmount <= tokenInterface.balanceOf(address(this)));\r\n        \r\n        policies[_addr].exchange[_exchange].token[_token].state = 3;\r\n        tokenInterface.transfer(_addr, payoutAmount);\r\n        \r\n        emit ClaimPayout(_addr, _exchange, _token);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw Fee\r\n     */\r\n    function WithdrawFee(uint256 _amount) external\r\n        onlyOwner\r\n    {\r\n        require(_amount <= tokenInterface.balanceOf(address(this)));\r\n        tokenInterface.transfer(owner, _amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Emergency Drain\r\n     * in case something went wrong and token is stuck in contract\r\n     */\r\n    function EmergencyDrain(ERC20Interface _anyToken) external\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n        if (address(this).balance > 0) {\r\n            owner.transfer(address(this).balance);\r\n        }\r\n        \r\n        if (_anyToken != address(0)) {\r\n            _anyToken.transfer(owner, _anyToken.balanceOf(this));\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_exchange\",\"type\":\"string\"},{\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"GetPolicy\",\"outputs\":[{\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"name\":\"endDate\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"CheckBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_exchange\",\"type\":\"string\"},{\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"SubmitClaim\",\"outputs\":[{\"name\":\"submitted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetCurrentPoolAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_premiumAmount\",\"type\":\"uint256\"},{\"name\":\"_payoutAmount\",\"type\":\"uint256\"},{\"name\":\"_exchange\",\"type\":\"string\"},{\"name\":\"_token\",\"type\":\"string\"},{\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"MakeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPremium\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolMaxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_exchange\",\"type\":\"string\"},{\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"InitiatePayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_anyToken\",\"type\":\"address\"}],\"name\":\"EmergencyDrain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"CheckAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"UpdatePoolState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_exchange\",\"type\":\"string\"},{\"name\":\"_token\",\"type\":\"string\"},{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"UpdatePolicyState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_exchange\",\"type\":\"string\"},{\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"CheckEligibility\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UpdateBackedAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPremium\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"UpdatePremiumLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractName\",\"type\":\"string\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_poolMaxAmount\",\"type\":\"uint256\"},{\"name\":\"_poolBackedAmount\",\"type\":\"uint256\"},{\"name\":\"_minPremium\",\"type\":\"uint256\"},{\"name\":\"_maxPremium\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"PoolStateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PremiumReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"exchange\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"string\"}],\"name\":\"ClaimSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"exchange\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"string\"}],\"name\":\"ClaimPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolBackedAmountUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"PoolPremiumLimitUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoProtect","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000fedae5642668f8636a11987ff386bfd215f942ee00000000000000000000000000000000000000000031a17e847807b1bc000000000000000000000000000000000000000000000000084595161401484a00000000000000000000000000000000000000000000000000010f0cf064dd592000000000000000000000000000000000000000000000000069e10de76676d0800000000000000000000000000000000000000000000000000000000000000000001f506f6c69637950616c204e6574776f726b2043727970746f50726f7465637400","Library":"","SwarmSource":"bzzr://f36c9a4028979cf76415a50a4184ef013abdd1ea0624f71a09ef950ac6c1fa77"}]}