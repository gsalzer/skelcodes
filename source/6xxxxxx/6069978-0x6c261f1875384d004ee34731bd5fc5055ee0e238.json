{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n    address public pendingOwner;\r\n\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    function claimOwnership() onlyPendingOwner public {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n    uint256 totalSupply_;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= balances[msg.sender]);\r\n        require(_to != address(0));\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(_to != address(0));\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n    function safeTransferFrom(\r\n        ERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n    internal\r\n    {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        require(token.approve(spender, value));\r\n    }\r\n}\r\n\r\ncontract CanReclaimToken is Ownable {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    function reclaimToken(ERC20Basic token) external onlyOwner {\r\n        uint256 balance = token.balanceOf(this);\r\n        token.safeTransfer(owner, balance);\r\n    }\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) public {\r\n        _burn(msg.sender, _value);\r\n    }\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n\r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    function add(Role storage role, address addr)\r\n    internal\r\n    {\r\n        role.bearer[addr] = true;\r\n    }\r\n\r\n    function remove(Role storage role, address addr)\r\n    internal\r\n    {\r\n        role.bearer[addr] = false;\r\n    }\r\n\r\n    function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n    {\r\n        require(has(role, addr));\r\n    }\r\n\r\n    function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return role.bearer[addr];\r\n    }\r\n}\r\n\r\ncontract RBAC {\r\n    using Roles for Roles.Role;\r\n    mapping (string => Roles.Role) private roles;\r\n    event RoleAdded(address indexed operator, string role);\r\n    event RoleRemoved(address indexed operator, string role);\r\n\r\n    function checkRole(address _operator, string _role)\r\n    view\r\n    public\r\n    {\r\n        roles[_role].check(_operator);\r\n    }\r\n\r\n    function hasRole(address _operator, string _role)\r\n    view\r\n    public\r\n    returns (bool)\r\n    {\r\n        return roles[_role].has(_operator);\r\n    }\r\n\r\n    function addRole(address _operator, string _role)\r\n    internal\r\n    {\r\n        roles[_role].add(_operator);\r\n        emit RoleAdded(_operator, _role);\r\n    }\r\n\r\n    function removeRole(address _operator, string _role)\r\n    internal\r\n    {\r\n        roles[_role].remove(_operator);\r\n        emit RoleRemoved(_operator, _role);\r\n    }\r\n\r\n    modifier onlyRole(string _role)\r\n    {\r\n        checkRole(msg.sender, _role);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Whitelist is Ownable, RBAC {\r\n    string public constant ROLE_WHITELISTED = \"whitelist\";\r\n\r\n    modifier onlyIfWhitelisted(address _operator) {\r\n        checkRole(_operator, ROLE_WHITELISTED);\r\n        _;\r\n    }\r\n\r\n    function addAddressToWhitelist(address _operator)\r\n    onlyOwner\r\n    public\r\n    {\r\n        addRole(_operator, ROLE_WHITELISTED);\r\n    }\r\n\r\n    function whitelist(address _operator)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        return hasRole(_operator, ROLE_WHITELISTED);\r\n    }\r\n\r\n    function addAddressesToWhitelist(address[] _operators)\r\n    onlyOwner\r\n    public\r\n    {\r\n        for (uint256 i = 0; i < _operators.length; i++) {\r\n            addAddressToWhitelist(_operators[i]);\r\n        }\r\n    }\r\n\r\n    function removeAddressFromWhitelist(address _operator)\r\n    onlyOwner\r\n    public\r\n    {\r\n        removeRole(_operator, ROLE_WHITELISTED);\r\n    }\r\n\r\n    function removeAddressesFromWhitelist(address[] _operators)\r\n    onlyOwner\r\n    public\r\n    {\r\n        for (uint256 i = 0; i < _operators.length; i++) {\r\n            removeAddressFromWhitelist(_operators[i]);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DateKernel\r\n{\r\n    uint256 public unlockTime;\r\n    constructor(uint256 _time) public {\r\n        unlockTime = _time;\r\n    }\r\n\r\n    function determineDate() internal view\r\n    returns (uint256 v)\r\n    {\r\n        uint256 n = now;\r\n        uint256 ut = unlockTime;\r\n        uint256 mo = 30 * 1 days;\r\n        uint8 p = 10;\r\n        assembly {\r\n            if sgt(n, ut) {\r\n                if or(slt(sub(n, ut), mo), eq(sub(n, ut), mo)) {\r\n                    v := 1\r\n                }\r\n                if sgt(sub(n, ut), mo) {\r\n                    v := add(div(sub(n, ut), mo), 1)\r\n                }\r\n                if or(eq(v, p), sgt(v, p)) {\r\n                    v := p\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Distributable is StandardToken, Ownable, Whitelist, DateKernel {\r\n    using SafeMath for uint;\r\n    event Distributed(uint256 amount);\r\n    event MemberUpdated(address member, uint256 balance);\r\n    struct member {\r\n        uint256 lastWithdrawal;\r\n        uint256 tokensTotal;\r\n        uint256 tokensLeft;\r\n    }\r\n\r\n    mapping (address => member) public teams;\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) private returns (bool) {\r\n        require(_value <= balances[_from]);\r\n        require(_to != address(0));\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function updateMember(address _who, uint256 _last, uint256 _total, uint256 _left) internal returns (bool) {\r\n        teams[_who] = member(_last, _total, _left);\r\n        emit MemberUpdated(_who, _left);\r\n        return true;\r\n    }\r\n    \r\n    function airdrop(address[] dests, uint256[] values) public onlyOwner {\r\n        // This simple validation will catch most mistakes without consuming\r\n        // too much gas.\r\n        require(dests.length == values.length);\r\n\r\n        for (uint256 i = 0; i < dests.length; i++) {\r\n            transfer(dests[i], values[i]);\r\n        }\r\n    }\r\n\r\n    function distributeTokens(address[] _member, uint256[] _amount)\r\n    onlyOwner\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_member.length == _amount.length);\r\n        for (uint256 i = 0; i < _member.length; i++) {\r\n            updateMember(_member[i], 0, _amount[i], _amount[i]);\r\n            addAddressToWhitelist(_member[i]);\r\n        }\r\n        emit Distributed(_member.length);\r\n        return true;\r\n    }\r\n\r\n    function rewardController(address _member)\r\n    internal\r\n    returns (uint256)\r\n    {\r\n        member storage mbr = teams[_member];\r\n        require(mbr.tokensLeft > 0, \"You've spent your share\");\r\n        uint256 multiplier;\r\n        uint256 callback;\r\n        uint256 curDate = determineDate();\r\n        uint256 lastDate = mbr.lastWithdrawal;\r\n        if(curDate > lastDate) {\r\n            multiplier = curDate.sub(lastDate);\r\n        } else if(curDate == lastDate) {\r\n            revert(\"Its no time\");\r\n        }\r\n        if(mbr.tokensTotal >= mbr.tokensLeft && mbr.tokensTotal > 0) {\r\n            if(curDate == 10) {\r\n                callback = mbr.tokensLeft;\r\n            } else {\r\n                callback = multiplier.mul((mbr.tokensTotal).div(10));\r\n            }\r\n        }\r\n        updateMember(\r\n            _member,\r\n            curDate,\r\n            mbr.tokensTotal,\r\n            mbr.tokensLeft.sub(callback)\r\n        );\r\n        return callback;\r\n    }\r\n\r\n    function getDistributedToken()\r\n    public\r\n    onlyIfWhitelisted(msg.sender)\r\n    returns(bool)\r\n    {\r\n        require(unlockTime > now);\r\n        uint256 amount = rewardController(msg.sender);\r\n        _transfer(this, msg.sender, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TutorNinjaToken is Distributable, BurnableToken, CanReclaimToken, Claimable {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public INITIAL_SUPPLY = 33e6 * (10 ** uint256(decimals));\r\n\r\n    constructor()\r\n    public\r\n    DateKernel(1541030400)\r\n    {\r\n        name = \"Tutor Ninja\";\r\n        symbol = \"NTOK\";\r\n        decimals = 10;\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    function() external {\r\n        revert(\"Does not accept ether\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDistributedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"distributeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"teams\",\"outputs\":[{\"name\":\"lastWithdrawal\",\"type\":\"uint256\"},{\"name\":\"tokensTotal\",\"type\":\"uint256\"},{\"name\":\"tokensLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"MemberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TutorNinjaToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c42f8ff82969320bb91d21cba306765b13bf914e3bbdb2b31cd6b4d4c23716bf"}]}