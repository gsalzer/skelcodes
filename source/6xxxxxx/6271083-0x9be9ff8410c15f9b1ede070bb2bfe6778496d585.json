{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: zos-lib/contracts/migrations/Migratable.sol\r\n\r\n/**\r\n * @title Migratable\r\n * Helper contract to support intialization and migration schemes between\r\n * different implementations of a contract in the context of upgradeability.\r\n * To use it, replace the constructor with a function that has the\r\n * `isInitializer` modifier starting with `\"0\"` as `migrationId`.\r\n * When you want to apply some migration code during an upgrade, increase\r\n * the `migrationId`. Or, if the migration code must be applied only after\r\n * another migration has been already applied, use the `isMigration` modifier.\r\n * This helper supports multiple inheritance.\r\n * WARNING: It is the developer's responsibility to ensure that migrations are\r\n * applied in a correct order, or that they are run at all.\r\n * See `Initializable` for a simpler version.\r\n */\r\ncontract Migratable {\r\n  /**\r\n   * @dev Emitted when the contract applies a migration.\r\n   * @param contractName Name of the Contract.\r\n   * @param migrationId Identifier of the migration applied.\r\n   */\r\n  event Migrated(string contractName, string migrationId);\r\n\r\n  /**\r\n   * @dev Mapping of the already applied migrations.\r\n   * (contractName => (migrationId => bool))\r\n   */\r\n  mapping (string => mapping (string => bool)) internal migrated;\r\n\r\n  /**\r\n   * @dev Internal migration id used to specify that a contract has already been initialized.\r\n   */\r\n  string constant private INITIALIZED_ID = \"initialized\";\r\n\r\n\r\n  /**\r\n   * @dev Modifier to use in the initialization function of a contract.\r\n   * @param contractName Name of the contract.\r\n   * @param migrationId Identifier of the migration.\r\n   */\r\n  modifier isInitializer(string contractName, string migrationId) {\r\n    validateMigrationIsPending(contractName, INITIALIZED_ID);\r\n    validateMigrationIsPending(contractName, migrationId);\r\n    _;\r\n    emit Migrated(contractName, migrationId);\r\n    migrated[contractName][migrationId] = true;\r\n    migrated[contractName][INITIALIZED_ID] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to use in the migration of a contract.\r\n   * @param contractName Name of the contract.\r\n   * @param requiredMigrationId Identifier of the previous migration, required\r\n   * to apply new one.\r\n   * @param newMigrationId Identifier of the new migration to be applied.\r\n   */\r\n  modifier isMigration(string contractName, string requiredMigrationId, string newMigrationId) {\r\n    require(isMigrated(contractName, requiredMigrationId), \"Prerequisite migration ID has not been run yet\");\r\n    validateMigrationIsPending(contractName, newMigrationId);\r\n    _;\r\n    emit Migrated(contractName, newMigrationId);\r\n    migrated[contractName][newMigrationId] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the contract migration was applied.\r\n   * @param contractName Name of the contract.\r\n   * @param migrationId Identifier of the migration.\r\n   * @return true if the contract migration was applied, false otherwise.\r\n   */\r\n  function isMigrated(string contractName, string migrationId) public view returns(bool) {\r\n    return migrated[contractName][migrationId];\r\n  }\r\n\r\n  /**\r\n   * @dev Initializer that marks the contract as initialized.\r\n\r\n   * For more information see https://github.com/zeppelinos/zos-lib/issues/158.\r\n   */\r\n  function initialize() isInitializer(\"Migratable\", \"1.2.1\") public {\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the requested migration was already executed.\r\n   * @param contractName Name of the contract.\r\n   * @param migrationId Identifier of the migration.\r\n   */\r\n  function validateMigrationIsPending(string contractName, string migrationId) private view {\r\n    require(!isMigrated(contractName, migrationId), \"Requested target migration ID has already been run\");\r\n  }\r\n}\r\n\r\n// File: openzeppelin-zos/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is Migratable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function initialize(address _sender) public isInitializer(\"Ownable\", \"1.9.0\") {\r\n    owner = _sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-zos/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/NaviTokenBurner.sol\r\n\r\n/**\r\n * @title NaviTokenBurner contract\r\n */\r\ncontract NaviTokenBurner is Ownable {\r\n\r\n  event TokensBurned (uint256 amount);\r\n\r\n  ERC20Basic public token;\r\n\r\n  constructor(ERC20Basic _token) public {\r\n    token = _token;\r\n  }\r\n\r\n  function tokenDestroy() public onlyOwner{\r\n    require(token.balanceOf(this) > 0);\r\n    selfdestruct(owner);\r\n\r\n    emit TokensBurned(token.balanceOf(this));\r\n  }\r\n\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"tokenDestroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"isMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"Migrated\",\"type\":\"event\"}]","ContractName":"NaviTokenBurner","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000588047365df5ba589f923604aac23d673555c623","Library":"","SwarmSource":"bzzr://3ec5dfc583ac7ed41af4f209233b8b5e99e98a6b596c2274a4c26bad35f9089c"}]}