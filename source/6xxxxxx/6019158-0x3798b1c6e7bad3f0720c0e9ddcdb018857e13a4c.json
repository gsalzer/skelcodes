{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/* ==================================================================== */\r\n/* Copyright (c) 2018 The MagicAcademy Project.  All rights reserved.\r\n/* \r\n/* https://www.magicacademy.io One of the world's first idle strategy games of blockchain \r\n/*  \r\n/* authors rainy@livestar.com/Jonny.Fu@livestar.com\r\n/*                 \r\n/* ==================================================================== */\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /*\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract AccessAdmin is Ownable {\r\n\r\n  /// @dev Admin Address\r\n  mapping (address => bool) adminContracts;\r\n\r\n  /// @dev Trust contract\r\n  mapping (address => bool) actionContracts;\r\n\r\n  function setAdminContract(address _addr, bool _useful) public onlyOwner {\r\n    require(_addr != address(0));\r\n    adminContracts[_addr] = _useful;\r\n  }\r\n\r\n  modifier onlyAdmin {\r\n    require(adminContracts[msg.sender]); \r\n    _;\r\n  }\r\n\r\n  function setActionContract(address _actionAddr, bool _useful) public onlyAdmin {\r\n    actionContracts[_actionAddr] = _useful;\r\n  }\r\n\r\n  modifier onlyAccess() {\r\n    require(actionContracts[msg.sender]);\r\n    _;\r\n  }\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd\r\ncontract ERC721 /* is ERC165 */ {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n  \r\n  function balanceOf(address _owner) external view returns (uint256);\r\n  function ownerOf(uint256 _tokenId) external view returns (address);\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n  function approve(address _approved, uint256 _tokenId) external payable;\r\n  function setApprovalForAll(address _operator, bool _approved) external;\r\n  function getApproved(uint256 _tokenId) external view returns (address);\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\ninterface ERC165 {\r\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\ninterface ERC721TokenReceiver {\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f\r\n/*interface ERC721Metadata is ERC721{\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) external view returns (string);\r\n}*/\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63\r\ninterface ERC721Enumerable /* is ERC721 */ {\r\n  function totalSupply() external view returns (uint256);\r\n  function tokenByIndex(uint256 _index) external view returns (uint256);\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\ncontract RareCards is AccessAdmin, ERC721 {\r\n  using SafeMath for SafeMath;\r\n  // event\r\n  event eCreateRare(uint256 tokenId, uint256 price, address owner);\r\n\r\n  // ERC721\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  struct RareCard {\r\n    uint256 rareId;     // rare item id\r\n    uint256 rareClass;  // upgrade level of rare item\r\n    uint256 cardId;     // related to basic card ID \r\n    uint256 rareValue;  // upgrade value of rare item\r\n  }\r\n\r\n  RareCard[] public rareArray; // dynamic Array\r\n\r\n  function RareCards() public {\r\n    rareArray.length += 1;\r\n    setAdminContract(msg.sender,true);\r\n    setActionContract(msg.sender,true);\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  uint256 private constant PROMO_CREATION_LIMIT = 20;\r\n  uint256 private constant startPrice = 0.5 ether;\r\n\r\n  address thisAddress = this;\r\n  uint256 PLATPrice = 65000;\r\n  /**mapping**/\r\n  /// @dev map tokenId to owner (tokenId -> address)\r\n  mapping (uint256 => address) public IndexToOwner;\r\n  /// @dev search rare item index in owner's array (tokenId -> index)\r\n  mapping (uint256 => uint256) indexOfOwnedToken;\r\n  /// @dev list of owned rare items by owner\r\n  mapping (address => uint256[]) ownerToRareArray;\r\n  /// @dev search token price by tokenId\r\n  mapping (uint256 => uint256) IndexToPrice;\r\n  /// @dev get the authorized address for each rare item\r\n  mapping (uint256 => address) public IndexToApproved;\r\n  /// @dev get the authorized operators for each rare item\r\n  mapping (address => mapping(address => bool)) operatorToApprovals;\r\n\r\n  /** Modifier **/\r\n  /// @dev Check if token ID is valid\r\n  modifier isValidToken(uint256 _tokenId) {\r\n    require(_tokenId >= 1 && _tokenId <= rareArray.length);\r\n    require(IndexToOwner[_tokenId] != address(0)); \r\n    _;\r\n  }\r\n  /// @dev check the ownership of token\r\n  modifier onlyOwnerOf(uint _tokenId) {\r\n    require(msg.sender == IndexToOwner[_tokenId] || msg.sender == IndexToApproved[_tokenId]);\r\n    _;\r\n  }\r\n\r\n  /// @dev create a new rare item\r\n  function createRareCard(uint256 _rareClass, uint256 _cardId, uint256 _rareValue) public onlyOwner {\r\n    require(rareArray.length < PROMO_CREATION_LIMIT); \r\n    _createRareCard(thisAddress, startPrice, _rareClass, _cardId, _rareValue);\r\n  }\r\n\r\n\r\n  /// steps to create rare item \r\n  function _createRareCard(address _owner, uint256 _price, uint256 _rareClass, uint256 _cardId, uint256 _rareValue) internal returns(uint) {\r\n    uint256 newTokenId = rareArray.length;\r\n    RareCard memory _rarecard = RareCard({\r\n      rareId: newTokenId,\r\n      rareClass: _rareClass,\r\n      cardId: _cardId,\r\n      rareValue: _rareValue\r\n    });\r\n    rareArray.push(_rarecard);\r\n    //event\r\n    eCreateRare(newTokenId, _price, _owner);\r\n\r\n    IndexToPrice[newTokenId] = _price;\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newTokenId);\r\n\r\n  } \r\n\r\n  /// @dev transfer the ownership of tokenId\r\n  /// @param _from The old owner of rare item(If created: 0x0)\r\n  /// @param _to The new owner of rare item\r\n  /// @param _tokenId The tokenId of rare item\r\n  function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n    if (_from != address(0)) {\r\n      uint256 indexFrom = indexOfOwnedToken[_tokenId];\r\n      uint256[] storage rareArrayOfOwner = ownerToRareArray[_from];\r\n      require(rareArrayOfOwner[indexFrom] == _tokenId);\r\n\r\n      // Switch the positions of selected item and last item\r\n      if (indexFrom != rareArrayOfOwner.length - 1) {\r\n        uint256 lastTokenId = rareArrayOfOwner[rareArrayOfOwner.length - 1];\r\n        rareArrayOfOwner[indexFrom] = lastTokenId;\r\n        indexOfOwnedToken[lastTokenId] = indexFrom;\r\n      }\r\n      rareArrayOfOwner.length -= 1;\r\n\r\n      // clear any previously approved ownership exchange\r\n      if (IndexToApproved[_tokenId] != address(0)) {\r\n        delete IndexToApproved[_tokenId];\r\n      } \r\n    }\r\n    //transfer ownership\r\n    IndexToOwner[_tokenId] = _to;\r\n    ownerToRareArray[_to].push(_tokenId);\r\n    indexOfOwnedToken[_tokenId] = ownerToRareArray[_to].length - 1;\r\n    // Emit the transfer event.\r\n    Transfer(_from != address(0) ? _from : this, _to, _tokenId);\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific tokenId.\r\n  /// @param _tokenId The tokenId of the rarecard.\r\n  function getRareInfo(uint256 _tokenId) external view returns (\r\n      uint256 sellingPrice,\r\n      address owner,\r\n      uint256 nextPrice,\r\n      uint256 rareClass,\r\n      uint256 cardId,\r\n      uint256 rareValue\r\n  ) {\r\n    RareCard storage rarecard = rareArray[_tokenId];\r\n    sellingPrice = IndexToPrice[_tokenId];\r\n    owner = IndexToOwner[_tokenId];\r\n    nextPrice = SafeMath.div(SafeMath.mul(sellingPrice,125),100);\r\n    rareClass = rarecard.rareClass;\r\n    cardId = rarecard.cardId;\r\n    rareValue = rarecard.rareValue;\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific tokenId.\r\n  /// @param _tokenId The tokenId of the rarecard.\r\n  function getRarePLATInfo(uint256 _tokenId) external view returns (\r\n    uint256 sellingPrice,\r\n    address owner,\r\n    uint256 nextPrice,\r\n    uint256 rareClass,\r\n    uint256 cardId,\r\n    uint256 rareValue\r\n  ) {\r\n    RareCard storage rarecard = rareArray[_tokenId];\r\n    sellingPrice = SafeMath.mul(IndexToPrice[_tokenId],PLATPrice);\r\n    owner = IndexToOwner[_tokenId];\r\n    nextPrice = SafeMath.div(SafeMath.mul(sellingPrice,125),100);\r\n    rareClass = rarecard.rareClass;\r\n    cardId = rarecard.cardId;\r\n    rareValue = rarecard.rareValue;\r\n  }\r\n\r\n\r\n  function getRareItemsOwner(uint256 rareId) external view returns (address) {\r\n    return IndexToOwner[rareId];\r\n  }\r\n\r\n  function getRareItemsPrice(uint256 rareId) external view returns (uint256) {\r\n    return IndexToPrice[rareId];\r\n  }\r\n\r\n  function getRareItemsPLATPrice(uint256 rareId) external view returns (uint256) {\r\n    return SafeMath.mul(IndexToPrice[rareId],PLATPrice);\r\n  }\r\n\r\n  function setRarePrice(uint256 _rareId, uint256 _price) external onlyAccess {\r\n    IndexToPrice[_rareId] = _price;\r\n  }\r\n\r\n  function rareStartPrice() external pure returns (uint256) {\r\n    return startPrice;\r\n  }\r\n\r\n  /// ERC721\r\n  /// @notice Count all the rare items assigned to an owner\r\n  function balanceOf(address _owner) external view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownerToRareArray[_owner].length;\r\n  }\r\n\r\n  /// @notice Find the owner of a rare item\r\n  function ownerOf(uint256 _tokenId) external view returns (address _owner) {\r\n    return IndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// @notice Transfers the ownership of a rare item from one address to another address\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable {\r\n    _safeTransferFrom(_from, _to, _tokenId, data);\r\n  }\r\n\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable {\r\n    _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /// @dev steps to implement the safeTransferFrom\r\n  function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \r\n    internal\r\n    isValidToken(_tokenId)\r\n    onlyOwnerOf(_tokenId) \r\n  {\r\n    address owner = IndexToOwner[_tokenId];\r\n    require(owner != address(0) && owner == _from);\r\n    require(_to != address(0));\r\n            \r\n    _transfer(_from, _to, _tokenId);\r\n\r\n    // Do the callback after everything is done to avoid reentrancy attack\r\n    /*uint256 codeSize;\r\n    assembly { codeSize := extcodesize(_to) }\r\n    if (codeSize == 0) {\r\n        return;\r\n    }*/\r\n    bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\r\n    // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\r\n    require(retval == 0xf0b9e5ba);\r\n  }\r\n\r\n  // function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n  //   _transfer(msg.sender, _to, _tokenId);\r\n  // }\r\n\r\n  /// @notice Transfers the ownership of a rare item from one address to another address\r\n  /// @dev Transfer ownership of a rare item, '_to' must be a vaild address, or the card will lost\r\n  /// @param _from The current owner of rare item\r\n  /// @param _to The new owner\r\n  /// @param _tokenId The rare item to transfer\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) \r\n    external \r\n    isValidToken(_tokenId)\r\n    onlyOwnerOf(_tokenId) \r\n    payable \r\n  {\r\n    address owner = IndexToOwner[_tokenId];\r\n    // require(_owns(_from, _tokenId));\r\n    // require(_approved(_to, _tokenId));\r\n    require(owner != address(0) && owner == _from);\r\n    require(_to != address(0));\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  //   /// For checking approval of transfer for address _to\r\n  //   function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n  //     return IndexToApproved[_tokenId] == _to;\r\n  //   }\r\n  //  /// Check for token ownership\r\n  //   function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n  //     return claimant == IndexToOwner[_tokenId];\r\n  //   }\r\n\r\n  /// @dev Set or reaffirm the approved address for a rare item\r\n  /// @param _approved The new approved rare item controller\r\n  /// @param _tokenId The rare item to approve\r\n  function approve(address _approved, uint256 _tokenId) \r\n    external \r\n    isValidToken(_tokenId)\r\n    onlyOwnerOf(_tokenId) \r\n    payable \r\n  {\r\n    address owner = IndexToOwner[_tokenId];\r\n    require(operatorToApprovals[owner][msg.sender]);\r\n    IndexToApproved[_tokenId] = _approved;\r\n    Approval(owner, _approved, _tokenId);\r\n  }\r\n\r\n\r\n  /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\r\n  /// @param _operator Address to add to the set of authorized operators.\r\n  /// @param _approved True if the operators is approved, false to revoke approval\r\n  function setApprovalForAll(address _operator, bool _approved) \r\n    external \r\n  {\r\n    operatorToApprovals[msg.sender][_operator] = _approved;\r\n    ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  /// @dev Get the approved address for a single rare item\r\n  /// @param _tokenId The rare item to find the approved address for\r\n  /// @return The approved address for this rare item, or the zero address if there is none\r\n  function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\r\n    return IndexToApproved[_tokenId];\r\n  }\r\n\r\n  /// @dev Query if an address is an authorized operator for another address\r\n  /// @param _owner The address that owns the rare item\r\n  /// @param _operator The address that acts on behalf of the owner\r\n  /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n    return operatorToApprovals[_owner][_operator];\r\n  }\r\n\r\n  /// @notice Count rare items tracked by this contract\r\n  /// @return A count of valid rare items tracked by this contract, where each one of\r\n  ///  them has an assigned and queryable owner not equal to the zero address\r\n  function totalSupply() external view returns (uint256) {\r\n    return rareArray.length -1;\r\n  }\r\n\r\n  /// @notice Enumerate valid rare items\r\n  /// @dev Throws if `_index` >= `totalSupply()`.\r\n  /// @param _index A counter less than `totalSupply()`\r\n  /// @return The token identifier for the `_index`the rare item,\r\n  ///  (sort order not specified)\r\n  function tokenByIndex(uint256 _index) external view returns (uint256) {\r\n    require(_index <= (rareArray.length - 1));\r\n    return _index;\r\n  }\r\n\r\n  /// @notice Enumerate rare items assigned to an owner\r\n  /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\r\n  ///  `_owner` is the zero address, representing invalid rare items.\r\n  /// @param _owner An address where we are interested in rare items owned by them\r\n  /// @param _index A counter less than `balanceOf(_owner)`\r\n  /// @return The token identifier for the `_index`the rare item assigned to `_owner`,\r\n  ///   (sort order not specified)\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n    require(_index < ownerToRareArray[_owner].length);\r\n    if (_owner != address(0)) {\r\n      uint256 tokenId = ownerToRareArray[_owner][_index];\r\n      return tokenId;\r\n    }\r\n  }\r\n\r\n  /// @param _owner The owner whose celebrity tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire Persons array looking for persons belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) external view returns(uint256[]) {\r\n    uint256 tokenCount = ownerToRareArray[_owner].length;\r\n    if (tokenCount == 0) {\r\n      // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalRare = rareArray.length - 1;\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 tokenId;\r\n      for (tokenId = 0; tokenId <= totalRare; tokenId++) {\r\n        if (IndexToOwner[tokenId] == _owner) {\r\n          result[resultIndex] = tokenId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  //transfer token \r\n  function transferToken(address _from, address _to, uint256 _tokenId) external onlyAccess {\r\n    _transfer(_from,  _to, _tokenId);\r\n  }\r\n\r\n  // transfer token in contract-- for raffle\r\n  function transferTokenByContract(uint256 _tokenId,address _to) external onlyAccess {\r\n    _transfer(thisAddress,  _to, _tokenId);\r\n  }\r\n\r\n  // owner & price list \r\n  function getRareItemInfo() external view returns (address[], uint256[], uint256[]) {\r\n    address[] memory itemOwners = new address[](rareArray.length-1);\r\n    uint256[] memory itemPrices = new uint256[](rareArray.length-1);\r\n    uint256[] memory itemPlatPrices = new uint256[](rareArray.length-1);\r\n        \r\n    uint256 startId = 1;\r\n    uint256 endId = rareArray.length-1;\r\n        \r\n    uint256 i;\r\n    while (startId <= endId) {\r\n      itemOwners[i] = IndexToOwner[startId];\r\n      itemPrices[i] = IndexToPrice[startId];\r\n      itemPlatPrices[i] = SafeMath.mul(IndexToPrice[startId],PLATPrice);\r\n      i++;\r\n      startId++;\r\n    }   \r\n    return (itemOwners, itemPrices, itemPlatPrices);\r\n  }\r\n} \r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_useful\",\"type\":\"bool\"}],\"name\":\"setAdminContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rareId\",\"type\":\"uint256\"}],\"name\":\"getRareItemsPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rareId\",\"type\":\"uint256\"}],\"name\":\"getRareItemsPLATPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRareInfo\",\"outputs\":[{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"nextPrice\",\"type\":\"uint256\"},{\"name\":\"rareClass\",\"type\":\"uint256\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"rareValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rareArray\",\"outputs\":[{\"name\":\"rareId\",\"type\":\"uint256\"},{\"name\":\"rareClass\",\"type\":\"uint256\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"rareValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionAddr\",\"type\":\"address\"},{\"name\":\"_useful\",\"type\":\"bool\"}],\"name\":\"setActionContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rareId\",\"type\":\"uint256\"}],\"name\":\"getRareItemsOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rareId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setRarePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRarePLATInfo\",\"outputs\":[{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"nextPrice\",\"type\":\"uint256\"},{\"name\":\"rareClass\",\"type\":\"uint256\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"rareValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRareItemInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rareStartPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferTokenByContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rareClass\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_rareValue\",\"type\":\"uint256\"}],\"name\":\"createRareCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"eCreateRare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RareCards","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7d3babcb7f6c9b1b67336cd902f0e558674218c69d96653407e5ff6224586e20"}]}