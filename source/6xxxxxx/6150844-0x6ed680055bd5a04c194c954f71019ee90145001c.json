{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n// King of the Crypto Hill contract by Spielley\r\n// P3D contract designed by TEAM JUST and here integrated for dividend payout purpose, not active in testnet version.\r\n// See P3D proof of concept at : https://divgarden.dvx.me/\r\n// Or look at it's code at: https://etherscan.io/address/0xdaa282aba7f4aa757fac94024dfb89f8654582d3#code\r\n// any derivative of KOTCH is allowed if:\r\n// - 1% additional on payouts happen to original KOTCH contract creator's eth account: 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220\r\n// - contracts are not designed or used to scam people or mallpractices\r\n// This game is intended for fun, Spielley is not liable for any bugs the contract may contain. \r\n// Don't play with crypto you can't afford to lose\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and a\r\n// fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract FixedSupplyToken is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"DOTCH\";\r\n        name = \"Diamond Of The Crypto Hill\";\r\n        decimals = 0;\r\n        _totalSupply = 10000000000;\r\n        balances[this] = _totalSupply;\r\n        emit Transfer(address(0),this, _totalSupply);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}\r\ninterface HourglassInterface  {\r\n    function() payable external;\r\n    function buy(address _playerAddress) payable external returns(uint256);\r\n    function sell(uint256 _amountOfTokens) external;\r\n    function reinvest() external;\r\n    function withdraw() external;\r\n    function exit() external;\r\n    function dividendsOf(address _playerAddress) external view returns(uint256);\r\n    function balanceOf(address _playerAddress) external view returns(uint256);\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\r\n    function stakingRequirement() external view returns(uint256);\r\n}\r\ncontract Game is FixedSupplyToken {\r\n    \r\nHourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);    \r\nstruct Village {\r\n    address owner;\r\n    uint defending;\r\n    uint lastcollect;\r\n    uint beginnerprotection;\r\n}\r\nstruct Variables {\r\n    uint nextVillageId;\r\n    uint bpamount;\r\n    \r\n    uint totalsupplyGOTCH;\r\n    uint GOTCHatcontract;\r\n    uint previousethamount;\r\n    uint solsforhire;\r\n    uint solslastupdate;\r\n    uint soldierreplenishrate;\r\n    uint soldierprice;\r\n    uint lastblockpayout;\r\n    uint blocksbeforenewpay;\r\n    uint ATPO;\r\n    uint nextpayamount;\r\n    uint nextowneramount;\r\n    \r\n    \r\n}\r\nstruct Ownables {\r\n    address hillowner;\r\n    uint soldiersdefendinghill; \r\n    mapping(address => uint256) soldiers;\r\n    mapping(uint256 => Village) villages;\r\n    mapping(address => uint256)  GOTCH;\r\n    mapping(address => uint256)  redeemedvils;\r\n    bool ERCtradeactive;\r\n    uint roundlength;\r\n    \r\n}\r\nstruct Marketoffer{\r\n    address placedby;\r\n    uint256 amountdotch;\r\n    uint256 wantsthisamtweiperdotch;\r\n}\r\n\r\nevent villtakeover(address from, address to, uint villageint);\r\nevent hilltakeover(address from, address to);\r\nevent battle(address attacker, uint pointsattacker,  address defender, uint pointsdefender);\r\nevent dotchsale( address seller,uint price,  address taker , uint256 amount);\r\nuint256 public ethforp3dbuy;\r\nuint256 public round;\r\nuint256 public nextmarketoffer;\r\nuint256 public nextroundlength = 10000000000000000000000;\r\nuint256 public nextroundtotalsupplyGOTCH = 10000;\r\nuint256 public nextroundGOTCHatcontract = 10000;\r\nuint256 public nextroundsolsforhire = 100;\r\nuint256 public nextroundsoldierreplenishrate = 50;\r\nuint256 public nextroundblocksbeforenewpay = 250;\r\nbool public divsforall;\r\nbool public nextroundERCtradeactive = true;\r\nmapping(uint256 => Variables) public roundvars;\r\nmapping(uint256 => Ownables) public roundownables; \r\n mapping(address => uint256) public Redeemable;\r\n mapping(uint256 => Marketoffer) public marketplace;\r\n\r\nfunction harvestabledivs()\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return ( P3Dcontract_.dividendsOf(address(this)))  ;\r\n    }\r\n\r\nfunction villageinfo(uint256 lookup)\r\n        view\r\n        public\r\n        returns(address owner, uint256 soldiersdefending,uint256 lastcollect,uint256 beginnersprotection)\r\n    {\r\n        return ( roundownables[round].villages[lookup].owner,roundownables[round].villages[lookup].defending,roundownables[round].villages[lookup].lastcollect,roundownables[round].villages[lookup].beginnerprotection)  ;\r\n    }\r\nfunction gotchinfo(address lookup)\r\n        view\r\n        public\r\n        returns(uint256 Gold)\r\n    {\r\n        return ( roundownables[round].GOTCH[lookup])  ;\r\n    }\r\nfunction soldiersinfo(address lookup)\r\n        view\r\n        public\r\n        returns(uint256 soldiers)\r\n    {\r\n        return ( roundownables[round].soldiers[lookup])  ;\r\n    } \r\nfunction redeemablevilsinfo(address lookup)\r\n        view\r\n        public\r\n        returns(uint256 redeemedvils)\r\n    {\r\n        return ( roundownables[round].redeemedvils[lookup])  ;\r\n    }\r\nfunction playerinfo(address lookup)\r\n        view\r\n        public\r\n        returns(uint256 redeemedvils,uint256 redeemablevils , uint256 soldiers, uint256 GOTCH)\r\n    {\r\n        return ( \r\n            roundownables[round].redeemedvils[lookup],\r\n            Redeemable[lookup],\r\n            roundownables[round].soldiers[lookup],\r\n            roundownables[round].GOTCH[lookup]\r\n            )  ;\r\n    } \r\nuint256 private div;\r\nuint256 private ethtosend; \r\n \r\nfunction () external payable{} // needed to receive p3d divs\r\n\r\nconstructor () public {\r\n    round++;\r\n    roundvars[round].totalsupplyGOTCH = 10000;\r\n       roundvars[round].GOTCHatcontract = 10000;\r\n       roundvars[round].solsforhire = 100;\r\n       roundvars[round].soldierreplenishrate = 50;\r\n       roundvars[round].solslastupdate = block.number;\r\n       updatesolbuyrate();\r\n       roundvars[round].lastblockpayout = block.number;\r\n       roundownables[round].hillowner = msg.sender;\r\n       roundvars[round].nextpayamount = 0;\r\n       roundvars[round].nextowneramount = 0;\r\n       roundvars[round].previousethamount = 0;\r\n       roundvars[round].blocksbeforenewpay = 250;\r\n       roundvars[round].bpamount = 30000;\r\n       roundownables[round].ERCtradeactive = true;\r\n       roundownables[round].roundlength = 10000000000000000000000;\r\n       divsforall = false;\r\n    }\r\nfunction hillpayout() internal  {\r\n    require(block.number > roundvars[round].lastblockpayout.add(roundvars[round].blocksbeforenewpay));\r\n    // new payout method\r\n    roundvars[round].lastblockpayout = roundvars[round].lastblockpayout.add(roundvars[round].blocksbeforenewpay);\r\n    ethforp3dbuy = ethforp3dbuy.add((address(this).balance.sub(ethforp3dbuy)).div(100));\r\n    owner.transfer((address(this).balance.sub(ethforp3dbuy)).div(100));\r\n    roundvars[round].ATPO = roundvars[round].ATPO.add((address(this).balance.sub(ethforp3dbuy)).div(2));\r\n    roundownables[round].hillowner.transfer((address(this).balance.sub(ethforp3dbuy)).div(2));\r\n\r\n}\r\nfunction attackhill(uint256 amtsoldiers) public payable returns(bool, uint){\r\n    require(msg.value >= 1 finney);\r\n    if(block.number > roundvars[round].lastblockpayout.add(roundvars[round].blocksbeforenewpay))\r\n    {\r\n    hillpayout();\r\n    }\r\n    \r\n    require(amtsoldiers <= roundownables[round].soldiers[msg.sender]);\r\n    require(amtsoldiers >= 1);\r\n    if(msg.sender == roundownables[round].hillowner)\r\n{\r\n   roundownables[round].soldiersdefendinghill = roundownables[round].soldiersdefendinghill.add(amtsoldiers);\r\n    roundownables[round].soldiers[msg.sender] = roundownables[round].soldiers[msg.sender].sub(amtsoldiers);\r\n    return (false, 0);\r\n}\r\nif(msg.sender != roundownables[round].hillowner)\r\n{\r\n   if(roundownables[round].soldiersdefendinghill < amtsoldiers)\r\n    {\r\n        emit hilltakeover(roundownables[round].hillowner,msg.sender);\r\n        emit battle(msg.sender,roundownables[round].soldiersdefendinghill,roundownables[round].hillowner,roundownables[round].soldiersdefendinghill);\r\n        roundownables[round].hillowner = msg.sender;\r\n        roundownables[round].soldiersdefendinghill = amtsoldiers.sub(roundownables[round].soldiersdefendinghill);\r\n        roundownables[round].soldiers[msg.sender] = roundownables[round].soldiers[msg.sender].sub(amtsoldiers);\r\n        return (true, roundownables[round].soldiersdefendinghill);\r\n    }\r\n    if(roundownables[round].soldiersdefendinghill >= amtsoldiers)\r\n    {\r\n        roundownables[round].soldiersdefendinghill = roundownables[round].soldiersdefendinghill.sub(amtsoldiers);\r\n        roundownables[round].soldiers[msg.sender] = roundownables[round].soldiers[msg.sender].sub(amtsoldiers);\r\n        emit battle(msg.sender,amtsoldiers,roundownables[round].hillowner,amtsoldiers);\r\n        return (false, amtsoldiers);\r\n    }\r\n}\r\n\r\n}\r\nfunction supporthill(uint256 amtsoldiers) public payable {\r\n    require(msg.value >= 1 finney);\r\n    require(roundownables[round].hillowner == msg.sender);\r\n    require(amtsoldiers <= roundownables[round].soldiers[msg.sender]);\r\n    require(amtsoldiers >= 1);\r\n   roundownables[round].soldiersdefendinghill = roundownables[round].soldiersdefendinghill.add(amtsoldiers);\r\n   roundownables[round].soldiers[msg.sender] = roundownables[round].soldiers[msg.sender].sub(amtsoldiers);  \r\n}\r\n\r\nfunction changetradestatus(bool active) public onlyOwner  {\r\n   //move all eth from contract to owners address\r\n   roundownables[round].ERCtradeactive = active;\r\n   \r\n}\r\nfunction setdivsforall(bool active) public onlyOwner  {\r\n   //move all eth from contract to owners address\r\n   divsforall = active;\r\n   \r\n}\r\nfunction changebeginnerprotection(uint256 blockcount) public onlyOwner  {\r\n   roundvars[round].bpamount = blockcount;\r\n}\r\nfunction changesoldierreplenishrate(uint256 rate) public onlyOwner  {\r\n   roundvars[round].soldierreplenishrate = rate;\r\n}\r\nfunction updatesolsforhire() internal  {\r\n   roundvars[round].solsforhire = roundvars[round].solsforhire.add((block.number.sub(roundvars[round].solslastupdate)).mul(roundvars[round].nextVillageId).mul(roundvars[round].soldierreplenishrate));\r\n   roundvars[round].solslastupdate = block.number;\r\n}\r\nfunction updatesolbuyrate() internal  {\r\nif(roundvars[round].solsforhire > roundvars[round].totalsupplyGOTCH)\r\n   {\r\n        roundvars[round].solsforhire = roundvars[round].totalsupplyGOTCH;\r\n   }\r\n   roundvars[round].soldierprice = roundvars[round].totalsupplyGOTCH.div(roundvars[round].solsforhire);\r\n   if(roundvars[round].soldierprice < 1)\r\n   {\r\n       roundvars[round].soldierprice = 1;\r\n   }\r\n}\r\nfunction buysoldiers(uint256 amount) public payable {\r\n    require(msg.value >= 1 finney);\r\n   updatesolsforhire();\r\n   updatesolbuyrate() ;\r\n   require(amount <= roundvars[round].solsforhire);\r\n   \r\n   roundownables[round].soldiers[msg.sender] = roundownables[round].soldiers[msg.sender].add(amount);\r\n   roundvars[round].solsforhire = roundvars[round].solsforhire.sub(amount);\r\n   roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].sub( amount.mul(roundvars[round].soldierprice));\r\n   roundvars[round].GOTCHatcontract = roundvars[round].GOTCHatcontract.add(amount.mul(roundvars[round].soldierprice));\r\n   \r\n}\r\n// found new villgage \r\nfunction createvillage() public  payable  {\r\n    require(msg.value >= 10 finney);\r\n    if(block.number > roundvars[round].lastblockpayout.add(roundvars[round].blocksbeforenewpay))\r\n    {\r\n    hillpayout();\r\n    }\r\n    \r\n    roundownables[round].villages[roundvars[round].nextVillageId].owner = msg.sender;\r\n    \r\n   roundownables[round].villages[roundvars[round].nextVillageId].lastcollect = block.number;\r\n    roundownables[round].villages[roundvars[round].nextVillageId].beginnerprotection = block.number;\r\n    roundvars[round].nextVillageId ++;\r\n   \r\n    roundownables[round].villages[roundvars[round].nextVillageId].defending = roundvars[round].nextVillageId;\r\n    Redeemable[msg.sender]++;\r\n    roundownables[round].redeemedvils[msg.sender]++;\r\n}\r\nfunction batchcreatevillage(uint256 amt) public  payable  {\r\n    require(msg.value >= 10 finney * amt);\r\n    require(amt >= 1);\r\n    require(amt <= 40);\r\n    if(block.number > roundvars[round].lastblockpayout.add(roundvars[round].blocksbeforenewpay))\r\n    {\r\n    hillpayout();\r\n    }\r\n    for(uint i=0; i< amt; i++)\r\n        {\r\n    roundownables[round].villages[roundvars[round].nextVillageId].owner = msg.sender;\r\n   roundownables[round].villages[roundvars[round].nextVillageId].lastcollect = block.number;\r\n    roundownables[round].villages[roundvars[round].nextVillageId].beginnerprotection = block.number;\r\n    roundvars[round].nextVillageId ++;\r\n   \r\n    roundownables[round].villages[roundvars[round].nextVillageId].defending = roundvars[round].nextVillageId;\r\n        } \r\n        Redeemable[msg.sender] = Redeemable[msg.sender].add(amt);\r\n        roundownables[round].redeemedvils[msg.sender] = roundownables[round].redeemedvils[msg.sender].add(amt);\r\n}\r\nfunction cheapredeemvillage() public  payable  {\r\n    require(msg.value >= 1 finney);\r\n    require(roundownables[round].redeemedvils[msg.sender] < Redeemable[msg.sender]);\r\n    roundownables[round].villages[roundvars[round].nextVillageId].owner = msg.sender;\r\n    roundownables[round].villages[roundvars[round].nextVillageId].lastcollect = block.number;\r\n    roundownables[round].villages[roundvars[round].nextVillageId].beginnerprotection = block.number;\r\n    roundvars[round].nextVillageId ++;\r\n    roundownables[round].villages[roundvars[round].nextVillageId].defending = roundvars[round].nextVillageId;\r\n    roundownables[round].redeemedvils[msg.sender]++;\r\n}\r\nfunction preregvills(address reg) public onlyOwner  {\r\n\r\n    roundownables[round].villages[roundvars[round].nextVillageId].owner = reg;\r\n    roundownables[round].villages[roundvars[round].nextVillageId].lastcollect = block.number;\r\n    roundownables[round].villages[roundvars[round].nextVillageId].beginnerprotection = block.number;\r\n    roundvars[round].nextVillageId ++;\r\n    roundownables[round].villages[roundvars[round].nextVillageId].defending = roundvars[round].nextVillageId;\r\n}\r\nfunction attack(uint256 village, uint256 amtsoldiers) public payable returns(bool, uint){\r\n    require(msg.value >= 1 finney);\r\n    if(block.number > roundvars[round].lastblockpayout + roundvars[round].blocksbeforenewpay)\r\n    {\r\n    hillpayout();\r\n    }\r\n   \r\n    uint bpcheck = roundownables[round].villages[village].beginnerprotection.add(roundvars[round].bpamount);\r\n    require(block.number > bpcheck);\r\n    require(roundownables[round].villages[village].owner != 0);// prevent from attacking a non-created village to create a village\r\n    require(amtsoldiers <= roundownables[round].soldiers[msg.sender]);\r\n    require(amtsoldiers >= 1);\r\n    \r\nif(msg.sender == roundownables[round].villages[village].owner)\r\n{\r\n    roundownables[round].villages[village].defending = roundownables[round].villages[village].defending.add(amtsoldiers);\r\n    roundownables[round].soldiers[msg.sender] = roundownables[round].soldiers[msg.sender].sub(amtsoldiers);\r\n    return (false, 0);\r\n}\r\nif(msg.sender != roundownables[round].villages[village].owner)\r\n{\r\n   if(roundownables[round].villages[village].defending < amtsoldiers)\r\n    {\r\n        emit battle(msg.sender,roundownables[round].villages[village].defending,roundownables[round].villages[village].owner,roundownables[round].villages[village].defending);\r\n        emit villtakeover(roundownables[round].villages[village].owner,msg.sender,village);\r\n        roundownables[round].villages[village].owner = msg.sender;\r\n        roundownables[round].villages[village].defending = amtsoldiers.sub(roundownables[round].villages[village].defending);\r\n        roundownables[round].soldiers[msg.sender] = roundownables[round].soldiers[msg.sender].sub(amtsoldiers);\r\n        collecttaxes(village);\r\n        return (true, roundownables[round].villages[village].defending);\r\n        \r\n    }\r\n    if(roundownables[round].villages[village].defending >= amtsoldiers)\r\n    {\r\n        emit battle(msg.sender,amtsoldiers,roundownables[round].villages[village].owner,amtsoldiers);\r\n        roundownables[round].villages[village].defending = roundownables[round].villages[village].defending.sub(amtsoldiers);\r\n        roundownables[round].soldiers[msg.sender] = roundownables[round].soldiers[msg.sender].sub(amtsoldiers);\r\n        return (false, amtsoldiers);\r\n    }\r\n}\r\n\r\n}\r\nfunction support(uint256 village, uint256 amtsoldiers) public payable {\r\n    require(msg.value >= 1 finney);\r\n    require(roundownables[round].villages[village].owner == msg.sender);\r\n    require(roundownables[round].villages[village].owner != 0);// prevent from supporting a non-created village to create a village\r\n    require(amtsoldiers <= roundownables[round].soldiers[msg.sender]);\r\n    require(amtsoldiers >= 1);\r\n    roundownables[round].villages[village].defending = roundownables[round].villages[village].defending.add(amtsoldiers);\r\n    roundownables[round].soldiers[msg.sender] = roundownables[round].soldiers[msg.sender].sub(amtsoldiers);  \r\n}\r\nfunction renewbeginnerprotection(uint256 village) public payable {\r\n    require(msg.value >= (roundvars[round].nextVillageId.sub(village)).mul(1 finney) );//\r\n    roundownables[round].villages[village].beginnerprotection = block.number;\r\n   \r\n}\r\nfunction batchcollecttaxes(uint256 a, uint256 b , uint256 c , uint256 d , uint256 e , uint256 f , uint256 g, uint256 h, uint256 i, uint256 j) public payable {// payed transaction\r\n    // a\r\n   require(msg.value >= 10 finney);\r\n   require(roundownables[round].villages[a].owner == msg.sender);\r\n   require(roundownables[round].villages[b].owner == msg.sender);\r\n   require(roundownables[round].villages[c].owner == msg.sender);\r\n   require(roundownables[round].villages[d].owner == msg.sender);\r\n   require(roundownables[round].villages[e].owner == msg.sender);\r\n   require(roundownables[round].villages[f].owner == msg.sender);\r\n   require(roundownables[round].villages[g].owner == msg.sender);\r\n   require(roundownables[round].villages[h].owner == msg.sender);\r\n   require(roundownables[round].villages[i].owner == msg.sender);\r\n   require(roundownables[round].villages[j].owner == msg.sender);\r\n    require(block.number >  roundownables[round].villages[a].lastcollect);\r\n    require(block.number >  roundownables[round].villages[b].lastcollect);\r\n    require(block.number >  roundownables[round].villages[c].lastcollect);\r\n    require(block.number >  roundownables[round].villages[d].lastcollect);\r\n    require(block.number >  roundownables[round].villages[e].lastcollect);\r\n    require(block.number >  roundownables[round].villages[f].lastcollect);\r\n    require(block.number >  roundownables[round].villages[g].lastcollect);\r\n    require(block.number >  roundownables[round].villages[h].lastcollect);\r\n    require(block.number >  roundownables[round].villages[i].lastcollect);\r\n    require(block.number >  roundownables[round].villages[j].lastcollect);\r\n    \r\n    uint256 test = (block.number.sub(roundownables[round].villages[a].lastcollect)).mul((roundvars[round].nextVillageId.sub(a)));\r\n    if(roundvars[round].GOTCHatcontract < test ) \r\n    {\r\n     roundvars[round].GOTCHatcontract =  roundvars[round].GOTCHatcontract.add(test);\r\n     roundvars[round].totalsupplyGOTCH = roundvars[round].totalsupplyGOTCH.add(test);\r\n    }   \r\n   roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].add(test);\r\n    roundvars[round].GOTCHatcontract = roundvars[round].GOTCHatcontract.sub(test);\r\n    \r\n    roundownables[round].villages[a].lastcollect = block.number;\r\n    //b\r\n   \r\n    test = (block.number.sub(roundownables[round].villages[b].lastcollect)).mul((roundvars[round].nextVillageId.sub(b)));\r\n    if(roundvars[round].GOTCHatcontract < test ) \r\n    {\r\n     roundvars[round].GOTCHatcontract =  roundvars[round].GOTCHatcontract.add(test);\r\n     roundvars[round].totalsupplyGOTCH = roundvars[round].totalsupplyGOTCH.add(test);\r\n    }   \r\n    roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].add(test);\r\n    roundvars[round].GOTCHatcontract = roundvars[round].GOTCHatcontract.sub(test);\r\n    \r\n    roundownables[round].villages[b].lastcollect = block.number;\r\n    //c\r\n   \r\n    test = (block.number.sub(roundownables[round].villages[c].lastcollect)).mul((roundvars[round].nextVillageId.sub(c)));\r\n    if(roundvars[round].GOTCHatcontract < test ) \r\n    {\r\n     roundvars[round].GOTCHatcontract =  roundvars[round].GOTCHatcontract.add(test);\r\n     roundvars[round].totalsupplyGOTCH = roundvars[round].totalsupplyGOTCH.add(test);\r\n    }   \r\n    roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].add(test);\r\n    roundvars[round].GOTCHatcontract = roundvars[round].GOTCHatcontract.sub(test);\r\n    \r\n    roundownables[round].villages[c].lastcollect = block.number;\r\n    //j\r\n    \r\n    test = (block.number.sub(roundownables[round].villages[j].lastcollect)).mul((roundvars[round].nextVillageId.sub(j)));\r\n    if(roundvars[round].GOTCHatcontract < test ) \r\n    {\r\n     roundvars[round].GOTCHatcontract =  roundvars[round].GOTCHatcontract.add(test);\r\n     roundvars[round].totalsupplyGOTCH = roundvars[round].totalsupplyGOTCH.add(test);\r\n    }   \r\n    roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].add(test);\r\n    roundvars[round].GOTCHatcontract = roundvars[round].GOTCHatcontract.sub(test);\r\n    \r\n    roundownables[round].villages[j].lastcollect = block.number;\r\n    //d\r\n    \r\n    test = (block.number.sub(roundownables[round].villages[d].lastcollect)).mul((roundvars[round].nextVillageId.sub(d)));\r\n    if(roundvars[round].GOTCHatcontract < test ) \r\n    {\r\n     roundvars[round].GOTCHatcontract =  roundvars[round].GOTCHatcontract.add(test);\r\n     roundvars[round].totalsupplyGOTCH = roundvars[round].totalsupplyGOTCH.add(test);\r\n    }   \r\n    roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].add(test);\r\n    roundvars[round].GOTCHatcontract = roundvars[round].GOTCHatcontract.sub(test);\r\n    \r\n    roundownables[round].villages[d].lastcollect = block.number;\r\n    //e\r\n   \r\n    test = (block.number.sub(roundownables[round].villages[e].lastcollect)).mul((roundvars[round].nextVillageId.sub(e)));\r\n    if(roundvars[round].GOTCHatcontract < test ) \r\n    {\r\n     roundvars[round].GOTCHatcontract =  roundvars[round].GOTCHatcontract.add(test);\r\n     roundvars[round].totalsupplyGOTCH = roundvars[round].totalsupplyGOTCH.add(test);\r\n    }   \r\n    roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].add(test);\r\n    roundvars[round].GOTCHatcontract = roundvars[round].GOTCHatcontract.sub(test);\r\n    \r\n    roundownables[round].villages[e].lastcollect = block.number;\r\n    //f\r\n    \r\n    test = (block.number.sub(roundownables[round].villages[f].lastcollect)).mul((roundvars[round].nextVillageId.sub(f)));\r\n    if(roundvars[round].GOTCHatcontract < test ) \r\n    {\r\n     roundvars[round].GOTCHatcontract =  roundvars[round].GOTCHatcontract.add(test);\r\n     roundvars[round].totalsupplyGOTCH = roundvars[round].totalsupplyGOTCH.add(test);\r\n    }   \r\n    roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].add(test);\r\n    roundvars[round].GOTCHatcontract = roundvars[round].GOTCHatcontract.sub(test);\r\n    \r\n    roundownables[round].villages[f].lastcollect = block.number;\r\n    //g\r\n   \r\n    test = (block.number.sub(roundownables[round].villages[g].lastcollect)).mul((roundvars[round].nextVillageId.sub(g)));\r\n    if(roundvars[round].GOTCHatcontract < test ) \r\n    {\r\n     roundvars[round].GOTCHatcontract =  roundvars[round].GOTCHatcontract.add(test);\r\n     roundvars[round].totalsupplyGOTCH = roundvars[round].totalsupplyGOTCH.add(test);\r\n    }   \r\n    roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].add(test);\r\n    roundvars[round].GOTCHatcontract = roundvars[round].GOTCHatcontract.sub(test);\r\n    \r\n    roundownables[round].villages[g].lastcollect = block.number;\r\n    //h\r\n    \r\n    test = (block.number.sub(roundownables[round].villages[h].lastcollect)).mul((roundvars[round].nextVillageId.sub(h)));\r\n    if(roundvars[round].GOTCHatcontract < test ) \r\n    {\r\n     roundvars[round].GOTCHatcontract =  roundvars[round].GOTCHatcontract.add(test);\r\n     roundvars[round].totalsupplyGOTCH = roundvars[round].totalsupplyGOTCH.add(test);\r\n    }   \r\n    roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].add(test);\r\n    roundvars[round].GOTCHatcontract = roundvars[round].GOTCHatcontract.sub(test);\r\n    \r\n    roundownables[round].villages[h].lastcollect = block.number;\r\n    //i\r\n    \r\n    test = (block.number.sub(roundownables[round].villages[i].lastcollect)).mul((roundvars[round].nextVillageId.sub(i)));\r\n    if(roundvars[round].GOTCHatcontract < test ) \r\n    {\r\n     roundvars[round].GOTCHatcontract =  roundvars[round].GOTCHatcontract.add(test);\r\n     roundvars[round].totalsupplyGOTCH = roundvars[round].totalsupplyGOTCH.add(test);\r\n    }   \r\n    roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].add(test);\r\n    roundvars[round].GOTCHatcontract = roundvars[round].GOTCHatcontract.sub(test);\r\n    \r\n    roundownables[round].villages[i].lastcollect = block.number;\r\n\r\n        \r\n}\r\nfunction collecttaxes(uint256 village) public payable returns (uint){// payed transaction\r\n    // \r\n   require(msg.value >= 1 finney);\r\n    if(block.number > roundvars[round].lastblockpayout.add(roundvars[round].blocksbeforenewpay))\r\n    {\r\n    hillpayout();\r\n    }\r\n    \r\n    require(roundownables[round].villages[village].owner == msg.sender);\r\n    require(block.number >  roundownables[round].villages[village].lastcollect);\r\n    uint256 test = (block.number.sub(roundownables[round].villages[village].lastcollect)).mul((roundvars[round].nextVillageId.sub(village)));\r\n    if(roundvars[round].GOTCHatcontract < test ) \r\n    {\r\n     roundvars[round].GOTCHatcontract =  roundvars[round].GOTCHatcontract.add(test);\r\n     roundvars[round].totalsupplyGOTCH = roundvars[round].totalsupplyGOTCH.add(test);\r\n    }   \r\n    roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].add(test);\r\n    roundvars[round].GOTCHatcontract = roundvars[round].GOTCHatcontract.sub(test);\r\n    \r\n    roundownables[round].villages[village].lastcollect = block.number;\r\n    // if contract doesnt have the amount, create new\r\n    return test;\r\n}\r\nfunction sellDOTCH(uint amt) payable public {\r\n    require(msg.value >= 1 finney);\r\n    require(roundownables[round].ERCtradeactive == true);\r\n    require(roundownables[round].GOTCH[this]>= amt.mul(10000));\r\n    require(balances[msg.sender] >=  amt);\r\n    require(amt >= 1);\r\n    balances[this] = balances[this].add(amt);\r\n    balances[msg.sender] = balances[msg.sender].sub(amt);\r\n    emit Transfer(msg.sender,this, amt);\r\n    roundownables[round].GOTCH[this] =  roundownables[round].GOTCH[this].sub(amt.mul(10000));\r\n    roundownables[round].GOTCH[msg.sender] =  roundownables[round].GOTCH[msg.sender].add(amt.mul(10000));\r\n}\r\nfunction buyDOTCH(uint amt) payable public {\r\n    require(msg.value >= 1 finney);\r\n    require(roundownables[round].ERCtradeactive == true);\r\n    require(balances[this]>= amt);\r\n    require(roundownables[round].GOTCH[msg.sender] >= amt.mul(10000));\r\n    require(amt >= 1);\r\n    balances[this] = balances[this].sub(amt);\r\n    balances[msg.sender] = balances[msg.sender].add(amt);\r\n    emit Transfer(this,msg.sender, amt);\r\n   roundownables[round].GOTCH[msg.sender] = roundownables[round].GOTCH[msg.sender].sub(amt.mul(10000));\r\n  roundownables[round].GOTCH[this] = roundownables[round].GOTCH[this].add(amt.mul(10000));\r\n}\r\n//p3d \r\n\r\nfunction buyp3d(uint256 amt) internal{\r\nP3Dcontract_.buy.value(amt)(this);\r\n}\r\nfunction claimdivs() internal{\r\nP3Dcontract_.withdraw();\r\n}\r\nevent onHarvest(\r\n        address customerAddress,\r\n        uint256 amount\r\n    );\r\n\r\nfunction Divs() public payable{\r\n    \r\n    require(msg.sender == roundownables[round].hillowner);\r\n    claimdivs();\r\n    msg.sender.transfer(div);\r\n    emit onHarvest(msg.sender,div);\r\n}\r\nfunction Divsforall() public payable{\r\n    \r\n    require(divsforall = true);\r\n    require(msg.value >= 1 finney);\r\n    div = harvestabledivs();\r\n    require(div > 0);\r\n    claimdivs();\r\n    msg.sender.transfer(div);\r\n    emit onHarvest(msg.sender,div);\r\n}\r\nfunction Expand() public {\r\n    buyp3d(ethforp3dbuy);\r\n    ethforp3dbuy = 0;\r\n}\r\n\r\n//marketplace functions\r\nfunction placeoffer(uint256 dotchamount, uint256 askingpriceinwei) payable public{\r\n    require(dotchamount > 0);\r\n    require(askingpriceinwei > 0);\r\n    require(balances[msg.sender] >=  dotchamount);\r\n    require(msg.value >= 1 finney);\r\n    balances[msg.sender] = balances[msg.sender].sub(dotchamount);\r\n    balances[this] = balances[this].add(dotchamount);\r\n    emit Transfer(msg.sender,this, dotchamount);\r\n    marketplace[nextmarketoffer].placedby = msg.sender;\r\n     marketplace[nextmarketoffer].amountdotch = dotchamount;\r\n      marketplace[nextmarketoffer].wantsthisamtweiperdotch = askingpriceinwei;\r\n      nextmarketoffer++;\r\n}\r\nfunction adddotchtooffer(uint256 ordernumber , uint256 dotchamount) public\r\n{\r\n    require(dotchamount > 0);\r\n    require(msg.sender == marketplace[ordernumber].placedby);\r\n    require(balances[msg.sender] >=  dotchamount);\r\n \r\n    balances[msg.sender] = balances[msg.sender].sub(dotchamount);\r\n    balances[this] = balances[this].add(dotchamount);\r\n    emit Transfer(msg.sender,this, dotchamount);\r\n     marketplace[ordernumber].amountdotch = marketplace[ordernumber].amountdotch.add(dotchamount);\r\n}\r\nfunction removedotchtooffer(uint256 ordernumber , uint256 dotchamount) public\r\n{\r\n    require(dotchamount > 0);\r\n    require(msg.sender == marketplace[ordernumber].placedby);\r\n    require(balances[this] >=  dotchamount);\r\n \r\n    balances[msg.sender] = balances[msg.sender].add(dotchamount);\r\n    balances[this] = balances[this].sub(dotchamount);\r\n    emit Transfer(this,msg.sender, dotchamount);\r\n     marketplace[ordernumber].amountdotch = marketplace[ordernumber].amountdotch.sub(dotchamount);\r\n}\r\nfunction offerchangeprice(uint256 ordernumber ,uint256 price ) public\r\n{\r\n    require(price > 0);\r\n    require(msg.sender == marketplace[ordernumber].placedby);\r\n     marketplace[ordernumber].wantsthisamtweiperdotch = price;\r\n}\r\nfunction takeoffer(uint256 ordernumber ,uint256 amtdotch ) public payable\r\n{\r\n    require(msg.value >= marketplace[ordernumber].wantsthisamtweiperdotch.mul(amtdotch));\r\n    require(amtdotch > 0);\r\n    require(marketplace[ordernumber].amountdotch >= amtdotch);\r\n    require(msg.sender != marketplace[ordernumber].placedby);\r\n    require(balances[this] >=  amtdotch);\r\n     marketplace[ordernumber].amountdotch = marketplace[ordernumber].amountdotch.sub(amtdotch);\r\n     balances[msg.sender] = balances[msg.sender].add(amtdotch);\r\n    balances[this] = balances[this].sub(amtdotch);\r\n    emit Transfer(this,msg.sender, amtdotch);\r\n    emit dotchsale(marketplace[ordernumber].placedby,marketplace[ordernumber].wantsthisamtweiperdotch, msg.sender, amtdotch);\r\n    marketplace[ordernumber].placedby.transfer(marketplace[ordernumber].wantsthisamtweiperdotch.mul(amtdotch));\r\n}\r\n// new round function\r\nfunction startnewround() public {\r\n    require(roundvars[round].ATPO > roundownables[round].roundlength);\r\n    round++;\r\n    roundvars[round].totalsupplyGOTCH = nextroundtotalsupplyGOTCH;\r\n       roundvars[round].GOTCHatcontract = nextroundtotalsupplyGOTCH;\r\n       roundvars[round].solsforhire = nextroundsolsforhire;\r\n       roundvars[round].soldierreplenishrate = nextroundsoldierreplenishrate;\r\n       roundvars[round].solslastupdate = block.number;\r\n       updatesolbuyrate();\r\n       roundvars[round].lastblockpayout = block.number;\r\n       roundownables[round].hillowner = msg.sender;\r\n       roundvars[round].nextpayamount = roundvars[round-1].nextpayamount;\r\n       roundvars[round].nextowneramount = roundvars[round-1].nextowneramount;\r\n       roundvars[round].previousethamount = roundvars[round-1].previousethamount;\r\n       roundvars[round].blocksbeforenewpay = nextroundblocksbeforenewpay;\r\n       roundownables[round].ERCtradeactive = nextroundERCtradeactive;\r\n       roundvars[round].bpamount = 30000;\r\n    \r\n}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextroundGOTCHatcontract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divsforall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setdivsforall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"sellDOTCH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lookup\",\"type\":\"address\"}],\"name\":\"soldiersinfo\",\"outputs\":[{\"name\":\"soldiers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reg\",\"type\":\"address\"}],\"name\":\"preregvills\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ordernumber\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"offerchangeprice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextroundtotalsupplyGOTCH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"buyDOTCH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cheapredeemvillage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"batchcreatevillage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Redeemable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextmarketoffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextroundsolsforhire\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"changesoldierreplenishrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dotchamount\",\"type\":\"uint256\"},{\"name\":\"askingpriceinwei\",\"type\":\"uint256\"}],\"name\":\"placeoffer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buysoldiers\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createvillage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"},{\"name\":\"c\",\"type\":\"uint256\"},{\"name\":\"d\",\"type\":\"uint256\"},{\"name\":\"e\",\"type\":\"uint256\"},{\"name\":\"f\",\"type\":\"uint256\"},{\"name\":\"g\",\"type\":\"uint256\"},{\"name\":\"h\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"j\",\"type\":\"uint256\"}],\"name\":\"batchcollecttaxes\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blockcount\",\"type\":\"uint256\"}],\"name\":\"changebeginnerprotection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lookup\",\"type\":\"uint256\"}],\"name\":\"villageinfo\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"soldiersdefending\",\"type\":\"uint256\"},{\"name\":\"lastcollect\",\"type\":\"uint256\"},{\"name\":\"beginnersprotection\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestabledivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Divsforall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundvars\",\"outputs\":[{\"name\":\"nextVillageId\",\"type\":\"uint256\"},{\"name\":\"bpamount\",\"type\":\"uint256\"},{\"name\":\"totalsupplyGOTCH\",\"type\":\"uint256\"},{\"name\":\"GOTCHatcontract\",\"type\":\"uint256\"},{\"name\":\"previousethamount\",\"type\":\"uint256\"},{\"name\":\"solsforhire\",\"type\":\"uint256\"},{\"name\":\"solslastupdate\",\"type\":\"uint256\"},{\"name\":\"soldierreplenishrate\",\"type\":\"uint256\"},{\"name\":\"soldierprice\",\"type\":\"uint256\"},{\"name\":\"lastblockpayout\",\"type\":\"uint256\"},{\"name\":\"blocksbeforenewpay\",\"type\":\"uint256\"},{\"name\":\"ATPO\",\"type\":\"uint256\"},{\"name\":\"nextpayamount\",\"type\":\"uint256\"},{\"name\":\"nextowneramount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextroundlength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethforp3dbuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amtsoldiers\",\"type\":\"uint256\"}],\"name\":\"attackhill\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"village\",\"type\":\"uint256\"},{\"name\":\"amtsoldiers\",\"type\":\"uint256\"}],\"name\":\"support\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startnewround\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Expand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"changetradestatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ordernumber\",\"type\":\"uint256\"},{\"name\":\"amtdotch\",\"type\":\"uint256\"}],\"name\":\"takeoffer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ordernumber\",\"type\":\"uint256\"},{\"name\":\"dotchamount\",\"type\":\"uint256\"}],\"name\":\"removedotchtooffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amtsoldiers\",\"type\":\"uint256\"}],\"name\":\"supporthill\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextroundsoldierreplenishrate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lookup\",\"type\":\"address\"}],\"name\":\"playerinfo\",\"outputs\":[{\"name\":\"redeemedvils\",\"type\":\"uint256\"},{\"name\":\"redeemablevils\",\"type\":\"uint256\"},{\"name\":\"soldiers\",\"type\":\"uint256\"},{\"name\":\"GOTCH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"village\",\"type\":\"uint256\"}],\"name\":\"collecttaxes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lookup\",\"type\":\"address\"}],\"name\":\"gotchinfo\",\"outputs\":[{\"name\":\"Gold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundownables\",\"outputs\":[{\"name\":\"hillowner\",\"type\":\"address\"},{\"name\":\"soldiersdefendinghill\",\"type\":\"uint256\"},{\"name\":\"ERCtradeactive\",\"type\":\"bool\"},{\"name\":\"roundlength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"village\",\"type\":\"uint256\"}],\"name\":\"renewbeginnerprotection\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketplace\",\"outputs\":[{\"name\":\"placedby\",\"type\":\"address\"},{\"name\":\"amountdotch\",\"type\":\"uint256\"},{\"name\":\"wantsthisamtweiperdotch\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"village\",\"type\":\"uint256\"},{\"name\":\"amtsoldiers\",\"type\":\"uint256\"}],\"name\":\"attack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Divs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ordernumber\",\"type\":\"uint256\"},{\"name\":\"dotchamount\",\"type\":\"uint256\"}],\"name\":\"adddotchtooffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lookup\",\"type\":\"address\"}],\"name\":\"redeemablevilsinfo\",\"outputs\":[{\"name\":\"redeemedvils\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextroundblocksbeforenewpay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextroundERCtradeactive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"villageint\",\"type\":\"uint256\"}],\"name\":\"villtakeover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"hilltakeover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"attacker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pointsattacker\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pointsdefender\",\"type\":\"uint256\"}],\"name\":\"battle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dotchsale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Game","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://976828163af9e0335a750972a0474122db1986ce6bbf7a2f46beb3c38aeefa4b"}]}