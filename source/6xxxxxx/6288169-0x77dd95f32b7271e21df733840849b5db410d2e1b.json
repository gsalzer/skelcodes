{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\r\n  // 1 wei will give you 1 unit, or 0.001 TOK.\r\n  uint256 public rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @param _rate Number of token units a buyer gets per wei\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    token.safeTransfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\validation\\TimedCrowdsale.sol\r\n\r\n/**\r\n * @title TimedCrowdsale\r\n * @dev Crowdsale accepting contributions only within a time frame.\r\n */\r\ncontract TimedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public openingTime;\r\n  uint256 public closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param _openingTime Crowdsale opening time\r\n   * @param _closingTime Crowdsale closing time\r\n   */\r\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_openingTime >= block.timestamp);\r\n    require(_closingTime >= _openingTime);\r\n\r\n    openingTime = _openingTime;\r\n    closingTime = _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp > closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n    onlyWhileOpen\r\n  {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\distribution\\FinalizableCrowdsale.sol\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is TimedCrowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasClosed());\r\n\r\n    finalization();\r\n    emit Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\emission\\MintedCrowdsale.sol\r\n\r\n/**\r\n * @title MintedCrowdsale\r\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\r\n * Token ownership should be transferred to MintedCrowdsale for minting.\r\n */\r\ncontract MintedCrowdsale is Crowdsale {\r\n\r\n  /**\r\n   * @dev Overrides delivery by minting tokens upon purchase.\r\n   * @param _beneficiary Token purchaser\r\n   * @param _tokenAmount Number of tokens to be minted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\CappedToken.sol\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract CappedToken is MintableToken {\r\n\r\n  uint256 public cap;\r\n\r\n  constructor(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\math\\Math.sol\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\payment\\Escrow.sol\r\n\r\n/**\r\n * @title Escrow\r\n * @dev Base escrow contract, holds funds destinated to a payee until they\r\n * withdraw them. The contract that uses the escrow as its payment method\r\n * should be its owner, and provide public methods redirecting to the escrow's\r\n * deposit and withdraw.\r\n */\r\ncontract Escrow is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  event Deposited(address indexed payee, uint256 weiAmount);\r\n  event Withdrawn(address indexed payee, uint256 weiAmount);\r\n\r\n  mapping(address => uint256) private deposits;\r\n\r\n  function depositsOf(address _payee) public view returns (uint256) {\r\n    return deposits[_payee];\r\n  }\r\n\r\n  /**\r\n  * @dev Stores the sent amount as credit to be withdrawn.\r\n  * @param _payee The destination address of the funds.\r\n  */\r\n  function deposit(address _payee) public onlyOwner payable {\r\n    uint256 amount = msg.value;\r\n    deposits[_payee] = deposits[_payee].add(amount);\r\n\r\n    emit Deposited(_payee, amount);\r\n  }\r\n\r\n  /**\r\n  * @dev Withdraw accumulated balance for a payee.\r\n  * @param _payee The address whose funds will be withdrawn and transferred to.\r\n  */\r\n  function withdraw(address _payee) public onlyOwner {\r\n    uint256 payment = deposits[_payee];\r\n    assert(address(this).balance >= payment);\r\n\r\n    deposits[_payee] = 0;\r\n\r\n    _payee.transfer(payment);\r\n\r\n    emit Withdrawn(_payee, payment);\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\payment\\ConditionalEscrow.sol\r\n\r\n/**\r\n * @title ConditionalEscrow\r\n * @dev Base abstract escrow to only allow withdrawal if a condition is met.\r\n */\r\ncontract ConditionalEscrow is Escrow {\r\n  /**\r\n  * @dev Returns whether an address is allowed to withdraw their funds. To be\r\n  * implemented by derived contracts.\r\n  * @param _payee The destination address of the funds.\r\n  */\r\n  function withdrawalAllowed(address _payee) public view returns (bool);\r\n\r\n  function withdraw(address _payee) public {\r\n    require(withdrawalAllowed(_payee));\r\n    super.withdraw(_payee);\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\payment\\RefundEscrow.sol\r\n\r\n/**\r\n * @title RefundEscrow\r\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple parties.\r\n * The contract owner may close the deposit period, and allow for either withdrawal\r\n * by the beneficiary, or refunds to the depositors.\r\n */\r\ncontract RefundEscrow is Ownable, ConditionalEscrow {\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n\r\n  State public state;\r\n  address public beneficiary;\r\n\r\n  /**\r\n   * @dev Constructor.\r\n   * @param _beneficiary The beneficiary of the deposits.\r\n   */\r\n  constructor(address _beneficiary) public {\r\n    require(_beneficiary != address(0));\r\n    beneficiary = _beneficiary;\r\n    state = State.Active;\r\n  }\r\n\r\n  /**\r\n   * @dev Stores funds that may later be refunded.\r\n   * @param _refundee The address funds will be sent to if a refund occurs.\r\n   */\r\n  function deposit(address _refundee) public payable {\r\n    require(state == State.Active);\r\n    super.deposit(_refundee);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows for the beneficiary to withdraw their funds, rejecting\r\n   * further deposits.\r\n   */\r\n  function close() public onlyOwner {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    emit Closed();\r\n  }\r\n\r\n  /**\r\n   * @dev Allows for refunds to take place, rejecting further deposits.\r\n   */\r\n  function enableRefunds() public onlyOwner {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    emit RefundsEnabled();\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraws the beneficiary's funds.\r\n   */\r\n  function beneficiaryWithdraw() public {\r\n    require(state == State.Closed);\r\n    beneficiary.transfer(address(this).balance);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether refundees can withdraw their deposits (be refunded).\r\n   */\r\n  function withdrawalAllowed(address _payee) public view returns (bool) {\r\n    return state == State.Refunding;\r\n  }\r\n}\r\n\r\n// File: contracts\\ClinicAllRefundEscrow.sol\r\n\r\n/**\r\n * @title ClinicAllRefundEscrow\r\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple parties.\r\n * The contract owner may close the deposit period, and allow for either withdrawal\r\n * by the beneficiary, or refunds to the depositors.\r\n */\r\ncontract ClinicAllRefundEscrow is RefundEscrow {\r\n  using Math for uint256;\r\n\r\n  struct RefundeeRecord {\r\n    bool isRefunded;\r\n    uint256 index;\r\n  }\r\n\r\n  mapping(address => RefundeeRecord) public refundees;\r\n  address[] internal refundeesList;\r\n\r\n  /**\r\n   * @dev Constructor.\r\n   * @param _beneficiary The beneficiary of the deposits.\r\n   */\r\n  constructor(address _beneficiary)\r\n  RefundEscrow(_beneficiary)\r\n  public {\r\n  }\r\n\r\n  /**\r\n   * @dev Stores funds that may later be refunded.\r\n   * @param _refundee The address funds will be sent to if a refund occurs.\r\n   */\r\n  function deposit(address _refundee) public payable {\r\n    require(state == State.Active, \"Funds deposition is possible only in the Active state.\");\r\n    super.deposit(_refundee);\r\n\r\n    RefundeeRecord storage _data = refundees[_refundee];\r\n    _data.isRefunded = false;\r\n\r\n    if (_data.index == uint256(0)) {\r\n      refundeesList.push(_refundee);\r\n      _data.index = refundeesList.length.sub(1);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Allows for the beneficiary to withdraw their funds, rejecting\r\n  * further deposits.\r\n  */\r\n  function close() public onlyOwner {\r\n    super.close();\r\n    super.beneficiaryWithdraw();\r\n  }\r\n\r\n  function withdraw(address _payee) public onlyOwner {\r\n    require(state == State.Refunding, \"Funds withdrawal is possible only in the Refunding state.\");\r\n    require(depositsOf(_payee) > 0, \"An investor should have non-negative deposit for withdrawal.\");\r\n\r\n    RefundeeRecord storage _data = refundees[_payee];\r\n    require(_data.isRefunded == false, \"An investor should not be refunded.\");\r\n    super.withdraw(_payee);\r\n    _data.isRefunded = true;\r\n\r\n    removeRefundeeByIndex(_data.index);\r\n  }\r\n\r\n  /**\r\n  * @dev Remove refundee referenced index from the internal list\r\n  * @param _indexToDelete An index in an array for deletion\r\n  */\r\n  function removeRefundeeByIndex(uint256 _indexToDelete) private {\r\n    if ((refundeesList.length > 0) && (_indexToDelete < refundeesList.length)) {\r\n      uint256 _lastIndex = refundeesList.length.sub(1);\r\n      refundeesList[_indexToDelete] = refundeesList[_lastIndex];\r\n      refundeesList.length--;\r\n    }\r\n  }\r\n  /**\r\n  * @dev Get refundee list length\r\n  */\r\n  function refundeesListLength() public onlyOwner view returns (uint256) {\r\n    return refundeesList.length;\r\n  }\r\n\r\n  /**\r\n  * @dev Auto refund\r\n  * @param _txFee The cost of executing refund code\r\n  */\r\n  function withdrawChunk(uint256 _txFee, uint256 _chunkLength) public onlyOwner returns (uint256, address[]) {\r\n    require(state == State.Refunding, \"Funds withdrawal is possible only in the Refunding state.\");\r\n\r\n    uint256 _refundeesCount = refundeesList.length;\r\n    require(_chunkLength >= _refundeesCount);\r\n    require(_txFee > 0, \"Transaction fee should be above zero.\");\r\n    require(_refundeesCount > 0, \"List of investors should not be empty.\");\r\n    uint256 _weiRefunded = 0;\r\n    require(address(this).balance > (_chunkLength.mul(_txFee)), \"Account's ballance should allow to pay all tx fees.\");\r\n    address[] memory _refundeesListCopy = new address[](_chunkLength);\r\n\r\n    uint256 i;\r\n    for (i = 0; i < _chunkLength; i++) {\r\n      address _refundee = refundeesList[i];\r\n      RefundeeRecord storage _data = refundees[_refundee];\r\n      if (_data.isRefunded == false) {\r\n        if (depositsOf(_refundee) > _txFee) {\r\n          uint256 _deposit = depositsOf(_refundee);\r\n          if (_deposit > _txFee) {\r\n            _weiRefunded = _weiRefunded.add(_deposit);\r\n            uint256 _paymentWithoutTxFee = _deposit.sub(_txFee);\r\n            _refundee.transfer(_paymentWithoutTxFee);\r\n            emit Withdrawn(_refundee, _paymentWithoutTxFee);\r\n            _data.isRefunded = true;\r\n            _refundeesListCopy[i] = _refundee;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < _chunkLength; i++) {\r\n      if (address(0) != _refundeesListCopy[i]) {\r\n        RefundeeRecord storage _dataCleanup = refundees[_refundeesListCopy[i]];\r\n        require(_dataCleanup.isRefunded == true, \"Investors in this list should be refunded.\");\r\n        removeRefundeeByIndex(_dataCleanup.index);\r\n      }\r\n    }\r\n\r\n    return (_weiRefunded, _refundeesListCopy);\r\n  }\r\n\r\n  /**\r\n  * @dev Auto refund\r\n  * @param _txFee The cost of executing refund code\r\n  */\r\n  function withdrawEverything(uint256 _txFee) public onlyOwner returns (uint256, address[]) {\r\n    require(state == State.Refunding, \"Funds withdrawal is possible only in the Refunding state.\");\r\n    return withdrawChunk(_txFee, refundeesList.length);\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\lifecycle\\TokenDestructible.sol\r\n\r\n/**\r\n * @title TokenDestructible:\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev Base contract that can be destroyed by owner. All funds in contract including\r\n * listed tokens will be sent to the owner.\r\n */\r\ncontract TokenDestructible is Ownable {\r\n\r\n  constructor() public payable { }\r\n\r\n  /**\r\n   * @notice Terminate contract and refund to owner\r\n   * @param tokens List of addresses of ERC20 or ERC20Basic token contracts to\r\n   refund.\r\n   * @notice The called token contracts could try to re-enter this contract. Only\r\n   supply token contracts you trust.\r\n   */\r\n  function destroy(address[] tokens) onlyOwner public {\r\n\r\n    // Transfer tokens to owner\r\n    for (uint256 i = 0; i < tokens.length; i++) {\r\n      ERC20Basic token = ERC20Basic(tokens[i]);\r\n      uint256 balance = token.balanceOf(this);\r\n      token.transfer(owner, balance);\r\n    }\r\n\r\n    // Transfer Eth to owner and terminate contract\r\n    selfdestruct(owner);\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\DetailedERC20.sol\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts\\ClinicAllToken.sol\r\n\r\ncontract ClinicAllToken is MintableToken, DetailedERC20, CappedToken, PausableToken, BurnableToken, TokenDestructible {\r\n  constructor\r\n  (\r\n    string _name,\r\n    string _symbol,\r\n    uint8 _decimals,\r\n    uint256 _cap\r\n  )\r\n  DetailedERC20(_name, _symbol, _decimals)\r\n  CappedToken(_cap)\r\n  public\r\n  {\r\n\r\n  }\r\n\r\n  /*/\r\n  *  Refund event when ICO didn't pass soft cap and we refund ETH to investors + burn ERC-20 tokens from investors balances\r\n  /*/\r\n  function burnAfterRefund(address _who) public onlyOwner {\r\n    uint256 _value = balances[_who];\r\n    _burn(_who, _value);\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\rbac\\Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n * See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\rbac\\RBAC.sol\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * Supports unlimited numbers of roles and addresses.\r\n * See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n * for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n * to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    view\r\n    public\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n// File: contracts\\Managed.sol\r\n\r\n/**\r\n * @title Managed\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Managed is Ownable, RBAC {\r\n  string public constant ROLE_MANAGER = \"manager\";\r\n\r\n  /**\r\n  * @dev Throws if operator is not whitelisted.\r\n  */\r\n  modifier onlyManager() {\r\n    checkRole(msg.sender, ROLE_MANAGER);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev set an address as a manager\r\n  * @param _operator address\r\n  * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n  */\r\n  function setManager(address _operator) public onlyOwner {\r\n    addRole(_operator, ROLE_MANAGER);\r\n  }\r\n}\r\n\r\n// File: contracts\\Limited.sol\r\n\r\n/**\r\n * @title LimitedCrowdsale\r\n * @dev Crowdsale in which only limited number of tokens can be bought.\r\n */\r\ncontract Limited is Managed {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) public limitsList;\r\n\r\n  /**\r\n  * @dev Reverts if beneficiary has no limit. Can be used when extending this contract.\r\n  */\r\n  modifier isLimited(address _payee) {\r\n    require(limitsList[_payee] > 0, \"An investor is limited if it has a limit.\");\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Reverts if beneficiary want to buy more tickets than limit allows. Can be used when extending this contract.\r\n  */\r\n  modifier doesNotExceedLimit(address _payee, uint256 _tokenAmount, uint256 _tokenBalance) {\r\n    require(_tokenBalance.add(_tokenAmount) <= getLimit(_payee), \"An investor should not exceed its limit on buying.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns limits for _payee.\r\n  * @param _payee Address to get token limits\r\n  */\r\n  function getLimit(address _payee)\r\n  public view returns (uint256)\r\n  {\r\n    return limitsList[_payee];\r\n  }\r\n\r\n  /**\r\n  * @dev Adds limits to addresses.\r\n  * @param _payees Addresses to set limit\r\n  * @param _limits Limit values to set to addresses\r\n  */\r\n  function addAddressesLimits(address[] _payees, uint256[] _limits) public\r\n  onlyManager\r\n  {\r\n    require(_payees.length == _limits.length, \"Array sizes should be equal.\");\r\n    for (uint256 i = 0; i < _payees.length; i++) {\r\n      addLimit(_payees[i], _limits[i]);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Adds limit to address.\r\n  * @param _payee Address to set limit\r\n  * @param _limit Limit value to set to address\r\n  */\r\n  function addLimit(address _payee, uint256 _limit) public\r\n  onlyManager\r\n  {\r\n    limitsList[_payee] = _limit;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Removes single address-limit record.\r\n  * @param _payee Address to be removed\r\n  */\r\n  function removeLimit(address _payee) external\r\n  onlyManager\r\n  {\r\n    limitsList[_payee] = 0;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\access\\Whitelist.sol\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable, RBAC {\r\n  string public constant ROLE_WHITELISTED = \"whitelist\";\r\n\r\n  /**\r\n   * @dev Throws if operator is not whitelisted.\r\n   * @param _operator address\r\n   */\r\n  modifier onlyIfWhitelisted(address _operator) {\r\n    checkRole(_operator, ROLE_WHITELISTED);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n  function addAddressToWhitelist(address _operator)\r\n    onlyOwner\r\n    public\r\n  {\r\n    addRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address is in whitelist\r\n   */\r\n  function whitelist(address _operator)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was added to the whitelist,\r\n   * false if all addresses were already in the whitelist\r\n   */\r\n  function addAddressesToWhitelist(address[] _operators)\r\n    onlyOwner\r\n    public\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      addAddressToWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was removed from the whitelist,\r\n   * false if the address wasn't in the whitelist in the first place\r\n   */\r\n  function removeAddressFromWhitelist(address _operator)\r\n    onlyOwner\r\n    public\r\n  {\r\n    removeRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was removed from the whitelist,\r\n   * false if all addresses weren't in the whitelist in the first place\r\n   */\r\n  function removeAddressesFromWhitelist(address[] _operators)\r\n    onlyOwner\r\n    public\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      removeAddressFromWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\ManagedWhitelist.sol\r\n\r\n/**\r\n * @title ManagedWhitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract ManagedWhitelist is Managed, Whitelist {\r\n  /**\r\n  * @dev add an address to the whitelist\r\n  * @param _operator address\r\n  * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n  */\r\n  function addAddressToWhitelist(address _operator) public onlyManager {\r\n    addRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n  * @dev add addresses to the whitelist\r\n  * @param _operators addresses\r\n  * @return true if at least one address was added to the whitelist,\r\n  * false if all addresses were already in the whitelist\r\n  */\r\n  function addAddressesToWhitelist(address[] _operators) public onlyManager {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      addAddressToWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev remove an address from the whitelist\r\n  * @param _operator address\r\n  * @return true if the address was removed from the whitelist,\r\n  * false if the address wasn't in the whitelist in the first place\r\n  */\r\n  function removeAddressFromWhitelist(address _operator) public onlyManager {\r\n    removeRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n  * @dev remove addresses from the whitelist\r\n  * @param _operators addresses\r\n  * @return true if at least one address was removed from the whitelist,\r\n  * false if all addresses weren't in the whitelist in the first place\r\n  */\r\n  function removeAddressesFromWhitelist(address[] _operators) public onlyManager {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      removeAddressFromWhitelist(_operators[i]);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts\\ClinicAllCrowdsale.sol\r\n\r\n/// @title ClinicAll crowdsale contract\r\n/// @dev  ClinicAll crowdsale contract\r\ncontract ClinicAllCrowdsale is Crowdsale, FinalizableCrowdsale, MintedCrowdsale, ManagedWhitelist, Limited {\r\n  constructor\r\n  (\r\n    uint256 _tokenLimitSupply,\r\n    uint256 _rate,\r\n    address _wallet,\r\n    ERC20 _token,\r\n    uint256 _openingTime,\r\n    uint256 _closingTime,\r\n    uint256 _discountTokenAmount,\r\n    uint256 _discountTokenPercent,\r\n    uint256 _privateSaleClosingTime,\r\n    uint256 _softCapLimit,\r\n    ClinicAllRefundEscrow _vault,\r\n    uint256 _buyLimitSupplyMin,\r\n    uint256 _buyLimitSupplyMax\r\n  )\r\n  Crowdsale(_rate, _wallet, _token)\r\n  TimedCrowdsale(_openingTime, _closingTime)\r\n  public\r\n  {\r\n    tokenSupplyLimit = _tokenLimitSupply;\r\n    discountTokenAmount = _discountTokenAmount;\r\n    discountTokenPercent = _discountTokenPercent;\r\n    privateSaleClosingTime = _privateSaleClosingTime;\r\n    softCapLimit = _softCapLimit;\r\n    vault = _vault;\r\n    buyLimitSupplyMin = _buyLimitSupplyMin;\r\n    buyLimitSupplyMax = _buyLimitSupplyMax;\r\n  }\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // refund vault used to hold funds while crowdsale is running\r\n  ClinicAllRefundEscrow public vault;\r\n\r\n  /*/\r\n  *  Properties, constants\r\n  /*/\r\n  // Limit of tokens for supply during ICO public sale\r\n  uint256 public tokenSupplyLimit;\r\n  // Limit of tokens with discount on current contract\r\n  uint256 public discountTokenAmount;\r\n  // Percent value for discount tokens\r\n  uint256 public discountTokenPercent;\r\n  // Time when we finish private sale\r\n  uint256 public privateSaleClosingTime;\r\n  // Minimum amount of funds to be raised in weis\r\n  uint256 public softCapLimit;\r\n  // Min buy limit for each investor\r\n  uint256 public buyLimitSupplyMin;\r\n  // Max buy limit for each investor\r\n  uint256 public buyLimitSupplyMax;\r\n\r\n  // Public functions\r\n\r\n  /*/\r\n  *  @dev CrowdSale manager is able to change rate value during ICO\r\n  *  @param _rate wei to CHT tokens exchange rate\r\n  */\r\n  function updateRate(uint256 _rate) public\r\n  onlyManager\r\n  {\r\n    require(_rate != 0, \"Exchange rate should not be 0.\");\r\n    rate = _rate;\r\n  }\r\n\r\n  /*/\r\n  *  @dev CrowdSale manager is able to change min and max buy limit for investors during ICO\r\n  *  @param _min Minimal amount of tokens that could be bought\r\n  *  @param _max Maximum amount of tokens that could be bought\r\n  */\r\n  function updateBuyLimitRange(uint256 _min, uint256 _max) public\r\n  onlyOwner\r\n  {\r\n    require(_min != 0, \"Minimal buy limit should not be 0.\");\r\n    require(_max != 0, \"Maximal buy limit should not be 0.\");\r\n    require(_max > _min, \"Maximal buy limit should be greater than minimal buy limit.\");\r\n    buyLimitSupplyMin = _min;\r\n    buyLimitSupplyMax = _max;\r\n  }\r\n\r\n  /**\r\n  * @dev Investors can claim refunds here if crowdsale is unsuccessful\r\n  */\r\n  function claimRefund() public {\r\n    require(isFinalized, \"Claim refunds is only possible if the ICO is finalized.\");\r\n    require(!goalReached(), \"Claim refunds is only possible if the soft cap goal has not been reached.\");\r\n    uint256 deposit = vault.depositsOf(msg.sender);\r\n    vault.withdraw(msg.sender);\r\n    weiRaised = weiRaised.sub(deposit);\r\n    ClinicAllToken(token).burnAfterRefund(msg.sender);\r\n  }\r\n\r\n  /**\r\n  @dev Owner can claim full refund if a crowdsale is unsuccessful\r\n  @param _txFee Transaction fee that will be deducted from an invested sum\r\n  */\r\n  function claimRefundChunk(uint256 _txFee, uint256 _chunkLength) public onlyOwner {\r\n    require(isFinalized, \"Claim refunds is only possible if the ICO is finalized.\");\r\n    require(!goalReached(), \"Claim refunds is only possible if the soft cap goal has not been reached.\");\r\n    uint256 _weiRefunded;\r\n    address[] memory _refundeesList;\r\n    (_weiRefunded, _refundeesList) = vault.withdrawChunk(_txFee, _chunkLength);\r\n    weiRaised = weiRaised.sub(_weiRefunded);\r\n    for (uint256 i = 0; i < _refundeesList.length; i++) {\r\n      ClinicAllToken(token).burnAfterRefund(_refundeesList[i]);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Get refundee list length\r\n  */\r\n  function refundeesListLength() public onlyOwner view returns (uint256) {\r\n    return vault.refundeesListLength();\r\n  }\r\n\r\n  /**\r\n  * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n  * @return Whether crowdsale period has elapsed\r\n  */\r\n  function hasClosed() public view returns (bool) {\r\n    return ((block.timestamp > closingTime) || tokenSupplyLimit <= token.totalSupply());\r\n  }\r\n\r\n  /**\r\n  * @dev Checks whether funding goal was reached.\r\n  * @return Whether funding goal was reached\r\n  */\r\n  function goalReached() public view returns (bool) {\r\n    return token.totalSupply() >= softCapLimit;\r\n  }\r\n\r\n  /**\r\n  * @dev Checks rest of tokens supply.\r\n  */\r\n  function supplyRest() public view returns (uint256) {\r\n    return (tokenSupplyLimit.sub(token.totalSupply()));\r\n  }\r\n\r\n  //Private functions\r\n\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n  internal\r\n  doesNotExceedLimit(_beneficiary, _tokenAmount, token.balanceOf(_beneficiary))\r\n  {\r\n    super._processPurchase(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n  internal\r\n  onlyIfWhitelisted(_beneficiary)\r\n  isLimited(_beneficiary)\r\n  {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    uint256 tokens = _getTokenAmount(_weiAmount);\r\n    require(tokens.add(token.totalSupply()) <= tokenSupplyLimit, \"Total amount fo sold tokens should not exceed the total supply limit.\");\r\n    require(tokens >= buyLimitSupplyMin, \"An investor can buy an amount of tokens only above the minimal limit.\");\r\n    require(tokens.add(token.balanceOf(_beneficiary)) <= buyLimitSupplyMax, \"An investor cannot buy tokens above the maximal limit.\");\r\n  }\r\n\r\n  /**\r\n   * @dev Te way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount with discount or not\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount)\r\n  internal view returns (uint256)\r\n  {\r\n    if (isDiscount()) {\r\n      return _getTokensWithDiscount(_weiAmount);\r\n    }\r\n    return _weiAmount.mul(rate);\r\n  }\r\n  /**\r\n   * @dev Public method where ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   */\r\n  function getTokenAmount(uint256 _weiAmount)\r\n  public view returns (uint256)\r\n  {\r\n    return _getTokenAmount(_weiAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev iternal method returns total tokens amount including discount\r\n   */\r\n  function _getTokensWithDiscount(uint256 _weiAmount)\r\n  internal view returns (uint256)\r\n  {\r\n    uint256 tokens = 0;\r\n    uint256 restOfDiscountTokens = discountTokenAmount.sub(token.totalSupply());\r\n    uint256 discountTokensMax = _getDiscountTokenAmount(_weiAmount);\r\n    if (restOfDiscountTokens < discountTokensMax) {\r\n      uint256 discountTokens = restOfDiscountTokens;\r\n      //get rest of WEI\r\n      uint256 _rate = _getDiscountRate();\r\n      uint256 _discointWeiAmount = discountTokens.div(_rate);\r\n      uint256 _restOfWeiAmount = _weiAmount.sub(_discointWeiAmount);\r\n      uint256 normalTokens = _restOfWeiAmount.mul(rate);\r\n      tokens = discountTokens.add(normalTokens);\r\n    } else {\r\n      tokens = discountTokensMax;\r\n    }\r\n\r\n    return tokens;\r\n  }\r\n\r\n  /**\r\n   * @dev iternal method returns discount tokens amount\r\n   * @param _weiAmount An amount of ETH that should be converted to an amount of CHT tokens\r\n   */\r\n  function _getDiscountTokenAmount(uint256 _weiAmount)\r\n  internal view returns (uint256)\r\n  {\r\n    require(_weiAmount != 0, \"It should be possible to buy tokens only by providing non zero ETH.\");\r\n    uint256 _rate = _getDiscountRate();\r\n    return _weiAmount.mul(_rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the discount rate value\r\n   */\r\n  function _getDiscountRate()\r\n  internal view returns (uint256)\r\n  {\r\n    require(isDiscount(), \"Getting discount rate should be possible only below the discount tokens limit.\");\r\n    return rate.add(rate.mul(discountTokenPercent).div(100));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the exchange rate value\r\n   */\r\n  function getRate()\r\n  public view returns (uint256)\r\n  {\r\n    if (isDiscount()) {\r\n      return _getDiscountRate();\r\n    }\r\n\r\n    return rate;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the status if the ICO's private sale has closed or not\r\n   */\r\n  function isDiscount()\r\n  public view returns (bool)\r\n  {\r\n    return (privateSaleClosingTime >= block.timestamp && token.totalSupply() < discountTokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal method where owner transfers part of tokens to reserve\r\n   */\r\n\r\n  function transferTokensToReserve(address _beneficiary) private\r\n  {\r\n    require(tokenSupplyLimit < CappedToken(token).cap(), \"Token's supply limit should be less that token' cap limit.\");\r\n    // calculate token amount to be created\r\n    uint256 _tokenCap = CappedToken(token).cap();\r\n    uint256 tokens = _tokenCap.sub(tokenSupplyLimit);\r\n\r\n    _deliverTokens(_beneficiary, tokens);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal method where owner transfers part of tokens to reserve and finish minting\r\n   */\r\n  function finalization() internal {\r\n    if (goalReached()) {\r\n      transferTokensToReserve(wallet);\r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n    MintableToken(token).finishMinting();\r\n    super.finalization();\r\n  }\r\n\r\n  /**\r\n  * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\r\n  */\r\n  function _forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundeesListLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"}],\"name\":\"withdrawalAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txFee\",\"type\":\"uint256\"}],\"name\":\"withdrawEverything\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"beneficiaryWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"}],\"name\":\"depositsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundees\",\"outputs\":[{\"name\":\"isRefunded\",\"type\":\"bool\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refundee\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txFee\",\"type\":\"uint256\"},{\"name\":\"_chunkLength\",\"type\":\"uint256\"}],\"name\":\"withdrawChunk\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ClinicAllRefundEscrow","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000784fcf836ea70faa528fd5fcc3f77e67dbfbf354","Library":"","SwarmSource":"bzzr://4e1d0fd322ec9d642599c4b89a23ed9ce77b32c41a408545e741ee46b901b551"}]}