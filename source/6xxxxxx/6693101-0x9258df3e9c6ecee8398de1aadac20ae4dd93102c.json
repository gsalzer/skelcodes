{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract AerumCrowdsaleInterface {\r\n    uint256 public tokensSold;\r\n    uint256 public usdRaised;\r\n    uint256 public weiRaised;\r\n}\r\n\r\n/**\r\n * @title Aerum crowdsale statistics contract\r\n */\r\ncontract AerumCrowdsaleStatistics is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev crowdsale Aerum crowdsale contract\r\n     * @dev offchainTokensSold Off-chain tokens sold\r\n     * @dev offchainUsdRaised Off-chain USD raised\r\n     * @dev offchainWeiRaised Off-chain wei raised\r\n     */\r\n    AerumCrowdsaleInterface public crowdsale;\r\n    uint256 public offchainTokensSold;\r\n    uint256 public offchainUsdRaised;\r\n    uint256 public offchainWeiRaised;\r\n\r\n    /**\r\n     * @param _crowdsale Aerum crowdsale contract\r\n     * @param _offchainTokensSold Off-chain tokens sold\r\n     * @param _offchainUsdRaised Off-chain USD raised\r\n     * @param _offchainWeiRaised Off-chain wei raised\r\n     */\r\n    constructor(\r\n        AerumCrowdsaleInterface _crowdsale,\r\n        uint256 _offchainTokensSold,\r\n        uint256 _offchainUsdRaised,\r\n        uint256 _offchainWeiRaised)\r\n    public {\r\n        require(_crowdsale != address(0));\r\n\r\n        crowdsale = _crowdsale;\r\n        offchainTokensSold = _offchainTokensSold;\r\n        offchainUsdRaised = _offchainUsdRaised;\r\n        offchainWeiRaised = _offchainWeiRaised;\r\n    }\r\n\r\n    function setOffchainTokensSold(uint256 _tokens) external onlyOwner {\r\n        offchainTokensSold = _tokens;\r\n    }\r\n\r\n    function setOffchainUsdRaised(uint256 _usd) external onlyOwner {\r\n        offchainUsdRaised = _usd;\r\n    }\r\n\r\n    function setOffchainWeiRaised(uint256 _wei) external onlyOwner {\r\n        offchainWeiRaised = _wei;\r\n    }\r\n\r\n    function setOffchainStatistics(uint256 _tokens, uint256 _usd, uint256 _wei) external onlyOwner {\r\n        offchainTokensSold = _tokens;\r\n        offchainUsdRaised = _usd;\r\n        offchainWeiRaised = _wei;\r\n    }\r\n\r\n    function getTotalTokensSold() public view returns (uint256) {\r\n        return offchainTokensSold.add(crowdsale.tokensSold());\r\n    }\r\n\r\n    function getTotalUsdRaised() public view returns (uint256) {\r\n        return offchainUsdRaised.add(crowdsale.usdRaised());\r\n    }\r\n\r\n    function getTotalWeiRaised() public view returns (uint256) {\r\n        return offchainWeiRaised.add(crowdsale.weiRaised());\r\n    }\r\n\r\n    function getTotalStatistics() external view returns (uint256, uint256, uint256) {\r\n        return (getTotalTokensSold(), getTotalUsdRaised(), getTotalWeiRaised());\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_usd\",\"type\":\"uint256\"},{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"setOffchainStatistics\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalUsdRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"setOffchainWeiRaised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offchainUsdRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalStatistics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offchainTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"setOffchainTokensSold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usd\",\"type\":\"uint256\"}],\"name\":\"setOffchainUsdRaised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offchainWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"},{\"name\":\"_offchainTokensSold\",\"type\":\"uint256\"},{\"name\":\"_offchainUsdRaised\",\"type\":\"uint256\"},{\"name\":\"_offchainWeiRaised\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AerumCrowdsaleStatistics","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000248d27095a659fc125a16b6191fb6b904936f47500000000000000000000000000000000000000000052b7d2dcc80cd2e40000000000000000000000000000000000000000000000000000000000000007270e000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://6b1d74b40201f42354cbf3e6a5f3101d2eee72d2bf59d72ce12e2123a1676d56"}]}