{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n//喜马拉雅交易所 contract\r\n//\r\n//喜马拉雅荣耀\r\n// Symbol      : XMH\r\n// Name        : XiMaLaYa Honor\r\n// Total supply: 1000\r\n// Decimals    : 0\r\n// \r\n//喜马拉雅币\r\n// Symbol      : XMLY\r\n// Name        : XiMaLaYa Token\r\n// Total supply: 100000000000\r\n// Decimals    : 18\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Admin contract\r\n// ----------------------------------------------------------------------------\r\ncontract Administration {\r\n    event AdminTransferred(address indexed _from, address indexed _to);\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    address public CEOAddress = 0x5B807E379170d42f3B099C01A5399a2e1e58963B;\r\n    address public CFOAddress = 0x92cFfCD79E6Ab6B16C7AFb96fbC0a2373bE516A4;\r\n\r\n    bool public paused = false;\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == CEOAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == CEOAddress || msg.sender == CFOAddress);\r\n        _;\r\n    }\r\n\r\n    function setCFO(address _newAdmin) public onlyCEO {\r\n        require(_newAdmin != address(0));\r\n        AdminTransferred(CFOAddress, _newAdmin);\r\n        CFOAddress = _newAdmin;\r\n        \r\n    }\r\n\r\n    function withdrawBalance() external onlyAdmin {\r\n        CEOAddress.transfer(this.balance);\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyAdmin whenNotPaused returns(bool) {\r\n        paused = true;\r\n        Pause();\r\n        return true;\r\n    }\r\n\r\n    function unpause() public onlyAdmin whenPaused returns(bool) {\r\n        paused = false;\r\n        Unpause();\r\n        return true;\r\n    }\r\n\r\n    uint oneEth = 1 ether;\r\n}\r\n\r\ncontract XMLYBadge is ERC20Interface, Administration, SafeMath {\r\n    event BadgeTransfer(address indexed from, address indexed to, uint tokens);\r\n    \r\n    string public badgeSymbol;\r\n    string public badgeName;\r\n    uint8 public badgeDecimals;\r\n    uint public _badgeTotalSupply;\r\n\r\n    mapping(address => uint) badgeBalances;\r\n    mapping(address => bool) badgeFreezed;\r\n    mapping(address => uint) badgeFreezeAmount;\r\n    mapping(address => uint) badgeUnlockTime;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function XMLYBadge() public {\r\n        badgeSymbol = \"XMH\";\r\n        badgeName = \"XMLY Honor\";\r\n        badgeDecimals = 0;\r\n        _badgeTotalSupply = 1000;\r\n        badgeBalances[CFOAddress] = _badgeTotalSupply;\r\n        BadgeTransfer(address(0), CFOAddress, _badgeTotalSupply);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function badgeTotalSupply() public constant returns (uint) {\r\n        return _badgeTotalSupply  - badgeBalances[address(0)];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account tokenOwner\r\n    // ------------------------------------------------------------------------\r\n    function badgeBalanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return badgeBalances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to to account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function badgeTransfer(address to, uint tokens) public whenNotPaused returns (bool success) {\r\n        if(badgeFreezed[msg.sender] == false){\r\n            badgeBalances[msg.sender] = safeSub(badgeBalances[msg.sender], tokens);\r\n            badgeBalances[to] = safeAdd(badgeBalances[to], tokens);\r\n            BadgeTransfer(msg.sender, to, tokens);\r\n        } else {\r\n            if(badgeBalances[msg.sender] > badgeFreezeAmount[msg.sender]) {\r\n                require(tokens <= safeSub(badgeBalances[msg.sender], badgeFreezeAmount[msg.sender]));\r\n                badgeBalances[msg.sender] = safeSub(badgeBalances[msg.sender], tokens);\r\n                badgeBalances[to] = safeAdd(badgeBalances[to], tokens);\r\n                BadgeTransfer(msg.sender, to, tokens);\r\n            }\r\n        }\r\n            \r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Mint Tokens\r\n    // ------------------------------------------------------------------------\r\n    function mintBadge(uint amount) public onlyAdmin {\r\n        badgeBalances[msg.sender] = safeAdd(badgeBalances[msg.sender], amount);\r\n        _badgeTotalSupply = safeAdd(_badgeTotalSupply, amount);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Burn Tokens\r\n    // ------------------------------------------------------------------------\r\n    function burnBadge(uint amount) public onlyAdmin {\r\n        badgeBalances[msg.sender] = safeSub(badgeBalances[msg.sender], amount);\r\n        _badgeTotalSupply = safeSub(_badgeTotalSupply, amount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Freeze Tokens\r\n    // ------------------------------------------------------------------------\r\n    function badgeFreeze(address user, uint amount, uint period) public onlyAdmin {\r\n        require(badgeBalances[user] >= amount);\r\n        badgeFreezed[user] = true;\r\n        badgeUnlockTime[user] = uint(now) + period;\r\n        badgeFreezeAmount[user] = amount;\r\n    }\r\n    \r\n    function _badgeFreeze(uint amount) internal {\r\n        require(badgeFreezed[msg.sender] == false);\r\n        require(badgeBalances[msg.sender] >= amount);\r\n        badgeFreezed[msg.sender] = true;\r\n        badgeUnlockTime[msg.sender] = uint(-1);\r\n        badgeFreezeAmount[msg.sender] = amount;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // UnFreeze Tokens\r\n    // ------------------------------------------------------------------------\r\n    function badgeUnFreeze() public whenNotPaused {\r\n        require(badgeFreezed[msg.sender] == true);\r\n        require(badgeUnlockTime[msg.sender] < uint(now));\r\n        badgeFreezed[msg.sender] = false;\r\n        badgeFreezeAmount[msg.sender] = 0;\r\n    }\r\n    \r\n    function _badgeUnFreeze(uint _amount) internal {\r\n        require(badgeFreezed[msg.sender] == true);\r\n        badgeUnlockTime[msg.sender] = 0;\r\n        badgeFreezed[msg.sender] = false;\r\n        badgeFreezeAmount[msg.sender] = safeSub(badgeFreezeAmount[msg.sender], _amount);\r\n    }\r\n    \r\n    function badgeIfFreeze(address user) public view returns (\r\n        bool check, \r\n        uint amount, \r\n        uint timeLeft\r\n    ) {\r\n        check = badgeFreezed[user];\r\n        amount = badgeFreezeAmount[user];\r\n        timeLeft = badgeUnlockTime[user] - uint(now);\r\n    }\r\n\r\n}\r\n\r\ncontract XMLYToken is XMLYBadge {\r\n    event PartnerCreated(uint indexed partnerId, address indexed partner, uint indexed amount, uint singleTrans, uint durance);\r\n    event RewardDistribute(uint indexed postId, uint partnerId, address indexed user, uint indexed amount);\r\n    \r\n    event VipAgreementSign(uint indexed vipId, address indexed vip, uint durance, uint frequence, uint salar);\r\n    event SalaryReceived(uint indexed vipId, address indexed vip, uint salary, uint indexed timestamp);\r\n    \r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    uint public minePool;\r\n\r\n    struct Partner {\r\n        address admin;\r\n        uint tokenPool;\r\n        uint singleTrans;\r\n        uint timestamp;\r\n        uint durance;\r\n    }\r\n    \r\n    struct Poster {\r\n        address poster;\r\n        bytes32 hashData;\r\n        uint reward;\r\n    }\r\n    \r\n    struct Vip {\r\n        address vip;\r\n        uint durance;\r\n        uint frequence;\r\n        uint salary;\r\n        uint timestamp;\r\n    }\r\n    \r\n    Partner[] partners;\r\n    Vip[] vips;\r\n\r\n    modifier onlyPartner(uint _partnerId) {\r\n        require(partners[_partnerId].admin == msg.sender);\r\n        require(partners[_partnerId].tokenPool > uint(0));\r\n        uint deadline = safeAdd(partners[_partnerId].timestamp, partners[_partnerId].durance);\r\n        require(deadline > now);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyVip(uint _vipId) {\r\n        require(vips[_vipId].vip == msg.sender);\r\n        require(vips[_vipId].durance > now);\r\n        require(vips[_vipId].timestamp < now);\r\n        _;\r\n    }\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    mapping(address => bool) freezed;\r\n    mapping(address => uint) freezeAmount;\r\n    mapping(address => uint) unlockTime;\r\n    \r\n    mapping(uint => Poster[]) PartnerIdToPosterList;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function XMLYToken() public {\r\n        symbol = \"XMLY\";\r\n        name = \"XMLY Token\";\r\n        decimals = 18;\r\n        _totalSupply = 5000000000000000000000000000;\r\n        minePool = 95000000000000000000000000000;\r\n        balances[CFOAddress] = _totalSupply;\r\n        Transfer(address(0), CFOAddress, _totalSupply);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account tokenOwner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to to account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        if(freezed[msg.sender] == false){\r\n            balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n            balances[to] = safeAdd(balances[to], tokens);\r\n            Transfer(msg.sender, to, tokens);\r\n        } else {\r\n            if(balances[msg.sender] > freezeAmount[msg.sender]) {\r\n                require(tokens <= safeSub(balances[msg.sender], freezeAmount[msg.sender]));\r\n                balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n                balances[to] = safeAdd(balances[to], tokens);\r\n                Transfer(msg.sender, to, tokens);\r\n            }\r\n        }\r\n            \r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        require(freezed[msg.sender] != true);\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer tokens from the from account to the to account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the from account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        require(freezed[msg.sender] != true);\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account. The spender contract function\r\n    // receiveApproval(...) is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        require(freezed[msg.sender] != true);\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Mint Tokens\r\n    // ------------------------------------------------------------------------\r\n    function _mint(uint amount, address receiver) internal {\r\n        require(minePool >= amount);\r\n        minePool = safeSub(minePool, amount);\r\n        _totalSupply = safeAdd(_totalSupply, amount);\r\n        balances[receiver] = safeAdd(balances[receiver], amount);\r\n        Transfer(address(0), receiver, amount);\r\n    }\r\n    \r\n    function mint(uint amount) public onlyAdmin {\r\n        require(minePool >= amount);\r\n        minePool = safeSub(minePool, amount);\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], amount);\r\n        _totalSupply = safeAdd(_totalSupply, amount);\r\n    }\r\n    \r\n    function burn(uint amount) public onlyAdmin {\r\n        require(_totalSupply >= amount);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], amount);\r\n        _totalSupply = safeSub(_totalSupply, amount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Freeze Tokens\r\n    // ------------------------------------------------------------------------\r\n    function freeze(address user, uint amount, uint period) public onlyAdmin {\r\n        require(balances[user] >= amount);\r\n        freezed[user] = true;\r\n        unlockTime[user] = uint(now) + period;\r\n        freezeAmount[user] = amount;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // UnFreeze Tokens\r\n    // ------------------------------------------------------------------------\r\n    function unFreeze() public whenNotPaused {\r\n        require(freezed[msg.sender] == true);\r\n        require(unlockTime[msg.sender] < uint(now));\r\n        freezed[msg.sender] = false;\r\n        freezeAmount[msg.sender] = 0;\r\n    }\r\n    \r\n    function ifFreeze(address user) public view returns (\r\n        bool check, \r\n        uint amount, \r\n        uint timeLeft\r\n    ) {\r\n        check = freezed[user];\r\n        amount = freezeAmount[user];\r\n        timeLeft = unlockTime[user] - uint(now);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Partner Authorization\r\n    // ------------------------------------------------------------------------\r\n    function createPartner(address _partner, uint _amount, uint _singleTrans, uint _durance) public onlyAdmin returns (uint) {\r\n        Partner memory _Partner = Partner({\r\n            admin: _partner,\r\n            tokenPool: _amount,\r\n            singleTrans: _singleTrans,\r\n            timestamp: uint(now),\r\n            durance: _durance\r\n        });\r\n        uint newPartnerId = partners.push(_Partner) - 1;\r\n        PartnerCreated(newPartnerId, _partner, _amount, _singleTrans, _durance);\r\n        \r\n        return newPartnerId;\r\n    }\r\n    \r\n    function partnerTransfer(uint _partnerId, bytes32 _data, address _to, uint _amount) public onlyPartner(_partnerId) whenNotPaused returns (bool) {\r\n        require(_amount <= partners[_partnerId].singleTrans);\r\n        partners[_partnerId].tokenPool = safeSub(partners[_partnerId].tokenPool, _amount);\r\n        Poster memory _Poster = Poster ({\r\n           poster: _to,\r\n           hashData: _data,\r\n           reward: _amount\r\n        });\r\n        uint newPostId = PartnerIdToPosterList[_partnerId].push(_Poster) - 1;\r\n        _mint(_amount, _to);\r\n        RewardDistribute(newPostId, _partnerId, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function setPartnerPool(uint _partnerId, uint _amount) public onlyAdmin {\r\n        partners[_partnerId].tokenPool = _amount;\r\n    }\r\n    \r\n    function setPartnerDurance(uint _partnerId, uint _durance) public onlyAdmin {\r\n        partners[_partnerId].durance = uint(now) + _durance;\r\n    }\r\n    \r\n    function getPartnerInfo(uint _partnerId) public view returns (\r\n        address admin,\r\n        uint tokenPool,\r\n        uint timeLeft\r\n    ) {\r\n        Partner memory _Partner = partners[_partnerId];\r\n        admin = _Partner.admin;\r\n        tokenPool = _Partner.tokenPool;\r\n        if (_Partner.timestamp + _Partner.durance > uint(now)) {\r\n            timeLeft = _Partner.timestamp + _Partner.durance - uint(now);\r\n        } else {\r\n            timeLeft = 0;\r\n        }\r\n        \r\n    }\r\n\r\n    function getPosterInfo(uint _partnerId, uint _posterId) public view returns (\r\n        address poster,\r\n        bytes32 hashData,\r\n        uint reward\r\n    ) {\r\n        Poster memory _Poster = PartnerIdToPosterList[_partnerId][_posterId];\r\n        poster = _Poster.poster;\r\n        hashData = _Poster.hashData;\r\n        reward = _Poster.reward;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Vip Agreement\r\n    // ------------------------------------------------------------------------\r\n    function createVip(address _vip, uint _durance, uint _frequence, uint _salary) public onlyAdmin returns (uint) {\r\n        Vip memory _Vip = Vip ({\r\n           vip: _vip,\r\n           durance: uint(now) + _durance,\r\n           frequence: _frequence,\r\n           salary: _salary,\r\n           timestamp: now + _frequence\r\n        });\r\n        uint newVipId = vips.push(_Vip) - 1;\r\n        VipAgreementSign(newVipId, _vip, _durance, _frequence, _salary);\r\n        \r\n        return newVipId;\r\n    }\r\n    \r\n    function mineSalary(uint _vipId) public onlyVip(_vipId) whenNotPaused returns (bool) {\r\n        Vip storage _Vip = vips[_vipId];\r\n        _mint(_Vip.salary, _Vip.vip);\r\n        _Vip.timestamp = safeAdd(_Vip.timestamp, _Vip.frequence);\r\n        \r\n        SalaryReceived(_vipId, _Vip.vip, _Vip.salary, _Vip.timestamp);\r\n        return true;\r\n    }\r\n    \r\n    function deleteVip(uint _vipId) public onlyAdmin {\r\n        delete vips[_vipId];\r\n    }\r\n    \r\n    function getVipInfo(uint _vipId) public view returns (\r\n        address vip,\r\n        uint durance,\r\n        uint frequence,\r\n        uint salary,\r\n        uint nextSalary,\r\n        string log\r\n    ) {\r\n        Vip memory _Vip = vips[_vipId];\r\n        vip = _Vip.vip;\r\n        durance = _Vip.durance;\r\n        frequence = _Vip.frequence;\r\n        salary = _Vip.salary;\r\n        if(_Vip.timestamp >= uint(now)) {\r\n            nextSalary = safeSub(_Vip.timestamp, uint(now));\r\n            log = \"Please Wait\";\r\n        } else {\r\n            nextSalary = 0;\r\n            log = \"Pick Up Your Salary Now\";\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyAdmin returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(CEOAddress, tokens);\r\n    }\r\n}\r\n\r\ncontract XMLY is XMLYToken {\r\n    event MembershipUpdate(address indexed member, uint indexed level);\r\n    event MembershipCancel(address indexed member);\r\n    event XMLYTradeCreated(uint indexed tradeId, bool indexed ifBadge, uint badge, uint token);\r\n    event TradeCancel(uint indexed tradeId);\r\n    event TradeComplete(uint indexed tradeId, address indexed buyer, address indexed seller, uint badge, uint token);\r\n    event Mine(address indexed miner, uint indexed salary);\r\n    \r\n    mapping (address => uint) MemberToLevel;\r\n    mapping (address => uint) MemberToBadge;\r\n    mapping (address => uint) MemberToToken;\r\n    mapping (address => uint) MemberToTime;\r\n    \r\n    uint public period = 30 days;\r\n    \r\n    uint[5] public boardMember =[\r\n        0,\r\n        1,\r\n        10\r\n    ];\r\n    \r\n    uint[5] public salary = [\r\n        0,\r\n        10000000000000000000000,\r\n        100000000000000000000000\r\n    ];\r\n    \r\n    struct XMLYTrade {\r\n        address seller;\r\n        bool ifBadge;\r\n        uint badge;\r\n        uint token;\r\n    }\r\n    \r\n    XMLYTrade[] xmlyTrades;\r\n    \r\n    function boardMemberApply(uint _level) public whenNotPaused {\r\n        require(_level > 0 && _level <= 4);\r\n        require(badgeBalances[msg.sender] >= boardMember[_level]);\r\n        _badgeFreeze(boardMember[_level]);\r\n        MemberToLevel[msg.sender] = _level;\r\n        if(MemberToTime[msg.sender] == 0) {\r\n            MemberToTime[msg.sender] = uint(now);\r\n        }\r\n        \r\n        MembershipUpdate(msg.sender, _level);\r\n    }\r\n    \r\n    function getBoardMember(address _member) public view returns (\r\n        uint level,\r\n        uint timeLeft\r\n    ) {\r\n        level = MemberToLevel[_member];\r\n        if(MemberToTime[_member] > uint(now)) {\r\n            timeLeft = safeSub(MemberToTime[_member], uint(now));\r\n        } else {\r\n            timeLeft = 0;\r\n        }\r\n    }\r\n    \r\n    function boardMemberCancel() public whenNotPaused {\r\n        require(MemberToLevel[msg.sender] > 0);\r\n        _badgeUnFreeze(boardMember[MemberToLevel[msg.sender]]);\r\n        \r\n        MemberToLevel[msg.sender] = 0;\r\n        MembershipCancel(msg.sender);\r\n    }\r\n    \r\n    function createXMLYTrade(bool _ifBadge, uint _badge, uint _token) public whenNotPaused returns (uint) {\r\n        if(_ifBadge) {\r\n            require(badgeBalances[msg.sender] >= _badge);\r\n            badgeBalances[msg.sender] = safeSub(badgeBalances[msg.sender], _badge);\r\n            MemberToBadge[msg.sender] = _badge;\r\n            XMLYTrade memory xmly = XMLYTrade({\r\n               seller: msg.sender,\r\n               ifBadge:_ifBadge,\r\n               badge: _badge,\r\n               token: _token\r\n            });\r\n            uint newBadgeTradeId = xmlyTrades.push(xmly) - 1;\r\n            XMLYTradeCreated(newBadgeTradeId, _ifBadge, _badge, _token);\r\n            \r\n            return newBadgeTradeId;\r\n        } else {\r\n            require(balances[msg.sender] >= _token);\r\n            balances[msg.sender] = safeSub(balances[msg.sender], _token);\r\n            MemberToToken[msg.sender] = _token;\r\n            XMLYTrade memory _xmly = XMLYTrade({\r\n               seller: msg.sender,\r\n               ifBadge:_ifBadge,\r\n               badge: _badge,\r\n               token: _token\r\n            });\r\n            uint newTokenTradeId = xmlyTrades.push(_xmly) - 1;\r\n            XMLYTradeCreated(newTokenTradeId, _ifBadge, _badge, _token);\r\n            \r\n            return newTokenTradeId;\r\n        }\r\n    }\r\n    \r\n    function cancelTrade(uint _tradeId) public whenNotPaused {\r\n        XMLYTrade memory xmly = xmlyTrades[_tradeId];\r\n        require(xmly.seller == msg.sender);\r\n        if(xmly.ifBadge){\r\n            badgeBalances[msg.sender] = safeAdd(badgeBalances[msg.sender], xmly.badge);\r\n            MemberToBadge[msg.sender] = 0;\r\n        } else {\r\n            balances[msg.sender] = safeAdd(balances[msg.sender], xmly.token);\r\n            MemberToToken[msg.sender] = 0;\r\n        }\r\n        delete xmlyTrades[_tradeId];\r\n        TradeCancel(_tradeId);\r\n    }\r\n    \r\n    function trade(uint _tradeId) public whenNotPaused {\r\n        XMLYTrade memory xmly = xmlyTrades[_tradeId];\r\n        if(xmly.ifBadge){\r\n            badgeBalances[msg.sender] = safeAdd(badgeBalances[msg.sender], xmly.badge);\r\n            MemberToBadge[xmly.seller] = 0;\r\n            transfer(xmly.seller, xmly.token);\r\n            delete xmlyTrades[_tradeId];\r\n            TradeComplete(_tradeId, msg.sender, xmly.seller, xmly.badge, xmly.token);\r\n        } else {\r\n            balances[msg.sender] = safeAdd(balances[msg.sender], xmly.token);\r\n            MemberToToken[xmly.seller] = 0;\r\n            badgeTransfer(xmly.seller, xmly.badge);\r\n            delete xmlyTrades[_tradeId];\r\n            TradeComplete(_tradeId, msg.sender, xmly.seller, xmly.badge, xmly.token);\r\n        }\r\n    }\r\n    \r\n    function mine() public whenNotPaused {\r\n        uint level = MemberToLevel[msg.sender];\r\n        require(MemberToTime[msg.sender] < uint(now)); \r\n        require(level > 0);\r\n        _mint(salary[level], msg.sender);\r\n        MemberToTime[msg.sender] = safeAdd(MemberToTime[msg.sender], period);\r\n        Mine(msg.sender, salary[level]);\r\n    }\r\n    \r\n    function setBoardMember(uint one, uint two) public onlyAdmin {\r\n        boardMember[1] = one;\r\n        boardMember[2] = two;\r\n    }\r\n    \r\n    function setSalary(uint one, uint two) public onlyAdmin {\r\n        salary[1] = one;\r\n        salary[2] = two;\r\n    }\r\n    \r\n    function setPeriod(uint time) public onlyAdmin {\r\n        period = time;\r\n    }\r\n    \r\n    function getTrade(uint _tradeId) public view returns (\r\n        address seller,\r\n        bool ifBadge,\r\n        uint badge,\r\n        uint token \r\n    ) {\r\n        XMLYTrade memory _xmly = xmlyTrades[_tradeId];\r\n        seller = _xmly.seller;\r\n        ifBadge = _xmly.ifBadge;\r\n        badge = _xmly.badge;\r\n        token = _xmly.token;\r\n    }\r\n    \r\n    function WhoIsTheContractMaster() public pure returns (string) {\r\n        return \"Alexander The Exlosion\";\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"boardMemberApply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeId\",\"type\":\"uint256\"}],\"name\":\"cancelTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_singleTrans\",\"type\":\"uint256\"},{\"name\":\"_durance\",\"type\":\"uint256\"}],\"name\":\"createPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"badgeFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CFOAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"badgeTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tradeId\",\"type\":\"uint256\"}],\"name\":\"getTrade\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"ifBadge\",\"type\":\"bool\"},{\"name\":\"badge\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_badgeTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_vipId\",\"type\":\"uint256\"}],\"name\":\"getVipInfo\",\"outputs\":[{\"name\":\"vip\",\"type\":\"address\"},{\"name\":\"durance\",\"type\":\"uint256\"},{\"name\":\"frequence\",\"type\":\"uint256\"},{\"name\":\"salary\",\"type\":\"uint256\"},{\"name\":\"nextSalary\",\"type\":\"uint256\"},{\"name\":\"log\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partnerId\",\"type\":\"uint256\"},{\"name\":\"_durance\",\"type\":\"uint256\"}],\"name\":\"setPartnerDurance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_partnerId\",\"type\":\"uint256\"}],\"name\":\"getPartnerInfo\",\"outputs\":[{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"tokenPool\",\"type\":\"uint256\"},{\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnBadge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ifBadge\",\"type\":\"bool\"},{\"name\":\"_badge\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"createXMLYTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEOAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"badgeName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"getBoardMember\",\"outputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ifFreeze\",\"outputs\":[{\"name\":\"check\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partnerId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setPartnerPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"one\",\"type\":\"uint256\"},{\"name\":\"two\",\"type\":\"uint256\"}],\"name\":\"setSalary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WhoIsTheContractMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"boardMemberCancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"one\",\"type\":\"uint256\"},{\"name\":\"two\",\"type\":\"uint256\"}],\"name\":\"setBoardMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"badgeIfFreeze\",\"outputs\":[{\"name\":\"check\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vipId\",\"type\":\"uint256\"}],\"name\":\"mineSalary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"badgeDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boardMember\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vipId\",\"type\":\"uint256\"}],\"name\":\"deleteVip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_partnerId\",\"type\":\"uint256\"},{\"name\":\"_posterId\",\"type\":\"uint256\"}],\"name\":\"getPosterInfo\",\"outputs\":[{\"name\":\"poster\",\"type\":\"address\"},{\"name\":\"hashData\",\"type\":\"bytes32\"},{\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"salary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"badgeSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintBadge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"badgeBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vip\",\"type\":\"address\"},{\"name\":\"_durance\",\"type\":\"uint256\"},{\"name\":\"_frequence\",\"type\":\"uint256\"},{\"name\":\"_salary\",\"type\":\"uint256\"}],\"name\":\"createVip\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeId\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"badgeUnFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partnerId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"partnerTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"badgeTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"MembershipUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MembershipCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ifBadge\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"badge\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"XMLYTradeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeId\",\"type\":\"uint256\"}],\"name\":\"TradeCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"badge\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"TradeComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"salary\",\"type\":\"uint256\"}],\"name\":\"Mine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"partnerId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"singleTrans\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"durance\",\"type\":\"uint256\"}],\"name\":\"PartnerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"partnerId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vipId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"vip\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"durance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"frequence\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"salar\",\"type\":\"uint256\"}],\"name\":\"VipAgreementSign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vipId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"vip\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"salary\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SalaryReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"BadgeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"XMLY","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://82046e2290510e6518b962bd7c474b806b958e6acba229ebbd5d4255de76eb1a"}]}