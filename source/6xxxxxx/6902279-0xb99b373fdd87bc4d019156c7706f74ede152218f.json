{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// <ORACLIZE_API>\r\n/*\r\nCopyright (c) 2015-2016 Oraclize SRL\r\nCopyright (c) 2016 Oraclize LTD\r\n\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\n\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.0;//please import oraclizeAPI_pre0.4.sol when solidity < 0.4.0\r\n\r\ncontract OraclizeI {\r\n    address public cbAddress;\r\n    function query(uint _timestamp, string _datasource, string _arg) payable returns (bytes32 _id);\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) payable returns (bytes32 _id);\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) payable returns (bytes32 _id);\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) payable returns (bytes32 _id);\r\n    function getPrice(string _datasource) returns (uint _dsprice);\r\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\r\n    function useCoupon(string _coupon);\r\n    function setProofType(byte _proofType);\r\n    function setConfig(bytes32 _config);\r\n    function setCustomGasPrice(uint _gasPrice);\r\n}\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() returns (address _addr);\r\n}\r\ncontract usingOraclize {\r\n    uint constant day = 60*60*24;\r\n    uint constant week = 60*60*24*7;\r\n    uint constant month = 60*60*24*30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n    \r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        if(address(OAR)==0) oraclize_setNetwork(networkID_auto);\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        _;\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        oraclize.useCoupon(code);\r\n        _;\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\r\n        if (getCodeSize(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed)>0){ //mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1)>0){ //ropsten testnet\r\n            OAR = OraclizeAddrResolverI(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa)>0){ //browser-solidity\r\n            OAR = OraclizeAddrResolverI(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function __callback(bytes32 myid, string result) {\r\n        __callback(myid, result, new bytes(0));\r\n    }\r\n    function __callback(bytes32 myid, string result, bytes proof) {\r\n    }\r\n    \r\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource);\r\n    }\r\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource, gaslimit);\r\n    }\r\n    \r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }    \r\n    function oraclize_setConfig(bytes32 config) oraclizeAPI internal {\r\n        return oraclize.setConfig(config);\r\n    }\r\n\r\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n\r\n    function parseAddr(string _a) internal returns (address){\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i=2; i<2+2*20; i+=2){\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i+1]);\r\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1*16+b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n\r\n    function strCompare(string _a, string _b) internal returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n   } \r\n\r\n    function indexOf(string _haystack, string _needle) internal returns (int)\r\n    {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length)) \r\n            return -1;\r\n        else if(h.length > (2**128 -1))\r\n            return -1;                                  \r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0])\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\r\n                    {\r\n                        subindex++;\r\n                    }   \r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }   \r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i=0; i<bresult.length; i++){\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n                if (decimals){\r\n                   if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10**_b;\r\n        return mint;\r\n    }\r\n    \r\n    function uint2str(uint i) internal returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0){\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n    \r\n    \r\n\r\n}\r\n\r\ninterface PlayerBookInterface {\r\n    function getPlayerID(address _addr, uint256 _affCode) external returns (uint256);\r\n    function getPlayerName(uint256 _pID) external view returns (bytes32);\r\n    function getPlayerLAff(uint256 _pID) external view returns (uint256);\r\n    function getPlayerAddr(uint256 _pID) external view returns (address);\r\n    function getPlayerBetID(uint256 _pID, uint256 betIndex) external view returns (uint256);\r\n    function getPlayerInfo(uint256 _pID) external view returns(uint256,uint256,uint256,uint256,uint256,uint256);\r\n    function getNameFee() external view returns (uint256);\r\n    function betXaddr(address _addr, uint256 betAmount, bool isWin, uint256 betID, uint256 winAmount) external;\r\n    function rewardXID(uint256 _pID, uint256 rewardAmount, uint256 betID, uint256 level) external;\r\n    function registerNameFromDapp(address _addr, bytes32 _name) external payable returns(bool);\r\n}\r\n// </ORACLIZE_API>\r\n\r\ncontract Bet100 is usingOraclize {\r\n\r\n    using NameFilter for string;\r\n\r\n    uint constant edge = 100; // 1% edge percentage (10000 = 100%)\r\n    uint constant maxWin = 1000; // 单次最大赢奖池里面的 10% max win (before edge is taken) as percentage of bankroll (10000 = 100%)\r\n    uint constant maxWinCheck = maxWin * 2; // 这个值是做安全检查的，可以适当放宽一点儿，因为如果两次最大值下注交错，有可能后下的那个人返回后报错 单次最大赢奖池里面的 1% max win \r\n    uint constant minBet = 10 finney; // 最小下注额\r\n    uint constant emergencyWithdrawalRatio = 10; //ratio percentage (100 = 100%)\r\n\r\n    uint safeGas = 330000;\r\n    uint constant ORACLIZE_GAS_LIMIT = 175000;\r\n    uint constant INVALID_BET_MARKER = 99999;\r\n    uint constant INVALID_BET_MARKER_1 = 99998;\r\n    uint constant EMERGENCY_TIMEOUT = 30 seconds;\r\n\r\n    string public randomOrgAPIKey = \"e1de2fda-77b3-4fa5-bdec-cd09c82bcff7\";\r\n\r\n    PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x47954a60b4b9d3edafa8729b59b55dfb4ca6e178);\r\n\r\n\r\n    struct Bet {\r\n        address playerAddress;      //用户地址\r\n        uint betNumber;             //用户下注数值\r\n        uint amountBet;             //用户下注金额\r\n        uint numberRolled;          //算出的结果\r\n        uint laff;                  //推荐人ID\r\n        uint betTime;               //推荐人ID\r\n        uint winAmount;             //赢取值\r\n        bytes32 myid;                  //生成时的id\r\n    }\r\n\r\n    struct WithdrawalProposal {\r\n        address toAddress;\r\n        uint atTime;\r\n    }\r\n\r\n    uint public _bankRoll = 0;\r\n\r\n    address public owner;\r\n    address public houseAddress;\r\n    bool public isStopped;\r\n\r\n\r\n    mapping (bytes32 => Bet) public bets;\r\n    bytes32[] public betsKeys;\r\n    uint256 betsCount;\r\n    mapping(uint => Bet) public betsInfo;\r\n\r\n    //当前总盈利\r\n    uint public investorsProfit = 0;\r\n    //当前总亏损\r\n    uint public investorsLosses = 0;\r\n\r\n    //代理相关\r\n    uint constant dealerMinReward = 100 szabo; // 代理最小返现额度\r\n    uint constant dealer_level_1_reward = 20; // 一级代理分红 20 = 20%\r\n    uint constant dealer_level_2_reward = 10; // 二级代理分红 10 = 10%\r\n    uint constant dealer_level_3_reward = 5; // 三级代理分红 5 = 5%\r\n    uint public dealer_reward_total = 0; //累计发放推广奖励\r\n\r\n    uint public draw_amount = 0;//提现总额\r\n    uint public invest_amount = 0;//投资总额\r\n\r\n    event LOG_NewBet(address playerAddress, uint amount, bytes32 myid);\r\n    event LOG_BetWon(address playerAddress, uint numberRolled, uint amountWon, uint betId);\r\n    event LOG_BetLost(address playerAddress, uint numberRolled, uint betId);\r\n    event LOG_EmergencyWithdrawalProposed();\r\n    event LOG_EmergencyWithdrawalFailed(address withdrawalAddress);\r\n    event LOG_EmergencyWithdrawalSucceeded(address withdrawalAddress, uint amountWithdrawn);\r\n    event LOG_FailedSend(address receiver, uint amount);\r\n    event LOG_ZeroSend();\r\n    event LOG_InvestorEntrance(address investor, uint amount);\r\n    event LOG_InvestorCapitalUpdate(address investor, int amount);\r\n    event LOG_InvestorExit(address investor, uint amount);\r\n    event LOG_ContractStopped();\r\n    event LOG_ContractResumed();\r\n    event LOG_OwnerAddressChanged(address oldAddr, address newOwnerAddress);\r\n    event LOG_HouseAddressChanged(address oldAddr, address newHouseAddress);\r\n    event LOG_RandomOrgAPIKeyChanged(string oldKey, string newKey);\r\n    event LOG_GasLimitChanged(uint oldGasLimit, uint newGasLimit);\r\n    event LOG_EmergencyAutoStop();\r\n    event LOG_EmergencyWithdrawalVote(address investor, bool vote);\r\n    event LOG_ValueIsTooBig();\r\n    event LOG_SuccessfulSend(address addr, uint amount);\r\n\r\n    constructor() public {\r\n        oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS);\r\n        owner = msg.sender;\r\n        houseAddress = msg.sender;\r\n        betsCount = 0;\r\n    }\r\n\r\n    //SECTION I: MODIFIERS AND HELPER FUNCTIONS\r\n\r\n    //MODIFIERS\r\n\r\n    modifier onlyIfNotStopped {\r\n        require(isStopped == false, \"Game is stop!!!\");\r\n        //if (isStopped) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfStopped {\r\n        require(isStopped == true, \"Game is not stop!!!\");\r\n        // if (!isStopped) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender, \"Only owner can operator !!!\");\r\n        // if (owner != msg.sender) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyOraclize {\r\n        require(msg.sender == oraclize_cbAddress(), \"Only Oraclize address can operator !!!\");\r\n        //if (msg.sender != oraclize_cbAddress()) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyMoreThanZero {\r\n        require(msg.value != 0, \"onlyMoreThanZero !!!\");\r\n        //if (msg.value == 0) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfBetExist(bytes32 myid) {\r\n        require(bets[myid].playerAddress != address(0x0), \"onlyIfBetExist !!!\");\r\n        //if(bets[myid].playerAddress == address(0x0)) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfBetSizeIsStillCorrect(bytes32 myid) {\r\n        if ((((bets[myid].amountBet * ((10000 - edge) - bets[myid].betNumber)) / bets[myid].betNumber ) <= (maxWinCheck * getBankroll()) / 10000)  && (bets[myid].amountBet >= minBet)) {\r\n             _;\r\n        }\r\n        else {\r\n            bets[myid].numberRolled = INVALID_BET_MARKER_1;\r\n            safeSend(bets[myid].playerAddress, bets[myid].amountBet);\r\n            return;\r\n        }\r\n    }\r\n\r\n    modifier onlyIfValidRoll(bytes32 myid, string result) {\r\n        uint numberRolled = parseInt(result);\r\n        if ((numberRolled < 1 || numberRolled > 10000) && bets[myid].numberRolled == 0) {\r\n            bets[myid].numberRolled = INVALID_BET_MARKER;\r\n            safeSend(bets[myid].playerAddress, bets[myid].amountBet);\r\n            return;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyWinningBets(uint numberRolled, uint betNumber) {\r\n        if (numberRolled - 1 < betNumber) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyLosingBets(uint numberRolled, uint betNumber) {\r\n        if (numberRolled - 1 >= betNumber) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyIfValidGas(uint newGasLimit) {\r\n        require(ORACLIZE_GAS_LIMIT + newGasLimit >= ORACLIZE_GAS_LIMIT, \"gas is low\");\r\n        // if (ORACLIZE_GAS_LIMIT + newGasLimit < ORACLIZE_GAS_LIMIT) throw;\r\n        require(newGasLimit >= 25000, \"gas is low\");\r\n        // if (newGasLimit < 25000) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfNotProcessed(bytes32 myid) {\r\n        require(bets[myid].numberRolled <= 0, \"onlyIfNotProcessed\");\r\n        // if (bets[myid].numberRolled > 0) throw;\r\n        _;\r\n    }\r\n    //检测下注点数是否合法\r\n    modifier onlyRollNumberValid(uint rollNumber) {\r\n        require(rollNumber < 100, \"roll number invalid\");\r\n        require(rollNumber > 0, \"roll number invalid\");\r\n        _;\r\n    }\r\n\r\n    //CONSTANT HELPER FUNCTIONS\r\n\r\n    function getBankroll()\r\n        view\r\n        public\r\n        returns(uint) {\r\n\r\n        if (_bankRoll + investorsProfit <= investorsLosses) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return _bankRoll + investorsProfit - investorsLosses;\r\n        }\r\n        //return _bankRoll;\r\n    }\r\n\r\n    function getStatus()\r\n        view\r\n        external\r\n        returns(uint, uint, uint, uint, uint, uint) {\r\n\r\n        uint bankroll = getBankroll();\r\n        //uint minInvestment = getMinInvestment();\r\n        return (bankroll, edge, maxWin, minBet, (investorsProfit - investorsLosses), betsCount);\r\n    }\r\n\r\n    function getBet(uint id)\r\n        public\r\n        view\r\n        returns(address, uint, uint, uint, uint, uint) {\r\n\r\n        if (id < betsCount) {\r\n            return (betsInfo[id].playerAddress, betsInfo[id].amountBet, betsInfo[id].betNumber,  betsInfo[id].numberRolled, betsInfo[id].winAmount,  betsInfo[id].betTime);\r\n        }\r\n    }\r\n\r\n    function getBetKey(uint id)\r\n        public\r\n        view\r\n        returns(bytes32) {\r\n\r\n        if (id < betsCount) {\r\n            return (betsInfo[id].myid);\r\n        }\r\n    }\r\n\r\n    function numBets()\r\n        view\r\n        public\r\n        returns(uint) {\r\n\r\n        return betsCount;\r\n    }\r\n\r\n    function getBetReward(uint betNumber, uint betAmount) \r\n        view\r\n        public\r\n        returns(uint, uint, uint) \r\n    {\r\n        uint oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas);\r\n        uint realBet = betAmount;\r\n        uint winAmount = ((realBet * (10000 - edge)) / (betNumber * 100)) - oraclizeFee ;\r\n        return (winAmount, realBet, oraclizeFee);\r\n    }\r\n\r\n    function OraclizeIFee() \r\n        view\r\n        public\r\n        returns(uint) \r\n    {\r\n        return OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas);\r\n    }\r\n\r\n    function getMinBetAmount()\r\n        view\r\n        public\r\n        returns(uint) {\r\n\r\n        uint oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas);\r\n        return oraclizeFee + minBet;\r\n    }\r\n\r\n    function getMaxBetAmount(uint256 withNumber)\r\n        view\r\n        public\r\n        returns(uint) {\r\n        uint betNumber = withNumber * 100;\r\n        uint oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas);\r\n        uint betValue =  (maxWin * getBankroll()) * betNumber / (10000 * (10000 - edge - betNumber));\r\n        return betValue + oraclizeFee;\r\n    }\r\n\r\n\r\n    function changeOraclizeProofType(byte _proofType)\r\n        onlyOwner \r\n        public {\r\n\r\n        require(_proofType != 0x00, \"_proofType is 0x00\");\r\n        //if (_proofType == 0x00) throw;\r\n        oraclize_setProof( _proofType |  proofStorage_IPFS );\r\n    }\r\n\r\n    function changeOraclizeConfig(bytes32 _config)\r\n        onlyOwner \r\n        public {\r\n\r\n        oraclize_setConfig(_config);\r\n    }\r\n\r\n    // PRIVATE HELPERS FUNCTION\r\n\r\n    function safeSend(address addr, uint value)\r\n        private {\r\n\r\n        if (value == 0) {\r\n            emit LOG_ZeroSend();\r\n            return;\r\n        }\r\n\r\n        if (this.balance < value) {\r\n            emit LOG_ValueIsTooBig();\r\n            return;\r\n        }\r\n        //发送资金\r\n        if (!(addr.call.gas(safeGas).value(value)())) {\r\n            emit LOG_FailedSend(addr, value);\r\n            if (addr != houseAddress) {\r\n                //Forward to house address all change 如果给用户发送不过去，自动发送给CEO账户\r\n                if (!(houseAddress.call.gas(safeGas).value(value)())) LOG_FailedSend(houseAddress, value);\r\n            }\r\n        }\r\n\r\n        emit LOG_SuccessfulSend(addr,value);\r\n    }\r\n\r\n    // SECTION II: BET & BET PROCESSING\r\n\r\n    function()\r\n        payable \r\n        public {\r\n\r\n        bet(5, 0);\r\n    }\r\n\r\n    function bet(uint256 betNumber, uint affCode)\r\n        payable\r\n        onlyIfNotStopped \r\n        onlyRollNumberValid(betNumber) {\r\n\r\n        uint256 betNumberHigh = betNumber * 100;\r\n        uint oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas);\r\n        require(oraclizeFee < msg.value, \"msg.value can not pay for oraclizeFee\");\r\n        //if (oraclizeFee >= msg.value) throw;\r\n        uint betValue = msg.value;\r\n        //检测一下用户账号，如果有推荐人绑定一下\r\n        uint pID = PlayerBook.getPlayerID(msg.sender, affCode);\r\n        if ((((betValue * ((10000 - edge) - betNumberHigh)) / betNumberHigh ) <= (maxWin * getBankroll()) / 10000) && (betValue >= minBet)) {\r\n\r\n            string memory str1 = \"[URL] ['json(https://api.random.org/json-rpc/1/invoke).result.random.data.0', '\\\\n{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"generateSignedIntegers\\\",\\\"params\\\":{\\\"apiKey\\\":\\\"\";\r\n            string memory str2 = randomOrgAPIKey;\r\n            string memory str3 = \"\\\",\\\"n\\\":1,\\\"min\\\":1,\\\"max\\\":10000${[identity] \\\"}\\\"},\\\"id\\\":1${[identity] \\\"}\\\"}']\";\r\n            string memory query = strConcat(str1, str2, str3);\r\n\r\n            bytes32 myid =\r\n                oraclize_query(\r\n                    \"nested\",\r\n                    query,\r\n                    ORACLIZE_GAS_LIMIT + safeGas\r\n                );\r\n            uint laff = PlayerBook.getPlayerLAff(pID);\r\n            bets[myid] = Bet(msg.sender, betNumberHigh, betValue, 0, laff, now, 0, myid);\r\n            betsKeys.push(myid);\r\n            emit LOG_NewBet(msg.sender, betValue, myid);\r\n        }\r\n        else {\r\n            revert(\"out of bank roll\");\r\n        }\r\n    }\r\n\r\n    function __callback(bytes32 myid, string result, bytes proof)\r\n        onlyOraclize\r\n        onlyIfBetExist(myid)\r\n        onlyIfNotProcessed(myid)\r\n        onlyIfValidRoll(myid, result)\r\n        onlyIfBetSizeIsStillCorrect(myid) {\r\n\r\n        uint numberRolled = parseInt(result);\r\n        bets[myid].numberRolled = numberRolled;\r\n        isWinningBet(bets[myid], numberRolled, bets[myid].betNumber);\r\n        isLosingBet(bets[myid], numberRolled, bets[myid].betNumber);\r\n    }\r\n\r\n    function isWinningBet(Bet thisBet, uint numberRolled, uint betNumber)\r\n        private\r\n        onlyWinningBets(numberRolled, betNumber) {\r\n\r\n        uint winAmount = (thisBet.amountBet * (10000 - edge)) / betNumber;\r\n\r\n        uint oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas);\r\n        winAmount = winAmount - oraclizeFee;\r\n\r\n        emit LOG_BetWon(thisBet.playerAddress, numberRolled, winAmount, betsCount);\r\n\r\n        safeSend(thisBet.playerAddress, winAmount);\r\n        \r\n        //统计\r\n        thisBet.winAmount = winAmount;\r\n        betsInfo[betsCount] = thisBet;\r\n        PlayerBook.betXaddr(thisBet.playerAddress, thisBet.amountBet, true, betsCount, winAmount);\r\n\r\n        //计算返现\r\n        affReward(thisBet, betsCount);\r\n\r\n        betsCount++;\r\n        \r\n        //Check for overflow and underflow\r\n        if ((investorsLosses + winAmount < investorsLosses) ||\r\n            (investorsLosses + winAmount < thisBet.amountBet)) {\r\n                revert(\"error\");\r\n            }\r\n\r\n        uint256 rLosses = winAmount - thisBet.amountBet;\r\n        if(winAmount < thisBet.amountBet)\r\n            rLosses = 0;\r\n\r\n        investorsLosses += rLosses;\r\n    }\r\n\r\n    function isLosingBet(Bet thisBet, uint numberRolled, uint betNumber)\r\n        private\r\n        onlyLosingBets(numberRolled, betNumber) {\r\n\r\n        emit LOG_BetLost(thisBet.playerAddress, numberRolled, betsCount);\r\n        safeSend(thisBet.playerAddress, 1);\r\n\r\n        //统计\r\n        betsInfo[betsCount] = thisBet;\r\n        PlayerBook.betXaddr(thisBet.playerAddress, thisBet.amountBet, false, betsCount, 0);\r\n        \r\n        //计算返现\r\n        affReward(thisBet, betsCount);\r\n\r\n        betsCount++;\r\n\r\n        //Check for overflow and underflow\r\n        if ((investorsProfit + thisBet.amountBet < investorsProfit) ||\r\n            (investorsProfit + thisBet.amountBet < thisBet.amountBet) ||\r\n            (thisBet.amountBet == 1)) {\r\n                revert(\"error\");\r\n            }\r\n        \r\n        investorsProfit += thisBet.amountBet - 1;\r\n    }\r\n\r\n    function affReward(Bet thisBet, uint256 betID)\r\n        private {\r\n        \r\n        if(thisBet.laff > 0)\r\n        {\r\n            uint laff_1_reward_max = thisBet.amountBet * edge / 10000;\r\n            uint laff_1_reward = thisBet.amountBet * edge * dealer_level_1_reward / (10000 * 100);\r\n            if(laff_1_reward >= dealerMinReward && laff_1_reward < laff_1_reward_max)\r\n            {\r\n                //一级代理返现\r\n                address laff_1_address = PlayerBook.getPlayerAddr(thisBet.laff);\r\n                dealer_reward_total += laff_1_reward;\r\n                safeSend(laff_1_address, laff_1_reward);\r\n                PlayerBook.rewardXID(thisBet.laff, laff_1_reward, betID, 1);\r\n\r\n                //二级代理id\r\n                uint laff_2_pid = PlayerBook.getPlayerLAff(thisBet.laff);\r\n                uint laff_2_reward = thisBet.amountBet * edge * dealer_level_2_reward / (10000 * 100);\r\n                if(laff_2_pid>0 && laff_2_reward >= dealerMinReward && laff_2_reward < laff_1_reward_max)\r\n                {\r\n                    //二级代理返现\r\n                    address laff_2_address = PlayerBook.getPlayerAddr(laff_2_pid);\r\n                    dealer_reward_total += laff_2_reward;\r\n                    safeSend(laff_2_address, laff_2_reward);\r\n                    PlayerBook.rewardXID(laff_2_pid, laff_2_reward, betID, 2);\r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    //SECTION III: INVEST & DIVEST\r\n\r\n    function increaseInvestment()\r\n        external\r\n        payable\r\n        onlyIfNotStopped\r\n        onlyMoreThanZero\r\n        onlyOwner  {\r\n\r\n        _bankRoll += msg.value;\r\n        invest_amount += msg.value;\r\n    }\r\n\r\n\r\n    //提现\r\n    function divest(uint amount)\r\n        external\r\n        onlyOwner {\r\n\r\n        //divest(msg.sender);\r\n        require(address(this).balance >= amount, \"Don't have enough balance\");\r\n        //require(_bankRoll > amount, \"Don't have enough _bankRoll\");\r\n\r\n        _bankRoll = address(this).balance - amount;\r\n        draw_amount += amount;\r\n        safeSend(owner, amount);\r\n\r\n        investorsProfit = 0;\r\n        investorsLosses = 0;\r\n        \r\n    }\r\n\r\n    //SECTION IV: CONTRACT MANAGEMENT\r\n\r\n    function stopContract()\r\n        external\r\n        onlyOwner {\r\n\r\n        isStopped = true;\r\n        emit LOG_ContractStopped();\r\n    }\r\n\r\n    function resumeContract()\r\n        external\r\n        onlyOwner {\r\n\r\n        isStopped = false;\r\n        emit LOG_ContractResumed();\r\n    }\r\n\r\n    function changeHouseAddress(address newHouse)\r\n        external\r\n        onlyOwner {\r\n\r\n        require(newHouse != address(0x0), \"new Houst is 0x0\");\r\n        //if (newHouse == address(0x0)) throw; //changed based on audit feedback\r\n        houseAddress = newHouse;\r\n        emit LOG_HouseAddressChanged(houseAddress, newHouse);\r\n    }\r\n\r\n    function changeOwnerAddress(address newOwner)\r\n        external\r\n        onlyOwner {\r\n\r\n        require(newOwner != address(0x0), \"new owner is 0x0\");\r\n        // if (newOwner == address(0x0)) throw;\r\n        owner = newOwner;\r\n        emit LOG_OwnerAddressChanged(owner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev prevents contracts from interacting with fomo3d \r\n     */\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n    \r\n    function regName(string name) \r\n        isHuman()\r\n        public\r\n        payable\r\n    {\r\n        bytes32 _name = name.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        PlayerBook.registerNameFromDapp.value(_paid)(_addr, _name);\r\n    }\r\n\r\n    function changeRandomOrgAPIKey(string newKey) \r\n        onlyOwner {\r\n\r\n        string oldKey = randomOrgAPIKey;\r\n        randomOrgAPIKey = newKey;\r\n        LOG_RandomOrgAPIKeyChanged(oldKey, newKey);\r\n    }\r\n\r\n    function changeGasLimitOfSafeSend(uint newGasLimit)\r\n        external\r\n        onlyOwner\r\n        onlyIfValidGas(newGasLimit) {\r\n\r\n        safeGas = newGasLimit;\r\n        emit LOG_GasLimitChanged(safeGas, newGasLimit);\r\n    }\r\n\r\n    //SECTION V: EMERGENCY WITHDRAWAL\r\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff) \r\n        external\r\n    {\r\n        require (msg.sender == address(PlayerBook), \"your not playerNames contract... hmmm..\");\r\n    }\r\n}\r\n\r\n\r\nlibrary NameFilter {\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.  \r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x \r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n        \r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n        \r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n        \r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n                \r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 || \r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n                \r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;    \r\n            }\r\n        }\r\n        \r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n        \r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_bankRoll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBankroll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"regName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invest_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHouse\",\"type\":\"address\"}],\"name\":\"changeHouseAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBetKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"withNumber\",\"type\":\"uint256\"}],\"name\":\"getMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"betNumber\",\"type\":\"uint256\"},{\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"getBetReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_laff\",\"type\":\"uint256\"}],\"name\":\"receivePlayerInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betsInfo\",\"outputs\":[{\"name\":\"playerAddress\",\"type\":\"address\"},{\"name\":\"betNumber\",\"type\":\"uint256\"},{\"name\":\"amountBet\",\"type\":\"uint256\"},{\"name\":\"numberRolled\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"betTime\",\"type\":\"uint256\"},{\"name\":\"winAmount\",\"type\":\"uint256\"},{\"name\":\"myid\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proofType\",\"type\":\"bytes1\"}],\"name\":\"changeOraclizeProofType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsLosses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"draw_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betNumber\",\"type\":\"uint256\"},{\"name\":\"affCode\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betsKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"divest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increaseInvestment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomOrgAPIKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"playerAddress\",\"type\":\"address\"},{\"name\":\"betNumber\",\"type\":\"uint256\"},{\"name\":\"amountBet\",\"type\":\"uint256\"},{\"name\":\"numberRolled\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"betTime\",\"type\":\"uint256\"},{\"name\":\"winAmount\",\"type\":\"uint256\"},{\"name\":\"myid\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGasLimit\",\"type\":\"uint256\"}],\"name\":\"changeGasLimitOfSafeSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_config\",\"type\":\"bytes32\"}],\"name\":\"changeOraclizeConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dealer_reward_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OraclizeIFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newKey\",\"type\":\"string\"}],\"name\":\"changeRandomOrgAPIKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"myid\",\"type\":\"bytes32\"}],\"name\":\"LOG_NewBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numberRolled\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"LOG_BetWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numberRolled\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"LOG_BetLost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_EmergencyWithdrawalProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"LOG_EmergencyWithdrawalFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"LOG_EmergencyWithdrawalSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_FailedSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_ZeroSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_InvestorEntrance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"LOG_InvestorCapitalUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_InvestorExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_ContractStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_ContractResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwnerAddress\",\"type\":\"address\"}],\"name\":\"LOG_OwnerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newHouseAddress\",\"type\":\"address\"}],\"name\":\"LOG_HouseAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldKey\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newKey\",\"type\":\"string\"}],\"name\":\"LOG_RandomOrgAPIKeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newGasLimit\",\"type\":\"uint256\"}],\"name\":\"LOG_GasLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_EmergencyAutoStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"LOG_EmergencyWithdrawalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_ValueIsTooBig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_SuccessfulSend\",\"type\":\"event\"}]","ContractName":"Bet100","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://213f0954730f0ab03784f939ee5471606caf18e584045f240ab913c8d2df035e"}]}