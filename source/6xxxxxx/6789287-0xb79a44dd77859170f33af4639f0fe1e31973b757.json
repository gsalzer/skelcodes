{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Destructible.sol\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n  function Destructible() payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Contactable.sol\r\n\r\n/**\r\n * @title Contactable token\r\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\r\n * contact information.\r\n */\r\ncontract Contactable is Ownable{\r\n\r\n    string public contactInformation;\r\n\r\n    /**\r\n     * @dev Allows the owner to set a string with their contact information.\r\n     * @param info The contact information to attach to the contract.\r\n     */\r\n    function setContactInformation(string info) onlyOwner public {\r\n         contactInformation = info;\r\n     }\r\n}\r\n\r\n// File: contracts/Restricted.sol\r\n\r\n/** @title Restricted\r\n *  Exposes onlyMonetha modifier\r\n */\r\ncontract Restricted is Ownable {\r\n\r\n    //MonethaAddress set event\r\n    event MonethaAddressSet(\r\n        address _address,\r\n        bool _isMonethaAddress\r\n    );\r\n\r\n    mapping (address => bool) public isMonethaAddress;\r\n\r\n    /**\r\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\r\n     */\r\n    modifier onlyMonetha() {\r\n        require(isMonethaAddress[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Allows owner to set new monetha address\r\n     */\r\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\r\n        isMonethaAddress[_address] = _isMonethaAddress;\r\n\r\n        MonethaAddressSet(_address, _isMonethaAddress);\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n/**\r\n* @title ERC20 interface\r\n*/\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function decimals() public view returns(uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n        \r\n    // Return type not defined intentionally since not all ERC20 tokens return proper result type\r\n    function transfer(address _to, uint256 _value) public;\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/MonethaGateway.sol\r\n\r\n/**\r\n *  @title MonethaGateway\r\n *\r\n *  MonethaGateway forward funds from order payment to merchant's wallet and collects Monetha fee.\r\n */\r\ncontract MonethaGateway is Pausable, Contactable, Destructible, Restricted {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    string constant VERSION = \"0.5\";\r\n\r\n    /**\r\n     *  Fee permille of Monetha fee.\r\n     *  1 permille (‰) = 0.1 percent (%)\r\n     *  15‰ = 1.5%\r\n     */\r\n    uint public constant FEE_PERMILLE = 15;\r\n    \r\n    /**\r\n     *  Address of Monetha Vault for fee collection\r\n     */\r\n    address public monethaVault;\r\n\r\n    /**\r\n     *  Account for permissions managing\r\n     */\r\n    address public admin;\r\n\r\n    event PaymentProcessedEther(address merchantWallet, uint merchantIncome, uint monethaIncome);\r\n    event PaymentProcessedToken(address tokenAddress, address merchantWallet, uint merchantIncome, uint monethaIncome);\r\n\r\n    /**\r\n     *  @param _monethaVault Address of Monetha Vault\r\n     */\r\n    constructor(address _monethaVault, address _admin) public {\r\n        require(_monethaVault != 0x0);\r\n        monethaVault = _monethaVault;\r\n        \r\n        setAdmin(_admin);\r\n    }\r\n    \r\n    /**\r\n     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\r\n     *      and collects Monetha fee.\r\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\r\n     *  @param _monethaFee is a fee collected by Monetha\r\n     */\r\n    function acceptPayment(address _merchantWallet, uint _monethaFee) external payable onlyMonetha whenNotPaused {\r\n        require(_merchantWallet != 0x0);\r\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(msg.value).div(1000)); // Monetha fee cannot be greater than 1.5% of payment\r\n        \r\n        uint merchantIncome = msg.value.sub(_monethaFee);\r\n\r\n        _merchantWallet.transfer(merchantIncome);\r\n        monethaVault.transfer(_monethaFee);\r\n\r\n        emit PaymentProcessedEther(_merchantWallet, merchantIncome, _monethaFee);\r\n    }\r\n\r\n    /**\r\n     *  acceptTokenPayment accept token payment from PaymentAcceptor, forwards it to merchant's wallet\r\n     *      and collects Monetha fee.\r\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\r\n     *  @param _monethaFee is a fee collected by Monetha\r\n     *  @param _tokenAddress is the token address\r\n     *  @param _value is the order value\r\n     */\r\n    function acceptTokenPayment(\r\n        address _merchantWallet,\r\n        uint _monethaFee,\r\n        address _tokenAddress,\r\n        uint _value\r\n    )\r\n        external onlyMonetha whenNotPaused\r\n    {\r\n        require(_merchantWallet != 0x0);\r\n\r\n        // Monetha fee cannot be greater than 1.5% of payment\r\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(_value).div(1000));\r\n\r\n        uint merchantIncome = _value.sub(_monethaFee);\r\n        \r\n        ERC20(_tokenAddress).transfer(_merchantWallet, merchantIncome);\r\n        ERC20(_tokenAddress).transfer(monethaVault, _monethaFee);\r\n        \r\n        emit PaymentProcessedToken(_tokenAddress, _merchantWallet, merchantIncome, _monethaFee);\r\n    }\r\n\r\n    /**\r\n     *  changeMonethaVault allows owner to change address of Monetha Vault.\r\n     *  @param newVault New address of Monetha Vault\r\n     */\r\n    function changeMonethaVault(address newVault) external onlyOwner whenNotPaused {\r\n        monethaVault = newVault;\r\n    }\r\n\r\n    /**\r\n     *  Allows other monetha account or contract to set new monetha address\r\n     */\r\n    function setMonethaAddress(address _address, bool _isMonethaAddress) public {\r\n        require(msg.sender == admin || msg.sender == owner);\r\n\r\n        isMonethaAddress[_address] = _isMonethaAddress;\r\n\r\n        emit MonethaAddressSet(_address, _isMonethaAddress);\r\n    }\r\n\r\n    /**\r\n     *  setAdmin allows owner to change address of admin.\r\n     *  @param _admin New address of admin\r\n     */\r\n    function setAdmin(address _admin) public onlyOwner {\r\n        require(_admin != 0x0);\r\n        admin = _admin;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"changeMonethaVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_merchantWallet\",\"type\":\"address\"},{\"name\":\"_monethaFee\",\"type\":\"uint256\"}],\"name\":\"acceptPayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMonethaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contactInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monethaVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"setContactInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"setMonethaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_merchantWallet\",\"type\":\"address\"},{\"name\":\"_monethaFee\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"acceptTokenPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_PERMILLE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_monethaVault\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"merchantWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"merchantIncome\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"monethaIncome\",\"type\":\"uint256\"}],\"name\":\"PaymentProcessedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"merchantWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"merchantIncome\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"monethaIncome\",\"type\":\"uint256\"}],\"name\":\"PaymentProcessedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"MonethaAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MonethaGateway","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000003a9f226b282539b161f8704b8dbc783c2f7860000000000000000000000000005479c12b062062fc53606a446b443147b0d194","Library":"","SwarmSource":"bzzr://e73f375d3222422011162aa68056ac83d45ec8c138256cc855beabcc19ba8c29"}]}