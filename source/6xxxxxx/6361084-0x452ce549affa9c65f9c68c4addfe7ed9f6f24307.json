{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\n/// @dev Note: the ERC-165 identifier for this interface is 0xf23a6e61.\r\ninterface IERC1155TokenReceiver {\r\n    /// @notice Handle the receipt of an ERC1155 type\r\n    /// @dev The smart contract calls this function on the recipient\r\n    ///  after a `safeTransfer`. This function MAY throw to revert and reject the\r\n    ///  transfer. Return of other than the magic value MUST result in the\r\n    ///  transaction being reverted.\r\n    ///  Note: the contract address is always the message sender.\r\n    /// @param _operator The address which called `safeTransferFrom` function\r\n    /// @param _from The address which previously owned the token\r\n    /// @param _id The identifier of the item being transferred\r\n    /// @param _value The amount of the item being transferred\r\n    /// @param _data Additional data with no specified format\r\n    /// @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    ///  unless throwing\r\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes _data) external returns(bytes4);\r\n}\r\n\r\ninterface IERC1155 {\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 indexed _id, uint256 _oldValue, uint256 _value);\r\n    event Transfer(address _spender, address indexed _from, address indexed _to, uint256 indexed _id, uint256 _value);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _id, uint256 _value) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data) external;\r\n    function approve(address _spender, uint256 _id, uint256 _currentValue, uint256 _value) external;\r\n    function balanceOf(uint256 _id, address _owner) external view returns (uint256);\r\n    function allowance(uint256 _id, address _owner, address _spender) external view returns (uint256);\r\n}\r\n\r\ninterface IERC1155Extended {\r\n    function transfer(address _to, uint256 _id, uint256 _value) external;\r\n    function safeTransfer(address _to, uint256 _id, uint256 _value, bytes _data) external;\r\n}\r\n\r\ninterface IERC1155BatchTransfer {\r\n    function batchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _values) external;\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _values, bytes _data) external;\r\n    function batchApprove(address _spender, uint256[] _ids,  uint256[] _currentValues, uint256[] _values) external;\r\n}\r\n\r\ninterface IERC1155BatchTransferExtended {\r\n    function batchTransfer(address _to, uint256[] _ids, uint256[] _values) external;\r\n    function safeBatchTransfer(address _to, uint256[] _ids, uint256[] _values, bytes _data) external;\r\n}\r\n\r\ninterface IERC1155Operators {\r\n    event OperatorApproval(address indexed _owner, address indexed _operator, uint256 indexed _id, bool _approved);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function setApproval(address _operator, uint256[] _ids, bool _approved) external;\r\n    function isApproved(address _owner, address _operator, uint256 _id)  external view returns (bool);\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\r\n}\r\n\r\ninterface IERC1155Views {\r\n    function totalSupply(uint256 _id) external view returns (uint256);\r\n    function name(uint256 _id) external view returns (string);\r\n    function symbol(uint256 _id) external view returns (string);\r\n    function decimals(uint256 _id) external view returns (uint8);\r\n    function uri(uint256 _id) external view returns (string);\r\n}\r\n\r\ncontract ERC1155 is IERC1155, IERC1155Extended, IERC1155BatchTransfer, IERC1155BatchTransferExtended {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // Variables\r\n    struct Items {\r\n        string name;\r\n        uint256 totalSupply;\r\n        mapping (address => uint256) balances;\r\n    }\r\n    mapping (uint256 => uint8) public decimals;\r\n    mapping (uint256 => string) public symbols;\r\n    mapping (uint256 => mapping(address => mapping(address => uint256))) public allowances;\r\n    mapping (uint256 => Items) public items;\r\n    mapping (uint256 => string) public metadataURIs;\r\n\r\n    bytes4 constant private ERC1155_RECEIVED = 0xf23a6e61;\r\n\r\n/////////////////////////////////////////// IERC1155 //////////////////////////////////////////////\r\n\r\n    // Events\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 indexed _id, uint256 _oldValue, uint256 _value);\r\n    event Transfer(address _spender, address indexed _from, address indexed _to, uint256 indexed _id, uint256 _value);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _id, uint256 _value) external {\r\n        if(_from != msg.sender) {\r\n            //require(allowances[_id][_from][msg.sender] >= _value);\r\n            allowances[_id][_from][msg.sender] = allowances[_id][_from][msg.sender].sub(_value);\r\n        }\r\n\r\n        items[_id].balances[_from] = items[_id].balances[_from].sub(_value);\r\n        items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\r\n\r\n        emit Transfer(msg.sender, _from, _to, _id, _value);\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data) external {\r\n        this.transferFrom(_from, _to, _id, _value);\r\n\r\n        // solium-disable-next-line arg-overflow\r\n        require(_checkAndCallSafeTransfer(_from, _to, _id, _value, _data));\r\n    }\r\n\r\n    function approve(address _spender, uint256 _id, uint256 _currentValue, uint256 _value) external {\r\n        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\r\n        require(_value == 0 || allowances[_id][msg.sender][_spender] == _currentValue);\r\n        allowances[_id][msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _id, _currentValue, _value);\r\n    }\r\n\r\n    function balanceOf(uint256 _id, address _owner) external view returns (uint256) {\r\n        return items[_id].balances[_owner];\r\n    }\r\n\r\n    function allowance(uint256 _id, address _owner, address _spender) external view returns (uint256) {\r\n        return allowances[_id][_owner][_spender];\r\n    }\r\n\r\n/////////////////////////////////////// IERC1155Extended //////////////////////////////////////////\r\n\r\n    function transfer(address _to, uint256 _id, uint256 _value) external {\r\n        // Not needed. SafeMath will do the same check on .sub(_value)\r\n        //require(_value <= items[_id].balances[msg.sender]);\r\n        items[_id].balances[msg.sender] = items[_id].balances[msg.sender].sub(_value);\r\n        items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\r\n        emit Transfer(msg.sender, msg.sender, _to, _id, _value);\r\n    }\r\n\r\n    function safeTransfer(address _to, uint256 _id, uint256 _value, bytes _data) external {\r\n        this.transfer(_to, _id, _value);\r\n\r\n        // solium-disable-next-line arg-overflow\r\n        require(_checkAndCallSafeTransfer(msg.sender, _to, _id, _value, _data));\r\n    }\r\n\r\n//////////////////////////////////// IERC1155BatchTransfer ////////////////////////////////////////\r\n\r\n    function batchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _values) external {\r\n        uint256 _id;\r\n        uint256 _value;\r\n\r\n        if(_from == msg.sender) {\r\n            for (uint256 i = 0; i < _ids.length; ++i) {\r\n                _id = _ids[i];\r\n                _value = _values[i];\r\n\r\n                items[_id].balances[_from] = items[_id].balances[_from].sub(_value);\r\n                items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\r\n\r\n                emit Transfer(msg.sender, _from, _to, _id, _value);\r\n            }\r\n        }\r\n        else {\r\n            for (i = 0; i < _ids.length; ++i) {\r\n                _id = _ids[i];\r\n                _value = _values[i];\r\n\r\n                allowances[_id][_from][msg.sender] = allowances[_id][_from][msg.sender].sub(_value);\r\n\r\n                items[_id].balances[_from] = items[_id].balances[_from].sub(_value);\r\n                items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\r\n\r\n                emit Transfer(msg.sender, _from, _to, _id, _value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _values, bytes _data) external {\r\n        this.batchTransferFrom(_from, _to, _ids, _values);\r\n\r\n        for (uint256 i = 0; i < _ids.length; ++i) {\r\n            // solium-disable-next-line arg-overflow\r\n            require(_checkAndCallSafeTransfer(_from, _to, _ids[i], _values[i], _data));\r\n        }\r\n    }\r\n\r\n    function batchApprove(address _spender, uint256[] _ids,  uint256[] _currentValues, uint256[] _values) external {\r\n        uint256 _id;\r\n        uint256 _value;\r\n\r\n        for (uint256 i = 0; i < _ids.length; ++i) {\r\n            _id = _ids[i];\r\n            _value = _values[i];\r\n\r\n            require(_value == 0 || allowances[_id][msg.sender][_spender] == _currentValues[i]);\r\n            allowances[_id][msg.sender][_spender] = _value;\r\n            emit Approval(msg.sender, _spender, _id, _currentValues[i], _value);\r\n        }\r\n    }\r\n\r\n//////////////////////////////// IERC1155BatchTransferExtended ////////////////////////////////////\r\n\r\n    function batchTransfer(address _to, uint256[] _ids, uint256[] _values) external {\r\n        uint256 _id;\r\n        uint256 _value;\r\n\r\n        for (uint256 i = 0; i < _ids.length; ++i) {\r\n            _id = _ids[i];\r\n            _value = _values[i];\r\n\r\n            items[_id].balances[msg.sender] = items[_id].balances[msg.sender].sub(_value);\r\n            items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\r\n\r\n            emit Transfer(msg.sender, msg.sender, _to, _id, _value);\r\n        }\r\n    }\r\n\r\n    function safeBatchTransfer(address _to, uint256[] _ids, uint256[] _values, bytes _data) external {\r\n        this.batchTransfer(_to, _ids, _values);\r\n\r\n        for (uint256 i = 0; i < _ids.length; ++i) {\r\n            // solium-disable-next-line arg-overflow\r\n            require(_checkAndCallSafeTransfer(msg.sender, _to, _ids[i], _values[i], _data));\r\n        }\r\n    }\r\n\r\n//////////////////////////////// IERC1155BatchTransferExtended ////////////////////////////////////\r\n\r\n    // Optional meta data view Functions\r\n    // consider multi-lingual support for name?\r\n    function name(uint256 _id) external view returns (string) {\r\n        return items[_id].name;\r\n    }\r\n\r\n    function symbol(uint256 _id) external view returns (string) {\r\n        return symbols[_id];\r\n    }\r\n\r\n    function decimals(uint256 _id) external view returns (uint8) {\r\n        return decimals[_id];\r\n    }\r\n\r\n    function totalSupply(uint256 _id) external view returns (uint256) {\r\n        return items[_id].totalSupply;\r\n    }\r\n\r\n    function uri(uint256 _id) external view returns (string) {\r\n        return metadataURIs[_id];\r\n    }\r\n\r\n////////////////////////////////////////// OPTIONALS //////////////////////////////////////////////\r\n\r\n\r\n    function multicastTransfer(address[] _to, uint256[] _ids, uint256[] _values) external {\r\n        for (uint256 i = 0; i < _to.length; ++i) {\r\n            uint256 _id = _ids[i];\r\n            uint256 _value = _values[i];\r\n            address _dst = _to[i];\r\n\r\n            items[_id].balances[msg.sender] = items[_id].balances[msg.sender].sub(_value);\r\n            items[_id].balances[_dst] = _value.add(items[_id].balances[_dst]);\r\n\r\n            emit Transfer(msg.sender, msg.sender, _dst, _id, _value);\r\n        }\r\n    }\r\n\r\n    function safeMulticastTransfer(address[] _to, uint256[] _ids, uint256[] _values, bytes _data) external {\r\n        this.multicastTransfer(_to, _ids, _values);\r\n\r\n        for (uint256 i = 0; i < _ids.length; ++i) {\r\n            // solium-disable-next-line arg-overflow\r\n            require(_checkAndCallSafeTransfer(msg.sender, _to[i], _ids[i], _values[i], _data));\r\n        }\r\n    }\r\n\r\n////////////////////////////////////////// INTERNAL //////////////////////////////////////////////\r\n\r\n    function _checkAndCallSafeTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes _data\r\n    )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        if (!_to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received(\r\n            msg.sender, _from, _id, _value, _data);\r\n        return (retval == ERC1155_RECEIVED);\r\n    }\r\n}\r\n\r\n/**\r\n    @dev Mintable form of ERC1155\r\n    Shows how easy it is to mint new items\r\n*/\r\ncontract ERC1155V3 is ERC1155 {\r\n    mapping (uint256 => address) public minters;\r\n    uint256 public nonce;\r\n\r\n    modifier minterOnly(uint256 _id) {\r\n        require(minters[_id] == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function mint(string _name, uint256 _totalSupply, string _uri, uint8 _decimals, string _symbol)\r\n    external returns(uint256 _id) {\r\n        _id = ++nonce;\r\n        minters[_id] = msg.sender; //\r\n\r\n        items[_id].name = _name;\r\n        items[_id].totalSupply = _totalSupply;\r\n        metadataURIs[_id] = _uri;\r\n        decimals[_id] = _decimals;\r\n        symbols[_id] = _symbol;\r\n\r\n        // Grant the items to the minter\r\n        items[_id].balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    function setURI(uint256 _id, string _uri) external minterOnly(_id) {\r\n        metadataURIs[_id] = _uri;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadataURIs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multicastTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"symbols\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"name\":\"_currentValues\",\"type\":\"uint256[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMulticastTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ERC1155V3","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1feebe9c0d4c00adbe37d4252c99367dee5f7f9f5b03c0a80048861672a6d123"}]}