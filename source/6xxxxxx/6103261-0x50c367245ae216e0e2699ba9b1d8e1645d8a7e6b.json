{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= balances[msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract BlockchainToken is StandardToken, Ownable {\r\n\r\n    string public constant name = 'Blockchain Token 2.0';\r\n\r\n    string public constant symbol = 'BCT';\r\n\r\n    uint32 public constant decimals = 18;\r\n\r\n    /**\r\n     *  how many USD cents for 1 * 10^18 token\r\n     */\r\n    uint public price = 210;\r\n\r\n    function setPrice(uint _price) onlyOwner public {\r\n        price = _price;\r\n    }\r\n\r\n    uint256 public INITIAL_SUPPLY = 21000000 * 1 ether;\r\n\r\n    /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.\r\n   */\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    modifier hasMintPermission() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n    {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _addr The address that will have _amount of tokens burned\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(\r\n        address _addr,\r\n        uint256 _value\r\n    )\r\n    public onlyOwner\r\n    {\r\n        _burn(_addr, _value);\r\n    }\r\n\r\n    function _burn(\r\n        address _who,\r\n        uint256 _value\r\n    )\r\n    internal\r\n    {\r\n        require(_value <= balances[_who]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() public onlyOwner canMint returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract WealthBuilderToken is MintableToken {\r\n\r\n    string public name = 'Wealth Builder Token';\r\n\r\n    string public symbol = 'WBT';\r\n\r\n    uint32 public decimals = 18;\r\n\r\n    /**\r\n     *  how many {tokens*10^(-18)} get per 1wei\r\n     */\r\n    uint public rate = 10 ** 7;\r\n    /**\r\n     *  multiplicator for rate\r\n     */\r\n    uint public mrate = 10 ** 7;\r\n\r\n    function setRate(uint _rate) onlyOwner public {\r\n        rate = _rate;\r\n    }\r\n\r\n}\r\n\r\ncontract Data is Ownable {\r\n\r\n    // node => its parent\r\n    mapping (address => address) private parent;\r\n\r\n    // node => its status\r\n    mapping (address => uint8) public statuses;\r\n\r\n    // node => sum of all his child deposits in USD cents\r\n    mapping (address => uint) public referralDeposits;\r\n\r\n    // client => balance in wei*10^(-6) available for withdrawal\r\n    mapping(address => uint256) private balances;\r\n\r\n    // investor => balance in wei*10^(-6) available for withdrawal\r\n    mapping(address => uint256) private investorBalances;\r\n\r\n    function parentOf(address _addr) public constant returns (address) {\r\n        return parent[_addr];\r\n    }\r\n\r\n    function balanceOf(address _addr) public constant returns (uint256) {\r\n        return balances[_addr] / 1000000;\r\n    }\r\n\r\n    function investorBalanceOf(address _addr) public constant returns (uint256) {\r\n        return investorBalances[_addr] / 1000000;\r\n    }\r\n\r\n    /**\r\n     * @dev The Data constructor to set up the first depositer\r\n     */\r\n    constructor() public {\r\n        // DirectorOfRegion - 7\r\n        statuses[msg.sender] = 7;\r\n    }\r\n\r\n    function addBalance(address _addr, uint256 amount) onlyOwner public {\r\n        balances[_addr] += amount;\r\n    }\r\n\r\n    function subtrBalance(address _addr, uint256 amount) onlyOwner public {\r\n        require(balances[_addr] >= amount);\r\n        balances[_addr] -= amount;\r\n    }\r\n\r\n    function addInvestorBalance(address _addr, uint256 amount) onlyOwner public {\r\n        investorBalances[_addr] += amount;\r\n    }\r\n\r\n    function subtrInvestorBalance(address _addr, uint256 amount) onlyOwner public {\r\n        require(investorBalances[_addr] >= amount);\r\n        investorBalances[_addr] -= amount;\r\n    }\r\n\r\n    function addReferralDeposit(address _addr, uint256 amount) onlyOwner public {\r\n        referralDeposits[_addr] += amount;\r\n    }\r\n\r\n    function subtrReferralDeposit(address _addr, uint256 amount) onlyOwner public {\r\n        referralDeposits[_addr] -= amount;\r\n    }\r\n\r\n    function setStatus(address _addr, uint8 _status) onlyOwner public {\r\n        statuses[_addr] = _status;\r\n    }\r\n\r\n    function setParent(address _addr, address _parent) onlyOwner public {\r\n        parent[_addr] = _parent;\r\n    }\r\n\r\n}\r\n\r\ncontract Declaration {\r\n\r\n    // threshold in USD => status\r\n    mapping (uint => uint8) statusThreshold;\r\n\r\n    // status => (depositsNumber => percentage / 10)\r\n    mapping (uint8 => mapping (uint16 => uint256)) feeDistribution;\r\n\r\n    // status thresholds in USD\r\n    uint[8] thresholds = [\r\n    0, 5000, 35000, 150000, 500000, 2500000, 5000000, 10000000\r\n    ];\r\n\r\n    uint[5] referralFees = [50, 30, 20, 10, 5];\r\n    uint[5] serviceFees = [25, 20, 15, 10, 5];\r\n\r\n\r\n    /**\r\n     * @dev The Declaration constructor to define some constants\r\n     */\r\n    constructor() public {\r\n        setFeeDistributionsAndStatusThresholds();\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Set up fee distribution & status thresholds\r\n     */\r\n    function setFeeDistributionsAndStatusThresholds() private {\r\n        // Agent - 0\r\n        setFeeDistributionAndStatusThreshold(0, [uint16(120), uint16(80), uint16(50), uint16(20), uint16(10)], thresholds[0]);\r\n        // SilverAgent - 1\r\n        setFeeDistributionAndStatusThreshold(1, [uint16(160), uint16(100), uint16(60), uint16(30), uint16(20)], thresholds[1]);\r\n        // Manager - 2\r\n        setFeeDistributionAndStatusThreshold(2, [uint16(200), uint16(120), uint16(80), uint16(40), uint16(25)], thresholds[2]);\r\n        // ManagerOfGroup - 3\r\n        setFeeDistributionAndStatusThreshold(3, [uint16(250), uint16(150), uint16(100), uint16(50), uint16(30)], thresholds[3]);\r\n        // ManagerOfRegion - 4\r\n        setFeeDistributionAndStatusThreshold(4, [300, 180, 120, 60, 35], thresholds[4]);\r\n        // Director - 5\r\n        setFeeDistributionAndStatusThreshold(5, [350, 210, 140, 70, 40], thresholds[5]);\r\n        // DirectorOfGroup - 6\r\n        setFeeDistributionAndStatusThreshold(6, [400, 240, 160, 80, 45], thresholds[6]);\r\n        // DirectorOfRegion - 7\r\n        setFeeDistributionAndStatusThreshold(7, [500, 300, 200, 100, 50], thresholds[7]);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Set up specific fee and status threshold\r\n     * @param _st The status to set up for\r\n     * @param _percentages Array of pecentages, which should go to member\r\n     * @param _threshold The minimum amount of sum of children deposits to get\r\n     *                   the status _st\r\n     */\r\n    function setFeeDistributionAndStatusThreshold(\r\n        uint8 _st,\r\n        uint16[5] _percentages,\r\n        uint _threshold\r\n    )\r\n    private\r\n    {\r\n        statusThreshold[_threshold] = _st;\r\n        for (uint8 i = 0; i < _percentages.length; i++) {\r\n            feeDistribution[_st][i] = _percentages[i];\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract Referral is Declaration, Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    // reference to WBT token contract\r\n    WealthBuilderToken private wbtToken;\r\n\r\n    // reference to BCT2.0 token contract\r\n    BlockchainToken private bctToken;\r\n\r\n    // reference to data contract\r\n    Data private data;\r\n\r\n    /**\r\n     *  how many USD cents get per ETH\r\n     */\r\n    uint public ethUsdRate;\r\n\r\n    /**\r\n     * @dev The Referral constructor to set up the first depositer,\r\n     * reference to system wbt token, bct token, data and set ethUsdRate\r\n     */\r\n    constructor(\r\n        uint _ethUsdRate,\r\n        address _wbtToken,\r\n        address _bctToken,\r\n        address _data\r\n    )\r\n    public\r\n    {\r\n        ethUsdRate = _ethUsdRate;\r\n\r\n        // instantiate wbtToken & data contracts\r\n        wbtToken = WealthBuilderToken(_wbtToken);\r\n        bctToken = BlockchainToken(_bctToken);\r\n        data = Data(_data);\r\n    }\r\n\r\n    /**\r\n     * @dev Callback function\r\n     */\r\n    function() payable public {\r\n    }\r\n\r\n    /**\r\n     * @dev invest wbt token function\r\n     * @param _client to transfer WBT token\r\n     * @param _depositsCount num of the deposit\r\n     */\r\n    function invest(\r\n        address _client,\r\n        uint8 _depositsCount\r\n    )\r\n    payable public\r\n    {\r\n        uint amount = msg.value;\r\n\r\n        // if less then 5 deposits\r\n        if (_depositsCount < 5) {\r\n\r\n            uint serviceFee;\r\n\r\n            serviceFee = amount * serviceFees[_depositsCount];\r\n\r\n            uint referralFee = amount * referralFees[_depositsCount];\r\n\r\n            // distribute deposit fee among users above on the branch & update users' statuses\r\n            distribute(data.parentOf(_client), 0, _depositsCount, amount);\r\n\r\n            // update balance & number of deposits of user\r\n            uint active = (amount * 100).sub(referralFee).sub(serviceFee);\r\n\r\n            wbtToken.mint(_client, active / 100 * wbtToken.rate() / wbtToken.mrate());\r\n\r\n            // update owner`s balance\r\n            data.addBalance(owner, serviceFee * 10000);\r\n        } else {\r\n            wbtToken.mint(_client, amount * wbtToken.rate() / wbtToken.mrate());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev invest bct token function\r\n     * @param _client to transfer BCT token\r\n     */\r\n    function investBct(\r\n        address _client\r\n    )\r\n    public payable\r\n    {\r\n        uint amount = msg.value;\r\n        // distribute deposit fee among users above on the branch & update users' statuses\r\n        distribute(data.parentOf(_client), 0, 0, amount);\r\n\r\n        bctToken.transfer(_client, amount * ethUsdRate / bctToken.price());\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Recursively distribute deposit fee between parents\r\n     * @param _node Parent address\r\n     * @param _prevPercentage The percentage for previous parent\r\n     * @param _depositsCount Count of depositer deposits\r\n     * @param _amount The amount of deposit\r\n     */\r\n    function distribute(\r\n        address _node,\r\n        uint _prevPercentage,\r\n        uint8 _depositsCount,\r\n        uint _amount\r\n    )\r\n    private\r\n    {\r\n        address node = _node;\r\n        uint prevPercentage = _prevPercentage;\r\n\r\n        // distribute deposit fee among users above on the branch & update users' statuses\r\n        while(node != address(0)) {\r\n            uint8 status = data.statuses(node);\r\n\r\n            // count fee percentage of current node\r\n            uint nodePercentage = feeDistribution[status][_depositsCount];\r\n            uint percentage = nodePercentage.sub(prevPercentage);\r\n            data.addBalance(node, _amount * percentage * 1000);\r\n\r\n            //update refferals sum amount\r\n            data.addReferralDeposit(node, _amount * ethUsdRate / 10**18);\r\n\r\n            //update status\r\n            updateStatus(node, status);\r\n\r\n            node = data.parentOf(node);\r\n            prevPercentage = nodePercentage;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Update node status if children sum amount is enough\r\n     * @param _node Node address\r\n     * @param _status Node current status\r\n     */\r\n    function updateStatus(\r\n        address _node,\r\n        uint8 _status\r\n    )\r\n    private\r\n    {\r\n        uint refDep = data.referralDeposits(_node);\r\n\r\n        for (uint i = thresholds.length - 1; i > _status; i--) {\r\n            uint threshold = thresholds[i] * 100;\r\n\r\n            if (refDep >= threshold) {\r\n                data.setStatus(_node, statusThreshold[thresholds[i]]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Set wbtToken exchange rate\r\n     * @param _rate wbt/eth rate\r\n     */\r\n    function setRate(\r\n        uint _rate\r\n    )\r\n    onlyOwner public\r\n    {\r\n        wbtToken.setRate(_rate);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Set bctToken price\r\n     * @param _price bct/usd rate\r\n     */\r\n    function setPrice(\r\n        uint _price\r\n    )\r\n    onlyOwner public\r\n    {\r\n        bctToken.setPrice(_price);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Set ETH exchange rate\r\n     * @param _ethUsdRate eth/usd rate\r\n     */\r\n    function setEthUsdRate(\r\n        uint _ethUsdRate\r\n    )\r\n    onlyOwner public\r\n    {\r\n        ethUsdRate = _ethUsdRate;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Add new child\r\n     * @param _inviter parent\r\n     * @param _invitee child\r\n     */\r\n    function invite(\r\n        address _inviter,\r\n        address _invitee\r\n    )\r\n    public onlyOwner\r\n    {\r\n        data.setParent(_invitee, _inviter);\r\n        // Agent - 0\r\n        data.setStatus(_invitee, 0);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Set _status for _addr\r\n     * @param _addr address\r\n     * @param _status ref. status\r\n     */\r\n    function setStatus(\r\n        address _addr,\r\n        uint8 _status\r\n    )\r\n    public onlyOwner\r\n    {\r\n        data.setStatus(_addr, _status);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Withdraw _amount for _addr\r\n     * @param _addr withdrawal address\r\n     * @param _amount withdrawal amount\r\n     * @param investor is investor\r\n     */\r\n    function withdraw(\r\n        address _addr,\r\n        uint256 _amount,\r\n        bool investor\r\n    )\r\n        public onlyOwner\r\n    {\r\n        uint amount = investor ? data.investorBalanceOf(_addr) : data.balanceOf(_addr);\r\n        require(amount >= _amount && address(this).balance >= _amount);\r\n\r\n        if (investor) {\r\n            data.subtrInvestorBalance(_addr, _amount * 1000000);\r\n        } else {\r\n            data.subtrBalance(_addr, _amount * 1000000);\r\n        }\r\n\r\n        _addr.transfer(_amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Withdraw contract balance to _addr\r\n     * @param _addr withdrawal address\r\n     */\r\n    function withdrawOwner(\r\n        address _addr,\r\n        uint256 _amount\r\n    )\r\n    public onlyOwner\r\n    {\r\n        require(address(this).balance >= _amount);\r\n        _addr.transfer(_amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Withdraw corresponding amount of ETH to _addr and burn _value tokens\r\n     * @param _addr buyer address\r\n     * @param _amount amount of tokens to buy\r\n     */\r\n    function transferBctToken(\r\n        address _addr,\r\n        uint _amount\r\n    )\r\n    onlyOwner public\r\n    {\r\n        require(bctToken.balanceOf(this) >= _amount);\r\n        bctToken.transfer(_addr, _amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Withdraw corresponding amount of ETH to _addr and burn _value tokens\r\n     * @param _addr withdrawal address\r\n     * @param _amount amount of tokens to sell\r\n     */\r\n    function withdrawWbtToken(\r\n        address _addr,\r\n        uint256 _amount\r\n    )\r\n    onlyOwner public\r\n    {\r\n        wbtToken.burn(_addr, _amount);\r\n        uint256 etherValue = _amount * wbtToken.mrate() / wbtToken.rate();\r\n        _addr.transfer(etherValue);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer ownership of wbtToken contract to _addr\r\n     * @param _addr address\r\n     */\r\n    function transferTokenOwnership(\r\n        address _addr\r\n    )\r\n    onlyOwner public\r\n    {\r\n        wbtToken.transferOwnership(_addr);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer ownership of data contract to _addr\r\n     * @param _addr address\r\n     */\r\n    function transferDataOwnership(\r\n        address _addr\r\n    )\r\n    onlyOwner public\r\n    {\r\n        data.transferOwnership(_addr);\r\n    }\r\n\r\n}\r\n\r\n//Payment Channel\r\ncontract PChannelBct is Ownable {\r\n\r\n    Referral private refProgram;\r\n\r\n    constructor(address _refProgram) public {\r\n        refProgram = Referral(_refProgram);\r\n    }\r\n\r\n    function() payable public {\r\n        uint amount = msg.value;\r\n        refProgram.investBct.value(amount)(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Set investors contract address\r\n     * @param _addr address\r\n     */\r\n    function setRefProgram(address _addr) public onlyOwner {\r\n        refProgram = Referral(_addr);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRefProgram\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_refProgram\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PChannelBct","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ebb060f9d0029082a04f78d84b9fb9d3d26f9a93","Library":"","SwarmSource":"bzzr://c68c9ee188689f954b7c553015dd69c424f612f1ae5da35ddcd64df42afe9f4d"}]}