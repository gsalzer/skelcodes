{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/IRegistry.sol\r\n\r\n// limited ContractRegistry definition\r\ninterface IRegistry {\r\n  function owner()\r\n    external\r\n    returns(address);\r\n\r\n  function updateContractAddress(\r\n    string _name,\r\n    address _address\r\n  )\r\n    external\r\n    returns (address);\r\n\r\n  function getContractAddress(\r\n    string _name\r\n  )\r\n    external\r\n    view\r\n    returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IExchangeRateProvider.sol\r\n\r\ninterface IExchangeRateProvider {\r\n  function sendQuery(\r\n    string _queryString,\r\n    uint256 _callInterval,\r\n    uint256 _callbackGasLimit,\r\n    string _queryType\r\n  )\r\n    external\r\n    payable\r\n    returns (bool);\r\n\r\n  function setCallbackGasPrice(uint256 _gasPrice)\r\n    external\r\n    returns (bool);\r\n\r\n  function selfDestruct(address _address)\r\n    external;\r\n}\r\n\r\n// File: contracts/ExchangeRates.sol\r\n\r\n/*\r\nQ/A\r\nQ: Why are there two contracts for ExchangeRates?\r\nA: Testing Oraclize seems to be a bit difficult especially considering the\r\nbridge requires node v6... With that in mind, it was decided that the best way\r\nto move forward was to isolate the oraclize functionality and replace with\r\na stub in order to facilitate effective tests.\r\n\r\nQ: Why are rates private?\r\nA: So that they can be returned through custom getters getRate and\r\ngetRateReadable. This is so that we can revert when a rate has not been\r\ninitialized or an error happened when fetching. Oraclize returns '' when\r\nerroring which we parse as a uint256 which turns to 0.\r\n*/\r\n\r\n// main contract\r\ncontract ExchangeRates is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint8 public constant version = 1;\r\n  uint256 public constant permilleDenominator = 1000;\r\n  // instance of Registry to be used for getting other contract addresses\r\n  IRegistry private registry;\r\n  // flag used to tell recursive rate fetching to stop\r\n  bool public ratesActive = true;\r\n\r\n  struct Settings {\r\n    string queryString;\r\n    uint256 callInterval;\r\n    uint256 callbackGasLimit;\r\n    // Rate penalty that is applied on fetched fiat rates. The penalty\r\n    // is specified at permille-accuracy. Example: 18 => 18/1000 = 1.8% penalty.\r\n    uint256 ratePenalty;\r\n  }\r\n\r\n  // the actual exchange rate for each currency\r\n  // private so that when rate is 0 (error or unset) we can revert through\r\n  // getter functions getRate and getRateReadable\r\n  mapping (bytes32 => uint256) private rates;\r\n  // points to currencySettings from callback\r\n  // is used to validate queryIds from ExchangeRateProvider\r\n  mapping (bytes32 => string) public queryTypes;\r\n  // storage for query settings... modifiable for each currency\r\n  // accessed and used by ExchangeRateProvider\r\n  mapping (string => Settings) private currencySettings;\r\n\r\n  event RateUpdated(string currency, uint256 rate);\r\n  event NotEnoughBalance();\r\n  event QuerySent(string currency);\r\n  event SettingsUpdated(string currency);\r\n\r\n  // used to only allow specific contract to call specific functions\r\n  modifier onlyContract(string _contractName)\r\n  {\r\n    require(\r\n      msg.sender == registry.getContractAddress(_contractName)\r\n    );\r\n    _;\r\n  }\r\n\r\n  // sets registry for talking to ExchangeRateProvider\r\n  constructor(\r\n    address _registryAddress\r\n  )\r\n    public\r\n    payable\r\n  {\r\n    require(_registryAddress != address(0));\r\n    registry = IRegistry(_registryAddress);\r\n    owner = msg.sender;\r\n  }\r\n\r\n  // start rate fetching for a specific currency. Kicks off the first of\r\n  // possibly many recursive query calls on ExchangeRateProvider to get rates.\r\n  function fetchRate(string _queryType)\r\n    external\r\n    onlyOwner\r\n    payable\r\n    returns (bool)\r\n  {\r\n    // get the ExchangeRateProvider from registry\r\n    IExchangeRateProvider provider = IExchangeRateProvider(\r\n      registry.getContractAddress(\"ExchangeRateProvider\")\r\n    );\r\n\r\n    // get settings to use in query on ExchangeRateProvider\r\n    uint256 _callInterval;\r\n    uint256 _callbackGasLimit;\r\n    string memory _queryString;\r\n    uint256 _ratePenalty;\r\n    (\r\n      _callInterval,\r\n      _callbackGasLimit,\r\n      _queryString,\r\n      _ratePenalty // not used in this function\r\n    ) = getCurrencySettings(_queryType);\r\n\r\n    // check that queryString isn't empty before making the query\r\n    require(bytes(_queryString).length > 0);\r\n\r\n    // make query on ExchangeRateProvider\r\n    // forward any ether value sent on to ExchangeRateProvider\r\n    // setQuery is called from ExchangeRateProvider to trigger an event\r\n    // whether there is enough balance or not\r\n    provider.sendQuery.value(msg.value)(\r\n      _queryString,\r\n      _callInterval,\r\n      _callbackGasLimit,\r\n      _queryType\r\n    );\r\n    return true;\r\n  }\r\n\r\n  //\r\n  // start exchange rate provider only functions\r\n  //\r\n\r\n  // set a pending queryId callable only by ExchangeRateProvider\r\n  // set from sendQuery on ExchangeRateProvider\r\n  // used to check that correct query is being matched to correct values\r\n  function setQueryId(\r\n    bytes32 _queryId,\r\n    string _queryType\r\n  )\r\n    external\r\n    onlyContract(\"ExchangeRateProvider\")\r\n    returns (bool)\r\n  {\r\n    if (_queryId[0] != 0x0 && bytes(_queryType)[0] != 0x0) {\r\n      emit QuerySent(_queryType);\r\n      queryTypes[_queryId] = _queryType;\r\n    } else {\r\n      emit NotEnoughBalance();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // called only by ExchangeRateProvider\r\n  // sets the rate for a given currency when query __callback occurs.\r\n  // checks that the queryId returned is correct.\r\n  function setRate(\r\n    bytes32 _queryId,\r\n    uint256 _rateInCents\r\n  )\r\n    external\r\n    onlyContract(\"ExchangeRateProvider\")\r\n    returns (bool)\r\n  {\r\n    // get the query type (usd, eur, etc)\r\n    string memory _currencyName = queryTypes[_queryId];\r\n    // check that first byte of _queryType is not 0 (something wrong or empty)\r\n    // if the queryType is 0 then the queryId is incorrect\r\n    require(bytes(_currencyName).length > 0);\r\n    // get and apply penalty on fiat rate to compensate for fees\r\n    uint256 _penaltyInPermille = currencySettings[toUpperCase(_currencyName)].ratePenalty;\r\n    uint256 _penalizedRate = _rateInCents\r\n      .mul(permilleDenominator.sub(_penaltyInPermille))\r\n      .div(permilleDenominator);\r\n    // set _queryId to empty (uninitialized, to prevent from being called again)\r\n    delete queryTypes[_queryId];\r\n    // set currency rate depending on _queryType (USD, EUR, etc.)\r\n    rates[keccak256(abi.encodePacked(_currencyName))] = _penalizedRate;\r\n    // event for particular rate that was updated\r\n    emit RateUpdated(\r\n      _currencyName,\r\n      _penalizedRate\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  //\r\n  // end exchange rate provider only settings\r\n  //\r\n\r\n  /*\r\n  set setting for a given currency:\r\n  currencyName: used as identifier to store settings (stored as bytes8)\r\n  queryString: the http endpoint to hit to get data along with format\r\n    example: \"json(https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD).USD\"\r\n  callInterval: used to specifiy how often (if at all) the rate should refresh\r\n  callbackGasLimit: used to specify how much gas to give the oraclize callback\r\n  */\r\n  function setCurrencySettings(\r\n    string _currencyName,\r\n    string _queryString,\r\n    uint256 _callInterval,\r\n    uint256 _callbackGasLimit,\r\n    uint256 _ratePenalty\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    // check that the permille value doesn't exceed 999.\r\n    require(_ratePenalty < 1000);\r\n    // store settings by bytes8 of string, convert queryString to bytes array\r\n    currencySettings[toUpperCase(_currencyName)] = Settings(\r\n      _queryString,\r\n      _callInterval,\r\n      _callbackGasLimit,\r\n      _ratePenalty\r\n    );\r\n    emit SettingsUpdated(_currencyName);\r\n    return true;\r\n  }\r\n\r\n  // set only query string in settings for a given currency\r\n  function setCurrencySettingQueryString(\r\n    string _currencyName,\r\n    string _queryString\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    Settings storage _settings = currencySettings[toUpperCase(_currencyName)];\r\n    _settings.queryString = _queryString;\r\n    emit SettingsUpdated(_currencyName);\r\n    return true;\r\n  }\r\n\r\n  // set only callInterval in settings for a given currency\r\n  function setCurrencySettingCallInterval(\r\n    string _currencyName,\r\n    uint256 _callInterval\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    Settings storage _settings = currencySettings[toUpperCase(_currencyName)];\r\n    _settings.callInterval = _callInterval;\r\n    emit SettingsUpdated(_currencyName);\r\n    return true;\r\n  }\r\n\r\n  // set only callbackGasLimit in settings for a given currency\r\n  function setCurrencySettingCallbackGasLimit(\r\n    string _currencyName,\r\n    uint256 _callbackGasLimit\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    Settings storage _settings = currencySettings[toUpperCase(_currencyName)];\r\n    _settings.callbackGasLimit = _callbackGasLimit;\r\n    emit SettingsUpdated(_currencyName);\r\n    return true;\r\n  }\r\n\r\n  // set only ratePenalty in settings for a given currency\r\n  function setCurrencySettingRatePenalty(\r\n    string _currencyName,\r\n    uint256 _ratePenalty\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    // check that the permille value doesn't exceed 999.\r\n    require(_ratePenalty < 1000);\r\n\r\n    Settings storage _settings = currencySettings[toUpperCase(_currencyName)];\r\n    _settings.ratePenalty = _ratePenalty;\r\n    emit SettingsUpdated(_currencyName);\r\n    return true;\r\n  }\r\n\r\n  // set callback gasPrice for all currencies\r\n  function setCallbackGasPrice(uint256 _gasPrice)\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    // get the ExchangeRateProvider from registry\r\n    IExchangeRateProvider provider = IExchangeRateProvider(\r\n      registry.getContractAddress(\"ExchangeRateProvider\")\r\n    );\r\n    provider.setCallbackGasPrice(_gasPrice);\r\n    emit SettingsUpdated(\"ALL\");\r\n    return true;\r\n  }\r\n\r\n  // set to active or inactive in order to stop recursive rate fetching\r\n  // rate needs to be fetched once in order for it to stop.\r\n  function toggleRatesActive()\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    ratesActive = !ratesActive;\r\n    emit SettingsUpdated(\"ALL\");\r\n    return true;\r\n  }\r\n\r\n  //\r\n  // end setter functions\r\n  //\r\n\r\n  //\r\n  // start getter functions\r\n  //\r\n\r\n  // retrieve settings for a given currency (queryType)\r\n  function getCurrencySettings(string _queryTypeString)\r\n    public\r\n    view\r\n    returns (uint256, uint256, string, uint256)\r\n  {\r\n    Settings memory _settings = currencySettings[_queryTypeString];\r\n    return (\r\n      _settings.callInterval,\r\n      _settings.callbackGasLimit,\r\n      _settings.queryString,\r\n      _settings.ratePenalty\r\n    );\r\n  }\r\n\r\n  // get rate with string for easy use by regular accounts\r\n  function getRate(string _queryTypeString)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 _rate = rates[keccak256(abi.encodePacked(toUpperCase(_queryTypeString)))];\r\n    require(_rate > 0);\r\n    return _rate;\r\n  }\r\n\r\n  // get rate with bytes32 for easier assembly calls\r\n  // uppercase protection not provided...\r\n  function getRate32(bytes32 _queryType32)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 _rate = rates[_queryType32];\r\n    require(_rate > 0);\r\n    return _rate;\r\n  }\r\n\r\n  //\r\n  // end getter functions\r\n  //\r\n\r\n  //\r\n  // start utility functions\r\n  //\r\n\r\n  // convert string to uppercase to ensure that there are not multiple\r\n  // instances of same currencies\r\n  function toUpperCase(string _base)\r\n    public\r\n    pure\r\n    returns (string)\r\n  {\r\n    bytes memory _stringBytes = bytes(_base);\r\n    for (\r\n      uint _byteCounter = 0;\r\n      _byteCounter < _stringBytes.length;\r\n      _byteCounter++\r\n    ) {\r\n      if (\r\n        _stringBytes[_byteCounter] >= 0x61 &&\r\n        _stringBytes[_byteCounter] <= 0x7A\r\n      ) {\r\n        _stringBytes[_byteCounter] = bytes1(\r\n          uint8(_stringBytes[_byteCounter]) - 32\r\n        );\r\n      }\r\n    }\r\n    return string(_stringBytes);\r\n  }\r\n\r\n  //\r\n  // end utility functions\r\n  //\r\n\r\n  // used for selfdestructing the provider in order to get back any unused ether\r\n  // useful for upgrades where we want to get money back from contract\r\n  function killProvider(address _address)\r\n    public\r\n    onlyOwner\r\n  {\r\n    // get the ExchangeRateProvider from registry\r\n    IExchangeRateProvider provider = IExchangeRateProvider(\r\n      registry.getContractAddress(\"ExchangeRateProvider\")\r\n    );\r\n    provider.selfDestruct(_address);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"toggleRatesActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currencyName\",\"type\":\"string\"},{\"name\":\"_callInterval\",\"type\":\"uint256\"}],\"name\":\"setCurrencySettingCallInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currencyName\",\"type\":\"string\"},{\"name\":\"_queryString\",\"type\":\"string\"}],\"name\":\"setCurrencySettingQueryString\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"killProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currencyName\",\"type\":\"string\"},{\"name\":\"_callbackGasLimit\",\"type\":\"uint256\"}],\"name\":\"setCurrencySettingCallbackGasLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"permilleDenominator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_base\",\"type\":\"string\"}],\"name\":\"toUpperCase\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"name\":\"_rateInCents\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_queryTypeString\",\"type\":\"string\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_queryTypeString\",\"type\":\"string\"}],\"name\":\"getCurrencySettings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_queryType32\",\"type\":\"bytes32\"}],\"name\":\"getRate32\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queryTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"name\":\"_queryType\",\"type\":\"string\"}],\"name\":\"setQueryId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratesActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currencyName\",\"type\":\"string\"},{\"name\":\"_queryString\",\"type\":\"string\"},{\"name\":\"_callInterval\",\"type\":\"uint256\"},{\"name\":\"_callbackGasLimit\",\"type\":\"uint256\"},{\"name\":\"_ratePenalty\",\"type\":\"uint256\"}],\"name\":\"setCurrencySettings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currencyName\",\"type\":\"string\"},{\"name\":\"_ratePenalty\",\"type\":\"uint256\"}],\"name\":\"setCurrencySettingRatePenalty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryType\",\"type\":\"string\"}],\"name\":\"fetchRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCallbackGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registryAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"}],\"name\":\"QuerySent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"}],\"name\":\"SettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ExchangeRates","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005973376b603268fe4251d13040226078257014f8","Library":"","SwarmSource":"bzzr://e1f077069e69085cb88504bd2af7ddc1080ed1bc99a80596f573f871604f20e8"}]}