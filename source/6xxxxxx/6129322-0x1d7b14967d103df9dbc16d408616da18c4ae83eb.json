{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Owned {\r\n\r\n    event OwnerChanged(address indexed from, address indexed to);\r\n\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function _transferOwnership(address _from, address _to) internal {\r\n        owner = _to;\r\n        emit OwnerChanged(_from, _to);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        _transferOwnership(owner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Whitelisted is Owned {\r\n\r\n    event WhitelistModified(address indexed who, bool inWhitelist);\r\n\r\n    mapping(address => bool) public whitelist;\r\n\r\n    constructor() public {\r\n        whitelist[msg.sender] = true;\r\n    }\r\n\r\n    function addToWhitelist(address who) public onlyOwner {\r\n        whitelist[who] = true;\r\n        emit WhitelistModified(who, true);\r\n    }\r\n    \r\n    function removeFromWhitelist(address who) public onlyOwner {\r\n        whitelist[who] = false;\r\n        emit WhitelistModified(who, false);\r\n    }\r\n\r\n    modifier whitelisted {\r\n        require(whitelist[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract Ellobitz is TokenERC20, Owned, Whitelisted {\r\n\r\n    uint256 public mineCount;\r\n    uint256 public minMineSize;\r\n    uint256 public maxMineSize;\r\n    uint256 public chipSize;\r\n    uint256 public firstChipBonus;\r\n    uint public chipSpeed;\r\n\r\n    uint256 internal activeMine;\r\n    uint256 internal mineSize;\r\n    bool internal firstChip;\r\n    \r\n    mapping(address => uint) public lastChipTime;\r\n\r\n    event MineFound(address indexed chipper, uint256 activeMine);\r\n    event MineChipped(address indexed chipper, uint256 indexed activeMine, uint256 amount);\r\n    event MineExausted(address indexed chipper, uint256 activeMine);\r\n\r\n    modifier validMineParameters (\r\n        uint256 _mineCount,\r\n        uint256 _minMineSize,\r\n        uint256 _maxMineSize,\r\n        uint256 _chipSize,\r\n        uint256 _firstChipBonus,\r\n        uint _chipSpeed\r\n    ) {\r\n        require(_minMineSize <= _maxMineSize, \"Smallest mine size smaller than largest mine size\");\r\n        require(_chipSize + _firstChipBonus <= _minMineSize, \"First chip would exhaust mine\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        uint256 _mineCount,\r\n        uint256 _minMineSize,\r\n        uint256 _maxMineSize,\r\n        uint256 _chipSize,\r\n        uint256 _firstChipBonus,\r\n        uint _chipSpeed\r\n    ) TokenERC20(0, tokenName, tokenSymbol) validMineParameters(\r\n        _mineCount,\r\n        _minMineSize,\r\n        _maxMineSize,\r\n        _chipSize,\r\n        _firstChipBonus,\r\n        _chipSpeed\r\n    ) public {\r\n        \r\n        // variable setting\r\n        mineCount = _mineCount;\r\n        minMineSize = _minMineSize;\r\n        maxMineSize = _maxMineSize;\r\n        chipSize = _chipSize;\r\n        firstChipBonus = _firstChipBonus;\r\n        chipSpeed = _chipSpeed;\r\n\r\n        // other variable initialization\r\n        activeMine = 0;\r\n        mineSize = minMineSize;\r\n        firstChip = true;\r\n    }\r\n\r\n    function _resetMine() internal {\r\n        activeMine = random() % mineCount;\r\n        mineSize = random() % (maxMineSize - minMineSize + 1) + minMineSize;\r\n        firstChip = true;\r\n    }\r\n\r\n    function chip(uint256 mineNumber) public whitelisted {\r\n        \r\n        require(mineNumber == activeMine, \"Chipped wrong mine\");\r\n        require(now >= lastChipTime[msg.sender] + chipSpeed, \"Chipped too fast\");\r\n        \r\n        uint256 thisChipNoCap = firstChip ? firstChipBonus + chipSize : chipSize;\r\n        uint256 thisChip = thisChipNoCap > mineSize ? mineSize : thisChipNoCap;\r\n\r\n        if (firstChip) {\r\n            emit MineFound(msg.sender, activeMine);\r\n        }\r\n\r\n        mineSize -= thisChip;\r\n        mintToken(msg.sender, thisChip);\r\n        lastChipTime[msg.sender] = now;\r\n        firstChip = false;\r\n        emit MineChipped(msg.sender, activeMine, thisChip);\r\n\r\n        if (mineSize <= 0) {\r\n            emit MineExausted(msg.sender, activeMine);\r\n            _resetMine();\r\n        }\r\n    }\r\n\r\n    function setParameters(\r\n        uint256 _mineCount,\r\n        uint256 _minMineSize,\r\n        uint256 _maxMineSize,\r\n        uint256 _chipSize,\r\n        uint256 _firstChipBonus,\r\n        uint _chipSpeed\r\n    ) onlyOwner validMineParameters(\r\n        _mineCount,\r\n        _minMineSize,\r\n        _maxMineSize,\r\n        _chipSize,\r\n        _firstChipBonus,\r\n        _chipSpeed\r\n    ) public {\r\n        mineCount = _mineCount;\r\n        minMineSize = _minMineSize;\r\n        maxMineSize = _maxMineSize;\r\n        chipSize = _chipSize;\r\n        firstChipBonus = _firstChipBonus;\r\n        chipSpeed = _chipSpeed;\r\n    }\r\n\r\n    function mintToken(address target, uint256 mintedAmount) internal {\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        emit Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    // adapted from https://medium.com/@promentol/lottery-smart-contract-can-we-generate-random-numbers-in-solidity-4f586a152b27\r\n    function random() internal view returns (uint256) {\r\n        return uint256(keccak256(\r\n            abi.encodePacked(block.timestamp, block.difficulty)\r\n        ));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chipSpeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mineCount\",\"type\":\"uint256\"},{\"name\":\"_minMineSize\",\"type\":\"uint256\"},{\"name\":\"_maxMineSize\",\"type\":\"uint256\"},{\"name\":\"_chipSize\",\"type\":\"uint256\"},{\"name\":\"_firstChipBonus\",\"type\":\"uint256\"},{\"name\":\"_chipSpeed\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMineSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chipSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mineNumber\",\"type\":\"uint256\"}],\"name\":\"chip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mineCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastChipTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMineSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstChipBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"_mineCount\",\"type\":\"uint256\"},{\"name\":\"_minMineSize\",\"type\":\"uint256\"},{\"name\":\"_maxMineSize\",\"type\":\"uint256\"},{\"name\":\"_chipSize\",\"type\":\"uint256\"},{\"name\":\"_firstChipBonus\",\"type\":\"uint256\"},{\"name\":\"_chipSpeed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"chipper\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"activeMine\",\"type\":\"uint256\"}],\"name\":\"MineFound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"chipper\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"activeMine\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MineChipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"chipper\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"activeMine\",\"type\":\"uint256\"}],\"name\":\"MineExausted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"inWhitelist\",\"type\":\"bool\"}],\"name\":\"WhitelistModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"Ellobitz","CompilerVersion":"v0.4.24-nightly.2018.5.16+commit.7f965c86","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000001158e460913d000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000029a2241af62c00000000000000000000000000000000000000000000000000000000000000000e100000000000000000000000000000000000000000000000000000000000000008456c6c6f6269747a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000345425a0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://70c9f4237b3f279beef0289419f79ceb1e8f69e8a342e1561368a6c365706873"}]}