{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ninterface HourglassInterface {\r\n    function buy(address _playerAddress) payable external returns(uint256);\r\n    function sell(uint256 _amountOfTokens) external;\r\n    function reinvest() external;\r\n    function withdraw() external;\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\r\n    function balanceOf(address _customerAddress) view external returns(uint256);\r\n    function myDividends(bool _includeReferralBonus) external view returns(uint256);\r\n}\r\n\r\ncontract StrongHandsManager {\r\n    \r\n    event CreatedStrongHand(address indexed owner, address indexed strongHand);\r\n    \r\n    mapping (address => address) public strongHands;\r\n    \r\n    function isStrongHand()\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return strongHands[msg.sender] != address(0);\r\n    }\r\n    \r\n    function myStrongHand()\r\n        external\r\n        view\r\n        returns (address)\r\n    {  \r\n        require(isStrongHand(), \"You are not a Stronghand\");\r\n        \r\n        return strongHands[msg.sender];\r\n    }\r\n    \r\n    function create(uint256 _unlockAfterNDays)\r\n        public\r\n    {\r\n        require(!isStrongHand(), \"You already became a Stronghand\");\r\n        require(_unlockAfterNDays > 0);\r\n        \r\n        address owner = msg.sender;\r\n    \r\n        strongHands[owner] = new StrongHand(owner, _unlockAfterNDays);\r\n        \r\n        emit CreatedStrongHand(owner, strongHands[owner]);\r\n    }\r\n}\r\n\r\ncontract StrongHand {\r\n\r\n    HourglassInterface constant p3dContract = HourglassInterface(0x1EB2acB92624DA2e601EEb77e2508b32E49012ef);\r\n    \r\n    address public owner;\r\n    \r\n    uint256 public creationDate;\r\n    \r\n    uint256 public unlockAfterNDays;\r\n    \r\n    modifier timeLocked()\r\n    {\r\n        require(now >= creationDate + unlockAfterNDays * 1 days);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor(address _owner, uint256 _unlockAfterNDays)\r\n        public\r\n    {\r\n        owner = _owner;\r\n        unlockAfterNDays =_unlockAfterNDays;\r\n        \r\n        creationDate = now;\r\n    }\r\n    \r\n    function() public payable {}\r\n    \r\n    function isLocked()\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return now < creationDate + unlockAfterNDays * 1 days;\r\n    }\r\n    \r\n    function lockedUntil()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return creationDate + unlockAfterNDays * 1 days;\r\n    }\r\n    \r\n    function extendLock(uint256 _howManyDays)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 newLockTime = unlockAfterNDays + _howManyDays;\r\n        \r\n        require(newLockTime > unlockAfterNDays);\r\n        \r\n        unlockAfterNDays = newLockTime;\r\n    }\r\n    \r\n    //safety functions\r\n    \r\n    function withdraw()\r\n        external\r\n        onlyOwner\r\n    {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function buyWithBalance()\r\n        external\r\n        onlyOwner\r\n    {\r\n       p3dContract.buy.value(address(this).balance)(0x1EB2acB92624DA2e601EEb77e2508b32E49012ef);\r\n    }\r\n    \r\n    //P3D functions\r\n    \r\n    function balanceOf()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return p3dContract.balanceOf(address(this));\r\n    }\r\n    \r\n    function dividendsOf()\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return p3dContract.myDividends(true);\r\n    }\r\n    \r\n    function buy()\r\n        external\r\n        payable\r\n        onlyOwner\r\n    {\r\n        p3dContract.buy.value(msg.value)(0x1EB2acB92624DA2e601EEb77e2508b32E49012ef);\r\n    }\r\n    \r\n    function reinvest()\r\n        external\r\n        onlyOwner\r\n    {\r\n        p3dContract.reinvest();\r\n    }\r\n\r\n    function withdrawDividends()\r\n        external\r\n        onlyOwner\r\n    {\r\n        p3dContract.withdraw();\r\n        \r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function sell(uint256 _amount)\r\n        external\r\n        timeLocked\r\n        onlyOwner\r\n    {\r\n        p3dContract.sell(_amount);\r\n        \r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        external\r\n        timeLocked\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n        return p3dContract.transfer(_toAddress, _amountOfTokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"myStrongHand\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStrongHand\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unlockAfterNDays\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"strongHands\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"strongHand\",\"type\":\"address\"}],\"name\":\"CreatedStrongHand\",\"type\":\"event\"}]","ContractName":"StrongHandsManager","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://640a33f4e9f634888d0ebfb08855ead245510e7c80174939cf7e8e03e3f00dfb"}]}