{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n        assert(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        assert(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        assert(token.approve(spender, value));\r\n    }\r\n}\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 public releaseTime;\r\n\r\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_releaseTime > block.timestamp);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function release() public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(this);\r\n    require(amount > 0);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract EntryToken is StandardToken, Ownable {\r\n    string public constant name = \"Entry Token\";\r\n    string public constant symbol = \"ENTRY\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// Maximum tokens to be allocated on the sale (55% of the hard cap)\r\n    uint256 public constant TOKENS_SALE_HARD_CAP = 325000000000000000000000000; // 325000000 * 10**18\r\n\r\n    /// Base exchange rate is set to 1 ETH = 6000 ENTRY.\r\n    uint256 public constant BASE_RATE = 6000;\r\n\r\n    /// pre sale start 03.05.2018\r\n    uint256 private constant datePreSaleStart = 1525294800;\r\n    \r\n    /// pre sale end time 11.05.2018\r\n    uint256 private constant datePreSaleEnd = 1525986000;\r\n\r\n    /// sale start time 01.06.2018\r\n    uint256 private constant dateSaleStart = 1527800400;\r\n\r\n    /// sale end time 01.09.2018\r\n    uint256 private constant dateSaleEnd = 1535749200;\r\n\r\n    \r\n    /// pre-sale token cap\r\n    uint256 private preSaleCap = 75000000000000000000000000; // Pre-sale  75000000 * 10**18\r\n    \r\n    /// token caps for each round\r\n    uint256[25] private stageCaps = [\r\n        85000000000000000000000000\t, // Stage 1   85000000 * 10**18\r\n        95000000000000000000000000\t, // Stage 2   95000000 * 10**18\r\n        105000000000000000000000000\t, // Stage 3   105000000 * 10**18\r\n        115000000000000000000000000\t, // Stage 4   115000000 * 10**18\r\n        125000000000000000000000000\t, // Stage 5   125000000 * 10**18\r\n        135000000000000000000000000\t, // Stage 6   135000000 * 10**18\r\n        145000000000000000000000000\t, // Stage 7   145000000 * 10**18\r\n        155000000000000000000000000\t, // Stage 8   155000000 * 10**18\r\n        165000000000000000000000000\t, // Stage 9   165000000 * 10**18\r\n        175000000000000000000000000\t, // Stage 10   175000000 * 10**18\r\n        185000000000000000000000000\t, // Stage 11   185000000 * 10**18\r\n        195000000000000000000000000\t, // Stage 12   195000000 * 10**18\r\n        205000000000000000000000000\t, // Stage 13   205000000 * 10**18\r\n        215000000000000000000000000\t, // Stage 14   215000000 * 10**18\r\n        225000000000000000000000000\t, // Stage 15   225000000 * 10**18\r\n        235000000000000000000000000\t, // Stage 16   235000000 * 10**18\r\n        245000000000000000000000000\t, // Stage 17   245000000 * 10**18\r\n        255000000000000000000000000\t, // Stage 18   255000000 * 10**18\r\n        265000000000000000000000000\t, // Stage 19   265000000 * 10**18\r\n        275000000000000000000000000\t, // Stage 20   275000000 * 10**18\r\n        285000000000000000000000000\t, // Stage 21   285000000 * 10**18\r\n        295000000000000000000000000\t, // Stage 22   295000000 * 10**18\r\n        305000000000000000000000000\t, // Stage 23   305000000 * 10**18\r\n        315000000000000000000000000\t, // Stage 24   315000000 * 10**18\r\n        325000000000000000000000000   // Stage 25   325000000 * 10**18\r\n    ];\r\n    /// tokens rate for each round\r\n    uint8[25] private stageRates = [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, \r\n                        28, 29, 30, 31, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44];\r\n\r\n    uint64 private constant dateTeamTokensLockedTill = 1630443600;\r\n   \r\n    bool public tokenSaleClosed = false;\r\n\r\n    address public timelockContractAddress;\r\n\r\n\r\n    function isPreSalePeriod() public constant returns (bool) {\r\n        if(totalSupply > preSaleCap || now >= datePreSaleEnd) {\r\n            return false;\r\n        } else {\r\n            return now > datePreSaleStart;\r\n        }\r\n    }\r\n\r\n\r\n    function isICOPeriod() public constant returns (bool) {\r\n        if (totalSupply > TOKENS_SALE_HARD_CAP || now >= dateSaleEnd){\r\n            return false;\r\n        } else {\r\n            return now > dateSaleStart;\r\n        }\r\n    }\r\n\r\n    modifier inProgress {\r\n        require(totalSupply < TOKENS_SALE_HARD_CAP && !tokenSaleClosed && now >= datePreSaleStart);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier beforeEnd {\r\n        require(!tokenSaleClosed);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier canBeTraded {\r\n        require(tokenSaleClosed);\r\n        _;\r\n    }\r\n\r\n\r\n    function EntryToken() public {\r\n    \t/// generate private investor tokens \r\n    \tgenerateTokens(owner, 50000000000000000000000000); // 50000000 * 10**18\r\n    }\r\n\r\n\r\n    function () public payable inProgress {\r\n        if(isPreSalePeriod()){\r\n            buyPreSaleTokens(msg.sender);\r\n        } else if (isICOPeriod()){\r\n            buyTokens(msg.sender);\r\n        }\t\t\t\r\n    } \r\n    \r\n\r\n    function buyPreSaleTokens(address _beneficiary) internal {\r\n        require(msg.value >= 0.01 ether);\r\n        uint256 tokens = getPreSaleTokenAmount(msg.value);\r\n        require(totalSupply.add(tokens) <= preSaleCap);\r\n        generateTokens(_beneficiary, tokens);\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    \r\n    function buyTokens(address _beneficiary) internal {\r\n        require(msg.value >= 0.01 ether);\r\n        uint256 tokens = getTokenAmount(msg.value);\r\n        require(totalSupply.add(tokens) <= TOKENS_SALE_HARD_CAP);\r\n        generateTokens(_beneficiary, tokens);\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    function getPreSaleTokenAmount(uint256 weiAmount)internal pure returns (uint256) {\r\n        return weiAmount.mul(BASE_RATE);\r\n    }\r\n    \r\n    \r\n    function getTokenAmount(uint256 weiAmount) internal view returns (uint256 tokens) {\r\n        uint256 tokenBase = weiAmount.mul(BASE_RATE);\r\n        uint8 stageNumber = currentStageIndex();\r\n        tokens = getStageTokenAmount(tokenBase, stageNumber);\r\n        while(tokens.add(totalSupply) > stageCaps[stageNumber] && stageNumber < 24){\r\n           stageNumber++;\r\n           tokens = getStageTokenAmount(tokenBase, stageNumber);\r\n        }\r\n    }\r\n    \r\n    \r\n    function getStageTokenAmount(uint256 tokenBase, uint8 stageNumber)internal view returns (uint256) {\r\n    \tuint256 rate = 10000000000000000000/stageRates[stageNumber];\r\n    \tuint256 base = tokenBase/1000000000000000000;\r\n        return base.mul(rate);\r\n    }\r\n    \r\n    \r\n    function currentStageIndex() internal view returns (uint8 stageNumber) {\r\n        stageNumber = 0;\r\n        while(stageNumber < 24 && totalSupply > stageCaps[stageNumber]) {\r\n            stageNumber++;\r\n        }\r\n    }\r\n    \r\n    \r\n    function buyTokensOnInvestorBehalf(address _beneficiary, uint256 _tokens) public onlyOwner beforeEnd {\r\n        generateTokens(_beneficiary, _tokens);\r\n    }\r\n    \r\n    \r\n    function buyTokensOnInvestorBehalfBatch(address[] _addresses, uint256[] _tokens) public onlyOwner beforeEnd {\r\n        require(_addresses.length == _tokens.length);\r\n        require(_addresses.length <= 100);\r\n\r\n        for (uint256 i = 0; i < _tokens.length; i = i.add(1)) {\r\n            generateTokens(_addresses[i], _tokens[i]);\r\n        }\r\n    }\r\n    \r\n    \r\n    function generateTokens(address _beneficiary, uint256 _tokens) internal {\r\n        require(_beneficiary != address(0));\r\n        totalSupply = totalSupply.add(_tokens);\r\n        balances[_beneficiary] = balances[_beneficiary].add(_tokens);\r\n        emit Transfer(address(0), _beneficiary, _tokens);\r\n    }\r\n\r\n\r\n    function close() public onlyOwner beforeEnd {\r\n        /// team tokens are equal to 20% of tokens\r\n        uint256 lockedTokens = 118000000000000000000000000; // 118 000 000 * 10**18\r\n        // partner tokens for advisors, bouties, SCO 25% of tokens\r\n        uint256 partnerTokens = 147000000000000000000000000; // 147 000 0000 * 10**18\r\n        // unsold tokens \r\n        uint256 unsoldTokens = TOKENS_SALE_HARD_CAP.sub(totalSupply);\r\n        \r\n        generateLockedTokens(lockedTokens);\r\n        generatePartnerTokens(partnerTokens);\r\n        generateUnsoldTokens(unsoldTokens);\r\n        \r\n        totalSupply = totalSupply.add(lockedTokens+partnerTokens+unsoldTokens);\r\n\r\n        tokenSaleClosed = true;\r\n\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function generateLockedTokens(uint lockedTokens) internal{\r\n        TokenTimelock lockedTeamTokens = new TokenTimelock(this, owner, dateTeamTokensLockedTill);\r\n        timelockContractAddress = address(lockedTeamTokens);\r\n        balances[timelockContractAddress] = balances[timelockContractAddress].add(lockedTokens);\r\n        emit Transfer(address(0), timelockContractAddress, lockedTokens);\r\n    }\r\n\r\n    function generatePartnerTokens(uint partnerTokens) internal{\r\n        balances[owner] = balances[owner].add(partnerTokens);\r\n        emit Transfer(address(0), owner, partnerTokens);\r\n    }\r\n\r\n    function generateUnsoldTokens(uint unsoldTokens) internal{\r\n        balances[owner] = balances[owner].add(unsoldTokens);\r\n        emit Transfer(address(0), owner, unsoldTokens);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public canBeTraded returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public canBeTraded returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreSalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelockContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"buyTokensOnInvestorBehalfBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"buyTokensOnInvestorBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SALE_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"EntryToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://adcee554c93488b1a0d067fa703cc60412c11b443414e9aae678b1f3d810fec4"}]}