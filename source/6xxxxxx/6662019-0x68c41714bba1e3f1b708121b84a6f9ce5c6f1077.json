{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    Gold Reserve Token\r\n    \r\n    xgr_token_lib.sol\r\n    3.1.0\r\n    \r\n    Fusion Solutions KFT <contact@fusionsolutions.io>\r\n    \r\n    Written by Andor Rajci, November 2018\r\n*/\r\npragma solidity 0.4.18;\r\n\r\ncontract SafeMath {\r\n    /* Internals */\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if ( b > 0 ) {\r\n            assert( a + b > a );\r\n        }\r\n        return a + b;\r\n    }\r\n    function safeSub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if ( b > 0 ) {\r\n            assert( a - b < a );\r\n        }\r\n        return a - b;\r\n    }\r\n    function safeMul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a / b;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    /* Variables */\r\n    address public owner = msg.sender;\r\n    /* Externals */\r\n    function replaceOwner(address newOwner) external returns(bool success) {\r\n        require( isOwner() );\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n    /* Internals */\r\n    function isOwner() internal view returns(bool) {\r\n        return owner == msg.sender;\r\n    }\r\n    /* Modifiers */\r\n    modifier onlyForOwner {\r\n        require( isOwner() );\r\n        _;\r\n    }\r\n}\r\n\r\ncontract TokenDB is SafeMath, Owned {\r\n    /*\r\n        This is just an abstract contract with the necessary functions\r\n    */\r\n    /* Structures */\r\n    /* Variables */\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public lockedBalances;\r\n    uint256 public totalSupply;\r\n    /* Constructor */\r\n    /* Externals */\r\n    function changeDepositsAddress(address newDepositsAddress) external onlyForOwner {}\r\n    function transfer(address from, address to, uint256 amount, uint256 fee) external returns(bool success) {}\r\n    function increase(address owner, uint256 value) external returns(bool success) {}\r\n    function setAllowance(address owner, address spender, uint256 amount, uint256 nonce) external returns(bool success) {}\r\n    /* Constants */\r\n    function getAllowance(address owner, address spender) public constant returns(bool success, uint256 remaining, uint256 nonce) {}\r\n}\r\n\r\ncontract TokenLib is SafeMath, Owned {\r\n    /**\r\n    * @title Gold Reserve [XGR] token\r\n    */\r\n    /* Variables */\r\n    string  public name = \"GoldReserve\";\r\n    string  public symbol = \"XGR\";\r\n    uint8   public decimals = 8;\r\n    uint256 public transactionFeeRate   = 20; // 0.02 %\r\n    uint256 public transactionFeeRateM  = 1e3; // 1000\r\n    uint256 public transactionFeeMin    =   2000000; // 0.2 XGR\r\n    uint256 public transactionFeeMax    = 200000000; // 2.0 XGR\r\n    address public databaseAddress;\r\n    address public depositsAddress;\r\n    address public forkAddress;\r\n    address public libAddress;\r\n    /* Constructor */\r\n    function TokenLib(address newDatabaseAddress, address newDepositAddress, address newFrokAddress, address newLibAddress) public {\r\n        databaseAddress = newDatabaseAddress;\r\n        depositsAddress = newDepositAddress;\r\n        forkAddress = newFrokAddress;\r\n        libAddress = newLibAddress;\r\n    }\r\n    /* Fallback */\r\n    function () public {\r\n        revert();\r\n    }\r\n    /* Externals */\r\n    function changeDataBaseAddress(address newDatabaseAddress) external onlyForOwner {\r\n        databaseAddress = newDatabaseAddress;\r\n    }\r\n    function changeDepositsAddress(address newDepositsAddress) external onlyForOwner {\r\n        depositsAddress = newDepositsAddress;\r\n    }\r\n    function changeForkAddress(address newForkAddress) external onlyForOwner {\r\n        forkAddress = newForkAddress;\r\n    }\r\n    function changeLibAddress(address newLibAddress) external onlyForOwner {\r\n        libAddress = newLibAddress;\r\n    }\r\n    function changeFees(uint256 rate, uint256 rateMultiplier, uint256 min, uint256 max) external onlyForOwner {\r\n        transactionFeeRate = rate;\r\n        transactionFeeRateM = rateMultiplier;\r\n        transactionFeeMin = min;\r\n        transactionFeeMax = max;\r\n    }\r\n    function approve(address spender, uint256 amount) external returns (bool success) {\r\n        _approve(spender, amount);\r\n        return true;\r\n    }\r\n    function transfer(address to, uint256 amount) external returns (bool success) {\r\n        bytes memory _data;\r\n        _transfer(msg.sender, to, amount, true, _data);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool success) {\r\n        if ( from != msg.sender ) {\r\n            var (_success, _reamining, _nonce) = TokenDB(databaseAddress).getAllowance(from, msg.sender);\r\n            require( _success );\r\n            _reamining = safeSub(_reamining, amount);\r\n            _nonce = safeAdd(_nonce, 1);\r\n            require( TokenDB(databaseAddress).setAllowance(from, msg.sender, _reamining, _nonce) );\r\n            AllowanceUsed(msg.sender, from, amount);\r\n        }\r\n        bytes memory _data;\r\n        _transfer(from, to, amount, true, _data);\r\n        return true;\r\n    }\r\n    function transfer(address to, uint256 amount, bytes extraData) external returns (bool success) {\r\n        _transfer(msg.sender, to, amount, true, extraData);\r\n        return true;\r\n    }\r\n    function mint(address owner, uint256 value) external returns (bool success) {\r\n        require( msg.sender == forkAddress || msg.sender == depositsAddress );\r\n        _mint(owner, value);\r\n        return true;\r\n    }\r\n    /* Internals */\r\n    function _transfer(address from, address to, uint256 amount, bool fee, bytes extraData) internal {\r\n        bool _success;\r\n        uint256 _fee;\r\n        uint256 _payBack;\r\n        uint256 _amount = amount;\r\n        uint256 balance = TokenDB(databaseAddress).balanceOf(from);\r\n        uint256 lockedBalance = TokenDB(databaseAddress).lockedBalances(from);\r\n        balance = safeSub(balance, lockedBalance);\r\n        require( _amount > 0 && balance > 0 );\r\n        require( from != 0x00 && to != 0x00 );\r\n        if( fee ) {\r\n            (_success, _fee) = getTransactionFee(amount);\r\n            require( _success );\r\n            if ( balance == amount ) {\r\n                _amount = safeSub(amount, _fee);\r\n            }\r\n        }\r\n        require( balance >= safeAdd(_amount, _fee) );\r\n        if ( fee ) {\r\n            Burn(from, _fee);\r\n        }\r\n        Transfer(from, to, _amount);\r\n        Transfer2(from, to, _amount, extraData);\r\n        require( TokenDB(databaseAddress).transfer(from, to, _amount, _fee) );\r\n    }\r\n    function _mint(address owner, uint256 value) internal {\r\n        require( TokenDB(databaseAddress).increase(owner, value) );\r\n        Mint(owner, value);\r\n    }\r\n    function _approve(address spender, uint256 amount) internal {\r\n        require( msg.sender != spender );\r\n        require( TokenDB(databaseAddress).setAllowance(msg.sender, spender, amount, 0x00) );\r\n        Approval(msg.sender, spender, amount);\r\n    }\r\n    /* Constants */\r\n    function allowance(address owner, address spender) public constant returns (uint256 remaining, uint256 nonce) {\r\n        var (_success, _remaining, _nonce) = TokenDB(databaseAddress).getAllowance(owner, spender);\r\n        require( _success );\r\n        return (_remaining, _nonce);\r\n    }\r\n    function getTransactionFee(uint256 value) public constant returns (bool success, uint256 fee) {\r\n        fee = safeMul(value, transactionFeeRate) / transactionFeeRateM / 100;\r\n        if ( fee > transactionFeeMax ) { fee = transactionFeeMax; }\r\n        else if ( fee < transactionFeeMin ) { fee = transactionFeeMin; }\r\n        return (true, fee);\r\n    }\r\n    function balanceOf(address owner) public constant returns (uint256 value) {\r\n        return TokenDB(databaseAddress).balanceOf(owner);\r\n    }\r\n    function balancesOf(address owner) public constant returns (uint256 balance, uint256 lockedAmount) {\r\n        return (TokenDB(databaseAddress).balanceOf(owner), TokenDB(databaseAddress).lockedBalances(owner));\r\n    }\r\n    function totalSupply() public constant returns (uint256 value) {\r\n        return TokenDB(databaseAddress).totalSupply();\r\n    }\r\n    /* Events */\r\n    event AllowanceUsed(address indexed spender, address indexed owner, uint256 indexed value);\r\n    event Mint(address indexed addr, uint256 indexed value);\r\n    event Burn(address indexed addr, uint256 indexed value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Transfer2(address indexed from, address indexed to, uint256 indexed value, bytes data);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLibAddress\",\"type\":\"address\"}],\"name\":\"changeLibAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionFeeMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balancesOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"rateMultiplier\",\"type\":\"uint256\"},{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionFeeMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDepositsAddress\",\"type\":\"address\"}],\"name\":\"changeDepositsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDatabaseAddress\",\"type\":\"address\"}],\"name\":\"changeDataBaseAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionFeeRateM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newForkAddress\",\"type\":\"address\"}],\"name\":\"changeForkAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"databaseAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getTransactionFee\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forkAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"newDatabaseAddress\",\"type\":\"address\"},{\"name\":\"newDepositAddress\",\"type\":\"address\"},{\"name\":\"newFrokAddress\",\"type\":\"address\"},{\"name\":\"newLibAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AllowanceUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer2\",\"type\":\"event\"}]","ContractName":"TokenLib","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://2f7c8727af861a97d8473aab6c846c493f9004fe8448c7cd08803e81de3db643"}]}