{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Operated\r\n * @dev The Operated contract has a list of ops addresses, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Operated {\r\n    mapping(address => bool) private _ops;\r\n\r\n    event OperatorChanged(\r\n        address indexed operator,\r\n        bool active\r\n    );\r\n\r\n    /**\r\n     * @dev The Operated constructor sets the original ops account of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() internal {\r\n        _ops[msg.sender] = true;\r\n        emit OperatorChanged(msg.sender, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the operations accounts.\r\n     */\r\n    modifier onlyOps() {\r\n        require(isOps(), \"only operations accounts are allowed to call this function\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is an operator.\r\n     */\r\n    function isOps() public view returns(bool) {\r\n        return _ops[msg.sender];\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current operations accounts to give control of the contract to new accounts.\r\n     * @param _account The address of the new account\r\n     * @param _active Set active (true) or inactive (false)\r\n     */\r\n    function setOps(address _account, bool _active) public onlyOps {\r\n        _ops[_account] = _active;\r\n        emit OperatorChanged(_account, _active);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title WHISKY TOKEN\r\n * @author WHYTOKEN GmbH\r\n * @notice WHISKY TOKEN (WHY) stands for a disruptive new possibility in the crypto currency market\r\n * due to the combination of High-End Whisky and Blockchain technology.\r\n * WHY is a german based token, which lets everyone participate in the lucrative crypto market\r\n * with minimal risk and effort through a high-end whisky portfolio as security.\r\n */\r\ncontract WhiskyToken is IERC20, Ownable, Operated {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint64;\r\n\r\n    // ERC20 standard variables\r\n    string public name = \"Whisky Token\";\r\n    string public symbol = \"WHY\";\r\n    uint8 public decimals = 18;\r\n    uint256 public initialSupply = 28100000 * (10 ** uint256(decimals));\r\n    uint256 public totalSupply;\r\n\r\n    // Address of the ICO contract\r\n    address public crowdSaleContract;\r\n\r\n    // The asset value of the whisky in EUR cents\r\n    uint64 public assetValue;\r\n\r\n    // Fee to charge on every transfer (e.g. 15 is 1,5%)\r\n    uint64 public feeCharge;\r\n\r\n    // Global freeze of all transfers\r\n    bool public freezeTransfer;\r\n\r\n    // Flag to make all token available\r\n    bool private tokenAvailable;\r\n\r\n    // Maximum value for feeCharge\r\n    uint64 private constant feeChargeMax = 20;\r\n\r\n    // Address of the account/wallet which should receive the fees\r\n    address private feeReceiver;\r\n\r\n    // Mappings of addresses for balances, allowances and frozen accounts\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping (address => uint256)) internal allowed;\r\n    mapping(address => bool) public frozenAccount;\r\n\r\n    // Event definitions\r\n    event Fee(address indexed payer, uint256 fee);\r\n    event FeeCharge(uint64 oldValue, uint64 newValue);\r\n    event AssetValue(uint64 oldValue, uint64 newValue);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event FrozenFunds(address indexed target, bool frozen);\r\n    event FreezeTransfer(bool frozen);\r\n\r\n    // Constructor which gets called once on contract deployment\r\n    constructor(address _tokenOwner) public {\r\n        transferOwnership(_tokenOwner);\r\n        setOps(_tokenOwner, true);\r\n        crowdSaleContract = msg.sender;\r\n        feeReceiver = _tokenOwner;\r\n        totalSupply = initialSupply;\r\n        balances[msg.sender] = initialSupply;\r\n        assetValue = 0;\r\n        feeCharge = 15;\r\n        freezeTransfer = true;\r\n        tokenAvailable = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the total supply of tokens.\r\n     * @dev The total supply is the amount of tokens which are currently in circulation.\r\n     * @return Amount of tokens in Sip.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address.\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount of tokens owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        if (!tokenAvailable) {\r\n            return 0;\r\n        }\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal transfer, can only be called by this contract.\r\n     * Will throw an exception to rollback the transaction if anything is wrong.\r\n     * @param _from The address from which the tokens should be transfered from.\r\n     * @param _to The address to which the tokens should be transfered to.\r\n     * @param _value The amount of tokens which should be transfered in Sip.\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != address(0), \"zero address is not allowed\");\r\n        require(_value >= 1000, \"must transfer more than 1000 sip\");\r\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\r\n        require(!frozenAccount[_from], \"sender address is frozen\");\r\n        require(!frozenAccount[_to], \"receiver address is frozen\");\r\n\r\n        uint256 transferValue = _value;\r\n        if (msg.sender != owner() && msg.sender != crowdSaleContract) {\r\n            uint256 fee = _value.div(1000).mul(feeCharge);\r\n            transferValue = _value.sub(fee);\r\n            balances[feeReceiver] = balances[feeReceiver].add(fee);\r\n            emit Fee(msg.sender, fee);\r\n            emit Transfer(_from, feeReceiver, fee);\r\n        }\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(transferValue);\r\n        if (tokenAvailable) {\r\n            emit Transfer(_from, _to, transferValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens to a specified address. The message sender has to pay the fee.\r\n     * @dev Calls _transfer with message sender address as _from parameter.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred in Sip.\r\n     * @return Indicates if the transfer was successful.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens from one address to another. The message sender has to pay the fee.\r\n     * @dev Calls _transfer with the addresses provided by the transactor.\r\n     * @param _from The address which you want to send tokens from.\r\n     * @param _to The address which you want to transfer to.\r\n     * @param _value The amount of tokens to be transferred in Sip.\r\n     * @return Indicates if the transfer was successful.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender], \"requesting more token than allowed\");\r\n\r\n        _transfer(_from, _to, _value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of the transactor.\r\n     * @dev Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which is allowed to retrieve the tokens.\r\n     * @param _value The amount of tokens to be spent in Sip.\r\n     * @return Indicates if the approval was successful.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\r\n        require(_spender != address(0), \"zero address is not allowed\");\r\n        require(_value >= 1000, \"must approve more than 1000 sip\");\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the amount of tokens that the owner allowed to the spender.\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner The address which owns the tokens.\r\n     * @param _spender The address which is allowed to retrieve the tokens.\r\n     * @return The amount of tokens still available for the spender in Sip.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Increase the amount of tokens that an owner allowed to a spender.\r\n     * @dev Approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which is allowed to retrieve the tokens.\r\n     * @param _addedValue The amount of tokens to increase the allowance by in Sip.\r\n     * @return Indicates if the approval was successful.\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\r\n        require(_spender != address(0), \"zero address is not allowed\");\r\n        require(_addedValue >= 1000, \"must approve more than 1000 sip\");\r\n        \r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease the amount of tokens that an owner allowed to a spender. \r\n     * @dev Approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which is allowed to retrieve the tokens.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by in Sip.\r\n     * @return Indicates if the approval was successful.\r\n     */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\r\n        require(_spender != address(0), \"zero address is not allowed\");\r\n        require(_subtractedValue >= 1000, \"must approve more than 1000 sip\");\r\n\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    } \r\n\r\n    /**\r\n     * @notice Burns a specific amount of tokens.\r\n     * @dev Tokens get technically destroyed by this function and are therefore no longer in circulation afterwards.\r\n     * @param _value The amount of token to be burned in Sip.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\r\n        require(_value <= balances[msg.sender], \"address has not enough token to burn\");\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n        emit Transfer(burner, address(0), _value);\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Modifies the assetValue which represents the monetized value (in EUR) of the whisky baking the token.\r\n     * @param _value The new value of the asset in EUR cents.\r\n     */\r\n    function setAssetValue(uint64 _value) public onlyOwner {\r\n        uint64 oldValue = assetValue;\r\n        assetValue = _value;\r\n        emit AssetValue(oldValue, _value);\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Modifies the feeCharge which calculates the fee for each transaction.\r\n     * @param _value The new value of the feeCharge as fraction of 1000 (e.g. 15 is 1,5%).\r\n     */\r\n    function setFeeCharge(uint64 _value) public onlyOwner {\r\n        require(_value <= feeChargeMax, \"can not increase fee charge over it's limit\");\r\n        uint64 oldValue = feeCharge;\r\n        feeCharge = _value;\r\n        emit FeeCharge(oldValue, _value);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Prevents/Allows target from sending & receiving tokens.\r\n     * @param _target Address to be frozen.\r\n     * @param _freeze Either to freeze or unfreeze it.\r\n     */\r\n    function freezeAccount(address _target, bool _freeze) public onlyOwner {\r\n        require(_target != address(0), \"zero address is not allowed\");\r\n\r\n        frozenAccount[_target] = _freeze;\r\n        emit FrozenFunds(_target, _freeze);\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Globally freeze all transfers for the token.\r\n     * @param _freeze Freeze or unfreeze every transfer.\r\n     */\r\n    function setFreezeTransfer(bool _freeze) public onlyOwner {\r\n        freezeTransfer = _freeze;\r\n        emit FreezeTransfer(_freeze);\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Allows the owner to set the address which receives the fees.\r\n     * @param _feeReceiver the address which should receive fees.\r\n     */\r\n    function setFeeReceiver(address _feeReceiver) public onlyOwner {\r\n        require(_feeReceiver != address(0), \"zero address is not allowed\");\r\n        feeReceiver = _feeReceiver;\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Make all tokens available for ERC20 wallets.\r\n     * @param _available Activate or deactivate all tokens\r\n     */\r\n    function setTokenAvailable(bool _available) public onlyOwner {\r\n        tokenAvailable = _available;\r\n    }\r\n}\r\n\r\n/**\r\n * @title WHISKY TOKEN ICO\r\n * @author WHYTOKEN GmbH\r\n * @notice WHISKY TOKEN (WHY) stands for a disruptive new possibility in the crypto currency market\r\n * due to the combination of High-End Whisky and Blockchain technology.\r\n * WHY is a german based token, which lets everyone participate in the lucrative crypto market\r\n * with minimal risk and effort through a high-end whisky portfolio as security.\r\n */\r\ncontract WhiskyTokenCrowdsale is Ownable, Operated {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint64;\r\n\r\n    // Address of the beneficiary which will receive the raised ETH \r\n    // Initialized during deployment\r\n    address public beneficiary;\r\n\r\n    // Deadline of the ICO as epoch time\r\n    // Initialized when entering the first phase\r\n    uint256 public deadline;\r\n\r\n    // Amount raised by the ICO in Ether\r\n    // Initialized during deployment\r\n    uint256 public amountRaisedETH;\r\n\r\n    // Amount raised by the ICO in Euro\r\n    // Initialized during deployment\r\n    uint256 public amountRaisedEUR;\r\n\r\n    // Amount of tokens sold in Sip\r\n    // Initialized during deployment\r\n    uint256 public tokenSold;\r\n\r\n    // Indicator if the funding goal has been reached\r\n    // Initialized during deployment\r\n    bool public fundingGoalReached;\r\n\r\n    // Indicator if the ICO already closed\r\n    // Initialized during deployment\r\n    bool public crowdsaleClosed;\r\n\r\n    // Internal indicator if we have checked our goals at the end of the ICO\r\n    // Initialized during deployment\r\n    bool private goalChecked;\r\n\r\n    // Instance of our deployed Whisky Token\r\n    // Initialized during deployment\r\n    WhiskyToken public tokenReward;\r\n\r\n    // Instance of the FIAT contract we use for ETH/EUR conversion\r\n    // Initialized during deployment\r\n    FiatContract public fiat;\r\n\r\n    // Amount of Euro cents we need to reach for the softcap\r\n    // 2.000.000 EUR\r\n    uint256 private minTokenSellInEuroCents = 200000000;\r\n\r\n    // Minimum amount of Euro cents you need to pay per transaction\r\n    // 30 EUR    \r\n    uint256 private minTokenBuyEuroCents = 3000;\r\n\r\n    // Minimum amount of tokens (in Sip) which are sold at the softcap\r\n    // 2.583.333 token\r\n    uint256 private minTokenSell = 2583333 * 1 ether;\r\n\r\n    // Maximum amount of tokens (in Sip) which are sold at the hardcap\r\n    // 25.250.000 tokens\r\n    uint256 private maxTokenSell = 25250000 * 1 ether;\r\n\r\n    // Minimum amount of tokens (in Sip) which the beneficiary will receive\r\n    // for the founders at the softcap\r\n    // 308.627 tokens\r\n    uint256 private minFounderToken = 308627 * 1 ether;\r\n\r\n    // Maximum amount of tokens (in Sip) which the beneficiary will receive\r\n    // for the founders at the hardcap\r\n    // 1.405.000 tokens\r\n    uint256 private maxFounderToken = 1405000 * 1 ether;\r\n\r\n    // Minimum amount of tokens (in Sip) which the beneficiary will receive\r\n    // for Research & Development and the Advisors after the ICO\r\n    // 154.313 tokens\r\n    uint256 private minRDAToken = 154313 * 1 ether;\r\n\r\n    // Maximum amount of tokens (in Sip) which the beneficiary will receive\r\n    // for Research & Development and the Advisors after the ICO\r\n    // 1.405.000 tokens\r\n    uint256 private maxRDAToken = 1405000 * 1 ether;\r\n\r\n    // Amount of tokens (in Sip) which a customer will receive as bounty\r\n    // 5 tokens\r\n    uint256 private bountyTokenPerPerson = 5 * 1 ether;\r\n\r\n    // Maximum amount of tokens (in Sip) which are available for bounty\r\n    // 40.000 tokens\r\n    uint256 private maxBountyToken = 40000 * 1 ether;\r\n\r\n    // Amount of tokens which are left for bounty\r\n    // Initialized during deployment\r\n    uint256 public tokenLeftForBounty;\r\n\r\n    // The pre-sale phase of the ICO\r\n    // 333.333 tokens for 60 cent/token\r\n    Phase private preSalePhase = Phase({\r\n        id: PhaseID.PreSale,\r\n        tokenPrice: 60,\r\n        tokenForSale: 333333 * 1 ether,\r\n        tokenLeft: 333333 * 1 ether\r\n    });\r\n\r\n    // The first public sale phase of the ICO\r\n    // 2.250.000 tokens for 80 cent/token\r\n    Phase private firstPhase = Phase({\r\n        id: PhaseID.First,\r\n        tokenPrice: 80,\r\n        tokenForSale: 2250000 * 1 ether,\r\n        tokenLeft: 2250000 * 1 ether\r\n    });\r\n\r\n    // The second public sale phase of the ICO\r\n    // 21.000.000 tokens for 100 cent/token\r\n    Phase private secondPhase = Phase({\r\n        id: PhaseID.Second,\r\n        tokenPrice: 100,\r\n        tokenForSale: 21000000 * 1 ether,\r\n        tokenLeft: 21000000 * 1 ether\r\n    });\r\n\r\n    // The third public sale phase of the ICO\r\n    // 1.666.667 tokens for 120 cent/token\r\n    Phase private thirdPhase = Phase({\r\n        id: PhaseID.Third,\r\n        tokenPrice: 120,\r\n        tokenForSale: 1666667 * 1 ether,\r\n        tokenLeft: 1666667 * 1 ether\r\n    });\r\n\r\n    // The closed phase of the ICO\r\n    // No token for sell\r\n    Phase private closedPhase = Phase({\r\n        id: PhaseID.Closed,\r\n        tokenPrice: ~uint64(0),\r\n        tokenForSale: 0,\r\n        tokenLeft: 0\r\n    });\r\n\r\n    // Points to the current phase\r\n    Phase public currentPhase;\r\n\r\n    // Structure for the phases\r\n    // Consists of an id, the tokenPrice and the amount\r\n    // of tokens available and left for sale\r\n    struct Phase {\r\n        PhaseID id;\r\n        uint64 tokenPrice;\r\n        uint256 tokenForSale;\r\n        uint256 tokenLeft;\r\n    }\r\n\r\n    // Enumeration for identification of the phases\r\n    enum PhaseID {\r\n        PreSale,        // 0 \r\n        First,          // 1\r\n        Second,         // 2\r\n        Third,          // 3\r\n        Closed          // 4\r\n    }    \r\n\r\n    // Mapping of an address to a customer\r\n    mapping(address => Customer) public customer;\r\n\r\n    // Structure representing a customer\r\n    // Consists of a rating, the amount of Ether and Euro the customer raised,\r\n    // and a boolean indicating if he/she has already received a bounty\r\n    struct Customer {\r\n        Rating rating;\r\n        uint256 amountRaisedEther;\r\n        uint256 amountRaisedEuro;\r\n        uint256 amountReceivedWhiskyToken;\r\n        bool hasReceivedBounty;\r\n    }\r\n\r\n    // Enumeration for identification of a rating for a customer\r\n    enum Rating {\r\n        Unlisted,       // 0: No known customer, can't buy any token\r\n        Whitelisted     // 1: Known customer by personal data, allowed to buy token\r\n    }\r\n\r\n    // Event definitions\r\n    event SaleClosed();\r\n    event GoalReached(address recipient, uint256 tokensSold, uint256 totalAmountRaised);\r\n    event WhitelistUpdated(address indexed _account, uint8 _phase);\r\n    event PhaseEntered(PhaseID phaseID);\r\n    event TokenSold(address indexed customer, uint256 amount);\r\n    event BountyTransfer(address indexed customer, uint256 amount);\r\n    event FounderTokenTransfer(address recipient, uint256 amount);\r\n    event RDATokenTransfer(address recipient, uint256 amount);\r\n    event FundsWithdrawal(address indexed recipient, uint256 amount);\r\n\r\n    // Constructor which gets called once on contract deployment\r\n    constructor() public {\r\n        setOps(msg.sender, true);\r\n        beneficiary = msg.sender;\r\n        tokenReward = new WhiskyToken(msg.sender);\r\n        fiat = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // Main\r\n        currentPhase = preSalePhase;\r\n        fundingGoalReached = false;\r\n        crowdsaleClosed = false;\r\n        goalChecked = false;\r\n        tokenLeftForBounty = maxBountyToken;\r\n        tokenReward.transfer(msg.sender, currentPhase.tokenForSale);\r\n        currentPhase.tokenLeft = 0;\r\n        tokenSold += currentPhase.tokenForSale;\r\n        amountRaisedEUR = amountRaisedEUR.add((currentPhase.tokenForSale.div(1 ether)).mul(currentPhase.tokenPrice));\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Advances the crowdsale to the next phase.\r\n     */\r\n    function nextPhase() public onlyOwner {\r\n        require(currentPhase.id != PhaseID.Closed, \"already reached the closed phase\");\r\n\r\n        uint8 nextPhaseNum = uint8(currentPhase.id) + 1;\r\n\r\n        if (PhaseID(nextPhaseNum) == PhaseID.First) {\r\n            currentPhase = firstPhase;\r\n            deadline = now + 365 * 1 days;\r\n        }\r\n        if (PhaseID(nextPhaseNum) == PhaseID.Second) {\r\n            currentPhase = secondPhase;\r\n        }\r\n        if (PhaseID(nextPhaseNum) == PhaseID.Third) {\r\n            currentPhase = thirdPhase;\r\n        }\r\n        if (PhaseID(nextPhaseNum) == PhaseID.Closed) {\r\n            currentPhase = closedPhase;\r\n        }\r\n\r\n        emit PhaseEntered(currentPhase.id);\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Set the rating of a customer by address.\r\n     * @param _account The address of the customer you want to change the rating of.\r\n     * @param _phase The rating as an uint:\r\n     * 0 => Unlisted\r\n     * 1 => Whitelisted\r\n     */\r\n    function updateWhitelist(address _account, uint8 _phase) external onlyOps returns (bool) {\r\n        require(_account != address(0), \"zero address is not allowed\");\r\n        require(_phase == uint8(Rating.Unlisted) || _phase == uint8(Rating.Whitelisted), \"invalid rating\");\r\n\r\n        Rating rating = Rating(_phase);\r\n        customer[_account].rating = rating;\r\n        emit WhitelistUpdated(_account, _phase);\r\n\r\n        if (rating > Rating.Unlisted && !customer[_account].hasReceivedBounty && tokenLeftForBounty > 0) {\r\n            customer[_account].hasReceivedBounty = true;\r\n            customer[_account].amountReceivedWhiskyToken = customer[_account].amountReceivedWhiskyToken.add(bountyTokenPerPerson);\r\n            tokenLeftForBounty = tokenLeftForBounty.sub(bountyTokenPerPerson);\r\n            require(tokenReward.transfer(_account, bountyTokenPerPerson), \"token transfer failed\");\r\n            emit BountyTransfer(_account, bountyTokenPerPerson);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the deadline is reached or the crowdsale has been closed.\r\n     */\r\n    modifier afterDeadline() {\r\n        if ((now >= deadline && currentPhase.id >= PhaseID.First) || currentPhase.id == PhaseID.Closed) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the funding goal was reached.\r\n     * Can only be called after the deadline or if the crowdsale has been closed.\r\n     * @dev Checks if the goal or time limit has been reached and ends the campaign.\r\n     * Should be directly called after the ICO.\r\n     */\r\n    function checkGoalReached() public afterDeadline {\r\n        if (!goalChecked) {\r\n            if (_checkFundingGoalReached()) {\r\n                emit GoalReached(beneficiary, tokenSold, amountRaisedETH);\r\n            }\r\n            if (!crowdsaleClosed) {\r\n                crowdsaleClosed = true;\r\n                emit SaleClosed();\r\n            }\r\n            goalChecked = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for checking if we reached our funding goal.\r\n     * @return Indicates if the funding goal has been reached.\r\n     */\r\n    function _checkFundingGoalReached() internal returns (bool) {\r\n        if (!fundingGoalReached) {\r\n            if (amountRaisedEUR >= minTokenSellInEuroCents) {\r\n                fundingGoalReached = true;\r\n            }\r\n        }\r\n        return fundingGoalReached;\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () external payable {\r\n        _buyToken(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Buy tokens for ether. You can also just send ether to the contract to buy tokens.\r\n     * Your address needs to be whitelisted first.\r\n     * @dev Allows the caller to buy token for his address.\r\n     * Implemented for the case that other contracts want to buy tokens.\r\n     */\r\n    function buyToken() external payable {\r\n        _buyToken(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Buy tokens for another address. The address still needs to be whitelisted.\r\n     * @dev Allows the caller to buy token for a different address.\r\n     * @param _receiver Address of the person who should receive the tokens.\r\n     */\r\n    function buyTokenForAddress(address _receiver) external payable {\r\n        require(_receiver != address(0), \"zero address is not allowed\");\r\n        _buyToken(_receiver);\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Send tokens to receiver who has payed with FIAT or other currencies.\r\n     * @param _receiver Address of the person who should receive the tokens.\r\n     * @param _cent The amount of euro cents which the person has payed.\r\n     */\r\n    function buyTokenForAddressWithEuroCent(address _receiver, uint64 _cent) external onlyOps {\r\n        require(!crowdsaleClosed, \"crowdsale is closed\");\r\n        require(_receiver != address(0), \"zero address is not allowed\");\r\n        require(currentPhase.id != PhaseID.PreSale, \"not allowed to buy token in presale phase\");\r\n        require(currentPhase.id != PhaseID.Closed, \"not allowed to buy token in closed phase\");\r\n        require(customer[_receiver].rating == Rating.Whitelisted, \"address is not whitelisted\");\r\n        _sendTokenReward(_receiver, _cent);        \r\n        _checkFundingGoalReached();\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for buying token.\r\n     * @param _receiver Address of the person who should receive the tokens.\r\n     */\r\n    function _buyToken(address _receiver) internal {\r\n        require(!crowdsaleClosed, \"crowdsale is closed\");\r\n        require(currentPhase.id != PhaseID.PreSale, \"not allowed to buy token in presale phase\");\r\n        require(currentPhase.id != PhaseID.Closed, \"not allowed to buy token in closed phase\");\r\n        require(customer[_receiver].rating == Rating.Whitelisted, \"address is not whitelisted\");\r\n        _sendTokenReward(_receiver, 0);\r\n        _checkFundingGoalReached();\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for sending token as reward for ether.\r\n     * @param _receiver Address of the person who should receive the tokens.\r\n     */\r\n    function _sendTokenReward(address _receiver, uint64 _cent) internal {\r\n        // Remember the ETH amount of the message sender, not the token receiver!\r\n        // We need this because if the softcap was not reached\r\n        // the message sender should be able to retrive his ETH\r\n        uint256 amountEuroCents;\r\n        uint256 tokenAmount;\r\n        if (msg.value > 0) {\r\n            uint256 amount = msg.value;\r\n            customer[msg.sender].amountRaisedEther = customer[msg.sender].amountRaisedEther.add(amount);\r\n            amountRaisedETH = amountRaisedETH.add(amount);\r\n            amountEuroCents = amount.div(fiat.EUR(0));\r\n            tokenAmount = (amount.div(getTokenPrice())) * 1 ether;\r\n        } else if (_cent > 0) {\r\n            amountEuroCents = _cent;\r\n            tokenAmount = (amountEuroCents.div(currentPhase.tokenPrice)) * 1 ether;\r\n        } else {\r\n            revert(\"this should never happen\");\r\n        }\r\n        \r\n        uint256 sumAmountEuroCents = customer[_receiver].amountRaisedEuro.add(amountEuroCents);\r\n        customer[_receiver].amountRaisedEuro = sumAmountEuroCents;\r\n        amountRaisedEUR = amountRaisedEUR.add(amountEuroCents);\r\n\r\n        require(((tokenAmount / 1 ether) * currentPhase.tokenPrice) >= minTokenBuyEuroCents, \"must buy token for at least 30 EUR\");\r\n        require(tokenAmount <= currentPhase.tokenLeft, \"not enough token left in current phase\");\r\n        currentPhase.tokenLeft = currentPhase.tokenLeft.sub(tokenAmount);\r\n\r\n        customer[_receiver].amountReceivedWhiskyToken = customer[_receiver].amountReceivedWhiskyToken.add(tokenAmount);\r\n        tokenSold = tokenSold.add(tokenAmount);\r\n        require(tokenReward.transfer(_receiver, tokenAmount), \"token transfer failed\");\r\n        emit TokenSold(_receiver, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw your funds if the ICO softcap has not been reached.\r\n     * @dev Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n     * sends the entire ether amount to the beneficiary.\r\n     * Also caluclates and sends the tokens for the founders, research & development and advisors.\r\n     * All tokens which were not sold or send will be burned at the end.\r\n     * If goal was not reached, each contributor can withdraw the amount they contributed.\r\n     */\r\n    function safeWithdrawal() public afterDeadline {\r\n        require(crowdsaleClosed, \"crowdsale must be closed\");\r\n        \r\n        if (!fundingGoalReached) {\r\n            // Let customers retrieve their ether\r\n            require(customer[msg.sender].amountRaisedEther > 0, \"message sender has not raised any ether to this contract\");\r\n            uint256 amount = customer[msg.sender].amountRaisedEther;\r\n            customer[msg.sender].amountRaisedEther = 0;\r\n            msg.sender.transfer(amount);\r\n            emit FundsWithdrawal(msg.sender, amount);\r\n        } else {\r\n            // Let owner retrive current ether amount and founder token\r\n            require(beneficiary == msg.sender, \"message sender is not the beneficiary\");\r\n            uint256 ethAmount = address(this).balance;\r\n            beneficiary.transfer(ethAmount);\r\n            emit FundsWithdrawal(beneficiary, ethAmount);\r\n\r\n            // Calculate and transfer founder token\r\n            uint256 founderToken = (tokenSold - minTokenSell) * (maxFounderToken - minFounderToken) / (maxTokenSell - minTokenSell) + minFounderToken - (maxBountyToken - tokenLeftForBounty);\r\n            require(tokenReward.transfer(beneficiary, founderToken), \"founder token transfer failed\");\r\n            emit FounderTokenTransfer(beneficiary, founderToken);\r\n\r\n            // Calculate and transfer research and advisor token\r\n            uint256 rdaToken = (tokenSold - minTokenSell) * (maxRDAToken - minRDAToken) / (maxTokenSell - minTokenSell) + minRDAToken;\r\n            require(tokenReward.transfer(beneficiary, rdaToken), \"RDA token transfer failed\");\r\n            emit RDATokenTransfer(beneficiary, rdaToken);\r\n\r\n            // Burn all leftovers\r\n            tokenReward.burn(tokenReward.balanceOf(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Allows early withdrawal of ether from the contract if the funding goal is reached.\r\n     * Only the owner and beneficiary of the contract can call this function.\r\n     * @param _amount The amount of ETH (in wei) which should be retreived.\r\n     */\r\n    function earlySafeWithdrawal(uint256 _amount) public onlyOwner {\r\n        require(fundingGoalReached, \"funding goal has not been reached\");\r\n        require(beneficiary == msg.sender, \"message sender is not the beneficiary\");\r\n        require(address(this).balance >= _amount, \"contract has less ether in balance than requested\");\r\n\r\n        beneficiary.transfer(_amount);\r\n        emit FundsWithdrawal(beneficiary, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to calculate token price based on the ether price and current phase.\r\n     */\r\n    function getTokenPrice() internal view returns (uint256) {\r\n        return getEtherInEuroCents() * currentPhase.tokenPrice / 100;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to calculate 1 EUR in WEI.\r\n     */\r\n    function getEtherInEuroCents() internal view returns (uint256) {\r\n        return fiat.EUR(0) * 100;\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Change the address of the fiat contract\r\n     * @param _fiat The new address of the fiat contract\r\n     */\r\n    function setFiatContractAddress(address _fiat) public onlyOwner {\r\n        require(_fiat != address(0), \"zero address is not allowed\");\r\n        fiat = FiatContract(_fiat);\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Change the address of the beneficiary\r\n     * @param _beneficiary The new address of the beneficiary\r\n     */\r\n    function setBeneficiary(address _beneficiary) public onlyOwner {\r\n        require(_beneficiary != address(0), \"zero address is not allowed\");\r\n        beneficiary = _beneficiary;\r\n    }\r\n}\r\n\r\n/**\r\n * @author https://github.com/hunterlong/fiatcontractd\r\n */\r\ncontract FiatContract {\r\n    function ETH(uint _id) public view returns (uint256);\r\n    function USD(uint _id) public view returns (uint256);\r\n    function EUR(uint _id) public view returns (uint256);\r\n    function GBP(uint _id) public view returns (uint256);\r\n    function updatedAt(uint _id) public view returns (uint);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint8\"},{\"name\":\"tokenPrice\",\"type\":\"uint64\"},{\"name\":\"tokenForSale\",\"type\":\"uint256\"},{\"name\":\"tokenLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLeftForBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setOps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"earlySafeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fiat\",\"type\":\"address\"}],\"name\":\"setFiatContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_phase\",\"type\":\"uint8\"}],\"name\":\"updateWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"buyTokenForAddress\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_cent\",\"type\":\"uint64\"}],\"name\":\"buyTokenForAddressWithEuroCent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOps\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaisedEUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaisedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"customer\",\"outputs\":[{\"name\":\"rating\",\"type\":\"uint8\"},{\"name\":\"amountRaisedEther\",\"type\":\"uint256\"},{\"name\":\"amountRaisedEuro\",\"type\":\"uint256\"},{\"name\":\"amountReceivedWhiskyToken\",\"type\":\"uint256\"},{\"name\":\"hasReceivedBounty\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_phase\",\"type\":\"uint8\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"phaseID\",\"type\":\"uint8\"}],\"name\":\"PhaseEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BountyTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FounderTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RDATokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WhiskyTokenCrowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ed10ac8fafe0bf026ec8db551deea291e42de9a1e011026345dfd13efc4f8661"}]}