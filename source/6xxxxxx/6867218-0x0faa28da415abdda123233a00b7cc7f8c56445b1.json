{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    // safeApprove should only be called when setting an initial allowance, \r\n    // or when resetting it to zero. To increase and decrease it, use \r\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n    require(token.approve(spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    require(token.approve(spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n    require(token.approve(spender, newAllowance));\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Vesting.sol\r\n\r\n/**\r\n * @title Vesting\r\n * @dev Vesting is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract Vesting is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // ERC20 basic token contract being held\r\n    IERC20 private _token;\r\n\r\n    // Info holds all the relevant information to calculate the right amount for `release`\r\n    struct Info {\r\n        bool    known;          // Logs whether or not the address is known and eligible to receive tokens\r\n        uint256 totalAmount;    // Total amount of tokens to receive\r\n        uint256 receivedAmount; // Amount of tokens already received\r\n        uint256 startTime;      // Starting time of vesting\r\n        uint256 releaseTime;    // End time of vesting\r\n    }\r\n\r\n    // Mapping of an address to it's information\r\n    mapping(address => Info) private _info;\r\n\r\n    constructor(\r\n        IERC20 token\r\n    )\r\n        public\r\n    {\r\n        _token = token;\r\n    }\r\n    \r\n    /**\r\n     * @notice Add beneficiaries to the contract, allowing them to withdraw tokens.\r\n     * @param beneficiary The address associated with the beneficiary.\r\n     * @param releaseTime The timestamp at which 100% of their allocation is freed up.\r\n     * @param amount The amount of tokens they can receive in total.\r\n     */\r\n    function addBeneficiary(\r\n        address beneficiary,\r\n        uint256 startTime,\r\n        uint256 releaseTime,\r\n        uint256 amount\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        Info storage info = _info[beneficiary];\r\n        require(!info.known, \"This address is already known to the contract.\");\r\n        require(releaseTime > startTime, \"Release time must be later than the start time.\");\r\n        require(releaseTime > block.timestamp, \"End of vesting period must be somewhere in the future.\");\r\n\r\n        info.startTime = startTime; // Set starting time\r\n        info.totalAmount = amount; // Set amount\r\n        info.releaseTime = releaseTime; // Set release time\r\n        info.known = true; // Prevent overwriting of address data\r\n    }\r\n\r\n    /**\r\n     * @notice Remove a beneficiary from the contract, preventing them from \r\n     * retrieving tokens in the future.\r\n     * @param beneficiary The address associated with the beneficiary.\r\n     */\r\n    function removeBeneficiary(address beneficiary) external onlyOwner {\r\n        Info storage info = _info[beneficiary];\r\n        require(info.known, \"The address you are trying to remove is unknown to the contract\");\r\n\r\n        _release(beneficiary); // Release leftover tokens before removing the investor\r\n        info.known = false;\r\n        info.totalAmount = 0;\r\n        info.receivedAmount = 0;\r\n        info.startTime = 0;\r\n        info.releaseTime = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw tokens from the contract. This function is strictly\r\n     * for the owner, intended to take out any leftovers if needed.\r\n     * @param amount The amount of tokens to take out.\r\n     */\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        _token.safeTransfer(owner(), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     * This function will check if a caller is eligible to receive tokens\r\n     * and if so, will then call the internal `_release` function.\r\n     */\r\n    function release() external {\r\n        require(_info[msg.sender].known, \"You are not eligible to receive tokens from this contract.\");\r\n        _release(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Simple function to return vesting information for a caller.\r\n     * Callers can then validate if their information has been properly stored,\r\n     * instead of trusting the contract owner.\r\n     */\r\n    function check() external view returns (uint256, uint256, uint256, uint256) {\r\n        return (\r\n            _info[msg.sender].totalAmount, \r\n            _info[msg.sender].receivedAmount,\r\n            _info[msg.sender].startTime, \r\n            _info[msg.sender].releaseTime\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to release tokens to a beneficiary.\r\n     * This function has been extended from the `release` function included in\r\n     * `TokenTimelock.sol` included in the OpenZeppelin-solidity library, to allow\r\n     * for a 'second-by-second' token vesting schedule. Since block timestamps\r\n     * is the closest Solidity can get to reading the current time, this\r\n     * mechanism is used.\r\n     */\r\n    function _release(address beneficiary) internal {\r\n        Info storage info = _info[beneficiary];\r\n        if (block.timestamp >= info.releaseTime) {\r\n            uint256 remainingTokens = info.totalAmount.sub(info.receivedAmount);\r\n            require(remainingTokens > 0, \"No tokens left to take out.\");\r\n\r\n            // Since `safeTransfer` will throw upon failure, we can modify the state beforehand.\r\n            info.receivedAmount = info.totalAmount;\r\n            _token.safeTransfer(beneficiary, remainingTokens);\r\n        } else if (block.timestamp > info.startTime) {\r\n            // Calculate allowance\r\n            uint256 diff = info.releaseTime.sub(info.startTime);\r\n            uint256 tokensPerTick = info.totalAmount.div(diff);\r\n            uint256 ticks = block.timestamp.sub(info.startTime);\r\n            uint256 tokens = tokensPerTick.mul(ticks);\r\n            uint256 receivableTokens = tokens.sub(info.receivedAmount);\r\n            require(receivableTokens > 0, \"No tokens to take out right now.\");\r\n\r\n            // Since `safeTransfer` will throw upon failure, we can modify the state beforehand.\r\n            info.receivedAmount = info.receivedAmount.add(receivableTokens);\r\n            _token.safeTransfer(beneficiary, receivableTokens);\r\n        } else {\r\n            // We could let SafeMath revert release calls if vesting has not started yet.\r\n            // However, in the interest of clarity to contract callers, this error\r\n            // message is added instead.\r\n            revert(\"This address is not eligible to receive tokens yet.\");\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"removeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"check\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Vesting","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000940a2db1b7008b6c776d4faaca729d6d4a4aa551","Library":"","SwarmSource":"bzzr://553ca159c085d491ff265ef371451fc6435747b2c746b5689ef5250a66f5856f"}]}