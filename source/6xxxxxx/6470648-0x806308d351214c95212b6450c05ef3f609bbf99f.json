{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}  \r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ClaimReward is Ownable {\r\n    /// @dev This emits when claimReward is called\r\n    event LogClaimReward(address indexed sender, uint256 indexed rewards);\r\n    \r\n    address communityFundAddress = 0x325a7A78e5da2333b475570398F27D8F4e8E9Eb3;\r\n    address livePeerContractAddress = 0x58b6A8A3302369DAEc383334672404Ee733aB239;\r\n\r\n    // Delegators addresses \r\n    address[] private delegatorAddressList;\r\n\r\n    mapping (address => Delegator) rewardDelegators;\r\n    // count the number of reward claimed    \r\n    uint256 public claimCounter = 0;\r\n    // Status of the current contract \r\n    bool public contractStopped = false;\r\n    \r\n    struct Delegator {\r\n        address delegator;\r\n        uint rewards;\r\n        bool hasClaimed;\r\n    }\r\n    \r\n    // Used to check contract status before executing createQuestionnaire function\r\n    modifier haltInEmergency {\r\n        require(!contractStopped);\r\n        _;\r\n    }\r\n    \r\n    /// @notice only the contract owner is allowed to change\r\n    /// @dev change the contract status to pause or continue\r\n    function toggleContractStopped() public onlyOwner {\r\n        contractStopped = !contractStopped;\r\n    }\r\n    \r\n    // @dev initialize delegator address and rewards\r\n    function updateDelegatorRewards(address[] delegatorAddress, uint[] rewards) onlyOwner public returns (bool) {\r\n        for (uint i=0; i<delegatorAddress.length; i++) {\r\n            Delegator memory delegator = Delegator(delegatorAddress[i], rewards[i] * 10 ** 14 , false);\r\n            rewardDelegators[delegatorAddress[i]] = delegator;\r\n            delegatorAddressList.push(delegatorAddress[i]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // @dev query the delegator rewards\r\n    function checkRewards() external view returns (uint256) {\r\n        return rewardDelegators[msg.sender].rewards;\r\n    }\r\n    \r\n    // @dev transfer the reward to the delegator\r\n    function claimRewards() external haltInEmergency returns (bool) {\r\n        require(!rewardDelegators[msg.sender].hasClaimed);\r\n        require(rewardDelegators[msg.sender].delegator == msg.sender);\r\n        require((ERC20(livePeerContractAddress).balanceOf(this) - this.checkRewards()) > 0);\r\n        require(claimCounter < this.getAllDelegatorAddress().length);\r\n        \r\n        rewardDelegators[msg.sender].hasClaimed = true;\r\n        claimCounter += 1;\r\n        ERC20(livePeerContractAddress).transfer(msg.sender, rewardDelegators[msg.sender].rewards);\r\n        \r\n        emit LogClaimReward(msg.sender, rewardDelegators[msg.sender].rewards);\r\n        \r\n        return true;\r\n    }\r\n\r\n    // @dev transfer those remaining LPT to the community fund address\r\n    function activateCommunityFund() external onlyOwner returns (bool) {\r\n        require(ERC20(livePeerContractAddress).balanceOf(this) > 0);\r\n        ERC20(livePeerContractAddress).transfer(communityFundAddress, ERC20(livePeerContractAddress).balanceOf(this));\r\n        return true;\r\n    }\r\n    \r\n    // @dev return all delegators\r\n    function getAllDelegatorAddress() external view returns (address[]) {\r\n        return delegatorAddressList;  \r\n    } \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"activateCommunityFund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDelegatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegatorAddress\",\"type\":\"address[]\"},{\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"updateDelegatorRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractStopped\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"LogClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ClaimReward","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dbaa2571ce0aa7e023d20ab92fce65b37bbd207f31082e935234494ccea6c1ba"}]}