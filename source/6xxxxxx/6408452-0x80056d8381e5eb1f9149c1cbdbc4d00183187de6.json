{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\ninterface TokenToken {\r\n    function pause() public;\r\n    function unpause() public;\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function getTotalSupply() public view returns(uint);\r\n    function finishMinting() public returns (bool);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n// File: contracts/TeamAndAdvisorsAllocation.sol\r\n\r\n/**\r\n * @title Team and Advisors Token Allocation contract\r\n */\r\n\r\ncontract TeamAndAdvisorsAllocation is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    uint256 public unlockedAt;\r\n    uint256 public canSelfDestruct;\r\n    uint256 public tokensCreated;\r\n    uint256 public allocatedTokens;\r\n    uint256 private totalTeamAndAdvisorsAllocation = 4000000e18; // 4 mm\r\n\r\n    mapping (address => uint256) public teamAndAdvisorsAllocations;\r\n\r\n    TokenToken public token;\r\n\r\n    /**\r\n     * @dev constructor function that sets owner and token for the TeamAndAdvisorsAllocation contract\r\n     * @param _token Token contract address for TokenToken\r\n     */\r\n    function TeamAndAdvisorsAllocation(address _token) public {\r\n        token = TokenToken(_token);\r\n        unlockedAt = now.add(3 days);\r\n        canSelfDestruct = now.add(4 days);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds founders' token allocation\r\n     * @param teamOrAdvisorsAddress Address of a founder\r\n     * @param allocationValue Number of tokens allocated to a founder\r\n     * @return true if address is correctly added\r\n     */\r\n    function addTeamAndAdvisorsAllocation(address teamOrAdvisorsAddress, uint256 allocationValue)\r\n    external\r\n    onlyOwner\r\n    returns(bool)\r\n    {\r\n        assert(teamAndAdvisorsAllocations[teamOrAdvisorsAddress] == 0); // can only add once.\r\n\r\n        allocatedTokens = allocatedTokens.add(allocationValue);\r\n        require(allocatedTokens <= totalTeamAndAdvisorsAllocation);\r\n\r\n        teamAndAdvisorsAllocations[teamOrAdvisorsAddress] = allocationValue;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow company to unlock allocated tokens by transferring them whitelisted addresses.\r\n     * Need to be called by each address\r\n     */\r\n    function unlock() external {\r\n        assert(now >= unlockedAt);\r\n\r\n        // During first unlock attempt fetch total number of locked tokens.\r\n        if (tokensCreated == 0) {\r\n            tokensCreated = token.balanceOf(this);\r\n        }\r\n\r\n        uint256 transferAllocation = teamAndAdvisorsAllocations[msg.sender];\r\n        teamAndAdvisorsAllocations[msg.sender] = 0;\r\n\r\n        // Will fail if allocation (and therefore toTransfer) is 0.\r\n        require(token.transfer(msg.sender, transferAllocation));\r\n    }\r\n\r\n    /**\r\n     * @dev allow for selfdestruct possibility and sending funds to owner\r\n     */\r\n    function kill() public onlyOwner {\r\n        assert(now >= canSelfDestruct);\r\n        uint256 balance = token.balanceOf(this);\r\n\r\n        if (balance > 0) {\r\n            token.transfer(owner, balance);\r\n        }\r\n\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n// File: contracts/Whitelist.sol\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) public allowedAddresses;\r\n\r\n    event WhitelistUpdated(uint256 timestamp, string operation, address indexed member);\r\n\r\n    function addToWhitelist(address[] _addresses) public onlyOwner {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            allowedAddresses[_addresses[i]] = true;\r\n            WhitelistUpdated(now, \"Added\", _addresses[i]);\r\n        }\r\n    }\r\n\r\n    function removeFromWhitelist(address[] _addresses) public onlyOwner {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            allowedAddresses[_addresses[i]] = false;\r\n            WhitelistUpdated(now, \"Removed\", _addresses[i]);\r\n        }\r\n    }\r\n\r\n    function isWhitelisted(address _address) public view returns (bool) {\r\n        return allowedAddresses[_address];\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/TokenCrowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    // token contract to be set\r\n    TokenToken public token;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n    function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n        require(_startTime >= now);\r\n        require(_endTime > _startTime);\r\n        require(_rate > 0);\r\n        require(_wallet != address(0));\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    event Finalized();\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        finalization();\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Can be overridden to add finalization logic. The overriding function\r\n     * should call super.finalization() to ensure the chain of finalization is\r\n     * executed entirely.\r\n     */\r\n    function finalization() internal {\r\n    }\r\n}\r\n\r\n// File: contracts/TokenCrowdsale.sol\r\n\r\n/**\r\n * @title Token Crowdsale contract - crowdsale contract for the Token tokens.\r\n */\r\n\r\ncontract TokenCrowdsale is FinalizableCrowdsale, Pausable {\r\n    uint256 constant public REWARD_SHARE =                   4500000e18; // 4.5 mm\r\n    uint256 constant public NON_VESTED_TEAM_ADVISORS_SHARE = 37500000e18; //  37.5 mm\r\n    uint256 constant public PRE_CROWDSALE_CAP =              500000e18; //  0.5 mm\r\n    uint256 constant public PUBLIC_CROWDSALE_CAP =           7500000e18; // 7.5 mm\r\n    uint256 constant public TOTAL_TOKENS_FOR_CROWDSALE = PRE_CROWDSALE_CAP + PUBLIC_CROWDSALE_CAP;\r\n    uint256 constant public TOTAL_TOKENS_SUPPLY =            50000000e18; // 50 mm\r\n    uint256 constant public PERSONAL_CAP =                   2500000e18; //   2.5 mm\r\n\r\n    address public rewardWallet;\r\n    address public teamAndAdvisorsAllocation;\r\n\r\n    // remainderPurchaser and remainderTokens info saved in the contract\r\n    // used for reference for contract owner to send refund if any to last purchaser after end of crowdsale\r\n    address public remainderPurchaser;\r\n    uint256 public remainderAmount;\r\n\r\n    mapping (address => uint256) public trackBuyersPurchases;\r\n\r\n    // external contracts\r\n    Whitelist public whitelist;\r\n\r\n    event PrivateInvestorTokenPurchase(address indexed investor, uint256 tokensPurchased);\r\n    event TokenRateChanged(uint256 previousRate, uint256 newRate);\r\n\r\n    /**\r\n     * @dev Contract constructor function\r\n     * @param _startTime The timestamp of the beginning of the crowdsale\r\n     * @param _endTime Timestamp when the crowdsale will finish\r\n     * @param _whitelist contract containing the whitelisted addresses\r\n     * @param _rate The token rate per ETH\r\n     * @param _wallet Multisig wallet that will hold the crowdsale funds.\r\n     * @param _rewardWallet wallet that will hold tokens bounty and rewards campaign\r\n     */\r\n    function TokenCrowdsale\r\n    (\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        address _whitelist,\r\n        uint256 _rate,\r\n        address _wallet,\r\n        address _rewardWallet\r\n    )\r\n    public\r\n    FinalizableCrowdsale()\r\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\r\n    {\r\n\r\n        require(_whitelist != address(0) && _wallet != address(0) && _rewardWallet != address(0));\r\n        whitelist = Whitelist(_whitelist);\r\n        rewardWallet = _rewardWallet;\r\n\r\n    }\r\n\r\n    function setTokenContractAddress(address _token) onlyOwner {\r\n        token = TokenToken(_token);\r\n    }\r\n\r\n    modifier whitelisted(address beneficiary) {\r\n        require(whitelist.isWhitelisted(beneficiary));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev change crowdsale rate\r\n     * @param newRate Figure that corresponds to the new rate per token\r\n     */\r\n    function setRate(uint256 newRate) external onlyOwner {\r\n        require(newRate != 0);\r\n\r\n        TokenRateChanged(rate, newRate);\r\n        rate = newRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint tokens for pre crowdsale putchases before crowdsale starts\r\n     * @param investorsAddress Purchaser's address\r\n     * @param tokensPurchased Tokens purchased during pre crowdsale\r\n     */\r\n    function mintTokenForPreCrowdsale(address investorsAddress, uint256 tokensPurchased)\r\n    external\r\n    onlyOwner\r\n    {\r\n        require(now < startTime && investorsAddress != address(0));\r\n        require(token.getTotalSupply().add(tokensPurchased) <= PRE_CROWDSALE_CAP);\r\n\r\n        token.mint(investorsAddress, tokensPurchased);\r\n        PrivateInvestorTokenPurchase(investorsAddress, tokensPurchased);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the address which should receive the vested team tokens share on finalization\r\n     * @param _teamAndAdvisorsAllocation address of team and advisor allocation contract\r\n     */\r\n    function setTeamWalletAddress(address _teamAndAdvisorsAllocation) public onlyOwner {\r\n        require(_teamAndAdvisorsAllocation != address(0x0));\r\n        teamAndAdvisorsAllocation = _teamAndAdvisorsAllocation;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev payable function that allow token purchases\r\n     * @param beneficiary Address of the purchaser\r\n     */\r\n    function buyTokens(address beneficiary)\r\n    public\r\n    whenNotPaused\r\n    whitelisted(beneficiary)\r\n    payable\r\n    {\r\n        require(beneficiary != address(0));\r\n        require(msg.sender == beneficiary);\r\n        require(validPurchase() && token.getTotalSupply() < TOTAL_TOKENS_FOR_CROWDSALE);\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        require(trackBuyersPurchases[msg.sender].add(tokens) <= PERSONAL_CAP);\r\n\r\n        trackBuyersPurchases[beneficiary] = trackBuyersPurchases[beneficiary].add(tokens);\r\n\r\n        //remainder logic\r\n        if (token.getTotalSupply().add(tokens) > TOTAL_TOKENS_FOR_CROWDSALE) {\r\n            tokens = TOTAL_TOKENS_FOR_CROWDSALE.sub(token.getTotalSupply());\r\n            weiAmount = tokens.div(rate);\r\n\r\n            // save info so as to refund purchaser after crowdsale's end\r\n            remainderPurchaser = msg.sender;\r\n            remainderAmount = msg.value.sub(weiAmount);\r\n        }\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    // overriding Crowdsale#hasEnded to add cap logic\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        if (token.getTotalSupply() == TOTAL_TOKENS_FOR_CROWDSALE) {\r\n            return true;\r\n        }\r\n\r\n        return super.hasEnded();\r\n    }\r\n\r\n    /**\r\n     * @dev finalizes crowdsale\r\n     */\r\n    function finalization() internal {\r\n        // This must have been set manually prior to finalize().\r\n        require(teamAndAdvisorsAllocation != address(0x0));\r\n\r\n        // final minting\r\n        token.mint(teamAndAdvisorsAllocation, NON_VESTED_TEAM_ADVISORS_SHARE);\r\n        token.mint(rewardWallet, REWARD_SHARE);\r\n\r\n        if (TOTAL_TOKENS_SUPPLY > token.getTotalSupply()) {\r\n            uint256 remainingTokens = TOTAL_TOKENS_SUPPLY.sub(token.getTotalSupply());\r\n\r\n            token.mint(wallet, remainingTokens);\r\n        }\r\n\r\n        token.finishMinting();\r\n        TokenToken(token).unpause();\r\n        super.finalization();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"investorsAddress\",\"type\":\"address\"},{\"name\":\"tokensPurchased\",\"type\":\"uint256\"}],\"name\":\"mintTokenForPreCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainderAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainderPurchaser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_CROWDSALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamAndAdvisorsAllocation\",\"type\":\"address\"}],\"name\":\"setTeamWalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REWARD_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLIC_CROWDSALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAndAdvisorsAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKENS_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKENS_FOR_CROWDSALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NON_VESTED_TEAM_ADVISORS_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"trackBuyersPurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERSONAL_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_whitelist\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_rewardWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensPurchased\",\"type\":\"uint256\"}],\"name\":\"PrivateInvestorTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"TokenRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"TokenCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005bc9ab20000000000000000000000000000000000000000000000000000000005c856cc000000000000000000000000007f09926167cb5f42ec8fbe49f2bf80fadb34c5a00000000000000000000000000000000000000000000000000000000000003e80000000000000000000000005aa9e0727b57cf9ac354626a3ea137317a30e636000000000000000000000000123be8890f375398d17137da322d2154c07259a2","Library":"","SwarmSource":"bzzr://f81549880e37e6a012dbe5ca636a9c7ce4ce340efa8526eb1e2446e37eb0e15f"}]}