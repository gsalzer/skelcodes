{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface ERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f\r\ninterface ERC721Metadata /* is ERC721 */ {\r\n    /// @notice A descriptive name for a collection of NFTs in this contract\r\n    function name() external pure returns (string _name);\r\n\r\n    /// @notice An abbreviated name for NFTs in this contract\r\n    function symbol() external pure returns (string _symbol);\r\n\r\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n    ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n    ///  Metadata JSON Schema\".\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd\r\ninterface ERC721 /* is ERC165 */ {\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n\r\n    /// @dev This emits when the approved address for an NFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that NFT (if any) is reset to none.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all NFTs of the owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @notice Count all NFTs assigned to an owner\r\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _owner An address for whom to query the balance\r\n    /// @return The number of NFTs owned by `_owner`, possibly zero\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    /// @notice Find the owner of an NFT\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @param _tokenId The identifier for an NFT\r\n    /// @return The address of the owner of the NFT\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\"\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Set or reaffirm the approved address for an NFT\r\n    /// @dev The zero address indicates there is no approved address.\r\n    /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved NFT controller\r\n    /// @param _tokenId The NFT to approve\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all of `msg.sender`'s assets.\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\r\n    ///  multiple operators per owner.\r\n    /// @param _operator Address to add to the set of authorized operators.\r\n    /// @param _approved True if the operator is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the NFTs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n    /**\r\n    * @notice Handle the receipt of an NFT\r\n    * @dev The ERC721 smart contract calls this function on the recipient\r\n    *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n    *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n    *  than the magic value MUST result in the transaction being reverted.\r\n    *  Note: the contract address is always the message sender.\r\n    * @param _from The sending address\r\n    * @param _tokenId The NFT identifier which is being transfered\r\n    * @param _data Additional data with no specified format\r\n    * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n    */\r\n    function onERC721Received(address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\r\n}\r\n\r\n/**\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Only the owner of contract\r\n     */ \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer the ownership to other\r\n     *      - Only the owner can operate\r\n     */ \r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /** \r\n     * @dev Accept the ownership from last owner\r\n     */ \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract TRNData is Owned {\r\n    TripioRoomNightData dataSource;\r\n    /**\r\n     * Only the valid vendor and the vendor is valid\r\n     */ \r\n    modifier onlyVendor {\r\n        uint256 vendorId = dataSource.vendorIds(msg.sender);\r\n        require(vendorId > 0);\r\n        (,,,bool valid) = dataSource.getVendor(vendorId);\r\n        require(valid);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * The vendor is valid\r\n     */\r\n    modifier vendorValid(address _vendor) {\r\n        uint256 vendorId = dataSource.vendorIds(_vendor);\r\n        require(vendorId > 0);\r\n        (,,,bool valid) = dataSource.getVendor(vendorId);\r\n        require(valid);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * The vendorId is valid\r\n     */\r\n    modifier vendorIdValid(uint256 _vendorId) {\r\n        (,,,bool valid) = dataSource.getVendor(_vendorId);\r\n        require(valid);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Rate plan exist.\r\n     */\r\n    modifier ratePlanExist(uint256 _vendorId, uint256 _rpid) {\r\n        (,,,bool valid) = dataSource.getVendor(_vendorId);\r\n        require(valid);\r\n        require(dataSource.ratePlanIsExist(_vendorId, _rpid));\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Token is valid\r\n     */\r\n    modifier validToken(uint256 _tokenId) {\r\n        require(_tokenId > 0);\r\n        require(dataSource.roomNightIndexToOwner(_tokenId) != address(0));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Tokens are valid\r\n     */\r\n    modifier validTokenInBatch(uint256[] _tokenIds) {\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            require(_tokenIds[i] > 0);\r\n            require(dataSource.roomNightIndexToOwner(_tokenIds[i]) != address(0));\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Whether the `_tokenId` can be transfered\r\n     */\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address owner = dataSource.roomNightIndexToOwner(_tokenId);\r\n        bool isOwner = (msg.sender == owner);\r\n        bool isApproval = (msg.sender == dataSource.roomNightApprovals(_tokenId));\r\n        bool isOperator = (dataSource.operatorApprovals(owner, msg.sender));\r\n        require(isOwner || isApproval || isOperator);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Whether the `_tokenIds` can be transfered\r\n     */\r\n    modifier canTransferInBatch(uint256[] _tokenIds) {\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            address owner = dataSource.roomNightIndexToOwner(_tokenIds[i]);\r\n            bool isOwner = (msg.sender == owner);\r\n            bool isApproval = (msg.sender == dataSource.roomNightApprovals(_tokenIds[i]));\r\n            bool isOperator = (dataSource.operatorApprovals(owner, msg.sender));\r\n            require(isOwner || isApproval || isOperator);\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Whether the `_tokenId` can be operated by `msg.sender`\r\n     */\r\n    modifier canOperate(uint256 _tokenId) {\r\n        address owner = dataSource.roomNightIndexToOwner(_tokenId);\r\n        bool isOwner = (msg.sender == owner);\r\n        bool isOperator = (dataSource.operatorApprovals(owner, msg.sender));\r\n        require(isOwner || isOperator);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Whether the `_date` is valid(no hours, no seconds)\r\n     */\r\n    modifier validDate(uint256 _date) {\r\n        require(_date > 0);\r\n        require(dateIsLegal(_date));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Whether the `_dates` are valid(no hours, no seconds)\r\n     */\r\n    modifier validDates(uint256[] _dates) {\r\n        for(uint256 i = 0;i < _dates.length; i++) {\r\n            require(_dates[i] > 0);\r\n            require(dateIsLegal(_dates[i]));\r\n        }\r\n        _;\r\n    }\r\n\r\n    function dateIsLegal(uint256 _date) pure private returns(bool) {\r\n        uint256 year = _date / 10000;\r\n        uint256 mon = _date / 100 - year * 100;\r\n        uint256 day = _date - mon * 100 - year * 10000;\r\n        \r\n        if(year < 1970 || mon <= 0 || mon > 12 || day <= 0 || day > 31)\r\n            return false;\r\n\r\n        if(4 == mon || 6 == mon || 9 == mon || 11 == mon){\r\n            if (day == 31) {\r\n                return false;\r\n            }\r\n        }\r\n        if(((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\r\n            if(2 == mon && day > 29) {\r\n                return false;\r\n            }\r\n        }else {\r\n            if(2 == mon && day > 28){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n\r\n    }\r\n}\r\n\r\ncontract TRNOwners is TRNData {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add room night token to `_owner`'s account(from the header)\r\n     */\r\n    function _pushRoomNight(address _owner, uint256 _rnid, bool _isVendor) internal {\r\n        require(_owner != address(0));\r\n        require(_rnid != 0);\r\n        if (_isVendor) {\r\n            dataSource.pushOrderOfVendor(_owner, _rnid, false);\r\n        } else {\r\n            dataSource.pushOrderOfOwner(_owner, _rnid, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove room night token from `_owner`'s account\r\n     */\r\n    function _removeRoomNight(address _owner, uint256 _rnid) internal {\r\n        dataSource.removeOrderOfOwner(_owner, _rnid);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns all the room nights of the `msg.sender`(Customer)\r\n     * @param _from The begin of room nights Id\r\n     * @param _limit The total room nights \r\n     * @param _isVendor Is Vendor\r\n     * @return Room nights of the `msg.sender` and the next vernier\r\n     */\r\n    function roomNightsOfOwner(uint256 _from, uint256 _limit, bool _isVendor) \r\n        external\r\n        view \r\n        returns(uint256[], uint256) {\r\n        if(_isVendor) {\r\n            return dataSource.getOrdersOfVendor(msg.sender, _from, _limit, true);\r\n        }else {\r\n            return dataSource.getOrdersOfOwner(msg.sender, _from, _limit, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the room night infomation in detail\r\n     * @param _rnid Room night id\r\n     * @return Room night infomation in detail\r\n     */\r\n    function roomNight(uint256 _rnid) \r\n        external \r\n        view \r\n        returns(uint256 _vendorId,uint256 _rpid,uint256 _token,uint256 _price,uint256 _timestamp,uint256 _date,bytes32 _ipfs, string _name) {\r\n        (_vendorId, _rpid, _token, _price, _timestamp, _date, _ipfs) = dataSource.roomnights(_rnid);\r\n        (_name,,) = dataSource.getRatePlan(_vendorId, _rpid);\r\n    }\r\n}\r\n\r\nlibrary IPFSLib {\r\n    bytes constant ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\r\n    bytes constant HEX = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Base58 encoding\r\n     * @param _source Bytes data\r\n     * @return Encoded bytes data\r\n     */\r\n    function base58Address(bytes _source) internal pure returns (bytes) {\r\n        uint8[] memory digits = new uint8[](_source.length * 136/100 + 1);\r\n        digits[0] = 0;\r\n        uint8 digitlength = 1;\r\n        for (uint i = 0; i < _source.length; ++i) {\r\n            uint carry = uint8(_source[i]);\r\n            for (uint j = 0; j<digitlength; ++j) {\r\n                carry += uint(digits[j]) * 256;\r\n                digits[j] = uint8(carry % 58);\r\n                carry = carry / 58;\r\n            }\r\n            \r\n            while (carry > 0) {\r\n                digits[digitlength] = uint8(carry % 58);\r\n                digitlength++;\r\n                carry = carry / 58;\r\n            }\r\n        }\r\n        return toAlphabet(reverse(truncate(digits, digitlength)));\r\n    }\r\n\r\n    /**\r\n     * @dev Hex encoding, convert bytes32 data to hex string\r\n     * @param _source Bytes32 data\r\n     * @return hex string bytes\r\n     */\r\n    function hexAddress(bytes32 _source) internal pure returns(bytes) {\r\n        uint256 value = uint256(_source);\r\n        bytes memory result = \"0000000000000000000000000000000000000000000000000000000000000000\";\r\n        uint8 index = 0;\r\n        while(value > 0) {\r\n            result[index] = HEX[value & 0xf];\r\n            index++;\r\n            value = value>>4;\r\n        }\r\n        bytes memory ipfsBytes = reverseBytes(result);\r\n        return ipfsBytes;\r\n    }\r\n\r\n    /**\r\n     * @dev Truncate `_array` by `_length`\r\n     * @param _array The source array\r\n     * @param _length The target length of the `_array`\r\n     * @return The truncated array \r\n     */\r\n    function truncate(uint8[] _array, uint8 _length) internal pure returns (uint8[]) {\r\n        uint8[] memory output = new uint8[](_length);\r\n        for (uint i = 0; i < _length; i++) {\r\n            output[i] = _array[i];\r\n        }\r\n        return output;\r\n    }\r\n    \r\n    /**\r\n     * @dev Reverse `_input` array \r\n     * @param _input The source array \r\n     * @return The reversed array \r\n     */\r\n    function reverse(uint8[] _input) internal pure returns (uint8[]) {\r\n        uint8[] memory output = new uint8[](_input.length);\r\n        for (uint i = 0; i < _input.length; i++) {\r\n            output[i] = _input[_input.length - 1 - i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverse `_input` bytes\r\n     * @param _input The source bytes\r\n     * @return The reversed bytes\r\n     */\r\n    function reverseBytes(bytes _input) private pure returns (bytes) {\r\n        bytes memory output = new bytes(_input.length);\r\n        for (uint8 i = 0; i < _input.length; i++) {\r\n            output[i] = _input[_input.length-1-i];\r\n        }\r\n        return output;\r\n    }\r\n    \r\n    /**\r\n     * @dev Convert the indices to alphabet\r\n     * @param _indices The indices of alphabet\r\n     * @return The alphabets\r\n     */\r\n    function toAlphabet(uint8[] _indices) internal pure returns (bytes) {\r\n        bytes memory output = new bytes(_indices.length);\r\n        for (uint i = 0; i < _indices.length; i++) {\r\n            output[i] = ALPHABET[_indices[i]];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev Convert bytes32 to bytes\r\n     * @param _input The source bytes32\r\n     * @return The bytes\r\n     */\r\n    function toBytes(bytes32 _input) internal pure returns (bytes) {\r\n        bytes memory output = new bytes(32);\r\n        for (uint8 i = 0; i < 32; i++) {\r\n            output[i] = _input[i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev Concat two bytes to one\r\n     * @param _byteArray The first bytes\r\n     * @param _byteArray2 The second bytes\r\n     * @return The concated bytes\r\n     */\r\n    function concat(bytes _byteArray, bytes _byteArray2) internal pure returns (bytes) {\r\n        bytes memory returnArray = new bytes(_byteArray.length + _byteArray2.length);\r\n        for (uint16 i = 0; i < _byteArray.length; i++) {\r\n            returnArray[i] = _byteArray[i];\r\n        }\r\n        for (i; i < (_byteArray.length + _byteArray2.length); i++) {\r\n            returnArray[i] = _byteArray2[i - _byteArray.length];\r\n        }\r\n        return returnArray;\r\n    }\r\n}\r\n\r\ncontract TRNAsset is TRNData, ERC721Metadata {\r\n    using IPFSLib for bytes;\r\n    using IPFSLib for bytes32;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        \r\n    }\r\n\r\n    /**\r\n     * @dev Descriptive name for Tripio's Room Night Token in this contract\r\n     * @return The name of the contract\r\n     */\r\n    function name() external pure returns (string _name) {\r\n        return \"Tripio Room Night\";\r\n    }\r\n\r\n    /**\r\n     * @dev Abbreviated name for Tripio's Room Night Token in this contract\r\n     * @return The simple name of the contract\r\n     */\r\n    function symbol() external pure returns (string _symbol) {\r\n        return \"TRN\";\r\n    }\r\n\r\n    /**\r\n     * @dev If `_tokenId` is not valid trows an exception otherwise return a URI which point to a JSON file like:\r\n     *      {\r\n     *       \"name\": \"Identifies the asset to which this NFT represents\",\r\n     *       \"description\": \"Describes the asset to which this NFT represents\",\r\n     *       \"image\": \"A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\"\r\n     *      }\r\n     * @param _tokenId The RoomNight digital token\r\n     * @return The digital token asset uri\r\n     */\r\n    function tokenURI(uint256 _tokenId) \r\n        external \r\n        view \r\n        validToken(_tokenId) \r\n        returns (string) { \r\n        bytes memory prefix = new bytes(2);\r\n        prefix[0] = 0x12;\r\n        prefix[1] = 0x20;\r\n        (,,,,,,bytes32 ipfs) = dataSource.roomnights(_tokenId);\r\n        bytes memory value = prefix.concat(ipfs.toBytes());\r\n        bytes memory ipfsBytes = value.base58Address();\r\n        bytes memory tokenBaseURIBytes = bytes(dataSource.tokenBaseURI());\r\n        return string(tokenBaseURIBytes.concat(ipfsBytes));\r\n    }\r\n}\r\n\r\ncontract TRNOwnership is TRNOwners, ERC721 {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    /**\r\n     * This emits when ownership of any TRN changes by any mechanism.\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n\r\n    /**\r\n     * This emits when the approved address for an RTN is changed or reaffirmed.\r\n     */\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    /**\r\n     * This emits when an operator is enabled or disabled for an owner.\r\n     * The operator can manage all RTNs of the owner.\r\n     */\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /**\r\n     * @dev Transfer the `_tokenId` to `_to` directly\r\n     * @param _tokenId The room night token\r\n     * @param _to The target owner\r\n     */\r\n    function _transfer(uint256 _tokenId, address _to) private {\r\n        // Find the FROM address\r\n        address from = dataSource.roomNightIndexToOwner(_tokenId);\r\n\r\n        // Remove room night from the `from`\r\n        _removeRoomNight(from, _tokenId);\r\n\r\n        // Add room night to the `_to`\r\n        _pushRoomNight(_to, _tokenId, false);\r\n\r\n        // Change the owner of `_tokenId`\r\n        // Remove approval of `_tokenId`\r\n        dataSource.transferTokenTo(_tokenId, _to);\r\n\r\n        // Emit Transfer event\r\n        emit Transfer(from, _to, _tokenId);\r\n    }\r\n\r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data)\r\n        private\r\n        validToken(_tokenId)\r\n        canTransfer(_tokenId) {\r\n        // The token's owner is equal to `_from`\r\n        address owner = dataSource.roomNightIndexToOwner(_tokenId);\r\n        require(owner == _from);\r\n\r\n        // Avoid `_to` is equal to address(0)\r\n        require(_to != address(0));\r\n\r\n        _transfer(_tokenId, _to);\r\n\r\n        uint256 codeSize;\r\n        assembly { codeSize := extcodesize(_to) }\r\n        if (codeSize == 0) {\r\n            return;\r\n        }\r\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n        require (retval == dataSource.ERC721_RECEIVED());\r\n    }\r\n\r\n    /**\r\n     * @dev Count all TRNs assigned to an owner.\r\n     *      Throw when `_owner` is equal to address(0)\r\n     * @param _owner An address for whom to query the balance.\r\n     * @return The number of TRNs owned by `_owner`.\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        require(_owner != address(0));\r\n        return dataSource.balanceOf(_owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Find the owner of an TRN\r\n     *      Throw unless `_tokenId` more than zero\r\n     * @param _tokenId The identifier for an TRN\r\n     * @return The address of the owner of the TRN\r\n     */\r\n    function ownerOf(uint256 _tokenId) external view returns (address) {\r\n        require(_tokenId > 0);\r\n        return dataSource.roomNightIndexToOwner(_tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an TRN from one address to another address.\r\n     *      Throws unless `msg.sender` is the current owner or an approved address for this TRN.\r\n     *      Throws if `_tokenId` is not a valid TRN. When transfer is complete, this function checks if \r\n     *      `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and \r\n     * throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n     * @param _from The current owner of the TRN\r\n     * @param _to The new owner\r\n     * @param _tokenId The TRN to transfer\r\n     * @param _data Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external payable {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Same like safeTransferFrom with an extra data parameter, except this function just sets data to \"\"(empty)\r\n     * @param _from The current owner of the TRN\r\n     * @param _to The new owner\r\n     * @param _tokenId The TRN to transfer\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an TRN from one address to another address.\r\n     *      Throws unless `msg.sender` is the current owner or an approved address for this TRN.\r\n     *      Throws if `_tokenId` is not a valid TRN.\r\n     * @param _from The current owner of the TRN\r\n     * @param _to The new owner\r\n     * @param _tokenId The TRN to transfer\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) \r\n        external \r\n        payable\r\n        validToken(_tokenId)\r\n        canTransfer(_tokenId) {\r\n        // The token's owner is equal to `_from`\r\n        address owner = dataSource.roomNightIndexToOwner(_tokenId);\r\n        require(owner == _from);\r\n\r\n        // Avoid `_to` is equal to address(0)\r\n        require(_to != address(0));\r\n\r\n        _transfer(_tokenId, _to);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of TRNs from one address to another address.\r\n     *      Throws unless `msg.sender` is the current owner or an approved address for this TRN.\r\n     *      Throws if `_tokenIds` are not valid TRNs.\r\n     * @param _from The current owner of the TRN\r\n     * @param _to The new owner\r\n     * @param _tokenIds The TRNs to transfer\r\n     */\r\n    function transferFromInBatch(address _from, address _to, uint256[] _tokenIds) \r\n        external\r\n        payable\r\n        validTokenInBatch(_tokenIds)\r\n        canTransferInBatch(_tokenIds) {\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            // The token's owner is equal to `_from`\r\n            address owner = dataSource.roomNightIndexToOwner(_tokenIds[i]);\r\n            require(owner == _from);\r\n\r\n            // Avoid `_to` is equal to address(0)\r\n            require(_to != address(0));\r\n\r\n            _transfer(_tokenIds[i], _to);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set or reaffirm the approved address for an TRN.\r\n     *      Throws unless `msg.sender` is the current TRN owner, or an authorized\r\n     * @param _approved The new approved TRN controller\r\n     * @param _tokenId The TRN to approve\r\n     */\r\n    function approve(address _approved, uint256 _tokenId) \r\n        external \r\n        payable \r\n        validToken(_tokenId)\r\n        canOperate(_tokenId) {\r\n        address owner = dataSource.roomNightIndexToOwner(_tokenId);\r\n        \r\n        dataSource.approveTokenTo(_tokenId, _approved);\r\n        emit Approval(owner, _approved, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Enable or disable approval for a third party (\"operator\") to manage \r\n     *      all of `msg.sender`'s assets.\r\n     *      Emits the ApprovalForAll event. \r\n     * @param _operator Address to add to the set of authorized operators.\r\n     * @param _approved True if the operator is approved, false to revoke approval.\r\n     */\r\n    function setApprovalForAll(address _operator, bool _approved) external {\r\n        require(_operator != address(0));\r\n        dataSource.approveOperatorTo(_operator, msg.sender, _approved);\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the approved address for a single TRN.\r\n     *      Throws if `_tokenId` is not a valid TRN.\r\n     * @param _tokenId The TRN to find the approved address for\r\n     * @return The approved address for this TRN, or the zero address if there is none\r\n     */\r\n    function getApproved(uint256 _tokenId) \r\n        external \r\n        view \r\n        validToken(_tokenId)\r\n        returns (address) {\r\n        return dataSource.roomNightApprovals(_tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Query if an address is an authorized operator for another address.\r\n     * @param _owner The address that owns The TRNs\r\n     * @param _operator The address that acts on behalf of the owner\r\n     * @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n        return dataSource.operatorApprovals(_owner, _operator);\r\n    }\r\n}\r\n\r\n\r\ncontract TRNSupportsInterface is TRNData, ERC165 {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Query if a contract implements an interface\r\n     * @param interfaceID The interface identifier, as specified in ERC-165\r\n     * @return true if the contract implements `interfaceID` \r\n     * and `interfaceID` is not 0xffffffff, false otherwise\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) \r\n        external \r\n        view \r\n        returns (bool) {\r\n        return ((interfaceID == dataSource.interfaceSignature_ERC165()) ||\r\n        (interfaceID == dataSource.interfaceSignature_ERC721Metadata()) ||\r\n        (interfaceID == dataSource.interfaceSignature_ERC721())) &&\r\n        (interfaceID != 0xffffffff);\r\n    }\r\n}\r\n/**\r\n * This utility library was forked from https://github.com/o0ragman0o/LibCLL\r\n */\r\nlibrary LinkedListLib {\r\n\r\n    uint256 constant NULL = 0;\r\n    uint256 constant HEAD = 0;\r\n    bool constant PREV = false;\r\n    bool constant NEXT = true;\r\n\r\n    struct LinkedList {\r\n        mapping (uint256 => mapping (bool => uint256)) list;\r\n        uint256 length;\r\n        uint256 index;\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if the list exists\r\n     * @param self stored linked list from contract\r\n     */\r\n    function listExists(LinkedList storage self)\r\n        internal\r\n        view returns (bool) {\r\n        return self.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if the node exists\r\n     * @param self stored linked list from contract\r\n     * @param _node a node to search for\r\n     */\r\n    function nodeExists(LinkedList storage self, uint256 _node)\r\n        internal\r\n        view returns (bool) {\r\n        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\r\n            if (self.list[HEAD][NEXT] == _node) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the list\r\n     * @param self stored linked list from contract\r\n     */ \r\n    function sizeOf(LinkedList storage self) \r\n        internal \r\n        view \r\n        returns (uint256 numElements) {\r\n        return self.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the links of a node as a tuple\r\n     * @param self stored linked list from contract\r\n     * @param _node id of the node to get\r\n     */\r\n    function getNode(LinkedList storage self, uint256 _node)\r\n        public \r\n        view \r\n        returns (bool, uint256, uint256) {\r\n        if (!nodeExists(self,_node)) {\r\n            return (false, 0, 0);\r\n        } else {\r\n            return (true, self.list[_node][PREV], self.list[_node][NEXT]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the link of a node `_node` in direction `_direction`.\r\n     * @param self stored linked list from contract\r\n     * @param _node id of the node to step from\r\n     * @param _direction direction to step in\r\n     */\r\n    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\r\n        public \r\n        view \r\n        returns (bool, uint256) {\r\n        if (!nodeExists(self,_node)) {\r\n            return (false,0);\r\n        } else {\r\n            return (true,self.list[_node][_direction]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Can be used before `insert` to build an ordered list\r\n     * @param self stored linked list from contract\r\n     * @param _node an existing node to search from, e.g. HEAD.\r\n     * @param _value value to seek\r\n     * @param _direction direction to seek in\r\n     * @return next first node beyond '_node' in direction `_direction`\r\n     */\r\n    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\r\n        public \r\n        view \r\n        returns (uint256) {\r\n        if (sizeOf(self) == 0) { \r\n            return 0; \r\n        }\r\n        require((_node == 0) || nodeExists(self,_node));\r\n        bool exists;\r\n        uint256 next;\r\n        (exists,next) = getAdjacent(self, _node, _direction);\r\n        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\r\n        return next;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a bidirectional link between two nodes on direction `_direction`\r\n     * @param self stored linked list from contract\r\n     * @param _node first node for linking\r\n     * @param _link  node to link to in the _direction\r\n     */\r\n    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) \r\n        private {\r\n        self.list[_link][!_direction] = _node;\r\n        self.list[_node][_direction] = _link;\r\n    }\r\n\r\n    /**\r\n     * @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\r\n     * @param self stored linked list from contract\r\n     * @param _node existing node\r\n     * @param _new  new node to insert\r\n     * @param _direction direction to insert node in\r\n     */\r\n    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) \r\n        internal \r\n        returns (bool) {\r\n        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\r\n            uint256 c = self.list[_node][_direction];\r\n            createLink(self, _node, _new, _direction);\r\n            createLink(self, _new, c, _direction);\r\n            self.length++;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev removes an entry from the linked list\r\n     * @param self stored linked list from contract\r\n     * @param _node node to remove from the list\r\n     */\r\n    function remove(LinkedList storage self, uint256 _node) \r\n        internal \r\n        returns (uint256) {\r\n        if ((_node == NULL) || (!nodeExists(self,_node))) { \r\n            return 0; \r\n        }\r\n        createLink(self, self.list[_node][PREV], self.list[_node][NEXT], NEXT);\r\n        delete self.list[_node][PREV];\r\n        delete self.list[_node][NEXT];\r\n        self.length--;\r\n        return _node;\r\n    }\r\n\r\n    /**\r\n     * @dev pushes an enrty to the head of the linked list\r\n     * @param self stored linked list from contract\r\n     * @param _index The node Id\r\n     * @param _direction push to the head (NEXT) or tail (PREV)\r\n     */\r\n    function add(LinkedList storage self, uint256 _index, bool _direction) \r\n        internal \r\n        returns (uint256) {\r\n        insert(self, HEAD, _index, _direction);\r\n        return self.index;\r\n    }\r\n\r\n    /**\r\n     * @dev pushes an enrty to the head of the linked list\r\n     * @param self stored linked list from contract\r\n     * @param _direction push to the head (NEXT) or tail (PREV)\r\n     */\r\n    function push(LinkedList storage self, bool _direction) \r\n        internal \r\n        returns (uint256) {\r\n        self.index++;\r\n        insert(self, HEAD, self.index, _direction);\r\n        return self.index;\r\n    }\r\n\r\n    /**\r\n     * @dev pops the first entry from the linked list\r\n     * @param self stored linked list from contract\r\n     * @param _direction pop from the head (NEXT) or the tail (PREV)\r\n     */\r\n    function pop(LinkedList storage self, bool _direction) \r\n        internal \r\n        returns (uint256) {\r\n        bool exists;\r\n        uint256 adj;\r\n        (exists,adj) = getAdjacent(self, HEAD, _direction);\r\n        return remove(self, adj);\r\n    }\r\n}\r\n\r\ncontract TripioToken {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract TripioRoomNightData is Owned {\r\n    using LinkedListLib for LinkedListLib.LinkedList;\r\n    // Interface signature of erc165.\r\n    // bytes4(keccak256(\"supportsInterface(bytes4)\"))\r\n    bytes4 constant public interfaceSignature_ERC165 = 0x01ffc9a7;\r\n\r\n    // Interface signature of erc721 metadata.\r\n    // bytes4(keccak256(\"name()\")) ^ bytes4(keccak256(\"symbol()\")) ^ bytes4(keccak256(\"tokenURI(uint256)\"));\r\n    bytes4 constant public interfaceSignature_ERC721Metadata = 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd;\r\n        \r\n    // Interface signature of erc721.\r\n    // bytes4(keccak256(\"balanceOf(address)\")) ^\r\n    // bytes4(keccak256(\"ownerOf(uint256)\")) ^\r\n    // bytes4(keccak256(\"safeTransferFrom(address,address,uint256,bytes)\")) ^\r\n    // bytes4(keccak256(\"safeTransferFrom(address,address,uint256)\")) ^\r\n    // bytes4(keccak256(\"transferFrom(address,address,uint256)\")) ^\r\n    // bytes4(keccak256(\"approve(address,uint256)\")) ^\r\n    // bytes4(keccak256(\"setApprovalForAll(address,bool)\")) ^\r\n    // bytes4(keccak256(\"getApproved(uint256)\")) ^\r\n    // bytes4(keccak256(\"isApprovedForAll(address,address)\"));\r\n    bytes4 constant public interfaceSignature_ERC721 = 0x70a08231 ^ 0x6352211e ^ 0xb88d4fde ^ 0x42842e0e ^ 0x23b872dd ^ 0x095ea7b3 ^ 0xa22cb465 ^ 0x081812fc ^ 0xe985e9c5;\r\n\r\n    // Base URI of token asset\r\n    string public tokenBaseURI;\r\n\r\n    // Authorized contracts\r\n    struct AuthorizedContract {\r\n        string name;\r\n        address acontract;\r\n    }\r\n    mapping (address=>uint256) public authorizedContractIds;\r\n    mapping (uint256 => AuthorizedContract) public authorizedContracts;\r\n    LinkedListLib.LinkedList public authorizedContractList = LinkedListLib.LinkedList(0, 0);\r\n\r\n    // Rate plan prices\r\n    struct Price {\r\n        uint16 inventory;       // Rate plan inventory\r\n        bool init;              // Whether the price is initied\r\n        mapping (uint256 => uint256) tokens;\r\n    }\r\n\r\n    // Vendor hotel RPs\r\n    struct RatePlan {\r\n        string name;            // Name of rate plan.\r\n        uint256 timestamp;      // Create timestamp.\r\n        bytes32 ipfs;           // The address of rate plan detail on IPFS.\r\n        Price basePrice;        // The base price of rate plan\r\n        mapping (uint256 => Price) prices;   // date -> Price\r\n    }\r\n\r\n    // Vendors\r\n    struct Vendor {\r\n        string name;            // Name of vendor.\r\n        address vendor;         // Address of vendor.\r\n        uint256 timestamp;      // Create timestamp.\r\n        bool valid;             // Whether the vendor is valid(default is true)\r\n        LinkedListLib.LinkedList ratePlanList;\r\n        mapping (uint256=>RatePlan) ratePlans;\r\n    }\r\n    mapping (address => uint256) public vendorIds;\r\n    mapping (uint256 => Vendor) vendors;\r\n    LinkedListLib.LinkedList public vendorList = LinkedListLib.LinkedList(0, 0);\r\n\r\n    // Supported digital currencies\r\n    mapping (uint256 => address) public tokenIndexToAddress;\r\n    LinkedListLib.LinkedList public tokenList = LinkedListLib.LinkedList(0, 0);\r\n\r\n    // RoomNight tokens\r\n    struct RoomNight {\r\n        uint256 vendorId;\r\n        uint256 rpid;\r\n        uint256 token;          // The digital currency token \r\n        uint256 price;          // The digital currency price\r\n        uint256 timestamp;      // Create timestamp.\r\n        uint256 date;           // The checkin date\r\n        bytes32 ipfs;           // The address of rate plan detail on IPFS.\r\n    }\r\n    RoomNight[] public roomnights;\r\n    // rnid -> owner\r\n    mapping (uint256 => address) public roomNightIndexToOwner;\r\n\r\n    // Owner Account\r\n    mapping (address => LinkedListLib.LinkedList) public roomNightOwners;\r\n\r\n    // Vendor Account\r\n    mapping (address => LinkedListLib.LinkedList) public roomNightVendors;\r\n\r\n    // The authorized address for each TRN\r\n    mapping (uint256 => address) public roomNightApprovals;\r\n\r\n    // The authorized operators for each address\r\n    mapping (address => mapping (address => bool)) public operatorApprovals;\r\n\r\n    // The applications of room night redund\r\n    mapping (address => mapping (uint256 => bool)) public refundApplications;\r\n\r\n    // The signature of `onERC721Received(address,uint256,bytes)`\r\n    // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"));\r\n    bytes4 constant public ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n    /**\r\n     * This emits when contract authorized\r\n     */\r\n    event ContractAuthorized(address _contract);\r\n\r\n    /**\r\n     * This emits when contract deauthorized\r\n     */\r\n    event ContractDeauthorized(address _contract);\r\n\r\n    /**\r\n     * The contract is valid\r\n     */\r\n    modifier authorizedContractValid(address _contract) {\r\n        require(authorizedContractIds[_contract] > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * The contract is valid\r\n     */\r\n    modifier authorizedContractIdValid(uint256 _cid) {\r\n        require(authorizedContractList.nodeExists(_cid));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Only the owner or authorized contract is valid\r\n     */\r\n    modifier onlyOwnerOrAuthorizedContract {\r\n        require(msg.sender == owner || authorizedContractIds[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        // Add one invalid RoomNight, avoid subscript 0\r\n        roomnights.push(RoomNight(0, 0, 0, 0, 0, 0, 0));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the node list and next node as a tuple\r\n     * @param self stored linked list from contract\r\n     * @param _node the begin id of the node to get\r\n     * @param _limit the total nodes of one page\r\n     * @param _direction direction to step in\r\n     */\r\n    function getNodes(LinkedListLib.LinkedList storage self, uint256 _node, uint256 _limit, bool _direction) \r\n        private\r\n        view \r\n        returns (uint256[], uint256) {\r\n        bool exists;\r\n        uint256 i = 0;\r\n        uint256 ei = 0;\r\n        uint256 index = 0;\r\n        uint256 count = _limit;\r\n        if(count > self.length) {\r\n            count = self.length;\r\n        }\r\n        (exists, i) = self.getAdjacent(_node, _direction);\r\n        if(!exists || count == 0) {\r\n            return (new uint256[](0), 0);\r\n        }else {\r\n            uint256[] memory temp = new uint256[](count);\r\n            if(_node != 0) {\r\n                index++;\r\n                temp[0] = _node;\r\n            }\r\n            while (i != 0 && index < count) {\r\n                temp[index] = i;\r\n                (exists,i) = self.getAdjacent(i, _direction);\r\n                index++;\r\n            }\r\n            ei = i;\r\n            if(index < count) {\r\n                uint256[] memory result = new uint256[](index);\r\n                for(i = 0; i < index; i++) {\r\n                    result[i] = temp[i];\r\n                }\r\n                return (result, ei);\r\n            }else {\r\n                return (temp, ei);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Authorize `_contract` to execute this contract's funs\r\n     * @param _contract The contract address\r\n     * @param _name The contract name\r\n     */\r\n    function authorizeContract(address _contract, string _name) \r\n        public \r\n        onlyOwner \r\n        returns(bool) {\r\n        uint256 codeSize;\r\n        assembly { codeSize := extcodesize(_contract) }\r\n        require(codeSize != 0);\r\n        // Not exists\r\n        require(authorizedContractIds[_contract] == 0);\r\n\r\n        // Add\r\n        uint256 id = authorizedContractList.push(false);\r\n        authorizedContractIds[_contract] = id;\r\n        authorizedContracts[id] = AuthorizedContract(_name, _contract);\r\n\r\n        // Event\r\n        emit ContractAuthorized(_contract);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Deauthorized `_contract` by address\r\n     * @param _contract The contract address\r\n     */\r\n    function deauthorizeContract(address _contract) \r\n        public \r\n        onlyOwner\r\n        authorizedContractValid(_contract)\r\n        returns(bool) {\r\n        uint256 id = authorizedContractIds[_contract];\r\n        authorizedContractList.remove(id);\r\n        authorizedContractIds[_contract] = 0;\r\n        delete authorizedContracts[id];\r\n        \r\n        // Event \r\n        emit ContractDeauthorized(_contract);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Deauthorized `_contract` by contract id\r\n     * @param _cid The contract id\r\n     */\r\n    function deauthorizeContractById(uint256 _cid) \r\n        public\r\n        onlyOwner\r\n        authorizedContractIdValid(_cid)\r\n        returns(bool) {\r\n        address acontract = authorizedContracts[_cid].acontract;\r\n        authorizedContractList.remove(_cid);\r\n        authorizedContractIds[acontract] = 0;\r\n        delete authorizedContracts[_cid];\r\n\r\n        // Event \r\n        emit ContractDeauthorized(acontract);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Get authorize contract ids by page\r\n     * @param _from The begin authorize contract id\r\n     * @param _limit How many authorize contract ids one page\r\n     * @return The authorize contract ids and the next authorize contract id as tuple, the next page not exists when next eq 0\r\n     */\r\n    function getAuthorizeContractIds(uint256 _from, uint256 _limit) \r\n        external \r\n        view \r\n        returns(uint256[], uint256){\r\n        return getNodes(authorizedContractList, _from, _limit, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Get authorize contract by id\r\n     * @param _cid Then authorize contract id\r\n     * @return The authorize contract info(_name, _acontract)\r\n     */\r\n    function getAuthorizeContract(uint256 _cid) \r\n        external \r\n        view \r\n        returns(string _name, address _acontract) {\r\n        AuthorizedContract memory acontract = authorizedContracts[_cid]; \r\n        _name = acontract.name;\r\n        _acontract = acontract.acontract;\r\n    }\r\n\r\n    /*************************************** GET ***************************************/\r\n\r\n    /**\r\n     * @dev Get the rate plan by `_vendorId` and `_rpid`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     */\r\n    function getRatePlan(uint256 _vendorId, uint256 _rpid) \r\n        public \r\n        view \r\n        returns (string _name, uint256 _timestamp, bytes32 _ipfs) {\r\n        _name = vendors[_vendorId].ratePlans[_rpid].name;\r\n        _timestamp = vendors[_vendorId].ratePlans[_rpid].timestamp;\r\n        _ipfs = vendors[_vendorId].ratePlans[_rpid].ipfs;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the rate plan price by `_vendorId`, `_rpid`, `_date` and `_tokenId`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _tokenId The digital token id\r\n     * @return The price info(inventory, init, price)\r\n     */\r\n    function getPrice(uint256 _vendorId, uint256 _rpid, uint256 _date, uint256 _tokenId) \r\n        public\r\n        view \r\n        returns(uint16 _inventory, bool _init, uint256 _price) {\r\n        _inventory = vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory;\r\n        _init = vendors[_vendorId].ratePlans[_rpid].prices[_date].init;\r\n        _price = vendors[_vendorId].ratePlans[_rpid].prices[_date].tokens[_tokenId];\r\n        if(!_init) {\r\n            // Get the base price\r\n            _inventory = vendors[_vendorId].ratePlans[_rpid].basePrice.inventory;\r\n            _price = vendors[_vendorId].ratePlans[_rpid].basePrice.tokens[_tokenId];\r\n            _init = vendors[_vendorId].ratePlans[_rpid].basePrice.init;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the rate plan prices by `_vendorId`, `_rpid`, `_dates` and `_tokenId`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _dates The dates desc ([20180723,20180724,20180725])\r\n     * @param _tokenId The digital token id\r\n     * @return The price info(inventory, init, price)\r\n     */\r\n    function getPrices(uint256 _vendorId, uint256 _rpid, uint256[] _dates, uint256 _tokenId) \r\n        public\r\n        view \r\n        returns(uint16[] _inventories, uint256[] _prices) {\r\n        uint16[] memory inventories = new uint16[](_dates.length);\r\n        uint256[] memory prices = new uint256[](_dates.length);\r\n        uint256 date;\r\n        for(uint256 i = 0; i < _dates.length; i++) {\r\n            date = _dates[i];\r\n            uint16 inventory = vendors[_vendorId].ratePlans[_rpid].prices[date].inventory;\r\n            bool init = vendors[_vendorId].ratePlans[_rpid].prices[date].init;\r\n            uint256 price = vendors[_vendorId].ratePlans[_rpid].prices[date].tokens[_tokenId];\r\n            if(!init) {\r\n                // Get the base price\r\n                inventory = vendors[_vendorId].ratePlans[_rpid].basePrice.inventory;\r\n                price = vendors[_vendorId].ratePlans[_rpid].basePrice.tokens[_tokenId];\r\n                init = vendors[_vendorId].ratePlans[_rpid].basePrice.init;\r\n            }\r\n            inventories[i] = inventory;\r\n            prices[i] = price;\r\n        }\r\n        return (inventories, prices);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the inventory by  by `_vendorId`, `_rpid` and `_date`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @return The inventory info(inventory, init)\r\n     */\r\n    function getInventory(uint256 _vendorId, uint256 _rpid, uint256 _date) \r\n        public\r\n        view \r\n        returns(uint16 _inventory, bool _init) {\r\n        _inventory = vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory;\r\n        _init = vendors[_vendorId].ratePlans[_rpid].prices[_date].init;\r\n        if(!_init) {\r\n            // Get the base price\r\n            _inventory = vendors[_vendorId].ratePlans[_rpid].basePrice.inventory;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Whether the rate plan is exist\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @return If the rate plan of the vendor is exist returns true otherwise return false\r\n     */\r\n    function ratePlanIsExist(uint256 _vendorId, uint256 _rpid) \r\n        public \r\n        view \r\n        returns (bool) {\r\n        return vendors[_vendorId].ratePlanList.nodeExists(_rpid);\r\n    }\r\n\r\n    /**\r\n     * @dev Get orders of owner by page\r\n     * @param _owner The owner address\r\n     * @param _from The begin id of the node to get\r\n     * @param _limit The total nodes of one page\r\n     * @param _direction Direction to step in\r\n     * @return The order ids and the next id\r\n     */\r\n    function getOrdersOfOwner(address _owner, uint256 _from, uint256 _limit, bool _direction) \r\n        public \r\n        view \r\n        returns (uint256[], uint256) {\r\n        return getNodes(roomNightOwners[_owner], _from, _limit, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Get orders of vendor by page\r\n     * @param _owner The vendor address\r\n     * @param _from The begin id of the node to get\r\n     * @param _limit The total nodes of on page\r\n     * @param _direction Direction to step in \r\n     * @return The order ids and the next id\r\n     */\r\n    function getOrdersOfVendor(address _owner, uint256 _from, uint256 _limit, bool _direction) \r\n        public \r\n        view \r\n        returns (uint256[], uint256) {\r\n        return getNodes(roomNightVendors[_owner], _from, _limit, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the token count of somebody \r\n     * @param _owner The owner of token\r\n     * @return The token count of `_owner`\r\n     */\r\n    function balanceOf(address _owner) \r\n        public \r\n        view \r\n        returns(uint256) {\r\n        return roomNightOwners[_owner].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get rate plan ids of `_vendorId`\r\n     * @param _from The begin id of the node to get\r\n     * @param _limit The total nodes of on page\r\n     * @param _direction Direction to step in \r\n     * @return The rate plan ids and the next id\r\n     */\r\n    function getRatePlansOfVendor(uint256 _vendorId, uint256 _from, uint256 _limit, bool _direction) \r\n        public \r\n        view \r\n        returns(uint256[], uint256) {\r\n        return getNodes(vendors[_vendorId].ratePlanList, _from, _limit, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Get token ids\r\n     * @param _from The begin id of the node to get\r\n     * @param _limit The total nodes of on page\r\n     * @param _direction Direction to step in \r\n     * @return The token ids and the next id\r\n     */\r\n    function getTokens(uint256 _from, uint256 _limit, bool _direction) \r\n        public \r\n        view \r\n        returns(uint256[], uint256) {\r\n        return getNodes(tokenList, _from, _limit, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Get token Info\r\n     * @param _tokenId The token id\r\n     * @return The token info(symbol, name, decimals)\r\n     */\r\n    function getToken(uint256 _tokenId)\r\n        public \r\n        view \r\n        returns(string _symbol, string _name, uint8 _decimals, address _token) {\r\n        _token = tokenIndexToAddress[_tokenId];\r\n        TripioToken tripio = TripioToken(_token);\r\n        _symbol = tripio.symbol();\r\n        _name = tripio.name();\r\n        _decimals = tripio.decimals();\r\n    }\r\n\r\n    /**\r\n     * @dev Get vendor ids\r\n     * @param _from The begin id of the node to get\r\n     * @param _limit The total nodes of on page\r\n     * @param _direction Direction to step in \r\n     * @return The vendor ids and the next id\r\n     */\r\n    function getVendors(uint256 _from, uint256 _limit, bool _direction) \r\n        public \r\n        view \r\n        returns(uint256[], uint256) {\r\n        return getNodes(vendorList, _from, _limit, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the vendor infomation by vendorId\r\n     * @param _vendorId The vendor id\r\n     * @return The vendor infomation(name, vendor, timestamp, valid)\r\n     */\r\n    function getVendor(uint256 _vendorId) \r\n        public \r\n        view \r\n        returns(string _name, address _vendor,uint256 _timestamp, bool _valid) {\r\n        _name = vendors[_vendorId].name;\r\n        _vendor = vendors[_vendorId].vendor;\r\n        _timestamp = vendors[_vendorId].timestamp;\r\n        _valid = vendors[_vendorId].valid;\r\n    }\r\n\r\n    /*************************************** SET ***************************************/\r\n    /**\r\n     * @dev Update base uri of token metadata\r\n     * @param _tokenBaseURI The base uri\r\n     */\r\n    function updateTokenBaseURI(string _tokenBaseURI) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        tokenBaseURI = _tokenBaseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Push order to user's order list\r\n     * @param _owner The buyer address\r\n     * @param _rnid The room night order id\r\n     * @param _direction direction to step in\r\n     */\r\n    function pushOrderOfOwner(address _owner, uint256 _rnid, bool _direction) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        if(!roomNightOwners[_owner].listExists()) {\r\n            roomNightOwners[_owner] = LinkedListLib.LinkedList(0, 0);\r\n        }\r\n        roomNightOwners[_owner].add(_rnid, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove order from owner's order list\r\n     * @param _owner The owner address\r\n     * @param _rnid The room night order id\r\n     */\r\n    function removeOrderOfOwner(address _owner, uint _rnid) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        require(roomNightOwners[_owner].nodeExists(_rnid));\r\n        roomNightOwners[_owner].remove(_rnid);\r\n    }\r\n\r\n    /**\r\n     * @dev Push order to the vendor's order list\r\n     * @param _vendor The vendor address\r\n     * @param _rnid The room night order id\r\n     * @param _direction direction to step in\r\n     */\r\n    function pushOrderOfVendor(address _vendor, uint256 _rnid, bool _direction) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        if(!roomNightVendors[_vendor].listExists()) {\r\n            roomNightVendors[_vendor] = LinkedListLib.LinkedList(0, 0);\r\n        }\r\n        roomNightVendors[_vendor].add(_rnid, _direction);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove order from vendor's order list\r\n     * @param _vendor The vendor address\r\n     * @param _rnid The room night order id\r\n     */\r\n    function removeOrderOfVendor(address _vendor, uint256 _rnid) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        require(roomNightVendors[_vendor].nodeExists(_rnid));\r\n        roomNightVendors[_vendor].remove(_rnid);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to somebody\r\n     * @param _tokenId The token id \r\n     * @param _to The target owner of the token\r\n     */\r\n    function transferTokenTo(uint256 _tokenId, address _to) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        roomNightIndexToOwner[_tokenId] = _to;\r\n        roomNightApprovals[_tokenId] = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `_to` to operate the `_tokenId`\r\n     * @param _tokenId The token id\r\n     * @param _to Somebody to be approved\r\n     */\r\n    function approveTokenTo(uint256 _tokenId, address _to) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        roomNightApprovals[_tokenId] = _to;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `_operator` to operate all the Token of `_to`\r\n     * @param _operator The operator to be approved\r\n     * @param _to The owner of tokens to be operate\r\n     * @param _approved Approved or not\r\n     */\r\n    function approveOperatorTo(address _operator, address _to, bool _approved) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        operatorApprovals[_to][_operator] = _approved;\r\n    } \r\n\r\n    /**\r\n     * @dev Update base price of rate plan\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _tokenId The digital token id\r\n     * @param _price The price to be updated\r\n     */\r\n    function updateBasePrice(uint256 _vendorId, uint256 _rpid, uint256 _tokenId, uint256 _price)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        vendors[_vendorId].ratePlans[_rpid].basePrice.init = true;\r\n        vendors[_vendorId].ratePlans[_rpid].basePrice.tokens[_tokenId] = _price;\r\n    }\r\n\r\n    /**\r\n     * @dev Update base inventory of rate plan \r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _inventory The inventory to be updated\r\n     */\r\n    function updateBaseInventory(uint256 _vendorId, uint256 _rpid, uint16 _inventory)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        vendors[_vendorId].ratePlans[_rpid].basePrice.inventory = _inventory;\r\n    }\r\n\r\n    /**\r\n     * @dev Update price by `_vendorId`, `_rpid`, `_date`, `_tokenId` and `_price`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _tokenId The digital token id\r\n     * @param _price The price to be updated\r\n     */\r\n    function updatePrice(uint256 _vendorId, uint256 _rpid, uint256 _date, uint256 _tokenId, uint256 _price)\r\n        public\r\n        onlyOwnerOrAuthorizedContract {\r\n        if (vendors[_vendorId].ratePlans[_rpid].prices[_date].init) {\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].tokens[_tokenId] = _price;\r\n        } else {\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date] = Price(0, true);\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].tokens[_tokenId] = _price;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update inventory by `_vendorId`, `_rpid`, `_date`, `_inventory`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _inventory The inventory to be updated\r\n     */\r\n    function updateInventories(uint256 _vendorId, uint256 _rpid, uint256 _date, uint16 _inventory)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        if (vendors[_vendorId].ratePlans[_rpid].prices[_date].init) {\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory = _inventory;\r\n        } else {\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date] = Price(_inventory, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reduce inventories\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _inventory The amount to be reduced\r\n     */\r\n    function reduceInventories(uint256 _vendorId, uint256 _rpid, uint256 _date, uint16 _inventory) \r\n        public  \r\n        onlyOwnerOrAuthorizedContract {\r\n        uint16 a = 0;\r\n        if(vendors[_vendorId].ratePlans[_rpid].prices[_date].init) {\r\n            a = vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory;\r\n            require(_inventory <= a);\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory = a - _inventory;\r\n        }else if(vendors[_vendorId].ratePlans[_rpid].basePrice.init){\r\n            a = vendors[_vendorId].ratePlans[_rpid].basePrice.inventory;\r\n            require(_inventory <= a);\r\n            vendors[_vendorId].ratePlans[_rpid].basePrice.inventory = a - _inventory;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Add inventories\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _inventory The amount to be add\r\n     */\r\n    function addInventories(uint256 _vendorId, uint256 _rpid, uint256 _date, uint16 _inventory) \r\n        public  \r\n        onlyOwnerOrAuthorizedContract {\r\n        uint16 c = 0;\r\n        if(vendors[_vendorId].ratePlans[_rpid].prices[_date].init) {\r\n            c = _inventory + vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory;\r\n            require(c >= _inventory);\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory = c;\r\n        }else if(vendors[_vendorId].ratePlans[_rpid].basePrice.init) {\r\n            c = _inventory + vendors[_vendorId].ratePlans[_rpid].basePrice.inventory;\r\n            require(c >= _inventory);\r\n            vendors[_vendorId].ratePlans[_rpid].basePrice.inventory = c;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update inventory and price by `_vendorId`, `_rpid`, `_date`, `_tokenId`, `_price` and `_inventory`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _tokenId The digital token id\r\n     * @param _price The price to be updated\r\n     * @param _inventory The inventory to be updated\r\n     */\r\n    function updatePriceAndInventories(uint256 _vendorId, uint256 _rpid, uint256 _date, uint256 _tokenId, uint256 _price, uint16 _inventory)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        if (vendors[_vendorId].ratePlans[_rpid].prices[_date].init) {\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].inventory = _inventory;\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].tokens[_tokenId] = _price;\r\n        } else {\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date] = Price(_inventory, true);\r\n            vendors[_vendorId].ratePlans[_rpid].prices[_date].tokens[_tokenId] = _price;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Push rate plan to `_vendorId`'s rate plan list\r\n     * @param _vendorId The vendor id\r\n     * @param _name The name of rate plan\r\n     * @param _ipfs The rate plan IPFS address\r\n     * @param _direction direction to step in\r\n     */\r\n    function pushRatePlan(uint256 _vendorId, string _name, bytes32 _ipfs, bool _direction) \r\n        public \r\n        onlyOwnerOrAuthorizedContract\r\n        returns(uint256) {\r\n        RatePlan memory rp = RatePlan(_name, uint256(now), _ipfs, Price(0, false));\r\n        \r\n        uint256 id = vendors[_vendorId].ratePlanList.push(_direction);\r\n        vendors[_vendorId].ratePlans[id] = rp;\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove rate plan of `_vendorId` by `_rpid`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     */\r\n    function removeRatePlan(uint256 _vendorId, uint256 _rpid) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        delete vendors[_vendorId].ratePlans[_rpid];\r\n        vendors[_vendorId].ratePlanList.remove(_rpid);\r\n    }\r\n\r\n    /**\r\n     * @dev Update `_rpid` of `_vendorId` by `_name` and `_ipfs`\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _name The rate plan name\r\n     * @param _ipfs The rate plan IPFS address\r\n     */\r\n    function updateRatePlan(uint256 _vendorId, uint256 _rpid, string _name, bytes32 _ipfs)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        vendors[_vendorId].ratePlans[_rpid].ipfs = _ipfs;\r\n        vendors[_vendorId].ratePlans[_rpid].name = _name;\r\n    }\r\n    \r\n    /**\r\n     * @dev Push token contract to the token list\r\n     * @param _direction direction to step in\r\n     */\r\n    function pushToken(address _contract, bool _direction)\r\n        public \r\n        onlyOwnerOrAuthorizedContract \r\n        returns(uint256) {\r\n        uint256 id = tokenList.push(_direction);\r\n        tokenIndexToAddress[id] = _contract;\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove token by `_tokenId`\r\n     * @param _tokenId The digital token id\r\n     */\r\n    function removeToken(uint256 _tokenId) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        delete tokenIndexToAddress[_tokenId];\r\n        tokenList.remove(_tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Generate room night token\r\n     * @param _vendorId The vendor id\r\n     * @param _rpid The rate plan id\r\n     * @param _date The date desc (20180723)\r\n     * @param _token The token id\r\n     * @param _price The token price\r\n     * @param _ipfs The rate plan IPFS address\r\n     */\r\n    function generateRoomNightToken(uint256 _vendorId, uint256 _rpid, uint256 _date, uint256 _token, uint256 _price, bytes32 _ipfs)\r\n        public \r\n        onlyOwnerOrAuthorizedContract \r\n        returns(uint256) {\r\n        roomnights.push(RoomNight(_vendorId, _rpid, _token, _price, now, _date, _ipfs));\r\n\r\n        // Give the token to `_customer`\r\n        uint256 rnid = uint256(roomnights.length - 1);\r\n        return rnid;\r\n    }\r\n\r\n    /**\r\n     * @dev Update refund applications\r\n     * @param _buyer The room night token holder\r\n     * @param _rnid The room night token id\r\n     * @param _isRefund Is redund or not\r\n     */\r\n    function updateRefundApplications(address _buyer, uint256 _rnid, bool _isRefund) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        refundApplications[_buyer][_rnid] = _isRefund;\r\n    }\r\n\r\n    /**\r\n     * @dev Push vendor info to the vendor list\r\n     * @param _name The name of vendor\r\n     * @param _vendor The vendor address\r\n     * @param _direction direction to step in\r\n     */\r\n    function pushVendor(string _name, address _vendor, bool _direction)\r\n        public \r\n        onlyOwnerOrAuthorizedContract \r\n        returns(uint256) {\r\n        uint256 id = vendorList.push(_direction);\r\n        vendorIds[_vendor] = id;\r\n        vendors[id] = Vendor(_name, _vendor, uint256(now), true, LinkedListLib.LinkedList(0, 0));\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove vendor from vendor list\r\n     * @param _vendorId The vendor id\r\n     */\r\n    function removeVendor(uint256 _vendorId) \r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        vendorList.remove(_vendorId);\r\n        address vendor = vendors[_vendorId].vendor;\r\n        vendorIds[vendor] = 0;\r\n        delete vendors[_vendorId];\r\n    }\r\n\r\n    /**\r\n     * @dev Make vendor valid or invalid\r\n     * @param _vendorId The vendor id\r\n     * @param _valid The vendor is valid or not\r\n     */\r\n    function updateVendorValid(uint256 _vendorId, bool _valid)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        vendors[_vendorId].valid = _valid;\r\n    }\r\n\r\n    /**\r\n     * @dev Modify vendor's name\r\n     * @param _vendorId The vendor id\r\n     * @param _name Then vendor name\r\n     */\r\n    function updateVendorName(uint256 _vendorId, string _name)\r\n        public \r\n        onlyOwnerOrAuthorizedContract {\r\n        vendors[_vendorId].name = _name;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract TRNTransactions is TRNOwners {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    /**\r\n     * This emits when rate plan is bought in batch\r\n     */\r\n    event BuyInBatch(address indexed _customer, address indexed _vendor, uint256 indexed _rpid, uint256[] _dates, uint256 _token);\r\n\r\n    /**\r\n     * This emits when token refund is applied \r\n     */\r\n    event ApplyRefund(address _customer, uint256 indexed _rnid, bool _isRefund);\r\n\r\n    /**\r\n     * This emits when refunded\r\n     */\r\n    event Refund(address _vendor, uint256 _rnid);\r\n\r\n    /**\r\n     * @dev Complete the buy transaction,\r\n     *      The inventory minus one and the room night token transfer to customer\r\n     * @param _vendorId The vendor account\r\n     * @param _rpid The vendor's rate plan id\r\n     * @param _date The booking date\r\n     * @param _customer The customer account\r\n     * @param _token The token Id\r\n     */\r\n    function _buy(uint256 _vendorId, uint256 _rpid, uint256 _date, address _customer, uint256 _token) private {\r\n        // Product room night token\r\n        (,,uint256 _price) = dataSource.getPrice(_vendorId, _rpid, _date, _token);\r\n        (,,bytes32 _ipfs) = dataSource.getRatePlan(_vendorId, _rpid);\r\n        uint256 rnid = dataSource.generateRoomNightToken(_vendorId, _rpid, _date, _token, _price, _ipfs);\r\n\r\n        // Give the token to `_customer`\r\n        dataSource.transferTokenTo(rnid, _customer);\r\n\r\n        // Record the token to `_customer` account\r\n        _pushRoomNight(_customer, rnid, false);\r\n\r\n        // Record the token to `_vendor` account\r\n        (,address vendor,,) = dataSource.getVendor(_vendorId);\r\n        _pushRoomNight(vendor, rnid, true);\r\n\r\n        // The inventory minus one\r\n        dataSource.reduceInventories(_vendorId, _rpid, _date, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Complete the buy transaction in batch,\r\n     *      The inventory minus one and the room night token transfer to customer\r\n     * @param _vendorId The vendor account\r\n     * @param _vendor Then vendor address\r\n     * @param _rpid The vendor's rate plan id\r\n     * @param _dates The booking date\r\n     * @param _token The token Id\r\n     */\r\n    function _buyInBatch(uint256 _vendorId, address _vendor, uint256 _rpid, uint256[] _dates, uint256 _token) private returns(bool) {\r\n        (uint16[] memory inventories, uint256[] memory values) = dataSource.getPrices(_vendorId, _rpid, _dates, _token);\r\n        uint256 totalValues = 0;\r\n        for(uint256 i = 0; i < _dates.length; i++) {\r\n            if(inventories[i] == 0 || values[i] == 0) {\r\n                return false;\r\n            }\r\n            totalValues += values[i];\r\n            // Transfer the room night to `msg.sender`\r\n            _buy(_vendorId, _rpid, _dates[i], msg.sender, _token);\r\n        }\r\n        \r\n        if (_token == 0) {\r\n            // By through ETH\r\n            require(msg.value == totalValues);\r\n\r\n            // Transfer the ETH to `_vendor`\r\n            _vendor.transfer(totalValues);\r\n        } else {\r\n            // By through other digital token\r\n            address tokenAddress = dataSource.tokenIndexToAddress(_token);\r\n            require(tokenAddress != address(0));\r\n\r\n            // This contract transfer `price.trio` from `msg.sender` account\r\n            TripioToken tripio = TripioToken(tokenAddress);\r\n            tripio.transferFrom(msg.sender, _vendor, totalValues);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Complete the refund transaction\r\n     * Remove the `_rnid` from the owner account and the inventory plus one\r\n     */\r\n    function _refund(uint256 _rnid, uint256 _vendorId, uint256 _rpid, uint256 _date) private {\r\n        // Remove the `_rnid` from the owner\r\n        _removeRoomNight(dataSource.roomNightIndexToOwner(_rnid), _rnid);\r\n\r\n        // The inventory plus one\r\n        dataSource.addInventories(_vendorId, _rpid, _date, 1);\r\n\r\n        // Change the owner of `_rnid`\r\n        dataSource.transferTokenTo(_rnid, address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev By room nigth in batch through ETH(`_token` == 0) or other digital token(`_token != 0`)\r\n     *      Throw when `_rpid` not exist\r\n     *      Throw unless each inventory more than zero\r\n     *      Throw unless `msg.value` equal to `price.eth`\r\n     *      This method is payable, can accept ETH transfer\r\n     * @param _vendorId The vendor Id\r\n     * @param _rpid The _vendor's rate plan id\r\n     * @param _dates The booking dates\r\n     * @param _token The digital currency token \r\n     */\r\n    function buyInBatch(uint256 _vendorId, uint256 _rpid, uint256[] _dates, uint256 _token) \r\n        external\r\n        payable\r\n        ratePlanExist(_vendorId, _rpid)\r\n        validDates(_dates)\r\n        returns(bool) {\r\n        \r\n        (,address vendor,,) = dataSource.getVendor(_vendorId);\r\n        \r\n        bool result = _buyInBatch(_vendorId, vendor, _rpid, _dates, _token);\r\n        \r\n        require(result);\r\n\r\n        // Event\r\n        emit BuyInBatch(msg.sender, vendor, _rpid, _dates, _token);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Apply room night refund\r\n     *      Throw unless `_rnid` is valid\r\n     *      Throw unless `_rnid` can transfer\r\n     * @param _rnid room night identifier\r\n     * @param _isRefund if `true` the `_rnid` can transfer else not\r\n     */\r\n    function applyRefund(uint256 _rnid, bool _isRefund) \r\n        external\r\n        validToken(_rnid)\r\n        canTransfer(_rnid)\r\n        returns(bool) {\r\n        dataSource.updateRefundApplications(msg.sender, _rnid, _isRefund);\r\n\r\n        // Event\r\n        emit ApplyRefund(msg.sender, _rnid, _isRefund);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Whether the `_rnid` is in refund applications\r\n     * @param _rnid room night identifier\r\n     */\r\n    function isRefundApplied(uint256 _rnid) \r\n        external\r\n        view\r\n        validToken(_rnid) returns(bool) {\r\n        return dataSource.refundApplications(dataSource.roomNightIndexToOwner(_rnid), _rnid);\r\n    }\r\n\r\n    /**\r\n     * @dev Refund through ETH or other digital token, give the room night ETH/TOKEN to customer and take back inventory\r\n     *      Throw unless `_rnid` is valid\r\n     *      Throw unless `msg.sender` is vendor\r\n     *      Throw unless the refund application is true\r\n     *      Throw unless the `msg.value` is equal to `roomnight.eth`\r\n     * @param _rnid room night identifier\r\n     */\r\n    function refund(uint256 _rnid) \r\n        external\r\n        payable\r\n        validToken(_rnid) \r\n        returns(bool) {\r\n        // Refund application is true\r\n        require(dataSource.refundApplications(dataSource.roomNightIndexToOwner(_rnid), _rnid));\r\n\r\n        // The `msg.sender` is the vendor of the room night.\r\n        (uint256 vendorId,uint256 rpid,uint256 token,uint256 price,,uint256 date,) = dataSource.roomnights(_rnid);\r\n        (,address vendor,,) = dataSource.getVendor(vendorId);\r\n        require(msg.sender == vendor);\r\n\r\n        address ownerAddress = dataSource.roomNightIndexToOwner(_rnid);\r\n\r\n        if (token == 0) {\r\n            // Refund by ETH\r\n\r\n            // The `msg.sender` is equal to `roomnight.eth`\r\n            uint256 value = price;\r\n            require(msg.value >= value);\r\n\r\n            // Transfer the ETH to roomnight's owner\r\n            ownerAddress.transfer(value);\r\n        } else {\r\n            // Refund  by TRIO\r\n\r\n            // The `roomnight.trio` is more than zero\r\n            require(price > 0);\r\n\r\n            // This contract transfer `price.trio` from `msg.sender` account\r\n            TripioToken tripio = TripioToken(dataSource.tokenIndexToAddress(token));\r\n            tripio.transferFrom(msg.sender, ownerAddress, price);\r\n        }\r\n        // Refund\r\n        _refund(_rnid, vendorId, rpid, date);\r\n\r\n        // Event \r\n        emit Refund(msg.sender, _rnid);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TripioRoomNightCustomer is TRNAsset, TRNSupportsInterface, TRNOwnership, TRNTransactions {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(address _dataSource) public {\r\n        // Init the data source\r\n        dataSource = TripioRoomNightData(_dataSource);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ETH balance from contract account, the balance will transfer to the contract owner\r\n     */\r\n    function withdrawBalance() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw other TOKEN balance from contract account, the balance will transfer to the contract owner\r\n     * @param _token The TOKEN id\r\n     */\r\n    function withdrawTokenId(uint _token) external onlyOwner {\r\n        TripioToken tripio = TripioToken(dataSource.tokenIndexToAddress(_token));\r\n        uint256 tokens = tripio.balanceOf(address(this));\r\n        tripio.transfer(owner, tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw other TOKEN balance from contract account, the balance will transfer to the contract owner\r\n     * @param _tokenAddress The TOKEN address\r\n     */\r\n    function withdrawToken(address _tokenAddress) external onlyOwner {\r\n        TripioToken tripio = TripioToken(_tokenAddress);\r\n        uint256 tokens = tripio.balanceOf(address(this));\r\n        tripio.transfer(owner, tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Destory the contract\r\n     */\r\n    function destroy() external onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function() external payable {\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferFromInBatch\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rnid\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rnid\",\"type\":\"uint256\"}],\"name\":\"isRefundApplied\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rnid\",\"type\":\"uint256\"}],\"name\":\"roomNight\",\"outputs\":[{\"name\":\"_vendorId\",\"type\":\"uint256\"},{\"name\":\"_rpid\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_date\",\"type\":\"uint256\"},{\"name\":\"_ipfs\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"},{\"name\":\"_isVendor\",\"type\":\"bool\"}],\"name\":\"roomNightsOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rnid\",\"type\":\"uint256\"},{\"name\":\"_isRefund\",\"type\":\"bool\"}],\"name\":\"applyRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vendorId\",\"type\":\"uint256\"},{\"name\":\"_rpid\",\"type\":\"uint256\"},{\"name\":\"_dates\",\"type\":\"uint256[]\"},{\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"buyInBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dataSource\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_vendor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_rpid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_dates\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"BuyInBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_rnid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isRefund\",\"type\":\"bool\"}],\"name\":\"ApplyRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_vendor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_rnid\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TripioRoomNightCustomer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000052ef5080612920a0365be1d382765089b596c708","Library":"","SwarmSource":"bzzr://158c88fdb7d1763655f4899299cf7bd51ca84e2a69500481dd9276c31595f570"}]}