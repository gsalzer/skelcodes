{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/* SNAILTREE\r\n\r\n// SnailTree is a mock HYIP, coupled with a jackpot.\r\n\r\n// To start, players spend ETH to plant a root.\r\n// They get a \"tree size\" proportional to their investment.\r\n// They also get Pecans the moment they invest.\r\n// Pecan number starts proportional to ETH, and then multiplied.\r\n// This buy multiplier is global.\r\n// The longer nobody plants a root, the bigger multiplier.\r\n\r\n// Each player gets to claim ETH equivalent to their treeSize.\r\n// This claim starts equivalent to 4% of their initial, daily.\r\n// This claim also gets them Pecans.\r\n// The amount of Pecans given raises with time.\r\n// This claim multiplier builds up the longer the player doesn't claim.\r\n\r\n// Instead of claiming ETH, players can grow their tree.\r\n// Growing the tree reinvests the ETH they would have claimed.\r\n// Their treeSize raises proportionally.\r\n// If their lastClaim was at least one hour ago, they receive a boost.\r\n// Boosts are straight multipliers to Pecan rewards.\r\n\r\n// A player can give Pecans to Wonkers the Squirrel,\r\n// And receive ETH in return, from the wonkPot.\r\n// Once Wonkers receives enough Pecans, the round is over.\r\n// Whoever gave him Pecans last wins the roundPot (20% of the jackPot).\r\n\r\n// A new round starts immediately.\r\n// Players from the previous round see their treeSize decrease by 20%.\r\n// Their growth boost also resets to 1.\r\n// This occurs automatically on their next action.\r\n\r\n*/\r\n\r\ncontract SnailTree {\r\n    using SafeMath for uint;\r\n    \r\n    /* Event */\r\n    \r\n    event PlantedRoot(address indexed player, uint eth, uint pecan, uint treesize);\r\n    event GavePecan(address indexed player, uint eth, uint pecan);\r\n    event ClaimedShare(address indexed player, uint eth, uint pecan);\r\n    event GrewTree(address indexed player, uint eth, uint pecan, uint boost);\r\n    event WonRound (address indexed player, uint indexed round, uint eth);\r\n    event WithdrewBalance (address indexed player, uint eth);\r\n    event PaidThrone (address indexed player, uint eth);\r\n    event BoostedPot (address indexed player, uint eth);\r\n\r\n    /* Constants */\r\n    \r\n    uint256 constant SECONDS_IN_HOUR    = 3600;\r\n    uint256 constant SECONDS_IN_DAY     = 86400;\r\n    uint256 constant PECAN_WIN_FACTOR   = 0.0000000001 ether; //add 1B pecans per 0.1 ETH in pot\r\n    uint256 constant TREE_SIZE_COST     = 0.0000005 ether; //= 1 treeSize\r\n    uint256 constant REWARD_SIZE_ETH    = 0.00000002 ether; //4% per day per treeSize\r\n    address constant SNAILTHRONE        = 0x261d650a521103428C6827a11fc0CBCe96D74DBc;\r\n\r\n    /* Variables */\r\n    \r\n\t//Current round\r\n    uint256 public gameRound            = 0;\r\n\t\r\n\t//Fund for %claims\r\n\tuint256 public treePot              = 0;\r\n\t\r\n\t//Direct rewards\r\n\tuint256 public wonkPot              = 0;\r\n\t\r\n\t//Round winner reward\r\n\tuint256 public jackPot              = 0;\r\n\t\r\n\t//Divs for SnailThrone holders\r\n\tuint256 public thronePot            = 0;\r\n\t\r\n\t//Pecans required to win this round\r\n\tuint256 public pecanToWin           = 0;\r\n\t\r\n\t//Pecans given this round\r\n\tuint256 public pecanGiven           = 0;\r\n\t\r\n\t//Last ETH investment\r\n\tuint256 public lastRootPlant        = 0;\r\n\t\r\n    /* Mappings */\r\n    \r\n    mapping (address => uint256) playerRound;\r\n    mapping (address => uint256) playerBalance;\r\n    mapping (address => uint256) treeSize;\r\n    mapping (address => uint256) pecan;\r\n    mapping (address => uint256) lastClaim;\r\n    mapping (address => uint256) boost;\r\n\r\n    /* Functions */\r\n    \r\n    // Constructor\r\n    // Sets round to 1 and lastRootPlant to now\r\n    \r\n    constructor() public {\r\n        gameRound = 1;\r\n        pecanToWin = 1;\r\n        lastRootPlant = now;\r\n    }\r\n    \r\n    //-- PRIVATE --\r\n    \r\n    // CheckRound\r\n    // Ensures player is on correct round\r\n    // If not, reduce his treeSize by 20% per round missed\r\n    // Increase his round until he's on the correct one\r\n    \r\n    function CheckRound() private {       \r\n        while(playerRound[msg.sender] != gameRound){\r\n            treeSize[msg.sender] = treeSize[msg.sender].mul(4).div(5);\r\n            playerRound[msg.sender] = playerRound[msg.sender].add(1);\r\n            boost[msg.sender] = 1;\r\n        }\r\n    }\r\n    \r\n    // WinRound\r\n    // Called when a player gives enough Pecans to Wonkers\r\n    // Gives his earnings to winner\r\n    \r\n    function WinRound(address _msgSender) private {\r\n        \r\n        //Increment round\r\n        uint256 _round = gameRound;\r\n        gameRound = gameRound.add(1);\r\n        \r\n        //Compute reward and adjust pot\r\n        uint256 _reward = jackPot.div(5);\r\n        jackPot = jackPot.sub(_reward);\r\n        \r\n        //Reset pecan given to 0\r\n        pecanGiven = 0;\r\n        \r\n        //Set new pecan requirement\r\n        pecanToWin = ComputePecanToWin();\r\n    \r\n        //Send reward\r\n        playerBalance[_msgSender] = playerBalance[_msgSender].add(_reward);\r\n        \r\n        emit WonRound(_msgSender, _round, _reward);\r\n    }\r\n    \r\n    // PotSplit\r\n\t// Allocates the ETH of every transaction\r\n\t// 40% treePot, 30% wonkPot, 20% jackPot, 10% thronePot\r\n    \r\n    function PotSplit(uint256 _msgValue) private {\r\n        \r\n        treePot = treePot.add(_msgValue.mul(4).div(10));\r\n        wonkPot = wonkPot.add(_msgValue.mul(3).div(10));\r\n        jackPot = jackPot.add(_msgValue.div(5));\r\n        thronePot = thronePot.add(_msgValue.div(10));\r\n    }\r\n    \r\n    //-- GAME ACTIONS --\r\n    \r\n    // PlantRoot\r\n    // Gives player treeSize and pecan\r\n    // Sets lastRootPlant and lastClaim to now\r\n    \r\n    function PlantRoot() public payable {\r\n        require(tx.origin == msg.sender, \"no contracts allowed\");\r\n        require(msg.value >= 0.001 ether, \"at least 1 finney to plant a root\");\r\n\r\n        //Check if player is in correct round\r\n        CheckRound();\r\n\r\n        //Split ETH to pot\r\n        PotSplit(msg.value);\r\n        \r\n        //Set new pecan requirement\r\n        pecanToWin = ComputePecanToWin();\r\n        \r\n        //Get pecans to give\r\n        uint256 _newPecan = ComputePlantPecan(msg.value);\r\n        \r\n        //Set claims to now\r\n        lastRootPlant = now;\r\n        lastClaim[msg.sender] = now;\r\n        \r\n        //Get treeSize to give\r\n        uint256 _treePlant = msg.value.div(TREE_SIZE_COST);\r\n        \r\n        //Add player treeSize\r\n        treeSize[msg.sender] = treeSize[msg.sender].add(_treePlant);\r\n        \r\n        //Add player pecans\r\n        pecan[msg.sender] = pecan[msg.sender].add(_newPecan);\r\n        \r\n        emit PlantedRoot(msg.sender, msg.value, _newPecan, treeSize[msg.sender]);\r\n    }\r\n    \r\n    // GivePecan\r\n    // Exchanges player Pecans for ETH\r\n\t// Wins the round if enough Pecans are given\r\n    \r\n    function GivePecan(uint256 _pecanGift) public {\r\n        require(pecan[msg.sender] >= _pecanGift, \"not enough pecans\");\r\n        \r\n        //Check if player is in correct round\r\n        CheckRound();\r\n        \r\n        //Get reward\r\n        uint256 _ethReward = ComputeWonkTrade(_pecanGift);\r\n        \r\n        //Lower player pecan\r\n        pecan[msg.sender] = pecan[msg.sender].sub(_pecanGift);\r\n        \r\n        //Adjust pecan given\r\n        pecanGiven = pecanGiven.add(_pecanGift);\r\n        \r\n        //Lower wonkPot\r\n        wonkPot = wonkPot.sub(_ethReward);\r\n        \r\n        //Give reward\r\n        playerBalance[msg.sender] = playerBalance[msg.sender].add(_ethReward);\r\n        \r\n        //Check if player Wins\r\n        if(pecanGiven >= pecanToWin){\r\n            WinRound(msg.sender);\r\n        } else {\r\n\t\t\temit GavePecan(msg.sender, _ethReward, _pecanGift);\r\n\t\t}\r\n    }\r\n    \r\n    // ClaimShare\r\n    // Gives player his share of ETH, and Pecans\r\n    // Sets his lastClaim to now\r\n    \r\n    function ClaimShare() public {\r\n        require(treeSize[msg.sender] > 0, \"plant a root first\");\r\n\t\t\r\n        //Check if player is in correct round\r\n        CheckRound();\r\n        \r\n        //Get ETH reward\r\n        uint256 _ethReward = ComputeEtherShare(msg.sender);\r\n        \r\n        //Get Pecan reward\r\n        uint256 _pecanReward = ComputePecanShare(msg.sender);\r\n        \r\n        //Set lastClaim\r\n        lastClaim[msg.sender] = now;\r\n        \r\n        //Lower treePot\r\n        treePot = treePot.sub(_ethReward);\r\n        \r\n        //Give rewards\r\n        pecan[msg.sender] = pecan[msg.sender].add(_pecanReward);\r\n        playerBalance[msg.sender] = playerBalance[msg.sender].add(_ethReward);\r\n        \r\n        emit ClaimedShare(msg.sender, _ethReward, _pecanReward);\r\n    }\r\n    \r\n    // GrowTree\r\n    // Uses player share to grow his treeSize\r\n    // Gives share pecans multiplied by boost\r\n    // Increases boost if last claim was at least one hour ago\r\n    \r\n    function GrowTree() public {\r\n        require(treeSize[msg.sender] > 0, \"plant a root first\");\r\n\r\n        //Check if player is in correct round\r\n        CheckRound();\r\n        \r\n        //Get ETH used\r\n        uint256 _ethUsed = ComputeEtherShare(msg.sender);\r\n        \r\n        //Get Pecan reward\r\n        uint256 _pecanReward = ComputePecanShare(msg.sender);\r\n        \r\n        //Check if player gets a boost increase\r\n        uint256 _timeSpent = now.sub(lastClaim[msg.sender]);\r\n        \r\n        //Set lastClaim\r\n        lastClaim[msg.sender] = now;\r\n        \r\n        //Get treeSize to give\r\n        uint256 _treeGrowth = _ethUsed.div(TREE_SIZE_COST);\r\n        \r\n        //Add player treeSize\r\n        treeSize[msg.sender] = treeSize[msg.sender].add(_treeGrowth);\r\n        \r\n        //Give boost if eligible (maximum +10 at once)\r\n        if(_timeSpent >= SECONDS_IN_HOUR){\r\n            uint256 _boostPlus = _timeSpent.div(SECONDS_IN_HOUR);\r\n            if(_boostPlus > 10){\r\n                _boostPlus = 10;\r\n            }\r\n            boost[msg.sender] = boost[msg.sender].add(_boostPlus);\r\n        }\r\n        \r\n        //Give Pecan reward\r\n        pecan[msg.sender] = pecan[msg.sender].add(_pecanReward);\r\n        \r\n        emit GrewTree(msg.sender, _ethUsed, _pecanReward, boost[msg.sender]);\r\n    }\r\n    \r\n    //-- MISC ACTIONS --\r\n    \r\n    // WithdrawBalance\r\n    // Withdraws the ETH balance of a player to his wallet\r\n    \r\n    function WithdrawBalance() public {\r\n        require(playerBalance[msg.sender] > 0, \"no ETH in player balance\");\r\n        \r\n        uint _amount = playerBalance[msg.sender];\r\n        playerBalance[msg.sender] = 0;\r\n        msg.sender.transfer(_amount);\r\n        \r\n        emit WithdrewBalance(msg.sender, _amount);\r\n    }\r\n    \r\n    // PayThrone\r\n    // Sends thronePot to SnailThrone\r\n    \r\n    function PayThrone() public {\r\n        uint256 _payThrone = thronePot;\r\n        thronePot = 0;\r\n        if (!SNAILTHRONE.call.value(_payThrone)()){\r\n            revert();\r\n        }\r\n        \r\n        emit PaidThrone(msg.sender, _payThrone);\r\n    }\r\n    \r\n    // fallback function\r\n    // Feeds the jackPot\r\n    \r\n    function() public payable {\r\n        jackPot = jackPot.add(msg.value);\r\n        \r\n        emit BoostedPot(msg.sender, msg.value);\r\n    }\r\n    \r\n    //-- CALCULATIONS --\r\n    \r\n    // ComputeEtherShare\r\n    // Returns ETH reward for a claim\r\n    // Reward = 0.00000002 ETH per treeSize per day\r\n    \r\n    function ComputeEtherShare(address adr) public view returns(uint256) {\r\n        \r\n        //Get time since last claim\r\n        uint256 _timeLapsed = now.sub(lastClaim[adr]);\r\n        \r\n        //Compute reward\r\n        uint256 _reward = _timeLapsed.mul(REWARD_SIZE_ETH).mul(treeSize[adr]).div(SECONDS_IN_DAY);\r\n        \r\n        //Check reward isn't above remaining treePot\r\n        if(_reward >= treePot){\r\n            _reward = treePot;\r\n        }\r\n        return _reward;\r\n    }\r\n    \r\n    // ComputeShareBoostFactor\r\n    // Returns current personal Pecan multiplier\r\n    // Starts at 4, adds 1 per hour\r\n    \r\n    function ComputeShareBoostFactor(address adr) public view returns(uint256) {\r\n        \r\n        //Get time since last claim\r\n        uint256 _timeLapsed = now.sub(lastClaim[adr]);\r\n        \r\n        //Compute boostFactor (starts at 4, +1 per hour)\r\n        uint256 _boostFactor = (_timeLapsed.div(SECONDS_IN_HOUR)).add(4);\r\n        return _boostFactor;\r\n    }\r\n    \r\n    // ComputePecanShare\r\n    // Returns Pecan reward for a claim\r\n    // Reward = 1 Pecan per treeSize per day, multiplied by personal boost\r\n    \r\n    function ComputePecanShare(address adr) public view returns(uint256) {\r\n        \r\n        //Get time since last claim\r\n        uint256 _timeLapsed = now.sub(lastClaim[adr]);\r\n        \r\n        //Get boostFactor\r\n        uint256 _shareBoostFactor = ComputeShareBoostFactor(adr);\r\n        \r\n        //Compute reward\r\n        uint256 _reward = _timeLapsed.mul(treeSize[adr]).mul(_shareBoostFactor).mul(boost[msg.sender]).div(SECONDS_IN_DAY);\r\n        return _reward;\r\n    }\r\n    \r\n    // ComputePecanToWin\r\n    // Returns amount of Pecans that must be given to win the round\r\n    // Pecans to win = 1B + (1B per 0.2 ETH in jackpot) \r\n    \r\n    function ComputePecanToWin() public view returns(uint256) {\r\n        uint256 _pecanToWin = jackPot.div(PECAN_WIN_FACTOR);\r\n        return _pecanToWin;\r\n    }\r\n    \r\n    // ComputeWonkTrade\r\n    // Returns ETH reward for a given amount of Pecans\r\n    // % of wonkPot rewarded = (Pecans gifted / Pecans to win) / 2, maximum 50% \r\n    \r\n    function ComputeWonkTrade(uint256 _pecanGift) public view returns(uint256) {\r\n        \r\n        //Make sure gift isn't above requirement to win\r\n        if(_pecanGift > pecanToWin) {\r\n            _pecanGift = pecanToWin;\r\n        }\r\n        uint256 _reward = _pecanGift.mul(wonkPot).div(pecanToWin).div(2);\r\n        return _reward;\r\n    }\r\n    \r\n    // ComputePlantBoostFactor\r\n    // Returns global boost multiplier\r\n    // +1% per second\r\n    \r\n    function ComputePlantBoostFactor() public view returns(uint256) {\r\n        \r\n        //Get time since last global plant\r\n        uint256 _timeLapsed = now.sub(lastRootPlant);\r\n        \r\n        //Compute boostFactor (starts at 100, +1 per second)\r\n        uint256 _boostFactor = (_timeLapsed.mul(1)).add(100);\r\n        return _boostFactor;\r\n    }\r\n    \r\n    // ComputePlantPecan\r\n    // Returns Pecan reward for a given buy\r\n    // 1 Pecan per the cost of 1 Tree Size, multiplied by global boost\r\n    \r\n    function ComputePlantPecan(uint256 _msgValue) public view returns(uint256) {\r\n\r\n        //Get boostFactor\r\n        uint256 _treeBoostFactor = ComputePlantBoostFactor();\r\n        \r\n        //Compute reward \r\n        uint256 _reward = _msgValue.mul(_treeBoostFactor).div(TREE_SIZE_COST).div(100);\r\n        return _reward;\r\n    }\r\n\r\n    //-- GETTERS --\r\n    \r\n    function GetTree(address adr) public view returns(uint256) {\r\n        return treeSize[adr];\r\n    }\r\n    \r\n    function GetPecan(address adr) public view returns(uint256) {\r\n        return pecan[adr];\r\n    }\r\n\t\r\n\tfunction GetMyBoost() public view returns(uint256) {\r\n        return boost[msg.sender];\r\n    }\r\n\t\r\n\tfunction GetMyBalance() public view returns(uint256) {\r\n\t    return playerBalance[msg.sender];\r\n\t}\r\n\t\r\n\tfunction GetMyRound() public view returns(uint256) {\r\n\t    return playerRound[msg.sender];\r\n\t}\r\n\t\r\n\tfunction GetMyLastClaim() public view returns(uint256) {\r\n\t    return lastClaim[msg.sender];\r\n\t}\r\n}\r\n\r\n/* SafeMath library */\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PlantRoot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetPecan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pecanGift\",\"type\":\"uint256\"}],\"name\":\"GivePecan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pecanToWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"ComputeEtherShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PayThrone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GrowTree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputePecanToWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"ComputePecanShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pecanGift\",\"type\":\"uint256\"}],\"name\":\"ComputeWonkTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyLastClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyBoost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wonkPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputePlantBoostFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thronePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetTree\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_msgValue\",\"type\":\"uint256\"}],\"name\":\"ComputePlantPecan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pecanGiven\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"ComputeShareBoostFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRootPlant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ClaimShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pecan\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"treesize\",\"type\":\"uint256\"}],\"name\":\"PlantedRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pecan\",\"type\":\"uint256\"}],\"name\":\"GavePecan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pecan\",\"type\":\"uint256\"}],\"name\":\"ClaimedShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pecan\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"boost\",\"type\":\"uint256\"}],\"name\":\"GrewTree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WonRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WithdrewBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"PaidThrone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"BoostedPot\",\"type\":\"event\"}]","ContractName":"SnailTree","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://73e428076c94f112824b63bcbadbe24c239168ffeb5f2ae43a9a11d4667b54c6"}]}