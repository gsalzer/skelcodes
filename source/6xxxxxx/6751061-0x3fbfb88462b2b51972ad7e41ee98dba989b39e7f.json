{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *\r\n * https://ethergarden.host\r\n *\r\n * Welcome to Ether Garden!\r\n * Here you can earn Ethereum, growing four kinds of vegetables. \r\n * You will get random kind of vegetable for growing with the first transaction.\r\n * One acre of garden field gives one vegetable per day. The more acres you have, the more vegetables they give.\r\n * Attention! Market value of each vegetable will be different. Less grown vegetables will be more expensive.\r\n * Also market value depends on contract balance, number of all bought acres and  number of all grown vegetables.\r\n *\r\n * Send from 0 to 0.00001 ether for sell your all grown vegetables or getting FREE acres, if you have no one acre.\r\n * Send 0.00001111 ether for reinvest all grown vegetables to the new acres.\r\n * Minimum invest amount for fields buying is 0.001 ETH.\r\n * Use 150000 of Gas limit for your transactions.\r\n *\r\n * Marketing commissions: 4% for buying arces\r\n * Admin commissions: 4% for selling vegetable\r\n * Referrer: 4%\r\n *\r\n */\r\n\r\npragma solidity ^0.4.25; \r\n\r\ncontract EtherGarden{\r\n\r\n    using SafeMath for uint256;\r\n \r\n    struct Farmer {\r\n\t\tuint8   vegetableId;\r\n        uint256 startGrowing;\r\n        uint256 fieldSize;\r\n    }\r\n\r\n\tmapping (uint8 => uint256) public vegetablesTradeBalance;\r\n\tmapping (address => Farmer) public farmers;\r\n\r\n\tuint256 maxVegetableId = 4;\r\n\tuint256 minimumInvest = 0.001 ether;\r\n\tuint256 growingSpeed = 1 days; \r\n\t\r\n\tbool public gameStarted = false;\r\n\tbool public initialized = false;\r\n\taddress public marketing = 0x25e6142178Fc3Afb7533739F5eDDD4a41227576A;\r\n\taddress public admin;\r\n\t\r\n    /**\r\n     * @dev Ð¡onstructor Sets the original roles of the contract \r\n     */\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\t\r\n    /**\r\n     * @dev Modifiers\r\n     */\t\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n    modifier isInitialized() {\r\n        require(initialized && gameStarted);\r\n        _;\r\n    }\t\r\n\r\n    /**\r\n     * @dev Market functions\r\n     */\t\t\r\n    function() external payable {\r\n\t\t\r\n\t\tFarmer storage farmer = farmers[msg.sender];\r\n\r\n\t\tif (msg.value >= 0 && msg.value <= 0.00001 ether) {\r\n\t\t\tif (farmer.vegetableId == 0) {\r\n\t\t\t\t//Set random vegetale for a new farmer\t\r\n\t\t\t\trollFieldId();\r\n\t\t\t\t\r\n\t\t\t\tgetFreeField();\r\n\t\t\t} else\r\n\t\t\t\tsellVegetables();\r\n        } \r\n\t\telse if (msg.value == 0.00001111 ether){\r\n\t\t\treInvest();\r\n        } \r\n\t\telse {\r\n\t\t\tif (farmer.vegetableId == 0) {\r\n\t\t\t\t//Set random vegetale for a new farmer\t\r\n\t\t\t\trollFieldId();\t\t\r\n\t\t\t}\r\n            buyField();\r\n        }\t\t\r\n    }\t \r\n\r\n    function sellVegetables() internal isInitialized {\r\n\t\tFarmer storage farmer = farmers[msg.sender];\r\n\t\t\r\n\t\tuint256 value = vegetablesValue(msg.sender);\r\n\t\tif (value > 0) {\r\n\t\t\tuint256 sellPrice = vegetablePrice(farmer.vegetableId).mul(value);\r\n\t\t\t\r\n\t\t\tif (sellPrice > address(this).balance) {\r\n\t\t\t\tsellPrice = address(this).balance;\r\n\t\t\t\t//stop game\r\n\t\t\t\tgameStarted = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tuint256 fee = devFee(sellPrice);\r\n\t\t\t\r\n\t\t\tfarmer.startGrowing = now;\r\n\t\t\t\r\n\t\t\t//Update market values\r\n\t\t\tvegetablesTradeBalance[farmer.vegetableId] = vegetablesTradeBalance[farmer.vegetableId].add(value);\r\n\t\t\t\r\n\t\t\tadmin.transfer(fee);\r\n\t\t\tmsg.sender.transfer(sellPrice.sub(fee));\r\n\t\t}\r\n    }\t \r\n\t\r\n    function buyField() internal isInitialized {\r\n\t\trequire(msg.value >= minimumInvest, \"Too low ETH value\");\r\n\r\n\t\tFarmer storage farmer = farmers[msg.sender];\t\r\n\r\n\t\t//Calculate acres number for buying\r\n\t\tuint256 acres = msg.value.div(fieldPrice(msg.value));\r\n        \r\n\t\tif (farmer.startGrowing > 0)\r\n\t\t\tsellVegetables();\r\n\t\t\r\n\t\tfarmer.startGrowing = now;\r\n\t\tfarmer.fieldSize = farmer.fieldSize.add(acres);\r\n\t\t\r\n\t\t////Update market values by 20% from the number of the new acres\r\n\t\tvegetablesTradeBalance[farmer.vegetableId] = vegetablesTradeBalance[farmer.vegetableId].add( acres.div(5) );\r\n\t\t\r\n        uint256 fee = devFee(msg.value);\r\n\t\tmarketing.send(fee);\r\n\t\t\r\n        if (msg.data.length == 20) {\r\n            address _referrer = bytesToAddress(bytes(msg.data));\r\n\t\t\tif (_referrer != msg.sender && _referrer != address(0)) {\r\n\t\t\t\t _referrer.send(fee);\r\n\t\t\t}\r\n        }\t\t\r\n    }\r\n\t \r\n\tfunction reInvest() internal isInitialized {\r\n\t\t\r\n\t\tFarmer storage farmer = farmers[msg.sender];\t\r\n\t\t\r\n\t\tuint256 value = vegetablesValue(msg.sender);\r\n\t\trequire(value > 0, \"No grown vegetables for reinvest\");\r\n\t\t\r\n\t\t//Change one vegetable for one acre\r\n\t\tfarmer.fieldSize = farmer.fieldSize.add(value);\r\n\t\tfarmer.startGrowing = now;\r\n\t}\r\n\t\r\n    function getFreeField() internal isInitialized {\r\n\t\tFarmer storage farmer = farmers[msg.sender];\r\n\t\trequire(farmer.fieldSize == 0);\r\n\t\t\r\n\t\tfarmer.fieldSize = freeFieldSize();\r\n\t\tfarmer.startGrowing = now;\r\n\t\t\r\n    }\r\n\t\r\n    function initMarket(uint256 _newTradeBalance) public payable onlyAdmin{\r\n        require(!initialized);\r\n        initialized = true;\r\n\t\tgameStarted = true;\r\n\t\t\r\n\t\t//Set the first trade balance\r\n\t\tfor (uint8 _vegetableId = 1; _vegetableId <= maxVegetableId; _vegetableId++)\r\n\t\t\tvegetablesTradeBalance[_vegetableId] = _newTradeBalance;\r\n    }\t\r\n\t\r\n\tfunction rollFieldId() internal {\r\n\t\tFarmer storage farmer = farmers[msg.sender];\r\n\t\t\r\n\t    //Set random vegetables field for a new farmer\r\n\t\tfarmer.vegetableId = uint8(uint256(blockhash(block.number - 1)) % maxVegetableId + 1);\r\n\t}\r\n\t\r\n    /**\r\n     * @dev Referrer functions\r\n     */\t\t\r\n\r\n\tfunction bytesToAddress(bytes _source) internal pure returns(address parsedreferrer) {\r\n        assembly {\r\n            parsedreferrer := mload(add(_source,0x14))\r\n        }\r\n        return parsedreferrer;\r\n    }\t\r\n\t\r\n    /**\r\n     * @dev Views\r\n     */\t\t\r\n\t \r\n    function vegetablePrice(uint8 _VegetableId) public view returns(uint256){\r\n\t\treturn address(this).balance.div(maxVegetableId).div(vegetablesTradeBalance[_VegetableId]);\r\n    }\r\n\r\n    function vegetablesValue(address _Farmer) public view returns(uint256){\r\n\t\t//ONE acre gives ONE vegetable per day. Many acres give vegetables faster.\r\n\t\treturn farmers[_Farmer].fieldSize.mul( now.sub(farmers[_Farmer].startGrowing) ).div(growingSpeed);\r\n    }\t\r\n\t\r\n    function fieldPrice(uint256 _subValue) public view returns(uint256){\r\n\t    uint256 CommonTradeBalance;\r\n\t\t\r\n\t\tfor (uint8 _vegetableId = 1; _vegetableId <= maxVegetableId; _vegetableId++)\r\n\t\t\tCommonTradeBalance = CommonTradeBalance.add(vegetablesTradeBalance[_vegetableId]);\r\n\t\t\t\r\n\t\t//_subValue need to use the previous value of the balance before acres buying.\r\n\t\treturn ( address(this).balance.sub(_subValue) ).div(CommonTradeBalance);\r\n    }\r\n\t\r\n\tfunction freeFieldSize() public view returns(uint256) {\r\n\t\treturn minimumInvest.div(fieldPrice(0));\r\n\t}\r\n\t\r\n\tfunction devFee(uint256 _amount) internal pure returns(uint256){\r\n        return _amount.mul(4).div(100); //4%\r\n    }\r\n\t\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"vegetablesTradeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"farmers\",\"outputs\":[{\"name\":\"vegetableId\",\"type\":\"uint8\"},{\"name\":\"startGrowing\",\"type\":\"uint256\"},{\"name\":\"fieldSize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_VegetableId\",\"type\":\"uint8\"}],\"name\":\"vegetablePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_subValue\",\"type\":\"uint256\"}],\"name\":\"fieldPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_Farmer\",\"type\":\"address\"}],\"name\":\"vegetablesValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeFieldSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTradeBalance\",\"type\":\"uint256\"}],\"name\":\"initMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EtherGarden","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://85aac09a51b69e53d452e206b42686b39e5b026e97d20d49433ea60c08c39ae2"}]}