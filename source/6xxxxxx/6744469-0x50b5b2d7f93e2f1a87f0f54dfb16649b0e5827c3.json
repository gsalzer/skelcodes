{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'UBETTOKEN' token contract\r\n//\r\n// Symbol      : UBETS\r\n// Name        : UBET COINS\r\n// Total supply: 4000000000\r\n// Decimals    : 18\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract SafeMath {\r\n  \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  \r\n//   function balanceOf(address who) public constant returns (uint);\r\n//   function allowance(address owner, address spender) public constant returns (uint);\r\n\r\n//   function transfer(address to, uint value) public returns (bool ok);\r\n//   function transferFrom(address from, address to, uint256 value) public returns (bool ok);\r\n//   function approve(address spender, uint value) public returns (bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract StandardToken is ERC20, SafeMath {\r\n\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n \r\n  uint256 private _totalSupply;\r\n\r\n  function transfer(address to, uint256 value) public payable {\r\n    _transfer(msg.sender, to, value);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool){\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = sub(_allowed[from][msg.sender], value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = add(_totalSupply, value);\r\n    _balances[account] = add(_balances[account], value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n \r\n  function allowance(address owner, address spender) public view returns (uint256){\r\n    return _allowed[owner][spender];\r\n  }\r\n  \r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = sub(_balances[from], value);\r\n    _balances[to] = add(_balances[to], value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract UbetCoins is Ownable, StandardToken {\r\n    \r\n    string public constant name = \"Ubet Coins\";                // name of the token\r\n    string public constant symbol = \"UBETS\";                 \r\n    uint public constant decimals = 18;                       // token has 18 digit precision\r\n\r\n    uint256 internal constant INITIAL_SUPPLY = 4000000000000000000000000000;\r\n    \r\n    uint256 public totalSupply =  INITIAL_SUPPLY;    // 4 BILLION INITIAL SUPPLY\r\n    uint256 public tokenSupplyFromCheck = 0;         // Total from check!\r\n    \r\n    string public constant UBETCOINS_LEDGER_TO_LEDGER_ENTRY_INSTRUMENT_DOCUMENT_PATH = \"https://s3.amazonaws.com/s3-ubetcoin-user-signatures/document/LEDGER-TO-LEDGER-ENTRY-FOR-UBETCOINS.pdf\";\r\n    string public constant UBETCOINS_LEDGER_TO_LEDGER_ENTRY_INSTRUMENT_DOCUMENT_SHA512 = \"c8f0ae2602005dd88ef908624cf59f3956107d0890d67d3baf9c885b64544a8140e282366cae6a3af7bfbc96d17f856b55fc4960e2287d4a03d67e646e0e88c6\";\r\n        \r\n    /// Base exchange rate is set\r\n    uint256 public ratePerOneEther = 135;\r\n    uint256 public totalUBetCheckAmounts = 0;\r\n\r\n    /// Issue event index starting from 0.\r\n    uint64 public issueIndex = 0;\r\n\r\n    /// Emitted for each sucuessful token purchase.\r\n    event Issue(uint64 issueIndex, address addr, uint256 tokenAmount);\r\n    \r\n    // All funds will be transferred in this wallet.\r\n    address public moneyWallet = 0xe5688167Cb7aBcE4355F63943aAaC8bb269dc953;\r\n\r\n    /// Emitted for each UBETCHECKS register.\r\n    event UbetCheckIssue(string chequeIndex);\r\n      \r\n    struct UBetCheck {\r\n      string accountId;\r\n      string accountNumber;\r\n      string fullName;\r\n      string routingNumber;\r\n      string institution;\r\n      uint256 amount;\r\n      uint256 tokens;\r\n      string checkFilePath;\r\n      string digitalCheckFingerPrint;\r\n    }\r\n    \r\n    mapping (address => UBetCheck) UBetChecks;\r\n    address[] public uBetCheckAccts;\r\n    \r\n    mapping (address => uint256) _balances;\r\n    \r\n    /// @dev Initializes the contract and allocates all initial tokens to the owner\r\n    constructor() public {\r\n      _balances[msg.sender] = INITIAL_SUPPLY;\r\n    }\r\n    \r\n    /// check functionality\r\n    \r\n    /// @dev Register UBetCheck to the chain\r\n    /// @param _beneficiary recipient ether address\r\n    /// @param _accountId the id generated from the db\r\n    /// @param _accountNumber the account number stated in the check\r\n    /// @param _routingNumber the routing number stated in the check\r\n    /// @param _institution the name of the institution / bank in the check\r\n    /// @param _fullname the name printed on the check\r\n    /// @param _amount the amount in currency in the chek\r\n    /// @param _checkFilePath the url path where the cheque has been uploaded\r\n    /// @param _digitalCheckFingerPrint the hash of the file\r\n    /// @param _tokens number of tokens issued to the beneficiary\r\n    function registerUBetCheck(address _beneficiary, string _accountId,  string _accountNumber, string _routingNumber, string _institution, string _fullname,  uint256 _amount, string _checkFilePath, string _digitalCheckFingerPrint, uint256 _tokens) public payable onlyOwner {\r\n      \r\n      require(_beneficiary != address(0));\r\n      require(bytes(_accountId).length != 0);\r\n      require(bytes(_accountNumber).length != 0);\r\n      require(bytes(_routingNumber).length != 0);\r\n      require(bytes(_institution).length != 0);\r\n      require(bytes(_fullname).length != 0);\r\n      require(_amount > 0);\r\n      require(_tokens > 0);\r\n      require(bytes(_checkFilePath).length != 0);\r\n      require(bytes(_digitalCheckFingerPrint).length != 0);\r\n      \r\n      uint256 __conToken = _tokens * (10**(decimals));\r\n      \r\n      UBetChecks[_beneficiary].accountId = _accountId;\r\n      UBetChecks[_beneficiary].accountNumber = _accountNumber;\r\n      UBetChecks[_beneficiary].routingNumber = _routingNumber;\r\n      UBetChecks[_beneficiary].institution = _institution;\r\n      UBetChecks[_beneficiary].fullName = _fullname;\r\n      UBetChecks[_beneficiary].amount = _amount;\r\n      UBetChecks[_beneficiary].tokens = _tokens;\r\n      \r\n      UBetChecks[_beneficiary].checkFilePath = _checkFilePath;\r\n      UBetChecks[_beneficiary].digitalCheckFingerPrint = _digitalCheckFingerPrint;\r\n      \r\n      totalUBetCheckAmounts = add(totalUBetCheckAmounts, _amount);\r\n      tokenSupplyFromCheck = add(tokenSupplyFromCheck, _tokens);\r\n      \r\n      uBetCheckAccts.push(_beneficiary) -1;\r\n      \r\n      // Issue token when registered UBetCheck is complete to the _beneficiary\r\n      doIssueTokens(_beneficiary, __conToken);\r\n      \r\n      // Fire Event UbetCheckIssue\r\n      emit UbetCheckIssue(_accountId);\r\n    }\r\n    \r\n    /// @dev List all the checks in the\r\n    function getUBetChecks() public view returns (address[]) {\r\n      return uBetCheckAccts;\r\n    }\r\n    \r\n    /// @dev Return UBetCheck information by supplying beneficiary adddress\r\n    function getUBetCheck(address _address) public view returns(string, string, string, string, uint256, string, string) {\r\n            \r\n      return (UBetChecks[_address].accountNumber,\r\n              UBetChecks[_address].routingNumber,\r\n              UBetChecks[_address].institution,\r\n              UBetChecks[_address].fullName,\r\n              UBetChecks[_address].amount,\r\n              UBetChecks[_address].checkFilePath,\r\n              UBetChecks[_address].digitalCheckFingerPrint);\r\n    }\r\n    \r\n    /// @dev This default function allows token to be purchased by directly\r\n    /// sending ether to this smart contract.\r\n    function () public payable {\r\n      purchaseTokens(msg.sender);\r\n    }\r\n\r\n    /// @dev return total count of registered UBet Checks\r\n    function countUBetChecks() public view returns (uint) {\r\n        return uBetCheckAccts.length;\r\n    }\r\n    \r\n\r\n    /// @dev issue tokens for a single buyer\r\n    /// @param _beneficiary addresses that the tokens will be sent to.\r\n    /// @param _tokens the amount of tokens, with decimals expanded (full).\r\n    function doIssueTokens(address _beneficiary, uint256 _tokens) internal {\r\n      require(_beneficiary != address(0));    \r\n\r\n      // compute without actually increasing it\r\n      uint256 increasedTotalSupply = add(totalSupply, _tokens);\r\n     \r\n      // increase token total supply\r\n      totalSupply = increasedTotalSupply;\r\n      \r\n      // update the beneficiary balance to number of tokens sent\r\n      _balances[_beneficiary] = add(_balances[_beneficiary], _tokens);\r\n      \r\n      emit Transfer(msg.sender, _beneficiary, _tokens);\r\n    \r\n      // event is fired when tokens issued\r\n      emit Issue(\r\n          issueIndex++,\r\n          _beneficiary,\r\n          _tokens\r\n      );\r\n    }\r\n    \r\n    /// @dev Issue token based on Ether received.\r\n    /// @param _beneficiary Address that newly issued token will be sent to.\r\n    function purchaseTokens(address _beneficiary) public payable {\r\n      // only accept a minimum amount of ETH?\r\n      require(msg.value >= 0.00104 ether);\r\n     \r\n      uint _tokens = div(mul(msg.value, ratePerOneEther), (10**(18-decimals)));\r\n      doIssueTokens(_beneficiary, _tokens);\r\n\r\n      /// forward the money to the money wallet\r\n      moneyWallet.transfer(address(this).balance);\r\n    }\r\n    \r\n    \r\n    /// @dev Change money wallet owner\r\n    /// @param _address new address to received the ether\r\n    function setMoneyWallet(address _address) public onlyOwner {\r\n        moneyWallet = _address;\r\n    }\r\n    \r\n    /// @dev Change Rate per token in one ether\r\n    /// @param _value the amount of tokens, with decimals expanded (full).\r\n    function setRatePerOneEther(uint256 _value) public onlyOwner {\r\n      require(_value >= 1);\r\n      ratePerOneEther = _value;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UBETCOINS_LEDGER_TO_LEDGER_ENTRY_INSTRUMENT_DOCUMENT_PATH\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRatePerOneEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUBetChecks\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUBetCheckAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uBetCheckAccts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerOneEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issueIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countUBetChecks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUBetCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UBETCOINS_LEDGER_TO_LEDGER_ENTRY_INSTRUMENT_DOCUMENT_SHA512\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moneyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupplyFromCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"purchaseTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_accountId\",\"type\":\"string\"},{\"name\":\"_accountNumber\",\"type\":\"string\"},{\"name\":\"_routingNumber\",\"type\":\"string\"},{\"name\":\"_institution\",\"type\":\"string\"},{\"name\":\"_fullname\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_checkFilePath\",\"type\":\"string\"},{\"name\":\"_digitalCheckFingerPrint\",\"type\":\"string\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"registerUBetCheck\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMoneyWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issueIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"chequeIndex\",\"type\":\"string\"}],\"name\":\"UbetCheckIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"UbetCoins","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3512707ff600b1694bf117a75f35fcba0dc0fd7ff7bca466275ae4740c0ac7fc"}]}