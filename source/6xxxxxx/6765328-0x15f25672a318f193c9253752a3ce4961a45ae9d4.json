{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/* MZT1_userpic is part of Mizhen family that players can design their own user icon.\r\n */\r\ncontract MZBoss {\r\n    uint256 constant internal magnitude = 1e18; // related to payoutsTo_, profitPershare_, profitPerSharePot_, profitPerShareNew_\r\n    mapping(address => int256) internal payoutsTo_;\r\n    uint256 public tokenSupply_ = 0; // total sold tokens \r\n    uint256 public profitPerShare_ = 0 ;\r\n    uint256 public _totalProfitPot = 0;\r\n    address constant internal _communityAddress = 0x43e8587aCcE957629C9FD2185dD700dcDdE1dD1E;\r\n    /**\r\n     * profit distribution from game pot\r\n     */\r\n    function potDistribution()\r\n        public\r\n        payable\r\n    {\r\n        //\r\n        uint256 _incomingEthereum = msg.value;\r\n        if(tokenSupply_ > 0){\r\n            \r\n            // profit per share \r\n            uint256 profitPerSharePot_ = SafeMath.mul(_incomingEthereum, magnitude) / (tokenSupply_);\r\n            \r\n            // update profitPerShare_, adding profit from game pot\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, profitPerSharePot_);\r\n            \r\n        } else {\r\n            // send to community\r\n            payoutsTo_[_communityAddress] -=  (int256) (_incomingEthereum);\r\n            \r\n        }\r\n        \r\n        //update _totalProfitPot\r\n        _totalProfitPot = SafeMath.add(_incomingEthereum, _totalProfitPot); \r\n    }\r\n} \r\n\r\ncontract MZT1_userpic {\r\n\r\n    mapping (address => mapping (uint256 => uint256)) public blockColor_; \r\n    address constant public _MZBossAddress = 0x16d29707a5F507f9252Ae5b7fc5E86399725C663;\r\n    address constant public _communityAddress = 0x43e8587aCcE957629C9FD2185dD700dcDdE1dD1E;\r\n\r\n    uint256 constant public designFee_ = 3e17; // 0.3 ether to design\r\n    mapping (address => bool) public design_;\r\n\r\n\tmodifier designFeeCheck(){ \r\n        uint256 _incomingEthereum = msg.value;\r\n        address _customerAddress = msg.sender;\r\n        require((_incomingEthereum >= designFee_) || (designRight(_customerAddress)));\r\n        _;\r\n    }\r\n    \r\n    // fired whenever a player set color\r\n    event onSetColor\r\n    (\r\n        address indexed playerAddress,\r\n        uint256[] ColorSetID,\r\n        uint256[] ColorSetColor\r\n    );\r\n\t\r\n\r\n\tfunction setPicColor(uint256[] blockIDArray_, uint256[] blockColorArray_) \r\n\t    designFeeCheck()\r\n        public\r\n        payable\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _incomingEthereum =msg.value;\r\n        \r\n        if(_incomingEthereum > 0){\r\n            uint256 toCommunity = _incomingEthereum/2;\r\n            uint256 toMZBoss = _incomingEthereum/2;\r\n            \r\n            // sent to MZBoss and community address\r\n            sendPotProfit(toMZBoss);\r\n            _communityAddress.transfer(toCommunity); \r\n        }\r\n\r\n        for (uint i = 0; i < blockIDArray_.length; i++) {\r\n        blockColor_[_customerAddress][blockIDArray_[i]] = blockColorArray_[i];\r\n        }\r\n        \r\n        design_[_customerAddress] = true;\r\n        \r\n        emit onSetColor(_customerAddress, blockIDArray_, blockColorArray_);\r\n    }\r\n    \r\n    function designRight(address _customerAddress)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return design_[_customerAddress];\r\n    }\r\n    \r\n    function display(address _customerAddress)\r\n        public\r\n        view\r\n        returns(uint256[], uint256[])\r\n    {\r\n        uint256[] memory IDArray_ = new uint256[](64);\r\n        uint256[] memory colorArray_ = new uint256[](64);\r\n        \r\n        for (uint i = 0; i < 64; i++) {\r\n            IDArray_[i] = i;\r\n            colorArray_[i] = blockColor_[_customerAddress][i];\r\n            \r\n        }\r\n        return (IDArray_, colorArray_);\r\n    }\r\n    \r\n    /* send eth to MZBoss\r\n\t *\r\n\t */\r\n\tfunction sendPotProfit(uint256 valueToSend)\r\n\t    internal\r\n\t{\r\n\t\t\r\n\t\tMZBoss m = MZBoss(_MZBossAddress);\r\n\t\tm.potDistribution.value(valueToSend)();\r\n\t}\r\n   \r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"designRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_communityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"designFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockColor_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blockIDArray_\",\"type\":\"uint256[]\"},{\"name\":\"blockColorArray_\",\"type\":\"uint256[]\"}],\"name\":\"setPicColor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"design_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MZBossAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"display\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ColorSetID\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"ColorSetColor\",\"type\":\"uint256[]\"}],\"name\":\"onSetColor\",\"type\":\"event\"}]","ContractName":"MZT1_userpic","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://eedd0c4c5328792fdf1752735fc5b21617c4398c1382d6c6da8b9a49d163e1fb"}]}