{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract MultiOwnable {\r\n    mapping (address => bool) owners;\r\n    address unremovableOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipExtended(address indexed host, address indexed guest);\r\n    event OwnershipRemoved(address indexed removedOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owners[msg.sender] = true;\r\n        unremovableOwner = msg.sender;\r\n    }\r\n\r\n    function addOwner(address guest) onlyOwner public {\r\n        require(guest != address(0));\r\n        owners[guest] = true;\r\n        emit OwnershipExtended(msg.sender, guest);\r\n    }\r\n\r\n    function removeOwner(address removedOwner) onlyOwner public {\r\n        require(removedOwner != address(0));\r\n        require(unremovableOwner != removedOwner);\r\n        delete owners[removedOwner];\r\n        emit OwnershipRemoved(removedOwner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        require(unremovableOwner != msg.sender);\r\n        owners[newOwner] = true;\r\n        delete owners[msg.sender];\r\n        emit OwnershipTransferred(msg.sender, newOwner);\r\n    }\r\n\r\n    function isOwner(address addr) public view returns(bool){\r\n        return owners[addr];\r\n    }\r\n}\r\n\r\ncontract TokenLock is MultiOwnable {\r\n    ERC20 public token;\r\n    mapping (address => uint256) public lockAmounts;\r\n    mapping (address => uint256) public releaseTimestamps;\r\n\r\n    constructor (address _token) public {\r\n        token = ERC20(_token);\r\n    }\r\n\r\n    function getLockAmount(address _addr) external view returns (uint256) {\r\n        return lockAmounts[_addr];\r\n    }\r\n\r\n    function getReleaseBlock(address _addr) external view returns (uint256) {\r\n        return releaseTimestamps[_addr];\r\n    }\r\n\r\n    function lock(address _addr, uint256 _amount, uint256 _releaseTimestamp) external {\r\n        require(owners[msg.sender]);\r\n        require(_addr != address(0));\r\n        lockAmounts[_addr] = _amount;\r\n        releaseTimestamps[_addr] = _releaseTimestamp;\r\n    }\r\n\r\n    function release(address _addr) external {\r\n        require(owners[msg.sender] || msg.sender == _addr);\r\n        require(block.timestamp >= releaseTimestamps[_addr]);\r\n        uint256 amount = lockAmounts[_addr];\r\n        lockAmounts[_addr] = 0;\r\n        releaseTimestamps[_addr] = 0;\r\n        token.transfer(_addr, amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"removedOwner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guest\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_releaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releaseTimestamps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getReleaseBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"host\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"guest\",\"type\":\"address\"}],\"name\":\"OwnershipExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}]","ContractName":"TokenLock","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002abd74b67ebb1cb9dbe6ec222e92dad2f7fee194","Library":"","SwarmSource":"bzzr://efa1f2008e093676ba1976249e2e1304be657bde450bb55bd587842caba0ff3c"}]}