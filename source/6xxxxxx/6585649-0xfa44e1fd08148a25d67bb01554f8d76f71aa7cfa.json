{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * Digipay Network - The Future of Online Payments\r\n * ----------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * ----------------------------------------------------------------------------\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev if the owner calls this function, the function is executed\r\n   * and otherwise, an exception is thrown.\r\n   */\r\n  modifier onlyOwner() {  \r\n    require(msg.sender == owner);               \r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * ----------------------------------------------------------------------------\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev https://github.com/ethereum/EIPs/issues/179\r\n * @dev This ERC describes a simpler version of the ERC20 standard token contract\r\n * ----------------------------------------------------------------------------\r\n */\r\n\r\ncontract ERC20Basic {\r\n  \r\n  // The total token supply\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  // @notice Get the account balance of another account with address `who`\r\n  function balanceOf(address who) public view returns (uint256); \r\n  \r\n  // @notice Transfer `value' amount of tokens to address `to`\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  // @notice Triggered when tokens are transferred\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 Standard\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * ----------------------------------------------------------------------------\r\n */\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n  // @notice Returns the amount which `spender` is still allowed to withdraw from `owner`\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n  // @notice Transfer `value` amount of tokens from address `from` to address `to`\r\n  // Address `to` can withdraw after it is approved by address `from`\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  // @notice Allow `spender` to withdraw, multiple times, up to the `value` amount\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  // @notice Triggered whenever approve(address spender, uint256 value) is called\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n/**\r\n * @title BasicToken\r\n * @dev Simpler version of StandardToken, with basic functions\r\n * ----------------------------------------------------------------------------\r\n */\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // @notice This creates an array with all balances\r\n  mapping(address => uint256) balances;\r\n\r\n  // @notice Get the token balance of address `_owner`\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    \r\n    // @notice Prevent transfer to 0x0 address\r\n    require(_to != address(0));\r\n\r\n    // @notice `Check if the sender has enough` is not needed\r\n    // because sub(balances[msg.sender], _value) will `throw` if this condition is not met\r\n    require(balances[msg.sender] >= _value);\r\n\r\n    // @notice `Check for overflows` is not needed\r\n    // because add(_to, _value) will `throw` if this condition is not met\r\n    require(balances[_to] + _value >= balances[_to]);\r\n\r\n    // @notice Subtract from the sender\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\r\n    // @notice Add the same to the recipient\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    // @notice Trigger `transfer` event\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 Token Standard\r\n * @dev Implementation of the Basic token standard\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n * ----------------------------------------------------------------------------\r\n */\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  // @notice Owner of address approves the transfer of an amount to another address\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  // @notice Owner allows `_spender` to transfer or withdraw `_value` tokens from owner to `_spender`\r\n  // Trigger `approve` event\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // @notice This check is not needed \r\n    // because sub(_allowance, _value) will throw if this condition is not met\r\n    require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  // @notice Returns the amount which `_spender` is still allowed to withdraw from `_owner`\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @notice Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @notice Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title tokensale.digipay.network TokenSaleKYC\r\n * @dev Verified addresses can participate in the token sale\r\n */\r\ncontract TokenSaleKYC is Ownable {\r\n    \r\n    // @dev This creates an array with all verification statuses of addresses \r\n    mapping(address=>bool) public verified;\r\n\r\n    //@dev Trigger `verification status` events\r\n    event VerificationStatusUpdated(address participant, bool verificationStatus);\r\n\r\n    /**\r\n     * @dev Updates verification status of an address\r\n     * @dev Only owner can update\r\n     * @param participant Address that is submitted by a participant \r\n     * @param verificationStatus True or false\r\n     */\r\n    function updateVerificationStatus(address participant, bool verificationStatus) public onlyOwner {\r\n        verified[participant] = verificationStatus;\r\n        emit VerificationStatusUpdated(participant, verificationStatus);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates verification statuses of addresses\r\n     * @dev Only owner can update\r\n     * @param participants An array of addresses\r\n     * @param verificationStatus True or false\r\n     */\r\n    function updateVerificationStatuses(address[] participants, bool verificationStatus) public onlyOwner {\r\n        for (uint i = 0; i < participants.length; i++) {\r\n            updateVerificationStatus(participants[i], verificationStatus);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * ----------------------------------------------------------------------------\r\n */\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title DigiPayToken contract\r\n * @dev Allocate tokens to wallets based on our token distribution\r\n * @dev Accept contributions only within a time frame\r\n * @dev Participants must complete KYC process\r\n * @dev There are two stages (Pre-sale and Mainsale)\r\n * @dev Require minimum and maximum contributions\r\n * @dev Calculate bonuses and rates\r\n * @dev Can pause contributions\r\n * @dev The token sale stops automatically when the hardcap is reached \r\n * @dev Lock (can not transfer) tokens until the token sale ends\r\n * @dev Burn unsold tokens\r\n * @dev Update the total supply after burning \r\n * @author digipay.network\r\n * ----------------------------------------------------------------------------\r\n */\r\ncontract DigiPayToken is StandardToken, Ownable, TokenSaleKYC, Pausable {\r\n  using SafeMath for uint256; \r\n  string  public name;\r\n  string  public symbol;\r\n  uint8   public decimals;\r\n\r\n  uint256 public weiRaised;\r\n  uint256 public hardCap;\r\n\r\n  address public wallet;\r\n  address public TEAM_WALLET;\r\n  address public AIRDROP_WALLET;\r\n  address public RESERVE_WALLET;\r\n\r\n  uint    internal _totalSupply;\r\n  uint    internal _teamAmount;\r\n  uint    internal _airdropAmount;\r\n  uint    internal _reserveAmount;\r\n\r\n  uint256 internal presaleStartTime;\r\n  uint256 internal presaleEndTime;\r\n  uint256 internal mainsaleStartTime;\r\n  uint256 internal mainsaleEndTime;\r\n\r\n  bool    internal presaleOpen;\r\n  bool    internal mainsaleOpen;\r\n  bool    internal Open;\r\n  bool    public   locked;\r\n  \r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n    event Burn(address indexed burner, uint tokens);\r\n\r\n    // @dev The token sale stops automatically when the hardcap is reached\r\n    modifier onlyWhileOpen {\r\n        require(now >= presaleStartTime && now <= mainsaleEndTime && Open && weiRaised <= hardCap);\r\n        _;\r\n    }\r\n    \r\n    // @dev Lock (can not transfer) tokens until the token sale ends\r\n    // Aidrop wallet and reserve wallet are allowed to transfer \r\n    modifier onlyUnlocked() {\r\n        require(msg.sender == AIRDROP_WALLET || msg.sender == RESERVE_WALLET || msg.sender == owner || !locked);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * ------------------------------------------------------------------------\r\n     * Constructor\r\n     * ------------------------------------------------------------------------\r\n     */\r\n    constructor (address _owner, address _wallet, address _team, address _airdrop, address _reserve) public {\r\n\r\n        _setTimes();\r\n        \r\n        name = \"DigiPay\";\r\n        symbol = \"DIP\";\r\n        decimals = 18;\r\n        hardCap = 20000 ether;\r\n\r\n        owner = _owner;\r\n        wallet = _wallet;\r\n        TEAM_WALLET = _team;\r\n        AIRDROP_WALLET = _airdrop;\r\n        RESERVE_WALLET = _reserve;\r\n\r\n        // @dev initial total supply\r\n        _totalSupply = 180000000e18;\r\n        // @dev Tokens initialy allocated for the team (20%)\r\n        _teamAmount = 36000000e18;\r\n        // @dev Tokens initialy allocated for airdrop campaigns (8%)\r\n        _airdropAmount = 14400000e18;\r\n        // @dev Tokens initialy allocated for testing the platform (2%)\r\n        _reserveAmount = 3600000e18;\r\n\r\n        balances[this] = totalSupply();\r\n        emit Transfer(address(0x0),this, totalSupply());\r\n        _transfer(TEAM_WALLET, _teamAmount);\r\n        _transfer(AIRDROP_WALLET, _airdropAmount);\r\n        _transfer(RESERVE_WALLET, _reserveAmount);\r\n\r\n        Open = true;\r\n        locked = true;\r\n        \r\n    }\r\n\r\n    function updateWallet(address _wallet) public onlyOwner {\r\n        wallet = _wallet;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function _setTimes() internal {   \r\n        presaleStartTime          = 1541062800; // 01st Nov 2018 09:00:00 GMT\r\n        presaleEndTime            = 1543481999; // 29th Nov 2018 08:59:59 GMT\r\n        mainsaleStartTime         = 1545296400; // 20th Dec 2018 09:00:00 GMT\r\n        mainsaleEndTime           = 1548320399; // 24th Jan 2019 08:59:59 GMT\r\n    }\r\n\r\n    function unlock() public onlyOwner {\r\n        locked = false;\r\n    }\r\n\r\n    function lock() public onlyOwner {\r\n        locked = true;\r\n    }\r\n\r\n    /**\r\n     * @dev override `transfer` function to add onlyUnlocked\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint _value) public onlyUnlocked returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev override `transferFrom` function to add onlyUnlocked\r\n     * @param _from The address to transfer from.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public onlyUnlocked returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    // @dev Return `true` if the token sale is live\r\n    function _checkOpenings() internal {\r\n        \r\n        if(now >= presaleStartTime && now <= presaleEndTime) {\r\n            presaleOpen = true;\r\n            mainsaleOpen = false;\r\n        }\r\n        else if(now >= mainsaleStartTime && now <= mainsaleEndTime) {\r\n            presaleOpen = false;\r\n            mainsaleOpen = true;\r\n        }\r\n        else {\r\n            presaleOpen = false;\r\n            mainsaleOpen = false;\r\n        }\r\n    }\r\n    \r\n    // @dev Fallback function can be used to buy tokens\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _beneficiary) internal onlyWhileOpen whenNotPaused {\r\n    \r\n        // @dev `msg.value` contains the amount of wei sent in a transaction\r\n        uint256 weiAmount = msg.value;\r\n    \r\n        /** \r\n         * @dev Validation of an incoming purchase\r\n         * @param _beneficiary Address performing the token purchase\r\n         * @param weiAmount Value in wei involved in the purchase\r\n         */\r\n        require(_beneficiary != address(0));\r\n        require(weiAmount != 0);\r\n    \r\n        _checkOpenings();\r\n\r\n        /**\r\n         * @dev Check verification statuses of addresses\r\n         * @return True if participants can buy tokens, false otherwise\r\n         */\r\n        require(verified[_beneficiary]);\r\n\r\n        require(presaleOpen || mainsaleOpen);\r\n        \r\n        if(presaleOpen) {\r\n            // @dev Presale contributions must be Min 2 ETH and Max 500 ETH\r\n            require(weiAmount >= 2e18  && weiAmount <= 5e20);\r\n        }\r\n        else {\r\n            // @dev Mainsale contributions must be Min 0.2 ETH and Max 500 ETH\r\n            require(weiAmount >= 2e17  && weiAmount <= 5e20);\r\n        }\r\n        \r\n        // @dev Calculate token amount to be returned\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        \r\n        // @dev Get more 10% bonus when purchasing more than 10 ETH\r\n        if(weiAmount >= 10e18) {\r\n            tokens = tokens.add(weiAmount.mul(500));\r\n        }\r\n        \r\n        // @dev Update funds raised\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        _processPurchase(_beneficiary, tokens);\r\n\r\n        // @dev Trigger `token purchase` event\r\n        emit TokenPurchase(_beneficiary, weiAmount, tokens);\r\n\r\n        _forwardFunds(msg.value);\r\n    }\r\n    \r\n    /**\r\n     * @dev Return an amount of tokens based on a current token rate\r\n     * @param _weiAmount Value in wei to be converted into tokens\r\n     */\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n\r\n        uint256 RATE;\r\n        if(presaleOpen) {\r\n            RATE = 7500; // @dev 1 ETH = 7500 DIP\r\n        }\r\n        \r\n        if(now >= mainsaleStartTime && now < (mainsaleStartTime + 1 weeks)) {\r\n            RATE = 6000; // @dev 1 ETH = 6000 DIP\r\n        }\r\n        \r\n        if(now >= (mainsaleStartTime + 1 weeks) && now < (mainsaleStartTime + 2 weeks)) {\r\n            RATE = 5750; // @dev 1 ETH = 5750 DIP\r\n        }\r\n        \r\n        if(now >= (mainsaleStartTime + 2 weeks) && now < (mainsaleStartTime + 3 weeks)) {\r\n            RATE = 5500; // @dev 1 ETH = 5500 DIP\r\n        }\r\n        \r\n        if(now >= (mainsaleStartTime + 3 weeks) && now < (mainsaleStartTime + 4 weeks)) {\r\n            RATE = 5250; // @dev 1 ETH = 5250 DIP\r\n        }\r\n        \r\n        if(now >= (mainsaleStartTime + 4 weeks) && now <= mainsaleEndTime) {\r\n            RATE = 5000; // @dev 1 ETH = 5000 DIP\r\n        }\r\n\r\n        return _weiAmount.mul(RATE);\r\n    }\r\n    \r\n    /**\r\n     * @dev Source of tokens\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _tokenAmount Number of tokens to be emitted\r\n     */\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _transfer(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Executed when a purchase has been validated and is ready to be executed\r\n     * @param _beneficiary Address receiving the tokens\r\n     * @param _tokenAmount Number of tokens to be purchased\r\n     */\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Forward ether to the fund collection wallet\r\n     * @param _amount Amount of wei to be forwarded\r\n     */\r\n    function _forwardFunds(uint256 _amount) internal {\r\n        wallet.transfer(_amount);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Transfer `tokens` from contract address to address `to`\r\n     */\r\n    function _transfer(address to, uint256 tokens) internal returns (bool success) {\r\n        require(to != 0x0);\r\n        require(balances[this] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        balances[this] = balances[this].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(this,to,tokens);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allow owner to call an emergency stop\r\n     */\r\n    function stopTokenSale() public onlyOwner {\r\n        Open = false;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allow owner to transfer free tokens from `AIRDROP_WALLET` to multiple wallet addresses\r\n     */\r\n    function sendtoMultiWallets(address[] _addresses, uint256[] _values) public onlyOwner {\r\n        require(_addresses.length == _values.length);\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            // @dev Update balances and trigger `transfer` events\r\n            balances[AIRDROP_WALLET] = balances[AIRDROP_WALLET].sub(_values[i]*10**uint(decimals));\r\n            balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]*10**uint(decimals));\r\n            emit Transfer(AIRDROP_WALLET, _addresses[i], _values[i]*10**uint(decimals));\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the unsold tokens from contract address\r\n     * @dev This function can be used only if the token sale does not reach Softcap\r\n     */\r\n    function drainRemainingToken(address _to, uint256 _value) public onlyOwner {\r\n       require(now > mainsaleEndTime);\r\n       _transfer(_to, _value);\r\n    }\r\n    \r\n    /**\r\n     * @dev Burn unsold tokens\r\n     * @param _value The remaining amount to be burned\r\n     */\r\n    function burnRemainingToken(uint256 _value) public onlyOwner returns (bool) {\r\n        balances[this] = balances[this].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(this, _value);\r\n        emit Transfer(this, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"AIRDROP_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"verified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTokenSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participants\",\"type\":\"address[]\"},{\"name\":\"verificationStatus\",\"type\":\"bool\"}],\"name\":\"updateVerificationStatuses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"drainRemainingToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnRemainingToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"updateWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"verificationStatus\",\"type\":\"bool\"}],\"name\":\"updateVerificationStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVE_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sendtoMultiWallets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_airdrop\",\"type\":\"address\"},{\"name\":\"_reserve\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"verificationStatus\",\"type\":\"bool\"}],\"name\":\"VerificationStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DigiPayToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d2F574A725ecF210c0316161473cEBDd6F1B0ce000000000000000000000000ff33fC8876b8c529ed0568eE1f212939817953DA0000000000000000000000007471F4Fc89B3D3C47943a45A57d0aabF81FD1BF30000000000000000000000008E2d2929ed54b47640D5751dE65820e095F2BdDa00000000000000000000000070E6a5CB3314138f143BD9cE0944FE10dE330Af1","Library":"","SwarmSource":"bzzr://c89f44d010bd8e2ea875abde1e991dc3b075213a2f5b1df38c5d85e1c649cd3c"}]}