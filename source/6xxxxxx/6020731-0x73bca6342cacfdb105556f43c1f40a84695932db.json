{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  \r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract Nonpayable {\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Don't accept ETH\r\n  // ------------------------------------------------------------------------\r\n  function () public payable {\r\n    revert();\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function destroy() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n}\r\n\r\ncontract Regulated is Ownable {\r\n  event Whitelisted(address indexed customer);\r\n  event Blacklisted(address indexed customer);\r\n  \r\n  mapping(address => bool) regulationStatus;\r\n\r\n  function whitelist(address customer) public onlyOwner {\r\n    regulationStatus[customer] = true;\r\n    Whitelisted(customer);\r\n  }\r\n\r\n  function blacklist(address customer) public onlyOwner {\r\n    regulationStatus[customer] = false;\r\n    Blacklisted(customer);\r\n  }\r\n  \r\n  function ensureRegulated(address customer) public constant {\r\n    require(regulationStatus[customer] == true);\r\n  }\r\n\r\n  function isRegulated(address customer) public constant returns (bool approved) { \r\n    return regulationStatus[customer];\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public constant returns (uint);\r\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract VaultbankVotingToken is ERC20, Regulated, Nonpayable {\r\n  using SafeMath for uint;\r\n\r\n  string public symbol;\r\n  string public  name;\r\n  uint8 public decimals;\r\n  uint public _totalSupply;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n\r\n  function VaultbankVotingToken() public {\r\n    symbol = \"VBV\";\r\n    name = \"Vaultbank Voting Token\";\r\n    decimals = 0;\r\n    _totalSupply = 1000;\r\n\r\n    regulationStatus[address(0)] = true;\r\n    Whitelisted(address(0));\r\n    regulationStatus[owner] = true;\r\n    Whitelisted(owner);\r\n\r\n    balances[owner] = _totalSupply;\r\n    Transfer(address(0), owner, _totalSupply);\r\n  }\r\n\r\n  function issue(address recipient, uint tokens) public onlyOwner returns (bool success) {\r\n    require(recipient != address(0));\r\n    require(recipient != owner);\r\n    \r\n    whitelist(recipient);\r\n    transfer(recipient, tokens);\r\n    return true;\r\n  }\r\n\r\n  function issueAndLock(address recipient, uint tokens) public onlyOwner returns (bool success) {\r\n    issue(recipient, tokens);\r\n    blacklist(recipient);\r\n    return true;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    require(newOwner != owner);\r\n   \r\n    whitelist(newOwner);\r\n    transfer(newOwner, balances[owner]);\r\n    owner = newOwner;\r\n  }\r\n\r\n  function totalSupply() public constant returns (uint supply) {\r\n    return _totalSupply - balances[address(0)];\r\n  }\r\n\r\n  function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n    return balances[tokenOwner];\r\n  }\r\n\r\n  function transfer(address to, uint tokens) public returns (bool success) {\r\n    ensureRegulated(msg.sender);\r\n    ensureRegulated(to);\r\n    \r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    // Put a check for race condition issue with approval workflow of ERC20\r\n    require((tokens == 0) || (allowed[msg.sender][spender] == 0));\r\n    \r\n    allowed[msg.sender][spender] = tokens;\r\n    Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n    ensureRegulated(from);\r\n    ensureRegulated(to);\r\n\r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"isRegulated\",\"outputs\":[{\"name\":\"approved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"ensureRegulated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"issueAndLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"VaultbankVotingToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://12bcd0b799b22cbf16390d8b91146cb43ea40385ac841e103794e03111d81d10"}]}