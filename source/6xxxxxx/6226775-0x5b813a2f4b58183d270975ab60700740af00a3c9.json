{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n* CrystalAirdropGame\r\n* Author: InspiGames\r\n* Website: https://cryptominingwar.github.io/\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\ncontract CryptoMiningWarInterface {\r\n\tuint256 public roundNumber;\r\n    uint256 public deadline; \r\n    function addCrystal( address _addr, uint256 _value ) public {}\r\n}\r\ncontract CrystalAirdropGame {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public administrator;\r\n\t// mini game\r\n    uint256 public MINI_GAME_TIME_DEFAULT = 60 * 5;\r\n    uint256 public MINI_GAME_PRIZE_CRYSTAL = 100;\r\n    uint256 public MINI_GAME_BETWEEN_TIME = 8 hours;\r\n    uint256 public MINI_GAME_ADD_TIME_DEFAULT = 15;\r\n    address public miningWarContractAddress;\r\n    uint256 public miniGameId = 0;\r\n    uint256 public noRoundMiniGame;\r\n    CryptoMiningWarInterface public MiningWarContract;\r\n    /** \r\n    * Admin can set the bonus of game's reward\r\n    */\r\n    uint256 public MINI_GAME_BONUS = 100;\r\n    /** \r\n    * @dev mini game information\r\n    */\r\n    mapping(uint256 => MiniGame) public minigames;\r\n    /** \r\n    * @dev player information\r\n    */\r\n    mapping(address => PlayerData) public players;\r\n   \r\n    struct MiniGame {\r\n        uint256 miningWarRoundNumber;\r\n        bool ended; \r\n        uint256 prizeCrystal;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        address playerWin;\r\n        uint256 totalPlayer;\r\n    }\r\n    struct PlayerData {\r\n        uint256 currentMiniGameId;\r\n        uint256 lastMiniGameId; \r\n        uint256 win;\r\n        uint256 share;\r\n        uint256 totalJoin;\r\n        uint256 miningWarRoundNumber;\r\n    }\r\n    event eventEndMiniGame(\r\n        address playerWin,\r\n        uint256 crystalBonus\r\n    );\r\n    event eventJoinMiniGame(\r\n        uint256 totalJoin\r\n    );\r\n    modifier disableContract()\r\n    {\r\n        require(tx.origin == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        administrator = msg.sender;\r\n        // set interface main contract\r\n        miningWarContractAddress = address(0xf84c61bb982041c030b8580d1634f00fffb89059);\r\n        MiningWarContract = CryptoMiningWarInterface(miningWarContractAddress);\r\n    }\r\n\r\n    /** \r\n    * @dev MainContract used this function to verify game's contract\r\n    */\r\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\r\n    {\r\n    \t_isContractMiniGame = true;\r\n    }\r\n\r\n    /** \r\n    * @dev set discount bonus for game \r\n    * require is administrator\r\n    */\r\n    function setDiscountBonus( uint256 _discountBonus ) public \r\n    {\r\n        require( administrator == msg.sender );\r\n        MINI_GAME_BONUS = _discountBonus;\r\n    }\r\n\r\n    /** \r\n    * @dev Main Contract call this function to setup mini game.\r\n    * @param _miningWarRoundNumber is current main game round number\r\n    * @param _miningWarDeadline Main game's end time\r\n    */\r\n    function setupMiniGame( uint256 _miningWarRoundNumber, uint256 _miningWarDeadline ) public\r\n    {\r\n        require(minigames[ miniGameId ].miningWarRoundNumber < _miningWarRoundNumber && msg.sender == miningWarContractAddress);\r\n        // rerest current mini game to default\r\n        minigames[ miniGameId ] = MiniGame(0, true, 0, 0, 0, 0x0, 0);\r\n        noRoundMiniGame = 0;         \r\n        startMiniGame();\t\r\n    }\r\n\r\n    /**\r\n    * @dev start the mini game\r\n    */\r\n    function startMiniGame() private \r\n    {      \r\n        uint256 miningWarRoundNumber = getMiningWarRoundNumber();\r\n\r\n        require(minigames[ miniGameId ].ended == true);\r\n        // caculate information for next mini game\r\n        uint256 currentPrizeCrystal;\r\n        if ( noRoundMiniGame == 0 ) {\r\n            currentPrizeCrystal = SafeMath.div(SafeMath.mul(MINI_GAME_PRIZE_CRYSTAL, MINI_GAME_BONUS),100);\r\n        } else {\r\n            uint256 rate = 168 * MINI_GAME_BONUS;\r\n\r\n            currentPrizeCrystal = SafeMath.div(SafeMath.mul(minigames[miniGameId].prizeCrystal, rate), 10000); // price * 168 / 100 * MINI_GAME_BONUS / 100 \r\n        }\r\n\r\n        uint256 startTime = now + MINI_GAME_BETWEEN_TIME;\r\n        uint256 endTime = startTime + MINI_GAME_TIME_DEFAULT;\r\n        noRoundMiniGame = noRoundMiniGame + 1;\r\n        // start new round mini game\r\n        miniGameId = miniGameId + 1;\r\n        minigames[ miniGameId ] = MiniGame(miningWarRoundNumber, false, currentPrizeCrystal, startTime, endTime, 0x0, 0);\r\n    }\r\n\r\n    /**\r\n    * @dev end Mini Game's round\r\n    */\r\n    function endMiniGame() private  \r\n    {  \r\n        require(minigames[ miniGameId ].ended == false && (minigames[ miniGameId ].endTime <= now ));\r\n        \r\n        uint256 crystalBonus = SafeMath.div( SafeMath.mul(minigames[ miniGameId ].prizeCrystal, 50), 100 );\r\n        // update crystal bonus for player win\r\n        if (minigames[ miniGameId ].playerWin != 0x0) {\r\n            PlayerData storage p = players[minigames[ miniGameId ].playerWin];\r\n            p.win =  p.win + crystalBonus;\r\n        }\r\n        // end current mini game\r\n        minigames[ miniGameId ].ended = true;\r\n        emit eventEndMiniGame(minigames[ miniGameId ].playerWin, crystalBonus);\r\n        // start new mini game\r\n        startMiniGame();\r\n    }\r\n\r\n    /**\r\n    * @dev player join this round\r\n    */\r\n    function joinMiniGame() public disableContract\r\n    {        \r\n        require(now >= minigames[ miniGameId ].startTime && minigames[ miniGameId ].ended == false);\r\n        \r\n        PlayerData storage p = players[msg.sender];\r\n        if (now <= minigames[ miniGameId ].endTime) {\r\n            // update player data in current mini game\r\n            if (p.currentMiniGameId == miniGameId) {\r\n                p.totalJoin = p.totalJoin + 1;\r\n            } else {\r\n                // if player join an new mini game then update share of last mini game for this player \r\n                updateShareCrystal();\r\n                p.currentMiniGameId = miniGameId;\r\n                p.totalJoin = 1;\r\n                p.miningWarRoundNumber = minigames[ miniGameId ].miningWarRoundNumber;\r\n            }\r\n            // update information for current mini game \r\n            if ( p.totalJoin <= 1 ) { // this player into the current mini game for the first time \r\n                minigames[ miniGameId ].totalPlayer = minigames[ miniGameId ].totalPlayer + 1;\r\n            }\r\n            minigames[ miniGameId ].playerWin = msg.sender;\r\n            minigames[ miniGameId ].endTime = minigames[ miniGameId ].endTime + MINI_GAME_ADD_TIME_DEFAULT;\r\n            emit eventJoinMiniGame(p.totalJoin);\r\n        } else {\r\n            // need run end round\r\n            if (minigames[ miniGameId ].playerWin == 0x0) {\r\n                updateShareCrystal();\r\n                p.currentMiniGameId = miniGameId;\r\n                p.lastMiniGameId = miniGameId;\r\n                p.totalJoin = 1;\r\n                p.miningWarRoundNumber = minigames[ miniGameId ].miningWarRoundNumber;\r\n\r\n                minigames[ miniGameId ].playerWin = msg.sender;\r\n            }\r\n            endMiniGame();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev update share bonus for player who join the game\r\n    */\r\n    function updateShareCrystal() private\r\n    {\r\n        uint256 miningWarRoundNumber = getMiningWarRoundNumber();\r\n        PlayerData storage p = players[msg.sender];\r\n        // check current mini game of player join. if mining war start new round then reset player data \r\n        if ( p.miningWarRoundNumber != miningWarRoundNumber) {\r\n            p.share = 0;\r\n            p.win = 0;\r\n        } else if (minigames[ p.currentMiniGameId ].ended == true && p.lastMiniGameId < p.currentMiniGameId && minigames[ p.currentMiniGameId ].miningWarRoundNumber == miningWarRoundNumber) {\r\n            // check current mini game of player join, last update mini game and current mining war round id\r\n            // require this mini game is children of mining war game( is current mining war round id ) \r\n            p.share = SafeMath.add(p.share, calculateShareCrystal(p.currentMiniGameId));\r\n            p.lastMiniGameId = p.currentMiniGameId;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev claim crystals\r\n    */\r\n    function claimCrystal() public\r\n    {\r\n        // should run end round\r\n        if ( minigames[miniGameId].endTime < now ) {\r\n            endMiniGame();\r\n        }\r\n        updateShareCrystal(); \r\n        // update crystal for this player to main game\r\n        uint256 crystalBonus = players[msg.sender].win + players[msg.sender].share;\r\n        MiningWarContract.addCrystal(msg.sender,crystalBonus); \r\n        // update player data. reset value win and share of player\r\n        PlayerData storage p = players[msg.sender];\r\n        p.win = 0;\r\n        p.share = 0;\r\n    \t\r\n    }\r\n\r\n    /**\r\n    * @dev calculate share crystal of player\r\n    */\r\n    function calculateShareCrystal(uint256 _miniGameId) public view returns(uint256 _share)\r\n    {\r\n        PlayerData memory p = players[msg.sender];\r\n        if ( p.lastMiniGameId >= p.currentMiniGameId && p.currentMiniGameId != 0) {\r\n            _share = 0;\r\n        } else {\r\n            _share = SafeMath.div( SafeMath.div( SafeMath.mul(minigames[ _miniGameId ].prizeCrystal, 50), 100 ), minigames[ _miniGameId ].totalPlayer );\r\n        }\r\n    }\r\n\r\n    function getMiningWarDealine () private view returns( uint256 _dealine )\r\n    {\r\n        _dealine = MiningWarContract.deadline();\r\n    }\r\n\r\n    function getMiningWarRoundNumber () private view returns( uint256 _roundNumber )\r\n    {\r\n        _roundNumber = MiningWarContract.roundNumber();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claimCrystal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINI_GAME_TIME_DEFAULT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_miniGameId\",\"type\":\"uint256\"}],\"name\":\"calculateShareCrystal\",\"outputs\":[{\"name\":\"_share\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minigames\",\"outputs\":[{\"name\":\"miningWarRoundNumber\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"prizeCrystal\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"playerWin\",\"type\":\"address\"},{\"name\":\"totalPlayer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningWarContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miniGameId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINI_GAME_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discountBonus\",\"type\":\"uint256\"}],\"name\":\"setDiscountBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_miningWarRoundNumber\",\"type\":\"uint256\"},{\"name\":\"_miningWarDeadline\",\"type\":\"uint256\"}],\"name\":\"setupMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MiningWarContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINI_GAME_ADD_TIME_DEFAULT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINI_GAME_BETWEEN_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noRoundMiniGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINI_GAME_PRIZE_CRYSTAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"currentMiniGameId\",\"type\":\"uint256\"},{\"name\":\"lastMiniGameId\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"share\",\"type\":\"uint256\"},{\"name\":\"totalJoin\",\"type\":\"uint256\"},{\"name\":\"miningWarRoundNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerWin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"crystalBonus\",\"type\":\"uint256\"}],\"name\":\"eventEndMiniGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalJoin\",\"type\":\"uint256\"}],\"name\":\"eventJoinMiniGame\",\"type\":\"event\"}]","ContractName":"CrystalAirdropGame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ab5ef211989faf5f1db2c9b2318f6955fa8be250addcf14f8ee1a443fea5206b"}]}