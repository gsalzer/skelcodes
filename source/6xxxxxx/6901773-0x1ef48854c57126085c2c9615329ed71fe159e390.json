{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n  CRYPTOMAN\r\n  \r\n  EN:\r\n  1. Fixed deposit - 0.05 Ether.\r\n     The number of deposits from one address is not limited.\r\n  2. The round consists of 10 deposits. At the end of the round, each participant\r\n     gets either 150% of the deposit, or insurance compensation 30% of the\r\n     deposit.\r\n  3. Payments are made gradually - with each new deposit several payments are sent\r\n     to the participants of the previous round. If the participant does\r\n     not want to wait for a payout, he can send 0 Ether and get all his winnings.\r\n  4. The prize fund is calculated as 7% of all deposits. To get the whole\r\n     prize fund, it is necessary that after the participant no one invested during\r\n     42 blocks (~ 10 minutes) and after that the participant needs to send\r\n     0 Ether in 10 minutes.\r\n  5. A participant may at any time withdraw their deposits made in the current round.\r\n     Fees will not be refunded. To do this, the participant should to send\r\n     0.0112 ETH to the contract address.\r\n\r\n  GAS LIMIT 300000\r\n  \r\n  RU:\r\n  1. Сумма депозита фиксированная - 0.05 Ether.\r\n     Количество депозитов с одного адреса не ограничено.\r\n  2. Раунд состоит из 10 депозитов. По окончании раунда каждому участнику\r\n     производится начисление - либо 150% от депозита, либо страховое возмещение\r\n     30% от депозита.\r\n  3. Выплаты производятся постепенно - с каждым новым депозитом отправляется\r\n     несколько выплат участникам предыдущего раунда. Если участник не\r\n     хочет ждать выплату, он может отправить 0 Ether и получить все свои выигрыши.\r\n  4. Призовой фонд рассчитывается как 7% от депозитов. Чтобы получить весь\r\n     призовой фонд, нужно, чтобы после участника никто не вкладывался в течение\r\n     42 блоков (~10 минут) и чтобы он отправил 0 Ether через 10 минут.\r\n  5. Участник может в любое время вернуть свои депозиты, сделанные в текущем раунде.\r\n     Комиссии возвращены не будут. Для этого участник должен отправить 0.0112\r\n     ETH на адрес контракта.\r\n\r\n  ЛИМИТ ГАЗА 300000\r\n*/\r\n\r\ncontract Cryptoman {\r\n    uint public depositValue = 0.05 ether;\r\n    uint public returnDepositValue = 0.0112 ether;\r\n    uint public places = 10;\r\n    uint public winPlaces = 5;\r\n    uint public winPercent = 150;\r\n    uint public supportFee = 3;\r\n    uint public prizeFee = 7;\r\n    uint public winAmount = depositValue * winPercent / 100;\r\n    uint public insuranceAmount = (depositValue * places * (100 - supportFee - prizeFee) / 100 - winAmount * winPlaces) / (places - winPlaces);\r\n    uint public blocksBeforePrize = 42;\r\n    uint public prize;\r\n    address public lastInvestor;\r\n    uint public lastInvestedAt;\r\n    uint public currentRound;\r\n    mapping (uint => address[]) public placesMap;\r\n    mapping (uint => uint) public winners;\r\n    uint public currentPayRound;\r\n    uint public currentPayIndex;\r\n    address public support1 = 0xD71C0B80E2fDF33dB73073b00A92980A7fa5b04B;\r\n    address public support2 = 0x7a855307c008CA938B104bBEE7ffc94D3a041E53;\r\n    \r\n    uint private seed;\r\n    \r\n    // uint256 to bytes32\r\n    function toBytes(uint256 x) internal pure returns (bytes b) {\r\n        b = new bytes(32);\r\n        assembly {\r\n            mstore(add(b, 32), x)\r\n        }\r\n    }\r\n    \r\n    // returns a pseudo-random number\r\n    function random(uint lessThan) internal returns (uint) {\r\n        seed += block.timestamp + uint(msg.sender);\r\n        return uint(sha256(toBytes(uint(blockhash(block.number - 1)) + seed))) % lessThan;\r\n    }\r\n    \r\n    // removes item and shifts other items\r\n    function removePlace(uint index) internal {\r\n        if (index >= placesMap[currentRound].length) return;\r\n\r\n        for (uint i = index; i < placesMap[currentRound].length - 1; i++) {\r\n            placesMap[currentRound][i] = placesMap[currentRound][i + 1];\r\n        }\r\n        placesMap[currentRound].length--;\r\n    }\r\n    \r\n    function placesLeft() external view returns (uint) {\r\n        return places - placesMap[currentRound].length;\r\n    }\r\n    \r\n    function processQueue() internal {\r\n        while (gasleft() >= 50000 && currentPayRound < currentRound) {\r\n            uint winner = winners[currentPayRound];\r\n            uint index = (winner + currentPayIndex) % places;\r\n            address investor = placesMap[currentPayRound][index];\r\n            investor.transfer(currentPayIndex < winPlaces ? winAmount : insuranceAmount);\r\n            delete placesMap[currentPayRound][index];\r\n            \r\n            if (currentPayIndex == places - 1) {\r\n                currentPayIndex = 0;\r\n                currentPayRound++;\r\n            } else {\r\n                currentPayIndex++;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function () public payable {\r\n        require(gasleft() >= 250000);\r\n        \r\n        if (msg.value == depositValue) {\r\n            placesMap[currentRound].push(msg.sender);\r\n            if (placesMap[currentRound].length == places) {\r\n                winners[currentRound] = random(places);\r\n                currentRound++;\r\n            }\r\n            \r\n            lastInvestor = msg.sender;\r\n            lastInvestedAt = block.number;\r\n            uint fee = msg.value * supportFee / 200;\r\n            support1.transfer(fee);\r\n            support2.transfer(fee);\r\n            prize += msg.value * prizeFee / 100;\r\n            \r\n            processQueue();\r\n        } else if (msg.value == returnDepositValue) {\r\n            uint depositCount;\r\n            \r\n            uint i = 0;\r\n            while (i < placesMap[currentRound].length) {\r\n                if (placesMap[currentRound][i] == msg.sender) {\r\n                    depositCount++;\r\n                    removePlace(i);\r\n                } else {\r\n                    i++;\r\n                }\r\n            }\r\n            \r\n            require(depositCount > 0);\r\n            \r\n            if (msg.sender == lastInvestor) {\r\n                delete lastInvestor;\r\n            }\r\n            \r\n            prize += msg.value;\r\n            msg.sender.transfer(depositValue * (100 - supportFee - prizeFee) / 100 * depositCount);\r\n        } else if (msg.value == 0) {\r\n            if (lastInvestor == msg.sender && block.number >= lastInvestedAt + blocksBeforePrize) {\r\n                lastInvestor.transfer(prize);\r\n                delete prize;\r\n                delete lastInvestor;\r\n            }\r\n            \r\n            processQueue();\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"winPlaces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"support2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInvestedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"places\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"placesMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnDepositValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"placesLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"insuranceAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPayRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksBeforePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPayIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"support1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Cryptoman","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://900eb0901dcdffe09df96f4a3e65eb81b50c6c838f5c0d7055eb4660022db4b0"}]}