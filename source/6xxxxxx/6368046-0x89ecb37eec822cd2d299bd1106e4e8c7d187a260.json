{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Boosto Pool\r\n */\r\ncontract BoostoPool{\r\n    using SafeMath for uint256;\r\n\r\n    // total number of investors\r\n    uint256 public totalInvestors;\r\n\r\n    address[] investorsList;\r\n\r\n    mapping(address => bool) public investors;\r\n    mapping(address => bool) public winners;\r\n\r\n    address private BSTContract = 0xDf0041891BdA1f911C4243f328F7Cf61b37F965b;\r\n    address private fundsWallet;\r\n    address private operatorWallet;\r\n\r\n    uint256 public unit;\r\n    uint256 public size;\r\n\r\n    uint256 public BSTAmount;\r\n\r\n    uint256 public winnerCount;\r\n    uint256 public paidWinners = 0;\r\n\r\n    uint256 public bonus;\r\n    bool public bonusInETH;\r\n\r\n    uint256 public startDate;\r\n    uint256 public duration; // in seconds\r\n\r\n    /**\r\n     * @dev Creates a new pool\r\n     */\r\n    constructor(\r\n        uint256 _startDate,\r\n        uint256 _duration,\r\n        uint256 _winnerCount,\r\n        uint256 _bonus,\r\n        bool _bonusInETH,\r\n        uint256 _unit,\r\n        uint256 _BSTAmount,\r\n        uint256 _size,\r\n        address _fundsWallet,\r\n        address _operatorWallet\r\n        ) public{\r\n        \r\n        startDate = _startDate;\r\n        duration = _duration;\r\n        \r\n        winnerCount = _winnerCount;\r\n        bonus = _bonus;\r\n        bonusInETH = _bonusInETH;\r\n        unit = _unit;\r\n        BSTAmount = _BSTAmount;\r\n        size = _size;\r\n\r\n        fundsWallet = _fundsWallet;\r\n        operatorWallet = _operatorWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the pool is still open or not\r\n     */\r\n    modifier isPoolOpen() {\r\n        require(totalInvestors < size && now < (startDate + duration) && now >= startDate);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the pool is closed\r\n     */\r\n    modifier isPoolClosed() {\r\n        require(totalInvestors >= size || now >= (startDate + duration));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the pool is finished successfully\r\n     */\r\n    modifier isPoolFinished() {\r\n        require(totalInvestors >= size);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier for check msg.value\r\n     */\r\n    modifier checkInvestAmount(){\r\n        require(msg.value == unit);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev check if the sender is already invested\r\n     */\r\n    modifier notInvestedYet(){\r\n        require(!investors[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev check if the sender is admin\r\n     */\r\n    modifier isAdmin(){\r\n        require(msg.sender == operatorWallet);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function\r\n     */\r\n    function() checkInvestAmount notInvestedYet isPoolOpen payable public{\r\n        fundsWallet.transfer(msg.value);\r\n\r\n        StandardToken bst = StandardToken(BSTContract);\r\n        bst.transfer(msg.sender, BSTAmount);\r\n\r\n        investorsList[investorsList.length++] = msg.sender;\r\n        investors[msg.sender] = true;\r\n\r\n        totalInvestors += 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the admin to tranfer ETH to SC \r\n     * when bounus is in ETH\r\n     */\r\n    function adminDropETH() isAdmin payable public{\r\n        assert(bonusInETH);\r\n        assert(msg.value == winnerCount.mul(bonus));\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the admin to withdraw remaining token and ETH when\r\n     * the pool is closed and not reached the goal(no rewards)\r\n     */\r\n    function adminWithdraw() isAdmin isPoolClosed public{\r\n        assert(totalInvestors <= size);\r\n\r\n        StandardToken bst = StandardToken(BSTContract);\r\n        uint256 bstBalance = bst.balanceOf(this);\r\n\r\n        if(bstBalance > 0){\r\n            bst.transfer(msg.sender, bstBalance);\r\n        }\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        if(ethBalance > 0){\r\n            msg.sender.transfer(ethBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Selects a random winner and transfer the funds.\r\n     * This function could fail when the selected wallet is a duplicate winner\r\n     * and need to try again to select an another random investor.\r\n     * When we have N winners, the admin need to call this function N times. This is \r\n     * not an efficient method but since we have just a few winners it will work fine.\r\n     */\r\n    function adminAddWinner() isPoolFinished isAdmin public{\r\n        assert(paidWinners < winnerCount);\r\n        uint256 winnerIndex = random();\r\n        assert(!winners[investorsList[winnerIndex]]);\r\n\r\n        winners[investorsList[winnerIndex]] = true;\r\n        paidWinners += 1;\r\n\r\n        if(bonusInETH){\r\n            investorsList[winnerIndex].transfer(bonus);\r\n        }else{\r\n            StandardToken(BSTContract).transfer(investorsList[winnerIndex], bonus);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Selects a random winner among all investors\r\n     */\r\n    function random() public view returns (uint256) {\r\n        return uint256(keccak256(block.timestamp, block.difficulty))%size;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the details of an investor by its index.\r\n     * UI can use this function to show the info.\r\n     * @param index Index of the investor in investorsList\r\n     */\r\n    function getWalletInfoByIndex(uint256 index) \r\n            public constant returns (address _addr, bool _isWinner){\r\n        _addr = investorsList[index];\r\n        _isWinner = winners[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the details of an investor\r\n     * UI can use this function to show the info.\r\n     * @param addr Address of the investor\r\n     */\r\n    function getWalletInfo(address addr) \r\n            public constant returns (bool _isWinner){\r\n        _isWinner = winners[addr];\r\n    }\r\n\r\n    /**\r\n     * @dev checks if there is enough funds in the contract or not\r\n     * @param status Boolean to show if there is enough funds or not\r\n     */\r\n    function isHealthy() \r\n            public constant returns (bool status){\r\n\r\n        // ETH balance is not enough\r\n        if(bonusInETH && address(this).balance < winnerCount.mul(bonus)){\r\n            return false;\r\n        }\r\n        \r\n        uint256 bstBalance = StandardToken(BSTContract).balanceOf(this);\r\n\r\n        uint256 enoughBalance = BSTAmount.mul(size - totalInvestors); \r\n        if(!bonusInETH){\r\n            enoughBalance = bstBalance.add(winnerCount.mul(bonus));\r\n        }\r\n        if(bstBalance < enoughBalance){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BoostoPoolFactory {\r\n\r\n    event NewPool(address creator, address pool);\r\n\r\n    function createNew(\r\n        uint256 _startDate,\r\n        uint256 _duration,\r\n        uint256 _winnerCount,\r\n        uint256 _bonus,\r\n        bool _bonusInETH,\r\n        uint256 _unit,\r\n        uint256 _BSTAmount,\r\n        uint256 _size,\r\n        address _fundsWallet,\r\n        address _operatorWallet\r\n    ) public returns(address created){\r\n        address ret = new BoostoPool(\r\n            _startDate,\r\n            _duration,\r\n            _winnerCount,\r\n            _bonus,\r\n            _bonusInETH,\r\n            _unit,\r\n            _BSTAmount,\r\n            _size,\r\n            _fundsWallet,\r\n            _operatorWallet\r\n        );\r\n        emit NewPool(msg.sender, ret);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_winnerCount\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"},{\"name\":\"_bonusInETH\",\"type\":\"bool\"},{\"name\":\"_unit\",\"type\":\"uint256\"},{\"name\":\"_BSTAmount\",\"type\":\"uint256\"},{\"name\":\"_size\",\"type\":\"uint256\"},{\"name\":\"_fundsWallet\",\"type\":\"address\"},{\"name\":\"_operatorWallet\",\"type\":\"address\"}],\"name\":\"createNew\",\"outputs\":[{\"name\":\"created\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"NewPool\",\"type\":\"event\"}]","ContractName":"BoostoPoolFactory","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://16cdf7e8c05cc47710ba9ccc0d168898899fe18241b2f6ebd85dc350b7f6c04d"}]}