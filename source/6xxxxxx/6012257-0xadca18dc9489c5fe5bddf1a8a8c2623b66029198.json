{"status":"1","message":"OK","result":[{"SourceCode":"// Ethertote - Token Burn contract\r\n\r\n\r\n// -----------------------------------------------------------------------------\r\n// The following contract allows unsold tokens as part of the token sale\r\n// to be permantnely locked (\"burned\") so that nobody is able to retrieve them\r\n\r\n// This is achieved by passing ownership of the contract to a null address (0x0)\r\n// using the constructor function when the contract is deployed onto the blockchain\r\n\r\n// The contract uses a default fallback function to accept Eth and Tokens \r\n// and the Ethertote team will not be able to retrieve any Eth or tokens sent\r\n// to this contract.\r\n\r\n// We decided to use this smart contract in favour of allowing tokens to \r\n// be sent to the null account of 0x0, as this prevents anyone from ever \r\n// accidentally sending their own TOTE tokens to 0x0. IF they did this\r\n// accidentally it would throw and the tokens would not be sent there.\r\n\r\n// The ERC20 compliant transfer() and transferFrom() function prevent any tokens\r\n// from ever being sent to 0x0\r\n// -----------------------------------------------------------------------------\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract TokenBurn {\r\n    \r\n    address public thisContractAddress;\r\n    address public admin;\r\n    \r\n    // upon deployment, ownership of this contract is immediately given to the \r\n    // null address\r\n    address public newOwner = 0x0000000000000000000000000000000000000000;\r\n    \r\n    // MODIFIERS\r\n    modifier onlyAdmin { \r\n        require(msg.sender == admin\r\n        ); \r\n        _; \r\n    }\r\n    \r\n    // constructor executed upon deployment to the blockchain\r\n    constructor() public {\r\n        thisContractAddress = address(this);\r\n        admin = newOwner;\r\n    }\r\n    \r\n    // FALLBACK - allows Eth and tokens to be sent to this address\r\n    function () private payable {}\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"thisContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TokenBurn","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0d2ad2b894d611c2dd1a485deb92aa5317148caa7b9bb11d1664fac4308d1e17"}]}