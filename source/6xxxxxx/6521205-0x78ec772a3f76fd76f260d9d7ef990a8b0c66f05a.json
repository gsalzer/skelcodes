{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract IAdminContract {\r\n    // returns the administrator of the game\r\n    function getGameAdmin() public view returns (address);\r\n\r\n    modifier admin() {\r\n        require(msg.sender == getGameAdmin());\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract IBlockRandomLibrary {\r\n    function setRandomBlock(uint blockNumber) internal;\r\n    function updateRandom() public;\r\n    function isRandomAvailable() public view returns(bool);\r\n    function randomBlockPassed() public view returns(bool); \r\n    function getRandomValue() public view returns(uint);\r\n    \r\n    function canStoreRandom() public view returns(bool);\r\n    function isRandomStored() public view returns(bool);\r\n}\r\n\r\ncontract IStartGame {\r\n    function startOwnFixed(uint gameId, uint length, uint addon, uint prize) public payable;\r\n    function betInGame(uint gameId) public payable;\r\n\r\n    function recalcNextGameId() public;\r\n\r\n    function getProfitedCount() public view returns(uint);\r\n    function getCreateFastGamesCount() public view returns(uint);\r\n    function setCreateFastGamesCount(uint count) public;\r\n\r\n\r\n    function canStartGame() public view returns(bool);\r\n    function startGameId() public view returns(uint);\r\n    function startPrizeValue() public view returns(uint);\r\n    function startGameLength() public view returns(uint);\r\n    function startGameAddon() public view returns(uint);\r\n    \r\n    function getStartGameStatus() public view returns(bool, uint, uint, uint, uint);\r\n\r\n    function getTransferProfitedGame(address participant) public view returns(uint);\r\n\r\n    function defaultGameAvailable() public view returns(bool);\r\n    function defaultGameId() public view returns(uint);\r\n    function getRepeatBlock() public view returns(uint);\r\n    function getAddonBlock() public view returns(uint);\r\n\r\n    event RepeatBlockAltered(uint newValue);\r\n    event RepeatAddonBlockAltered(uint newValue);\r\n    event NextGameIdCalculated(uint gameId);\r\n    event DefaultGameUpdated(uint gameId);\r\n    event TransferBet(address better, uint value);\r\n    event GameProfitedEvent(uint gameId);\r\n    event FastGamesChanged(uint faseGamesCreate);\r\n\r\n    function alterRepeatBlock(uint _repeatBlock) public;\r\n    function alterAddonBlock(uint _addonBlock) public;\r\n}\r\n\r\n\r\ncontract ICommonGame is IAdminContract {\r\n    // true if the game is finishing\r\n    function gameFinishing() public view returns(bool);\r\n\r\n    // stops the game\r\n    function stopGame() public;\r\n\r\n    function totalVariants() public view returns(uint);\r\n    function alterTotalVariants(uint _newVariants) public;\r\n\r\n    function autoCreationAllowed() public view returns(bool);\r\n    function setAutoCreation(bool allowed) public;\r\n\r\n    function autoCreationAfterOwnAllowed() public view returns(bool);\r\n    function setAutoCreationAfterOwn(bool allowed) public;\r\n\r\n    function creationAllowed() public view returns(bool) {\r\n        return autoCreationAllowed() && !gameFinishing();\r\n    }\r\n\r\n    function transferInteractionsAllowed() public view returns(bool); \r\n    function setTransferInteractions(bool allowed) public; \r\n\r\n    function startOnlyMinPrizes() public view returns (bool);\r\n    function setStartOnlyMinPrizes(bool minPrizes) public;\r\n \r\n    function startProfitedGamesAllowed() public view returns (bool);\r\n    function setStartProfitedGamesAllowed(bool games) public;\r\n\r\n    // returns true, when the experiment with this thing is finished\r\n    // so one can give back all of the money\r\n    function gameFinished() public view returns(bool);\r\n\r\n    // the block when all of this experiment is finished\r\n    function gameFinishedBlock() public view returns(uint);\r\n\r\n    event GameStopInitiated(uint finishingBlock);\r\n    event TransferInteractionsChanged(bool newValue);\r\n    event StartOnlyMinPrizesChanged(bool newValue);\r\n    event StartProfitedGamesAllowedChanged(bool newValue);\r\n\r\n    event AutoCreationChanged(bool newValue);\r\n    event AutoCreationAfterOwnChanged(bool newValue);\r\n    event TotalVariantsChanged(uint newTotalVariants);\r\n}\r\n\r\ncontract IFunctionPrize {\r\n    function calcPrizeX(uint x, uint maxX, uint maxPrize)  public view returns (uint);\r\n    function prizeFunctionName() public view returns (string);\r\n}\r\n\r\n\r\ncontract IPrizeLibrary is ICommonGame {\r\n    function calculatePrize(uint number, uint minPrize, uint maxPrize) public view returns(uint);\r\n    function prizeName() public view returns (string);    \r\n}\r\n\r\ncontract IBalanceSharePrizeContract {\r\n    function getMaxPrizeShare() public view returns (uint);\r\n    function alterPrizeShare(uint _maxPrizeShare) public;\r\n    event MaxPrizeShareAltered(uint share);\r\n}\r\n\r\ncontract IMinMaxPrize {\r\n    function getMaxPrize() public view returns(uint);\r\n    function getWholePrize() public view returns(uint);\r\n    function getMinPrize() public view returns(uint);\r\n    function alterMinPrize(uint _minPrize) public;\r\n    function alterMaxPrize(uint _maxPrize) public;\r\n\r\n    event MinPrizeAltered(uint prize);\r\n    event MaxPrizeAltered(uint prize);\r\n}\r\n\r\ncontract IBalanceInfo {\r\n    function totalBalance() public view returns(uint);\r\n\r\n    function availableBalance() public view returns(uint);\r\n\r\n    // called when one needs to give some sum to some party. Strictly internal!\r\n    function reserveBalance(uint value) internal returns(uint);\r\n\r\n    // the amount of reserved balance\r\n    function reservedBalance() public view returns(uint);\r\n\r\n    // called during the withdrawal of money from contract. Strictly internal!\r\n    function freeBalance(uint value) internal returns(uint);\r\n\r\n    event BalanceReserved(uint value, uint total);\r\n    event BalanceFreed(uint value, uint total);\r\n}\r\n\r\n\r\ncontract BlockRandomLibrary is IBlockRandomLibrary {\r\n    uint public randomBlock;\r\n    uint public randomValue;\r\n    uint public maxBlocks;\r\n\r\n    constructor(uint _maxBlocks) public \r\n        IBlockRandomLibrary()\r\n    {\r\n        assert(_maxBlocks <= 250);\r\n        randomValue = 0;\r\n        randomBlock = 0;\r\n        maxBlocks = _maxBlocks;\r\n    }\r\n\r\n    function setRandomBlock(uint blockNumber) internal {\r\n        randomBlock = blockNumber;\r\n        if (canStoreRandom()) {\r\n            randomValue = uint(blockhash(randomBlock));\r\n            emit RandomValueCalculated(randomValue, randomBlock);\r\n        } else {\r\n            randomValue = 0;\r\n        }\r\n    }\r\n\r\n    event RandomValueCalculated(uint value, uint randomBlock);\r\n    \r\n    function updateRandom() public {\r\n        if (!isRandomStored() && canStoreRandom()) {\r\n            randomValue = uint(blockhash(randomBlock));\r\n            emit RandomValueCalculated(randomValue, randomBlock);\r\n        }\r\n    }\r\n\r\n    function isRandomAvailable() public view returns(bool) {\r\n        return isRandomStored() || canStoreRandom();\r\n    }\r\n\r\n    function getRandomValue() public view returns(uint) {\r\n        if (isRandomStored()) {\r\n            return randomValue;\r\n        } else if (canStoreRandom()) {\r\n            return uint(blockhash(randomBlock));\r\n        } \r\n\r\n        return 0;\r\n    }\r\n\r\n    function canStoreRandom() public view returns(bool) {\r\n        return !blockExpired() && randomBlockPassed();\r\n    }\r\n    function randomBlockPassed() public view returns(bool) {\r\n        return block.number > randomBlock;\r\n    }\r\n    function blockExpired() public view returns(bool) {\r\n        return block.number > randomBlock + maxBlocks;\r\n    }\r\n    function isRandomStored() public view returns (bool) {\r\n        return randomValue != 0;\r\n    }\r\n}\r\n\r\ncontract EllipticPrize16x is IFunctionPrize {\r\n    function calcModulo(uint fMax) internal pure returns (uint) {\r\n        uint sqr = fMax * fMax * fMax * fMax;\r\n        return sqr * sqr * sqr * sqr;\r\n    }\r\n\r\n    function calcPrizeX(uint x, uint fMax, uint maxPrize) public view returns (uint) {\r\n        uint xsq = (x + 1) * (x + 1);\r\n        uint xq = xsq * xsq;\r\n        uint xspt = xq * xq;\r\n        return (xspt * xspt * maxPrize) / calcModulo(fMax);\r\n    }\r\n\r\n    function prizeFunctionName() public view returns (string) {\r\n        return \"E16x\";\r\n    }\r\n} \r\n\r\n\r\ncontract BalanceSharePrizeContract is IBalanceSharePrizeContract, ICommonGame, IMinMaxPrize, IBalanceInfo {\r\n    uint public minPrize;\r\n    uint public maxPrizeShare;\r\n\r\n    constructor(uint _minPrize, uint _maxPrizeShare) public {\r\n        assert(_minPrize >= 0);\r\n        assert(_maxPrizeShare > 0 && _maxPrizeShare <= 1 ether);\r\n\r\n        minPrize = _minPrize;\r\n        maxPrizeShare = _maxPrizeShare;\r\n    }\r\n\r\n    function getMaxPrizeShare() public view returns (uint) {\r\n        return maxPrizeShare;\r\n    }\r\n\r\n    function alterPrizeShare(uint _maxPrizeShare) admin public {\r\n        require(_maxPrizeShare > 0 && _maxPrizeShare <= 1 ether, \"Prize share should be between 0 and 100%\");\r\n        maxPrizeShare = _maxPrizeShare;\r\n        emit MaxPrizeShareAltered(maxPrizeShare);\r\n    }\r\n\r\n    function alterMinPrize(uint _minPrize) admin public {\r\n        minPrize = _minPrize;\r\n        emit MinPrizeAltered(minPrize);\r\n    }\r\n\r\n    function alterMaxPrize(uint) admin public {\r\n    }\r\n\r\n    function getMaxPrize() public view returns(uint) {\r\n        return (availableBalance() * maxPrizeShare) / (1 ether);        \r\n    }\r\n\r\n    function getWholePrize() public view returns(uint) {\r\n        return availableBalance();\r\n    }\r\n\r\n    function getMinPrize() public view returns(uint) {\r\n        return minPrize;\r\n    }\r\n}\r\n\r\n\r\ncontract PrizeLibrary is IPrizeLibrary, IFunctionPrize {\r\n    constructor() public {}\r\n\r\n    function prizeName() public view returns (string) {\r\n        return prizeFunctionName();\r\n    }\r\n\r\n    function calculatePrize(uint number, uint minPrize, uint maxPrize) public view returns(uint) {\r\n        uint prize = calcPrizeX(number % totalVariants(), totalVariants(), maxPrize);\r\n        uint minP = minPrize;\r\n        uint maxP = maxPrize;\r\n\r\n        // a weird situation, but happens when we run out of balance\r\n        if (maxP < minP) {\r\n            return maxP;\r\n        } else if (prize < minP) {\r\n            return minP;\r\n        } else {\r\n            return prize;\r\n        }\r\n    }\r\n}\r\n\r\ncontract CommonGame is ICommonGame {\r\n    address public gameAdmin;\r\n    uint public blocks2Finish;\r\n    uint internal totalV;\r\n    uint internal sm_reserved;\r\n    bool internal finishing;\r\n    uint internal finishingBlock;\r\n    bool internal autoCreation;\r\n    bool internal autoCreationAfterOwn;\r\n    bool internal transferInteractions;\r\n    bool internal startMinPrizes;\r\n    bool internal profitedGames;\r\n\r\n\r\n    constructor(address _gameAdmin) public {\r\n        assert(_gameAdmin != 0);\r\n        \r\n        gameAdmin = _gameAdmin;\r\n        blocks2Finish = 50000;\r\n        totalV = 1000;\r\n        autoCreation = true;\r\n        autoCreationAfterOwn = true;\r\n        transferInteractions = false;\r\n        startMinPrizes = false;\r\n        profitedGames = false;\r\n    }\r\n\r\n    function getGameAdmin() public view returns (address) {\r\n        return gameAdmin;\r\n    }\r\n\r\n    function gameFinished() public view returns(bool) {\r\n        return gameFinishing() && gameFinishedBlock() < block.number;\r\n    }\r\n\r\n    // true if the game is finishing\r\n    function gameFinishing() public view returns(bool) {\r\n        return finishing;\r\n    }\r\n\r\n    // stops the game\r\n    function stopGame() admin public {\r\n        stopGameInternal(blocks2Finish);\r\n    }\r\n\r\n    function totalVariants() public view returns(uint) {\r\n        return totalV;\r\n    }\r\n\r\n    function alterTotalVariants(uint _newVariants) admin public {\r\n        totalV = _newVariants;\r\n        emit TotalVariantsChanged(totalV);\r\n    }\r\n\r\n    function stopGameInternal(uint blocks2add) internal {\r\n        require(!finishing);\r\n\r\n        finishing = true;\r\n        // about one month for finishing\r\n        finishingBlock = block.number + blocks2add;\r\n        emit GameStopInitiated(finishingBlock);\r\n    }\r\n\r\n\r\n    function gameFinishedBlock() public view returns(uint) {\r\n        return finishingBlock;\r\n    }\r\n\r\n    function autoCreationAllowed() public view returns(bool) {\r\n        return autoCreation;\r\n    }\r\n\r\n    function setAutoCreation(bool allowed) public admin {\r\n        autoCreation = allowed;\r\n        emit AutoCreationChanged(autoCreation);\r\n    }\r\n\r\n    function autoCreationAfterOwnAllowed() public view returns(bool) {\r\n        return autoCreationAfterOwn;\r\n    }\r\n\r\n    function setAutoCreationAfterOwn(bool allowed) public admin {\r\n        autoCreationAfterOwn = allowed;\r\n        emit AutoCreationAfterOwnChanged(autoCreation);\r\n    }\r\n\r\n\r\n    function transferInteractionsAllowed() public view returns(bool) {\r\n        return transferInteractions;\r\n    }\r\n    function setTransferInteractions(bool allowed) public admin {\r\n        transferInteractions = allowed;\r\n        emit TransferInteractionsChanged(transferInteractions);\r\n    }\r\n\r\n    function startOnlyMinPrizes() public view returns (bool) {\r\n        return startMinPrizes;\r\n    }\r\n\r\n    function setStartOnlyMinPrizes(bool minPrizes) public admin {\r\n        startMinPrizes = minPrizes;\r\n        emit StartOnlyMinPrizesChanged(startMinPrizes);\r\n    }\r\n\r\n    function startProfitedGamesAllowed() public view returns (bool) {\r\n        return profitedGames;\r\n    }\r\n\r\n    function setStartProfitedGamesAllowed(bool games) public admin {\r\n        profitedGames = games;\r\n        emit StartProfitedGamesAllowedChanged(profitedGames);\r\n    }\r\n}\r\n\r\ncontract BalanceInfo is IBalanceInfo {\r\n    uint internal sm_reserved;\r\n\r\n    function totalBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    } \r\n\r\n    function reservedBalance() public view returns(uint) {\r\n        return sm_reserved;\r\n    }\r\n\r\n    function availableBalance() public view returns(uint) {\r\n        // always positive ok\r\n        if (totalBalance() >= sm_reserved) {\r\n            return totalBalance() - sm_reserved;\r\n        } else {\r\n            return 0;\r\n        }\r\n    } \r\n\r\n    function reserveBalance(uint value) internal returns (uint) {\r\n        uint balance = availableBalance();\r\n\r\n        // there is not enough ether to reserve for this contract\r\n        if (value > balance) {\r\n            sm_reserved += balance;\r\n            emit BalanceReserved(balance, sm_reserved);\r\n            return balance;\r\n        } else {\r\n            sm_reserved += value;\r\n            emit BalanceReserved(value, sm_reserved);\r\n            return value;\r\n        }\r\n    }\r\n\r\n    function freeBalance(uint value) internal returns(uint) {\r\n        uint toReturn;\r\n\r\n        if (value > sm_reserved) {\r\n            toReturn = sm_reserved;\r\n            sm_reserved = 0;\r\n        } else {\r\n            // always positive ok\r\n            toReturn = value;\r\n            sm_reserved -= value;\r\n        }\r\n\r\n        emit BalanceFreed(toReturn, sm_reserved);\r\n        return toReturn;\r\n    }\r\n}\r\n\r\n\r\ncontract IMoneyContract is ICommonGame, IBalanceInfo {\r\n    function profitValue() public view returns(uint);\r\n    function getDeveloperProfit() public view returns(uint);\r\n    function getCharityProfit() public view returns(uint);\r\n    function getFinalProfit() public view returns(uint);\r\n\r\n    function getLastBalance() public view returns(uint);\r\n    function getLastProfitSync() public view returns(uint);\r\n\r\n    function getDeveloperShare() public view returns(uint);\r\n    function getCharityShare() public view returns(uint);\r\n    function getFinalShare() public view returns(uint);\r\n\r\n    // well anyone can deposit to the contract for the experiment\r\n    function depositToBank() public payable;\r\n\r\n    function canUpdatePayout() public view returns(bool);\r\n    function recalculatePayoutValue() public;\r\n    function withdrawPayout() public;\r\n    function withdraw2Address(address addr) public;\r\n    function finishedWithdrawalTime() public view returns(bool);\r\n    function finishedWithdrawalBlock() public view returns(uint);\r\n\r\n    function getTotalPayoutValue() public view returns(uint);\r\n    function getPayoutValue(address addr) public view returns(uint);\r\n    function getPayoutValueSender() public view returns(uint);\r\n\r\n    // adds the developer to the contract\r\n    function addDeveloper(address dev, string name, string url) public;\r\n    function getDeveloperName(address dev) public view returns (string);\r\n    function getDeveloperUrl(address dev) public view returns (string);\r\n    function developersAdded() public view returns (bool);\r\n\r\n    // adds the charity to the contract\r\n    function addCharity(address charity, string name, string url) public;\r\n    function getCharityName(address charity) public view returns (string);\r\n    function getCharityUrl(address charity) public view returns (string);\r\n\r\n    function dedicatedCharitySet() public view returns(bool);\r\n    function setDedicatedCharityForNextRound(address charity) public;\r\n    function dedicatedCharityAddress() public view returns(address);\r\n\r\n    event MoneyDeposited(address indexed sender, uint value);\r\n    event MoneyWithdrawn(address indexed reciever, uint value);\r\n\r\n    event ProfitRecalculated(bool gameFinish, uint developerProfit, uint charityProfit, uint finalProfit, \r\n    uint developerCount, uint charityCount, bool dedicated, address dedicatedCharity);\r\n\r\n    event CharityAdded(address charity, string name, string url);\r\n    event DedicatedCharitySelected(address charity);\r\n\r\n    event DeveloperAdded(address developer, string name, string url);\r\n}\r\n\r\ncontract MoneyContract is IMoneyContract {\r\n    uint public sm_developerShare; // the amount of profit, that is given to the developers\r\n    uint public sm_charityShare; // the amount of profit, that is given to the charity\r\n    uint public sm_finalShare;\r\n\r\n    ProfitInfo[] public sm_developers; // the developers, that recieve the share\r\n    uint public sm_maxDevelopers;\r\n    \r\n    ProfitInfo[] public sm_charity; // the charity that recieve the share\r\n    mapping(address => bool) public sm_reciever; // the values that can be withdrawn\r\n    mapping(address => uint) public sm_profits; // the values that can be withdrawn\r\n    address public sm_dedicatedCharity; // the charity that received all the profit\r\n\r\n\r\n    uint public sm_lastProfitSync; // last time the profits were calculated\r\n    uint public sm_profitSyncLength; // the length of the synchronization period for profits\r\n    uint public sm_afterFinishLength; // the length of period, when the parties can withdraw their money\r\n    uint public sm_lastBalance; // the last balance \r\n    uint internal sm_reserved; // the total money reserved for prizes and payouts\r\n\r\n    struct ProfitInfo {\r\n        address receiver; \r\n        string description;\r\n        string url;\r\n    }\r\n\r\n    constructor(uint _developerShare, uint _maxDevelopers, \r\n            uint _charityShare, uint _finalShare, uint _profitSyncLength, uint _afterFinishLength) public {\r\n        assert(_developerShare >= 0 && _developerShare <= 1 ether);\r\n        assert(_charityShare >= 0 && _charityShare <= 1 ether);\r\n        assert(_finalShare >= 0 && _finalShare <= 1 ether);\r\n        // assert(_profitSyncLength > 0 && _profitSyncLength <= 200000);\r\n        // assert(_afterFinishLength >= 200000);\r\n\r\n        sm_developerShare = _developerShare;\r\n        sm_maxDevelopers = _maxDevelopers;\r\n        sm_charityShare = _charityShare;\r\n        sm_finalShare = _finalShare;\r\n        sm_profitSyncLength = _profitSyncLength; // 180000 is actually about a month\r\n        sm_afterFinishLength = _afterFinishLength;\r\n        sm_lastProfitSync = block.number;\r\n    }\r\n\r\n    function getDeveloperShare() public view returns(uint) {\r\n        return sm_developerShare;\r\n    }\r\n\r\n    function getCharityShare() public view returns(uint) {\r\n        return sm_charityShare;\r\n    }\r\n\r\n    function getFinalShare() public view returns(uint) {\r\n        return sm_finalShare;\r\n    }\r\n\r\n    function getLastBalance() public view returns(uint) {\r\n        return sm_lastBalance;\r\n    }\r\n\r\n    function getLastProfitSync() public view returns(uint) {\r\n        return sm_lastProfitSync;\r\n    }\r\n\r\n    function canUpdatePayout() public view returns(bool) {\r\n        return developersAdded() && (gameFinished() || block.number >= sm_profitSyncLength + sm_lastProfitSync);\r\n    }\r\n\r\n    function recalculatePayoutValue() public {\r\n        if (canUpdatePayout()) {\r\n            recalculatePayoutValueInternal();\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function recalculatePayoutValueInternal() internal {\r\n        uint d_profit = 0;\r\n        uint c_profit = 0;\r\n        uint o_profit = 0;\r\n        bool dedicated = dedicatedCharitySet();\r\n        address dedicated_charity = sm_dedicatedCharity;\r\n\r\n        if (gameFinished()) {\r\n            o_profit = getFinalProfit();\r\n            // always positive\r\n            c_profit = availableBalance() - o_profit;\r\n            distribute(o_profit, sm_developers);\r\n            distribute(c_profit, sm_charity);\r\n        } else {\r\n            d_profit = getDeveloperProfit();\r\n            c_profit = getCharityProfit();\r\n            distribute(d_profit, sm_developers);\r\n\r\n            if (dedicated) {\r\n                distributeTo(c_profit, sm_dedicatedCharity);\r\n            } else {\r\n                distribute(c_profit, sm_charity);\r\n            }\r\n\r\n            sm_lastProfitSync = block.number;\r\n            \r\n            // clear the dedicated charity\r\n            sm_dedicatedCharity = address(0);\r\n        }\r\n\r\n        sm_lastBalance = availableBalance();\r\n        emit ProfitRecalculated(gameFinished(), d_profit, c_profit, o_profit, \r\n            sm_developers.length, sm_charity.length, dedicated, dedicated_charity);\r\n    }\r\n\r\n    function addDeveloper(address dev, string name, string url) admin public {\r\n        // no one should be added twice\r\n        require(!sm_reciever[dev]);\r\n        require(!gameFinished());\r\n        require(sm_developers.length < sm_maxDevelopers);\r\n\r\n        sm_developers.push(ProfitInfo(dev, name, url));\r\n        sm_reciever[dev] = true;\r\n        emit DeveloperAdded(dev, name, url);\r\n    }\r\n\r\n    function developersAdded() public view returns (bool) {\r\n        return sm_maxDevelopers == sm_developers.length;\r\n    }\r\n\r\n    function getDeveloperName(address dev) public view returns (string) {\r\n        for (uint i = 0; i < sm_developers.length; i++) {\r\n            if (sm_developers[i].receiver == dev) return sm_developers[i].description;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n    function getDeveloperUrl(address dev) public view returns (string) {\r\n        for (uint i = 0; i < sm_developers.length; i++) {\r\n            if (sm_developers[i].receiver == dev) return sm_developers[i].url;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    function addCharity(address charity, string name, string url) admin public {\r\n        // no one should be added twice\r\n        require(!sm_reciever[charity]);\r\n        require(!gameFinished());\r\n\r\n        sm_charity.push(ProfitInfo(charity, name, url));\r\n        sm_reciever[charity] = true;\r\n        emit CharityAdded(charity, name, url);\r\n    }\r\n\r\n    function getCharityName(address charity) public view returns (string) {\r\n        for (uint i = 0; i < sm_charity.length; i++) {\r\n            if (sm_charity[i].receiver == charity) return sm_charity[i].description;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n    function getCharityUrl(address charity) public view returns (string) {\r\n        for (uint i = 0; i < sm_charity.length; i++) {\r\n            if (sm_charity[i].receiver == charity) return sm_charity[i].url;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n\r\n    function charityIndex(address charity) view internal returns(int) {\r\n        for (uint i = 0; i < sm_charity.length; i++) {\r\n            if (sm_charity[i].receiver == charity) {\r\n                return int(i);\r\n            }\r\n        }\r\n        \r\n        return -1;\r\n    }\r\n\r\n    function charityExists(address charity) view internal returns(bool) {\r\n        return charityIndex(charity) >= 0;\r\n    }\r\n\r\n    function setDedicatedCharityForNextRound(address charity) admin public {\r\n        require(charityExists(charity));\r\n        // the charity should not be set up\r\n        require(sm_dedicatedCharity == address(0));\r\n        sm_dedicatedCharity = charity;\r\n        emit DedicatedCharitySelected(sm_dedicatedCharity);\r\n    }\r\n\r\n    function dedicatedCharitySet() public view returns(bool) {\r\n        return sm_dedicatedCharity != address(0);\r\n    }\r\n\r\n    function dedicatedCharityAddress() public view returns(address) {\r\n        return sm_dedicatedCharity;\r\n    }\r\n    \r\n    function depositToBank() public payable {\r\n        require(!gameFinished());\r\n        require(msg.value > 0);\r\n        // the profit should not be modified by deposits\r\n        sm_lastBalance += msg.value;\r\n        emit MoneyDeposited(msg.sender, msg.value);\r\n    }\r\n\r\n    function finishedWithdrawalTime() public view returns(bool) {\r\n        return gameFinished() && (block.number > finishedWithdrawalBlock());\r\n    }\r\n\r\n    function finishedWithdrawalBlock() public view returns(uint) {\r\n        if (gameFinished()) {\r\n            return gameFinishedBlock() + sm_afterFinishLength;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getTotalPayoutValue() public view returns(uint) {\r\n        uint payout = 0;\r\n\r\n        for (uint i = 0; i < sm_developers.length; i++) {\r\n            payout += sm_profits[sm_developers[i].receiver];\r\n        }\r\n        for (i = 0; i < sm_charity.length; i++) {\r\n            payout += sm_profits[sm_charity[i].receiver];\r\n        }\r\n\r\n        return payout;\r\n    }\r\n\r\n    function getPayoutValue(address addr) public view returns(uint) {\r\n        return sm_profits[addr];\r\n    }\r\n\r\n    function getPayoutValueSender() public view returns(uint) {\r\n        return getPayoutValue(msg.sender);\r\n    }\r\n\r\n    function withdrawPayout() public {\r\n        // after the withdrawal time is finished, admin takes all the money\r\n        if (finishedWithdrawalTime() && msg.sender == getGameAdmin()) {\r\n            getGameAdmin().transfer(address(this).balance);\r\n        } else {\r\n            withdraw2Address(msg.sender);\r\n        }\r\n    }\r\n\r\n    function withdraw2Address(address addr) public {\r\n        require(sm_profits[addr] > 0);\r\n\r\n        uint value = sm_profits[addr];\r\n        sm_profits[addr] = 0;\r\n\r\n        freeBalance(value);\r\n        addr.transfer(value);\r\n        emit MoneyWithdrawn(addr, value);\r\n    }\r\n\r\n    function profitValue() public view returns(uint) {\r\n        if (availableBalance() >= sm_lastBalance) {\r\n            // always positive ok\r\n            return availableBalance() - sm_lastBalance;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getDeveloperProfit() public view returns(uint) {\r\n        return (profitValue() * sm_developerShare) / (1 ether);\r\n    }\r\n\r\n    function getCharityProfit() public view returns(uint) {\r\n        return (profitValue() * sm_charityShare) / (1 ether);\r\n    }\r\n\r\n    function getFinalProfit() public view returns(uint) {\r\n        // owner profit is calculated only on final state of contract\r\n        return (availableBalance() * sm_finalShare) / (1 ether);\r\n    }\r\n\r\n    function distributeTo(uint value, address recv) internal {\r\n        sm_profits[recv] += value;\r\n        reserveBalance(value);\r\n    }\r\n\r\n    function distribute(uint profit, ProfitInfo[] recvs) internal {\r\n        if (recvs.length > 0) {\r\n            uint each = profit / recvs.length;\r\n            uint total = 0;\r\n            for (uint i = 0; i < recvs.length; i++) {\r\n                if (i == recvs.length - 1) {\r\n                    distributeTo(profit - total, recvs[i].receiver);\r\n                } else {\r\n                    distributeTo(each, recvs[i].receiver);\r\n                    total += each;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract ISignedContractId {\r\n    function getId() public view returns(string);\r\n    function getVersion() public view returns(uint);\r\n    function getIdHash() public view returns(bytes32);\r\n    function getDataHash() public view returns(bytes32);\r\n\r\n    function getBytes() public view returns(bytes);\r\n\r\n    // signs the contract with the specified v r and s\r\n    function sign(uint8 v, bytes32 r, bytes32 s) public;\r\n    function getSignature() public view returns(uint8, bytes32, bytes32);\r\n    function isSigned() public view returns(bool);\r\n}\r\n\r\n\r\ncontract SignedContractId is ISignedContractId {\r\n    string public contract_id;\r\n    uint public contract_version;\r\n    bytes public contract_signature;\r\n    address public info_address;\r\n    address public info_admin;\r\n    uint8 public v; \r\n    bytes32 public r; \r\n    bytes32 public s;\r\n    bool public signed;\r\n\r\n    constructor(string id, uint version, address info, address admin) public {\r\n        contract_id = id;\r\n        contract_version = version;\r\n        info_address = info;\r\n        info_admin = admin;\r\n        signed = false;\r\n    }\r\n    function getId() public view returns(string) {\r\n        return contract_id;\r\n    }\r\n    function getVersion() public view returns(uint) {\r\n        return contract_version;\r\n    }\r\n    function getIdHash() public view returns(bytes32) {\r\n        return keccak256(abi.encodePacked(contract_id));\r\n    }\r\n    function getBytes() public view returns(bytes) {\r\n        return abi.encodePacked(contract_id);\r\n    }\r\n\r\n\r\n    function getDataHash() public view returns(bytes32) {\r\n        return keccak256(abi.encodePacked(getIdHash(), getVersion(), info_address, address(this)));\r\n    }\r\n\r\n    function sign(uint8 v_, bytes32 r_, bytes32 s_) public {\r\n        require(!signed);\r\n        bytes32 hsh = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", getDataHash()));\r\n        require(info_admin == ecrecover(hsh, v_, r_, s_));\r\n        v = v_;\r\n        r = r_;\r\n        s = s_;\r\n        signed = true;\r\n    }\r\n\r\n    function getSignature() public view returns(uint8, bytes32, bytes32) {\r\n        return (v, r, s);\r\n    }\r\n\r\n    function isSigned() public view returns(bool) {\r\n        return signed;\r\n    }\r\n}\r\n\r\n\r\ncontract IGameLengthLibrary is ICommonGame {\r\n    function getMinGameLength() public view returns(uint);\r\n    function getMaxGameLength() public view returns(uint);\r\n    function getMinGameAddon() public view returns(uint);\r\n    function getMaxGameAddon() public view returns(uint);\r\n\r\n    function calcGameLength(uint number) public view returns (uint);\r\n    function calcGameAddon(uint number) public view returns (uint);\r\n\r\n    event MinGameLengthAltered(uint newValue);\r\n    event MaxGameLengthAltered(uint newValue);\r\n    event AddonAltered(uint newValue);\r\n\r\n    function alterMaxGameLength(uint _maxGameLength) public;\r\n    function alterMinGameLength(uint _minGameLength) public;\r\n    function alterAddon(uint _addon) public;\r\n}\r\n\r\ncontract LinearGameLibrary is IGameLengthLibrary {\r\n    uint public minLength;\r\n    uint public maxLength;\r\n    uint public addon;\r\n\r\n    constructor(uint _minLength, uint _maxLength, uint _addon) public {\r\n        assert(_minLength <= _maxLength);\r\n\r\n        minLength = _minLength;\r\n        maxLength = _maxLength;\r\n        addon = _addon;\r\n    }\r\n\r\n    function calcGameLength(uint number) public view returns (uint) {\r\n        // always positive ok\r\n        return minLength + ((maxLength - minLength) * ((number % totalVariants()) + 1)) / totalVariants();\r\n    }\r\n    \r\n    function calcGameAddon(uint) public view returns (uint) {\r\n        return addon;\r\n    }\r\n\r\n    function getMinGameLength() public view returns(uint) {\r\n        return minLength;\r\n    }\r\n\r\n    function getMaxGameLength() public view returns(uint) {\r\n        return maxLength;\r\n    }\r\n\r\n    function getMinGameAddon() public view returns(uint) {\r\n        return addon;\r\n    }\r\n\r\n    function getMaxGameAddon() public view returns(uint) {\r\n        return addon;\r\n    }\r\n     \r\n    function alterMaxGameLength(uint _maxGameLength) public admin {\r\n        require(_maxGameLength > 0, \"Max game length should be not zero\");\r\n        require(_maxGameLength >= minLength, \"Max game length should be not more than min length\");\r\n        maxLength = _maxGameLength;\r\n        emit MaxGameLengthAltered(maxLength);\r\n    }\r\n\r\n    function alterMinGameLength(uint _minGameLength) public admin {\r\n        require(_minGameLength > 0, \"Min game length should be not zero\");\r\n        require(_minGameLength <= maxLength, \"Min game length should be less than max length\");\r\n        minLength = _minGameLength;\r\n        emit MinGameLengthAltered(minLength);\r\n    }\r\n\r\n    function alterAddon(uint _addon) public admin {\r\n        addon = _addon;\r\n        emit AddonAltered(addon);\r\n    }\r\n}\r\n \r\ncontract IGameManager {\r\n    function startGameInternal(uint gameId, uint length, uint addOn, uint prize) internal;\r\n    function betInGameInternal(uint gameId, uint bet) internal;\r\n\r\n    function withdrawPrize(uint gameId) public;\r\n    function withdrawPrizeInternal(uint gameId, uint additional) internal;\r\n\r\n    function gameExists(uint gameId) public view returns (bool);\r\n    function finishedGame(uint gameId) public view returns(bool);\r\n    function getWinner(uint gameId) public view returns(address);\r\n    function getBet(uint gameId, address better) public view returns(uint);\r\n    function payedOut(uint gameId) public view returns(bool);\r\n    function prize(uint gameId) public view returns(uint);\r\n    function endsIn(uint gameId) public view returns(uint);\r\n    function lastBetBlock(uint gameId) public view returns(uint);\r\n\r\n    function addonEndsIn(uint gameId) public view returns(uint);\r\n    function totalBets(uint gameId) public view returns(uint);\r\n    function gameProfited(uint gameId) public view returns(bool);\r\n\r\n    event GameStarted(uint indexed gameId, address indexed starter, uint blockNumber, uint finishBlock, uint prize);\r\n    event GameBet(uint indexed gameId, address indexed bidder, address indexed winner, uint highestBet, uint finishBlock, uint value);\r\n    event GamePrizeTaken(uint indexed gameId, address indexed winner);\r\n}\r\n\r\n\r\ncontract GameManager is IBalanceInfo, IGameManager {\r\n    // all of the games \r\n    mapping (uint => GameInfo) games;\r\n    // all of the bets in the games  \r\n    mapping (uint => mapping (address => uint)) bets;\r\n\r\n    struct GameInfo {\r\n        address highestBidder; // the person who made the highest bet in this game\r\n        address starter; // the person who started this game\r\n        uint blockFinish; // the block when the game will be finished\r\n        uint prize; // the prize, that will be awarded to the winner\r\n        uint totalBets; // the amount of total bets to this game\r\n        bool payedOut; // true, if the user has taken back his deposit\r\n        uint lastBetBlock;\r\n        uint addOn;\r\n    }\r\n\r\n    function startGameInternal(uint gameId, uint length, uint addOn, uint prize) internal {\r\n        // there was no other game started\r\n        require(!gameExists(gameId));\r\n        \r\n        // the prize should be present\r\n        require(prize > 0);\r\n\r\n        // the length should be nonzero\r\n        require(length > 0);\r\n\r\n        // calculate the prize for the game\r\n        games[gameId].starter = msg.sender;\r\n        games[gameId].prize = prize;\r\n\r\n        // reserve the balance for this prize\r\n        reserveBalance(prize);\r\n\r\n        // the finishing block of the game\r\n        // important question is that the actual start block of the game is the current number, and block passed is used by id\r\n        games[gameId].blockFinish = block.number + length - 1;\r\n        games[gameId].addOn = addOn;\r\n\r\n        // generate an event\r\n        emit GameStarted(gameId, msg.sender, block.number, games[gameId].blockFinish, prize);\r\n    }\r\n\r\n    /**\r\n    Checks that this user can start round (due to nonce issues)\r\n     */\r\n    function betInGameInternal(uint gameId, uint bet) internal {\r\n        require(bet > 0, \"Bet should be not zero\");\r\n\r\n        // the game was started\r\n        require(gameExists(gameId), \"No such game\");\r\n        require(!finishedGame(gameId), \"Game is finished\");\r\n        uint newBet = bets[gameId][msg.sender] + bet;\r\n        \r\n        // update the highest bidder\r\n        if (newBet > bets[gameId][games[gameId].highestBidder]) {\r\n            games[gameId].highestBidder = msg.sender;\r\n            games[gameId].lastBetBlock = block.number;\r\n        } \r\n\r\n        bets[gameId][msg.sender] = newBet;\r\n        // update the total bets\r\n        games[gameId].totalBets += bet;\r\n        emit GameBet(gameId, msg.sender, games[gameId].highestBidder, bets[gameId][games[gameId].highestBidder], addonEndsIn(gameId), newBet);\r\n    }\r\n\r\n    function withdrawPrize(uint gameId) public {\r\n        withdrawPrizeInternal(gameId, 0);\r\n    }\r\n\r\n    function withdrawPrizeInternal(uint gameId, uint additional) internal {\r\n        require(finishedGame(gameId), \"Game not finished\");\r\n        require(msg.sender == games[gameId].highestBidder, \"You are not the winner\");\r\n        require(!games[gameId].payedOut, \"Game already payed\");\r\n        games[gameId].payedOut = true;\r\n\r\n        // the invariant stays the same\r\n        freeBalance(games[gameId].prize);\r\n        msg.sender.transfer(games[gameId].prize + additional);\r\n        emit GamePrizeTaken(gameId, msg.sender);\r\n    }\r\n\r\n\r\n    function gameExists(uint gameId) public view returns (bool) {\r\n        return games[gameId].blockFinish != 0;\r\n    }\r\n\r\n    function getWinner(uint gameId) public view returns(address) {\r\n        return games[gameId].highestBidder;\r\n    }\r\n\r\n    function finishedGame(uint gameId) public view returns(bool) {\r\n        if (!gameExists(gameId)) \r\n            return false;\r\n        return addonEndsIn(gameId) < block.number;\r\n    }\r\n\r\n    // returns that the game is payed out\r\n    function payedOut(uint gameId) public view returns(bool) {\r\n        return games[gameId].payedOut;\r\n    }\r\n\r\n    // returns the prize for this game\r\n    function prize(uint gameId) public view returns(uint) {\r\n        return games[gameId].prize;\r\n    }\r\n\r\n    function lastBetBlock(uint gameId) public view returns(uint) {\r\n        return games[gameId].lastBetBlock;\r\n    }\r\n\r\n    function getBet(uint gameId, address better) public view returns(uint) {\r\n        return bets[gameId][better];\r\n    }\r\n\r\n    // returns the block number, when the game is finished\r\n    function endsIn(uint gameId) public view returns(uint) {\r\n        return games[gameId].blockFinish;\r\n    }\r\n\r\n    function addonEndsIn(uint gameId) public view returns(uint) {\r\n        uint addonB = games[gameId].lastBetBlock + games[gameId].addOn;\r\n        if (addonB >= games[gameId].blockFinish) {\r\n            return addonB;\r\n        } else {\r\n            return games[gameId].blockFinish;\r\n        }\r\n    }\r\n\r\n    // returns the total amount of bets in the game\r\n    function totalBets(uint gameId) public view returns(uint) {\r\n        return games[gameId].totalBets;\r\n    }\r\n\r\n    function gameProfited(uint gameId) public view returns(bool) {\r\n        return games[gameId].totalBets >= games[gameId].prize;\r\n    }\r\n}\r\ncontract StartGame is IStartGame, ICommonGame, IPrizeLibrary, IMinMaxPrize, IGameLengthLibrary, IGameManager, IBlockRandomLibrary {\r\n    bool internal previousCalcRegular;\r\n\r\n    constructor(uint _repeatBlock, uint _addonBlock) public\r\n    {\r\n        assert(_repeatBlock <= 250);\r\n        repeatBlock = _repeatBlock;\r\n        addonBlock = _addonBlock;\r\n        calcNextGameId();\r\n        defaultId = nextGameId;\r\n    }\r\n\r\n    // The manual ones have odd ids\r\n    function startOwnFixed(uint gameId, uint length, uint addon, uint prize) public admin payable {\r\n        require(msg.value > 0);\r\n        require(!gameExists(gameId));\r\n        require(gameId % 2 == 1);\r\n\r\n        // the game length can be of any value, but for our security it should not be too small\r\n        require(length >= getMinGameLength());\r\n        // addon should just be not too large\r\n        // the prize should be in the desired ratio\r\n        require(prize >= getMinPrize() && prize <= getWholePrize());\r\n\r\n        updateRandom();\r\n        startGameInternal(gameId, length, addon, prize);\r\n        profitedBet(gameId);\r\n    }\r\n\r\n    function randomValueWithMinPrize() internal view returns(uint) {\r\n        if (!startOnlyMinPrizes() && isRandomAvailable()) {\r\n            return getRandomValue();\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function startGameDetermine(uint gameId) internal {\r\n        uint random = randomValueWithMinPrize();\r\n        startGameInternal(gameId, calcGameLength(random), calcGameAddon(random), calculatePrize(random, getMinPrize(), getMaxPrize()));\r\n    }\r\n\r\n    function betInGame(uint gameId) public payable {\r\n        require(msg.value > 0, \"Bet should be not zero\");\r\n        updateRandom();\r\n\r\n        if (!gameExists(gameId)) {\r\n            require(canStartGame(), \"Game cannot be started\");\r\n            // well creation should be allowed\r\n            // one can only launch the start game with the possible game id\r\n            require(startGameId() == gameId, \"No such scheduled game\");\r\n            // can only be started after the corresponding block has passed\r\n\r\n            startGameDetermine(gameId);\r\n            updateDefaultGame(gameId);\r\n            calcNextGameId();\r\n        }\r\n\r\n        profitedBet(gameId);\r\n    }\r\n\r\n    function profitedBet(uint gameId) internal {\r\n        bool profited = gameProfited(gameId);\r\n        betInGameInternal(gameId, msg.value);\r\n\r\n        // the profited status changed\r\n        // the own games are not counted\r\n        if (profited != gameProfited(gameId)) {\r\n            if (startProfitedGamesAllowed() && (gameId % 2 == 0 || autoCreationAfterOwnAllowed())) {\r\n                createFastGamesCount++;\r\n                if (!isRandomAvailable() && previousCalcRegular && createFastGamesCount == 1) {\r\n                    calcNextGameId();\r\n                }\r\n                emit FastGamesChanged(createFastGamesCount);\r\n            }\r\n            profitedCount++;\r\n            emit GameProfitedEvent(gameId);\r\n        }\r\n    }\r\n        \r\n    uint public repeatBlock;\r\n    uint public addonBlock;\r\n\r\n    function getRepeatBlock() public view returns(uint) {\r\n        return repeatBlock;\r\n    }\r\n    function getAddonBlock() public view returns(uint) {\r\n        return addonBlock;\r\n    }\r\n\r\n    function alterRepeatBlock(uint _repeatBlock) admin public {\r\n        assert(_repeatBlock < 250);\r\n        repeatBlock = _repeatBlock;\r\n        emit RepeatBlockAltered(repeatBlock);\r\n    }\r\n\r\n    function alterAddonBlock(uint _addonBlock) admin public {\r\n        addonBlock = _addonBlock;\r\n        emit RepeatAddonBlockAltered(addonBlock);\r\n    }\r\n\r\n    uint internal nextGameId;\r\n    uint internal defaultId;\r\n    uint internal profitedCount;\r\n    uint internal createFastGamesCount;\r\n\r\n    function getProfitedCount() public view returns(uint) {\r\n        return profitedCount;\r\n    }\r\n\r\n    function getCreateFastGamesCount() public view returns(uint) {\r\n        return createFastGamesCount;\r\n    }\r\n\r\n    function setCreateFastGamesCount(uint count) public admin {\r\n        createFastGamesCount = count;\r\n        emit FastGamesChanged(createFastGamesCount);\r\n    }\r\n\r\n    function recalcNextGameId() public admin {\r\n        if (!isRandomAvailable()) {\r\n            calcNextGameId();\r\n        } else {\r\n            revert(\"You cannot recalculate, unless the prize has expired\");\r\n        }\r\n    }\r\n\r\n    function calcNextGameId() internal {\r\n        uint ngi;\r\n\r\n        previousCalcRegular = createFastGamesCount == 0;\r\n\r\n        if (createFastGamesCount > 0) {\r\n            ngi = block.number + addonBlock;\r\n            createFastGamesCount--;\r\n        } else {\r\n            // always positive. ok\r\n            ngi = block.number + (repeatBlock - block.number % repeatBlock);\r\n        }\r\n\r\n        // The main idea is that the automatic tourneys have even ids.\r\n        // The manual ones have odd ids\r\n        if (ngi % 2 == 1) {\r\n            ngi++;\r\n        }\r\n\r\n        nextGameId = ngi;\r\n        setRandomBlock(nextGameId);\r\n        updateDefaultGame(nextGameId);\r\n        emit NextGameIdCalculated(nextGameId);\r\n    }\r\n\r\n    function canStartGame() public view returns(bool) {\r\n        return randomBlockPassed() && creationAllowed();\r\n    }\r\n\r\n    function startGameId() public view returns(uint) {\r\n        return nextGameId;\r\n    }\r\n\r\n    function startPrizeValue() public view returns(uint) {\r\n        return calculatePrize(randomValueWithMinPrize(), getMinPrize(), getMaxPrize());\r\n    }\r\n\r\n    function startGameLength() public view returns(uint) {\r\n        return calcGameLength(randomValueWithMinPrize());\r\n    }\r\n\r\n    function startGameAddon() public view returns(uint) {\r\n        return calcGameAddon(randomValueWithMinPrize());\r\n    }\r\n\r\n    function getStartGameStatus() public view returns(bool, uint, uint, uint, uint) {\r\n        uint random = randomValueWithMinPrize();\r\n        return (\r\n            canStartGame(), \r\n            nextGameId, \r\n            calculatePrize(random, getMinPrize(), getMaxPrize()),\r\n            calcGameLength(random),\r\n            calcGameAddon(random));\r\n    }\r\n\r\n    function updateDefaultGame(uint gameId) internal {\r\n        if (finishedGame(defaultId) || !gameExists(defaultId)) {\r\n            defaultId = gameId;\r\n            emit DefaultGameUpdated(defaultId);\r\n        } \r\n    }\r\n\r\n    function defaultGameId() public view returns(uint) {\r\n        if (!finishedGame(defaultId) && gameExists(defaultId)) return defaultId;\r\n        if (canStartGame()) return startGameId();\r\n        return 0;\r\n    }\r\n\r\n    function defaultGameAvailable() public view returns(bool) {\r\n        return !finishedGame(defaultId) && gameExists(defaultId) || canStartGame();\r\n    }\r\n\r\n    mapping (address => uint) transferGames;\r\n\r\n    function getTransferProfitedGame(address participant) public view returns(uint) {\r\n        if (finishedGame(transferGames[participant]) && getWinner(transferGames[participant]) == participant) {\r\n            return transferGames[participant];\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function getTransferProfitedGame() internal view returns(uint) {\r\n        return getTransferProfitedGame(msg.sender);\r\n    }\r\n\r\n    function processTransfer() internal {\r\n        uint tpg = getTransferProfitedGame();\r\n        // there is no game to withdraw\r\n        if (tpg == 0) {\r\n            if (!finishedGame(defaultId) && gameExists(defaultId)) {\r\n                betInGame(defaultId);\r\n            } else {\r\n                betInGame(startGameId());\r\n            }\r\n            transferGames[msg.sender] = defaultId;\r\n        } else {\r\n            transferGames[msg.sender] = 0;\r\n            withdrawPrizeInternal(tpg, msg.value);\r\n        } \r\n\r\n        emit TransferBet(msg.sender, msg.value);\r\n    }\r\n\r\n    function processTransferInteraction() internal {\r\n        if (transferInteractionsAllowed()) {\r\n            processTransfer();\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n}\r\n\r\ncontract ICharbetto is IMoneyContract, IStartGame, IBalanceSharePrizeContract,\r\n        IBlockRandomLibrary, IMinMaxPrize, IGameLengthLibrary, IGameManager, IFunctionPrize, IPrizeLibrary {\r\n    function recalculatePayoutValueAdmin() public;\r\n    function stopGameFast() public;\r\n}\r\n\r\ncontract Charbetto is CommonGame, BlockRandomLibrary, BalanceInfo, PrizeLibrary, EllipticPrize16x, \r\n        MoneyContract, StartGame, GameManager, LinearGameLibrary, BalanceSharePrizeContract {\r\n    constructor(address _admin) public\r\n        CommonGame(_admin) \r\n        BlockRandomLibrary(250)\r\n        BalanceInfo()\r\n        PrizeLibrary()\r\n        EllipticPrize16x()\r\n        MoneyContract(\r\n            10 finney /*1 percent*/, \r\n            5, /*5 developers at maximum*/\r\n            100 finney /*10 percent*/, \r\n            100 finney /*10 percent*/, \r\n            20000, 200000)\r\n        StartGame(5, 3)  \r\n        GameManager()\r\n        LinearGameLibrary(50, 1000, 3)\r\n        // from one dollar to 1/10 of the prize\r\n        BalanceSharePrizeContract(10 finney, 100 finney)\r\n    {\r\n        // not using alter methods to prevent deployment only from admin acc\r\n        totalV = 1000;\r\n        minLength = 20;\r\n        maxLength = 30;\r\n        transferInteractions = true;\r\n    }\r\n\r\n    //Terrible ugly hack to prevent the balance share contract to calculate the prize in wrong way\r\n    function betInGame(uint gameId) public payable {\r\n        bool exists = gameExists(gameId);\r\n\r\n        if (!exists) {\r\n            reserveBalance(msg.value);\r\n        }\r\n\r\n        super.betInGame(gameId);\r\n\r\n        if (!exists) {\r\n            freeBalance(msg.value);\r\n        }\r\n    }\r\n\r\n\r\n    function isItReallyCharbetto() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // The default fallback function should be specified\r\n    function () payable public {\r\n        processTransferInteraction();\r\n    }\r\n}\r\n\r\ncontract ISignedCharbetto is ISignedContractId, ICharbetto {}\r\n\r\ncontract SignedCharbetto is Charbetto, SignedContractId {\r\n    constructor(address admin_, uint version_, address infoContract_, address infoAdminAddress_) public \r\n        Charbetto(admin_) \r\n        SignedContractId(\"charbetto\", version_, infoContract_, infoAdminAddress_)\r\n    {} \r\n\r\n    function recalculatePayoutValueAdmin() admin public {\r\n        revert();\r\n    }\r\n\r\n    function stopGameFast() admin public {\r\n        revert();\r\n    }\r\n\r\n    // The default fallback function should be specified\r\n    function () payable public {\r\n        processTransferInteraction();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"recalculatePayoutValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFinalShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVariants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishedWithdrawalBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"addonEndsIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPayoutValueSender\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addonBlock\",\"type\":\"uint256\"}],\"name\":\"alterAddonBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRandomStored\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sm_lastBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameFinishing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIdHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocks2Finish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"getDeveloperUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRandomValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"getDeveloperName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"endsIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultGameAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultGameId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopGameFast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"},{\"name\":\"minPrize\",\"type\":\"uint256\"},{\"name\":\"maxPrize\",\"type\":\"uint256\"}],\"name\":\"calculatePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calcGameAddon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"gameProfited\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sm_afterFinishLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"info_admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferInteractionsAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeFunctionName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalPayoutValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"totalBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setTransferInteractions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"charity\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"name\":\"addCharity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAutoCreationAfterOwn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_id\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"charity\",\"type\":\"address\"}],\"name\":\"setDedicatedCharityForNextRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFinalProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"charity\",\"type\":\"address\"}],\"name\":\"getCharityUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"info_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startOnlyMinPrizes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isItReallyCharbetto\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoCreationAfterOwnAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStartGameStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"repeatBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPrizeShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdraw2Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sm_charityShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRandom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"charity\",\"type\":\"address\"}],\"name\":\"getCharityName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastProfitSync\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"payedOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dedicatedCharityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAutoCreation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addon\",\"type\":\"uint256\"}],\"name\":\"alterAddon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"r\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_signature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameFinishedBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddonBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"gameExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canStartGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canStoreRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_repeatBlock\",\"type\":\"uint256\"}],\"name\":\"alterRepeatBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxGameAddon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCharityShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sm_profits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dedicatedCharitySet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recalculatePayoutValueAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPrizeShare\",\"type\":\"uint256\"}],\"name\":\"alterPrizeShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"s\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"prize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoCreationAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recalcNextGameId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startGameAddon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPayoutValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sm_lastProfitSync\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxPrizeShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alterMaxPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minPrizes\",\"type\":\"bool\"}],\"name\":\"setStartOnlyMinPrizes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRepeatBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sm_charity\",\"outputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositToBank\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"finishedGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"calcGameLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDataHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startProfitedGamesAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinGameAddon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"fMax\",\"type\":\"uint256\"},{\"name\":\"maxPrize\",\"type\":\"uint256\"}],\"name\":\"calcPrizeX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomBlockPassed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developersAdded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCharityProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setCreateFastGamesCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minGameLength\",\"type\":\"uint256\"}],\"name\":\"alterMinGameLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPrize\",\"type\":\"uint256\"}],\"name\":\"alterMinPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sm_finalShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startGameId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxGameLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"games\",\"type\":\"bool\"}],\"name\":\"setStartProfitedGamesAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpdatePayout\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sm_developerShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"withdrawPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sm_dedicatedCharity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sm_profitSyncLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinGameLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dev\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"name\":\"addDeveloper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v_\",\"type\":\"uint8\"},{\"name\":\"r_\",\"type\":\"bytes32\"},{\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sm_reciever\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sm_maxDevelopers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishedWithdrawalTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"better\",\"type\":\"address\"}],\"name\":\"getBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"lastBetBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeveloperShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVariants\",\"type\":\"uint256\"}],\"name\":\"alterTotalVariants\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxGameLength\",\"type\":\"uint256\"}],\"name\":\"alterMaxGameLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreateFastGamesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getTransferProfitedGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"length\",\"type\":\"uint256\"},{\"name\":\"addon\",\"type\":\"uint256\"},{\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"startOwnFixed\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startGameLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPrizeValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"betInGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRandomAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sm_developers\",\"outputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeveloperProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addonBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWholePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"},{\"name\":\"version_\",\"type\":\"uint256\"},{\"name\":\"infoContract_\",\"type\":\"address\"},{\"name\":\"infoAdminAddress_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MoneyDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"reciever\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MoneyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameFinish\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"developerProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"charityProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finalProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"developerCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"charityCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dedicated\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"dedicatedCharity\",\"type\":\"address\"}],\"name\":\"ProfitRecalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"charity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"CharityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"charity\",\"type\":\"address\"}],\"name\":\"DedicatedCharitySelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"developer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"DeveloperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"randomBlock\",\"type\":\"uint256\"}],\"name\":\"RandomValueCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"starter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finishBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"highestBet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finishBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GameBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"GamePrizeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"BalanceReserved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"BalanceFreed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinGameLengthAltered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxGameLengthAltered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"AddonAltered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"MinPrizeAltered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"MaxPrizeAltered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"finishingBlock\",\"type\":\"uint256\"}],\"name\":\"GameStopInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"TransferInteractionsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"StartOnlyMinPrizesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"StartProfitedGamesAllowedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"AutoCreationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"AutoCreationAfterOwnChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTotalVariants\",\"type\":\"uint256\"}],\"name\":\"TotalVariantsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"MaxPrizeShareAltered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RepeatBlockAltered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RepeatAddonBlockAltered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"NextGameIdCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"DefaultGameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameProfitedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"faseGamesCreate\",\"type\":\"uint256\"}],\"name\":\"FastGamesChanged\",\"type\":\"event\"}]","ContractName":"SignedCharbetto","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f94a427c54082dd674df41d7629c37e7928a98a2000000000000000000000000000000000000000000000000000000000000000100000000000000000000000092a1ab397360a103cf7f54832ac9a3de73d1f45d000000000000000000000000f94a427c54082dd674df41d7629c37e7928a98a2","Library":"","SwarmSource":"bzzr://3e86ca782fe51ed886757ff5277d491af6434d7d79d0205cd3625bacff04ee9f"}]}