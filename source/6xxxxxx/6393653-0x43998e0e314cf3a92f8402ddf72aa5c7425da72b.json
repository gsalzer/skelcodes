{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n/**\r\n * @title ViteCoinCrowdsale\r\n * @dev   ViteCoinCrowdsale accepting contributions only within a time frame.\r\n */\r\ncontract ViteCoinCrowdsale is ERC20Interface, Owned {\r\n  using SafeMath for uint256;\r\n  string public symbol; \r\n  string public name;\r\n  uint8 public decimals; \r\n  uint internal _totalSupply;\r\n  address public wallet;\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n  uint256 public privatesaleopeningTime;\r\n  uint256 public privatesaleclosingTime;\r\n  uint256 public presaleopeningTime;\r\n  uint256 public presaleclosingTime;\r\n  uint256 public saleopeningTime;\r\n  uint256 public saleclosingTime;\r\n\r\n  address public fundsWallet;       // Address where funds are collected\r\n  uint256 public fundsRaised;         // Amount of total fundsRaised\r\n  \r\n  uint256 public privateSaleTokens;\r\n  uint256 public preSaleTokens;\r\n  uint256 public saleTokens;\r\n  uint256 public teamAdvTokens;\r\n  uint256 public reserveTokens;\r\n  uint256 public bountyTokens;\r\n  uint256 public hardCap;\r\n  string public minTxSize;\r\n  string public maxTxSize;\r\n  \r\n  bool    public privatesaleOpen;\r\n  bool    public presaleOpen;\r\n  bool    public saleOpen;\r\n  bool    public Open;\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event Burned(address burner, uint burnedAmount);\r\n\r\n  modifier onlyWhileOpen {\r\n    require(now >= privatesaleopeningTime && now <= (saleclosingTime + 30 days) && Open);\r\n    _;\r\n  }\r\n  \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor (address _owner, address _wallet) public {\r\n        _allocateTokens();\r\n        _setTimes();\r\n    \r\n        symbol = \"VT\";\r\n        name = \"Vitecoin\";\r\n        decimals = 18;\r\n        owner = _owner;\r\n        wallet = _wallet;\r\n        _totalSupply = 200000000;\r\n        Open = true;\r\n        balances[this] = _totalSupply * 10**uint(decimals);\r\n        emit Transfer(address(0),this, _totalSupply * 10**uint(decimals));\r\n    }\r\n    \r\n    function _setTimes() internal{\r\n        privatesaleopeningTime    = 1534723200; // 20th Aug 2018 00:00:00 GMT \r\n        privatesaleclosingTime    = 1538351999; // 30th Sep 2018 23:59:59 GMT   \r\n        presaleopeningTime        = 1538352000; // 1st  Oct 2018 00:00:00 GMT \r\n        presaleclosingTime        = 1542239999; // 14th Nov 2018 23:59:59 GMT\r\n        saleopeningTime           = 1542240000; // 15th Nov 2018 00:00:00 GMT\r\n        saleclosingTime           = 1546214399; // 12th Dec 2018 23:59:59 GMT\r\n    }\r\n  \r\n    function _allocateTokens() internal{\r\n        privateSaleTokens     = 10000000;   // 5%\r\n        preSaleTokens         = 80000000;   // 40%\r\n        saleTokens            = 60000000;   // 30%\r\n        teamAdvTokens         = 24000000;   // 12%\r\n        reserveTokens         = 20000000;   // 10%\r\n        bountyTokens          = 6000000;    // 3%\r\n        hardCap               = 36825;      // 36825 eths or 36825*10^18 weis \r\n        minTxSize             = \"0,5 ETH\"; // (0,5 ETH)\r\n        maxTxSize             = \"1000 ETH\"; // (1000 ETH)\r\n        privatesaleOpen = true;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint){\r\n       return _totalSupply;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(to != 0x0);\r\n        require(balances[msg.sender] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender,to,tokens);\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success){\r\n        require(tokens <= allowed[from][msg.sender]); //check allowance\r\n        require(balances[from] >= tokens);\r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        emit Transfer(from,to,tokens);\r\n        return true;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    function _checkOpenings() internal{\r\n        if(now >= privatesaleopeningTime && now <= privatesaleclosingTime){\r\n          privatesaleOpen = true;\r\n          presaleOpen = false;\r\n          saleOpen = false;\r\n        }\r\n        else if(now >= presaleopeningTime && now <= presaleclosingTime){\r\n          privatesaleOpen = false;\r\n          presaleOpen = true;\r\n          saleOpen = false;\r\n        }\r\n        else if(now >= saleopeningTime && now <= (saleclosingTime + 30 days)){\r\n            privatesaleOpen = false;\r\n            presaleOpen = false;\r\n            saleOpen = true;\r\n        }\r\n        else{\r\n          privatesaleOpen = false;\r\n          presaleOpen = false;\r\n          saleOpen = false;\r\n        }\r\n    }\r\n    \r\n        function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _beneficiary) public payable onlyWhileOpen {\r\n    \r\n        uint256 weiAmount = msg.value;\r\n    \r\n        _preValidatePurchase(_beneficiary, weiAmount);\r\n    \r\n        _checkOpenings();\r\n        \r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        \r\n        if(weiAmount > 50e18 && weiAmount < 100e18){ // greater than 50 eths\r\n            // 15% extra discount\r\n            tokens = tokens.add((tokens.mul(15)).div(100));\r\n        }else if(weiAmount > 100e18){ // greater than 100 eths\r\n            // 20% extra discount\r\n            tokens = tokens.add((tokens.mul(20)).div(100));\r\n        }\r\n        // update state\r\n        fundsRaised = fundsRaised.add(weiAmount);\r\n\r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(this, _beneficiary, weiAmount, tokens);\r\n\r\n        _forwardFunds(msg.value);\r\n    }\r\n    \r\n        function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal{\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n        require(_weiAmount >= 5e17  && _weiAmount <= 1e21 ,\"FUNDS should be MIN 0,5 ETH and Max 1000 ETH\");\r\n    }\r\n  \r\n    function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\r\n        uint256 rate;\r\n        if(privatesaleOpen){\r\n            rate = 4348; //per wei\r\n        }\r\n        else if(presaleOpen){\r\n            rate = 311; //per wei\r\n        }\r\n        else if(saleOpen){\r\n            rate = 290; //per wei\r\n        }\r\n        \r\n        return _weiAmount.mul(rate);\r\n    }\r\n    \r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _transfer(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n    \r\n    function _forwardFunds(uint256 _amount) internal {\r\n        wallet.transfer(_amount);\r\n    }\r\n    \r\n    function _transfer(address to, uint tokens) internal returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(to != 0x0);\r\n        require(balances[this] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        balances[this] = balances[this].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(this,to,tokens);\r\n        return true;\r\n    }\r\n    \r\n    function freeTokens(address _beneficiary, uint256 _tokenAmount) public onlyOwner{\r\n       _transfer(_beneficiary, _tokenAmount);\r\n    }\r\n    \r\n    function stopICO() public onlyOwner{\r\n        Open = false;\r\n    }\r\n    \r\n    function multipleTokensSend (address[] _addresses, uint256[] _values) public onlyOwner{\r\n        for (uint i = 0; i < _addresses.length; i++){\r\n            _transfer(_addresses[i], _values[i]*10**uint(decimals));\r\n        }\r\n    }\r\n    \r\n    function burnRemainingTokens() public onlyOwner{\r\n        balances[this] = 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minTxSize\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatesaleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatesaleopeningTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Open\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTxSize\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnRemainingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleopeningTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleclosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatesaleclosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleopeningTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAdvTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleclosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multipleTokensSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"freeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ViteCoinCrowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e4d54f6ecc941229d590c61e9c6c35050b9a9a14000000000000000000000000e4d54f6ecc941229d590c61e9c6c35050b9a9a14","Library":"","SwarmSource":"bzzr://451a8919ba76a850ac82c62fb849c4d41f7f74335b6d476aaca07712657d058f"}]}