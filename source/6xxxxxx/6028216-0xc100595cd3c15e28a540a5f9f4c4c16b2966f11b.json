{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract IERC20 {\r\n    function totalSupply() pure public returns (uint _totalSupply);\r\n    function balanceOf(address _owner) pure public returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) pure public returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\nlibrary SafeMathLib {\r\n\r\n  function times(uint a, uint b) pure public returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function minus(uint a, uint b) pure public returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function plus(uint a, uint b) pure public returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @notice The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract TDX {\r\n\r\n    address public owner;\r\n    /**\r\n    * @notice The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @notice Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Sale\r\n * @notice The Token Sale contract\r\n */\r\ncontract Sale is TDX {\r\n\r\n  using SafeMathLib for uint256;\r\n  using SafeMathLib for uint8;\r\n\r\n  IERC20 token;\r\n  address tokenAddressWallet;\r\n  address etherAddressWallet;\r\n  \r\n  uint256 public constant CAP = 15000000 * 10**8;\r\n  uint256 public constant tokensPerPhase = 5000000 * 10**8;\r\n  uint256 public PHASE1_START = 1533254400;\r\n  uint256 public PHASE1_END = 1536451200;\r\n  \r\n  uint256 public PHASE2_START = 1536451200;\r\n  uint256 public PHASE2_END = 1539648000;\r\n  \r\n  uint256 public PHASE3_START = 1539648000;\r\n  uint256 public PHASE3_END = 1543017600;\r\n\r\n  // For First phase, price is 1/2,\r\n  // For Second phase, price is 3/4,\r\n  // For Third phase, price is 1\r\n  uint256 usdPerEther = 1000;\r\n  \r\n  //Total Tokens Sold\r\n  uint256 public tokensSold;\r\n  uint256[] public tokensSoldPerPhase;\r\n\r\n  bool public initialized = false;\r\n\r\n  modifier IsLive() {\r\n    // Check if sale is active\r\n    assert(isSaleLive());\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n      address _tokenAddr,\r\n      address _etherAddr,\r\n      address _tokenWalletAddr\r\n      ) public {\r\n      require(_tokenAddr != 0);\r\n      token = IERC20(_tokenAddr);\r\n      etherAddressWallet = _etherAddr;\r\n      tokenAddressWallet = _tokenWalletAddr;\r\n  }\r\n\r\n  /**\r\n   * @notice Initializes the Sale\r\n   * Required as we need to Ensure the pre-requirements are met.\r\n   */\r\n  function initialize() public onlyOwner {\r\n      require(initialized == false); // Can only be initialized once\r\n      require(tokensAvailable() == CAP); // Must have enough tokens allocated\r\n      initialized = true;\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the sale is Live.\r\n   */\r\n  function isSaleLive() public constant returns (bool) {\r\n    return ( \r\n        initialized == true &&\r\n        getPhase() != 0 &&\r\n        goalReached() == false // Goal must not already be reached\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Checks whether the Goal is Reached.\r\n   */\r\n  function goalReached() public constant returns (bool) {\r\n    if (tokensSold >= CAP) {\r\n      token.transfer(tokenAddressWallet, token.balanceOf(this));\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  function () public payable {\r\n    sellTokens();\r\n  }\r\n\r\n  function sellTokens() payable IsLive {\r\n    require(msg.value > 0);\r\n    uint256 tokens;\r\n    uint8 phase = getPhase();\r\n    \r\n    if (phase == 1) {\r\n        tokens = (((msg.value) / usdPerEther) / 2) / 10 **10;\r\n    } else if (phase == 2) {\r\n        tokens = (((msg.value).times(3) / usdPerEther) / 4) / 10 **10;\r\n    } else if (phase == 3) {\r\n        tokens = ((msg.value) / usdPerEther) / 10 ** 10;\r\n    }\r\n    \r\n    uint256 afterPayment = tokensSoldPerPhase[phase].plus(tokens);\r\n    require(afterPayment <= tokensPerPhase);\r\n    tokensSold = tokensSold.plus(tokens);\r\n    tokensSoldPerPhase[phase] = afterPayment;\r\n    transferTokens(tokens);\r\n    etherAddressWallet.transfer(msg.value);\r\n  }\r\n  \r\n  function getPhase() public constant returns (uint8) {\r\n      if (now >= PHASE1_START && now <= PHASE1_END) {\r\n        return 1;\r\n      } else if (now >= PHASE2_START && now <= PHASE2_END) {\r\n        return 2;\r\n      } else if (now >= PHASE3_START && now <= PHASE3_END) {\r\n        return 3;\r\n      } else if(now >= PHASE3_END) {\r\n          terminateSale();\r\n      } else {\r\n        return 0;\r\n      }\r\n  }\r\n  \r\n   function transferTokens(uint256 tokens) private {\r\n      token.transfer(msg.sender, tokens);\r\n      tokensSold = tokensSold.plus(tokens);\r\n  }\r\n\r\n  function tokensAvailable() public constant returns (uint256) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  function terminateSale() internal {\r\n    token.transfer(tokenAddressWallet, token.balanceOf(this));\r\n  }\r\n\r\n  function terminateTokenSale() public onlyOwner {\r\n      terminateSale();\r\n  }\r\n\r\n  function terminateContract() public onlyOwner {\r\n      terminateSale();\r\n      selfdestruct(etherAddressWallet);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TDX","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://15e6bbafadb11c733959f3cffdd0c0ac1fb6b6ae0f97638e133bdac6963db71f"}]}