{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n _ _ _  _____  _____  _____  __            ___    _____  _____  _____  _____  _____\r\n| | | ||  |  ||   __||   __||  |      ___ |  _|  |   __||_   _||  |  ||   __|| __  |\r\n| | | ||     ||   __||   __||  |__   | . ||  _|  |   __|  | |  |     ||   __||    -|\r\n|_____||__|__||_____||_____||_____|  |___||_|    |_____|  |_|  |__|__||_____||__|__|\r\n\r\n\r\n\r\n                                  `.-::::::::::::-.`\r\n                           .:::+:-.`            `.-:+:::.\r\n                      `::::.   `-                  -`   .:::-`\r\n                   .:::`        :                  :        `:::.\r\n                `:/-            `-                -`            -/:`\r\n              ./:`               :               `:               `:/.\r\n            .+:                   :              :                  `:+.\r\n          `/-`..`                 -`            `-                 `..`-/`\r\n         :/`    ..`                :            :                `..    `/:\r\n       `+.        ..`              -`          `-              `..        .+`\r\n      .+`           ..`             :          :             `..           `+.\r\n     -+               ..`           -.        ..           `..               +-\r\n    .+                 `..`          :        :          `..                  +.\r\n   `o                    `..`        ..      ..        `..`                    o`\r\n   o`                      `..`     `./------/.`     `..`                      `o\r\n  -+``                       `..``-::.````````.::-``..`                       ``+-\r\n  s```....````                 `+:.  ..------..  .:+`                 ````....```o\r\n .+       ````...````         .+. `--``      ``--` .+.         ````...````       +.\r\n +.              ````....`````+` .:`            `:. `o`````....````              ./\r\n o                       ````s` `/                /` `s````                       o\r\n s                           s  /`                .:  s                           s\r\n s                           s  /`                `/  s                           s\r\n s                        ```s` `/                /` `s```                        o\r\n +.               ````....```.+  .:`            `:.  +.```....````               .+\r\n ./        ```....````        -/` `--`        `--` `/.        ````....```        +.\r\n  s````....```                 .+:` `.--------.` `:+.                 ```....````s\r\n  :/```                       ..`.::-.``    ``.-::.`..                       ```/:\r\n   o`                       ..`     `-/-::::-/-`     `..                       `o\r\n   `o                     ..`        ..      ..        `..                     o`\r\n    -/                  ..`          :        :          `..                  /-\r\n     -/               ..`           ..        ..           `..               /-\r\n      -+`           ..`             :          :             `-.           `+-\r\n       .+.        .-`              -`          ..              `-.        .+.\r\n         /:     .-`                :            :                `-.    `:/\r\n          ./- .-`                 -`            `-                 `-. -/.\r\n            -+-                   :              :                   :+-\r\n              -/-`               -`              `-               `-/-\r\n                .:/.             :                :             ./:.\r\n                   -:/-         :                  :         -/:-\r\n                      .:::-`   `-                  -`   `-:::.\r\n                          `-:::+-.`              `.:+:::-`\r\n                                `.-::::::::::::::-.`\r\n\r\n---Design---\r\nJörmungandr\r\n\r\n---Contract and Frontend---\r\nMr Fahrenheit\r\nJörmungandr\r\n\r\n---Contract Auditor---\r\n8 ฿ł₮ ₮Ɽł₱\r\n\r\n---Contract Advisors---\r\nEtherguy\r\nNorsefire\r\n\r\nTY Guys\r\n\r\n**/\r\n\r\ncontract WheelOfEther\r\n{\r\n    using SafeMath for uint;\r\n\r\n    // Randomizer contract\r\n    Randomizer private rand;\r\n\r\n    /**\r\n     * MODIFIERS\r\n     */\r\n    modifier onlyHuman() {\r\n        require(tx.origin == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier gameActive() {\r\n        require(gamePaused == false);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin(){\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * EVENTS\r\n     */\r\n    event onDeposit(\r\n        address indexed customer,\r\n        uint256 amount,\r\n        uint256 balance,\r\n        uint256 devFee,\r\n        uint timestamp\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customer,\r\n        uint256 amount,\r\n        uint256 balance,\r\n        uint timestamp\r\n    );\r\n\r\n    event spinResult(\r\n        address indexed customer,\r\n        uint256 wheelNumber,\r\n        uint256 outcome,\r\n        uint256 betAmount,\r\n        uint256 returnAmount,\r\n        uint256 customerBalance,\r\n        uint timestamp\r\n    );\r\n\r\n    // Contract admin\r\n    address public admin;\r\n    uint256 public devBalance = 0;\r\n\r\n    // Game status\r\n    bool public gamePaused = false;\r\n\r\n    // Random values\r\n    uint8 private randMin  = 1;\r\n    uint8 private randMax  = 80;\r\n\r\n    // Bets limit\r\n    uint256 public minBet = 0.01 ether;\r\n    uint256 public maxBet = 10 ether;\r\n\r\n    // Win brackets\r\n    uint8[10] public brackets = [1,3,6,12,24,40,56,68,76,80];\r\n\r\n    // Factors\r\n    uint256 private          globalFactor   = 10e21;\r\n    uint256 constant private constantFactor = 10e21 * 10e21;\r\n\r\n    // Customer balance\r\n    mapping(address => uint256) private personalFactor;\r\n    mapping(address => uint256) private personalLedger;\r\n\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Admin methods\r\n     */\r\n    function setRandomizer(address _rand) external onlyAdmin {\r\n        rand = Randomizer(_rand);\r\n    }\r\n\r\n    function gamePause() external onlyAdmin {\r\n        gamePaused = true;\r\n    }\r\n\r\n    function gameUnpause() external onlyAdmin {\r\n        gamePaused = false;\r\n    }\r\n\r\n    function refund(address customer) external onlyAdmin {\r\n        uint256 amount = getBalanceOf(customer);\r\n        customer.transfer(amount);\r\n        personalLedger[customer] = 0;\r\n        personalFactor[customer] = constantFactor / globalFactor;\r\n        emit onWithdraw(customer, amount, getBalance(), now);\r\n    }\r\n\r\n    function withdrawDevFees() external onlyAdmin {\r\n        admin.transfer(devBalance);\r\n        devBalance = 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get contract balance\r\n     */\r\n    function getBalance() public view returns(uint256 balance) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getBalanceOf(address customer) public view returns(uint256 balance) {\r\n        return personalLedger[customer].mul(personalFactor[customer]).mul(globalFactor) / constantFactor;\r\n    }\r\n\r\n    function getBalanceMy() public view returns(uint256 balance) {\r\n        return getBalanceOf(msg.sender);\r\n    }\r\n\r\n    function betPool(address customer) public view returns(uint256 value) {\r\n        return address(this).balance.sub(getBalanceOf(customer)).sub(devBalance);\r\n    }\r\n\r\n\r\n    /**\r\n     * Deposit/withdrawal\r\n     */\r\n    function deposit() public payable onlyHuman gameActive {\r\n        address customer = msg.sender;\r\n        require(msg.value >= (minBet * 2));\r\n\r\n        // Add 2% fee of the buy to devBalance\r\n        uint256 devFee = msg.value / 50;\r\n        devBalance = devBalance.add(devFee);\r\n\r\n        personalLedger[customer] = getBalanceOf(customer).add(msg.value).sub(devFee);\r\n        personalFactor[customer] = constantFactor / globalFactor;\r\n\r\n        emit onDeposit(customer, msg.value, getBalance(), devFee, now);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public onlyHuman {\r\n        address customer = msg.sender;\r\n        require(amount > 0);\r\n        require(amount <= getBalanceOf(customer));\r\n\r\n        customer.transfer(amount);\r\n        personalLedger[customer] = getBalanceOf(customer).sub(amount);\r\n        personalFactor[customer] = constantFactor / globalFactor;\r\n\r\n        emit onWithdraw(customer, amount, getBalance(), now);\r\n    }\r\n\r\n    function withdrawAll() public onlyHuman {\r\n        withdraw(getBalanceOf(msg.sender));\r\n    }\r\n\r\n\r\n    /**\r\n     * Spin the wheel methods\r\n     */\r\n    function spin(uint256 betAmount) public onlyHuman gameActive returns(uint256 resultNum) {\r\n        address customer = msg.sender;\r\n        require(betAmount              >= minBet);\r\n        require(getBalanceOf(customer) >= betAmount);\r\n\r\n        if (betAmount > maxBet) {\r\n            betAmount = maxBet;\r\n        }\r\n        if (betAmount > betPool(customer) / 10) {\r\n            betAmount = betPool(customer) / 10;\r\n        }\r\n        resultNum = bet(betAmount, customer);\r\n    }\r\n\r\n    function spinAll() public onlyHuman gameActive returns(uint256 resultNum) {\r\n        resultNum = spin(getBalanceOf(msg.sender));\r\n    }\r\n\r\n    function spinDeposit() public payable onlyHuman gameActive returns(uint256 resultNum) {\r\n        address customer  = msg.sender;\r\n        uint256 betAmount = msg.value;\r\n\r\n        require(betAmount >= (minBet * 2));\r\n\r\n        // Add 2% fee of the buy to devFeeBalance\r\n        uint256 devFee = betAmount / 50;\r\n        devBalance     = devBalance.add(devFee);\r\n        betAmount      = betAmount.sub(devFee);\r\n\r\n        personalLedger[customer] = getBalanceOf(customer).add(msg.value).sub(devFee);\r\n        personalFactor[customer] = constantFactor / globalFactor;\r\n\r\n        if (betAmount >= maxBet) {\r\n            betAmount = maxBet;\r\n        }\r\n        if (betAmount > betPool(customer) / 10) {\r\n            betAmount = betPool(customer) / 10;\r\n        }\r\n\r\n        resultNum = bet(betAmount, customer);\r\n    }\r\n\r\n\r\n    /**\r\n     * PRIVATE\r\n     */\r\n    function bet(uint256 betAmount, address customer) private returns(uint256 resultNum) {\r\n        resultNum      = uint256(rand.getRandomNumber(randMin, randMax + randMin));\r\n        uint256 result = determinePrize(resultNum);\r\n\r\n        uint256 returnAmount;\r\n\r\n        if (result < 5) {                                               // < 5 = WIN\r\n            uint256 winAmount;\r\n            if (result == 0) {                                          // Grand Jackpot\r\n                winAmount = betAmount.mul(9) / 10;                      // +90% of original bet\r\n            } else if (result == 1) {                                   // Jackpot\r\n                winAmount = betAmount.mul(8) / 10;                      // +80% of original bet\r\n            } else if (result == 2) {                                   // Grand Prize\r\n                winAmount = betAmount.mul(7) / 10;                      // +70% of original bet\r\n            } else if (result == 3) {                                   // Major Prize\r\n                winAmount = betAmount.mul(6) / 10;                      // +60% of original bet\r\n            } else if (result == 4) {                                   // Minor Prize\r\n                winAmount = betAmount.mul(3) / 10;                      // +30% of original bet\r\n            }\r\n            weGotAWinner(customer, winAmount);\r\n            returnAmount = betAmount.add(winAmount);\r\n        } else if (result == 5) {                                       // 5 = Refund\r\n            returnAmount = betAmount;\r\n        } else {                                                        // > 5 = LOSE\r\n            uint256 lostAmount;\r\n            if (result == 6) {                                          // Minor Loss\r\n                lostAmount = betAmount / 10;                            // -10% of original bet\r\n            } else if (result == 7) {                                   // Major Loss\r\n                lostAmount = betAmount / 4;                             // -25% of original bet\r\n            } else if (result == 8) {                                   // Grand Loss\r\n                lostAmount = betAmount / 2;                             // -50% of original bet\r\n            } else if (result == 9) {                                   // Total Loss\r\n                lostAmount = betAmount;                                 // -100% of original bet\r\n            }\r\n            goodLuck(customer, lostAmount);\r\n            returnAmount = betAmount.sub(lostAmount);\r\n        }\r\n\r\n        uint256 newBalance = getBalanceOf(customer);\r\n        emit spinResult(customer, resultNum, result, betAmount, returnAmount, newBalance, now);\r\n        return resultNum;\r\n    }\r\n\r\n\r\n    function determinePrize(uint256 result) private view returns(uint256 resultNum) {\r\n        for (uint8 i = 0; i < 10; i++) {\r\n            if (result <= brackets[i]) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function goodLuck(address customer, uint256 lostAmount) private {\r\n        uint256 customerBalance  = getBalanceOf(customer);\r\n        uint256 globalIncrease   = globalFactor.mul(lostAmount) / betPool(customer);\r\n        globalFactor             = globalFactor.add(globalIncrease);\r\n        personalFactor[customer] = constantFactor / globalFactor;\r\n\r\n        if (lostAmount > customerBalance) {\r\n            lostAmount = customerBalance;\r\n        }\r\n        personalLedger[customer] = customerBalance.sub(lostAmount);\r\n    }\r\n\r\n    function weGotAWinner(address customer, uint256 winAmount) private {\r\n        uint256 customerBalance  = getBalanceOf(customer);\r\n        uint256 globalDecrease   = globalFactor.mul(winAmount) / betPool(customer);\r\n        globalFactor             = globalFactor.sub(globalDecrease);\r\n        personalFactor[customer] = constantFactor / globalFactor;\r\n        personalLedger[customer] = customerBalance.add(winAmount);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Randomizer contract interface\r\n */\r\ncontract Randomizer {\r\n    function getRandomNumber(int256 min, int256 max) public returns(int256);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"spinAll\",\"outputs\":[{\"name\":\"resultNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDevFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gamePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"betPool\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rand\",\"type\":\"address\"}],\"name\":\"setRandomizer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceMy\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"spinDeposit\",\"outputs\":[{\"name\":\"resultNum\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"spin\",\"outputs\":[{\"name\":\"resultNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gameUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"brackets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"devFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wheelNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"spinResult\",\"type\":\"event\"}]","ContractName":"WheelOfEther","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://83cb134528f139802f97740428f2e6070038924950af22c3c6a1db56fe07bd3d"}]}