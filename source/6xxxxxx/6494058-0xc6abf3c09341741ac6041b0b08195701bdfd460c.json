{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != 0);\r\n        require(amount <= balances[account]);\r\n\r\n        totalSupply_ = totalSupply().sub(amount);\r\n        balances[account] = balances[account].sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        require(amount <= allowed[account][msg.sender]);\r\n\r\n        allowed[account][msg.sender] = allowed[account][msg.sender].sub(amount);\r\n        _burn(account, amount);\r\n    }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public isMinting = true;\r\n    uint256 public lockCountingFromTime = 0;\r\n\r\n    modifier canMint() {\r\n        require(isMinting);\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() public onlyOwner canMint returns (bool) {\r\n        isMinting = false;\r\n        lockCountingFromTime = now;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n  function burn(uint256 value) public {\r\n    _burn(msg.sender, value);\r\n  }\r\n\r\n  function burnFrom(address from, uint256 value) public {\r\n    _burnFrom(from, value);\r\n  }\r\n\r\n  function _burn(address who, uint256 value) internal {\r\n    super._burn(who, value);\r\n  }\r\n}\r\n\r\ncontract OSAToken is MintableToken, BurnableToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"OSAToken\";\r\n    string public symbol = \"OSA\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    uint256 constant public MAX_TOTAL_SUPPLY = 5777999888 * (10 ** uint256(decimals));\r\n\r\n    struct LockParams {\r\n        uint256 TIME;\r\n        uint256 AMOUNT;\r\n    }\r\n\r\n    mapping(address => LockParams[]) private holdAmounts;\r\n    address[] private holdAmountAccounts;\r\n\r\n    function isValidAddress(address _address) public view returns (bool) {\r\n        return (_address != 0x0 && _address != address(0) && _address != 0 && _address != address(this));\r\n    }\r\n\r\n    modifier validAddress(address _address) {\r\n        require(isValidAddress(_address));\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public validAddress(_to) onlyOwner canMint returns (bool) {\r\n        if (totalSupply_.add(_amount) > MAX_TOTAL_SUPPLY) {\r\n            return false;\r\n        }\r\n        return super.mint(_to, _amount);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public validAddress(_to) returns (bool) {\r\n        require(checkAvailableAmount(msg.sender, _value));\r\n    \r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public validAddress(_to) returns (bool) {\r\n        require(checkAvailableAmount(_from, _value));\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function setHoldAmount(address _address, uint256 _amount, uint256 _time) public onlyOwner {\r\n        require(getAvailableBalance(_address) >= _amount);\r\n        _setHold(_address, _amount, _time);\r\n    }\r\n\r\n    function _setHold(address _address, uint256 _amount, uint256 _time) internal {\r\n        LockParams memory lockdata;\r\n        if (lockCountingFromTime == 0) {\r\n            lockdata.TIME = _time;\r\n        } else {\r\n            lockdata.TIME = now.sub(lockCountingFromTime).add(_time);\r\n        }\r\n        lockdata.AMOUNT = _amount;\r\n\r\n        holdAmounts[_address].push(lockdata);\r\n        holdAmountAccounts.push(_address) - 1;\r\n    }\r\n\r\n    function getTotalHoldAmount(address _address) public view returns(uint256) {\r\n        uint256 totalHold = 0;\r\n        LockParams[] storage locks = holdAmounts[_address];\r\n        for (uint i = 0; i < locks.length; i++) {\r\n            if (lockCountingFromTime == 0 || lockCountingFromTime.add(locks[i].TIME) >= now) {\r\n                totalHold = totalHold.add(locks[i].AMOUNT);\r\n            }\r\n        }\r\n        return totalHold;\r\n    }\r\n\r\n    function getAvailableBalance(address _address) public view returns(uint256) {\r\n        return balanceOf(_address).sub(getTotalHoldAmount(_address));\r\n    }\r\n\r\n    function checkAvailableAmount(address _address, uint256 _amount) public view returns (bool) {\r\n        return _amount <= getAvailableBalance(_address);\r\n    }\r\n\r\n    function removeHoldByAddress(address _address) public onlyOwner {\r\n        delete holdAmounts[_address];\r\n    }\r\n\r\n    function removeHoldByAddressIndex(address _address, uint256 _index) public onlyOwner {\r\n        delete holdAmounts[_address][_index];\r\n    }\r\n\r\n    function changeHoldByAddressIndex(\r\n        address _address, uint256 _index, uint256 _amount, uint256 _time\r\n    ) public onlyOwner {\r\n        if (_amount > 0) {\r\n            holdAmounts[_address][_index].AMOUNT = _amount;\r\n        }\r\n        if (_time > 0) {\r\n            if (lockCountingFromTime == 0) {\r\n                holdAmounts[_address][_index].TIME = _time;\r\n            } else {\r\n                holdAmounts[_address][_index].TIME = now.sub(lockCountingFromTime).add(_time);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getHoldAmountAccounts() public view onlyOwner returns (address[]) {\r\n        return holdAmountAccounts;\r\n    }\r\n\r\n    function countHoldAmount(address _address) public view onlyOwner returns (uint256) {\r\n        require(_address != 0x0 && _address != address(0));\r\n        return holdAmounts[_address].length;\r\n    }\r\n\r\n    function getHoldAmount(address _address, uint256 _idx) public view onlyOwner returns (uint256, uint256) {\r\n        require(_address != 0x0);\r\n        require(holdAmounts[_address].length>0);\r\n\r\n        return (holdAmounts[_address][_idx].TIME, holdAmounts[_address][_idx].AMOUNT);\r\n    }\r\n\r\n    function transferHoldFrom(\r\n        address _from, address _to, uint256 _value\r\n    ) public onlyOwner returns (bool) {\r\n        require(_to != address(0));\r\n        require(getTotalHoldAmount(_from) >= _value);\r\n        require(_value <= allowed[_from][tx.origin]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][tx.origin] = allowed[_from][tx.origin].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        uint256 lockedSourceAmount = 0;\r\n        uint lockedSourceAmountCount = 0;\r\n\r\n        LockParams[] storage locks = holdAmounts[_from];\r\n\r\n        for (uint i = 0; i < locks.length; i++) {\r\n            if (lockCountingFromTime == 0 || lockCountingFromTime.add(locks[i].TIME) >= now) {\r\n            \tlockedSourceAmount = lockedSourceAmount.add(locks[i].AMOUNT);\r\n                lockedSourceAmountCount++;\r\n            }\r\n        }\r\n\r\n        uint256 tosend = 0;\r\n        uint256 acc = 0;\r\n        uint j = 0;\r\n\r\n        for (i = 0; i < locks.length; i++) {\r\n            if (lockCountingFromTime == 0 || lockCountingFromTime.add(locks[i].TIME) >= now) {\r\n            \tif (j < lockedSourceAmountCount - 1) {\r\n    \t            tosend = locks[i].AMOUNT.mul(_value).div(lockedSourceAmount);\r\n    \t        } else {\r\n        \t        tosend = _value.sub(acc);\r\n    \t        }\r\n    \t        locks[i].AMOUNT = locks[i].AMOUNT.sub(tosend);\r\n    \t        acc = acc.add(tosend);\r\n    \t        _setHold(_to, tosend, locks[i].TIME);\r\n    \t        j++;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function burnMintFrom(address _from, uint256 _amount) public onlyOwner canMint {\r\n        require(checkAvailableAmount(_from, _amount));\r\n        super._burn(_from, _amount);\r\n    }\r\n\r\n    function burnFrom(address from, uint256 value) public {\r\n        require(!isMinting);\r\n        require(checkAvailableAmount(from, value));\r\n        super.burnFrom(from, value);\r\n    }\r\n\r\n    function burn(uint256 value) public {\r\n        require(!isMinting);\r\n        require(checkAvailableAmount(msg.sender, value));\r\n        super.burn(value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isValidAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setHoldAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkAvailableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferHoldFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changeHoldByAddressIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnMintFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockCountingFromTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAvailableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getHoldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHoldAmountAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalHoldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeHoldByAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"countHoldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeHoldByAddressIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OSAToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4a99a2a785bbee21d568cfde5c1505a91e7de0c0b6d80210a5da64f8996bd41"}]}