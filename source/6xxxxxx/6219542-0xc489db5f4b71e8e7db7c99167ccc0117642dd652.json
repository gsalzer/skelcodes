{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract PerformanceBond {\r\n/*(c)2018 tokenchanger.io -all rights reserved*/\r\n\r\n/*SUPER ADMINS*/\r\naddress Mars = 0x1947f347B6ECf1C3D7e1A58E3CDB2A15639D48Be;\r\naddress Mercury = 0x00795263bdca13104309Db70c11E8404f81576BE;\r\naddress Europa = 0x00e4E3eac5b520BCa1030709a5f6f3dC8B9e1C37;\r\naddress Jupiter = 0x2C76F260707672e240DC639e5C9C62efAfB59867;\r\naddress Neptune = 0xEB04E1545a488A5018d2b5844F564135211d3696;\r\n\r\n/*CONTRACT ADDRESS*/\r\nfunction GetContractAddr() public constant returns (address){\r\nreturn this;\r\n}\t\r\naddress ContractAddr = GetContractAddr();\r\n\r\n/*GLOBAL*/\r\nuint256 PercentConverter = 10000;\r\n\r\n/*DATA STRUCTURE*/\r\nstruct Bond{\r\nuint256 BondNum;\r\n}\r\n\r\nstruct Specification{\r\nuint256 WriterDeposit;\r\nuint256 BeneficiaryStake;\r\nuint256 BeneficiaryDeposit;\r\nuint256 ExtensionLimit;\r\nuint256 CreationBlock;\r\nuint256 ExpirationBlock;\r\naddress BondWriter;\r\naddress BondBeneficiary;\r\nbool StopExtension;\r\nbool Activated;\r\nbool Dispute;\r\nuint256 CtrFee;\r\nuint256 ArbFee;\r\n}\r\n\r\nstruct Agreement{\r\naddress Arbiter;\r\nbool Writer;    \r\nbool Beneficiary;    \r\n}\r\n\r\nstruct Settlement{\r\nuint256 Writer;    \r\nuint256 Beneficiary;\r\nbool WriterSettled;\r\nbool BeneficiarySettled;\r\nbool Judgement;\r\n}\r\n\r\nstruct User{\r\nuint256 TransactionNum;\r\n}\r\n\r\nstruct Log{\r\nuint256 BondNum;\r\n}\r\n\r\nstruct Admin{\r\nbool Authorised; \r\nuint256 Level;\r\n}\r\n\r\nstruct Arbiter{\r\nbool Registered; \r\n}\r\n\r\nstruct Configuration{\r\nuint256 ArbiterFee;\r\nuint256 ContractFee;\r\nuint256 StakePercent;\r\naddress Banker;\r\n}\r\n\r\nstruct TR{\r\nuint256 n0;    \r\nuint256 n1;\r\nuint256 n2;\r\nuint256 n3;\r\nuint256 n4;\r\nuint256 n5;\r\nuint256 n6;\r\nuint256 n7;\r\nuint256 n8;\r\nuint256 n9;\r\n}\r\n\r\nstruct Identifier {\r\nuint256 c0;    \r\nuint256 c1;\r\nuint256 c2;\r\nuint256 c3;\r\nuint256 c4;\r\nuint256 c5;\r\nuint256 c6;\r\nuint256 c7;\r\n}\r\n\r\n/*initialise process variables*/\r\nTR tr;\r\nIdentifier id;\r\n\r\n/*DATA STORAGE*/\r\nmapping (address => Bond) public bond;\r\nmapping (uint256 => Specification) public spec;\r\nmapping (uint256 => Agreement) public agree;\r\nmapping (address => User) public user;\r\nmapping (uint256 => Settlement) public settle;\r\nmapping (address => mapping (uint256 => Log)) public tracker;\r\nmapping (address => Configuration) public config;\r\nmapping (address => Admin) public admin;\r\nmapping (address => Arbiter) public arbiter;\r\n\r\n/*AUTHORISE ADMIN*/\r\nfunction AuthAdmin(address _admin, bool _authority, uint256 _level) external \r\nreturns(bool) {\r\nif((msg.sender != Mars) && (msg.sender != Mercury) && (msg.sender != Europa)\r\n&& (msg.sender != Jupiter) && (msg.sender != Neptune)) revert();  \r\nadmin[_admin].Authorised = _authority; \r\nadmin[_admin].Level = _level;\r\nreturn true;\r\n} \r\n\r\n/*CONFIGURE CONTRACT*/\r\nfunction SetUp(uint256 _afee,uint256 _cfee,uint256 _spercent,address _banker) \r\nexternal returns(bool){\r\n/*integrity checks*/      \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert();\r\n/*update contract configuration*/\r\nconfig[ContractAddr].ArbiterFee = _afee;\r\nconfig[ContractAddr].ContractFee = _cfee;\r\nconfig[ContractAddr].StakePercent = _spercent;\r\nconfig[ContractAddr].Banker = _banker;\r\nreturn true;\r\n}\r\n\r\n/*REGISTER ARBITER*/\r\nfunction Register(address arbiter_, bool authority_) external \r\nreturns(bool) {\r\n/*integrity checks*/      \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert();\r\n/*register arbitrator*/\r\narbiter[arbiter_].Registered = authority_; \r\nreturn true;\r\n}\r\n\r\n/*PERCENTAGE CALCULATOR*/\r\nfunction Percent(uint256 _value, uint256 _percent) internal returns(uint256){\r\ntr.n1 = mul(_value,_percent);\r\ntr.n2 = div(tr.n1,PercentConverter);\r\nreturn tr.n2;\r\n} \r\n\r\n/*WRITE PERFORMANCE BOND*/\r\nfunction WriteBond(uint256 _expire, address _bene, address _arbi) payable external returns (bool){\r\n/*integrity checks*/    \r\nif(msg.value <= 0) revert();\r\nrequire(arbiter[_arbi].Registered == true);\r\n/*assign bond number*/\r\nbond[ContractAddr].BondNum += 1;\r\ntr.n3 = bond[ContractAddr].BondNum; \r\n/*write bond*/\r\nspec[tr.n3].WriterDeposit = msg.value;\r\ntr.n4 = Percent(msg.value,config[ContractAddr].StakePercent);\r\nspec[tr.n3].BeneficiaryStake = tr.n4;\r\nspec[tr.n3].ExtensionLimit = _expire;\r\nspec[tr.n3].CreationBlock = block.number;\r\ntr.n5 = add(block.number,_expire);\r\nspec[tr.n3].ExpirationBlock = tr.n5;\r\nspec[tr.n3].BondWriter = msg.sender;\r\nspec[tr.n3].BondBeneficiary = _bene;\r\n/*create writer record*/\r\nuser[msg.sender].TransactionNum += 1;\r\ntr.n6 = user[msg.sender].TransactionNum;\r\ntracker[msg.sender][tr.n6].BondNum = tr.n3;\r\n/*create beneficiary record*/\r\nuser[_bene].TransactionNum += 1;\r\ntr.n7 = user[_bene].TransactionNum;\r\ntracker[_bene][tr.n7].BondNum = tr.n3;\r\n/*create arbitration record*/\r\nagree[tr.n3].Arbiter = _arbi;\r\nagree[tr.n3].Writer = true;\r\n/*determine transaction fees*/\r\ntr.n0 = Percent(msg.value,config[ContractAddr].ContractFee);\r\nid.c0 = Percent(msg.value,config[ContractAddr].ArbiterFee);\r\n/*transaction fees*/\r\nspec[tr.n3].CtrFee = tr.n0;\r\nspec[tr.n3].ArbFee = id.c0;\r\nreturn true;\r\n}    \r\n\r\n/*STOP OR ENABLE CHANGE OF BOND EXPIRATION TIME*/\r\nfunction ChangeExtension(uint256 _bondnum, bool _change) external returns(bool){\r\n/*integrity checks*/     \r\nrequire(spec[_bondnum].BondWriter == msg.sender);\r\n/*change record*/\r\nspec[_bondnum].StopExtension = _change;\r\nreturn true;\r\n} \r\n\r\n/*DEPOSIT BENEFICIARY STAKE*/\r\nfunction BeneficiaryStake(uint256 _bondnum) payable external returns(bool){\r\n/*integrity checks*/\r\nif(msg.value <= 0) revert();\r\nrequire(spec[_bondnum].BondBeneficiary == msg.sender);\r\nrequire(spec[_bondnum].ExpirationBlock >= block.number);\r\nrequire(spec[_bondnum].Activated == false);\r\nrequire(settle[_bondnum].WriterSettled == false);\r\nrequire(msg.value >= spec[_bondnum].BeneficiaryStake);\r\n/*change record*/\r\nspec[_bondnum].Activated = true;\r\nspec[_bondnum].BeneficiaryDeposit = msg.value;\r\nreturn true;\r\n} \r\n\r\n/*APPOINT ARBITRATOR*/\r\nfunction Appoint(uint256 _bondnum, address _arbi) external returns(bool){\r\n/*integrity checks*/\r\nrequire(arbiter[_arbi].Registered == true); \r\nif((agree[_bondnum].Writer ==true) && (agree[_bondnum].Beneficiary == true)) revert();\r\n/*bond beneficiary appointment*/     \r\nif(spec[_bondnum].BondBeneficiary == msg.sender){\r\nagree[_bondnum].Arbiter = _arbi;\r\nagree[_bondnum].Beneficiary = true;\r\nagree[_bondnum].Writer = false;\r\n}\r\n/*bond writer appointment*/     \r\nif(spec[_bondnum].BondWriter == msg.sender){\r\nagree[_bondnum].Arbiter = _arbi;\r\nagree[_bondnum].Writer = true;\r\nagree[_bondnum].Beneficiary = false;\r\n}\r\nreturn true;\r\n} \r\n\r\n/*FILE A DISPUTE*/\r\nfunction Dispute(uint256 _bondnum) external returns(bool){\r\n/*integrity checks*/     \r\nrequire(spec[_bondnum].Activated == true);\r\nrequire(settle[_bondnum].WriterSettled == false);    \r\nrequire(settle[_bondnum].BeneficiarySettled == false);      \r\n/*bond beneficiary*/     \r\nif(spec[_bondnum].BondBeneficiary == msg.sender){\r\nspec[_bondnum].Dispute = true;\r\n}\r\n/*bond writer*/     \r\nif(spec[_bondnum].BondWriter == msg.sender){\r\nspec[_bondnum].Dispute = true;\r\n}\r\nreturn true;\r\n} \r\n\r\n/*APPROVE ARBITRATOR*/\r\nfunction Approve(uint256 _bondnum) external returns(bool){\r\n/*bond beneficiary approve*/     \r\nif(spec[_bondnum].BondBeneficiary == msg.sender){\r\nagree[_bondnum].Beneficiary = true;\r\n}\r\n/*bond writer approve*/     \r\nif(spec[_bondnum].BondWriter == msg.sender){\r\nagree[_bondnum].Writer = true;\r\n}\r\nreturn true;\r\n} \r\n\r\n/*ARBITRATOR JUDGEMENT*/\r\nfunction Judgement(uint256 _bondnum, uint256 writer_, uint256 bene_) external returns(bool){\r\n/*integrity check-1*/ \r\nrequire(spec[_bondnum].Dispute == true);\r\nrequire(agree[_bondnum].Arbiter == msg.sender);\r\nrequire(agree[_bondnum].Writer == true);\r\nrequire(agree[_bondnum].Beneficiary == true);\r\nrequire(settle[_bondnum].Judgement == false);\r\n/*change judgement status*/\r\nsettle[_bondnum].Judgement = true;\r\n/*integrity check-2*/\r\ntr.n8 = add(spec[_bondnum].WriterDeposit,spec[_bondnum].BeneficiaryDeposit);\r\ntr.n9 = add(writer_,bene_);\r\nassert(tr.n9 <= tr.n8);\r\n/*assign judgement values*/\r\nsettle[_bondnum].Writer = writer_;\r\nsettle[_bondnum].Beneficiary = bene_;\r\nreturn true;\r\n} \r\n\r\n/*EXTEND PERFORMANCE BOND EXPIRATION TIME*/\r\nfunction Extend(uint256 _bondnum, uint256 _blocks) external returns(bool){\r\n/*integrity checks*/  \r\nrequire(spec[_bondnum].StopExtension == false);\r\nrequire(spec[_bondnum].BondBeneficiary == msg.sender);\r\nrequire(spec[_bondnum].ExpirationBlock >= block.number);\r\nrequire(_blocks <= spec[_bondnum].ExtensionLimit);\r\n/*change record*/\r\nspec[_bondnum].ExpirationBlock = add(block.number,_blocks);\r\nreturn true;\r\n} \r\n\r\n/*SETTLE PERFORMANCE BOND*/\r\nfunction SettleBond(uint256 _bondnum) external returns(bool){\r\n/*determine transaction fees*/     \r\nid.c1 = spec[_bondnum].CtrFee;\r\nid.c2 = spec[_bondnum].ArbFee;\r\nid.c3 = add(id.c1,id.c2);\r\n\r\n/*non-activated bond: bond writer*/\r\nif((spec[_bondnum].BondWriter == msg.sender) && (spec[_bondnum].Activated == false)){\r\n/*integrity checks*/ \r\nrequire(settle[_bondnum].WriterSettled == false);\r\n/*change writer settlement status*/\r\nsettle[_bondnum].WriterSettled = true;\r\n/*settle performnace bond*/\r\nmsg.sender.transfer(spec[_bondnum].WriterDeposit);\r\nassert(settle[_bondnum].WriterSettled == true);\r\n}\r\n\r\n/*activated bond is not disputed: bond writer*/\r\nif((block.number > spec[_bondnum].ExpirationBlock) && (spec[_bondnum].Dispute == false)\r\n&& (spec[_bondnum].BondWriter == msg.sender) && (spec[_bondnum].Activated == true)){\r\n/*integrity checks*/ \r\nrequire(settle[_bondnum].WriterSettled == false);\r\n/*change writer settlement status*/\r\nsettle[_bondnum].WriterSettled = true;\r\n/*settle performnace bond*/\r\nid.c4 = sub(spec[_bondnum].WriterDeposit,id.c3);\r\nconfig[ContractAddr].Banker.transfer(id.c1);\r\nagree[_bondnum].Arbiter.transfer(id.c2);\r\nmsg.sender.transfer(id.c4);\r\nassert(settle[_bondnum].WriterSettled == true);\r\n}/*bond writer: bond not disputed*/\r\n\r\n/*bond is disputed: bond writer*/\r\nif((settle[_bondnum].Judgement == true) && (spec[_bondnum].Dispute == true)\r\n&& (spec[_bondnum].BondWriter == msg.sender)){\r\n/*integrity checks*/ \r\nrequire(settle[_bondnum].WriterSettled == false);\r\n/*change writer settlement status*/\r\nsettle[_bondnum].WriterSettled = true;\r\n/*writer can pay fees*/\r\nif(settle[_bondnum].Writer > id.c3){\r\nid.c5 = sub(settle[_bondnum].Writer,id.c3);\r\nconfig[ContractAddr].Banker.transfer(id.c1);\r\nagree[_bondnum].Arbiter.transfer(id.c2);\r\nmsg.sender.transfer(id.c5);\r\n}/*writer can pay fees*/\r\nassert(settle[_bondnum].WriterSettled == true);\r\n}\r\n\r\n/*bond is disputed: bond beneficiary*/\r\nif((settle[_bondnum].Judgement == true) && (spec[_bondnum].Dispute == true)\r\n&& (spec[_bondnum].BondBeneficiary == msg.sender)){\r\n/*integrity checks*/ \r\nrequire(settle[_bondnum].BeneficiarySettled == false);\r\n/*change beneficiary settlement status*/\r\nsettle[_bondnum].BeneficiarySettled = true;\r\n/*beneficiary can pay fees*/\r\nif(settle[_bondnum].Beneficiary > id.c3){\r\nid.c6 = sub(settle[_bondnum].Beneficiary,id.c3);\r\nconfig[ContractAddr].Banker.transfer(id.c1);\r\nagree[_bondnum].Arbiter.transfer(id.c2);\r\nmsg.sender.transfer(id.c6);\r\n}/*bond beneficiary can pay fees*/\r\nassert(settle[_bondnum].BeneficiarySettled == true);\r\n}\r\n\r\n/*activated bond is not disputed: bond beneficiary*/\r\nif((block.number > spec[_bondnum].ExpirationBlock) && (spec[_bondnum].Dispute == false)\r\n&& (spec[_bondnum].BondBeneficiary == msg.sender) && (spec[_bondnum].Activated == true)){\r\n/*integrity checks*/ \r\nrequire(settle[_bondnum].BeneficiarySettled == false);\r\n/*change writer settlement status*/\r\nsettle[_bondnum].BeneficiarySettled = true;\r\n/*settle performnace bond*/\r\nid.c7 = sub(spec[_bondnum].BeneficiaryDeposit,id.c3);\r\nconfig[ContractAddr].Banker.transfer(id.c1);\r\nagree[_bondnum].Arbiter.transfer(id.c2);\r\nmsg.sender.transfer(id.c7);\r\nassert(settle[_bondnum].BeneficiarySettled == true);\r\n}/*bond beneficiary: no dispute*/\r\n\r\nreturn true;\r\n}/*end of settle bond*/ \r\n\r\n/*INVALID TRANSACTIONS*/\r\nfunction () payable external{\r\nrevert();  \r\n}\r\n\r\n/*SAFE MATHS*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  \r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }  \r\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n}////////////////////////////////end of PerformanceBond contract","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[{\"name\":\"ArbiterFee\",\"type\":\"uint256\"},{\"name\":\"ContractFee\",\"type\":\"uint256\"},{\"name\":\"StakePercent\",\"type\":\"uint256\"},{\"name\":\"Banker\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bondnum\",\"type\":\"uint256\"},{\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bond\",\"outputs\":[{\"name\":\"BondNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"name\":\"Authorised\",\"type\":\"bool\"},{\"name\":\"Level\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_authority\",\"type\":\"bool\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"AuthAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bondnum\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bondnum\",\"type\":\"uint256\"}],\"name\":\"Dispute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bondnum\",\"type\":\"uint256\"}],\"name\":\"SettleBond\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_afee\",\"type\":\"uint256\"},{\"name\":\"_cfee\",\"type\":\"uint256\"},{\"name\":\"_spercent\",\"type\":\"uint256\"},{\"name\":\"_banker\",\"type\":\"address\"}],\"name\":\"SetUp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"name\":\"TransactionNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"name\":\"Writer\",\"type\":\"uint256\"},{\"name\":\"Beneficiary\",\"type\":\"uint256\"},{\"name\":\"WriterSettled\",\"type\":\"bool\"},{\"name\":\"BeneficiarySettled\",\"type\":\"bool\"},{\"name\":\"Judgement\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"spec\",\"outputs\":[{\"name\":\"WriterDeposit\",\"type\":\"uint256\"},{\"name\":\"BeneficiaryStake\",\"type\":\"uint256\"},{\"name\":\"BeneficiaryDeposit\",\"type\":\"uint256\"},{\"name\":\"ExtensionLimit\",\"type\":\"uint256\"},{\"name\":\"CreationBlock\",\"type\":\"uint256\"},{\"name\":\"ExpirationBlock\",\"type\":\"uint256\"},{\"name\":\"BondWriter\",\"type\":\"address\"},{\"name\":\"BondBeneficiary\",\"type\":\"address\"},{\"name\":\"StopExtension\",\"type\":\"bool\"},{\"name\":\"Activated\",\"type\":\"bool\"},{\"name\":\"Dispute\",\"type\":\"bool\"},{\"name\":\"CtrFee\",\"type\":\"uint256\"},{\"name\":\"ArbFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bondnum\",\"type\":\"uint256\"},{\"name\":\"_change\",\"type\":\"bool\"}],\"name\":\"ChangeExtension\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bondnum\",\"type\":\"uint256\"},{\"name\":\"writer_\",\"type\":\"uint256\"},{\"name\":\"bene_\",\"type\":\"uint256\"}],\"name\":\"Judgement\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bondnum\",\"type\":\"uint256\"},{\"name\":\"_arbi\",\"type\":\"address\"}],\"name\":\"Appoint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bondnum\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryStake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tracker\",\"outputs\":[{\"name\":\"BondNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"arbiter_\",\"type\":\"address\"},{\"name\":\"authority_\",\"type\":\"bool\"}],\"name\":\"Register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"arbiter\",\"outputs\":[{\"name\":\"Registered\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agree\",\"outputs\":[{\"name\":\"Arbiter\",\"type\":\"address\"},{\"name\":\"Writer\",\"type\":\"bool\"},{\"name\":\"Beneficiary\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_expire\",\"type\":\"uint256\"},{\"name\":\"_bene\",\"type\":\"address\"},{\"name\":\"_arbi\",\"type\":\"address\"}],\"name\":\"WriteBond\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"PerformanceBond","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e10ae0e6475c141becc21ae11dedd71519fded4f4cf6456ee58b5b45071260f1"}]}