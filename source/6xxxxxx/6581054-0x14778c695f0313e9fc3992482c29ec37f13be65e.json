{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/* \r\nProject pandora\r\nThe automatic Ethereum smart contract\r\nAbsolute transparency\r\nhttps://pandora.gives\r\n*/\r\n\r\ncontract Pandora {\r\n    using SafeMath for uint256;\r\n    // There is day percent 2%.\r\n    uint constant DAY_PERC = 2;\r\n    // There is marketing address\r\n    address constant marketing = 0xf3b7229fD298031C39D4368066cc7995649f321b;\r\n    // There is return message value\r\n    uint constant RETURN_DEPOSIT = 0.000911 ether;\r\n    // There is return persent\r\n    uint constant RETURN_PERCENT = 60;\r\n    \r\n    struct Investor {\r\n        uint invested;\r\n        uint paid;\r\n        address referral;\r\n        uint lastBlockReward;\r\n    }\r\n    \r\n    mapping (address => Investor) public investors;\r\n    \r\n    function() public payable {\r\n        \r\n        if(msg.value == 0) {\r\n            payReward();\r\n        }else{\r\n            \r\n            if (msg.value == RETURN_DEPOSIT){\r\n                returnDeposit();\r\n            }else {\r\n                \r\n                if (investors[msg.sender].invested == 0){\r\n                    addInvestor();\r\n                }else{\r\n                    payReward();\r\n                }\r\n                payToMarketingReferral();\r\n            }\r\n        }\r\n    }\r\n    \r\n    function addInvestor() internal   {\r\n        address ref = marketing; \r\n        \r\n        if (msg.data.length != 0){\r\n            ref = bytesToAddress(msg.data); \r\n        }\r\n        \r\n        Investor memory investor;\r\n        \r\n        investor = Investor({\r\n            invested : msg.value,\r\n            paid : 0,\r\n            referral : ref,\r\n            lastBlockReward : block.number\r\n        });\r\n        \r\n        investors[msg.sender] = investor;\r\n        \r\n    }\r\n    \r\n    function payReward() internal {\r\n        Investor memory investor;\r\n        investor = investors[msg.sender];\r\n        \r\n        if (investor.invested != 0 && block.number != investor.lastBlockReward) {\r\n            uint getPay = investor.invested*DAY_PERC/100*(block.number-investor.lastBlockReward)/5900;\r\n            uint sumPay = getPay.add(investor.paid);\r\n            \r\n            if (sumPay > investor.invested.mul(2)) {\r\n                getPay = investor.invested.mul(2).sub(investor.paid);\r\n                investor.paid = 0;\r\n                investor.lastBlockReward = block.number;\r\n                investor.invested = msg.value;  \r\n            }else{\r\n                investor.paid += getPay;\r\n                investor.lastBlockReward = block.number;\r\n                investor.invested += msg.value;  \r\n            }\r\n            \r\n            investors[msg.sender] = investor;\r\n            \r\n            if(address(this).balance < getPay){\r\n                getPay = address(this).balance;\r\n            }\r\n            \r\n            msg.sender.transfer(getPay);\r\n        }\r\n    }\r\n    \r\n    function returnDeposit() internal {\r\n        \r\n            if (msg.value == RETURN_DEPOSIT){\r\n\r\n                Investor memory investor;\r\n                investor = investors[msg.sender];\r\n                \r\n                if (investor.invested != 0){\r\n                    uint getPay = ((investor.invested.sub(investor.paid)).mul(RETURN_PERCENT).div(100)).sub(msg.value);\r\n                    msg.sender.transfer(getPay);\r\n                    investor.paid = 0;\r\n                    investor.invested = 0;\r\n                    investors[msg.sender] = investor;\r\n                }\r\n            }\r\n    }\r\n    \r\n    function payToMarketingReferral() internal  {\r\n        address referral = investors[msg.sender].referral;\r\n        \r\n        if (referral == marketing)    {\r\n            marketing.send(msg.value / 10); \r\n        }else{\r\n            marketing.send(msg.value / 20); \r\n            referral.send(msg.value / 20); \r\n        }\r\n        \r\n    }\r\n    \r\n    function bytesToAddress(bytes _b) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(_b, 20))\r\n        }\r\n     }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"paid\",\"type\":\"uint256\"},{\"name\":\"referral\",\"type\":\"address\"},{\"name\":\"lastBlockReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Pandora","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cc1252341b411476b40a66737b3d847e9ba0bf6eec16ae43c1e08982cd50de22"}]}