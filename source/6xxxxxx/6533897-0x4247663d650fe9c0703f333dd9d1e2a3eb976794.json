{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract PowerBall is owned {\r\n using Strings for string;\r\n    struct Ticket {\r\n        address player;\r\n        uint id;\r\n        uint drawDate;\r\n\t\tuint price;\r\n\t\tstring balls;\r\n        uint16[] whiteBalls;\r\n        uint16 redBall;\r\n    }\r\n    \r\n    struct Player {\r\n        address id;\r\n\t\tuint ticketCount;\r\n        uint[] arrayIdTickets;\r\n\t\tstring ticketId;\r\n    }\r\n    \r\n\tstruct Draws {\r\n        uint drawId;\r\n\t\tuint ticketCount;\r\n\t\tuint revenue;\r\n        uint[] arrayIdTickets;\r\n\t\tstring ticketId;\r\n\t\tuint8 Special; //match 4 balls + power ball\r\n        uint8 First; //match 3 balls + power ball\r\n\t\tuint8 Second; //match 2 balls + power ball\r\n\t\tuint8 Third; //match 1 balls + power ball\r\n        string Result;\r\n    }\r\n\t\r\n\tstruct TicketInfo{\r\n\t\tuint priceTicket;\r\n\t\tuint8 specialPrize;\r\n\t\tuint8 firstPrize;\r\n\t\tuint8 secondPrize;\r\n\t\tuint8 thirdPrize;\r\n\t}\r\n\t\r\n\tstruct PrizeInfo{\r\n\t\tuint specialPrize;\r\n\t\tuint firstPrize;\r\n\t\tuint secondPrize;\r\n\t\tuint thirdPrize;\r\n\t}\r\n\t\r\n    bool acceptTicket = false;\r\n    TicketInfo public ticketInfo;\r\n    uint idTicket = 0;\r\n    uint16 numBall = 5;\r\n\tuint16 maxRedBall = 26;\r\n\tuint16 maxNumBall = 70;\r\n\tPrizeInfo public prizes;\r\n    mapping (uint => Ticket) public tickets;\r\n\tmapping (address => Player) public players;\r\n\tmapping (uint => Draws) public draws;\r\n\t\r\n    \r\n\tmodifier isAcceptTicket(uint16[] balls) {\r\n\t\trequire(balls.length >= numBall );\r\n\t\trequire(balls.length % numBall == 0);\r\n\t\t_;\r\n\t}\r\n    \r\n    \r\n    event logBuyTicketSumary(\r\n        address user,\r\n        uint[] ticketId,\r\n\t\tuint drawDate\r\n    );\r\n    \r\n\tconstructor() public{\r\n\t\tticketInfo.priceTicket  = 10000; \t\t// 10 GM\r\n\t\tticketInfo.specialPrize = 30; \t\t\t//30 percent\r\n\t\tticketInfo.firstPrize = 2; \t\t\t\t//2 percent\r\n\t\tticketInfo.secondPrize = 5; \t\t\t//5 percent\r\n\t\tticketInfo.thirdPrize = 8; \t\t\t\t//8 percent\r\n\t}\r\n\t\r\n\tfunction setTicketInfo(uint price, uint8 specialPrize, uint8 firstPrize, uint8 secondPrize, uint8 thirdPrize)\r\n\tpublic\r\n\tonlyOwner\r\n\t{\r\n\t\tticketInfo.priceTicket  = price; \t\t\r\n\t\tticketInfo.specialPrize = specialPrize; \r\n\t\tticketInfo.firstPrize = firstPrize; \t\r\n\t\tticketInfo.secondPrize = secondPrize; \t\r\n\t\tticketInfo.thirdPrize = thirdPrize; \t\r\n\t}\r\n\t\r\n\tfunction DrawResult(uint16[] result, uint drawDate, uint8 special, uint8 first,uint8 second, uint8 third)\r\n\tpublic\r\n\tonlyOwner\r\n\t{\r\n\t\t\r\n\t\trequire(draws[drawDate].revenue != 0);\r\n\t\trequire(result.length == numBall);\r\n\t\tbytes memory emptyResult = bytes(draws[drawDate].Result);\r\n\t\tif(emptyResult.length == 0){\r\n\t\t\tuint spe = 0;\r\n\t\t\tuint fst = 0;\r\n\t\t\tuint snd = 0;\r\n\t\t\tuint thr = 0;\r\n\t\t\tif(special == 0)\r\n\t\t\t\tspe = prizes.specialPrize + (draws[drawDate].revenue *  ticketInfo.specialPrize);\r\n\t\t\tif(first == 0)\r\n\t\t\t\tfst = prizes.firstPrize + (draws[drawDate].revenue *  ticketInfo.firstPrize);\r\n\t\t\tif(second == 0)\r\n\t\t\t\tsnd = prizes.secondPrize + (draws[drawDate].revenue *  ticketInfo.secondPrize);\r\n\t\t\tif(third == 0)\r\n\t\t\t\tthr = prizes.thirdPrize + (draws[drawDate].revenue *  ticketInfo.thirdPrize);\r\n\t\t\tPrizes(spe,fst,snd,thr);\r\n\t\t}\r\n\t\tstring memory rs = \"\";\r\n\t\tfor(uint8 i=0; i<result.length; i++){\r\n\t\t\trs = rs.append(uint2str(result[i]));\r\n\t\t}\r\n\t\tdraws[drawDate].Result = rs;\r\n\t\tdraws[drawDate].Special = special;\r\n\t\tdraws[drawDate].First = first;\r\n\t\tdraws[drawDate].Second = second;\r\n\t\tdraws[drawDate].Third = third;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n    function giveTicket(address user, uint16[] balls, uint drawDate) \r\n\t    public \r\n\t\tonlyOwner\r\n\t    isAcceptTicket(balls)\r\n\t{\r\n\t   \r\n\t\taddress id = user;\r\n\t\tuint[] memory totalId = new uint[](balls.length / numBall);\r\n\t\tfor(uint16 i =0; i<balls.length; i += numBall){\r\n\t\t\tidTicket++;\r\n\t\t\tuint16[] memory wb = new uint16[](numBall -1);\r\n\t\t\tstring memory _balls = \"\";\r\n\t\t\tfor(uint16 j = 0; j< numBall -1; j++){\r\n\t\t\t\tuint16 ball = i  + j;\r\n\t\t\t\twb[j] = balls[ball];\r\n\t\t\t\t_balls = _balls.append(uint2str(balls[ball]));\r\n\t\t\t}\r\n\t\t\t bool bMatch = true;\r\n\t\t\tif(wb.length == numBall-1){\r\n\t\t\t\tbMatch = checkBalls(wb);\r\n\t\t\t}\r\n\t\t\trequire (!bMatch);\t\t\r\n\t\t\tuint16 rb = balls[i + numBall -1];\r\n\t\t\trequire(checkRedBall(rb));\r\n\t\t\t// create ticket\r\n\t\t\tTicket memory ticket = Ticket({\r\n\t\t\t\tplayer: id,\r\n\t\t\t\tid: idTicket,\r\n\t\t\t\tdrawDate: drawDate,\r\n\t\t\t\tprice: ticketInfo.priceTicket,\r\n\t\t\t\tballs:_balls,\r\n\t\t\t\twhiteBalls:wb,\r\n\t\t\t\tredBall:rb\r\n\t\t\t});\r\n\t\t\tplayers[id].arrayIdTickets.push(idTicket);\r\n\t\t\tplayers[id].id = id;\r\n\t\t\tplayers[id].ticketCount = players[id].arrayIdTickets.length;\r\n\t\t\tplayers[id].ticketId = players[id].ticketId.append(uint2str(uint(idTicket)));\r\n\t\t\t\r\n\t\t\tdraws[drawDate].arrayIdTickets.push(idTicket);\r\n\t\t\tdraws[drawDate].drawId = drawDate;\r\n\t\t\tdraws[drawDate].ticketCount = draws[drawDate].arrayIdTickets.length;\r\n\t\t\tdraws[drawDate].ticketId = draws[drawDate].ticketId.append(uint2str(uint(idTicket)));\r\n\t\t\tdraws[drawDate].revenue += ticket.price;\r\n\t\t\t\r\n\t\t\ttickets[idTicket] = ticket;\r\n\t\t\ttotalId[i/numBall] = idTicket;\r\n\t\t}\r\n\t\temit logBuyTicketSumary(id,totalId,drawDate);\r\n\t}\r\n\t\r\n    function buyTicket(uint16[] balls, uint drawDate) \r\n\t    public \r\n\t    isAcceptTicket(balls)\r\n\t{\r\n\t   \r\n\t\taddress id = msg.sender;\r\n\t\tuint[] memory totalId = new uint[](balls.length / numBall);\r\n\t\tfor(uint16 i =0; i<balls.length; i += numBall){\r\n\t\t\tidTicket++;\r\n\t\t\tuint16[] memory wb = new uint16[](numBall -1);\r\n\t\t\tstring memory _balls = \"\";\r\n\t\t\tfor(uint16 j = 0; j< numBall -1; j++){\r\n\t\t\t\tuint16 ball = i  + j;\r\n\t\t\t\twb[j] = balls[ball];\r\n\t\t\t\t_balls = _balls.append(uint2str(balls[ball]));\r\n\t\t\t}\r\n\t\t\t bool bMatch = true;\r\n\t\t\tif(wb.length == numBall-1){\r\n\t\t\t\tbMatch = checkBalls(wb);\r\n\t\t\t}\r\n\t\t\trequire (!bMatch);\t\t\r\n\t\t\tuint16 rb = balls[i + numBall -1];\r\n\t\t\trequire(checkRedBall(rb));\r\n\t\t\t// create ticket\r\n\t\t\tTicket memory ticket = Ticket({\r\n\t\t\t\tplayer: id,\r\n\t\t\t\tid: idTicket,\r\n\t\t\t\tdrawDate: drawDate,\r\n\t\t\t\tprice: ticketInfo.priceTicket,\r\n\t\t\t\tballs:_balls,\r\n\t\t\t\twhiteBalls:wb,\r\n\t\t\t\tredBall:rb\r\n\t\t\t});\r\n\t\t\tplayers[id].arrayIdTickets.push(idTicket);\r\n\t\t\tplayers[id].id = id;\r\n\t\t\tplayers[id].ticketCount = players[id].arrayIdTickets.length;\r\n\t\t\tplayers[id].ticketId = players[id].ticketId.append(uint2str(uint(idTicket)));\r\n\t\t\t\r\n\t\t\tdraws[drawDate].arrayIdTickets.push(idTicket);\r\n\t\t\tdraws[drawDate].drawId = drawDate;\r\n\t\t\tdraws[drawDate].ticketCount = draws[drawDate].arrayIdTickets.length;\r\n\t\t\tdraws[drawDate].ticketId = draws[drawDate].ticketId.append(uint2str(uint(idTicket)));\r\n\t\t\tdraws[drawDate].revenue += ticket.price;\r\n\t\t\t\r\n\t\t\ttickets[idTicket] = ticket;\r\n\t\t\ttotalId[i/numBall] = idTicket;\r\n\t\t}\r\n\t\temit logBuyTicketSumary(id,totalId,drawDate);\r\n\t}\r\n\t\r\n\tfunction getTicket(uint id) internal view returns(uint drawDate,string ballNum){\r\n\t\tuint16[] storage  balls = tickets[id].whiteBalls;\r\n\t\tfor(uint8 i=0; i < balls.length; i++){\r\n\t\t\tballNum = ballNum.concat(uint2str(balls[i]));\r\n\t\t\tballNum = ballNum.concat(\"-\");\r\n\t\t}\r\n\t\tuint16 redb = tickets[id].redBall;\r\n\t\tballNum = ballNum.concat(uint2str(redb));\r\n\t\tdrawDate = tickets[id].drawDate;\r\n\t}\r\n\t\r\n\tfunction viewTicket(uint id) internal view returns(uint drawDate, string ballNum){\r\n\t\tuint16[] storage  balls = tickets[id].whiteBalls;\r\n\t\tfor(uint8 i=0; i < balls.length; i++){\r\n\t\t\tballNum = ballNum.append(uint2str(balls[i]));\r\n\t\t}\r\n\t\tuint16 redb = tickets[id].redBall;\r\n\t\tballNum = ballNum.append(uint2str(redb));\r\n\t\tdrawDate = tickets[id].drawDate;\r\n\t}\r\n\tfunction checkRedBall(uint16 ball) private view returns (bool){\r\n\t\treturn(ball <= maxRedBall);\r\n\t}\r\n\t\r\n\tfunction checkBalls(uint16[] ar) private view returns (bool){\r\n        bool bMatch = false;\r\n        uint8 i = uint8(numBall-1);\r\n        uint8 j = uint8(numBall-1);\r\n        \r\n        while (i > 0) {\r\n            i--;\r\n            j = uint8(numBall-1);\r\n            uint16 num1 = ar[i];\r\n\t\t\trequire(num1 <= maxNumBall);\r\n            while (j > 0) {\r\n                j--;\r\n                uint16 num2 = ar[j];\r\n\t\t\t\trequire(num2 <= maxNumBall);\r\n                if(num1 == num2 && i != j){\r\n                    bMatch = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(bMatch){\r\n                break;\r\n            }\r\n        }\r\n        \r\n       return bMatch;\r\n    }\r\n\tfunction checkRevenue(uint drawDate)\r\n\tpublic \r\n\tonlyOwner\r\n\t{\r\n\t\trequire(draws[drawDate].revenue > 0);\r\n\t\tuint[] memory ids = draws[drawDate].arrayIdTickets;\r\n\t\tdraws[drawDate].revenue = 0;\r\n\t\tfor(uint16 i = 0; i< ids.length; i++){\r\n\t\t\tdraws[drawDate].revenue += tickets[ids[i]].price;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction Prizes(uint spe, uint fst, uint snd, uint thr)\r\n\tpublic \r\n\tonlyOwner\r\n\t{\r\n\t\tprizes.specialPrize = spe;\r\n\t\tprizes.firstPrize = fst;\r\n\t\tprizes.secondPrize = snd;\r\n\t\tprizes.thirdPrize = thr;\r\n\t}\r\n\t\r\n\tfunction uint2str(uint i) internal pure returns (string){\r\n\t\tif (i == 0) return \"0\";\r\n\t\tuint j = i;\r\n\t\tuint length;\r\n\t\twhile (j != 0){\r\n\t\t\tlength++;\r\n\t\t\tj /= 10;\r\n\t\t}\r\n\t\tbytes memory bstr = new bytes(length);\r\n\t\tuint k = length - 1;\r\n\t\twhile (i != 0){\r\n\t\t\tbstr[k--] = byte(48 + i % 10);\r\n\t\t\ti /= 10;\r\n\t\t}\r\n\t\treturn string(bstr);\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\nlibrary Strings {\r\n\tfunction append(string _base, string _value)  internal pure returns (string) {\r\n\t\treturn string(abi.encodePacked(_base,\"[\",_value,\"]\",\" \"));\r\n\t}\r\n\r\n    function concat(string _base, string _value) internal pure returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        string memory _tmpValue = new string(_baseBytes.length + _valueBytes.length);\r\n        bytes memory _newValue = bytes(_tmpValue);\r\n\r\n        uint i;\r\n        uint j;\r\n\r\n        for(i=0; i<_baseBytes.length; i++) {\r\n            _newValue[j++] = _baseBytes[i];\r\n        }\r\n\r\n        for(i=0; i<_valueBytes.length; i++) {\r\n            _newValue[j++] = _valueBytes[i];\r\n        }\r\n\r\n        return string(_newValue);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"draws\",\"outputs\":[{\"name\":\"drawId\",\"type\":\"uint256\"},{\"name\":\"ticketCount\",\"type\":\"uint256\"},{\"name\":\"revenue\",\"type\":\"uint256\"},{\"name\":\"ticketId\",\"type\":\"string\"},{\"name\":\"Special\",\"type\":\"uint8\"},{\"name\":\"First\",\"type\":\"uint8\"},{\"name\":\"Second\",\"type\":\"uint8\"},{\"name\":\"Third\",\"type\":\"uint8\"},{\"name\":\"Result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"specialPrize\",\"type\":\"uint8\"},{\"name\":\"firstPrize\",\"type\":\"uint8\"},{\"name\":\"secondPrize\",\"type\":\"uint8\"},{\"name\":\"thirdPrize\",\"type\":\"uint8\"}],\"name\":\"setTicketInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizes\",\"outputs\":[{\"name\":\"specialPrize\",\"type\":\"uint256\"},{\"name\":\"firstPrize\",\"type\":\"uint256\"},{\"name\":\"secondPrize\",\"type\":\"uint256\"},{\"name\":\"thirdPrize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"drawDate\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"balls\",\"type\":\"string\"},{\"name\":\"redBall\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"balls\",\"type\":\"uint16[]\"},{\"name\":\"drawDate\",\"type\":\"uint256\"}],\"name\":\"giveTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"drawDate\",\"type\":\"uint256\"}],\"name\":\"checkRevenue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"balls\",\"type\":\"uint16[]\"},{\"name\":\"drawDate\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spe\",\"type\":\"uint256\"},{\"name\":\"fst\",\"type\":\"uint256\"},{\"name\":\"snd\",\"type\":\"uint256\"},{\"name\":\"thr\",\"type\":\"uint256\"}],\"name\":\"Prizes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"result\",\"type\":\"uint16[]\"},{\"name\":\"drawDate\",\"type\":\"uint256\"},{\"name\":\"special\",\"type\":\"uint8\"},{\"name\":\"first\",\"type\":\"uint8\"},{\"name\":\"second\",\"type\":\"uint8\"},{\"name\":\"third\",\"type\":\"uint8\"}],\"name\":\"DrawResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"id\",\"type\":\"address\"},{\"name\":\"ticketCount\",\"type\":\"uint256\"},{\"name\":\"ticketId\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketInfo\",\"outputs\":[{\"name\":\"priceTicket\",\"type\":\"uint256\"},{\"name\":\"specialPrize\",\"type\":\"uint8\"},{\"name\":\"firstPrize\",\"type\":\"uint8\"},{\"name\":\"secondPrize\",\"type\":\"uint8\"},{\"name\":\"thirdPrize\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticketId\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"drawDate\",\"type\":\"uint256\"}],\"name\":\"logBuyTicketSumary\",\"type\":\"event\"}]","ContractName":"PowerBall","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2af00a259bce59251d4fb0640aba520ed04f99b30714475eccde07dc607d5cca"}]}