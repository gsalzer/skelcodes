{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Token {\r\n    function mintTokens(address _atAddress, uint256 _amount) public;\r\n\r\n}\r\n\r\ncontract MultipleVesting is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Grant {\r\n        uint256 start;\r\n        uint256 cliff;\r\n        uint256 duration;\r\n        uint256 value;\r\n        uint256 transferred;\r\n        bool revocable;\r\n    }\r\n\r\n    mapping (address => Grant) public grants;\r\n    mapping (uint256 => address) public indexedGrants;\r\n    uint256 public index;\r\n    uint256 public totalVesting;\r\n    ERC20Token token;\r\n\r\n    event NewGrant(address indexed _address, uint256 _value);\r\n    event UnlockGrant(address indexed _holder, uint256 _value);\r\n    event RevokeGrant(address indexed _holder, uint256 _refund);\r\n\r\n    function setToken(address _token) public onlyOwner {\r\n        token = ERC20Token(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to add new grant\r\n     * @param _address Address of grant\r\n     * @param _start Start time of vesting in timestamp\r\n     * @param _cliff Cliff in timestamp\r\n     * @param _duration End of vesting in timestamp\r\n     * @param _value Number of tokens to be vested\r\n     * @param _revocable Can grant be revoked\r\n     */\r\n    function newGrant(address _address, uint256 _start, uint256 _cliff, uint256 _duration, uint256 _value, bool _revocable) public onlyOwner {\r\n        if(grants[_address].value == 0) {\r\n            indexedGrants[index] = _address;\r\n            index = index.add(1);\r\n        }\r\n        grants[_address] = Grant({\r\n            start: _start,\r\n            cliff: _cliff,\r\n            duration: _duration,\r\n            value: _value,\r\n            transferred: 0,\r\n            revocable: _revocable\r\n            });\r\n\r\n        totalVesting = totalVesting.add(_value);\r\n        emit NewGrant(_address, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the curretn owner to revoke grant\r\n     * @param _grant Address of grant to be revoked\r\n     */\r\n    function revoke(address _grant) public onlyOwner {\r\n        Grant storage grant = grants[_grant];\r\n        require(grant.revocable);\r\n\r\n        uint256 refund = grant.value.sub(grant.transferred);\r\n\r\n        // Remove the grant.\r\n        delete grants[_grant];\r\n        totalVesting = totalVesting.sub(refund);\r\n\r\n        token.mintTokens(msg.sender, refund);\r\n        emit RevokeGrant(_grant, refund);\r\n    }\r\n\r\n    /**\r\n     * @dev Number of veset token for _holder on _time\r\n     * @param _holder Address of holder\r\n     * @param _time Timestamp of time to check for vest amount\r\n     */\r\n    function vestedTokens(address _holder, uint256 _time) public constant returns (uint256) {\r\n        Grant storage grant = grants[_holder];\r\n        if (grant.value == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return calculateVestedTokens(grant, _time);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of vested tokens\r\n     * @param _grant Grant to calculate for\r\n     * @param _time Timestamp of time to check for\r\n     */\r\n    function calculateVestedTokens(Grant _grant, uint256 _time) private pure returns (uint256) {\r\n        // If we're before the cliff, then nothing is vested.\r\n        if (_time < _grant.cliff) {\r\n            return 0;\r\n        }\r\n\r\n        // If we're after the end of the vesting period - everything is vested;\r\n        if (_time >= _grant.duration) {\r\n            return _grant.value;\r\n        }\r\n\r\n        // Interpolate all vested tokens: vestedTokens = tokens/// (time - start) / (end - start)\r\n        return _grant.value.mul(_time.sub(_grant.start)).div(_grant.duration.sub(_grant.start));\r\n    }\r\n\r\n    /**\r\n     * @dev Distribute tokens to grants\r\n     */\r\n    function vest() public onlyOwner {\r\n        for(uint16 i = 0; i < index; i++) {\r\n            Grant storage grant = grants[indexedGrants[i]];\r\n            if(grant.value == 0) continue;\r\n            uint256 vested = calculateVestedTokens(grant, now);\r\n            if (vested == 0) {\r\n                continue;\r\n            }\r\n\r\n            // Make sure the holder doesn't transfer more than what he already has.\r\n            uint256 transferable = vested.sub(grant.transferred);\r\n            if (transferable == 0) {\r\n                continue;\r\n            }\r\n\r\n            grant.transferred = grant.transferred.add(transferable);\r\n            totalVesting = totalVesting.sub(transferable);\r\n            token.mintTokens(indexedGrants[i], transferable);\r\n\r\n            emit UnlockGrant(msg.sender, transferable);\r\n        }\r\n    }\r\n\r\n    function unlockVestedTokens() public {\r\n        Grant storage grant = grants[msg.sender];\r\n        require(grant.value != 0);\r\n\r\n        // Get the total amount of vested tokens, acccording to grant.\r\n        uint256 vested = calculateVestedTokens(grant, now);\r\n        if (vested == 0) {\r\n            return;\r\n        }\r\n\r\n        // Make sure the holder doesn't transfer more than what he already has.\r\n        uint256 transferable = vested.sub(grant.transferred);\r\n        if (transferable == 0) {\r\n            return;\r\n        }\r\n\r\n        grant.transferred = grant.transferred.add(transferable);\r\n        totalVesting = totalVesting.sub(transferable);\r\n        token.mintTokens(msg.sender, transferable);\r\n\r\n        emit UnlockGrant(msg.sender, transferable);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_revocable\",\"type\":\"bool\"}],\"name\":\"newGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"vestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"vest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_grant\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexedGrants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"transferred\",\"type\":\"uint256\"},{\"name\":\"revocable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"NewGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"UnlockGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_refund\",\"type\":\"uint256\"}],\"name\":\"RevokeGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MultipleVesting","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ff5e8c3409e91fc32ce0446d66d9389ee288cd410c5098c9a0d99ededafd6a95"}]}