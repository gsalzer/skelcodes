{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n* Zlots Beta.\r\n*\r\n* Written August 2018 by the Zethr team for zethr.io.\r\n*\r\n* Code framework written by Norsefire.\r\n* EV Calculations by TropicalRogue.\r\n*\r\n* Rolling Odds:\r\n*   52.33%\tLose\t\r\n*   35.64%\tTwo Matching Icons\r\n*       - 5.09% : 2x    Multiplier [Two White Pyramids]\r\n*       - 5.09% : 2.5x  Multiplier [Two Gold  Pyramids]\r\n*       - 5.09% : 2.32x Multiplier [Two 'Z' Symbols]\r\n*       - 5.09% : 2.32x Multiplier [Two 'T' Symbols]\r\n*       - 5.09% : 2.32x Multiplier [Two 'H' Symbols]\r\n*       - 5.09% : 3.5x  Multiplier [Two Green Pyramids]\r\n*       - 5.09% : 3.75x Multiplier [Two Ether Icons]\r\n*   6.79%\tOne Of Each Pyramid\r\n*       - 1.5x  Multiplier\r\n*   2.94%\tOne Moon Icon\r\n*       - 12.5x Multiplier\r\n*   1.98%\tThree Matching Icons\r\n*       - 0.28% : 20x   Multiplier [Three White Pyramids]\r\n*       - 0.28% : 20x   Multiplier [Three Gold  Pyramids]\r\n*       - 0.28% : 25x   Multiplier [Three 'Z' Symbols]\r\n*       - 0.28% : 25x   Multiplier [Three 'T' Symbols]\r\n*       - 0.28% : 25x   Multiplier [Three 'H' Symbols]\r\n*       - 0.28% : 40x   Multiplier [Three Green Pyramids]\r\n*       - 0.28% : 50x   Multiplier [Three Ether Icons]\r\n*   0.28%\tZ T H Prize\r\n*       - 23.2x Multiplier\r\n*   0.03%\tTwo Moon Icons\r\n*       - 232x  Multiplier\r\n*   0.0001%\tThree Moon Grand Jackpot\r\n*       - 500x  Multiplier\r\n*\r\n*/\r\n\r\ncontract ZTHReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool);\r\n}\r\n\r\ncontract ZTHInterface {\r\n    function transfer(address _to, uint _value) public returns (bool);\r\n    function approve(address spender, uint tokens) public returns (bool);\r\n}\r\n\r\ncontract Zlots is ZTHReceivingContract {\r\n    using SafeMath for uint;\r\n\r\n    address private owner;\r\n    address private bankroll;\r\n\r\n    // How many bets have been made?\r\n    uint  totalSpins;\r\n    uint  totalZTHWagered;\r\n\r\n    // How many ZTH are in the contract?\r\n    uint contractBalance;\r\n\r\n    // Is betting allowed? (Administrative function, in the event of unforeseen bugs)\r\n    bool    public gameActive;\r\n\r\n    address private ZTHTKNADDR;\r\n    address private ZTHBANKROLL;\r\n    ZTHInterface private     ZTHTKN;\r\n\r\n    mapping (uint => bool) validTokenBet;\r\n\r\n    // Might as well notify everyone when the house takes its cut out.\r\n    event HouseRetrievedTake(\r\n        uint timeTaken,\r\n        uint tokensWithdrawn\r\n    );\r\n\r\n    // Fire an event whenever someone places a bet.\r\n    event TokensWagered(\r\n        address _wagerer,\r\n        uint _wagered\r\n    );\r\n\r\n    event LogResult(\r\n        address _wagerer,\r\n        uint _result,\r\n        uint _profit,\r\n        uint _wagered,\r\n        uint _category,\r\n        bool _win\r\n    );\r\n\r\n    // Result announcement events (to dictate UI output!)\r\n    event Loss(address _wagerer, uint _block);                  // Category 0\r\n    event ThreeMoonJackpot(address _wagerer, uint _block);      // Category 1\r\n    event TwoMoonPrize(address _wagerer, uint _block);          // Category 2\r\n    event ZTHJackpot(address _wagerer, uint _block);            // Category 3\r\n    event ThreeZSymbols(address _wagerer, uint _block);         // Category 4\r\n    event ThreeTSymbols(address _wagerer, uint _block);         // Category 5\r\n    event ThreeHSymbols(address _wagerer, uint _block);         // Category 6\r\n    event ThreeEtherIcons(address _wagerer, uint _block);       // Category 7\r\n    event ThreeGreenPyramids(address _wagerer, uint _block);    // Category 8\r\n    event ThreeGoldPyramids(address _wagerer, uint _block);     // Category 9\r\n    event ThreeWhitePyramids(address _wagerer, uint _block);    // Category 10\r\n    event OneMoonPrize(address _wagerer, uint _block);          // Category 11\r\n    event OneOfEachPyramidPrize(address _wagerer, uint _block); // Category 12\r\n    event TwoZSymbols(address _wagerer, uint _block);           // Category 13\r\n    event TwoTSymbols(address _wagerer, uint _block);           // Category 14\r\n    event TwoHSymbols(address _wagerer, uint _block);           // Category 15\r\n    event TwoEtherIcons(address _wagerer, uint _block);         // Category 16\r\n    event TwoGreenPyramids(address _wagerer, uint _block);      // Category 17\r\n    event TwoGoldPyramids(address _wagerer, uint _block);       // Category 18\r\n    event TwoWhitePyramids(address _wagerer, uint _block);      // Category 19\r\n    \r\n    event SpinConcluded(address _wagerer, uint _block);         // Debug event\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBankroll {\r\n        require(msg.sender == bankroll);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrBankroll {\r\n        require(msg.sender == owner || msg.sender == bankroll);\r\n        _;\r\n    }\r\n\r\n    // Requires game to be currently active\r\n    modifier gameIsActive {\r\n        require(gameActive == true);\r\n        _;\r\n    }\r\n\r\n    constructor(address ZethrAddress, address BankrollAddress) public {\r\n\r\n        // Set Zethr & Bankroll address from constructor params\r\n        ZTHTKNADDR = ZethrAddress;\r\n        ZTHBANKROLL = BankrollAddress;\r\n\r\n        // Set starting variables\r\n        owner         = msg.sender;\r\n        bankroll      = ZTHBANKROLL;\r\n\r\n        // Approve \"infinite\" token transfer to the bankroll, as part of Zethr game requirements.\r\n        ZTHTKN = ZTHInterface(ZTHTKNADDR);\r\n        ZTHTKN.approve(ZTHBANKROLL, 2**256 - 1);\r\n        \r\n        // For testing purposes. This is to be deleted on go-live. (see testingSelfDestruct)\r\n        ZTHTKN.approve(owner, 2**256 - 1);\r\n\r\n        // To start with, we only allow spins of 1, 5, 10, 25 or 50 ZTH.\r\n        validTokenBet[1e18]  = true;\r\n        validTokenBet[5e18]  = true;\r\n        validTokenBet[10e18] = true;\r\n        validTokenBet[25e18] = true;\r\n        validTokenBet[50e18] = true;\r\n\r\n        gameActive  = true;\r\n    }\r\n\r\n    // Zethr dividends gained are accumulated and sent to bankroll manually\r\n    function() public payable {  }\r\n\r\n    // If the contract receives tokens, bundle them up in a struct and fire them over to _spinTokens for validation.\r\n    struct TKN { address sender; uint value; }\r\n    function tokenFallback(address _from, uint _value, bytes /* _data */) public returns (bool){\r\n        if (_from == bankroll) {\r\n          // Update the contract balance\r\n          contractBalance = contractBalance.add(_value);    \r\n          return true;\r\n        } else {\r\n            TKN memory          _tkn;\r\n            _tkn.sender       = _from;\r\n            _tkn.value        = _value;\r\n            _spinTokens(_tkn);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    struct playerSpin {\r\n        uint200 tokenValue; // Token value in uint\r\n        uint56 blockn;      // Block number 48 bits\r\n    }\r\n\r\n    // Mapping because a player can do one spin at a time\r\n    mapping(address => playerSpin) public playerSpins;\r\n\r\n    // Execute spin.\r\n    function _spinTokens(TKN _tkn) private {\r\n\r\n        require(gameActive);\r\n        require(_zthToken(msg.sender));\r\n        require(validTokenBet[_tkn.value]);\r\n        require(jackpotGuard(_tkn.value));\r\n\r\n        require(_tkn.value < ((2 ** 200) - 1));   // Smaller than the storage of 1 uint200;\r\n        require(block.number < ((2 ** 56) - 1));  // Current block number smaller than storage of 1 uint56\r\n\r\n        address _customerAddress = _tkn.sender;\r\n        uint    _wagered         = _tkn.value;\r\n\r\n        playerSpin memory spin = playerSpins[_tkn.sender];\r\n\r\n        contractBalance = contractBalance.add(_wagered);\r\n\r\n        // Cannot spin twice in one block\r\n        require(block.number != spin.blockn);\r\n\r\n        // If there exists a spin, finish it\r\n        if (spin.blockn != 0) {\r\n          _finishSpin(_tkn.sender);\r\n        }\r\n\r\n        // Set struct block number and token value\r\n        spin.blockn = uint56(block.number);\r\n        spin.tokenValue = uint200(_wagered);\r\n\r\n        // Store the roll struct - 20k gas.\r\n        playerSpins[_tkn.sender] = spin;\r\n\r\n        // Increment total number of spins\r\n        totalSpins += 1;\r\n\r\n        // Total wagered\r\n        totalZTHWagered += _wagered;\r\n\r\n        emit TokensWagered(_customerAddress, _wagered);\r\n\r\n    }\r\n\r\n     // Finish the current spin of a player, if they have one\r\n    function finishSpin() public\r\n        gameIsActive\r\n        returns (uint)\r\n    {\r\n      return _finishSpin(msg.sender);\r\n    }\r\n\r\n    /*\r\n    * Pay winners, update contract balance, send rewards where applicable.\r\n    */\r\n    function _finishSpin(address target)\r\n        private returns (uint)\r\n    {\r\n        playerSpin memory spin = playerSpins[target];\r\n\r\n        require(spin.tokenValue > 0); // No re-entrancy\r\n        require(spin.blockn != block.number);\r\n\r\n        uint profit = 0;\r\n        uint category = 0;\r\n\r\n        // If the block is more than 255 blocks old, we can't get the result\r\n        // Also, if the result has already happened, fail as well\r\n        uint result;\r\n        if (block.number - spin.blockn > 255) {\r\n          result = 999999; // Can't win: default to largest number\r\n        } else {\r\n\r\n          // Generate a result - random based ONLY on a past block (future when submitted).\r\n          // Case statement barrier numbers defined by the current payment schema at the top of the contract.\r\n          result = random(1000000, spin.blockn, target);\r\n        }\r\n\r\n        if (result > 476661) {\r\n          // Player has lost.\r\n          emit Loss(target, spin.blockn);\r\n          emit LogResult(target, result, profit, spin.tokenValue, category, false);\r\n        } else {\r\n            if (result < 1) {\r\n                // Player has won the three-moon mega jackpot!\r\n                profit = SafeMath.mul(spin.tokenValue, 500);\r\n                category = 1;\r\n                emit ThreeMoonJackpot(target, spin.blockn);\r\n            } else \r\n                if (result < 298) {\r\n                    // Player has won a two-moon prize!\r\n                    profit = SafeMath.mul(spin.tokenValue, 232);\r\n                    category = 2;\r\n                    emit TwoMoonPrize(target, spin.blockn);\r\n            } else \r\n                if (result < 3127) {\r\n                    // Player has won the Z T H jackpot!\r\n                    profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 232), 10);\r\n                    category = 3;\r\n                    emit ZTHJackpot(target, spin.blockn);\r\n                    \r\n            } else \r\n                if (result < 5956) {\r\n                    // Player has won a three Z symbol prize\r\n                    profit = SafeMath.mul(spin.tokenValue, 25);\r\n                    category = 4;\r\n                    emit ThreeZSymbols(target, spin.blockn);\r\n            } else \r\n                if (result < 8785) {\r\n                    // Player has won a three T symbol prize\r\n                    profit = SafeMath.mul(spin.tokenValue, 25);\r\n                    category = 5;\r\n                    emit ThreeTSymbols(target, spin.blockn);\r\n            } else \r\n                if (result < 11614) {\r\n                    // Player has won a three H symbol prize\r\n                    profit = SafeMath.mul(spin.tokenValue, 25);\r\n                    category = 6;\r\n                    emit ThreeHSymbols(target, spin.blockn);\r\n            } else \r\n                if (result < 14443) {\r\n                    // Player has won a three Ether icon prize\r\n                    profit = SafeMath.mul(spin.tokenValue, 50);\r\n                    category = 7;\r\n                    emit ThreeEtherIcons(target, spin.blockn);\r\n            } else \r\n                if (result < 17272) {\r\n                    // Player has won a three green pyramid prize\r\n                    profit = SafeMath.mul(spin.tokenValue, 40);\r\n                    category = 8;\r\n                    emit ThreeGreenPyramids(target, spin.blockn);\r\n            } else \r\n                if (result < 20101) {\r\n                    // Player has won a three gold pyramid prize\r\n                    profit = SafeMath.mul(spin.tokenValue, 20);\r\n                    category = 9;\r\n                    emit ThreeGoldPyramids(target, spin.blockn);\r\n            } else \r\n                if (result < 22929) {\r\n                    // Player has won a three white pyramid prize\r\n                    profit = SafeMath.mul(spin.tokenValue, 20);\r\n                    category = 10;\r\n                    emit ThreeWhitePyramids(target, spin.blockn);\r\n            } else \r\n                if (result < 52332) {\r\n                    // Player has won a one moon prize!\r\n                    profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 125),10);\r\n                    category = 11;\r\n                    emit OneMoonPrize(target, spin.blockn);\r\n            } else \r\n                if (result < 120225) {\r\n                    // Player has won a each-coloured-pyramid prize!\r\n                    profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 15),10);\r\n                    category = 12;\r\n                    emit OneOfEachPyramidPrize(target, spin.blockn);\r\n            } else \r\n                if (result < 171146) {\r\n                    // Player has won a two Z symbol prize!\r\n                    profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 232),100);\r\n                    category = 13;\r\n                    emit TwoZSymbols(target, spin.blockn);\r\n            } else \r\n                if (result < 222067) {\r\n                    // Player has won a two T symbol prize!\r\n                    profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 232),100);\r\n                    category = 14;\r\n                    emit TwoTSymbols(target, spin.blockn);\r\n            } else \r\n                if (result < 272988) {\r\n                    // Player has won a two H symbol prize!\r\n                    profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 232),100);\r\n                    category = 15;\r\n                    emit TwoHSymbols(target, spin.blockn);\r\n            } else \r\n                if (result < 323909) {\r\n                    // Player has won a two Ether icon prize!\r\n                    profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 375),100);\r\n                    category = 16;\r\n                    emit TwoEtherIcons(target, spin.blockn);\r\n            } else \r\n                if (result < 374830) {\r\n                    // Player has won a two green pyramid prize!\r\n                    profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 35),10);\r\n                    category = 17;\r\n                    emit TwoGreenPyramids(target, spin.blockn);\r\n            } else \r\n                if (result < 425751) {\r\n                    // Player has won a two gold pyramid prize!\r\n                    profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 225),100);\r\n                    category = 18;\r\n                    emit TwoGoldPyramids(target, spin.blockn);\r\n            } else {\r\n                    // Player has won a two white pyramid prize!\r\n                    profit = SafeMath.mul(spin.tokenValue, 2);\r\n                    category = 19;\r\n                    emit TwoWhitePyramids(target, spin.blockn);\r\n            }\r\n\r\n            emit LogResult(target, result, profit, spin.tokenValue, category, true);\r\n            contractBalance = contractBalance.sub(profit);\r\n            ZTHTKN.transfer(target, profit);\r\n          }\r\n            \r\n        //Reset playerSpin to default values.\r\n        playerSpins[target] = playerSpin(uint200(0), uint56(0));\r\n        emit SpinConcluded(target, spin.blockn);\r\n        return result;\r\n    }   \r\n\r\n    // This sounds like a draconian function, but it actually just ensures that the contract has enough to pay out\r\n    // a jackpot at the rate you've selected (i.e. 5,000 ZTH for three-moon jackpot on a 10 ZTH roll).\r\n    // We do this by making sure that 500 * your wager is no more than 90% of the amount currently held by the contract.\r\n    // If not, you're going to have to use lower betting amounts, we're afraid!\r\n    function jackpotGuard(uint _wager)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint maxProfit = SafeMath.mul(_wager, 500);\r\n        uint ninetyContractBalance = SafeMath.mul(SafeMath.div(contractBalance, 10), 9);\r\n        return (maxProfit <= ninetyContractBalance);\r\n    }\r\n\r\n    // Returns a random number using a specified block number\r\n    // Always use a FUTURE block number.\r\n    function maxRandom(uint blockn, address entropy) private view returns (uint256 randomNumber) {\r\n    return uint256(keccak256(\r\n        abi.encodePacked(\r\n        address(this),\r\n        blockhash(blockn),\r\n        entropy)\r\n      ));\r\n    }\r\n\r\n    // Random helper\r\n    function random(uint256 upper, uint256 blockn, address entropy) internal view returns (uint256 randomNumber) {\r\n    return maxRandom(blockn, entropy) % upper;\r\n    }\r\n\r\n    // How many tokens are in the contract overall?\r\n    function balanceOf() public view returns (uint) {\r\n        return contractBalance;\r\n    }\r\n\r\n    function addNewBetAmount(uint _tokenAmount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        validTokenBet[_tokenAmount] = true;\r\n    }\r\n\r\n    // If, for any reason, betting needs to be paused (very unlikely), this will freeze all bets.\r\n    function pauseGame() public onlyOwner {\r\n        gameActive = false;\r\n    }\r\n\r\n    // The converse of the above, resuming betting if a freeze had been put in place.\r\n    function resumeGame() public onlyOwner {\r\n        gameActive = true;\r\n    }\r\n\r\n    // Administrative function to change the owner of the contract.\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // Administrative function to change the Zethr bankroll contract, should the need arise.\r\n    function changeBankroll(address _newBankroll) public onlyOwner {\r\n        bankroll = _newBankroll;\r\n    }\r\n\r\n    function divertDividendsToBankroll()\r\n        public\r\n        onlyOwner\r\n    {\r\n        bankroll.transfer(address(this).balance);\r\n    }\r\n\r\n    // Is the address that the token has come from actually ZTH?\r\n    function _zthToken(address _tokenContract) private view returns (bool) {\r\n       return _tokenContract == ZTHTKNADDR;\r\n    }\r\n}\r\n\r\n// And here's the boring bit.\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerSpins\",\"outputs\":[{\"name\":\"tokenValue\",\"type\":\"uint200\"},{\"name\":\"blockn\",\"type\":\"uint56\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishSpin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addNewBetAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"divertDividendsToBankroll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBankroll\",\"type\":\"address\"}],\"name\":\"changeBankroll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ZethrAddress\",\"type\":\"address\"},{\"name\":\"BankrollAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timeTaken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensWithdrawn\",\"type\":\"uint256\"}],\"name\":\"HouseRetrievedTake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_wagered\",\"type\":\"uint256\"}],\"name\":\"TokensWagered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_profit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_wagered\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_category\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_win\",\"type\":\"bool\"}],\"name\":\"LogResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Loss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"ThreeMoonJackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"TwoMoonPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"ZTHJackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"ThreeZSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"ThreeTSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"ThreeHSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"ThreeEtherIcons\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"ThreeGreenPyramids\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"ThreeGoldPyramids\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"ThreeWhitePyramids\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"OneMoonPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"OneOfEachPyramidPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"TwoZSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"TwoTSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"TwoHSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"TwoEtherIcons\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"TwoGreenPyramids\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"TwoGoldPyramids\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"TwoWhitePyramids\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"SpinConcluded\",\"type\":\"event\"}]","ContractName":"Zlots","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d48b633045af65ff636f3c6edd744748351e020d0000000000000000000000007430984e1d05d5f447c747123dd26845f6f17544","Library":"","SwarmSource":"bzzr://a2ae6daf2b812712ebee0adefd0cd991aa98d3ef49543a24d68e710c9332110a"}]}