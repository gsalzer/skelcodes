{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\r\n  // 1 wei will give you 1 unit, or 0.001 TOK.\r\n  uint256 public rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @param _rate Number of token units a buyer gets per wei\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \r\n   *   super._preValidatePurchase(_beneficiary, _weiAmount);\r\n   *   require(weiRaised.add(_weiAmount) <= cap);\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    token.safeTransfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\ncontract TimedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public openingTime;\r\n  uint256 public closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param _openingTime Crowdsale opening time\r\n   * @param _closingTime Crowdsale closing time\r\n   */\r\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_openingTime >= block.timestamp);\r\n    require(_closingTime >= _openingTime);\r\n\r\n    openingTime = _openingTime;\r\n    closingTime = _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp > closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n    onlyWhileOpen\r\n  {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n}\r\n\r\ncontract PostDeliveryCrowdsale is TimedCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public balances;\r\n\r\n  /**\r\n   * @dev Withdraw tokens only after crowdsale ends.\r\n   */\r\n  function withdrawTokens() public {\r\n    require(hasClosed());\r\n    uint256 amount = balances[msg.sender];\r\n    require(amount > 0);\r\n    balances[msg.sender] = 0;\r\n    _deliverTokens(msg.sender, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Overrides parent by storing balances instead of issuing tokens right away.\r\n   * @param _beneficiary Token purchaser\r\n   * @param _tokenAmount Amount of tokens purchased\r\n   */\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\ncontract Oraclized is Ownable {\r\n\r\n    address public oracle;\r\n\r\n    constructor(address _oracle) public {\r\n        oracle = _oracle;\r\n    }\r\n\r\n    /**\r\n     * @dev Change oracle address\r\n     * @param _oracle Oracle address\r\n     */\r\n    function setOracle(address _oracle) public onlyOwner {\r\n        oracle = _oracle;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow access only by oracle\r\n     */\r\n    modifier onlyOracle() {\r\n        require(msg.sender == oracle);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow access only by oracle or owner\r\n     */\r\n    modifier onlyOwnerOrOracle() {\r\n        require((msg.sender == oracle) || (msg.sender == owner));\r\n        _;\r\n    }\r\n}\r\n\r\ncontract KYCCrowdsale is Oraclized, PostDeliveryCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev etherPriceInUsd Ether price in cents\r\n     * @dev usdRaised Total USD raised while ICO in cents\r\n     * @dev weiInvested Stores amount of wei invested by each user\r\n     * @dev usdInvested Stores amount of USD invested by each user in cents\r\n     */\r\n    uint256 public etherPriceInUsd;\r\n    uint256 public usdRaised;\r\n    mapping (address => uint256) public weiInvested;\r\n    mapping (address => uint256) public usdInvested;\r\n\r\n    /**\r\n     * @dev KYCPassed Registry of users who passed KYC\r\n     * @dev KYCRequired Registry of users who has to passed KYC\r\n     */\r\n    mapping (address => bool) public KYCPassed;\r\n    mapping (address => bool) public KYCRequired;\r\n\r\n    /**\r\n     * @dev KYCRequiredAmountInUsd Amount in cents invested starting from which user must pass KYC\r\n     */\r\n    uint256 public KYCRequiredAmountInUsd;\r\n\r\n    event EtherPriceUpdated(uint256 _cents);\r\n\r\n    /**\r\n     * @param _kycAmountInUsd Amount in cents invested starting from which user must pass KYC\r\n     */\r\n    constructor(uint256 _kycAmountInUsd, uint256 _etherPrice) public {\r\n        require(_etherPrice > 0);\r\n\r\n        KYCRequiredAmountInUsd = _kycAmountInUsd;\r\n        etherPriceInUsd = _etherPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Update amount required to pass KYC\r\n     * @param _cents Amount in cents invested starting from which user must pass KYC\r\n     */\r\n    function setKYCRequiredAmount(uint256 _cents) external onlyOwnerOrOracle {\r\n        require(_cents > 0);\r\n\r\n        KYCRequiredAmountInUsd = _cents;\r\n    }\r\n\r\n    /**\r\n     * @dev Set ether conversion rate\r\n     * @param _cents Price of 1 ETH in cents\r\n     */\r\n    function setEtherPrice(uint256 _cents) public onlyOwnerOrOracle {\r\n        require(_cents > 0);\r\n\r\n        etherPriceInUsd = _cents;\r\n\r\n        emit EtherPriceUpdated(_cents);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if KYC is required for address\r\n     * @param _address Address to check\r\n     */\r\n    function isKYCRequired(address _address) external view returns(bool) {\r\n        return KYCRequired[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Check if KYC is passed by address\r\n     * @param _address Address to check\r\n     */\r\n    function isKYCPassed(address _address) external view returns(bool) {\r\n        return KYCPassed[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Check if KYC is not required or passed\r\n     * @param _address Address to check\r\n     */\r\n    function isKYCSatisfied(address _address) public view returns(bool) {\r\n        return !KYCRequired[_address] || KYCPassed[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns wei invested by specific amount\r\n     * @param _account Account you would like to get wei for\r\n     */\r\n    function weiInvestedOf(address _account) external view returns (uint256) {\r\n        return weiInvested[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns cents invested by specific amount\r\n     * @param _account Account you would like to get cents for\r\n     */\r\n    function usdInvestedOf(address _account) external view returns (uint256) {\r\n        return usdInvested[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Update KYC status for set of addresses\r\n     * @param _addresses Addresses to update\r\n     * @param _completed Is KYC passed or not\r\n     */\r\n    function updateKYCStatus(address[] _addresses, bool _completed) public onlyOwnerOrOracle {\r\n        for (uint16 index = 0; index < _addresses.length; index++) {\r\n            KYCPassed[_addresses[index]] = _completed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Override update purchasing state\r\n     *      - update sum of funds invested\r\n     *      - if total amount invested higher than KYC amount set KYC required to true\r\n     */\r\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n        super._updatePurchasingState(_beneficiary, _weiAmount);\r\n\r\n        uint256 usdAmount = _weiToUsd(_weiAmount);\r\n        usdRaised = usdRaised.add(usdAmount);\r\n        usdInvested[_beneficiary] = usdInvested[_beneficiary].add(usdAmount);\r\n        weiInvested[_beneficiary] = weiInvested[_beneficiary].add(_weiAmount);\r\n\r\n        if (usdInvested[_beneficiary] >= KYCRequiredAmountInUsd) {\r\n            KYCRequired[_beneficiary] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Override token withdraw\r\n     *      - do not allow token withdraw in case KYC required but not passed\r\n     */\r\n    function withdrawTokens() public {\r\n        require(isKYCSatisfied(msg.sender));\r\n\r\n        super.withdrawTokens();\r\n    }\r\n\r\n    /**\r\n     * @dev Converts wei to cents\r\n     * @param _wei Wei amount\r\n     */\r\n    function _weiToUsd(uint256 _wei) internal view returns (uint256) {\r\n        return _wei.mul(etherPriceInUsd).div(1e18);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts cents to wei\r\n     * @param _cents Cents amount\r\n     */\r\n    function _usdToWei(uint256 _cents) internal view returns (uint256) {\r\n        return _cents.mul(1e18).div(etherPriceInUsd);\r\n    }\r\n}\r\n\r\ncontract KYCRefundableCrowdsale is KYCCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev percentage multiplier to present percentage as decimals. 5 decimal by default\r\n     * @dev weiOnFinalize ether balance which was on finalize & will be returned to users in case of failed crowdsale\r\n     */\r\n    uint256 private percentage = 100 * 1000;\r\n    uint256 private weiOnFinalize;\r\n\r\n    /**\r\n     * @dev goalReached specifies if crowdsale goal is reached\r\n     * @dev isFinalized is crowdsale finished\r\n     * @dev tokensWithdrawn total amount of tokens already withdrawn\r\n     */\r\n    bool public goalReached = false;\r\n    bool public isFinalized = false;\r\n    uint256 public tokensWithdrawn;\r\n\r\n    event Refund(address indexed _account, uint256 _amountInvested, uint256 _amountRefunded);\r\n    event Finalized();\r\n    event OwnerWithdraw(uint256 _amount);\r\n\r\n    /**\r\n     * @dev Set is goal reached or not\r\n     * @param _success Is goal reached or not\r\n     */\r\n    function setGoalReached(bool _success) external onlyOwner {\r\n        require(!isFinalized);\r\n        goalReached = _success;\r\n    }\r\n\r\n    /**\r\n     * @dev Investors can claim refunds here if crowdsale is unsuccessful\r\n     */\r\n    function claimRefund() public {\r\n        require(isFinalized);\r\n        require(!goalReached);\r\n\r\n        uint256 refundPercentage = _refundPercentage();\r\n        uint256 amountInvested = weiInvested[msg.sender];\r\n        uint256 amountRefunded = amountInvested.mul(refundPercentage).div(percentage);\r\n        weiInvested[msg.sender] = 0;\r\n        usdInvested[msg.sender] = 0;\r\n        msg.sender.transfer(amountRefunded);\r\n\r\n        emit Refund(msg.sender, amountInvested, amountRefunded);\r\n    }\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization works.\r\n     */\r\n    function finalize() public onlyOwner {\r\n        require(!isFinalized);\r\n\r\n        // NOTE: We do this because we would like to allow withdrawals earlier than closing time in case of crowdsale success\r\n        closingTime = block.timestamp;\r\n        weiOnFinalize = address(this).balance;\r\n        isFinalized = true;\r\n\r\n        emit Finalized();\r\n    }\r\n\r\n    /**\r\n     * @dev Override. Withdraw tokens only after crowdsale ends.\r\n     * Make sure crowdsale is successful & finalized\r\n     */\r\n    function withdrawTokens() public {\r\n        require(isFinalized);\r\n        require(goalReached);\r\n\r\n        tokensWithdrawn = tokensWithdrawn.add(balances[msg.sender]);\r\n\r\n        super.withdrawTokens();\r\n    }\r\n\r\n    /**\r\n     * @dev Is called by owner to send funds to ICO wallet.\r\n     * params _amount Amount to be sent.\r\n     */\r\n    function ownerWithdraw(uint256 _amount) external onlyOwner {\r\n        require(_amount > 0);\r\n\r\n        wallet.transfer(_amount);\r\n\r\n        emit OwnerWithdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Override. Determines how ETH is stored/forwarded on purchases.\r\n     */\r\n    function _forwardFunds() internal {\r\n        // NOTE: Do nothing here. Keep funds in contract by default\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates refund percentage in case some funds will be used by dev team on crowdsale needs\r\n     */\r\n    function _refundPercentage() internal view returns (uint256) {\r\n        return weiOnFinalize.mul(percentage).div(weiRaised);\r\n    }\r\n}\r\n\r\ncontract AerumCrowdsale is KYCRefundableCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev minInvestmentInUsd Minimal investment allowed in cents\r\n     */\r\n    uint256 public minInvestmentInUsd;\r\n\r\n    /**\r\n     * @dev tokensSold Amount of tokens sold by this time\r\n     */\r\n    uint256 public tokensSold;\r\n\r\n    /**\r\n     * @dev pledgeTotal Total pledge collected from all investors\r\n     * @dev pledgeClosingTime Time when pledge is closed & it's not possible to pledge more or use pledge more\r\n     * @dev pledges Mapping of all pledges done by investors\r\n     */\r\n    uint256 public pledgeTotal;\r\n    uint256 public pledgeClosingTime;\r\n    mapping (address => uint256) public pledges;\r\n\r\n    /**\r\n     * @dev whitelistedRate Rate which is used while whitelisted sale (XRM to ETH)\r\n     * @dev publicRate Rate which is used white public crowdsale (XRM to ETH)\r\n     */\r\n    uint256 public whitelistedRate;\r\n    uint256 public publicRate;\r\n\r\n\r\n    event AirDrop(address indexed _account, uint256 _amount);\r\n    event MinInvestmentUpdated(uint256 _cents);\r\n    event RateUpdated(uint256 _whitelistedRate, uint256 _publicRate);\r\n    event Withdraw(address indexed _account, uint256 _amount);\r\n\r\n    /**\r\n     * @param _token ERC20 compatible token on which crowdsale is done\r\n     * @param _wallet Address where all ETH funded will be sent after ICO finishes\r\n     * @param _whitelistedRate Rate which is used while whitelisted sale\r\n     * @param _publicRate Rate which is used white public crowdsale\r\n     * @param _openingTime Crowdsale open time\r\n     * @param _closingTime Crowdsale close time\r\n     * @param _pledgeClosingTime Time when pledge is closed & no more active\r\n\\\\\r\n     * @param _kycAmountInUsd Amount on which KYC will be required in cents\r\n     * @param _etherPriceInUsd ETH price in cents\r\n     */\r\n    constructor(\r\n        ERC20 _token, address _wallet,\r\n        uint256 _whitelistedRate, uint256 _publicRate,\r\n        uint256 _openingTime, uint256 _closingTime,\r\n        uint256 _pledgeClosingTime,\r\n        uint256 _kycAmountInUsd, uint256 _etherPriceInUsd)\r\n    Oraclized(msg.sender)\r\n    Crowdsale(_whitelistedRate, _wallet, _token)\r\n    TimedCrowdsale(_openingTime, _closingTime)\r\n    KYCCrowdsale(_kycAmountInUsd, _etherPriceInUsd)\r\n    KYCRefundableCrowdsale()\r\n    public {\r\n        require(_openingTime < _pledgeClosingTime && _pledgeClosingTime < _closingTime);\r\n        pledgeClosingTime = _pledgeClosingTime;\r\n\r\n        whitelistedRate = _whitelistedRate;\r\n        publicRate = _publicRate;\r\n\r\n        minInvestmentInUsd = 25 * 100;\r\n    }\r\n\r\n    /**\r\n     * @dev Update minimal allowed investment\r\n     */\r\n    function setMinInvestment(uint256 _cents) external onlyOwnerOrOracle {\r\n        minInvestmentInUsd = _cents;\r\n\r\n        emit MinInvestmentUpdated(_cents);\r\n    }\r\n\r\n    /**\r\n     * @dev Update closing time\r\n     * @param _closingTime Closing time\r\n     */\r\n    function setClosingTime(uint256 _closingTime) external onlyOwner {\r\n        require(_closingTime >= openingTime);\r\n\r\n        closingTime = _closingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Update pledge closing time\r\n     * @param _pledgeClosingTime Pledge closing time\r\n     */\r\n    function setPledgeClosingTime(uint256 _pledgeClosingTime) external onlyOwner {\r\n        require(_pledgeClosingTime >= openingTime && _pledgeClosingTime <= closingTime);\r\n\r\n        pledgeClosingTime = _pledgeClosingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Update rates\r\n     * @param _whitelistedRate Rate which is used while whitelisted sale (XRM to ETH)\r\n     * @param _publicRate Rate which is used white public crowdsale (XRM to ETH)\r\n     */\r\n    function setRate(uint256 _whitelistedRate, uint256 _publicRate) public onlyOwnerOrOracle {\r\n        require(_whitelistedRate > 0);\r\n        require(_publicRate > 0);\r\n\r\n        whitelistedRate = _whitelistedRate;\r\n        publicRate = _publicRate;\r\n\r\n        emit RateUpdated(_whitelistedRate, _publicRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Update rates & ether price. Done to not make 2 requests from oracle.\r\n     * @param _whitelistedRate Rate which is used while whitelisted sale\r\n     * @param _publicRate Rate which is used white public crowdsale\r\n     * @param _cents Price of 1 ETH in cents\r\n     */\r\n    function setRateAndEtherPrice(uint256 _whitelistedRate, uint256 _publicRate, uint256 _cents) external onlyOwnerOrOracle {\r\n        setRate(_whitelistedRate, _publicRate);\r\n        setEtherPrice(_cents);\r\n    }\r\n\r\n    /**\r\n     * @dev Send remaining tokens back\r\n     * @param _to Address to send\r\n     * @param _amount Amount to send\r\n     */\r\n    function sendTokens(address _to, uint256 _amount) external onlyOwner {\r\n        if (!isFinalized || goalReached) {\r\n            // NOTE: if crowdsale not finished or successful we should keep at least tokens sold\r\n            _ensureTokensAvailable(_amount);\r\n        }\r\n\r\n        token.transfer(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get balance fo tokens bought\r\n     * @param _address Address of investor\r\n     */\r\n    function balanceOf(address _address) external view returns (uint256) {\r\n        return balances[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Check if all tokens were sold\r\n     */\r\n    function capReached() public view returns (bool) {\r\n        return tokensSold >= token.balanceOf(this);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns percentage of tokens sold\r\n     */\r\n    function completionPercentage() external view returns (uint256) {\r\n        uint256 balance = token.balanceOf(this);\r\n        if (balance == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return tokensSold.mul(100).div(balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns remaining tokens based on stage\r\n     */\r\n    function tokensRemaining() external view returns(uint256) {\r\n        return token.balanceOf(this).sub(_tokensLocked());\r\n    }\r\n\r\n    /**\r\n     * @dev Override. Withdraw tokens only after crowdsale ends.\r\n     * Adding withdraw event\r\n     */\r\n    function withdrawTokens() public {\r\n        uint256 amount = balances[msg.sender];\r\n        super.withdrawTokens();\r\n\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Override crowdsale pre validate. Check:\r\n     *      - is amount invested larger than minimal\r\n     *      - there is enough tokens on balance of contract to proceed\r\n     *      - check if pledges amount are not more than total coins (in case of pledge period)\r\n     */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n\r\n        require(_totalInvestmentInUsd(_beneficiary, _weiAmount) >= minInvestmentInUsd);\r\n        _ensureTokensAvailableExcludingPledge(_beneficiary, _getTokenAmount(_weiAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns total investment of beneficiary including current one in cents\r\n     * @param _beneficiary Address to check\r\n     * @param _weiAmount Current amount being invested in wei\r\n     */\r\n    function _totalInvestmentInUsd(address _beneficiary, uint256 _weiAmount) internal view returns(uint256) {\r\n        return usdInvested[_beneficiary].add(_weiToUsd(_weiAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev Override process purchase\r\n     *      - additionally sum tokens sold\r\n     */\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        super._processPurchase(_beneficiary, _tokenAmount);\r\n\r\n        tokensSold = tokensSold.add(_tokenAmount);\r\n\r\n        if (pledgeOpen()) {\r\n            // NOTE: In case of buying tokens inside pledge it doesn't matter how we decrease pledge as we change it anyway\r\n            _decreasePledge(_beneficiary, _tokenAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease pledge of account by specific token amount\r\n     * @param _beneficiary Account to increase pledge\r\n     * @param _tokenAmount Amount of tokens to decrease pledge\r\n     */\r\n    function _decreasePledge(address _beneficiary, uint256 _tokenAmount) internal {\r\n        if (pledgeOf(_beneficiary) <= _tokenAmount) {\r\n            pledgeTotal = pledgeTotal.sub(pledgeOf(_beneficiary));\r\n            pledges[_beneficiary] = 0;\r\n        } else {\r\n            pledgeTotal = pledgeTotal.sub(_tokenAmount);\r\n            pledges[_beneficiary] = pledges[_beneficiary].sub(_tokenAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Override to use whitelisted or public crowdsale rates\r\n     */\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        uint256 currentRate = getCurrentRate();\r\n        return _weiAmount.mul(currentRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns current XRM to ETH rate based on stage\r\n     */\r\n    function getCurrentRate() public view returns (uint256) {\r\n        if (pledgeOpen()) {\r\n            return whitelistedRate;\r\n        }\r\n        return publicRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if pledge period is still open\r\n     */\r\n    function pledgeOpen() public view returns (bool) {\r\n        return (openingTime <= block.timestamp) && (block.timestamp <= pledgeClosingTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns amount of pledge for account\r\n     */\r\n    function pledgeOf(address _address) public view returns (uint256) {\r\n        return pledges[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Check if all tokens were pledged\r\n     */\r\n    function pledgeCapReached() public view returns (bool) {\r\n        return pledgeTotal.add(tokensSold) >= token.balanceOf(this);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns percentage of tokens pledged\r\n     */\r\n    function pledgeCompletionPercentage() external view returns (uint256) {\r\n        uint256 balance = token.balanceOf(this);\r\n        if (balance == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return pledgeTotal.add(tokensSold).mul(100).div(balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Pledges\r\n     * @param _addresses list of addresses\r\n     * @param _tokens List of tokens to drop\r\n     */\r\n    function pledge(address[] _addresses, uint256[] _tokens) external onlyOwnerOrOracle {\r\n        require(_addresses.length == _tokens.length);\r\n        _ensureTokensListAvailable(_tokens);\r\n\r\n        for (uint16 index = 0; index < _addresses.length; index++) {\r\n            pledgeTotal = pledgeTotal.sub(pledges[_addresses[index]]).add(_tokens[index]);\r\n            pledges[_addresses[index]] = _tokens[index];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Air drops tokens to users\r\n     * @param _addresses list of addresses\r\n     * @param _tokens List of tokens to drop\r\n     */\r\n    function airDropTokens(address[] _addresses, uint256[] _tokens) external onlyOwnerOrOracle {\r\n        require(_addresses.length == _tokens.length);\r\n        _ensureTokensListAvailable(_tokens);\r\n\r\n        for (uint16 index = 0; index < _addresses.length; index++) {\r\n            tokensSold = tokensSold.add(_tokens[index]);\r\n            balances[_addresses[index]] = balances[_addresses[index]].add(_tokens[index]);\r\n\r\n            emit AirDrop(_addresses[index], _tokens[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Ensure token list total is available\r\n     * @param _tokens list of tokens amount\r\n     */\r\n    function _ensureTokensListAvailable(uint256[] _tokens) internal {\r\n        uint256 total;\r\n        for (uint16 index = 0; index < _tokens.length; index++) {\r\n            total = total.add(_tokens[index]);\r\n        }\r\n\r\n        _ensureTokensAvailable(total);\r\n    }\r\n\r\n    /**\r\n     * @dev Ensure amount of tokens you would like to buy or pledge is available\r\n     * @param _tokens Amount of tokens to buy or pledge\r\n     */\r\n    function _ensureTokensAvailable(uint256 _tokens) internal view {\r\n        require(_tokens.add(_tokensLocked()) <= token.balanceOf(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Ensure amount of tokens you would like to buy or pledge is available excluding pledged for account\r\n     * @param _account Account which is checked for pledge\r\n     * @param _tokens Amount of tokens to buy or pledge\r\n     */\r\n    function _ensureTokensAvailableExcludingPledge(address _account, uint256 _tokens) internal view {\r\n        require(_tokens.add(_tokensLockedExcludingPledge(_account)) <= token.balanceOf(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns locked or sold tokens based on stage\r\n     */\r\n    function _tokensLocked() internal view returns(uint256) {\r\n        uint256 locked = tokensSold.sub(tokensWithdrawn);\r\n\r\n        if (pledgeOpen()) {\r\n            locked = locked.add(pledgeTotal);\r\n        }\r\n\r\n        return locked;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns locked or sold tokens based on stage excluding pledged for account\r\n     * @param _account Account which is checked for pledge\r\n     */\r\n    function _tokensLockedExcludingPledge(address _account) internal view returns(uint256) {\r\n        uint256 locked = _tokensLocked();\r\n\r\n        if (pledgeOpen()) {\r\n            locked = locked.sub(pledgeOf(_account));\r\n        }\r\n\r\n        return locked;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistedRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isKYCSatisfied\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cents\",\"type\":\"uint256\"}],\"name\":\"setEtherPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"KYCRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"weiInvestedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pledges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pledgeCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestmentInUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pledgeClosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelistedRate\",\"type\":\"uint256\"},{\"name\":\"_publicRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pledgeCompletionPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"name\":\"setClosingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"airDropTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelistedRate\",\"type\":\"uint256\"},{\"name\":\"_publicRate\",\"type\":\"uint256\"},{\"name\":\"_cents\",\"type\":\"uint256\"}],\"name\":\"setRateAndEtherPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYCRequiredAmountInUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pledgeClosingTime\",\"type\":\"uint256\"}],\"name\":\"setPledgeClosingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isKYCRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"pledge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cents\",\"type\":\"uint256\"}],\"name\":\"setKYCRequiredAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"name\":\"setGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isKYCPassed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pledgeTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_completed\",\"type\":\"bool\"}],\"name\":\"updateKYCStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"usdInvestedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cents\",\"type\":\"uint256\"}],\"name\":\"setMinInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPriceInUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pledgeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completionPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pledgeOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"KYCPassed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_whitelistedRate\",\"type\":\"uint256\"},{\"name\":\"_publicRate\",\"type\":\"uint256\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_pledgeClosingTime\",\"type\":\"uint256\"},{\"name\":\"_kycAmountInUsd\",\"type\":\"uint256\"},{\"name\":\"_etherPriceInUsd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AirDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cents\",\"type\":\"uint256\"}],\"name\":\"MinInvestmentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_whitelistedRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_publicRate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountInvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amountRefunded\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OwnerWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cents\",\"type\":\"uint256\"}],\"name\":\"EtherPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AerumCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a249f0e9a464b9685f66992f41e1012388e39e81000000000000000000000000ba9d007aa3da723303381c6e7870f95a85795bdf00000000000000000000000000000000000000000000000000000000000017700000000000000000000000000000000000000000000000000000000000000d05000000000000000000000000000000000000000000000000000000005bd99940000000000000000000000000000000000000000000000000000000005c537def000000000000000000000000000000000000000000000000000000005c2a9f6f0000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000007530","Library":"","SwarmSource":"bzzr://ee83d63b184c610639b063da288ffff5b04e52c953ecb564aaf0aa7d993924bf"}]}