{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// just ownable contract\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n// Pausable contract which allows children to implement an emergency stop mechanism.\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    // Modifier to make a function callable only when the contract is not paused.\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    // Modifier to make a function callable only when the contract is paused.\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n\r\n    // Сalled by the owner to pause, triggers stopped state\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    // Сalled by the owner to unpause, returns to normal state\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n// Interface for pet contract\r\ncontract ParentInterface {\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function getPet(uint256 _id) external view returns (uint64 birthTime, uint256 genes,uint64 breedTimeout,uint16 quality,address owner);\r\n    function totalSupply() public view returns (uint);\r\n}\r\n\r\n// Simple utils, which calculate circle seats and grade by quality\r\ncontract Utils {\r\n    \r\n    function getGradeByQuailty(uint16 quality) public pure returns (uint8 grade) {\r\n        \r\n        require(quality <= uint16(0xF000));\r\n        require(quality >= uint16(0x1000));\r\n        \r\n        if(quality == uint16(0xF000))\r\n            return 7;\r\n        \r\n        quality+= uint16(0x1000);\r\n        \r\n        return uint8 ( quality / uint16(0x2000) );\r\n    }\r\n    \r\n    function seatsByGrade(uint8 grade) public pure returns(uint8 seats) {\r\n\t    if(grade > 4)\r\n\t        return 1;\r\n\t\r\n\t\tseats = 8 - grade - 2;\r\n\r\n\t\treturn seats;\r\n\t}\r\n}\r\n\r\n// Main contract, which calculating queue\r\ncontract ReferralQueue {\r\n    \r\n    // ID in circle\r\n    uint64 currentReceiverId = 1;\r\n\r\n    // Circle length\r\n    uint64 public circleLength;\r\n    \r\n    // Store queue of referral circle\r\n    struct ReferralSeat {\r\n        uint64 petId;\r\n        uint64 givenPetId;\r\n    }\r\n    \r\n    mapping (uint64 => ReferralSeat) public referralCircle;\r\n    \r\n    // Store simple information about each pet: parent parrot and current referral reward\r\n    struct PetInfo {\r\n        uint64 parentId;\r\n        uint256 amount;\r\n    }\r\n    \r\n    mapping (uint64 => PetInfo) public petsInfo;\r\n\r\n    \r\n    function addPetIntoCircle(uint64 _id, uint8 _seats) internal {\r\n        \r\n        // Adding seats into queue\r\n        for(uint8 i=0; i < _seats; i++)\r\n\t\t{\r\n\t\t    ReferralSeat memory _seat = ReferralSeat({\r\n                petId: _id,\r\n                givenPetId: 0\r\n            });\r\n\r\n            // Increasing circle length and save current seat in circle            \r\n            circleLength++;\r\n            referralCircle[circleLength] = _seat;\r\n\t\t}\r\n\t\t\r\n\t\t// Attach the parrot to the current receiver in the circle \r\n\t\t// First 3 parrots adding without attaching\r\n\t\tif(_id>103) {\r\n\t\t    \r\n\t\t    referralCircle[currentReceiverId].givenPetId = _id;\r\n\t\t    \r\n\t\t    // adding new pet into information list\r\n\t\t    PetInfo memory petInfo = PetInfo({\r\n\t\t        parentId: referralCircle[currentReceiverId].petId,\r\n\t\t        amount: 0\r\n\t\t    });\r\n\t\t    \r\n\t\t    petsInfo[_id] = petInfo;\r\n\t\t    \r\n\t\t    // Increace circle receiver ID\r\n            currentReceiverId++;\r\n        }\r\n    }\r\n    \r\n    // Current pet ID in circle for automatical attach\r\n    function getCurrentReceiverId() view public returns(uint64 receiverId) {\r\n        \r\n        return referralCircle[currentReceiverId].petId;\r\n    }\r\n}\r\n\r\ncontract Reward is ReferralQueue {\r\n    \r\n    // Getting egg price by id and quality\r\n    function getEggPrice(uint64 _petId, uint16 _quality) pure public returns(uint256 price) {\r\n        \t\t\r\n        uint64[6] memory egg_prices = [0, 150 finney, 600 finney, 3 ether, 12 ether, 600 finney];\r\n        \r\n\t\tuint8 egg = 2;\r\n\t\r\n\t\tif(_quality > 55000)\r\n\t\t    egg = 1;\r\n\t\t\t\r\n\t\tif(_quality > 26000 && _quality < 26500)\r\n\t\t\tegg = 3;\r\n\t\t\t\r\n\t\tif(_quality > 39100 && _quality < 39550)\r\n\t\t\tegg = 3;\r\n\t\t\t\r\n\t\tif(_quality > 31000 && _quality < 31250)\r\n\t\t\tegg = 4;\r\n\t\t\t\r\n\t\tif(_quality > 34500 && _quality < 35500)\r\n\t\t\tegg = 5;\r\n\t\t\t\r\n\t\tprice = egg_prices[egg];\r\n\t\t\r\n\t\tuint8 discount = 10;\r\n\t\t\r\n\t\tif(_petId<= 600)\r\n\t\t\tdiscount = 20;\r\n\t\tif(_petId<= 400)\r\n\t\t\tdiscount = 30;\r\n\t\tif(_petId<= 200)\r\n\t\t\tdiscount = 50;\r\n\t\tif(_petId<= 120)\r\n\t\t\tdiscount = 80;\r\n\t\t\r\n\t\tprice = price - (price*discount / 100);\r\n    }\r\n    \r\n    // Save rewards for all referral levels\r\n    function applyReward(uint64 _petId, uint16 _quality) internal {\r\n        \r\n        uint8[6] memory rewardByLevel = [0,250,120,60,30,15];\r\n        \r\n        uint256 eggPrice = getEggPrice(_petId, _quality);\r\n        \r\n        uint64 _currentPetId = _petId;\r\n        \r\n        // make rewards for 5 levels\r\n        for(uint8 level=1; level<=5; level++) {\r\n            uint64 _parentId = petsInfo[_currentPetId].parentId;\r\n            // if no parent referral - break\r\n            if(_parentId == 0)\r\n                break;\r\n            \r\n            // increase pet balance\r\n            petsInfo[_parentId].amount+= eggPrice * rewardByLevel[level] / 1000;\r\n            \r\n            // get parent id from parent id to move to the next level\r\n            _currentPetId = _parentId;\r\n        }\r\n        \r\n    }\r\n    \r\n    // Save rewards for all referral levels\r\n    function applyRewardByAmount(uint64 _petId, uint256 _price) internal {\r\n        \r\n        uint8[6] memory rewardByLevel = [0,250,120,60,30,15];\r\n        \r\n        uint64 _currentPetId = _petId;\r\n        \r\n        // Make rewards for 5 levels\r\n        for(uint8 i=1; i<=5; i++) {\r\n            uint64 _parentId = petsInfo[_currentPetId].parentId;\r\n            // if no parent referral - break\r\n            if(_parentId == 0)\r\n                break;\r\n            \r\n            // Increase pet balance\r\n            petsInfo[_parentId].amount+= _price * rewardByLevel[i] / 1000;\r\n            \r\n            // Get parent id from parent id to move to the next level\r\n            _currentPetId = _parentId;\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n// Launch it\r\ncontract ReferralCircle is Reward, Utils, Pausable {\r\n    \r\n    // Interface link\r\n    ParentInterface public parentInterface;\r\n    \r\n    // Limit of manual synchronization repeats\r\n    uint8 public syncLimit = 5;\r\n    \r\n    // Pet counter\r\n    uint64 public lastPetId = 100;\r\n    \r\n    // Manual sync enabled\r\n    bool public petSyncEnabled = true;\r\n    \r\n    // Setting default parent interface    \r\n    constructor() public {\r\n        parentInterface = ParentInterface(0x115f56742474f108AD3470DDD857C31a3f626c3C);\r\n    }\r\n\r\n    // Disable manual synchronization\r\n    function disablePetSync() external onlyOwner {\r\n        petSyncEnabled = false;\r\n    }\r\n\r\n    // Enable manual synchronization\r\n    function enablePetSync() external onlyOwner {\r\n        petSyncEnabled = true;\r\n    }\r\n    \r\n    // Make synchronization, available for any sender\r\n    function sync() external whenNotPaused {\r\n        \r\n        // Checking synchronization status\r\n        require(petSyncEnabled);\r\n        \r\n        // Get supply of pets from parent contract\r\n        uint64 petSupply = uint64(parentInterface.totalSupply());\r\n        require(petSupply > lastPetId);\r\n\r\n        // Synchronize pets        \r\n        for(uint8 i=0; i < syncLimit; i++)\r\n        {\r\n            lastPetId++;\r\n            \r\n            if(lastPetId > petSupply)\r\n            {\r\n                lastPetId = petSupply;\r\n                break;\r\n            }\r\n            \r\n            addPet(lastPetId);\r\n        }\r\n    }\r\n    \r\n    // Change synchronization limit by owner\r\n    function setSyncLimit(uint8 _limit) external onlyOwner {\r\n        syncLimit = _limit;\r\n    }\r\n\r\n    // Function of manual add pet    \r\n    function addPet(uint64 _id) internal {\r\n        (uint64 birthTime, uint256 genes, uint64 breedTimeout, uint16 quality, address owner) = parentInterface.getPet(_id);\r\n        \r\n        uint16 gradeQuality = quality;\r\n\r\n        // For first pets - bonus quality in grade calculating\r\n        if(_id < 244)\r\n\t\t\tgradeQuality = quality - 13777;\r\n\t\t\t\r\n\t\t// Calculating seats in circle\r\n        uint8 petGrade = getGradeByQuailty(gradeQuality);\r\n        uint8 petSeats = seatsByGrade(petGrade);\r\n        \r\n        // Adding pet into circle\r\n        addPetIntoCircle(_id, petSeats);\r\n        \r\n        // Save reward for each referral level\r\n        applyReward(_id, quality);\r\n    }\r\n    \r\n    // Function for automatic add pet\r\n    function automaticPetAdd(uint256 _price, uint16 _quality, uint64 _id) external {\r\n        require(!petSyncEnabled);\r\n        require(msg.sender == address(parentInterface));\r\n        \r\n        lastPetId = _id;\r\n        \r\n        // Calculating seats in circle\r\n        uint8 petGrade = getGradeByQuailty(_quality);\r\n        uint8 petSeats = seatsByGrade(petGrade);\r\n        \r\n        // Adding pet into circle\r\n        addPetIntoCircle(_id, petSeats);\r\n        \r\n        // Save reward for each referral level\r\n        applyRewardByAmount(_id, _price);\r\n    }\r\n    \r\n    // Function for withdraw reward by pet owner\r\n    function withdrawReward(uint64 _petId) external whenNotPaused {\r\n        \r\n        // Get pet information\r\n        PetInfo memory petInfo = petsInfo[_petId];\r\n        \r\n        // Get owner of pet from pet contract and check it\r\n         (uint64 birthTime, uint256 genes, uint64 breedTimeout, uint16 quality, address petOwner) = parentInterface.getPet(_petId);\r\n        require(petOwner == msg.sender);\r\n\r\n        // Transfer reward\r\n        msg.sender.transfer(petInfo.amount);\r\n        \r\n        // Change reward amount in pet information\r\n        petInfo.amount = 0;\r\n        petsInfo[_petId] = petInfo;\r\n    }\r\n    \r\n    // Emergency reward sending by admin\r\n    function sendRewardByAdmin(uint64 _petId) external onlyOwner whenNotPaused {\r\n        \r\n        // Get pet information\r\n        PetInfo memory petInfo = petsInfo[_petId];\r\n        \r\n        // Get owner of pet from pet contract and check it\r\n        (uint64 birthTime, uint256 genes, uint64 breedTimeout, uint16 quality, address petOwner) = parentInterface.getPet(_petId);\r\n\r\n        // Transfer reward\r\n        petOwner.transfer(petInfo.amount);\r\n        \r\n        // Change reward amount in pet information\r\n        petInfo.amount = 0;\r\n        petsInfo[_petId] = petInfo;\r\n    }\r\n        \r\n    // Change parent contract\r\n    function setParentAddress(address _address) public whenPaused onlyOwner\r\n    {\r\n        parentInterface = ParentInterface(_address);\r\n    }\r\n\r\n    // Just refill    \r\n    function () public payable {}\r\n    \r\n    // Withdraw balance by owner\r\n    function withdrawBalance(uint256 summ) external onlyOwner {\r\n        owner.transfer(summ);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentReceiverId\",\"outputs\":[{\"name\":\"receiverId\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circleLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPetId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePetSync\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"referralCircle\",\"outputs\":[{\"name\":\"petId\",\"type\":\"uint64\"},{\"name\":\"givenPetId\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"syncLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_quality\",\"type\":\"uint16\"},{\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"automaticPetAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"petSyncEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_petId\",\"type\":\"uint64\"}],\"name\":\"sendRewardByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"grade\",\"type\":\"uint8\"}],\"name\":\"seatsByGrade\",\"outputs\":[{\"name\":\"seats\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"quality\",\"type\":\"uint16\"}],\"name\":\"getGradeByQuailty\",\"outputs\":[{\"name\":\"grade\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint8\"}],\"name\":\"setSyncLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_petId\",\"type\":\"uint64\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"petsInfo\",\"outputs\":[{\"name\":\"parentId\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"summ\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_petId\",\"type\":\"uint64\"},{\"name\":\"_quality\",\"type\":\"uint16\"}],\"name\":\"getEggPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePetSync\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setParentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"ReferralCircle","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://17103c3e2fcd054d9615118d0a639fe764b876757fc004b8606bd97656441eed"}]}