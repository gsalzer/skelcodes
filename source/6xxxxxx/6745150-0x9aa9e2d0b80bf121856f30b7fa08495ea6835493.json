{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ncontract MMEToken {\r\n    string public constant name = \"MME Token\";\r\n    string public constant symbol = \"MME\";\r\n    uint8 public constant decimals = 18;\r\n    address public owner;\r\n    uint256 public _totalSupply;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n   \r\n    function allowance(\r\n        address tokenOwner, \r\n        address spender\r\n    )\r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(balances[msg.sender] >= value);\r\n        require(to != address(0));\r\n        \r\n        balances[msg.sender] -= value;\r\n        balances[to] += value;\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n   function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n        \r\n        allowed[msg.sender][spender] = value; \r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    \r\n   function transferFrom(\r\n        address from, \r\n        address to, \r\n        uint256 value\r\n    ) \r\n        public \r\n        returns (bool) \r\n    {\r\n        require(allowed[from][msg.sender] >= value);\r\n        require(balances[from] >= value);\r\n        require(to != address(0));\r\n        \r\n        allowed[from][msg.sender] -= value;\r\n        balances[from] -= value;\r\n        balances[to] += value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function mint(address to, uint256 value) public returns(bool) {\r\n        require(msg.sender == owner);\r\n        require(to != address(0));\r\n        \r\n        _totalSupply += value;\r\n        balances[to] += value;\r\n        emit Transfer(address(0), to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Crowdsale {\r\n    address public wallet = 0x11; // placeholder\r\n    uint256 public rate = 1;\r\n    MMEToken public token;\r\n    \r\n    constructor() public {\r\n        token = new MMEToken();\r\n    }\r\n    \r\n    function buyTokens() public payable {\r\n        require(msg.value != 0);\r\n        uint256 tokenAmount = msg.value * rate;\r\n        token.mint(msg.sender, tokenAmount);\r\n        wallet.transfer(msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d636666e4dcf4411004a5b5df746c050718f59e258191bf4cebc8dfa14af63fd"}]}