{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Funds Gateway contract\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n\r\n  event OwnershipTransferProposed(address indexed _from, address indexed _to);\r\n  event OwnershipTransferConfirmed(address indexed _from, address indexed _to);\r\n\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  constructor() public{\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  function transferOwnership(address _newOwner) onlyOwner public{\r\n    require(_newOwner != owner);\r\n    emit OwnershipTransferProposed(owner, _newOwner);\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n\r\n  function confirmOwnership() public{\r\n    assert(msg.sender == newOwner);\r\n    emit OwnershipTransferConfirmed(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n  //from ERC20 standard\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\ncontract Gateway is Owned {\r\n\r\n  address public targetWallet;\r\n  address public whitelistWallet;\r\n\r\n\r\n  bool public gatewayOpened = false;\r\n\r\n    \r\n  mapping(address => bool) public whitelist;\r\n\r\n  \r\n  event TargetWalletUpdated(address _newWallet);\r\n  event WhitelistWalletUpdated(address _newWhitelistWallet);\r\n  event GatewayStatusUpdated(bool _status);\r\n  event WhitelistUpdated(address indexed _participant, bool _status);\r\n  event PassedGateway(address _participant, uint _value);\r\n  \r\n\r\n  constructor() public{\r\n    targetWallet = owner;\r\n    whitelistWallet = owner;\r\n    newOwner = address(0x0);\r\n  }\r\n\r\n  \r\n  function () payable public{\r\n    passGateway();\r\n  }\r\n\r\n\r\n  function addToWhitelist(address _participant) external{\r\n    require(msg.sender == whitelistWallet || msg.sender == owner);\r\n    whitelist[_participant] = true;\r\n    emit WhitelistUpdated(_participant, true);\r\n  }  \r\n\r\n\r\n  function addToWhitelistMultiple(address[] _participants) external{\r\n    require(msg.sender == whitelistWallet || msg.sender == owner);\r\n    for (uint i = 0; i < _participants.length; i++) {\r\n      whitelist[_participants[i]] = true;\r\n      emit WhitelistUpdated(_participants[i], true);\r\n    }\r\n  }\r\n\r\n\r\n  function removeFromWhitelist(address _participant) external{\r\n    require(msg.sender == whitelistWallet || msg.sender == owner);\r\n    whitelist[_participant] = false;\r\n    emit WhitelistUpdated(_participant, false);\r\n  }  \r\n\r\n\r\n  function removeFromWhitelistMultiple(address[] _participants) external{\r\n    require(msg.sender == whitelistWallet || msg.sender == owner);\r\n    for (uint i = 0; i < _participants.length; i++) {\r\n      whitelist[_participants[i]] = false;\r\n      emit WhitelistUpdated(_participants[i], false);\r\n    }\r\n  }\r\n\r\n\r\n  function setTargetWallet(address _wallet) onlyOwner external{\r\n    require(_wallet != address(0x0));\r\n    targetWallet = _wallet;\r\n    emit TargetWalletUpdated(_wallet);\r\n  }\r\n  \r\n\r\n  function setWhitelistWallet(address _wallet) onlyOwner external{\r\n    whitelistWallet = _wallet;\r\n    emit WhitelistWalletUpdated(_wallet);\r\n  }\r\n\r\n\r\n  function openGateway() onlyOwner external{\r\n    require(!gatewayOpened);\r\n    gatewayOpened = true;\r\n    \r\n    emit GatewayStatusUpdated(true);\r\n  }\r\n\r\n\r\n  function closeGateway() onlyOwner external{\r\n    require(gatewayOpened);\r\n    gatewayOpened = false;\r\n    \r\n    emit GatewayStatusUpdated(false);\r\n  }\r\n\r\n\r\n  function passGateway() private{\r\n\r\n    require(gatewayOpened);\r\n    require(whitelist[msg.sender]);\r\n\r\n\t  // sends Eth forward; covers edge case of mining/selfdestructing Eth to the contract address\r\n\t  // note: address uses a different \"transfer\" than ERC20.\r\n    address(targetWallet).transfer(address(this).balance);\r\n\r\n    // log event\r\n    emit PassedGateway(msg.sender, msg.value);\r\n  }\r\n  \r\n  \r\n  \r\n      \r\n  //from ERC20 standard\r\n  //Used if someone sends tokens to the bouncer contract.\r\n  function transferAnyERC20Token(\r\n    address tokenAddress,\r\n    uint256 tokens\r\n  )\r\n    public\r\n    onlyOwner\r\n    returns (bool success)\r\n  {\r\n    return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWhitelistWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gatewayOpened\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelistMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setTargetWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"addToWhitelistMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"TargetWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newWhitelistWallet\",\"type\":\"address\"}],\"name\":\"WhitelistWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"GatewayStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PassedGateway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferConfirmed\",\"type\":\"event\"}]","ContractName":"Gateway","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f7fed506f5485f3d1410c257870de136f0e57e8ee8c4f25c6b72ece793b673e3"}]}