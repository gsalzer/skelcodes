{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/interfaces/VaultI.sol\r\n\r\ninterface VaultI {\r\n    function deposit(address contributor) external payable;\r\n    function saleSuccessful() external;\r\n    function enableRefunds() external;\r\n    function refund(address contributor) external;\r\n    function close() external;\r\n    function sendFundsToWallet() external;\r\n}\r\n\r\n// File: contracts/Refunder.sol\r\n\r\n/**\r\n * @title Refunder\r\n * @dev This contract is used when sale has had its refunds enabled,\r\n *      and ETH needs to be refunded to each sale contributor.\r\n */\r\ncontract Refunder {\r\n\r\n    /// @dev Called to refund ETH\r\n    /// @dev The array of contributors should not have an address that has already\r\n    ///      been refunded otherwise it will revert. So the contributors array\r\n    ///      should be checked offchain before being sent to this function\r\n    /// @param _vault Address of the interface for the sale to use\r\n    /// @param _contributors Array of contributors for which eth will be refunded\r\n    function refundContribution(VaultI _vault, address[] _contributors)\r\n        external\r\n    {\r\n        for (uint256 i = 0; i < _contributors.length; i++) {\r\n            address contributor = _contributors[i];\r\n            _vault.refund(contributor);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_contributors\",\"type\":\"address[]\"}],\"name\":\"refundContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Refunder","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://94be2ab8b24fc107220be70126937349c41913075f6d111479cff272f8c88c1a"}]}