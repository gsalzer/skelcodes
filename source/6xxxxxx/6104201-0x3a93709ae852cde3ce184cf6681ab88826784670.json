{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: contracts/VestTokenAllocation.sol\r\n\r\n/**\r\n * @title VestTokenAllocation contract\r\n * @author Gustavo Guimaraes - <gustavoguimaraes@gmail.com>\r\n */\r\ncontract VestTokenAllocation is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    uint256 public cliff;\r\n    uint256 public start;\r\n    uint256 public duration;\r\n    uint256 public allocatedTokens;\r\n    uint256 public canSelfDestruct;\r\n\r\n    mapping (address => uint256) public totalTokensLocked;\r\n    mapping (address => uint256) public releasedTokens;\r\n\r\n    ERC20 public golix;\r\n    address public tokenDistribution;\r\n\r\n    event Released(address beneficiary, uint256 amount);\r\n\r\n    /**\r\n     * @dev creates the locking contract with vesting mechanism\r\n     * as well as ability to set tokens for addresses and time contract can self-destruct\r\n     * @param _token GolixToken address\r\n     * @param _tokenDistribution GolixTokenDistribution contract address\r\n     * @param _start timestamp representing the beginning of the token vesting process\r\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest. ie 1 year in secs\r\n     * @param _duration time in seconds of the period in which the tokens completely vest. ie 4 years in secs\r\n     * @param _canSelfDestruct timestamp of when contract is able to selfdestruct\r\n     */\r\n    function VestTokenAllocation\r\n        (\r\n            ERC20 _token,\r\n            address _tokenDistribution,\r\n            uint256 _start,\r\n            uint256 _cliff,\r\n            uint256 _duration,\r\n            uint256 _canSelfDestruct\r\n        )\r\n        public\r\n    {\r\n        require(_token != address(0) && _cliff != 0);\r\n        require(_cliff <= _duration);\r\n        require(_start > now);\r\n        require(_canSelfDestruct > _duration.add(_start));\r\n\r\n        duration = _duration;\r\n        cliff = _start.add(_cliff);\r\n        start = _start;\r\n\r\n        golix = ERC20(_token);\r\n        tokenDistribution = _tokenDistribution;\r\n        canSelfDestruct = _canSelfDestruct;\r\n    }\r\n\r\n    modifier onlyOwnerOrTokenDistributionContract() {\r\n        require(msg.sender == address(owner) || msg.sender == address(tokenDistribution));\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Adds vested token allocation\r\n     * @param beneficiary Ethereum address of a person\r\n     * @param allocationValue Number of tokens allocated to person\r\n     */\r\n    function addVestTokenAllocation(address beneficiary, uint256 allocationValue)\r\n        external\r\n        onlyOwnerOrTokenDistributionContract\r\n    {\r\n        require(totalTokensLocked[beneficiary] == 0 && beneficiary != address(0)); // can only add once.\r\n\r\n        allocatedTokens = allocatedTokens.add(allocationValue);\r\n        require(allocatedTokens <= golix.balanceOf(this));\r\n\r\n        totalTokensLocked[beneficiary] = allocationValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     */\r\n    function release() public {\r\n        uint256 unreleased = releasableAmount();\r\n\r\n        require(unreleased > 0);\r\n\r\n        releasedTokens[msg.sender] = releasedTokens[msg.sender].add(unreleased);\r\n\r\n        golix.safeTransfer(msg.sender, unreleased);\r\n\r\n        emit Released(msg.sender, unreleased);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     */\r\n    function releasableAmount() public view returns (uint256) {\r\n        return vestedAmount().sub(releasedTokens[msg.sender]);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     */\r\n    function vestedAmount() public view returns (uint256) {\r\n        uint256 totalBalance = totalTokensLocked[msg.sender];\r\n\r\n        if (now < cliff) {\r\n            return 0;\r\n        } else if (now >= start.add(duration)) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(now.sub(start)).div(duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev allow for selfdestruct possibility and sending funds to owner\r\n     */\r\n    function kill() public onlyOwner {\r\n        require(now >= canSelfDestruct);\r\n        uint256 balance = golix.balanceOf(this);\r\n\r\n        if (balance > 0) {\r\n            golix.transfer(msg.sender, balance);\r\n        }\r\n\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"allocatedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canSelfDestruct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"allocationValue\",\"type\":\"uint256\"}],\"name\":\"addVestTokenAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTokensLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"golix\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenDistribution\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_canSelfDestruct\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VestTokenAllocation","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e430dce57cb6e3afc6216c710870bed0680d018a000000000000000000000000a38a0fb5f3145af93a0dd58cedfc87a66fd0676f000000000000000000000000000000000000000000000000000000005b7164b00000000000000000000000000000000000000000000000000000000001e1855800000000000000000000000000000000000000000000000000000000078615600000000000000000000000000000000000000000000000000000000065692200","Library":"","SwarmSource":"bzzr://43447164ebbc8000c0cd74c522980152bed2ef4ad5e9bd8a992b9921097349df"}]}