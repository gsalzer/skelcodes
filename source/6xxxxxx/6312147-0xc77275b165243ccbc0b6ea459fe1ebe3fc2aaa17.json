{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n//import './library/SafeMath';\r\n\r\ncontract GameX {\r\n    using SafeMath for uint256;\r\n    string public name = \"GameX\";    // Contract name\r\n    string public symbol = \"nox\";\r\n    \r\n    // dev setting\r\n    mapping(address => bool) admins;\r\n    bool public activated = false;\r\n    uint public compot;\r\n    \r\n    // game setting\r\n    uint minFee = 0.01 ether;\r\n    uint maxFee = 1 ether;\r\n    uint minLucky = 0.1 ether;\r\n    uint retryfee = 0.1 ether;\r\n    uint16 public luckynum = 2;\r\n    uint16 public fuckynum = 90;\r\n    uint lastnumtime = now;\r\n    \r\n    // sta\r\n    uint public noncex = 1;\r\n    \r\n    uint public timeslucky;\r\n    uint public times6;\r\n    uint public times7;\r\n    uint public times8;\r\n    uint public times9;\r\n    uint public timesno;\r\n    uint public timesfucky;\r\n    uint16 public limit6 = 79;\r\n    uint16 public limit7 = 86;\r\n    uint16 public limit8 = 92;\r\n    uint16 public limit9 = 97;\r\n    uint16 public reward6 = 11;\r\n    uint16 public reward7 = 13;\r\n    uint16 public reward8 = 16;\r\n    uint16 public reward9 = 23;\r\n    uint16 public inmax = 100;\r\n    \r\n    // one of seed\r\n    uint private lastPlayer;\r\n    \r\n    uint public jackpot = 0; // current jackpot eth\r\n    uint public maskpot = 0; // current maskpot eth\r\n    uint public gameTotalGen = 0;\r\n    \r\n    uint public _iD;\r\n    mapping(address => player) public player_;\r\n    mapping(uint => address) public addrXid;\r\n    \r\n    struct player {\r\n        uint16[] playerNum;  // card array\r\n        uint16 playerTotal;  // sum of current round\r\n        uint id;\r\n        uint playerWin;      // win of current round\r\n        uint playerGen;      // outcome of current round\r\n        uint playerWinPot;   // eth in game wallet which can be withdrawed\r\n        uint RetryTimes;     //\r\n        uint lastRetryTime;  // last retry time , 6 hours int\r\n        bool hasRetry;       //\r\n        address Aff;         // referee address\r\n        uint totalGen;\r\n        bool hasAddTime;\r\n    }\r\n    \r\n    constructor()\r\n    {\r\n        admins[address(msg.sender)] = true;\r\n        admins[0x8f92200dd83e8f25cb1dafba59d5532507998307] = true;\r\n        admins[0x9656DDAB1448B0CFbDbd71fbF9D7BB425D8F3fe6] = true;\r\n    }\r\n    \r\n    modifier isActivated() {\r\n        require(activated, \"not ready yet\");\r\n        _;\r\n    }\r\n    \r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        require(_addr == tx.origin);\r\n        \r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n    \r\n    modifier validAff(address _addr) {\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(admins[msg.sender], \"only admin\");\r\n        _;\r\n    }\r\n    \r\n    // sorry if anyone send eth directly , it will going to the community pot\r\n    function()\r\n    public\r\n    payable\r\n    {\r\n        compot += msg.value;\r\n    }\r\n    \r\n    function getPlayerNum() constant public returns (uint16[]) {\r\n        return player_[msg.sender].playerNum;\r\n    }\r\n    \r\n    function getPlayerWin(address _addr) public view returns (uint, uint) {\r\n        if (gameTotalGen == 0)\r\n        {\r\n            return (player_[_addr].playerWinPot, 0);\r\n        }\r\n        return (player_[_addr].playerWinPot, maskpot.mul(player_[_addr].totalGen).div(gameTotalGen));\r\n    }\r\n    \r\n    function isLuckyGuy()\r\n    private\r\n    view\r\n    returns (uint8)\r\n    {\r\n        if (player_[msg.sender].playerTotal == luckynum || player_[msg.sender].playerTotal == 100) {\r\n            return 5;\r\n        }\r\n        \r\n        uint8 _retry = 0;\r\n        if (player_[msg.sender].hasRetry){\r\n            _retry = 1;\r\n        }\r\n        if (player_[msg.sender].playerTotal <= 33 && player_[msg.sender].playerNum.length.sub(_retry) >= 3) {\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function Card(uint8 _num, bool _retry, address _ref)\r\n    isActivated\r\n    isHuman\r\n    validAff(_ref)\r\n    public\r\n    payable\r\n    {\r\n        require(msg.value > 0);\r\n        uint256 amount = msg.value;\r\n        \r\n        if (player_[msg.sender].playerGen == 0)\r\n        {\r\n            player_[msg.sender].playerNum.length = 0;\r\n        }\r\n        \r\n        // if got another chance to fetch a card\r\n        \r\n        if (player_[msg.sender].id == 0)\r\n        {\r\n            _iD ++;\r\n            player_[msg.sender].id = _iD;\r\n            addrXid[_iD] = msg.sender;\r\n        }\r\n        \r\n        // amount must be valid\r\n        if (amount < minFee * _num || amount > maxFee * _num) {\r\n            compot += amount;\r\n            return;\r\n        }\r\n        \r\n        if (player_[msg.sender].playerGen > 0)\r\n        {\r\n            // restrict max bet\r\n            require(player_[msg.sender].playerGen.mul(inmax).mul(_num) >= amount);\r\n        }\r\n        \r\n        if (_retry && _num == 1) {\r\n            if (admins[msg.sender]==false){\r\n                require(\r\n                    player_[msg.sender].playerNum.length > 0 &&\r\n                    player_[msg.sender].hasRetry == false && // not retry yet current round\r\n                    player_[msg.sender].RetryTimes > 0 && // must have a unused aff\r\n                    player_[msg.sender].lastRetryTime <= (now - 1 hours), // retry in max 4 times a day. 1 hours int\r\n                    'retry fee need to be valid'\r\n                );\r\n            }else{\r\n                // only to let dev test re-draw cards situation\r\n                player_[msg.sender].RetryTimes ++;\r\n            }\r\n            \r\n            player_[msg.sender].hasRetry = true;\r\n            player_[msg.sender].RetryTimes --;\r\n            player_[msg.sender].lastRetryTime = now;\r\n            \r\n            uint16 lastnum = player_[msg.sender].playerNum[player_[msg.sender].playerNum.length - 1];\r\n            player_[msg.sender].playerTotal -= lastnum;\r\n            player_[msg.sender].playerNum.length = player_[msg.sender].playerNum.length - 1;\r\n            // flag for retry number\r\n            player_[msg.sender].playerNum.push(100 + lastnum);\r\n        }\r\n        \r\n        compot += amount.div(100);\r\n        \r\n        // jackpot got 99% of the amount\r\n        jackpot += amount.sub(amount.div(100));\r\n        \r\n        player_[msg.sender].playerGen += amount.sub(amount.div(100));\r\n        \r\n        // update player gen pot\r\n        // if got a referee , add it\r\n        // if ref valid, then add one more time\r\n        if (\r\n            player_[msg.sender].Aff == address(0x0) &&\r\n            _ref != address(0x0) &&\r\n            _ref != msg.sender &&\r\n            player_[_ref].id > 0\r\n        )\r\n        {\r\n            player_[msg.sender].Aff = _ref;\r\n        }\r\n        \r\n        // random number\r\n        for (uint16 i = 1; i <= _num; i++) {\r\n            uint16 x = randomX(i);\r\n            // push x number to player current round and calculate it\r\n            player_[msg.sender].playerNum.push(x);\r\n            player_[msg.sender].playerTotal += x;\r\n        }\r\n        \r\n        // lucky get jackpot 5-10%\r\n        uint16 _case = isLuckyGuy();\r\n        if (_case > 0) {\r\n            timeslucky ++;\r\n            //  win  3.6 * gen\r\n            player_[msg.sender].playerWin = player_[msg.sender].playerGen.mul(36).div(10);\r\n            if (amount >= minLucky) {\r\n                player_[msg.sender].playerWin += jackpot.mul(_case).div(100);\r\n            }\r\n            endRound();\r\n            return;\r\n        }\r\n        \r\n        // reset Player if done\r\n        if (player_[msg.sender].playerTotal > 100 || player_[msg.sender].playerTotal == fuckynum) {\r\n            timesno ++;\r\n            // rest 98% of cuurent gen to jackpot\r\n            uint tocom = player_[msg.sender].playerGen.div(50);\r\n            compot += tocom;\r\n            subJackPot(tocom);\r\n            \r\n            if (player_[msg.sender].playerTotal == fuckynum)\r\n                timesfucky++;\r\n            \r\n            player_[msg.sender].playerWin = 0;\r\n            endRound();\r\n            return;\r\n        }\r\n        \r\n        if (player_[msg.sender].playerTotal > limit9) {\r\n            times9 ++;\r\n            player_[msg.sender].playerWin = player_[msg.sender].playerGen.mul(reward9).div(10);\r\n            return;\r\n        }\r\n        \r\n        if (player_[msg.sender].playerTotal > limit8) {\r\n            times8 ++;\r\n            player_[msg.sender].playerWin = player_[msg.sender].playerGen.mul(reward8).div(10);\r\n            return;\r\n        }\r\n        \r\n        if (player_[msg.sender].playerTotal > limit7) {\r\n            times7 ++;\r\n            player_[msg.sender].playerWin = player_[msg.sender].playerGen.mul(reward7).div(10);\r\n            return;\r\n        }\r\n        \r\n        if (player_[msg.sender].playerTotal > limit6) {\r\n            times6 ++;\r\n            player_[msg.sender].playerWin = player_[msg.sender].playerGen.mul(reward6).div(10);\r\n        }\r\n    }\r\n    \r\n    event resultlog(address indexed user, uint16[] num, uint16 indexed total, uint gen, uint win, uint time, uint16 luckynum, uint16 fuckynum);\r\n    \r\n    function resetPlayer()\r\n    isActivated\r\n    isHuman\r\n    private\r\n    {\r\n        emit resultlog(\r\n            msg.sender,\r\n            player_[msg.sender].playerNum,\r\n            player_[msg.sender].playerTotal,\r\n            player_[msg.sender].playerGen,\r\n            player_[msg.sender].playerWin,\r\n            now,\r\n            luckynum,\r\n            fuckynum\r\n        );\r\n        // reset\r\n        player_[msg.sender].totalGen += player_[msg.sender].playerGen;\r\n        gameTotalGen += player_[msg.sender].playerGen;\r\n        if (\r\n            player_[msg.sender].Aff != address(0x0) &&\r\n            player_[msg.sender].hasAddTime == false &&\r\n            player_[msg.sender].totalGen > retryfee\r\n        ) {\r\n            player_[player_[msg.sender].Aff].RetryTimes++;\r\n            player_[player_[msg.sender].Aff].hasAddTime = true;\r\n        }\r\n        \r\n        player_[msg.sender].playerGen = 0;\r\n        \r\n        player_[msg.sender].playerTotal = 0;\r\n        \r\n        //player_[msg.sender].playerNum.length = 0;\r\n        \r\n        player_[msg.sender].hasRetry = false;\r\n        \r\n        // current win going to player win pot\r\n        player_[msg.sender].playerWinPot += player_[msg.sender].playerWin;\r\n        \r\n        player_[msg.sender].playerWin = 0;\r\n        \r\n        if (luckynum == 0 || lastnumtime + 1 hours <= now) {\r\n            luckynum = randomX(luckynum);\r\n            lastnumtime = now;\r\n            fuckynum ++;\r\n            if (fuckynum >= 99)\r\n                fuckynum = 85;\r\n        }\r\n    }\r\n    \r\n    function subJackPot(uint _amount)\r\n    private\r\n    {\r\n        if (_amount < jackpot) {\r\n            jackpot = jackpot.sub(_amount);\r\n        } else {\r\n            jackpot = 0;\r\n        }\r\n    }\r\n    \r\n    function endRound()\r\n    isActivated\r\n    isHuman\r\n    public\r\n    {\r\n        if (player_[msg.sender].playerTotal == 0) {\r\n            return;\r\n        }\r\n        \r\n        if (player_[msg.sender].playerTotal <= limit8 && player_[msg.sender].playerWin == 0) {\r\n            player_[msg.sender].playerWin = player_[msg.sender].playerGen.div(3);\r\n        }\r\n        \r\n        subJackPot(player_[msg.sender].playerWin);\r\n        resetPlayer();\r\n    }\r\n    \r\n    function withdraw()\r\n    isActivated\r\n    isHuman\r\n    public\r\n    payable\r\n    {\r\n        (uint pot, uint mask) = getPlayerWin(msg.sender);\r\n        uint amount = pot + mask;\r\n        require(amount > 0, 'sorry not enough eth to withdraw');\r\n        \r\n        if (amount > address(this).balance)\r\n            amount = address(this).balance;\r\n        \r\n        msg.sender.transfer(amount);\r\n        player_[msg.sender].playerWinPot = 0;\r\n        player_[msg.sender].totalGen = 0;\r\n        \r\n        maskpot = maskpot.sub(mask);\r\n    }\r\n    \r\n    \r\n    event randomlog(address addr, uint16 x);\r\n    \r\n    function randomX(uint16 _s)\r\n    private\r\n    returns (uint16)\r\n    {\r\n        uint256 x = uint256(keccak256(abi.encodePacked(\r\n                (block.timestamp).add\r\n                (block.difficulty).add\r\n                ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\r\n                ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\r\n                (block.number).add\r\n                (lastPlayer).add\r\n                (gasleft()).add\r\n                (block.gaslimit).add\r\n                (noncex).add\r\n                (_s)\r\n            )));\r\n        // change of the seed\r\n        \r\n        x = x - ((x / 100) * 100);\r\n        \r\n        if (x > 50) {\r\n            lastPlayer = player_[msg.sender].id;\r\n        } else {\r\n            noncex ++;\r\n            if (noncex > 1000000000)\r\n                noncex = 1;\r\n        }\r\n        \r\n        if (x == 0) {\r\n            x = 1;\r\n        }\r\n        emit randomlog(msg.sender, uint16(x));\r\n        return uint16(x);\r\n    }\r\n    \r\n    // admin==================================\r\n    function active()\r\n    onlyOwner\r\n    public\r\n    {\r\n        activated = true;\r\n    }\r\n    \r\n    function setAdmin(address _addr)\r\n    onlyOwner\r\n    public\r\n    {\r\n        admins[_addr] = true;\r\n    }\r\n    \r\n    function withCom(address _addr)\r\n    onlyOwner\r\n    public\r\n    {\r\n        uint _com = compot;\r\n        if (address(this).balance < _com)\r\n            _com = address(this).balance;\r\n        \r\n        compot = 0;\r\n        _addr.transfer(_com);\r\n    }\r\n    \r\n    function openJackPot(uint amount)\r\n    onlyOwner\r\n    public\r\n    {\r\n        require(amount <= jackpot);\r\n        \r\n        maskpot += amount;\r\n        jackpot -= amount;\r\n    }\r\n    \r\n    // just gar the right num\r\n    function resetTime(uint16 r6,uint16 r7,uint16 r8, uint16 r9, uint16 l6,uint16 l7,uint16 l8, uint16 l9,uint max,uint16 _inmax)\r\n    onlyOwner\r\n    public {\r\n        times6 = 0;\r\n        times7 = 0;\r\n        times8 = 0;\r\n        times9 = 0;\r\n        timeslucky = 0;\r\n        timesfucky = 0;\r\n        timesno = 0;\r\n        if (r6 > 0)\r\n            reward6 = r6;\r\n        if (r7 > 0)\r\n            reward7 = r7;\r\n        if (r8 > 0)\r\n            reward8 = r8;\r\n        if (r9 > 0)\r\n            reward9 = r9;\r\n        if (l6 > 0)\r\n            limit6 = l6;\r\n        if (l7 > 0)\r\n            limit7 = l7;\r\n        if (l8 > 0)\r\n            limit8 = l8;\r\n        if (l9 > 0)\r\n            limit9 = l9;\r\n        if (max > 1)\r\n            maxFee = max;\r\n        if (inmax >= 3)\r\n            inmax =_inmax;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n    \r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n    internal\r\n    pure\r\n    returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x, 1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z), z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        return (mul(x, x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        if (x == 0)\r\n            return (0);\r\n        else if (y == 0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i = 1; i < y; i++)\r\n                z = mul(z, x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"active\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"times9\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_iD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"times6\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward9\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward6\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayerNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"player_\",\"outputs\":[{\"name\":\"playerTotal\",\"type\":\"uint16\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"playerWin\",\"type\":\"uint256\"},{\"name\":\"playerGen\",\"type\":\"uint256\"},{\"name\":\"playerWinPot\",\"type\":\"uint256\"},{\"name\":\"RetryTimes\",\"type\":\"uint256\"},{\"name\":\"lastRetryTime\",\"type\":\"uint256\"},{\"name\":\"hasRetry\",\"type\":\"bool\"},{\"name\":\"Aff\",\"type\":\"address\"},{\"name\":\"totalGen\",\"type\":\"uint256\"},{\"name\":\"hasAddTime\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"openJackPot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"times8\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addrXid\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward8\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward7\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maskpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeslucky\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckynum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limit6\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withCom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"times7\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inmax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noncex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limit9\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limit8\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fuckynum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameTotalGen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limit7\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timesno\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint8\"},{\"name\":\"_retry\",\"type\":\"bool\"},{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"Card\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timesfucky\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"r6\",\"type\":\"uint16\"},{\"name\":\"r7\",\"type\":\"uint16\"},{\"name\":\"r8\",\"type\":\"uint16\"},{\"name\":\"r9\",\"type\":\"uint16\"},{\"name\":\"l6\",\"type\":\"uint16\"},{\"name\":\"l7\",\"type\":\"uint16\"},{\"name\":\"l8\",\"type\":\"uint16\"},{\"name\":\"l9\",\"type\":\"uint16\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"_inmax\",\"type\":\"uint16\"}],\"name\":\"resetTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"num\",\"type\":\"uint16[]\"},{\"indexed\":true,\"name\":\"total\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"gen\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"win\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"luckynum\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"fuckynum\",\"type\":\"uint16\"}],\"name\":\"resultlog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint16\"}],\"name\":\"randomlog\",\"type\":\"event\"}]","ContractName":"GameX","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1a05ccd0f596eecf96a0134c31f190f76e32cc4bea9e0058cda5d0e6bb76a2c5"}]}