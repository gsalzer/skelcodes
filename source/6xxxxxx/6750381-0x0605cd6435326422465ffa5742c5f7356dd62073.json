{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n\r\ncontract Nodes {\r\n\taddress public owner;\r\n\tmapping (uint => Node) public nodes; \r\n\tmapping (string => uint) nodesID;\r\n\tmapping (string => uint16) nodeGroupsId;\r\n\tmapping (uint16 => string) public nodeGroups;\r\n\tmapping (address => string) public confirmationNodes;\r\n\tuint16 public nodeGroupID;\r\n\tuint public nodeID;\r\n\t\r\n\tstruct Node {\r\n\t\tstring nodeName;\r\n\t\taddress producer;\r\n\t\taddress node;\r\n\t\tuint256 date;\r\n\t\tuint8 starmidConfirmed; //0 - not confirmed; 1 - confirmed; 2 - caution\r\n\t\tstring confirmationPost;\r\n\t\toutsourceConfirmStruct[] outsourceConfirmed;\r\n\t\tuint16[] nodeGroup;\r\n\t\tuint8 producersPercent;\r\n\t}\r\n\t\r\n\tstruct outsourceConfirmStruct {\r\n\t\tuint8 confirmationStatus;\r\n\t\taddress confirmationNode;\r\n\t\tstring confirmationPost;\r\n\t}\r\n\t\r\n\tevent NewNode(\r\n\t\tuint256 id, \r\n\t\tstring nodeName, \r\n\t\tuint8 producersPercent, \r\n\t\taddress producer, \r\n\t\tuint date\r\n\t\t);\r\n\tevent NewNodeGroup(uint16 id, string newNodeGroup);\r\n\tevent AddNodeAddress(uint nodeID, address nodeAdress);\r\n\tevent EditNode(uint nodeID,\taddress newProducer, uint8 newProducersPercent);\r\n\tevent ConfirmNode(uint nodeID, uint8 confirmationStatus, string confirmationPost);\r\n\tevent OutsourceConfirmNode(uint nodeID, uint8 confirmationStatus, address confirmationNode, string confirmationPost);\r\n\tevent ChangePercent(uint nodeId, uint producersPercent);\r\n\tevent PushNodeGroup(uint nodeId, uint newNodeGroup);\r\n\tevent DeleteNodeGroup(uint nodeId, uint deleteNodeGroup);\r\n\t\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction addConfirmationNode(string _newConfirmationNode) public returns(bool) {\r\n\t\tconfirmationNodes[msg.sender] = _newConfirmationNode;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction addNodeGroup(string _newNodeGroup) public onlyOwner returns(bool _result, uint16 _id) {\r\n\t\trequire (nodeGroupsId[_newNodeGroup] == 0);\r\n\t\t_id = nodeGroupID += 1;\r\n\t\tnodeGroups[_id] = _newNodeGroup;\r\n\t\tnodeGroupsId[_newNodeGroup] = nodeGroupID;\r\n\t\t_result = true;\r\n\t\temit NewNodeGroup(_id, _newNodeGroup);\r\n\t}\r\n\t\r\n\tfunction addNode(string _newNode, uint8 _producersPercent) public returns (bool _result, uint _id) {\r\n\t\trequire(nodesID[_newNode] < 1 && _producersPercent < 100);\r\n\t\t_id = nodeID += 1;\r\n\t\trequire(nodeID < 1000000000000);\r\n\t\tnodes[nodeID].nodeName = _newNode;\r\n\t\tnodes[nodeID].producer = msg.sender;\r\n\t\tnodes[nodeID].date = block.timestamp;\r\n\t\tnodes[nodeID].producersPercent = _producersPercent;\r\n\t\tnodesID[_newNode] = nodeID;\r\n\t\temit NewNode(_id, _newNode, _producersPercent, msg.sender, block.timestamp);\r\n\t\t_result = true;\r\n\t}\r\n\t\r\n\tfunction editNode(\r\n\t\tuint _nodeID, \r\n\t\taddress _newProducer, \r\n\t\tuint8 _newProducersPercent\r\n\t\t) public onlyOwner returns (bool) {\r\n\t\t\tnodes[_nodeID].producer = _newProducer;\r\n\t\t\tnodes[_nodeID].producersPercent = _newProducersPercent;\r\n\t\t\temit EditNode(_nodeID, _newProducer, _newProducersPercent);\r\n\t\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction addNodeAddress(uint _nodeID, address _nodeAddress) public returns(bool _result) {\r\n\t\trequire(msg.sender == nodes[_nodeID].producer && nodes[_nodeID].node == 0);\r\n\t\tnodes[_nodeID].node = _nodeAddress;\r\n\t\temit AddNodeAddress( _nodeID, _nodeAddress);\r\n\t\t_result = true;\r\n\t}\r\n\t\r\n\tfunction pushNodeGroup(uint _nodeID, uint16 _newNodeGroup) public returns(bool) {\r\n\t\trequire(msg.sender == nodes[_nodeID].node || msg.sender == nodes[_nodeID].producer);\r\n\t\tnodes[_nodeID].nodeGroup.push(_newNodeGroup);\r\n\t\temit PushNodeGroup(_nodeID, _newNodeGroup);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction deleteNodeGroup(uint _nodeID, uint16 _deleteNodeGroup) public returns(bool) {\r\n\t\trequire(msg.sender == nodes[_nodeID].node  || msg.sender == nodes[_nodeID].producer);\r\n\t\tfor(uint16 i = 0; i < nodes[_nodeID].nodeGroup.length; i++) {\r\n\t\t\tif(_deleteNodeGroup == nodes[_nodeID].nodeGroup[i]) {\r\n\t\t\t\tfor(uint16 ii = i; ii < nodes[_nodeID].nodeGroup.length - 1; ii++) \r\n\t\t\t\t\tnodes[_nodeID].nodeGroup[ii] = nodes[_nodeID].nodeGroup[ii + 1];\r\n\t\t    \tdelete nodes[_nodeID].nodeGroup[nodes[_nodeID].nodeGroup.length - 1];\r\n\t\t\t\tnodes[_nodeID].nodeGroup.length--;\r\n\t\t\t\tbreak;\r\n\t\t    }\r\n\t    }\r\n\t\temit DeleteNodeGroup(_nodeID, _deleteNodeGroup);\r\n\t\treturn true;\r\n    }\r\n\t\r\n\tfunction confirmNode(uint _nodeID, string confirmationPost, uint8 confirmationStatus) public onlyOwner returns(bool) {\r\n\t\tnodes[_nodeID].starmidConfirmed = confirmationStatus;\r\n\t\tnodes[_nodeID].confirmationPost = confirmationPost;\r\n\t\temit ConfirmNode(_nodeID, confirmationStatus, confirmationPost);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction outsourceConfirmNode(uint _nodeID, string confirmationPost, uint8 confirmationStatus) public returns(bool) {\r\n\t\tnodes[_nodeID].outsourceConfirmed.push(outsourceConfirmStruct(confirmationStatus, msg.sender, confirmationPost));\r\n\t\temit OutsourceConfirmNode(_nodeID, confirmationStatus, msg.sender, confirmationPost);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction changePercent(uint _nodeId, uint8 _producersPercent) public returns(bool) {\r\n\t\trequire(msg.sender == nodes[_nodeId].producer && nodes[_nodeId].node == 0x0000000000000000000000000000000000000000);\r\n\t\tnodes[_nodeId].producersPercent = _producersPercent;\r\n\t\temit ChangePercent(_nodeId, _producersPercent);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction getNodeInfo(uint _nodeID) constant public returns(\r\n\t\taddress _producer, \r\n\t\taddress _node, \r\n\t\tuint _date, \r\n\t\tuint8 _starmidConfirmed, \r\n\t\tstring _nodeName, \r\n\t\tuint16[] _nodeGroup, \r\n\t\tuint _producersPercent, \r\n\t\tstring _confirmationPost\r\n\t\t) {\r\n\t\t_producer = nodes[_nodeID].producer;\r\n\t\t_node = nodes[_nodeID].node;\r\n\t\t_date = nodes[_nodeID].date;\r\n\t\t_starmidConfirmed = nodes[_nodeID].starmidConfirmed;\r\n\t\t_nodeName = nodes[_nodeID].nodeName;\r\n\t\t_nodeGroup = nodes[_nodeID].nodeGroup;\r\n\t\t_producersPercent = nodes[_nodeID].producersPercent;\r\n\t\t_confirmationPost = nodes[_nodeID].confirmationPost;\r\n\t}\r\n\t\r\n\tfunction getOutsourceConfirmation(uint _nodeID, uint _number) constant public returns(\r\n\t\tuint _confirmationStatus, \r\n\t\taddress _confirmationNode, \r\n\t\tstring _confirmationNodeName, \r\n\t\tstring _confirmationPost\r\n\t\t) {\r\n\t\t\t_confirmationStatus = nodes[_nodeID].outsourceConfirmed[_number].confirmationStatus;\r\n\t\t\t_confirmationNode = nodes[_nodeID].outsourceConfirmed[_number].confirmationNode;\r\n\t\t\t_confirmationNodeName = confirmationNodes[_confirmationNode];\r\n\t\t\t_confirmationPost = nodes[_nodeID].outsourceConfirmed[_number].confirmationPost;\r\n\t\t}\r\n}\t\r\n\r\ncontract Starmid is Nodes {\r\n\tuint24 public emissionLimits;\r\n\tuint8 public feeMultipliedByTen;\r\n\tmapping (uint => emissionNodeInfo) public emissions;\r\n\tmapping (address => mapping (uint => uint)) balanceOf;\r\n\tmapping (address => mapping (uint => uint)) frozen;\r\n\tuint128 public orderId;\r\n\tmapping (uint => mapping (uint => orderInfo[])) buyOrders;\r\n\tmapping (uint => mapping (uint => orderInfo[])) sellOrders;\r\n\tmapping (uint => uint[]) buyOrderPrices;\r\n\tmapping (uint => uint[]) sellOrderPrices;\r\n\tmapping (address => uint) public pendingWithdrawals;\r\n\taddress public multiKey;\r\n\t\r\n\tstruct orderInfo {\r\n\t\taddress client;\r\n\t\tuint amount;\r\n\t\tuint orderId;\r\n\t\tuint8 fee;\r\n    }\r\n\tstruct emissionNodeInfo {\r\n\t\tuint emissionNumber;\r\n\t\tuint date;\r\n\t}\r\n\t\r\n\tevent Emission(uint node, uint date);\r\n\tevent BuyOrder(uint orderId, uint node, uint buyPrice, uint amount);\r\n\tevent SellOrder(uint orderId, uint node, uint sellPrice, uint amount);\r\n\tevent CancelBuyOrder(uint orderId, uint node, uint price);\r\n\tevent CancelSellOrder(uint orderId, uint node, uint price);\r\n\tevent TradeHistory(uint node, uint date, address buyer, address seller, uint price, uint amount, uint orderId);\r\n\t\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\temissionLimits = 1000000;\r\n\t\tfeeMultipliedByTen = 20;\r\n\t}\r\n\t\r\n\t//-----------------------------------------------------Starmid Exchange------------------------------------------------------\r\n\tfunction withdraw() public returns(bool _result, uint _amount) {\r\n        _amount = pendingWithdrawals[msg.sender];\r\n        pendingWithdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(_amount);\r\n\t\t_result = true;\r\n    }\r\n\t\r\n\tfunction changeOwner(address _newOwnerAddress) public returns(bool) {\r\n\t\trequire(msg.sender == owner || msg.sender == 0x1335995a62a6769b0a44a8fcc08d9c3324456df0);\r\n\t\tif(multiKey == 0x0000000000000000000000000000000000000000)\r\n\t\t\tmultiKey = msg.sender;\r\n\t\tif(multiKey == owner && msg.sender == 0x1335995a62a6769b0a44a8fcc08d9c3324456df0) {\r\n\t\t\towner = _newOwnerAddress;\r\n\t\t\tmultiKey = 0x0000000000000000000000000000000000000000;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif(multiKey == 0x1335995a62a6769b0a44a8fcc08d9c3324456df0 && msg.sender == owner) {\r\n\t\t\towner = _newOwnerAddress;\r\n\t\t\tmultiKey = 0x0000000000000000000000000000000000000000;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction changeFee(uint8 _newFee) public onlyOwner returns(bool) {\r\n\t\tfeeMultipliedByTen = _newFee;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction getEmission(uint _node) constant public returns(uint _emissionNumber, uint _emissionDate) {\r\n\t\t_emissionNumber = emissions[_node].emissionNumber;\r\n\t\t_emissionDate = emissions[_node].date;\r\n\t}\r\n\t\r\n\tfunction emission(uint _node) public returns(bool _result, uint _producersPercent) {\r\n\t\taddress _nodeProducer = nodes[_node].producer;\r\n\t\taddress _nodeOwner = nodes[_node].node;\r\n\t\t_producersPercent = nodes[_node].producersPercent;\r\n\t\trequire(msg.sender == _nodeOwner || msg.sender == _nodeProducer);\r\n\t\trequire(_nodeOwner != 0x0000000000000000000000000000000000000000 && emissions[_node].emissionNumber == 0);\r\n\t\tbalanceOf[_nodeOwner][_node] += emissionLimits*(100 - _producersPercent)/100;\r\n\t\tbalanceOf[_nodeProducer][_node] += emissionLimits*_producersPercent/100;\r\n\t\temissions[_node].date = block.timestamp;\r\n\t\temissions[_node].emissionNumber = 1;\r\n\t\temit Emission(_node, block.timestamp);\r\n\t\t_result = true;\r\n\t}\r\n\t\r\n\tfunction getStockBalance(address _address, uint _node) constant public returns(uint _balance) {\r\n\t\t_balance = balanceOf[_address][_node];\r\n\t}\r\n\t\r\n\tfunction getWithFrozenStockBalance(address _address, uint _node) constant public returns(uint _balance) {\r\n\t\t_balance = balanceOf[_address][_node] + frozen[_address][_node];\r\n\t}\r\n\t\r\n\tfunction getOrderInfo(bool _isBuyOrder, uint _node, uint _price, uint _number) constant public returns\r\n\t(address _address, uint _amount, uint _orderId, uint8 _fee) {\r\n\t\tif(_isBuyOrder == true) {\r\n\t\t\t_address = buyOrders[_node][_price][_number].client;\r\n\t\t\t_amount = buyOrders[_node][_price][_number].amount;\r\n\t\t\t_orderId = buyOrders[_node][_price][_number].orderId;\r\n\t\t\t_fee = buyOrders[_node][_price][_number].fee;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t_address = sellOrders[_node][_price][_number].client;\r\n\t\t\t_amount = sellOrders[_node][_price][_number].amount;\r\n\t\t\t_orderId = sellOrders[_node][_price][_number].orderId;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getBuyOrderPrices(uint _node) constant public returns(uint[] _prices) {\r\n\t\t_prices = buyOrderPrices[_node];\r\n\t}\r\n\t\r\n\tfunction getSellOrderPrices(uint _node) constant public returns(uint[] _prices) {\r\n\t\t_prices = sellOrderPrices[_node];\r\n\t}\r\n\t\r\n\tfunction buyOrder(uint _node, uint _buyPrice, uint _amount) payable public returns (bool _result, uint _orderId) {\r\n\t\t//check if there is a better price\r\n\t\tuint _minSellPrice = _buyPrice + 1;\r\n\t\tfor (uint i = 0; i < sellOrderPrices[_node].length; i++) {\r\n\t\t\tif(sellOrderPrices[_node][i] < _minSellPrice) \r\n\t\t\t\t_minSellPrice = sellOrderPrices[_node][i];\r\n\t\t}\r\n\t\trequire(_node > 0 && _buyPrice > 0 && _amount > 0 && msg.value > 0 && _buyPrice < _minSellPrice);\r\n\t\trequire(msg.value == _amount*_buyPrice + _amount*_buyPrice*feeMultipliedByTen/1000);\r\n\t\t_orderId = orderId += 1;\r\n\t\tbuyOrders[_node][_buyPrice].push(orderInfo(msg.sender, _amount, _orderId, feeMultipliedByTen));\r\n\t\t//Add _buyPrice to buyOrderPrices[_node][]\r\n\t\tuint it = 999999;\r\n\t\tfor (uint itt = 0; itt < buyOrderPrices[_node].length; itt++) {\r\n\t\t\tif (buyOrderPrices[_node][itt] == _buyPrice) \r\n\t\t\t\tit = itt;\r\n\t\t}\r\n\t\tif (it == 999999) \r\n\t\t\tbuyOrderPrices[_node].push(_buyPrice);\r\n\t\t_result = true;\r\n\t\temit BuyOrder(orderId, _node, _buyPrice, _amount);\r\n\t}\r\n\t\r\n\tfunction sellOrder(uint _node, uint _sellPrice, uint _amount) public returns (bool _result, uint _orderId) {\r\n\t\t//check if there is a better price\r\n\t\tuint _maxBuyPrice = _sellPrice - 1;\r\n\t\tfor (uint i = 0; i < buyOrderPrices[_node].length; i++) {\r\n\t\t\tif(buyOrderPrices[_node][i] > _maxBuyPrice) \r\n\t\t\t\t_maxBuyPrice = buyOrderPrices[_node][i];\r\n\t\t}\r\n\t\trequire(_node > 0 && _sellPrice > 0 && _amount > 0 && balanceOf[msg.sender][_node] >= _amount && _sellPrice > _maxBuyPrice);\r\n\t\t_orderId = orderId += 1;\r\n\t\tsellOrders[_node][_sellPrice].push(orderInfo(msg.sender, _amount, _orderId, feeMultipliedByTen));\r\n\t\t//transfer stocks to the frozen balance\r\n\t\tfrozen[msg.sender][_node] += _amount;\r\n\t\tbalanceOf[msg.sender][_node] -= _amount;\r\n\t\t//Add _sellPrice to sellOrderPrices[_node][]\r\n\t\tuint it = 999999;\r\n\t\tfor (uint itt = 0; itt < sellOrderPrices[_node].length; itt++) {\r\n\t\t\tif (sellOrderPrices[_node][itt] == _sellPrice) \r\n\t\t\t\tit = itt;\r\n\t\t}\r\n\t\tif (it == 999999) \r\n\t\t\tsellOrderPrices[_node].push(_sellPrice);\r\n\t\t_result = true;\r\n\t\temit SellOrder(orderId, _node, _sellPrice, _amount);\r\n\t}\r\n\t\r\n\tfunction cancelBuyOrder(uint _node, uint _orderId, uint _price) public returns (bool _result) {\r\n\t\torderInfo[] buyArr = buyOrders[_node][_price];\r\n\t\tfor (uint iii = 0; iii < buyArr.length; iii++) {\r\n\t\t\tif (buyArr[iii].orderId == _orderId) {\r\n\t\t\t\trequire(msg.sender == buyArr[iii].client);\r\n\t\t\t\tpendingWithdrawals[msg.sender] += _price*buyArr[iii].amount + _price*buyArr[iii].amount*buyArr[iii].fee/1000;//returns ether and fee to the buyer\r\n\t\t\t\t//delete buyOrders[_node][_price][iii] and move each element\r\n\t\t\t\tfor (uint ii = iii; ii < buyArr.length - 1; ii++) {\r\n\t\t\t\t\tbuyArr[ii] = buyArr[ii + 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete buyArr[buyArr.length - 1];\r\n\t\t\t\tbuyArr.length--;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//Delete _price from buyOrderPrices[_node][] if it's the last order\r\n\t\tif (buyArr.length == 0) {\r\n\t\t\tuint _fromArg = 99999;\r\n\t\t\tfor (iii = 0; iii < buyOrderPrices[_node].length - 1; iii++) {\r\n\t\t\t\tif (buyOrderPrices[_node][iii] == _price) {\r\n\t\t\t\t\t_fromArg = iii;\r\n\t\t\t\t}\r\n\t\t\t\tif (_fromArg != 99999 && iii >= _fromArg) buyOrderPrices[_node][iii] = buyOrderPrices[_node][iii + 1];\r\n\t\t\t}\r\n\t\t\tdelete buyOrderPrices[_node][buyOrderPrices[_node].length-1];\r\n\t\t\tbuyOrderPrices[_node].length--;\r\n\t\t}\r\n\t\t_result = true;\r\n\t\temit CancelBuyOrder(_orderId, _node, _price);\r\n\t}\r\n\t\r\n\tfunction cancelSellOrder(uint _node, uint _orderId, uint _price) public returns (bool _result) {\r\n\t\torderInfo[] sellArr = sellOrders[_node][_price];\r\n\t\tfor (uint iii = 0; iii < sellArr.length; iii++) {\r\n\t\t\tif (sellArr[iii].orderId == _orderId) {\r\n\t\t\t\trequire(msg.sender == sellArr[iii].client);\r\n\t\t\t\t//return stocks from the frozen balance to seller\r\n\t\t\t\tfrozen[msg.sender][_node] -= sellArr[iii].amount;\r\n\t\t\t\tbalanceOf[msg.sender][_node] += sellArr[iii].amount;\r\n\t\t\t\t//delete sellOrders[_node][_price][iii] and move each element\r\n\t\t\t\tfor (uint ii = iii; ii < sellArr.length - 1; ii++) {\r\n\t\t\t\t\tsellArr[ii] = sellArr[ii + 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete sellArr[sellArr.length - 1];\r\n\t\t\t\tsellArr.length--;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//Delete _price from sellOrderPrices[_node][] if it's the last order\r\n\t\tif (sellArr.length == 0) {\r\n\t\t\tuint _fromArg = 99999;\r\n\t\t\tfor (iii = 0; iii < sellOrderPrices[_node].length - 1; iii++) {\r\n\t\t\t\tif (sellOrderPrices[_node][iii] == _price) {\r\n\t\t\t\t\t_fromArg = iii;\r\n\t\t\t\t}\r\n\t\t\t\tif (_fromArg != 99999 && iii >= _fromArg) sellOrderPrices[_node][iii] = sellOrderPrices[_node][iii + 1];\r\n\t\t\t}\r\n\t\t\tdelete sellOrderPrices[_node][sellOrderPrices[_node].length-1];\r\n\t\t\tsellOrderPrices[_node].length--;\r\n\t\t}\r\n\t\t_result = true;\r\n\t\temit CancelSellOrder(_orderId, _node, _price);\r\n\t}\r\n\t\r\n\tfunction buyCertainOrder(uint _node, uint _price, uint _amount, uint _orderId) payable public returns (bool _result) {\r\n\t\trequire(_node > 0 && _price > 0 && _amount > 0 && msg.value > 0 );\r\n\t\torderInfo[] sellArr = sellOrders[_node][_price];\r\n\t\tfor (uint iii = 0; iii < sellArr.length; iii++) {\r\n\t\t\tif (sellArr[iii].orderId == _orderId) {\r\n\t\t\t\trequire(_amount <= sellArr[iii].amount && msg.value == _amount*_price + _amount*_price*feeMultipliedByTen/1000);\r\n\t\t\t\taddress _client = sellArr[iii].client;\r\n\t\t\t\t//buy stocks for ether\r\n\t\t\t\tbalanceOf[msg.sender][_node] += _amount;// adds the amount to buyer's balance\r\n\t\t\t\tfrozen[_client][_node] -= _amount;// subtracts the amount from seller's frozen balance\r\n\t\t\t\t//transfer ether to the seller and fee to a contract owner\r\n\t\t\t\tpendingWithdrawals[_client] += _price*_amount;\r\n\t\t\t\tpendingWithdrawals[owner] += _price*_amount*feeMultipliedByTen/1000;\r\n\t\t\t\t//save the transaction\r\n\t\t\t\temit TradeHistory(_node, block.timestamp, msg.sender, _client, _price, _amount, _orderId);\r\n\t\t\t\t//delete sellArr[iii] and move each element\r\n\t\t\t\tif (_amount == sellArr[iii].amount) {\r\n\t\t\t\t\tfor (uint ii = iii; ii < sellArr.length - 1; ii++) \r\n\t\t\t\t\t\tsellArr[ii] = sellArr[ii + 1];\r\n\t\t\t\t\tdelete sellArr[sellArr.length - 1];\r\n\t\t\t\t\tsellArr.length--;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsellArr[iii].amount = sellArr[iii].amount - _amount;//edit sellOrders\r\n\t\t\t\t}\r\n\t\t\t\t//Delete _price from sellOrderPrices[_node][] if it's the last order\r\n\t\t\t\tif (sellArr.length == 0) {\r\n\t\t\t\t\tuint _fromArg = 99999;\r\n\t\t\t\t\tfor (uint i = 0; i < sellOrderPrices[_node].length - 1; i++) {\r\n\t\t\t\t\t\tif (sellOrderPrices[_node][i] == _price) {\r\n\t\t\t\t\t\t\t_fromArg = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (_fromArg != 99999 && i >= _fromArg) sellOrderPrices[_node][i] = sellOrderPrices[_node][i + 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete sellOrderPrices[_node][sellOrderPrices[_node].length-1];\r\n\t\t\t\t\tsellOrderPrices[_node].length--;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t_result = true;\r\n\t}\r\n\t\r\n\tfunction sellCertainOrder(uint _node, uint _price, uint _amount, uint _orderId) public returns (bool _result) {\r\n\t\trequire(_node > 0 && _price > 0 && _amount > 0 );\r\n\t\torderInfo[] buyArr = buyOrders[_node][_price];\r\n\t\tfor (uint iii = 0; iii < buyArr.length; iii++) {\r\n\t\t\tif (buyArr[iii].orderId == _orderId) {\r\n\t\t\t\trequire(_amount <= buyArr[iii].amount && balanceOf[msg.sender][_node] >= _amount);\r\n\t\t\t\taddress _client = buyArr[iii].client;\r\n\t\t\t\t//sell stocks for ether\r\n\t\t\t\tbalanceOf[_client][_node] += _amount;// adds the amount to buyer's balance\r\n\t\t\t\tbalanceOf[msg.sender][_node] -= _amount;// subtracts the amount from seller's frozen balance\r\n\t\t\t\t//transfer ether to the seller and fee to a contract owner\r\n\t\t\t\tpendingWithdrawals[msg.sender] += _price*_amount;\r\n\t\t\t\tpendingWithdrawals[owner] += _price*_amount*buyArr[iii].fee/1000;\r\n\t\t\t\t//save the transaction\r\n\t\t\t\temit TradeHistory(_node, block.timestamp, _client, msg.sender, _price, _amount, _orderId);\r\n\t\t\t\t//delete buyArr[iii] and move each element\r\n\t\t\t\tif (_amount == buyArr[iii].amount) {\r\n\t\t\t\t\tfor (uint ii = iii; ii < buyArr.length - 1; ii++) \r\n\t\t\t\t\t\tbuyArr[ii] = buyArr[ii + 1];\r\n\t\t\t\t\tdelete buyArr[buyArr.length - 1];\r\n\t\t\t\t\tbuyArr.length--;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbuyArr[iii].amount = buyArr[iii].amount - _amount;//edit buyOrders\r\n\t\t\t\t}\r\n\t\t\t\t//Delete _price from buyOrderPrices[_node][] if it's the last order\r\n\t\t\t\tif (buyArr.length == 0) {\r\n\t\t\t\t\tuint _fromArg = 99999;\r\n\t\t\t\t\tfor (uint i = 0; i < buyOrderPrices[_node].length - 1; i++) {\r\n\t\t\t\t\t\tif (buyOrderPrices[_node][i] == _price) {\r\n\t\t\t\t\t\t\t_fromArg = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (_fromArg != 99999 && i >= _fromArg) buyOrderPrices[_node][i] = buyOrderPrices[_node][i + 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete buyOrderPrices[_node][buyOrderPrices[_node].length-1];\r\n\t\t\t\t\tbuyOrderPrices[_node].length--;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t_result = true;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmationNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"}],\"name\":\"getEmission\",\"outputs\":[{\"name\":\"_emissionNumber\",\"type\":\"uint256\"},{\"name\":\"_emissionDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newConfirmationNode\",\"type\":\"string\"}],\"name\":\"addConfirmationNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"orderId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodes\",\"outputs\":[{\"name\":\"nodeName\",\"type\":\"string\"},{\"name\":\"producer\",\"type\":\"address\"},{\"name\":\"node\",\"type\":\"address\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"starmidConfirmed\",\"type\":\"uint8\"},{\"name\":\"confirmationPost\",\"type\":\"string\"},{\"name\":\"producersPercent\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeID\",\"type\":\"uint256\"},{\"name\":\"confirmationPost\",\"type\":\"string\"},{\"name\":\"confirmationStatus\",\"type\":\"uint8\"}],\"name\":\"outsourceConfirmNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"nodeGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeID\",\"type\":\"uint256\"},{\"name\":\"confirmationPost\",\"type\":\"string\"},{\"name\":\"confirmationStatus\",\"type\":\"uint8\"}],\"name\":\"confirmNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeID\",\"type\":\"uint256\"},{\"name\":\"_newProducer\",\"type\":\"address\"},{\"name\":\"_newProducersPercent\",\"type\":\"uint8\"}],\"name\":\"editNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_node\",\"type\":\"uint256\"}],\"name\":\"getWithFrozenStockBalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellOrder\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"},{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"cancelBuyOrder\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"}],\"name\":\"getBuyOrderPrices\",\"outputs\":[{\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiKey\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nodeID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint8\"}],\"name\":\"changeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nodeGroupID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeId\",\"type\":\"uint256\"},{\"name\":\"_producersPercent\",\"type\":\"uint8\"}],\"name\":\"changePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nodeID\",\"type\":\"uint256\"}],\"name\":\"getNodeInfo\",\"outputs\":[{\"name\":\"_producer\",\"type\":\"address\"},{\"name\":\"_node\",\"type\":\"address\"},{\"name\":\"_date\",\"type\":\"uint256\"},{\"name\":\"_starmidConfirmed\",\"type\":\"uint8\"},{\"name\":\"_nodeName\",\"type\":\"string\"},{\"name\":\"_nodeGroup\",\"type\":\"uint16[]\"},{\"name\":\"_producersPercent\",\"type\":\"uint256\"},{\"name\":\"_confirmationPost\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_node\",\"type\":\"uint256\"}],\"name\":\"getStockBalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"}],\"name\":\"emission\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"},{\"name\":\"_producersPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeID\",\"type\":\"uint256\"},{\"name\":\"_deleteNodeGroup\",\"type\":\"uint16\"}],\"name\":\"deleteNodeGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"}],\"name\":\"getSellOrderPrices\",\"outputs\":[{\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nodeID\",\"type\":\"uint256\"},{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"getOutsourceConfirmation\",\"outputs\":[{\"name\":\"_confirmationStatus\",\"type\":\"uint256\"},{\"name\":\"_confirmationNode\",\"type\":\"address\"},{\"name\":\"_confirmationNodeName\",\"type\":\"string\"},{\"name\":\"_confirmationPost\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"sellCertainOrder\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emissionLimits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeID\",\"type\":\"uint256\"},{\"name\":\"_newNodeGroup\",\"type\":\"uint16\"}],\"name\":\"pushNodeGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newNode\",\"type\":\"string\"},{\"name\":\"_producersPercent\",\"type\":\"uint8\"}],\"name\":\"addNode\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"cancelSellOrder\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerAddress\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"buyCertainOrder\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emissions\",\"outputs\":[{\"name\":\"emissionNumber\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeID\",\"type\":\"uint256\"},{\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"addNodeAddress\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newNodeGroup\",\"type\":\"string\"}],\"name\":\"addNodeGroup\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"},{\"name\":\"_id\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_buyPrice\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyOrder\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"},{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeMultipliedByTen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_isBuyOrder\",\"type\":\"bool\"},{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"node\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Emission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"node\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"node\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"node\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CancelBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"node\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CancelSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"node\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"TradeHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nodeName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"producersPercent\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"producer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"NewNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"newNodeGroup\",\"type\":\"string\"}],\"name\":\"NewNodeGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nodeAdress\",\"type\":\"address\"}],\"name\":\"AddNodeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newProducer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newProducersPercent\",\"type\":\"uint8\"}],\"name\":\"EditNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"confirmationStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"confirmationPost\",\"type\":\"string\"}],\"name\":\"ConfirmNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"confirmationStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"confirmationNode\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"confirmationPost\",\"type\":\"string\"}],\"name\":\"OutsourceConfirmNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"producersPercent\",\"type\":\"uint256\"}],\"name\":\"ChangePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newNodeGroup\",\"type\":\"uint256\"}],\"name\":\"PushNodeGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deleteNodeGroup\",\"type\":\"uint256\"}],\"name\":\"DeleteNodeGroup\",\"type\":\"event\"}]","ContractName":"Starmid","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e41f7e5b8d2fe87d18aa211184ed420480f5ede762d9139a5e19e7ab877230ad"}]}