{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Owned {\r\n\taddress public owner;\r\n\taddress public signer;\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\tsigner = msg.sender;\r\n\t}\r\n\r\n    modifier onlyOwner {\r\n    \trequire(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlySigner {\r\n\trequire(msg.sender == signer);\r\n\t_;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n\towner = newOwner;\r\n    }\r\n\r\n    function transferSignership(address newSigner) public onlyOwner {\r\n        signer = newSigner;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Token {\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balances;\r\n\r\n    // Mapping for allowance\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Approval(address indexed sender, address indexed spender, uint256 value);\r\n\r\n    constructor(uint256 _supply, string _name, string _symbol)\r\n\tpublic\r\n    {\r\n\t//initial mint\r\n        totalSupply = _supply * 10**uint256(decimals);\r\n        balances[msg.sender] = totalSupply;\r\n\r\n\t//set variables\r\n\tname=_name;\r\n\tsymbol=_symbol;\r\n\r\n\t//trigger event\r\n        emit Transfer(0x0, msg.sender, totalSupply);\r\n    }\r\n\r\n\t/**\r\n\t * Returns current tokens total supply\r\n\t */\r\n    function totalSupply()\r\n    \tpublic\r\n    \tconstant\r\n    \treturns (uint256)\r\n    {\r\n\t\treturn totalSupply;\r\n    }\r\n\r\n\t/**\r\n     * Get the token balance for account `tokenOwner`\r\n     */\r\n    function balanceOf(address _owner)\r\n    \tpublic\r\n    \tconstant\r\n    \treturns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n\t/**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value)\r\n    \tpublic\r\n    \treturns (bool success)\r\n    {\r\n\t\t// To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n      \t//set allowance\r\n      \tallowed[msg.sender][_spender] = _value;\r\n\r\n\t\t//trigger event\r\n      \temit Approval(msg.sender, _spender, _value);\r\n\r\n\t\treturn true;\r\n    }\r\n\r\n    /**\r\n     * Show allowance\r\n     */\r\n    function allowance(address _owner, address _spender)\r\n    \tpublic\r\n    \tconstant\r\n    \treturns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\t/**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value)\r\n    \tinternal\r\n    \treturns (bool success)\r\n    {\r\n\t\t// Do not allow transfer to 0x0 or the token contract itself or from address to itself\r\n\t\trequire((_to != address(0)) && (_to != address(this)) && (_to != _from));\r\n\r\n        // Check if the sender has enough\r\n        require((_value > 0) && (balances[_from] >= _value));\r\n\r\n        // Check for overflows\r\n        require(balances[_to] + _value > balances[_to]);\r\n\r\n        // Subtract from the sender\r\n        balances[_from] -= _value;\r\n\r\n        // Add the same to the recipient\r\n        balances[_to] += _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n\t/**\r\n      * Transfer tokens\r\n      *\r\n      * Send `_value` tokens to `_to` from your account\r\n      *\r\n      * @param _to The address of the recipient\r\n      * @param _value the amount to send\r\n      */\r\n    function transfer(address _to, uint256 _value)\r\n    \tpublic\r\n    \treturns (bool success)\r\n    {\r\n    \treturn _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n  \t/**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    \tpublic\r\n    \treturns (bool success)\r\n    {\r\n\t\t// Check allowance\r\n    \trequire(_value <= allowed[_from][msg.sender]);\r\n\r\n\t\t//decrement allowance\r\n\t\tallowed[_from][msg.sender] -= _value;\r\n\r\n    \t//transfer tokens\r\n        return _transfer(_from, _to, _value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract CrowdSaleTeleToken is Owned {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 public price;\r\n\r\n\tERC20Token public crowdSaleToken;\r\n\r\n\t/**\r\n\t * Constructor function\r\n\t *\r\n\t * Setup the owner\r\n\t */\r\n\tconstructor(uint256 _price, address _tokenAddress)\r\n\t\tpublic\r\n\t{\r\n\t\t//set initial token price\r\n\t\tprice = _price;\r\n\r\n\t\t//set crowdsale token\r\n\t\tcrowdSaleToken = ERC20Token(_tokenAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * Fallback function\r\n\t *\r\n\t * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n\t */\r\n\tfunction ()\r\n\t\tpayable\r\n\t\tpublic\r\n\t{\r\n\t\t//calc buy amount\r\n\t\tuint256 amount = msg.value / price;\r\n\r\n\t\t//check amount, it cannot be zero\r\n\t\trequire(amount != 0);\r\n\r\n\t\t//transfer required amount\r\n\t\tcrowdSaleToken.transfer(msg.sender, amount.mul(10**18));\r\n\t}\r\n\r\n\t/**\r\n\t * Withdraw eth\r\n\t */\r\n\tfunction withdrawalEth(uint256 _amount)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\t//send requested amount to owner\r\n\t\tmsg.sender.transfer(_amount);\r\n\t}\r\n\r\n\t/**\r\n\t * Withdraw tokens\r\n\t */\r\n\tfunction withdrawalToken(uint256 _amount)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\t//send requested amount to owner\r\n\t\tcrowdSaleToken.transfer(msg.sender, _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * Set token price\r\n\t */\r\n\tfunction setPrice(uint256 _price)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\t//check new price, it cannot be zero\r\n\t\tassert(_price != 0);\r\n\r\n\t\t//set new crowdsale token price\r\n\t\tprice = _price;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"transferSignership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"CrowdSaleTeleToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000011c7d6ce2c000000000000000000000000000b363a3c584b1f379c79fbf09df015da5529d4dac","Library":"","SwarmSource":"bzzr://e2b8948f7d69ba2e894fa7b0edcace06d9a5b2afc94456f17749a25c7869517a"}]}