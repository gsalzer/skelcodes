{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract CFXToken {\r\n\t// Setting constant\r\n\tuint256 constant public TOTAL_TOKEN = 10 ** 9;\r\n\tuint256 constant public TOKEN_FOR_ICO = 650 * 10 ** 6;\r\n\tuint256 constant public TOKEN_FOR_COMPANY = 200 * 10 ** 6;\r\n\tuint256 constant public TOKEN_FOR_BONUS = 50 * 10 ** 6;\r\n\t\r\n\tmapping (address => uint256) public tokenForTeam;\r\n\tmapping (address => uint256) public tokenForTeamGet;\r\n\taddress[] public teamAddress;\r\n\r\n\tuint public startTime;\r\n\t\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 8;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function CFXToken(\r\n    ) public {\r\n        totalSupply = TOTAL_TOKEN * 10 ** uint256(decimals); // Update total supply with the decimal amount\r\n        name = \"CFX Token\";                                 // Set the name for display purposes\r\n        symbol = \"CFX\";                               \t\t// Set the symbol for display purposes\r\n\t\t\r\n\t\t// Initializes\r\n\t\tstartTime = 1512997200; // need to update start time\r\n\t\t\r\n\t\ttokenForTeam[0x4B7786bD8eB1F738699290Bb83cA8E28fEDea4b0] =\t20 * 10 ** 6 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0x040440286a443822211dDe0e7E9DA3F49aF2EBC7] =\t20 * 10 ** 6 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0x4f7a5A2BafAd56562ac4Ccc85FE004BB84435F71] =\t20 * 10 ** 6 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0x7E0D3AaaCB57b0Fd109D9F16e00a375ECa48b41D] =\t20 * 10 ** 6 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0xc456aC342f17E7003A03479e275fDA322dE38681] =\t500  * 10 ** 3 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0xB19d3c4c494B5a3d5d72E0e47076AefC1c643D24] =\t300  * 10 ** 3 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0x88311485647e19510298d7Dbf0a346D5B808DF03] =\t500  * 10 ** 3 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F] =\t500  * 10 ** 3 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0x45cD08764e06c1563d4B13b85cCE7082Be0bA6D1] =\t100  * 10 ** 3 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0xB08924a0D0AF93Fa29e5B0ba103A339704cdeFdb] =\t100  * 10 ** 3 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0xa8bD7C22d37ea1887b425a9B0A3458A186bf6E77] =\t1 * 10 ** 6 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0xe387125f1b24E59f7811d26fbb26bdA1c599b061] =\t1 * 10 ** 6 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0xC5b644c5fDe01fce561496179a8Bb7886349bD75] =\t1 * 10 ** 6 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0xe4dB43bcB8aecFf58C720F70414A9d36Fd7B9F78] =\t5 * 10 ** 6 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0xf28edB52E808cd9DCe18A87fD94D373D6B9f65ae] =\t5 * 10 ** 6 * 10 ** uint256(decimals);\r\n\t\ttokenForTeam[0x87CE30ad0B66266b30c206a9e39A3FC0970db5eF] =\t5 * 10 ** 6 * 10 ** uint256(decimals);\r\n\t\t\r\n\t\t// address of teams\r\n\t\tteamAddress.push(0x4B7786bD8eB1F738699290Bb83cA8E28fEDea4b0);\r\n\t\tteamAddress.push(0x040440286a443822211dDe0e7E9DA3F49aF2EBC7);\r\n\t\tteamAddress.push(0x4f7a5A2BafAd56562ac4Ccc85FE004BB84435F71);\r\n\t\tteamAddress.push(0x7E0D3AaaCB57b0Fd109D9F16e00a375ECa48b41D);\r\n\t\tteamAddress.push(0xc456aC342f17E7003A03479e275fDA322dE38681);\r\n\t\tteamAddress.push(0xB19d3c4c494B5a3d5d72E0e47076AefC1c643D24);\r\n\t\tteamAddress.push(0x88311485647e19510298d7Dbf0a346D5B808DF03);\r\n\t\tteamAddress.push(0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F);\r\n\t\tteamAddress.push(0x45cD08764e06c1563d4B13b85cCE7082Be0bA6D1);\r\n\t\tteamAddress.push(0xB08924a0D0AF93Fa29e5B0ba103A339704cdeFdb);\r\n\t\tteamAddress.push(0xa8bD7C22d37ea1887b425a9B0A3458A186bf6E77);\r\n\t\tteamAddress.push(0xe387125f1b24E59f7811d26fbb26bdA1c599b061);\r\n\t\tteamAddress.push(0xC5b644c5fDe01fce561496179a8Bb7886349bD75);\r\n\t\tteamAddress.push(0xe4dB43bcB8aecFf58C720F70414A9d36Fd7B9F78);\r\n\t\tteamAddress.push(0xf28edB52E808cd9DCe18A87fD94D373D6B9f65ae);\r\n\t\tteamAddress.push(0x87CE30ad0B66266b30c206a9e39A3FC0970db5eF);\r\n\r\n\t\tuint arrayLength = teamAddress.length;\r\n\t\tfor (uint i=0; i<arrayLength; i++) {\r\n\t\t\ttokenForTeamGet[teamAddress[i]] = tokenForTeam[teamAddress[i]] * 1 / 10; // first period\r\n\t\t\tbalanceOf[teamAddress[i]] = tokenForTeamGet[teamAddress[i]];\r\n\t\t\ttokenForTeam[teamAddress[i]] -= tokenForTeamGet[teamAddress[i]];\r\n\t\t}\r\n\t\tbalanceOf[0x966F2884524858326DfF216394a61b9894166c68] = TOKEN_FOR_ICO * 10 ** uint256(decimals);\r\n\t\tbalanceOf[0x8eee1a576FaF1332466AaDD9F35Ebf5b6e0162c9] = TOKEN_FOR_COMPANY * 10 ** uint256(decimals);\r\n\t\tbalanceOf[0xAe77D38cba1AA5D5288DFC5834a16CcD24dd4041] = TOKEN_FOR_BONUS * 10 ** uint256(decimals);\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction getTeamFund() public {\r\n\t\t// Second period after 9 months\r\n\t\tif (now >= startTime + 270 days) {\r\n\t\t\tif (tokenForTeamGet[msg.sender] <  tokenForTeam[msg.sender] * 55 / 100) {\r\n\t\t\t\tuint256 getValue2 = tokenForTeam[msg.sender] * 45 / 100;\r\n\t\t\t\ttokenForTeamGet[msg.sender] += getValue2; // first period\r\n\t\t\t\tbalanceOf[msg.sender] += getValue2;\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// Third period after 9 + 6 months\r\n\t\tif (now >= startTime + 450 days) {\r\n\t\t\tif (tokenForTeamGet[msg.sender] <  tokenForTeam[msg.sender]) {\r\n\t\t\t\tuint256 getValue3 = tokenForTeam[msg.sender] * 45 / 100;\r\n\t\t\t\ttokenForTeamGet[msg.sender] += getValue3; // first period\r\n\t\t\t\tbalanceOf[msg.sender] += getValue3;\t\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_FOR_COMPANY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_FOR_ICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_FOR_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenForTeamGet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTeamFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenForTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"CFXToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://eb3528a39bc11f361b187642725ceaa67e7dd3564d5fee07f66e1f3e788af8ac"}]}