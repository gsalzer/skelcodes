{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title IPFS hash handler\r\n *\r\n * @dev IPFS multihash handler. Does a small check to validate that a multihash is\r\n *   correct by validating the digest size byte of the hash. For example, the IPFS\r\n *   Multihash \"QmPtkU87jX1SnyhjAgUwnirmabAmeASQ4wGfwxviJSA4wf\" is the base58\r\n *   encoded form of the following data:\r\n *\r\n *     ┌────┬────┬───────────────────────────────────────────────────────────────────┐\r\n *     │byte│byte│             variable length hash based on digest size             │\r\n *     ├────┼────┼───────────────────────────────────────────────────────────────────┤\r\n *     │0x12│0x20│0x1714c8d0fa5dbe9e6c04059ddac50c3860fb0370d67af53f2bd51a4def656526 │\r\n *     └────┴────┴───────────────────────────────────────────────────────────────────┘\r\n *       ▲    ▲                                   ▲\r\n *       │    └───────────┐                       │\r\n *   hash function    digest size             hash value\r\n *\r\n * we still store the data as `bytes` since it is inherently a variable length structure.\r\n *\r\n * @dev See multihash format: https://git.io/vbooc\r\n */\r\ncontract DependentOnIPFS {\r\n  /**\r\n   * @dev Validate a multihash bytes value\r\n   */\r\n  function isValidIPFSMultihash(bytes _multihashBytes) internal pure returns (bool) {\r\n    require(_multihashBytes.length > 2);\r\n\r\n    uint8 _size;\r\n\r\n    // There isn't another way to extract only this byte into a uint8\r\n    // solhint-disable no-inline-assembly\r\n    assembly {\r\n      // Seek forward 33 bytes beyond the solidity length value and the hash function byte\r\n      _size := byte(0, mload(add(_multihashBytes, 33)))\r\n    }\r\n\r\n    return (_multihashBytes.length == _size + 2);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Voteable poll with associated IPFS data\r\n *\r\n * A poll records votes on a variable number of choices. A poll specifies\r\n * a window during which users can vote. Information like the poll title and\r\n * the descriptions for each option are stored on IPFS.\r\n */\r\ncontract Poll is DependentOnIPFS {\r\n  // There isn't a way around using time to determine when votes can be cast\r\n  // solhint-disable not-rely-on-time\r\n\r\n  bytes public pollDataMultihash;\r\n  uint16 public numChoices;\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  address public author;\r\n  address public pollAdmin;\r\n\r\n  AccountRegistryInterface public registry;\r\n  SigningLogicInterface public signingLogic;\r\n\r\n  mapping(uint256 => uint16) public votes;\r\n\r\n  mapping (bytes32 => bool) public usedSignatures;\r\n\r\n  event VoteCast(address indexed voter, uint16 indexed choice);\r\n\r\n  constructor(\r\n    bytes _ipfsHash,\r\n    uint16 _numChoices,\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    address _author,\r\n    AccountRegistryInterface _registry,\r\n    SigningLogicInterface _signingLogic,\r\n    address _pollAdmin\r\n  ) public {\r\n    require(_startTime >= now && _endTime > _startTime);\r\n    require(isValidIPFSMultihash(_ipfsHash));\r\n\r\n    numChoices = _numChoices;\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    pollDataMultihash = _ipfsHash;\r\n    author = _author;\r\n    registry = _registry;\r\n    signingLogic = _signingLogic;\r\n    pollAdmin = _pollAdmin;\r\n  }\r\n\r\n  function vote(uint16 _choice) external {\r\n    voteForUser(_choice, msg.sender);\r\n  }\r\n\r\n  function voteFor(uint16 _choice, address _voter, bytes32 _nonce, bytes _delegationSig) external onlyPollAdmin {\r\n    require(!usedSignatures[keccak256(abi.encodePacked(_delegationSig))], \"Signature not unique\");\r\n    usedSignatures[keccak256(abi.encodePacked(_delegationSig))] = true;\r\n    bytes32 _delegationDigest = signingLogic.generateVoteForDelegationSchemaHash(\r\n      _choice,\r\n      _voter,\r\n      _nonce,\r\n      this\r\n    );\r\n    require(_voter == signingLogic.recoverSigner(_delegationDigest, _delegationSig));\r\n    voteForUser(_choice, _voter);\r\n  }\r\n\r\n  /**\r\n   * @dev Cast or change your vote\r\n   * @param _choice The index of the option in the corresponding IPFS document.\r\n   */\r\n  function voteForUser(uint16 _choice, address _voter) internal duringPoll {\r\n    // Choices are indexed from 1 since the mapping returns 0 for \"no vote cast\"\r\n    require(_choice <= numChoices && _choice > 0);\r\n    uint256 _voterId = registry.accountIdForAddress(_voter);\r\n\r\n    votes[_voterId] = _choice;\r\n    emit VoteCast(_voter, _choice);\r\n  }\r\n\r\n  modifier duringPoll {\r\n    require(now >= startTime && now <= endTime);\r\n    _;\r\n  }\r\n\r\n  modifier onlyPollAdmin {\r\n    require(msg.sender == pollAdmin);\r\n    _;\r\n  }\r\n}\r\n\r\ninterface AccountRegistryInterface {\r\n  function accountIdForAddress(address _address) public view returns (uint256);\r\n  function addressBelongsToAccount(address _address) public view returns (bool);\r\n  function createNewAccount(address _newUser) external;\r\n  function addAddressToAccount(\r\n    address _newAddress,\r\n    address _sender\r\n    ) external;\r\n  function removeAddressFromAccount(address _addressToRemove) external;\r\n}\r\n\r\ncontract SigningLogicInterface {\r\n  function recoverSigner(bytes32 _hash, bytes _sig) external pure returns (address);\r\n  function generateRequestAttestationSchemaHash(\r\n    address _subject,\r\n    address _attester,\r\n    address _requester,\r\n    bytes32 _dataHash,\r\n    uint256[] _typeIds,\r\n    bytes32 _nonce\r\n    ) external view returns (bytes32);\r\n  function generateAttestForDelegationSchemaHash(\r\n    address _subject,\r\n    address _requester,\r\n    uint256 _reward,\r\n    bytes32 _paymentNonce,\r\n    bytes32 _dataHash,\r\n    uint256[] _typeIds,\r\n    bytes32 _requestNonce\r\n    ) external view returns (bytes32);\r\n  function generateContestForDelegationSchemaHash(\r\n    address _requester,\r\n    uint256 _reward,\r\n    bytes32 _paymentNonce\r\n  ) external view returns (bytes32);\r\n  function generateStakeForDelegationSchemaHash(\r\n    address _subject,\r\n    uint256 _value,\r\n    bytes32 _paymentNonce,\r\n    bytes32 _dataHash,\r\n    uint256[] _typeIds,\r\n    bytes32 _requestNonce,\r\n    uint256 _stakeDuration\r\n    ) external view returns (bytes32);\r\n  function generateRevokeStakeForDelegationSchemaHash(\r\n    uint256 _subjectId,\r\n    uint256 _attestationId\r\n    ) external view returns (bytes32);\r\n  function generateAddAddressSchemaHash(\r\n    address _senderAddress,\r\n    bytes32 _nonce\r\n    ) external view returns (bytes32);\r\n  function generateVoteForDelegationSchemaHash(\r\n    uint16 _choice,\r\n    address _voter,\r\n    bytes32 _nonce,\r\n    address _poll\r\n    ) external view returns (bytes32);\r\n  function generateReleaseTokensSchemaHash(\r\n    address _sender,\r\n    address _receiver,\r\n    uint256 _amount,\r\n    bytes32 _uuid\r\n    ) external view returns (bytes32);\r\n  function generateLockupTokensDelegationSchemaHash(\r\n    address _sender,\r\n    uint256 _amount,\r\n    bytes32 _nonce\r\n    ) external view returns (bytes32);\r\n}\r\n\r\n/*\r\n * @title Bloom voting center\r\n * @dev The voting center is the home of all polls conducted within the Bloom network.\r\n *   Anyone can create a new poll and there is no \"owner\" of the network. The Bloom dApp\r\n *   assumes that all polls are in the `polls` field so any Bloom poll should be created\r\n *   through the `createPoll` function.\r\n */\r\ncontract VotingCenter {\r\n  Poll[] public polls;\r\n\r\n  event PollCreated(address indexed poll, address indexed author);\r\n\r\n  /**\r\n   * @dev create a poll and store the address of the poll in this contract\r\n   * @param _ipfsHash Multihash for IPFS file containing poll information\r\n   * @param _numOptions Number of choices in this poll\r\n   * @param _startTime Time after which a user can cast a vote in the poll\r\n   * @param _endTime Time after which the poll no longer accepts new votes\r\n   * @return The address of the new Poll\r\n   */\r\n  function createPoll(\r\n    bytes _ipfsHash,\r\n    uint16 _numOptions,\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    AccountRegistryInterface _registry,\r\n    SigningLogicInterface _signingLogic,\r\n    address _pollAdmin\r\n  ) public returns (address) {\r\n    Poll newPoll = new Poll(\r\n      _ipfsHash,\r\n      _numOptions,\r\n      _startTime,\r\n      _endTime,\r\n      msg.sender,\r\n      _registry,\r\n      _signingLogic,\r\n      _pollAdmin\r\n      );\r\n    polls.push(newPoll);\r\n\r\n    emit PollCreated(newPoll, msg.sender);\r\n\r\n    return newPoll;\r\n  }\r\n\r\n  function allPolls() view public returns (Poll[]) {\r\n    return polls;\r\n  }\r\n\r\n  function numPolls() view public returns (uint256) {\r\n    return polls.length;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_ipfsHash\",\"type\":\"bytes\"},{\"name\":\"_numOptions\",\"type\":\"uint16\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_signingLogic\",\"type\":\"address\"},{\"name\":\"_pollAdmin\",\"type\":\"address\"}],\"name\":\"createPoll\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPolls\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"polls\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPolls\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"poll\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"author\",\"type\":\"address\"}],\"name\":\"PollCreated\",\"type\":\"event\"}]","ContractName":"VotingCenter","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://20de18bb83a734e005165161032e6fb4eec1c254ba405bb916f56ae75fb5c39a"}]}