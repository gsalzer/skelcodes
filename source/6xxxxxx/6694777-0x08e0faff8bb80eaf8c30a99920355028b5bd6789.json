{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ninterface tokenRecipient \r\n{ \r\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n//contrato para definir quien es el administrador central del token\r\ncontract owned \r\n{    \r\n  \taddress public owner;\r\n\r\n    constructor() public    \r\n    {        \r\n    \towner = msg.sender;\r\n\r\n    }    \r\n    modifier onlyOwner     \r\n    {        \r\n    \trequire(msg.sender == owner);\r\n        _;\r\n\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public     \r\n    {        \r\n    \towner = newOwner;\r\n\r\n    }\r\n}\r\n\r\ncontract TokenPrueba1 is owned\r\n{    \r\n    //Variables publicas del token    \r\n   \tstring public name;\r\n\r\n    string public symbol;\r\n\r\n    //18 decimales es el parametro por defecto, evitar cambiarlo    \r\n    uint8 public decimals = 8;\r\n\r\n    //cantidad total de la moneda\r\n    uint256 public totalSupply;\r\n\r\n    //Crea un arreglo para llevar los balances de las cuentas    \r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    //Arreglo que guarda la \"toleracia\" de las cuentas con otras, cuanto pueden \"tomar\" estas    \r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    //cuentas congeladas    \r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    // Crea un evento en la blockchain que notifica a los clientes de la transferencia    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // Crea un evento en la blockchain que notifica a los clientes de la aprobación    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // Notifica a los clientes de la cantidad quemada    \r\n    event Burn(uint256 value);\r\n\r\n    // Crea un evento que notifica sobre las cuentas congeladas    \r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /**\r\n    * Funcion constructora     \r\n    * Le da todos los tokens al creador del contrato      \r\n    *     \r\n    *@param initialSupply La cantidad inicial del token     \r\n    *@param tokenName El nombre del token     \r\n    *@param tokenSymbol El símbolo a usar por parte del token     \r\n    *@param centralMinter La direccion del creador     \r\n    **/    \r\n    constructor(uint256 initialSupply,string tokenName,string tokenSymbol, address centralMinter) public     \r\n    {        \r\n    \t//Le damos valor al totalSupply y le damos decimales        \r\n    \ttotalSupply = initialSupply * 10 ** uint256(decimals);\r\n\r\n        //al sender del contrato, le damos todos los tokens al principio        \r\n        balanceOf[msg.sender] = totalSupply;\r\n\r\n        //nombre del token        \r\n        name = tokenName;\r\n\r\n        //simbolo del token        \r\n        symbol = tokenSymbol;\r\n\r\n        //administrador de la moneda que puede cambiar la cantidad disponible (minter)       \r\n        if(centralMinter != 0 ) owner = centralMinter;\r\n\r\n    }        \r\n    /**     \r\n    *Funcion para cambiar el numero de tokens disponibles, solo el owner puede cambiarlos     \r\n    *     \r\n    *@param target direccion a la que se le cambiará el número de tokens     \r\n    *@param mintedAmount cantidad que se desea añadir     \r\n    **/    \r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public    \r\n    {        \r\n    \tbalanceOf[target] += mintedAmount;\r\n\r\n        totalSupply += mintedAmount;\r\n\r\n        emit Transfer(0, owner, mintedAmount);\r\n\r\n        emit Transfer(owner, target, mintedAmount);\r\n\r\n    }     \r\n    /**     \r\n    * Destruye tokens (quema dinero), solo el propietario puede     \r\n    *     \r\n    * Remueve la cantidad de tokens en '_value' del sistema de forma irreversible     \r\n    *     \r\n    * @param _value La cantidad de dinero a quemar     \r\n    */    \r\n    function burn(uint256 _value) onlyOwner public returns (bool success)    \r\n    {        \r\n    // Actualiza el totalSupply        \r\n    \ttotalSupply -= _value;\r\n\r\n        emit Burn(_value);\r\n\r\n        return true;\r\n\r\n    }    \r\n    /**    \r\n    *Congela una cuenta    \r\n    *    \r\n    *@param target direccion de la cuenta que se desea congelar    \r\n    *@param freeze booleano que decide si se desea congelar la cuenta (true) o descongelar (false)    \r\n    **/    \r\n    function freezeAccount(address target, bool freeze) onlyOwner public    \r\n    {        \r\n    \tfrozenAccount[target] = freeze;\r\n\r\n        emit FrozenFunds(target, freeze);\r\n\r\n    }    \r\n    /**     \r\n    * Transferencia interna, solo puede ser llamada por este contrato     \r\n    *      \r\n    *@param _from direccion de la cuenta desde donde se envian los tokens     \r\n    *@param _to direccion de la cuenta a la que van los tokens     \r\n    *@param _value Número de tokens a enviar     \r\n    */    \r\n    function _transfer(address _from, address _to, uint _value) internal {        \r\n    // Previene la transferencia a una cuenta 0x0. Para destruir tokens es mejor usar burn()        \r\n    \trequire(_to != 0x0);\r\n\r\n        // Verificamos si el que envia tiene suficiente diner        \r\n        require(balanceOf[_from] >= _value);\r\n\r\n        // Verificamos si existe o no un overflow        \r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n\r\n        // Guardamos esta asercion en el futuro        \r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n        // Le quitamos tokens al que envia        \r\n        balanceOf[_from] -= _value;\r\n\r\n        // Le añadimos esa cantidad al que envia        \r\n        balanceOf[_to] += _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        // asercion para encontrar bugs        \r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n    }    \r\n    /**     \r\n    * Transferir tokens     \r\n    *     \r\n    * Envia '_value' de tokens a '_to' desde tu cuenta     \r\n    *     \r\n    * @param _to La dirección del receptor     \r\n    * @param _value La cantidad a enviar     \r\n    */    \r\n    function transfer(address _to, uint256 _value) public returns (bool success)    \r\n    {        \r\n    \trequire(!frozenAccount[msg.sender]);\r\n\r\n        _transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n\r\n    }    \r\n    /**     \r\n    * Transferir tokens desde otra dirección     \r\n    *     \r\n    * Enviar la cantidad de tokens '_value' hacia la cuenta '_to' desde la cuenta '_from'     \r\n    * Esta es una función que podria usarse para operaciones de caja     \r\n    *     \r\n    * @param _from la dirección de quien envia     \r\n    * @param _to La dirección del receptor     \r\n    * @param _value La cantidad de tokens a enviar     \r\n    */    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)    {        \r\n    \trequire(_value <= allowance[_from][msg.sender]);\r\n\r\n     // Check allowance        \r\n    \tallowance[_from][msg.sender] -= _value;\r\n\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n\r\n    }    \r\n    /**     \r\n    * Coloca la toleracia para otras direcciones     \r\n    *     \r\n    * Permite que el '_spender' no gaste mas que la cantidad de '_value' de tokens por parte tuya     \r\n    *     \r\n    * @param _spender La dirección a la que se autoriza gastar     \r\n    * @param _value La cantidad máxima que pueden gastar     \r\n    */    \r\n    function approve(address _spender, uint256 _value) public returns (bool success)    {        \r\n    \tallowance[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n\r\n    }    \r\n    /**     \r\n    * Para funcionar con otros contratos     \r\n    * En prueba     \r\n    *     \r\n    * Coloca la toleracia para otras direcciones y notificar     \r\n    *     \r\n    * Permite al '_spender' a gastar no mas de la cantidad de tokens de '_value' de tu cuenta y luego notificar al contrato     \r\n    *     * @param _spender La dirección autorizada a gastar     * @param _value La cantidad máxima que pueden gastar     \r\n    * @param _extraData Informacion extra a enviar al contrato     \r\n    */    \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success)    {        \r\n    \ttokenRecipient spender = tokenRecipient(_spender);\r\n\r\n        if (approve(_spender, _value))        \r\n        {            \r\n        \tspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\r\n            return true;\r\n\r\n        }    \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"centralMinter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"}]","ContractName":"TokenPrueba1","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000009b2122dfd3ec7bfa64f5d545a1e3923576ac75e9000000000000000000000000000000000000000000000000000000000000000841555249636f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035249430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f9ca6f9a18ea03a3a1aa9c0cba4181051b3ed3a474d3e39f36225b056ea111c2"}]}