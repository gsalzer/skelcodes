{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\ncontract SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n}\r\n\r\n// contract ERC20 {\r\n//     function totalSupply() constant returns (uint supply);\r\n//     function balanceOf( address who ) constant returns (uint value);\r\n//     function allowance( address owner, address spender ) constant returns (uint _allowance);\r\n\r\n//     function transfer( address to, uint value) returns (bool ok);\r\n//     function transferFrom( address from, address to, uint value) returns (bool ok);\r\n//     function approve( address spender, uint value ) returns (bool ok);\r\n\r\n//     event Transfer( address indexed from, address indexed to, uint value);\r\n//     event Approval( address indexed owner, address indexed spender, uint value);\r\n// }\r\n\r\n//https://github.com/ethereum/ethereum-org/blob/master/solidity/token-erc20.sol\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Erc20Dist is SafeMath {\r\n    TokenERC20  public  _erc20token; //被操作的erc20代币\r\n\r\n    address public _ownerDist;// 这个合约最高权限人，开始是创建者，可以移交给他人\r\n    uint256 public _distDay;//发布时间\r\n    uint256 public _mode = 0;//模型是1表示使用模式1，2表示使用模式2\r\n    uint256 public _lockAllAmount;//锁仓的总量\r\n\r\n    struct Detail{//发放情况详情结构体声明\r\n        address founder;//创始人地址\r\n        uint256 lockDay;//锁仓时间\r\n        uint256 lockPercent;//锁仓百分比数（0到100之间）\r\n        uint256 distAmount;//总分配数量\r\n        uint256 lockAmount;//锁住的代币总量\r\n        uint256 initAmount;//初始款的代币量\r\n        uint256 distRate;//锁仓解锁后每天分配代币百分比数（按锁住的总额算，0到100之间）\r\n        uint256 oneDayTransferAmount;//锁仓解锁后每天应发放的代币数量\r\n        uint256 transferedAmount;//已转账代币数量\r\n        uint256 lastTransferDay;//最后一笔代币分配的时间\r\n        bool isFinish;// 是否本人都发放完成\r\n        bool isCancelDist;//是否同意撤销发行\r\n    }\r\n    Detail private detail = Detail(address(0),0,0,0,0,0,0,0,0,0, false, false);//中间变量初始化，用来在函数中临时承接计算结果，以便传送给_details\r\n    Detail[] public _details;//发放情况详情列表,并初始化为空值\r\n\tuint256 public _detailsLength = 0;//发放详情长度\r\n\r\n    bool public _fDist = false;// 是否已经发布过的标识符号\r\n    bool public _fConfig = false;// 是否已经配置过的标识符号\r\n    bool public _fFinish = false;// 是否所有人都发放完成\r\n    bool public _fCancelDist = false;// 是否撤销发行\r\n    \r\n    function Erc20Dist() public {\r\n        _ownerDist = msg.sender; // 默认创建者为权限最高人\r\n    }\r\n\r\n    function () public{}//callback函数，由于合约没有eth价值传入，所以没有什么安全问题\r\n\r\n    // 设置合约所有者\r\n    function setOwner(address owner_) public {\r\n        require (msg.sender == _ownerDist, \"you must _ownerDist\");// 必须原来所有者授权\r\n        require(_fDist == false, \"not dist\"); // 必须还没开始发布\r\n        require(_fConfig == false, \"not config\");// 必须还没配置过\r\n        _ownerDist = owner_;\r\n    }\r\n    //设置操作代币函数\r\n    function setErc20(TokenERC20  erc20Token) public {\r\n        require (msg.sender == _ownerDist, \"you must _ownerDist\");\r\n        require(address(_erc20token) == address(0),\"you have set erc20Token\");//必须之前没有设置过\r\n        require(erc20Token.balanceOf(address(this)) > 0, \"this contract must own tokens\");\r\n        _erc20token = erc20Token;//在全局设置erc20代币\r\n        _lockAllAmount = erc20Token.balanceOf(address(this));\r\n    }\r\n\r\n    // 撤销发行，必须所有参与人同意，才能撤销发行\r\n    function cancelDist() public {\r\n        require(_fDist == true, \"must dist\"); // 必须发布\r\n        require(_fCancelDist == false, \"must not cancel dist\");\r\n\r\n        // 循环判断是否\r\n        for(uint256 i=0;i<_details.length;i++){\r\n            // 判断是否发行者\r\n            if ( _details[i].founder == msg.sender ) {\r\n                // 设置标志\r\n                _details[i].isCancelDist = true;\r\n                break;\r\n            }\r\n        }\r\n        // 更新状态\r\n        updateCancelDistFlag();\r\n        if (_fCancelDist == true) {\r\n            require(_erc20token.balanceOf(address(this)) > 0, \"must have balance\");\r\n            // 返回所有代币给最高权限人\r\n            _erc20token.transfer(\r\n                _ownerDist, \r\n                _erc20token.balanceOf(address(this))\r\n            );\r\n        }\r\n    }\r\n\r\n    // 更新是否撤销发行标志\r\n    function updateCancelDistFlag() private {\r\n        bool allCancelDist = true;\r\n        for(uint256 i=0; i<_details.length; i++){\r\n            // 判断有没有人没撤销\r\n            if (_details[i].isCancelDist == false) {\r\n                allCancelDist = false;\r\n                break;\r\n            }\r\n        }\r\n        // 更新合约完成标志\r\n        _fCancelDist = allCancelDist;\r\n    }\r\n\r\n    // 还没调用发行情况下，返还所有代币，到最高权限账号，并且清除配置\r\n    function clearConfig() public {\r\n        require (msg.sender == _ownerDist, \"you must _ownerDist\");\r\n        require(_fDist == false, \"not dist\"); // 必须还没开始发布\r\n        require(address(_erc20token) != address(0),\"you must set erc20Token\");//必须之前设置过\r\n        require(_erc20token.balanceOf(address(this)) > 0, \"must have balance\");\r\n        // 返回所有代币给最高权限人\r\n        _erc20token.transfer(\r\n            msg.sender, \r\n            _erc20token.balanceOf(address(this))\r\n        );\r\n        // 清空变量\r\n        _lockAllAmount = 0;\r\n        TokenERC20  nullErc20token;\r\n        _erc20token = nullErc20token;\r\n        Detail[] nullDetails;\r\n        _details = nullDetails;\r\n        _detailsLength = 0;\r\n        _mode = 0;\r\n        _fConfig = false;\r\n    }\r\n\r\n    // 客户之前多转到合约的币，可以通过这个接口，提取回最高权限人账号，但必须在合约执行完成之后\r\n    function withDraw() public {\r\n        require (msg.sender == _ownerDist, \"you must _ownerDist\");\r\n        require(_fFinish == true, \"dist must be finished\"); // 合约必须执行完毕\r\n        require(address(_erc20token) != address(0),\"you must set erc20Token\");//必须之前设置过\r\n        require(_erc20token.balanceOf(address(this)) > 0, \"must have balance\");\r\n        // 返回所有代币给最高权限人\r\n        _erc20token.transfer(\r\n            _ownerDist, \r\n            _erc20token.balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    //配置相关创始人及代币发放、锁仓信息等相关情况的函数。auth认证，必须是合约持有人才能进行该操作\r\n    function configContract(uint256 mode,address[] founders,uint256[] distWad18Amounts,uint256[] lockPercents,uint256[] lockDays,uint256[] distRates) public {\r\n    //函数变量说明：founders（创始人地址列表），\r\n    //distWad18Amounts（总发放数量列表（不输入18位小数位）），\r\n    //lockPercents（锁仓百分比列表（值在0到100之间）），\r\n    //lockDays（锁仓天数列表）,distRates（每天发放数占锁仓总数的万分比数列表（值在0到10000之间））\r\n        require (msg.sender == _ownerDist, \"you must _ownerDist\");\r\n        require(mode==1||mode==2,\"there is only mode 1 or 2\");//只有模式1和2两种申领余款方式\r\n        _mode = mode;//将申领方式注册到全局\r\n        require(_fConfig == false,\"you have configured it already\");//必须还未配置过\r\n        require(address(_erc20token) != address(0), \"you must setErc20 first\");//必须已经设置好被操作erc20代币\r\n        require(founders.length!=0,\"array length can not be zero\");//创始人列表不能为空\r\n        require(founders.length==distWad18Amounts.length,\"founders length dismatch distWad18Amounts length\");//创始人列表长度必须等于发放数量列表长度\r\n        require(distWad18Amounts.length==lockPercents.length,\"distWad18Amounts length dismatch lockPercents length\");//发放数量列表长度必须等于锁仓百分比列表长度\r\n        require(lockPercents.length==lockDays.length,\"lockPercents length dismatch lockDays length\");//锁仓百分比列表长度必须等于锁仓天数列表长度\r\n        require(lockDays.length==distRates.length,\"lockDays length dismatch distRates length\");//锁仓百分比列表长度必须等于每日发放比率列表长度\r\n\r\n        //遍历\r\n        for(uint256 i=0;i<founders.length;i++){\r\n            require(distWad18Amounts[i]!=0,\"dist token amount can not be zero\");//确保发放数量不为0\r\n            for(uint256 j=0;j<i;j++){\r\n                require(founders[i]!=founders[j],\"you could not give the same address of founders\");//必须确保创始人中没有地址相同的\r\n            }\r\n        }\r\n        \r\n\r\n        //以下为循环中服务全局变量的中间临时变量\r\n        uint256 totalAmount = 0;//发放代币总量\r\n        uint256 distAmount = 0;//给当前创始人发放代币量（带18位精度）\r\n        uint256 oneDayTransferAmount = 0;//解锁后每天应发放的数量（将在后续进行计算）\r\n        uint256 lockAmount = 0;//当前创始人锁住的代币量\r\n        uint256 initAmount = 0;//当前创始人初始款代币量\r\n\r\n        //遍历\r\n        for(uint256 k=0;k<lockPercents.length;k++){\r\n            require(lockPercents[k]<=100,\"lockPercents unit must <= 100\");//锁仓百分比数必须小于等于100\r\n            require(distRates[k]<=10000,\"distRates unit must <= 10000\");//发放万分比数必须小于等于10000\r\n            distAmount = mul(distWad18Amounts[k],10**18);//给当前创始人发放代币量（带18位精度）\r\n            totalAmount = add(totalAmount,distAmount);//发放总量累加\r\n            lockAmount = div(mul(lockPercents[k],distAmount),100);//锁住的代币数量\r\n            initAmount = sub(distAmount, lockAmount);//初始款的代币数量\r\n            oneDayTransferAmount = div(mul(distRates[k],lockAmount),10000);//解锁后每天应发放的数量\r\n\r\n            //下面为中间变量detail的9个成员赋值\r\n            detail.founder = founders[k];\r\n            detail.lockDay = lockDays[k];\r\n            detail.lockPercent = lockPercents[k];\r\n            detail.distRate = distRates[k];\r\n            detail.distAmount = distAmount;\r\n            detail.lockAmount = lockAmount;\r\n            detail.initAmount = initAmount;\r\n            detail.oneDayTransferAmount = oneDayTransferAmount;\r\n            detail.transferedAmount = 0;//初始还未开始发放，所以已分配数量为0\r\n            detail.lastTransferDay = 0;//初始还未开始发放，最后的发放日设为0\r\n            detail.isFinish = false;\r\n            detail.isCancelDist = false;\r\n            //将赋好的中间信息压入全局信息列表_details\r\n            _details.push(detail);\r\n        }\r\n        require(totalAmount <= _lockAllAmount, \"distributed total amount should be equal lock amount\");// 发行总量应该等于锁仓总量\r\n        require(totalAmount <= _erc20token.totalSupply(),\"distributed total amount should be less than token totalSupply\");//发放的代币总量必须小于总代币量\r\n\t\t_detailsLength = _details.length;\r\n        _fConfig = true;//配置完毕，将配置完成标识符设为真\r\n        _fFinish = false;// 默认没发放完成\r\n        _fCancelDist = false;// 撤销发行清空\r\n    }\r\n\r\n    //开始发放函数，将未锁仓头款发放给个创始人，如果有锁仓天数为0的，将锁款的解锁后的头天代币也一同发放。auth认证，必须是合约持有人才能进行该操作\r\n    function startDistribute() public {\r\n        require (msg.sender == _ownerDist, \"you must _ownerDist\");\r\n        require(_fDist == false,\"you have distributed erc20token already\");//必须还未初始发放过\r\n        require(_details.length != 0,\"you have not configured\");//必须还未配置过\r\n        _distDay = today();//将当前区块链系统时间记录为发放时间\r\n        uint256 initDistAmount=0;//以下循环中使用的当前创始人“初始发放代币量”临时变量\r\n\r\n        for(uint256 i=0;i<_details.length;i++){\r\n            initDistAmount = _details[i].initAmount;//首发量\r\n\r\n            if(_details[i].lockDay==0){//如果当前创始人锁仓天数为0\r\n                initDistAmount = add(initDistAmount, _details[i].oneDayTransferAmount);//初始发放代币量为首发量+一天的发放量\r\n            }\r\n            _erc20token.transfer(\r\n                _details[i].founder,\r\n               initDistAmount\r\n            );\r\n            _details[i].transferedAmount = initDistAmount;//已发放数量在全局细节中进行登记\r\n            _details[i].lastTransferDay =_distDay;//最新一次发放日期在全局细节中进行登记\r\n        }\r\n\r\n        _fDist = true;//已初始发放标识符设为真\r\n        updateFinishFlag();// 更新下完成标志\r\n    }\r\n\r\n    // 更新是否发行完成标志\r\n    function updateFinishFlag() private {\r\n        //\r\n        bool allFinish = true;\r\n        for(uint256 i=0; i<_details.length; i++){\r\n            // 不需要锁仓的，直接设置完成\r\n            if (_details[i].lockPercent == 0) {\r\n                _details[i].isFinish = true;\r\n                continue;\r\n            }\r\n            // 有锁仓的，发行数量等于解锁数量，也设置完成\r\n            if (_details[i].distAmount == _details[i].transferedAmount) {\r\n                _details[i].isFinish = true;\r\n                continue;\r\n            }\r\n            allFinish = false;\r\n        }\r\n        // 更新合约完成标志\r\n        _fFinish = allFinish;\r\n    }\r\n\r\n    //模式1：任意人可调用该函数申领当天应发放额\r\n    function applyForTokenOneDay() public{\r\n        require(_mode == 1,\"this function can be called only when _mode==1\");//模式1下可调用\r\n        require(_distDay != 0,\"you haven't distributed\");//必须已经发布初始款了\r\n        require(_fFinish == false, \"not finish\");//必须合约还没执行完\r\n        require(_fCancelDist == false, \"must not cancel dist\");\r\n        uint256 daysAfterDist;//距离初始金发放时间\r\n        uint256 tday = today();//调用该函数时系统当前时间\r\n      \r\n        for(uint256 i=0;i<_details.length;i++){\r\n            // 对于已经完成的可以pass\r\n            if (_details[i].isFinish == true) {\r\n                continue;\r\n            }\r\n\r\n            require(tday!=_details[i].lastTransferDay,\"you have applied for todays token\");//必须今天还未申领\r\n            daysAfterDist = sub(tday,_distDay);//计算距离初始金发放时间天数\r\n            if(daysAfterDist >= _details[i].lockDay){//距离发放日天数要大于等于锁仓天数\r\n                if(add(_details[i].transferedAmount, _details[i].oneDayTransferAmount) <= _details[i].distAmount){\r\n                //如果当前创始人剩余的发放数量大于等于每天应发放数量，则将当天应发放数量发给他\r\n                    _erc20token.transfer(\r\n                        _details[i].founder,\r\n                        _details[i].oneDayTransferAmount\r\n                    );\r\n                    //已发放数量在全局细节中进行登记更新\r\n                    _details[i].transferedAmount = add(_details[i].transferedAmount, _details[i].oneDayTransferAmount);\r\n                }\r\n                else if(_details[i].transferedAmount < _details[i].distAmount){\r\n                //否则，如果已发放数量未达到锁仓应发总量，则将当前创始人剩余的应发放代币都发放给他\r\n                    _erc20token.transfer(\r\n                        _details[i].founder,\r\n                        sub( _details[i].distAmount, _details[i].transferedAmount)\r\n                    );\r\n                    //已发放数量在全局细节中进行登记更新\r\n                    _details[i].transferedAmount = _details[i].distAmount;\r\n                }\r\n                //最新一次发放日期在全局细节中进行登记更新\r\n                _details[i].lastTransferDay = tday;\r\n            }\r\n        }   \r\n        // 更新下完成标志\r\n        updateFinishFlag();\r\n    }\r\n\r\n    ///模式2：任意人可调用该函数补领到当前时间应该拥有但未发的代币\r\n    function applyForToken() public {\r\n        require(_mode == 2,\"this function can be called only when _mode==2\");//模式2下可调用\r\n        require(_distDay != 0,\"you haven't distributed\");//必须已经发布初始款了\r\n        require(_fFinish == false, \"not finish\");//必须合约还没执行完\r\n        require(_fCancelDist == false, \"must not cancel dist\");\r\n        uint256 daysAfterDist;//距离初始金发放时间\r\n        uint256 expectAmount;//下面循环中当前创始人到今天为止应该被发放的数量\r\n        uint256 tday = today();//调用该函数时系统当前时间\r\n        uint256 expectReleaseTimesNoLimit = 0;//解锁后到今天为止应该放的尾款次数(不考虑已放完款的情况)\r\n\r\n        for(uint256 i=0;i<_details.length;i++){\r\n            // 对于已经完成的可以pass\r\n            if (_details[i].isFinish == true) {\r\n                continue;\r\n            }\r\n            //必须今天还未申领\r\n            require(tday!=_details[i].lastTransferDay,\"you have applied for todays token\");\r\n            daysAfterDist = sub(tday,_distDay);//计算距离初始金发放时间天数\r\n            if(daysAfterDist >= _details[i].lockDay){//距离发放日天数要大于等于锁仓天数\r\n                expectReleaseTimesNoLimit = add(sub(daysAfterDist,_details[i].lockDay),1);//解锁后到今天为止应该放的尾款次数\r\n                //到目前为止应该发放的总数=（（应该释放款的次数x每次应该释放的币数）+初始款数量）与 当前创始人应得总发放数量 中的较小值\r\n                //因为释放款次数可能很大了，超过领完时间了\r\n                expectAmount = min(add(mul(expectReleaseTimesNoLimit,_details[i].oneDayTransferAmount),_details[i].initAmount),_details[i].distAmount);\r\n\r\n                //将欠下的代币统统发放给当前创始人\r\n                _erc20token.transfer(\r\n                    _details[i].founder,\r\n                    sub(expectAmount, _details[i].transferedAmount)\r\n                );\r\n                //已发放数量在全局细节中进行登记更新\r\n                _details[i].transferedAmount = expectAmount;\r\n                //最新一次发放日期在全局细节中进行登记更新\r\n                _details[i].lastTransferDay = tday;\r\n            }\r\n        }\r\n        // 更新下完成标志\r\n        updateFinishFlag();\r\n    }\r\n\r\n    //一天进行计算\r\n    function today() public constant returns (uint256) {\r\n        return div(time(), 24 hours);//24 hours \r\n    }\r\n    \r\n    //获取当前系统时间\r\n    function time() public constant returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mode\",\"type\":\"uint256\"},{\"name\":\"founders\",\"type\":\"address[]\"},{\"name\":\"distWad18Amounts\",\"type\":\"uint256[]\"},{\"name\":\"lockPercents\",\"type\":\"uint256[]\"},{\"name\":\"lockDays\",\"type\":\"uint256[]\"},{\"name\":\"distRates\",\"type\":\"uint256[]\"}],\"name\":\"configContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_ownerDist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_fFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_detailsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_distDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_erc20token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_details\",\"outputs\":[{\"name\":\"founder\",\"type\":\"address\"},{\"name\":\"lockDay\",\"type\":\"uint256\"},{\"name\":\"lockPercent\",\"type\":\"uint256\"},{\"name\":\"distAmount\",\"type\":\"uint256\"},{\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"name\":\"initAmount\",\"type\":\"uint256\"},{\"name\":\"distRate\",\"type\":\"uint256\"},{\"name\":\"oneDayTransferAmount\",\"type\":\"uint256\"},{\"name\":\"transferedAmount\",\"type\":\"uint256\"},{\"name\":\"lastTransferDay\",\"type\":\"uint256\"},{\"name\":\"isFinish\",\"type\":\"bool\"},{\"name\":\"isCancelDist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_lockAllAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startDistribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"applyForTokenOneDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelDist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_fDist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_fConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20Token\",\"type\":\"address\"}],\"name\":\"setErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"applyForToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_fCancelDist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"Erc20Dist","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://45cbab0415c412f282eb1be1599309554cfa7039605a46915b914b15f477481a"}]}