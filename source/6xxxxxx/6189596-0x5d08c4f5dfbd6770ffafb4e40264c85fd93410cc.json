{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/// @title DNNToken contract - Main DNN contract\r\n/// @author Dondrey Taylor - <dondrey@dnn.media>\r\ncontract DNNToken {\r\n    enum DNNSupplyAllocations {\r\n        EarlyBackerSupplyAllocation,\r\n        PRETDESupplyAllocation,\r\n        TDESupplyAllocation,\r\n        BountySupplyAllocation,\r\n        WriterAccountSupplyAllocation,\r\n        AdvisorySupplyAllocation,\r\n        PlatformSupplyAllocation\r\n    }\r\n    function issueTokens(address, uint256, DNNSupplyAllocations) public returns (bool) {}\r\n}\r\n\r\n/// @title DNNRedemption contract - Issues DNN tokens\r\n/// @author Dondrey Taylor - <dondrey@dnn.media>\r\ncontract DNNRedemption {\r\n\r\n    /////////////////////////\r\n    // DNN Token Contract  //\r\n    /////////////////////////\r\n    DNNToken public dnnToken;\r\n\r\n    //////////////////////////////////////////\r\n    // Addresses of the co-founders of DNN. //\r\n    //////////////////////////////////////////\r\n    address public cofounderA;\r\n    address public cofounderB;\r\n\r\n    /////////////////////////////////////////////////\r\n    // Number of tokens distributed (in atto-DNN) //\r\n    /////////////////////////////////////////////////\r\n    uint256 public tokensDistributed = 0;\r\n\r\n    //////////////////////////////////////////////////////////////////\r\n    // Maximum number of tokens for this distribution (in atto-DNN) //\r\n    //////////////////////////////////////////////////////////////////\r\n    uint256 public maxTokensToDistribute = 30000000 * 1 ether;\r\n\r\n    ///////////////////////////////////////////////\r\n    // Used to generate number of tokens to send //\r\n    ///////////////////////////////////////////////\r\n    uint256 public seed = 8633926795440059073718754917553891166080514579013872221976080033791214;\r\n\r\n    /////////////////////////////////////////////////\r\n    // We'll keep track of who we have sent DNN to //\r\n    /////////////////////////////////////////////////\r\n    mapping(address => uint256) holders;\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Event triggered when tokens are transferred from one address to another //\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    event Redemption(address indexed to, uint256 value);\r\n\r\n\r\n    ////////////////////////////////////////////////////\r\n    // Checks if CoFounders are performing the action //\r\n    ////////////////////////////////////////////////////\r\n    modifier onlyCofounders() {\r\n        require (msg.sender == cofounderA || msg.sender == cofounderB);\r\n        _;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////\r\n    // @des DNN Holder Check                                     //\r\n    // @param Checks if we sent DNN to the benfeficiary before   //\r\n    ///////////////////////////////////////////////////////////////\r\n    function hasDNN(address beneficiary) public view returns (bool) {\r\n        return holders[beneficiary] > 0;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////\r\n    // Make sure that user did no redeeem DNN before //\r\n    ///////////////////////////////////////////////////\r\n    modifier doesNotHaveDNN(address beneficiary) {\r\n        require(hasDNN(beneficiary) == false);\r\n        _;\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////\r\n    //  @des Updates max token distribution amount          //\r\n    //  @param New amount of tokens that can be distributed //\r\n    //////////////////////////////////////////////////////////\r\n    function updateMaxTokensToDistribute(uint256 maxTokens)\r\n      public\r\n      onlyCofounders\r\n    {\r\n        maxTokensToDistribute = maxTokens;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////\r\n    // @des Issues bounty tokens                                 //\r\n    // @param beneficiary Address the tokens will be issued to.  //\r\n    ///////////////////////////////////////////////////////////////\r\n    function issueTokens(address beneficiary)\r\n        public\r\n        doesNotHaveDNN(beneficiary)\r\n        returns (uint256)\r\n    {\r\n        // Number of tokens that we'll send\r\n        uint256 tokenCount = (uint(keccak256(abi.encodePacked(blockhash(block.number-1), seed ))) % 1000);\r\n\r\n        // If the amount is over 200 then we'll cap the tokens we'll\r\n        // give to 200 to prevent giving too many. Since the highest amount\r\n        // of tokens earned in the bounty was 99 DNN, we'll be issuing a bonus to everyone\r\n        // for the long wait.\r\n        if (tokenCount > 200) {\r\n            tokenCount = 200;\r\n        }\r\n\r\n        // Change atto-DNN to DNN\r\n        tokenCount = tokenCount * 1 ether;\r\n\r\n        // If we have reached our max tokens then we'll bail out of the transaction\r\n        if (tokensDistributed+tokenCount > maxTokensToDistribute) {\r\n            revert();\r\n        }\r\n\r\n        // Update holder balance\r\n        holders[beneficiary] = tokenCount;\r\n\r\n        // Update total amount of tokens distributed (in atto-DNN)\r\n        tokensDistributed = tokensDistributed + tokenCount;\r\n\r\n        // Allocation type will be Platform\r\n        DNNToken.DNNSupplyAllocations allocationType = DNNToken.DNNSupplyAllocations.PlatformSupplyAllocation;\r\n\r\n        // Attempt to issue tokens\r\n        if (!dnnToken.issueTokens(beneficiary, tokenCount, allocationType)) {\r\n            revert();\r\n        }\r\n\r\n        // Emit redemption event\r\n        Redemption(beneficiary, tokenCount);\r\n\r\n        return tokenCount;\r\n    }\r\n\r\n    ///////////////////////////////\r\n    // @des Contract constructor //\r\n    ///////////////////////////////\r\n    constructor() public\r\n    {\r\n        // Set token address\r\n        dnnToken = DNNToken(0x9d9832d1beb29cc949d75d61415fd00279f84dc2);\r\n\r\n        // Set cofounder addresses\r\n        cofounderA = 0x3Cf26a9FE33C219dB87c2e50572e50803eFb2981;\r\n        cofounderB = 0x9FFE2aD5D76954C7C25be0cEE30795279c4Cab9f;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////\r\n    // @des ONLY SEND 0 ETH TRANSACTIONS TO THIS CONTRACT //\r\n    ////////////////////////////////////////////////////////\r\n    function () public payable {\r\n        if (!hasDNN(msg.sender)) issueTokens(msg.sender);\r\n        else revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"hasDNN\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"issueTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cofounderB\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokensToDistribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDistribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cofounderA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dnnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"}]","ContractName":"DNNRedemption","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c592fa300c7d55276867e0a649d24f9d17cf95d08c080034a7601021b09c3716"}]}