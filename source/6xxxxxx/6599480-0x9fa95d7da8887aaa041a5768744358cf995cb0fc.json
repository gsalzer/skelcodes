{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * \r\nOwnable contract  comes from\r\nhttps://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\r\nand is Licensed under MIT license \r\n\r\nAll other contracts are Created by \r\nŁukasz Grynasz https://www.linkedin.com/in/%C5%82ukasz-grynasz-aba24b55/\r\nAdam Skrodzki https://www.linkedin.com/in/adam-skrodzki-521051b/\r\n\r\nas a part of https://pway.io project\r\n\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts\\PwayContract.sol\r\n\r\ncontract PwayContract is Ownable {\r\n\r\n    modifier onlyHuman(address addr){\r\n        uint size;\r\n        assembly { size := extcodesize(addr) } // solium-disable-line\r\n        if(size == 0){\r\n            _;\r\n        }else{\r\n            revert(\"Provided address is a contract\");\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n// File: contracts\\NameRegistry.sol\r\n\r\ncontract NameRegistry is PwayContract {\r\n\r\n    event EntrySet(string entry,address adr);\r\n\r\n    mapping(string => address) names;\r\n  \r\n    function hasAddress(string name) public view returns(bool) {\r\n        return names[name] != address(0);\r\n    }\r\n    \r\n    function getAddress(string name) public view returns(address) {\r\n        require(names[name] != address(0), \"Address could not be 0x0\");\r\n        return names[name];\r\n    }\r\n    \r\n    function setAddress(string name, address _adr) public {\r\n        require(_adr != address(0), \"Address could not be 0x0\");\r\n\r\n        bytes memory nameBytes = bytes(name);\r\n        require(nameBytes.length > 0, \"Name could not be empty\");\r\n\r\n        bool isEmpty = names[name] == address(0);\r\n\r\n        //can be initialized by everyone , but only change by itself\r\n        require(isEmpty || names[name] == msg.sender);\r\n\r\n        names[name] = _adr;\r\n        emit EntrySet(name, names[name]);\r\n    } \r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"hasAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"entry\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"EntrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NameRegistry","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c1cddcbbc065859ea285fb8ba46899c82fbe273f6724e910ccca3ca7a9a6dbc8"}]}