{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract TecoIco {\r\n    function bonusOf(address _owner) public view returns (uint256);\r\n}\r\n\r\ncontract TecoToken {\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract TecoBuyBack is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    TecoIco public tecoIco;\r\n    TecoToken public tecoToken;\r\n\r\n    mapping(address => uint256) tokensBought;\r\n\r\n    uint256 public rate;\r\n    uint256 public numOrders;\r\n\r\n    enum OrderStatus {None, Pending, Payed, Deleted}\r\n\r\n    struct Order {\r\n        address investor;\r\n        uint amount;\r\n        OrderStatus status;\r\n    }\r\n\r\n    mapping(uint256 => Order) orders;\r\n\r\n    constructor(TecoIco _tecoIco, TecoToken _tecoToken) public{\r\n        require(_tecoIco != address(0));\r\n        require(_tecoToken != address(0));\r\n\r\n        tecoIco = _tecoIco;\r\n        tecoToken = _tecoToken;\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n    function withdrawAllFunds()\r\n    public\r\n    onlyOwner\r\n    {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawFunds(uint value)\r\n    public\r\n    onlyOwner\r\n    {\r\n        owner.transfer(value);\r\n    }\r\n\r\n    function availableBonuses(address investor) public view returns (uint256) {\r\n        if (tecoIco.bonusOf(investor) <= tokensBought[investor]) return 0;\r\n        return tecoIco.bonusOf(investor).sub(tokensBought[investor]);\r\n    }\r\n\r\n    function setRate(uint256 _rate)\r\n    public\r\n    onlyOwner\r\n    {\r\n        rate = _rate;\r\n    }\r\n\r\n    function createOrder(uint256 _amount)\r\n    public\r\n    returns (uint256)\r\n    {\r\n        require(availableBonuses(msg.sender) >= _amount);\r\n        require(tecoToken.allowance(msg.sender, address(this)) >= _amount);\r\n        orders[numOrders++] = Order(msg.sender, _amount, OrderStatus.Pending);\r\n        return numOrders - 1;\r\n    }\r\n\r\n    function calculateSum(uint256 amount)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return amount.div(rate);\r\n    }\r\n\r\n    function orderSum(uint256 orderId)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return calculateSum(orders[orderId].amount);\r\n    }\r\n\r\n    function payOrders(uint256 orderId_1, uint256 orderId_2, uint256 orderId_3, uint256 orderId_4, uint256 orderId_5)\r\n    public\r\n    onlyOwner\r\n    {\r\n        if (orderId_1 >= 0) payOrder(orderId_1);\r\n        if (orderId_2 >= 0) payOrder(orderId_2);\r\n        if (orderId_3 >= 0) payOrder(orderId_3);\r\n        if (orderId_4 >= 0) payOrder(orderId_4);\r\n        if (orderId_5 >= 0) payOrder(orderId_5);\r\n    }\r\n\r\n    function payOrder(uint256 orderId)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(address(this).balance >= orderSum(orderId));\r\n        require(orders[orderId].status == OrderStatus.Pending);\r\n\r\n        orders[orderId].status = OrderStatus.Payed;\r\n        orders[orderId].investor.transfer(orderSum(orderId));\r\n        tecoToken.transferFrom(orders[orderId].investor, owner, orders[orderId].amount);\r\n        tokensBought[orders[orderId].investor] += orders[orderId].amount;\r\n    }\r\n\r\n    function deleteOrder(uint256 orderId)\r\n    public\r\n    {\r\n        require(orders[orderId].investor == msg.sender || owner == msg.sender);\r\n        require(orders[orderId].status == OrderStatus.Pending);\r\n        orders[orderId].status = OrderStatus.Deleted;\r\n    }\r\n\r\n    function getOrderInvestor(uint256 orderId)\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        return orders[orderId].investor;\r\n    }\r\n\r\n    function getOrderAmount(uint256 orderId)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return orders[orderId].amount;\r\n    }\r\n\r\n    function getOrderStatus(uint256 orderId)\r\n    public\r\n    view\r\n    returns (OrderStatus)\r\n    {\r\n        return orders[orderId].status;\r\n    }\r\n\r\n    function getTokensBought(address investor)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return tokensBought[investor];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"availableBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"orderSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"deleteOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"payOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tecoIco\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tecoToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getTokensBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderId_1\",\"type\":\"uint256\"},{\"name\":\"orderId_2\",\"type\":\"uint256\"},{\"name\":\"orderId_3\",\"type\":\"uint256\"},{\"name\":\"orderId_4\",\"type\":\"uint256\"},{\"name\":\"orderId_5\",\"type\":\"uint256\"}],\"name\":\"payOrders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tecoIco\",\"type\":\"address\"},{\"name\":\"_tecoToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TecoBuyBack","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001bb4df717e18a048d391d24e6dfbd67bb62a83ba000000000000000000000000870ad90317c09c0aa03d3bbd76a7a6eefda6f6ac","Library":"","SwarmSource":"bzzr://cf930e592c16bf940944f7df43428f8d2fa3f8a557b69b9db6c58f1ea390ffd0"}]}