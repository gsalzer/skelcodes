{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public view returns (uint);\r\n    function transfer(address to, uint value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint);\r\n\r\n    function transferFrom(address from, address to, uint value) public returns (bool);\r\n\r\n    function approve(address spender, uint value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amount of tokens to be transferred\r\n   */\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        uint _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        require (_value <= _allowance);\r\n        require(_value > 0);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ACToken\r\n */\r\ncontract GOENTEST is StandardToken {\r\n\r\n    string public constant name = \"goentesttoken\";\r\n    string public constant symbol = \"GOENTEST\";\r\n    // string public constant name = \"gttoken\";\r\n    // string public constant symbol = \"GTT\";\r\n    uint public constant decimals = 18; // 18位小数\r\n\r\n    uint public constant INITIAL_SUPPLY =  10000000000 * (10 ** decimals); // 100000000000000000000000000（100亿）\r\n\r\n    /**\r\n    * @dev Contructor that gives msg.sender all of existing tokens.\r\n    */\r\n    constructor() public { \r\n        totalSupply = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n    }\r\n}\r\n\r\n//big lock storehouse\r\ncontract lockStorehouseToken is ERC20 {\r\n    using SafeMath for uint;\r\n    \r\n    GOENTEST   tokenReward;\r\n    \r\n    address private beneficial;\r\n    uint    private lockMonth;\r\n    uint    private startTime;\r\n    uint    private releaseSupply;\r\n    bool    private released = false;\r\n    uint    private per;\r\n    uint    private releasedCount = 0;\r\n    uint    public  limitMaxSupply; //限制从合约转出代币的最大金额\r\n    uint    public  oldBalance;\r\n    uint    private constant decimals = 18;\r\n    \r\n    constructor(\r\n        address _tokenReward,\r\n        address _beneficial,\r\n        uint    _per,\r\n        uint    _startTime,\r\n        uint    _lockMonth,\r\n        uint    _limitMaxSupply\r\n    ) public {\r\n        tokenReward     = GOENTEST(_tokenReward);\r\n        beneficial      = _beneficial;\r\n        per             = _per;\r\n        startTime       = _startTime;\r\n        lockMonth       = _lockMonth;\r\n        limitMaxSupply  = _limitMaxSupply * (10 ** decimals);\r\n        \r\n        // 测试代码\r\n        // tokenReward = GOENT(0xEfe106c517F3d23Ab126a0EBD77f6Ec0f9efc7c7);\r\n        // beneficial = 0x1cDAf48c23F30F1e5bC7F4194E4a9CD8145aB651;\r\n        // per = 125;\r\n        // startTime = now;\r\n        // lockMonth = 1;\r\n        // limitMaxSupply = 3000000000 * (10 ** decimals);\r\n    }\r\n    \r\n    mapping(address => uint) balances;\r\n    \r\n    function approve(address _spender, uint _value) public returns (bool){}\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint){}\r\n    \r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require (_value > 0);\r\n        require(_value <= balances[_from]);\r\n        \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function getBeneficialAddress() public constant returns (address){\r\n        return beneficial;\r\n    }\r\n    \r\n    function getBalance() public constant returns(uint){\r\n        return tokenReward.balanceOf(this);\r\n    }\r\n    \r\n    modifier checkBalance {\r\n        if(!released){\r\n            oldBalance = getBalance();\r\n            if(oldBalance > limitMaxSupply){\r\n                oldBalance = limitMaxSupply;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function release() checkBalance public returns(bool) {\r\n        // uint _lockMonth;\r\n        // uint _baseDate;\r\n        uint cliffTime;\r\n        uint monthUnit;\r\n        \r\n        released = true;\r\n        // 释放金额\r\n        releaseSupply = SafeMath.mul(SafeMath.div(oldBalance, 1000), per);\r\n        \r\n        // 释放金额必须小于等于当前合同余额\r\n        if(SafeMath.mul(releasedCount, releaseSupply) <= oldBalance){\r\n            // if(per == 1000){\r\n            //     _lockMonth = SafeMath.div(lockMonth, 12);\r\n            //     _baseDate = 1 years;\r\n                \r\n            // }\r\n            \r\n            // if(per < 1000){\r\n            //     _lockMonth = lockMonth;\r\n            //     _baseDate = 30 days;\r\n            //     // _baseDate = 1 minutes;\r\n            // }\r\n\r\n            // _lockMonth = lockMonth;\r\n            // _baseDate = 30 days;\r\n            // monthUnit = SafeMath.mul(5, 1 minutes);\r\n            monthUnit = SafeMath.mul(lockMonth, 30 days);\r\n            cliffTime = SafeMath.add(startTime, monthUnit);\r\n        \r\n            if(now > cliffTime){\r\n                \r\n                tokenReward.transfer(beneficial, releaseSupply);\r\n                \r\n                releasedCount++;\r\n\r\n                startTime = now;\r\n                \r\n                return true;\r\n            \r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n        \r\n    }\r\n    \r\n    function () private payable {\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBeneficialAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitMaxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenReward\",\"type\":\"address\"},{\"name\":\"_beneficial\",\"type\":\"address\"},{\"name\":\"_per\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_lockMonth\",\"type\":\"uint256\"},{\"name\":\"_limitMaxSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"lockStorehouseToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000051390c2435e4c1adbf01e5dfc59adc95ddceeecf000000000000000000000000db19b4fb11dc091c89254c8bcf6fd631d3c3e47300000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000005f1c570000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000077359400","Library":"","SwarmSource":"bzzr://03706d64b2a7a4629305b5669e256e498d7b35e8fea146cbd7527af3cc952aaf"}]}