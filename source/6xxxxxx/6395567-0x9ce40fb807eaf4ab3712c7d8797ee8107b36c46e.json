{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC827 interface, an extension of ERC20 token standard\r\n *\r\n * @dev Interface of a ERC827 token, following the ERC20 standard with extra\r\n * @dev methods to transfer value and data and execute calls in transfers and\r\n * @dev approvals.\r\n */\r\ncontract ERC827 is ERC20 {\r\n    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool);\r\n\r\n    function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool);\r\n\r\n    function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public payable returns (bool);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n */\r\ncontract ERC20Token is ERC20 {\r\n    using SafeMath for uint256;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n    mapping(address => uint256) balances;\r\n    uint256 totalSupply_;\r\n    /**\r\n     * @dev total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC827, an extension of ERC20 token standard\r\n *\r\n * @dev Implementation the ERC827, following the ERC20 standard with extra\r\n * @dev methods to transfer value and data and execute calls in transfers and\r\n * @dev approvals.\r\n *\r\n * @dev Uses OpenZeppelin StandardToken.\r\n */\r\ncontract ERC827Token is ERC827, ERC20Token {\r\n    /**\r\n     * @dev Addition to ERC20 token methods. It allows to\r\n     * @dev approve the transfer of value and execute a call with the sent data.\r\n     *\r\n     * @dev Beware that changing an allowance with this method brings the risk that\r\n     * @dev someone may use both the old and the new allowance by unfortunate\r\n     * @dev transaction ordering. One possible solution to mitigate this race condition\r\n     * @dev is to first reduce the spender's allowance to 0 and set the desired value\r\n     * @dev afterwards:\r\n     * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * @param _spender The address that will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     * @param _data ABI-encoded contract call to call `_to` address.\r\n     *\r\n     * @return true if the call function was executed successfully\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool) {\r\n        require(_spender != address(this));\r\n        super.approve(_spender, _value);\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_spender.call.value(msg.value)(_data));\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Addition to ERC20 token methods. Transfer tokens to a specified\r\n     * @dev address and execute a call with the sent data on the same transaction\r\n     *\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amout of tokens to be transfered\r\n     * @param _data ABI-encoded contract call to call `_to` address.\r\n     *\r\n     * @return true if the call function was executed successfully\r\n     */\r\n    function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\r\n        require(_to != address(this));\r\n        super.transfer(_to, _value);\r\n        require(_to.call.value(msg.value)(_data));\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Addition to ERC20 token methods. Transfer tokens from one address to\r\n     * @dev another and make a contract call on the same transaction\r\n     *\r\n     * @param _from The address which you want to send tokens from\r\n     * @param _to The address which you want to transfer to\r\n     * @param _value The amout of tokens to be transferred\r\n     * @param _data ABI-encoded contract call to call `_to` address.\r\n     *\r\n     * @return true if the call function was executed successfully\r\n     */\r\n    function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public payable returns (bool) {\r\n        require(_to != address(this));\r\n        super.transferFrom(_from, _to, _value);\r\n        require(_to.call.value(msg.value)(_data));\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Addition to StandardToken methods. Increase the amount of tokens that\r\n     * @dev an owner allowed to a spender and execute a call with the sent data.\r\n     *\r\n     * @dev approve should be called when allowed[_spender] == 0. To increment\r\n     * @dev allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * @dev the first transaction is mined)\r\n     * @dev From MonolithDAO Token.sol\r\n     *\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     * @param _data ABI-encoded contract call to call `_spender` address.\r\n     */\r\n    function increaseApprovalAndCall(address _spender, uint _addedValue, bytes _data) public payable returns (bool) {\r\n        require(_spender != address(this));\r\n        super.increaseApproval(_spender, _addedValue);\r\n        require(_spender.call.value(msg.value)(_data));\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Addition to StandardToken methods. Decrease the amount of tokens that\r\n     * @dev an owner allowed to a spender and execute a call with the sent data.\r\n     *\r\n     * @dev approve should be called when allowed[_spender] == 0. To decrement\r\n     * @dev allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * @dev the first transaction is mined)\r\n     * @dev From MonolithDAO Token.sol\r\n     *\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     * @param _data ABI-encoded contract call to call `_spender` address.\r\n     */\r\n    function decreaseApprovalAndCall(address _spender, uint _subtractedValue, bytes _data) public payable returns (bool) {\r\n        require(_spender != address(this));\r\n        super.decreaseApproval(_spender, _subtractedValue);\r\n        require(_spender.call.value(msg.value)(_data));\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title  Burnable and Pause Token\r\n * @dev    StandardToken modified with pausable transfers.\r\n */\r\ncontract PauseBurnableERC827Token is ERC827Token, Ownable {\r\n    using SafeMath for uint256;\r\n    event Pause();\r\n    event Unpause();\r\n    event PauseOperatorTransferred(address indexed previousOperator, address indexed newOperator);\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    bool public paused = false;\r\n    address public pauseOperator;\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyPauseOperator() {\r\n        require(msg.sender == pauseOperator || msg.sender == owner);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev The constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        pauseOperator = msg.sender;\r\n    }\r\n    /**\r\n     * @dev called by the operator to set the new operator to pause the token\r\n     */\r\n    function transferPauseOperator(address newPauseOperator) onlyPauseOperator public {\r\n        require(newPauseOperator != address(0));\r\n        emit PauseOperatorTransferred(pauseOperator, newPauseOperator);\r\n        pauseOperator = newPauseOperator;\r\n    }\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyPauseOperator whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyPauseOperator whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public whenNotPaused {\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n        balances[_who] = balances[_who].sub(_value);\r\n        // Subtract from the sender\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _value uint256 The amount of token to be burned\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public whenNotPaused {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _burn(_from, _value);\r\n    }\r\n}\r\n\r\ncontract FckAirdrop is PauseBurnableERC827Token {\r\n    string  public constant name = \"fck.com FCK\";\r\n    string  public constant symbol = \"fck.com FCK\";\r\n    uint8   public constant decimals = 18;\r\n    uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    }\r\n    function batchTransfer(address[] _tos, uint256 _value) public whenNotPaused returns (bool) {\r\n        uint256 all = _value.mul(_tos.length);\r\n        require(balances[msg.sender] >= all);\r\n        for (uint i = 0; i < _tos.length; i++) {\r\n            require(_tos[i] != address(0));\r\n            require(_tos[i] != msg.sender);\r\n            balances[_tos[i]] = balances[_tos[i]].add(_value);\r\n            emit Transfer(msg.sender, _tos[i], _value);\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(all);\r\n        return true;\r\n    }\r\n\r\n    function multiTransfer(address[] _tos, uint256[] _values) public whenNotPaused returns (bool) {\r\n        require(_tos.length == _values.length);\r\n        uint256 all = 0;\r\n        for (uint i = 0; i < _tos.length; i++) {\r\n            require(_tos[i] != address(0));\r\n            require(_tos[i] != msg.sender);\r\n            all = all.add(_values[i]);\r\n            balances[_tos[i]] = balances[_tos[i]].add(_values[i]);\r\n            emit Transfer(msg.sender, _tos[i], _values[i]);\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(all);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"increaseApprovalAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"decreaseApprovalAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPauseOperator\",\"type\":\"address\"}],\"name\":\"transferPauseOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"PauseOperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"FckAirdrop","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9c36205a1cc826cefe4d30c7f09cabf95fdc20be040dad3fcdbf7a6058e6aa71"}]}