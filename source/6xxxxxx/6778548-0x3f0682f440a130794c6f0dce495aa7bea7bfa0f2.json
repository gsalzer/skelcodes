{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Assertion Failed\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"Assertion Failed\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface AddressRegistry {\r\n    function getAddr(string name) external view returns(address);\r\n}\r\n\r\ninterface Kyber {\r\n    function trade(\r\n        address src,\r\n        uint srcAmount,\r\n        address dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId\r\n    ) external payable returns (uint);\r\n\r\n    function getExpectedRate(\r\n        address src,\r\n        address dest,\r\n        uint srcQty\r\n    ) external view returns (uint, uint);\r\n}\r\n\r\n\r\ncontract Registry {\r\n    address public addressRegistry;\r\n    modifier onlyAdmin() {\r\n        require(\r\n            msg.sender == getAddress(\"admin\"),\r\n            \"Permission Denied\"\r\n        );\r\n        _;\r\n    }\r\n    function getAddress(string name) internal view returns(address) {\r\n        AddressRegistry addrReg = AddressRegistry(addressRegistry);\r\n        return addrReg.getAddr(name);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Trade is Registry {\r\n\r\n    using SafeMath for uint;\r\n    using SafeMath for uint256;\r\n\r\n    event KyberTrade(\r\n        address src,\r\n        uint srcAmt,\r\n        address dest,\r\n        uint destAmt,\r\n        address beneficiary,\r\n        uint minConversionRate,\r\n        address affiliate\r\n    );\r\n\r\n    function getExpectedPrice(\r\n        address src,\r\n        address dest,\r\n        uint srcAmt\r\n    ) public view returns (uint, uint) \r\n    {\r\n        Kyber kyberFunctions = Kyber(getAddress(\"kyber\"));\r\n        return kyberFunctions.getExpectedRate(\r\n            src,\r\n            dest,\r\n            srcAmt\r\n        );\r\n    }\r\n\r\n    function approveKyber(address[] tokenArr) public {\r\n        address kyberProxy = getAddress(\"kyber\");\r\n        for (uint i = 0; i < tokenArr.length; i++) {\r\n            IERC20 tokenFunctions = IERC20(tokenArr[i]);\r\n            tokenFunctions.approve(kyberProxy, 2**256 - 1);\r\n        }\r\n    }\r\n\r\n    function executeTrade(\r\n        address src, // token to sell\r\n        address dest, // token to buy\r\n        uint srcAmt, // amount of token for sell\r\n        uint minConversionRate, // minimum slippage rate\r\n        uint maxDestAmt // max amount of dest token\r\n    ) public payable returns (uint destAmt)\r\n    {\r\n\r\n        address eth = getAddress(\"eth\");\r\n        uint ethQty = getToken(\r\n            msg.sender,\r\n            src,\r\n            srcAmt,\r\n            eth\r\n        );\r\n        \r\n        // Interacting with Kyber Proxy Contract\r\n        Kyber kyberFunctions = Kyber(getAddress(\"kyber\"));\r\n        destAmt = kyberFunctions.trade.value(ethQty)(\r\n            src,\r\n            srcAmt,\r\n            dest,\r\n            msg.sender,\r\n            maxDestAmt,\r\n            minConversionRate,\r\n            getAddress(\"admin\")\r\n        );\r\n\r\n        // maxDestAmt usecase implementated\r\n        if (src == eth && address(this).balance > 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        } else if (src != eth) { // as there is no balanceOf of eth\r\n            IERC20 srcTkn = IERC20(src);\r\n            uint srcBal = srcTkn.balanceOf(address(this));\r\n            if (srcBal > 0) {\r\n                srcTkn.transfer(msg.sender, srcBal);\r\n            }\r\n        }\r\n\r\n        emit KyberTrade(\r\n            src,\r\n            srcAmt,\r\n            dest,\r\n            destAmt,\r\n            msg.sender,\r\n            minConversionRate,\r\n            getAddress(\"admin\")\r\n        );\r\n\r\n    }\r\n\r\n    function getToken(\r\n        address trader,\r\n        address src,\r\n        uint srcAmt,\r\n        address eth\r\n    ) internal returns (uint ethQty)\r\n    {\r\n        if (src == eth) {\r\n            require(msg.value == srcAmt, \"Invalid Operation\");\r\n            ethQty = srcAmt;\r\n        } else {\r\n            IERC20 tokenFunctions = IERC20(src);\r\n            tokenFunctions.transferFrom(trader, address(this), srcAmt);\r\n            ethQty = 0;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaKyber is Trade {\r\n\r\n    constructor(address rAddr) public {\r\n        addressRegistry = rAddr;\r\n    }\r\n\r\n    function () public payable {}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"name\":\"getExpectedPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmt\",\"type\":\"uint256\"},{\"name\":\"minConversionRate\",\"type\":\"uint256\"},{\"name\":\"maxDestAmt\",\"type\":\"uint256\"}],\"name\":\"executeTrade\",\"outputs\":[{\"name\":\"destAmt\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenArr\",\"type\":\"address[]\"}],\"name\":\"approveKyber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"srcAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minConversionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"KyberTrade\",\"type\":\"event\"}]","ContractName":"InstaKyber","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e16d035b8e76303237b9660b3c9c94c1a86aab47","Library":"","SwarmSource":"bzzr://821b95f50433164a0c1d43983567705271b3b7d61a59250b6856bccc154ac7a0"}]}