{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract DeconetToken is StandardToken, Ownable, Pausable {\r\n    // token naming etc\r\n    string public constant symbol = \"DCO\";\r\n    string public constant name = \"Deconet Token\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    // contract version\r\n    uint public constant version = 4;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        // 1 billion tokens (1,000,000,000)\r\n        totalSupply_ = 1000000000 * 10**uint(decimals);\r\n\r\n        // transfer initial supply to msg.sender who is also contract owner\r\n        balances[msg.sender] = totalSupply_;\r\n        Transfer(address(0), msg.sender, totalSupply_);\r\n\r\n        // pause contract until we're ready to allow transfers\r\n        paused = true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Modifier to make a function callable only when called by the contract owner\r\n    // or if the contract is not paused.\r\n    // ------------------------------------------------------------------------\r\n    modifier whenOwnerOrNotPaused() {\r\n        require(msg.sender == owner || !paused);\r\n        _;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint256 _value) public whenOwnerOrNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenOwnerOrNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\r\n    // ------------------------------------------------------------------------\r\n    function approve(address _spender, uint256 _value) public whenOwnerOrNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\r\n    // ------------------------------------------------------------------------\r\n    function increaseApproval(address _spender, uint _addedValue) public whenOwnerOrNotPaused returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\r\n    // ------------------------------------------------------------------------\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenOwnerOrNotPaused returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\ncontract Relay is Ownable {\r\n    address public licenseSalesContractAddress;\r\n    address public registryContractAddress;\r\n    address public apiRegistryContractAddress;\r\n    address public apiCallsContractAddress;\r\n    uint public version;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor, establishes ownership because contract is owned\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        version = 4;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Sets the license sales contract address\r\n    // ------------------------------------------------------------------------\r\n    function setLicenseSalesContractAddress(address newAddress) public onlyOwner {\r\n        require(newAddress != address(0));\r\n        licenseSalesContractAddress = newAddress;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Sets the registry contract address\r\n    // ------------------------------------------------------------------------\r\n    function setRegistryContractAddress(address newAddress) public onlyOwner {\r\n        require(newAddress != address(0));\r\n        registryContractAddress = newAddress;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Sets the api registry contract address\r\n    // ------------------------------------------------------------------------\r\n    function setApiRegistryContractAddress(address newAddress) public onlyOwner {\r\n        require(newAddress != address(0));\r\n        apiRegistryContractAddress = newAddress;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Sets the api calls contract address\r\n    // ------------------------------------------------------------------------\r\n    function setApiCallsContractAddress(address newAddress) public onlyOwner {\r\n        require(newAddress != address(0));\r\n        apiCallsContractAddress = newAddress;\r\n    }\r\n}\r\ncontract Registry is Ownable {\r\n\r\n    struct ModuleForSale {\r\n        uint price;\r\n        bytes32 sellerUsername;\r\n        bytes32 moduleName;\r\n        address sellerAddress;\r\n        bytes4 licenseId;\r\n    }\r\n\r\n    mapping(string => uint) internal moduleIds;\r\n    mapping(uint => ModuleForSale) public modules;\r\n\r\n    uint public numModules;\r\n    uint public version;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor, establishes ownership because contract is owned\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        numModules = 0;\r\n        version = 1;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Lets a user list a software module for sale in this registry\r\n    // ------------------------------------------------------------------------\r\n    function listModule(uint price, bytes32 sellerUsername, bytes32 moduleName, string usernameAndProjectName, bytes4 licenseId) public {\r\n        // make sure input params are valid\r\n        require(price != 0 && sellerUsername != \"\" && moduleName != \"\" && bytes(usernameAndProjectName).length != 0 && licenseId != 0);\r\n\r\n        // make sure the name isn't already taken\r\n        require(moduleIds[usernameAndProjectName] == 0);\r\n\r\n        numModules += 1;\r\n        moduleIds[usernameAndProjectName] = numModules;\r\n\r\n        ModuleForSale storage module = modules[numModules];\r\n\r\n        module.price = price;\r\n        module.sellerUsername = sellerUsername;\r\n        module.moduleName = moduleName;\r\n        module.sellerAddress = msg.sender;\r\n        module.licenseId = licenseId;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the ID number of a module given the username and project name of that module\r\n    // ------------------------------------------------------------------------\r\n    function getModuleId(string usernameAndProjectName) public view returns (uint) {\r\n        return moduleIds[usernameAndProjectName];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get info stored for a module by id\r\n    // ------------------------------------------------------------------------\r\n    function getModuleById(\r\n        uint moduleId\r\n    ) \r\n        public \r\n        view \r\n        returns (\r\n            uint price, \r\n            bytes32 sellerUsername, \r\n            bytes32 moduleName, \r\n            address sellerAddress, \r\n            bytes4 licenseId\r\n        ) \r\n    {\r\n        ModuleForSale storage module = modules[moduleId];\r\n        \r\n\r\n        if (module.sellerAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        price = module.price;\r\n        sellerUsername = module.sellerUsername;\r\n        moduleName = module.moduleName;\r\n        sellerAddress = module.sellerAddress;\r\n        licenseId = module.licenseId;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // get info stored for a module by name\r\n    // ------------------------------------------------------------------------\r\n    function getModuleByName(\r\n        string usernameAndProjectName\r\n    ) \r\n        public \r\n        view\r\n        returns (\r\n            uint price, \r\n            bytes32 sellerUsername, \r\n            bytes32 moduleName, \r\n            address sellerAddress, \r\n            bytes4 licenseId\r\n        ) \r\n    {\r\n        uint moduleId = moduleIds[usernameAndProjectName];\r\n        if (moduleId == 0) {\r\n            return;\r\n        }\r\n        ModuleForSale storage module = modules[moduleId];\r\n\r\n        price = module.price;\r\n        sellerUsername = module.sellerUsername;\r\n        moduleName = module.moduleName;\r\n        sellerAddress = module.sellerAddress;\r\n        licenseId = module.licenseId;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Edit a module listing\r\n    // ------------------------------------------------------------------------\r\n    function editModule(uint moduleId, uint price, address sellerAddress, bytes4 licenseId) public {\r\n        // Make sure input params are valid\r\n        require(moduleId != 0 && price != 0 && sellerAddress != address(0) && licenseId != 0);\r\n\r\n        ModuleForSale storage module = modules[moduleId];\r\n\r\n        // prevent editing an empty module (effectively listing a module)\r\n        require(\r\n            module.price != 0 && module.sellerUsername != \"\" && module.moduleName != \"\" && module.licenseId != 0 && module.sellerAddress != address(0)\r\n        );\r\n\r\n        // require that sender is the original module lister, or the contract owner\r\n        // the contract owner clause lets us recover a module listing if a dev loses access to their privkey\r\n        require(msg.sender == module.sellerAddress || msg.sender == owner);\r\n\r\n        module.price = price;\r\n        module.sellerAddress = sellerAddress;\r\n        module.licenseId = licenseId;\r\n    }\r\n}\r\ncontract LicenseSales is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    // the amount rewarded to a seller for selling a license\r\n    uint public tokenReward;\r\n\r\n    // the fee this contract takes from every sale.  expressed as percent.  so a value of 3 indicates a 3% txn fee\r\n    uint public saleFee;\r\n\r\n    // address of the relay contract which holds the address of the registry contract.\r\n    address public relayContractAddress;\r\n\r\n    // the token address\r\n    address public tokenContractAddress;\r\n\r\n    // this contract version\r\n    uint public version;\r\n\r\n    // the address that is authorized to withdraw eth\r\n    address private withdrawAddress;\r\n\r\n    event LicenseSale(\r\n        bytes32 moduleName,\r\n        bytes32 sellerUsername,\r\n        address indexed sellerAddress,\r\n        address indexed buyerAddress,\r\n        uint price,\r\n        uint soldAt,\r\n        uint rewardedTokens,\r\n        uint networkFee,\r\n        bytes4 licenseId\r\n    );\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        version = 1;\r\n\r\n        // default token reward of 100 tokens.  \r\n        // token has 18 decimal places so that's why 100 * 10^18\r\n        tokenReward = 100 * 10**18;\r\n\r\n        // default saleFee of 10%\r\n        saleFee = 10;\r\n\r\n        // default withdrawAddress is owner\r\n        withdrawAddress = msg.sender;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any ETH\r\n    // ------------------------------------------------------------------------\r\n    function withdrawEther() public {\r\n        require(msg.sender == withdrawAddress);\r\n        withdrawAddress.transfer(this.balance);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can set address of who can withdraw\r\n    // ------------------------------------------------------------------------\r\n    function setWithdrawAddress(address _withdrawAddress) public onlyOwner {\r\n        require(_withdrawAddress != address(0));\r\n        withdrawAddress = _withdrawAddress;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can set address of relay contract\r\n    // ------------------------------------------------------------------------\r\n    function setRelayContractAddress(address _relayContractAddress) public onlyOwner {\r\n        require(_relayContractAddress != address(0));\r\n        relayContractAddress = _relayContractAddress;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can set address of token contract\r\n    // ------------------------------------------------------------------------\r\n    function setTokenContractAddress(address _tokenContractAddress) public onlyOwner {\r\n        require(_tokenContractAddress != address(0));\r\n        tokenContractAddress = _tokenContractAddress;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can set token reward\r\n    // ------------------------------------------------------------------------\r\n    function setTokenReward(uint _tokenReward) public onlyOwner {\r\n        tokenReward = _tokenReward;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can set the sale fee\r\n    // ------------------------------------------------------------------------\r\n    function setSaleFee(uint _saleFee) public onlyOwner {\r\n        saleFee = _saleFee;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Anyone can make a sale if they provide a moduleId\r\n    // ------------------------------------------------------------------------\r\n    function makeSale(uint moduleId) public payable {\r\n        require(moduleId != 0);\r\n\r\n        // look up the registry address from relay token\r\n        Relay relay = Relay(relayContractAddress);\r\n        address registryAddress = relay.registryContractAddress();\r\n\r\n        // get the module info from registry\r\n        Registry registry = Registry(registryAddress);\r\n\r\n        uint price;\r\n        bytes32 sellerUsername;\r\n        bytes32 moduleName;\r\n        address sellerAddress;\r\n        bytes4 licenseId;\r\n\r\n        (price, sellerUsername, moduleName, sellerAddress, licenseId) = registry.getModuleById(moduleId);\r\n\r\n        // make sure the customer has sent enough eth\r\n        require(msg.value >= price);\r\n\r\n        // make sure the module is actually valid\r\n        require(sellerUsername != \"\" && moduleName != \"\" && sellerAddress != address(0) && licenseId != \"\");\r\n\r\n        // calculate fee and payout\r\n        uint fee = msg.value.mul(saleFee).div(100); \r\n        uint payout = msg.value.sub(fee);\r\n\r\n        // log the sale\r\n        emit LicenseSale(\r\n            moduleName,\r\n            sellerUsername,\r\n            sellerAddress,\r\n            msg.sender,\r\n            price,\r\n            block.timestamp,\r\n            tokenReward,\r\n            fee,\r\n            licenseId\r\n        );\r\n\r\n        // give seller some tokens for the sale\r\n        rewardTokens(sellerAddress);\r\n        \r\n        // pay seller the ETH\r\n        sellerAddress.transfer(payout);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Reward user with tokens IF the contract has them in it's allowance\r\n    // ------------------------------------------------------------------------\r\n    function rewardTokens(address toReward) private {\r\n        DeconetToken token = DeconetToken(tokenContractAddress);\r\n        address tokenOwner = token.owner();\r\n\r\n        // check balance of tokenOwner\r\n        uint tokenOwnerBalance = token.balanceOf(tokenOwner);\r\n        uint tokenOwnerAllowance = token.allowance(tokenOwner, address(this));\r\n        if (tokenOwnerBalance >= tokenReward && tokenOwnerAllowance >= tokenReward) {\r\n            token.transferFrom(tokenOwner, toReward, tokenReward);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"saleFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_relayContractAddress\",\"type\":\"address\"}],\"name\":\"setRelayContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"moduleId\",\"type\":\"uint256\"}],\"name\":\"makeSale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawAddress\",\"type\":\"address\"}],\"name\":\"setWithdrawAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenReward\",\"type\":\"uint256\"}],\"name\":\"setTokenReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"name\":\"setTokenContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleFee\",\"type\":\"uint256\"}],\"name\":\"setSaleFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"relayContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"moduleName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"sellerUsername\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sellerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"soldAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"networkFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"licenseId\",\"type\":\"bytes4\"}],\"name\":\"LicenseSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LicenseSales","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8cee353d1d8ce447c7aab703252ad084cc45ebc8a9c1dea134f8af8284b7ea7a"}]}