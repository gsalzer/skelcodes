{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract CFunIPBase is Ownable{\r\n\r\n    struct Copyright \r\n    {\r\n        uint256 copyrightID;\r\n        string fingerprint; \r\n        string title;\r\n        uint256 recordDate;\r\n        address author;\r\n        address recorder;\r\n\r\n    }\r\n    event Pause();\r\n    event Unpause();\r\n    event SaveCopyright(string fingerprint,string title,string author);\r\n\r\n    Copyright[]  public copyrights;\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    function saveCopyright(string fingerprint,string title,address author) public whenNotPaused {\r\n        require(!isContract(author));\r\n        Copyright memory _c = Copyright(\r\n        {\r\n            copyrightID:copyrights.length,\r\n            fingerprint:fingerprint,\r\n            title:title,\r\n            recordDate:block.timestamp,\r\n            author:author,\r\n            recorder:msg.sender\r\n        }\r\n        );\r\n        copyrights.push(_c);\r\n        emit SaveCopyright(fingerprint,title,toString(author));\r\n\r\n    }\r\n    function copyrightCount() public  view  returns(uint256){\r\n        return copyrights.length;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    /**\r\n    * Returns whether the target address is a contract\r\n    * @dev This function will return false if invoked during the constructor of a contract,\r\n    * as the code is not actually created until after the constructor finishes.\r\n    * @param _account address of the account to check\r\n    * @return whether the target address is a contract\r\n    */\r\n  function isContract(address _account) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(_account) }\r\n    return size > 0;\r\n  }\r\n  \r\n   /**\r\n    * Returns address of string type\r\n    * @dev This function will return  address of string type\r\n    * @param _addr address \r\n    * @return address of string type\r\n    */\r\n  function toString(address _addr) private pure returns (string) {\r\n      bytes memory b = new bytes(20);\r\n      for (uint i = 0; i < 20; i++)\r\n          b[i] = byte(uint8(uint(_addr) / (2**(8*(19 - i)))));\r\n      return string(b);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"copyrights\",\"outputs\":[{\"name\":\"copyrightID\",\"type\":\"uint256\"},{\"name\":\"fingerprint\",\"type\":\"string\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"recordDate\",\"type\":\"uint256\"},{\"name\":\"author\",\"type\":\"address\"},{\"name\":\"recorder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"copyrightCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fingerprint\",\"type\":\"string\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"author\",\"type\":\"address\"}],\"name\":\"saveCopyright\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fingerprint\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"author\",\"type\":\"string\"}],\"name\":\"SaveCopyright\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CFunIPBase","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d844c9def4662813d411c80fa7301020ea85e2ba53b1ebe803c69070075020fd"}]}