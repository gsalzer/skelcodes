{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath256 {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint256 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not a contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _validateAddress(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Controllable is Ownable {\r\n    mapping(address => bool) controllers;\r\n\r\n    modifier onlyController {\r\n        require(_isController(msg.sender), \"no controller rights\");\r\n        _;\r\n    }\r\n\r\n    function _isController(address _controller) internal view returns (bool) {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    function _setControllers(address[] _controllers) internal {\r\n        for (uint256 i = 0; i < _controllers.length; i++) {\r\n            _validateAddress(_controllers[i]);\r\n            controllers[_controllers[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Upgradable is Controllable {\r\n    address[] internalDependencies;\r\n    address[] externalDependencies;\r\n\r\n    function getInternalDependencies() public view returns(address[]) {\r\n        return internalDependencies;\r\n    }\r\n\r\n    function getExternalDependencies() public view returns(address[]) {\r\n        return externalDependencies;\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\r\n            _validateAddress(_newDependencies[i]);\r\n        }\r\n        internalDependencies = _newDependencies;\r\n    }\r\n\r\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        externalDependencies = _newDependencies;\r\n        _setControllers(_newDependencies);\r\n    }\r\n}\r\n\r\ncontract Core {\r\n    function breed(address, uint256, uint256) external returns (uint256);\r\n    function isEggInNest(uint256) external view returns (bool);\r\n    function useDragonSpecialPeacefulSkill(address, uint256, uint256) external;\r\n}\r\n\r\ncontract Marketplace {\r\n    function sellToken(uint256, address, uint256, uint256, uint16, bool) external;\r\n    function removeFromAuction(uint256) external;\r\n    function buyToken(uint256, uint256, uint256, bool) external returns (uint256);\r\n    function sellerOf(uint256) external view returns (address);\r\n}\r\n\r\ncontract EggMarketplace is Marketplace {}\r\ncontract DragonMarketplace is Marketplace {}\r\ncontract BreedingMarketplace is Marketplace {}\r\n\r\ncontract GoldMarketplace {}\r\n\r\ncontract SkillMarketplace is Upgradable {\r\n    function sellToken(uint256, uint256) external;\r\n    function removeFromAuction(uint256) external;\r\n    function getAuction(uint256) external view returns (uint256);\r\n}\r\n\r\ncontract ERC721Token {\r\n    function ownerOf(uint256) public view returns (address);\r\n    function exists(uint256) public view returns (bool);\r\n    function remoteApprove(address, uint256) external;\r\n    function isApprovedOrOwner(address, uint256) public view returns (bool);\r\n    function transferFrom(address, address, uint256) public;\r\n}\r\n\r\ncontract DragonStorage is ERC721Token {}\r\ncontract EggStorage is ERC721Token {}\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address) public view returns (uint256);\r\n}\r\n\r\ncontract Gold is ERC20 {\r\n    function remoteTransfer(address, uint256) external;\r\n}\r\n\r\ncontract Getter {\r\n    function isDragonBreedingAllowed(uint256) external view returns (bool);\r\n    function getDragonSpecialPeacefulSkill(uint256) external view returns (uint8, uint32, uint32);\r\n    function isDragonInGladiatorBattle(uint256) public view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n//////////////CONTRACT//////////////\r\n\r\n\r\n\r\n\r\ncontract MarketplaceController is Upgradable {\r\n    using SafeMath256 for uint256;\r\n\r\n    Core core;\r\n    BreedingMarketplace breedingMarketplace;\r\n    EggMarketplace eggMarketplace;\r\n    DragonMarketplace dragonMarketplace;\r\n    GoldMarketplace goldMarketplace;\r\n    SkillMarketplace skillMarketplace;\r\n    DragonStorage dragonStorage;\r\n    EggStorage eggStorage;\r\n    Gold goldTokens;\r\n    Getter getter;\r\n\r\n    // ACTIONS WITH OWN TOKEN\r\n\r\n    function _isEggOwner(address _user, uint256 _tokenId) internal view returns (bool) {\r\n        return _user == eggStorage.ownerOf(_tokenId);\r\n    }\r\n\r\n    function _isDragonOwner(address _user, uint256 _tokenId) internal view returns (bool) {\r\n        return _user == dragonStorage.ownerOf(_tokenId);\r\n    }\r\n\r\n    function _checkOwner(bool _isOwner) internal pure {\r\n        require(_isOwner, \"not an owner\");\r\n    }\r\n\r\n    function _checkEggOwner(uint256 _tokenId, address _user) internal view {\r\n        _checkOwner(_isEggOwner(_user, _tokenId));\r\n    }\r\n\r\n    function _checkDragonOwner(uint256 _tokenId, address _user) internal view {\r\n        _checkOwner(_isDragonOwner(_user, _tokenId));\r\n    }\r\n\r\n    function _compareBuyerAndSeller(address _buyer, address _seller) internal pure {\r\n        require(_buyer != _seller, \"seller can't be buyer\");\r\n    }\r\n\r\n    function _checkTheDragonIsNotInGladiatorBattle(uint256 _id) internal view {\r\n        require(!getter.isDragonInGladiatorBattle(_id), \"dragon participates in gladiator battle\");\r\n    }\r\n\r\n    function _checkIfBreedingIsAllowed(uint256 _id) internal view {\r\n        require(getter.isDragonBreedingAllowed(_id), \"dragon has no enough DNA points for breeding\");\r\n    }\r\n\r\n    function _checkEnoughGold(uint256 _required, uint256 _available) internal pure {\r\n        require(_required <= _available, \"not enough gold\");\r\n    }\r\n\r\n    function _safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return b > a ? 0 : a.sub(b);\r\n    }\r\n\r\n    // MARKETPLACE\r\n\r\n    function _transferGold(address _to, uint256 _value) internal {\r\n        goldTokens.remoteTransfer(_to, _value);\r\n    }\r\n\r\n    // EGG\r\n\r\n    function buyEgg(\r\n        address _sender,\r\n        uint256 _value,\r\n        uint256 _id,\r\n        uint256 _expectedPrice,\r\n        bool _isGold\r\n    ) external onlyController returns (address seller, uint256 price, bool success) {\r\n        seller = eggMarketplace.sellerOf(_id);\r\n        _compareBuyerAndSeller(_sender, seller);\r\n\r\n        if (eggStorage.isApprovedOrOwner(this, _id) && _isEggOwner(seller, _id)) {\r\n            uint256 _balance = goldTokens.balanceOf(_sender);\r\n            price = eggMarketplace.buyToken(_id, _isGold ? _balance : _value, _expectedPrice, _isGold);\r\n            eggStorage.transferFrom(seller, _sender, _id);\r\n            if (_isGold) {\r\n                _transferGold(seller, price);\r\n            }\r\n            success = true;\r\n        } else {\r\n            eggMarketplace.removeFromAuction(_id);\r\n            success = false;\r\n        }\r\n    }\r\n\r\n    function sellEgg(\r\n        address _sender,\r\n        uint256 _id,\r\n        uint256 _maxPrice,\r\n        uint256 _minPrice,\r\n        uint16 _period,\r\n        bool _isGold\r\n    ) external onlyController {\r\n        _checkEggOwner(_id, _sender);\r\n        require(!core.isEggInNest(_id), \"egg is in nest\");\r\n        eggStorage.remoteApprove(this, _id);\r\n        eggMarketplace.sellToken(_id, _sender, _maxPrice, _minPrice, _period, _isGold);\r\n    }\r\n\r\n    function removeEggFromSale(\r\n        address _sender,\r\n        uint256 _id\r\n    ) external onlyController {\r\n        _checkEggOwner(_id, _sender);\r\n        eggMarketplace.removeFromAuction(_id);\r\n    }\r\n\r\n    // DRAGON\r\n\r\n    function buyDragon(\r\n        address _sender,\r\n        uint256 _value,\r\n        uint256 _id,\r\n        uint256 _expectedPrice,\r\n        bool _isGold\r\n    ) external onlyController returns (address seller, uint256 price, bool success) {\r\n        seller = dragonMarketplace.sellerOf(_id);\r\n        _compareBuyerAndSeller(_sender, seller);\r\n\r\n        if (dragonStorage.isApprovedOrOwner(this, _id) && _isDragonOwner(seller, _id)) {\r\n            uint256 _balance = goldTokens.balanceOf(_sender);\r\n            price = dragonMarketplace.buyToken(_id, _isGold ? _balance : _value, _expectedPrice, _isGold);\r\n            dragonStorage.transferFrom(seller, _sender, _id);\r\n            if (_isGold) {\r\n                _transferGold(seller, price);\r\n            }\r\n            success = true;\r\n        } else {\r\n            dragonMarketplace.removeFromAuction(_id);\r\n            success = false;\r\n        }\r\n    }\r\n\r\n    function sellDragon(\r\n        address _sender,\r\n        uint256 _id,\r\n        uint256 _maxPrice,\r\n        uint256 _minPrice,\r\n        uint16 _period,\r\n        bool _isGold\r\n    ) external onlyController {\r\n        _checkDragonOwner(_id, _sender);\r\n        _checkTheDragonIsNotInGladiatorBattle(_id);\r\n        require(breedingMarketplace.sellerOf(_id) == address(0), \"dragon is on breeding sale\");\r\n        dragonStorage.remoteApprove(this, _id);\r\n\r\n        dragonMarketplace.sellToken(_id, _sender, _maxPrice, _minPrice, _period, _isGold);\r\n    }\r\n\r\n    function removeDragonFromSale(\r\n        address _sender,\r\n        uint256 _id\r\n    ) external onlyController {\r\n        _checkDragonOwner(_id, _sender);\r\n        dragonMarketplace.removeFromAuction(_id);\r\n    }\r\n\r\n    // BREEDING\r\n\r\n    function buyBreeding(\r\n        address _sender,\r\n        uint256 _value,\r\n        uint256 _momId,\r\n        uint256 _dadId,\r\n        uint256 _expectedPrice,\r\n        bool _isGold\r\n    ) external onlyController returns (uint256 eggId, address seller, uint256 price, bool success) {\r\n        _checkIfBreedingIsAllowed(_momId);\r\n        require(_momId != _dadId, \"the same dragon\");\r\n        _checkDragonOwner(_momId, _sender);\r\n        seller = breedingMarketplace.sellerOf(_dadId);\r\n        _compareBuyerAndSeller(_sender, seller);\r\n\r\n        if (getter.isDragonBreedingAllowed(_dadId) && _isDragonOwner(seller, _dadId)) {\r\n            uint256 _balance = goldTokens.balanceOf(_sender);\r\n            price = breedingMarketplace.buyToken(_dadId, _isGold ? _balance : _value, _expectedPrice, _isGold);\r\n            eggId = core.breed(_sender, _momId, _dadId);\r\n            if (_isGold) {\r\n                _transferGold(seller, price);\r\n            }\r\n            success = true;\r\n        } else {\r\n            breedingMarketplace.removeFromAuction(_dadId);\r\n            success = false;\r\n        }\r\n    }\r\n\r\n    function sellBreeding(\r\n        address _sender,\r\n        uint256 _id,\r\n        uint256 _maxPrice,\r\n        uint256 _minPrice,\r\n        uint16 _period,\r\n        bool _isGold\r\n    ) external onlyController {\r\n        _checkIfBreedingIsAllowed(_id);\r\n        _checkDragonOwner(_id, _sender);\r\n        _checkTheDragonIsNotInGladiatorBattle(_id);\r\n        require(dragonMarketplace.sellerOf(_id) == address(0), \"dragon is on sale\");\r\n        breedingMarketplace.sellToken(_id, _sender, _maxPrice, _minPrice, _period, _isGold);\r\n    }\r\n\r\n    function removeBreedingFromSale(\r\n        address _sender,\r\n        uint256 _id\r\n    ) external onlyController {\r\n        _checkDragonOwner(_id, _sender);\r\n        breedingMarketplace.removeFromAuction(_id);\r\n    }\r\n\r\n    // SKILL\r\n\r\n    function buySkill(\r\n        address _sender,\r\n        uint256 _id,\r\n        uint256 _target,\r\n        uint256 _expectedPrice,\r\n        uint32 _expectedEffect\r\n    ) external onlyController returns (address seller, uint256 price, bool success) {\r\n        if (dragonStorage.exists(_id)) {\r\n            price = skillMarketplace.getAuction(_id);\r\n            seller = dragonStorage.ownerOf(_id);\r\n            _compareBuyerAndSeller(_sender, seller);\r\n            _checkTheDragonIsNotInGladiatorBattle(_id);\r\n            _checkTheDragonIsNotInGladiatorBattle(_target);\r\n\r\n            require(price <= _expectedPrice, \"wrong price\");\r\n            uint256 _balance = goldTokens.balanceOf(_sender);\r\n            _checkEnoughGold(price, _balance);\r\n\r\n            ( , , uint32 _effect) = getter.getDragonSpecialPeacefulSkill(_id);\r\n            require(_effect >= _expectedEffect, \"effect decreased\");\r\n\r\n            core.useDragonSpecialPeacefulSkill(seller, _id, _target);\r\n\r\n            _transferGold(seller, price);\r\n            success = true;\r\n        } else {\r\n            skillMarketplace.removeFromAuction(_id);\r\n            success = false;\r\n        }\r\n    }\r\n\r\n    function sellSkill(\r\n        address _sender,\r\n        uint256 _id,\r\n        uint256 _price\r\n    ) external onlyController {\r\n        _checkDragonOwner(_id, _sender);\r\n        _checkTheDragonIsNotInGladiatorBattle(_id);\r\n        (uint8 _skillClass, , ) = getter.getDragonSpecialPeacefulSkill(_id);\r\n        require(_skillClass > 0, \"special peaceful skill is not yet set\");\r\n\r\n        skillMarketplace.sellToken(_id, _price);\r\n    }\r\n\r\n    function removeSkillFromSale(\r\n        address _sender,\r\n        uint256 _id\r\n    ) external onlyController {\r\n        _checkDragonOwner(_id, _sender);\r\n        skillMarketplace.removeFromAuction(_id);\r\n    }\r\n\r\n    // UPDATE CONTRACT\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        super.setInternalDependencies(_newDependencies);\r\n\r\n        core = Core(_newDependencies[0]);\r\n        dragonStorage = DragonStorage(_newDependencies[1]);\r\n        eggStorage = EggStorage(_newDependencies[2]);\r\n        dragonMarketplace = DragonMarketplace(_newDependencies[3]);\r\n        breedingMarketplace = BreedingMarketplace(_newDependencies[4]);\r\n        eggMarketplace = EggMarketplace(_newDependencies[5]);\r\n        goldMarketplace = GoldMarketplace(_newDependencies[6]);\r\n        skillMarketplace = SkillMarketplace(_newDependencies[7]);\r\n        goldTokens = Gold(_newDependencies[8]);\r\n        getter = Getter(_newDependencies[9]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"sellSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint16\"},{\"name\":\"_isGold\",\"type\":\"bool\"}],\"name\":\"sellBreeding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeBreedingFromSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeDragonFromSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint16\"},{\"name\":\"_isGold\",\"type\":\"bool\"}],\"name\":\"sellEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_expectedPrice\",\"type\":\"uint256\"},{\"name\":\"_isGold\",\"type\":\"bool\"}],\"name\":\"buyEgg\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setExternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setInternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint16\"},{\"name\":\"_isGold\",\"type\":\"bool\"}],\"name\":\"sellDragon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"uint256\"},{\"name\":\"_expectedPrice\",\"type\":\"uint256\"},{\"name\":\"_expectedEffect\",\"type\":\"uint32\"}],\"name\":\"buySkill\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_expectedPrice\",\"type\":\"uint256\"},{\"name\":\"_isGold\",\"type\":\"bool\"}],\"name\":\"buyDragon\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeSkillFromSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_momId\",\"type\":\"uint256\"},{\"name\":\"_dadId\",\"type\":\"uint256\"},{\"name\":\"_expectedPrice\",\"type\":\"uint256\"},{\"name\":\"_isGold\",\"type\":\"bool\"}],\"name\":\"buyBreeding\",\"outputs\":[{\"name\":\"eggId\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeEggFromSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MarketplaceController","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b1e476c743b7e605f60a2c37b48de8deee43b36e09e6aba7db633a35c962f830"}]}