{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath32 {\r\n\r\n    function mul(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint32 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        uint32 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint32 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary SafeMath256 {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint256 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not a contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _validateAddress(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Controllable is Ownable {\r\n    mapping(address => bool) controllers;\r\n\r\n    modifier onlyController {\r\n        require(_isController(msg.sender), \"no controller rights\");\r\n        _;\r\n    }\r\n\r\n    function _isController(address _controller) internal view returns (bool) {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    function _setControllers(address[] _controllers) internal {\r\n        for (uint256 i = 0; i < _controllers.length; i++) {\r\n            _validateAddress(_controllers[i]);\r\n            controllers[_controllers[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Upgradable is Controllable {\r\n    address[] internalDependencies;\r\n    address[] externalDependencies;\r\n\r\n    function getInternalDependencies() public view returns(address[]) {\r\n        return internalDependencies;\r\n    }\r\n\r\n    function getExternalDependencies() public view returns(address[]) {\r\n        return externalDependencies;\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\r\n            _validateAddress(_newDependencies[i]);\r\n        }\r\n        internalDependencies = _newDependencies;\r\n    }\r\n\r\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        externalDependencies = _newDependencies;\r\n        _setControllers(_newDependencies);\r\n    }\r\n}\r\n\r\ncontract ERC721Token {\r\n    function ownerOf(uint256) public view returns (address);\r\n    function exists(uint256) public view returns (bool);\r\n}\r\n\r\ncontract DragonModel {\r\n\r\n    struct HealthAndMana {\r\n        uint256 timestamp; \r\n        uint32 remainingHealth;\r\n        uint32 remainingMana; \r\n        uint32 maxHealth;\r\n        uint32 maxMana;\r\n    }\r\n\r\n    struct Level {\r\n        uint8 level;\r\n        uint8 experience;\r\n        uint16 dnaPoints;\r\n    }\r\n    \r\n    struct Tactics {\r\n        uint8 melee;\r\n        uint8 attack;\r\n    }\r\n\r\n    struct Battles {\r\n        uint16 wins;\r\n        uint16 defeats;\r\n    }\r\n\r\n    struct Skills {\r\n        uint32 attack;\r\n        uint32 defense;\r\n        uint32 stamina;\r\n        uint32 speed;\r\n        uint32 intelligence;\r\n    }\r\n    \r\n    struct Dragon {\r\n        uint16 generation;\r\n        uint256[4] genome;\r\n        uint256[2] parents;\r\n        uint8[11] types;\r\n        uint256 birth;\r\n    }\r\n\r\n}\r\n\r\ncontract DragonStorage is DragonModel, ERC721Token {\r\n    Dragon[] public dragons;\r\n    mapping (uint256 => bytes32) public names;\r\n    mapping (uint256 => HealthAndMana) public healthAndMana;\r\n    mapping (uint256 => Tactics) public tactics;\r\n    mapping (uint256 => Battles) public battles;\r\n    mapping (uint256 => Skills) public skills;\r\n    mapping (uint256 => Level) public levels;\r\n    mapping (uint256 => uint32) public coolness;\r\n    mapping (uint256 => uint8) public specialAttacks;\r\n    mapping (uint256 => uint8) public specialDefenses;\r\n    mapping (uint256 => mapping (uint8 => uint32)) public buffs;\r\n\r\n    function length() external view returns (uint256) {}\r\n    function getGenome(uint256 _id) external view returns (uint256[4]) {}\r\n    function getParents(uint256 _id) external view returns (uint256[2]) {}\r\n    function getDragonTypes(uint256 _id) external view returns (uint8[11]) {}\r\n}\r\n\r\ncontract DragonCoreHelper {\r\n    function calculateFullRegenerationTime(uint32) external pure returns (uint32) {}\r\n    function calculateSpecialBattleSkill(uint8, uint32[5]) external pure returns (uint32, uint8, uint8) {}\r\n    function getActiveGenes(uint256[4]) external pure returns (uint8[30]) {}\r\n}\r\n\r\ncontract DragonCore {\r\n    function isBreedingAllowed(uint8, uint16) public view returns (bool) {}\r\n    function calculateMaxHealthAndManaWithBuffs(uint256) public view returns (uint32, uint32) {}\r\n    function getCurrentHealthAndMana(uint256) public view returns (uint32, uint32, uint8, uint8) {}\r\n    function calculateSpecialPeacefulSkill(uint256) public view returns (uint8, uint32, uint32) {}\r\n}\r\n\r\n\r\n\r\n\r\n//////////////CONTRACT//////////////\r\n\r\n\r\n\r\n\r\ncontract DragonGetter is Upgradable {\r\n    using SafeMath32 for uint32;\r\n    using SafeMath256 for uint256;\r\n\r\n    DragonStorage _storage_;\r\n    DragonCore dragonCore;\r\n    DragonCoreHelper helper;\r\n\r\n    uint256 constant GOLD_DECIMALS = 10 ** 18;\r\n\r\n    uint256 constant DRAGON_NAME_2_LETTERS_PRICE = 100000 * GOLD_DECIMALS;\r\n    uint256 constant DRAGON_NAME_3_LETTERS_PRICE = 10000 * GOLD_DECIMALS;\r\n    uint256 constant DRAGON_NAME_4_LETTERS_PRICE = 1000 * GOLD_DECIMALS;\r\n\r\n    function _checkExistence(uint256 _id) internal view {\r\n        require(_storage_.exists(_id), \"dragon doesn't exist\");\r\n    }\r\n\r\n    function _min(uint32 lth, uint32 rth) internal pure returns (uint32) {\r\n        return lth > rth ? rth : lth;\r\n    }\r\n\r\n    // GETTERS\r\n\r\n    function getAmount() external view returns (uint256) {\r\n        return _storage_.length().sub(1);\r\n    }\r\n\r\n    function isOwner(address _user, uint256 _tokenId) external view returns (bool) {\r\n        return _user == _storage_.ownerOf(_tokenId);\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address) {\r\n        return _storage_.ownerOf(_tokenId);\r\n    }\r\n\r\n    function getGenome(uint256 _id) public view returns (uint8[30]) {\r\n        _checkExistence(_id);\r\n        return helper.getActiveGenes(_storage_.getGenome(_id));\r\n    }\r\n\r\n    function getComposedGenome(uint256 _id) external view returns (uint256[4]) {\r\n        _checkExistence(_id);\r\n        return _storage_.getGenome(_id);\r\n    }\r\n\r\n    function getSkills(uint256 _id) external view returns (uint32, uint32, uint32, uint32, uint32) {\r\n        _checkExistence(_id);\r\n        return _storage_.skills(_id);\r\n    }\r\n\r\n    // should be divided by 100\r\n    function getCoolness(uint256 _id) public view returns (uint32) {\r\n        _checkExistence(_id);\r\n        return _storage_.coolness(_id);\r\n    }\r\n\r\n    function getLevel(uint256 _id) public view returns (uint8 level) {\r\n        _checkExistence(_id);\r\n        (level, , ) = _storage_.levels(_id);\r\n    }\r\n\r\n    function getHealthAndMana(uint256 _id) external view returns (\r\n        uint256 timestamp,\r\n        uint32 remainingHealth,\r\n        uint32 remainingMana,\r\n        uint32 maxHealth,\r\n        uint32 maxMana\r\n    ) {\r\n        _checkExistence(_id);\r\n        (\r\n            timestamp,\r\n            remainingHealth,\r\n            remainingMana,\r\n            maxHealth,\r\n            maxMana\r\n        ) = _storage_.healthAndMana(_id);\r\n        (maxHealth, maxMana) = dragonCore.calculateMaxHealthAndManaWithBuffs(_id);\r\n\r\n        remainingHealth = _min(remainingHealth, maxHealth);\r\n        remainingMana = _min(remainingMana, maxMana);\r\n    }\r\n\r\n    function getCurrentHealthAndMana(uint256 _id) external view returns (\r\n        uint32, uint32, uint8, uint8\r\n    ) {\r\n        _checkExistence(_id);\r\n        return dragonCore.getCurrentHealthAndMana(_id);\r\n    }\r\n\r\n    function getFullRegenerationTime(uint256 _id) external view returns (uint32) {\r\n        _checkExistence(_id);\r\n        ( , , , uint32 _maxHealth, ) = _storage_.healthAndMana(_id);\r\n        return helper.calculateFullRegenerationTime(_maxHealth);\r\n    }\r\n\r\n    function getDragonTypes(uint256 _id) external view returns (uint8[11]) {\r\n        _checkExistence(_id);\r\n        return _storage_.getDragonTypes(_id);\r\n    }\r\n\r\n    function getProfile(uint256 _id) external view returns (\r\n        bytes32 name,\r\n        uint16 generation,\r\n        uint256 birth,\r\n        uint8 level,\r\n        uint8 experience,\r\n        uint16 dnaPoints,\r\n        bool isBreedingAllowed,\r\n        uint32 coolness\r\n    ) {\r\n        _checkExistence(_id);\r\n        name = _storage_.names(_id);\r\n        (level, experience, dnaPoints) = _storage_.levels(_id);\r\n        isBreedingAllowed = dragonCore.isBreedingAllowed(level, dnaPoints);\r\n        (generation, birth) = _storage_.dragons(_id);\r\n        coolness = _storage_.coolness(_id);\r\n\r\n    }\r\n\r\n    function getGeneration(uint256 _id) external view returns (uint16 generation) {\r\n        _checkExistence(_id);\r\n        (generation, ) = _storage_.dragons(_id);\r\n    }\r\n\r\n    function isBreedingAllowed(uint256 _id) external view returns (bool) {\r\n        _checkExistence(_id);\r\n        uint8 _level;\r\n        uint16 _dnaPoints;\r\n        (_level, , _dnaPoints) = _storage_.levels(_id);\r\n        return dragonCore.isBreedingAllowed(_level, _dnaPoints);\r\n    }\r\n\r\n    function getTactics(uint256 _id) external view returns (uint8, uint8) {\r\n        _checkExistence(_id);\r\n        return _storage_.tactics(_id);\r\n    }\r\n\r\n    function getBattles(uint256 _id) external view returns (uint16, uint16) {\r\n        _checkExistence(_id);\r\n        return _storage_.battles(_id);\r\n    }\r\n\r\n    function getParents(uint256 _id) external view returns (uint256[2]) {\r\n        _checkExistence(_id);\r\n        return _storage_.getParents(_id);\r\n    }\r\n\r\n    function _getSpecialBattleSkill(uint256 _id, uint8 _dragonType) internal view returns (\r\n        uint32 cost,\r\n        uint8 factor,\r\n        uint8 chance\r\n    ) {\r\n        _checkExistence(_id);\r\n        uint32 _attack;\r\n        uint32 _defense;\r\n        uint32 _stamina;\r\n        uint32 _speed;\r\n        uint32 _intelligence;\r\n        (_attack, _defense, _stamina, _speed, _intelligence) = _storage_.skills(_id);\r\n        return helper.calculateSpecialBattleSkill(_dragonType, [_attack, _defense, _stamina, _speed, _intelligence]);\r\n    }\r\n\r\n    function getSpecialAttack(uint256 _id) external view returns (\r\n        uint8 dragonType,\r\n        uint32 cost,\r\n        uint8 factor,\r\n        uint8 chance\r\n    ) {\r\n        _checkExistence(_id);\r\n        dragonType = _storage_.specialAttacks(_id);\r\n        (cost, factor, chance) = _getSpecialBattleSkill(_id, dragonType);\r\n    }\r\n\r\n    function getSpecialDefense(uint256 _id) external view returns (\r\n        uint8 dragonType,\r\n        uint32 cost,\r\n        uint8 factor,\r\n        uint8 chance\r\n    ) {\r\n        _checkExistence(_id);\r\n        dragonType = _storage_.specialDefenses(_id);\r\n        (cost, factor, chance) = _getSpecialBattleSkill(_id, dragonType);\r\n    }\r\n\r\n    function getSpecialPeacefulSkill(uint256 _id) external view returns (uint8, uint32, uint32) {\r\n        _checkExistence(_id);\r\n        return dragonCore.calculateSpecialPeacefulSkill(_id);\r\n    }\r\n\r\n    function getBuffs(uint256 _id) external view returns (uint32[5]) {\r\n        _checkExistence(_id);\r\n        return [\r\n            _storage_.buffs(_id, 1), // attack\r\n            _storage_.buffs(_id, 2), // defense\r\n            _storage_.buffs(_id, 3), // stamina\r\n            _storage_.buffs(_id, 4), // speed\r\n            _storage_.buffs(_id, 5)  // intelligence\r\n        ];\r\n    }\r\n\r\n    function getDragonStrength(uint256 _id) external view returns (uint32 sum) {\r\n        _checkExistence(_id);\r\n        uint32 _attack;\r\n        uint32 _defense;\r\n        uint32 _stamina;\r\n        uint32 _speed;\r\n        uint32 _intelligence;\r\n        (_attack, _defense, _stamina, _speed, _intelligence) = _storage_.skills(_id);\r\n        sum = sum.add(_attack.mul(69));\r\n        sum = sum.add(_defense.mul(217));\r\n        sum = sum.add(_stamina.mul(232));\r\n        sum = sum.add(_speed.mul(114));\r\n        sum = sum.add(_intelligence.mul(151));\r\n        sum = sum.div(100);\r\n    }\r\n\r\n    function getDragonNamePriceByLength(uint256 _length) external pure returns (uint256) {\r\n        if (_length == 2) {\r\n            return DRAGON_NAME_2_LETTERS_PRICE;\r\n        } else if (_length == 3) {\r\n            return DRAGON_NAME_3_LETTERS_PRICE;\r\n        } else {\r\n            return DRAGON_NAME_4_LETTERS_PRICE;\r\n        }\r\n    }\r\n\r\n    function getDragonNamePrices() external pure returns (uint8[3] lengths, uint256[3] prices) {\r\n        lengths = [2, 3, 4];\r\n        prices = [\r\n            DRAGON_NAME_2_LETTERS_PRICE,\r\n            DRAGON_NAME_3_LETTERS_PRICE,\r\n            DRAGON_NAME_4_LETTERS_PRICE\r\n        ];\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        super.setInternalDependencies(_newDependencies);\r\n\r\n        _storage_ = DragonStorage(_newDependencies[0]);\r\n        dragonCore = DragonCore(_newDependencies[1]);\r\n        helper = DragonCoreHelper(_newDependencies[2]);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSkills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getParents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSpecialDefense\",\"outputs\":[{\"name\":\"dragonType\",\"type\":\"uint8\"},{\"name\":\"cost\",\"type\":\"uint32\"},{\"name\":\"factor\",\"type\":\"uint8\"},{\"name\":\"chance\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCoolness\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSpecialPeacefulSkill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getGeneration\",\"outputs\":[{\"name\":\"generation\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTactics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getGenome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[30]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setExternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setInternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getComposedGenome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"level\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBattles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCurrentHealthAndMana\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"getDragonNamePriceByLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getHealthAndMana\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"remainingHealth\",\"type\":\"uint32\"},{\"name\":\"remainingMana\",\"type\":\"uint32\"},{\"name\":\"maxHealth\",\"type\":\"uint32\"},{\"name\":\"maxMana\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isBreedingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDragonStrength\",\"outputs\":[{\"name\":\"sum\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getFullRegenerationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDragonNamePrices\",\"outputs\":[{\"name\":\"lengths\",\"type\":\"uint8[3]\"},{\"name\":\"prices\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDragonTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[11]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSpecialAttack\",\"outputs\":[{\"name\":\"dragonType\",\"type\":\"uint8\"},{\"name\":\"cost\",\"type\":\"uint32\"},{\"name\":\"factor\",\"type\":\"uint8\"},{\"name\":\"chance\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBuffs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getProfile\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"generation\",\"type\":\"uint16\"},{\"name\":\"birth\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"experience\",\"type\":\"uint8\"},{\"name\":\"dnaPoints\",\"type\":\"uint16\"},{\"name\":\"isBreedingAllowed\",\"type\":\"bool\"},{\"name\":\"coolness\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DragonGetter","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e02d9090c0c668c382a11a55bee38df9266144906abfa4882b710727a6400c64"}]}