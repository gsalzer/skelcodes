{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  ERC20Interface public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  /**\r\n   * @param _rate Number of token units a buyer gets per wei\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  constructor(uint256 _rate, address _wallet, ERC20Interface _token) public {\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n\r\n    _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    token.transfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20Standard is ERC20Interface {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) external returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * \r\n   * To avoid this issue, allowances are only allowed to be changed between zero and non-zero.\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) external returns (bool) {\r\n    require(allowed[msg.sender][_spender] == 0 || _value == 0);\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() external view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) external view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) external view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) external returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC223Interface {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value, bytes data) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC223ReceivingContract { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\ncontract ERC223Standard is ERC223Interface, ERC20Standard {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint256 _value, bytes _data) external returns(bool){\r\n        // Standard function transfer similar to ERC20 transfer with no _data .\r\n        // Added due to backwards compatibility reasons .\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) external returns(bool){\r\n        uint256 codeLength;\r\n        bytes memory empty;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n \r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is ERC223Standard, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract PoolAndSaleInterface {\r\n    address public tokenSaleAddr;\r\n    address public votingAddr;\r\n    address public votingTokenAddr;\r\n    uint256 public tap;\r\n    uint256 public initialTap;\r\n    uint256 public initialRelease;\r\n\r\n    function setTokenSaleContract(address _tokenSaleAddr) external;\r\n    function startProject() external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract TimeLockPool{\r\n    using SafeMath for uint256;\r\n\r\n    struct LockedBalance {\r\n      uint256 balance;\r\n      uint256 releaseTime;\r\n    }\r\n\r\n    /*\r\n      structure: lockedBalnces[owner][token] = LockedBalance(balance, releaseTime);\r\n      token address = '0x0' stands for ETH (unit = wei)\r\n    */\r\n    mapping (address => mapping (address => LockedBalance[])) public lockedBalances;\r\n\r\n    event Deposit(\r\n        address indexed owner,\r\n        address indexed tokenAddr,\r\n        uint256 amount,\r\n        uint256 releaseTime\r\n    );\r\n\r\n    event Withdraw(\r\n        address indexed owner,\r\n        address indexed tokenAddr,\r\n        uint256 amount\r\n    );\r\n\r\n    /// @dev Constructor. \r\n    /// @return \r\n    constructor() public {}\r\n\r\n    /// @dev Deposit tokens to specific account with time-lock.\r\n    /// @param tokenAddr The contract address of a ERC20/ERC223 token.\r\n    /// @param account The owner of deposited tokens.\r\n    /// @param amount Amount to deposit.\r\n    /// @param releaseTime Time-lock period.\r\n    /// @return True if it is successful, revert otherwise.\r\n    function depositERC20 (\r\n        address tokenAddr,\r\n        address account,\r\n        uint256 amount,\r\n        uint256 releaseTime\r\n    ) external returns (bool) {\r\n        require(account != address(0x0));\r\n        require(tokenAddr != 0x0);\r\n        require(msg.value == 0);\r\n        require(amount > 0);\r\n        require(ERC20Interface(tokenAddr).transferFrom(msg.sender, this, amount));\r\n\r\n        lockedBalances[account][tokenAddr].push(LockedBalance(amount, releaseTime));\r\n        emit Deposit(account, tokenAddr, amount, releaseTime);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Deposit ETH to specific account with time-lock.\r\n    /// @param account The owner of deposited tokens.\r\n    /// @param releaseTime Timestamp to release the fund.\r\n    /// @return True if it is successful, revert otherwise.\r\n    function depositETH (\r\n        address account,\r\n        uint256 releaseTime\r\n    ) external payable returns (bool) {\r\n        require(account != address(0x0));\r\n        address tokenAddr = address(0x0);\r\n        uint256 amount = msg.value;\r\n        require(amount > 0);\r\n\r\n        lockedBalances[account][tokenAddr].push(LockedBalance(amount, releaseTime));\r\n        emit Deposit(account, tokenAddr, amount, releaseTime);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Release the available balance of an account.\r\n    /// @param account An account to receive tokens.\r\n    /// @param tokenAddr An address of ERC20/ERC223 token.\r\n    /// @param index_from Starting index of records to withdraw.\r\n    /// @param index_to Ending index of records to withdraw.\r\n    /// @return True if it is successful, revert otherwise.\r\n    function withdraw (address account, address tokenAddr, uint256 index_from, uint256 index_to) external returns (bool) {\r\n        require(account != address(0x0));\r\n\r\n        uint256 release_amount = 0;\r\n        for (uint256 i = index_from; i < lockedBalances[account][tokenAddr].length && i < index_to + 1; i++) {\r\n            if (lockedBalances[account][tokenAddr][i].balance > 0 &&\r\n                lockedBalances[account][tokenAddr][i].releaseTime <= block.timestamp) {\r\n\r\n                release_amount = release_amount.add(lockedBalances[account][tokenAddr][i].balance);\r\n                lockedBalances[account][tokenAddr][i].balance = 0;\r\n            }\r\n        }\r\n\r\n        require(release_amount > 0);\r\n\r\n        if (tokenAddr == 0x0) {\r\n            if (!account.send(release_amount)) {\r\n                revert();\r\n            }\r\n            emit Withdraw(account, tokenAddr, release_amount);\r\n            return true;\r\n        } else {\r\n            if (!ERC20Interface(tokenAddr).transfer(account, release_amount)) {\r\n                revert();\r\n            }\r\n            emit Withdraw(account, tokenAddr, release_amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns total amount of balances which already passed release time.\r\n    /// @param account An account to receive tokens.\r\n    /// @param tokenAddr An address of ERC20/ERC223 token.\r\n    /// @return Available balance of specified token.\r\n    function getAvailableBalanceOf (address account, address tokenAddr) \r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(account != address(0x0));\r\n\r\n        uint256 balance = 0;\r\n        for(uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\r\n            if (lockedBalances[account][tokenAddr][i].releaseTime <= block.timestamp) {\r\n                balance = balance.add(lockedBalances[account][tokenAddr][i].balance);\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    /// @dev Returns total amount of balances which are still locked.\r\n    /// @param account An account to receive tokens.\r\n    /// @param tokenAddr An address of ERC20/ERC223 token.\r\n    /// @return Locked balance of specified token.\r\n    function getLockedBalanceOf (address account, address tokenAddr)\r\n        external\r\n        view\r\n        returns (uint256) \r\n    {\r\n        require(account != address(0x0));\r\n\r\n        uint256 balance = 0;\r\n        for(uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\r\n            if(lockedBalances[account][tokenAddr][i].releaseTime > block.timestamp) {\r\n                balance = balance.add(lockedBalances[account][tokenAddr][i].balance);\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    /// @dev Returns next release time of locked balances.\r\n    /// @param account An account to receive tokens.\r\n    /// @param tokenAddr An address of ERC20/ERC223 token.\r\n    /// @return Timestamp of next release.\r\n    function getNextReleaseTimeOf (address account, address tokenAddr)\r\n        external\r\n        view\r\n        returns (uint256) \r\n    {\r\n        require(account != address(0x0));\r\n\r\n        uint256 nextRelease = 2**256 - 1;\r\n        for (uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\r\n            if (lockedBalances[account][tokenAddr][i].releaseTime > block.timestamp &&\r\n               lockedBalances[account][tokenAddr][i].releaseTime < nextRelease) {\r\n\r\n                nextRelease = lockedBalances[account][tokenAddr][i].releaseTime;\r\n            }\r\n        }\r\n\r\n        /* returns 0 if there are no more locked balances. */\r\n        if (nextRelease == 2**256 - 1) {\r\n            nextRelease = 0;\r\n        }\r\n        return nextRelease;\r\n    }\r\n}\r\n\r\ncontract TimedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public openingTime;\r\n  uint256 public closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param _openingTime Crowdsale opening time\r\n   * @param _closingTime Crowdsale closing time\r\n   */\r\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\r\n    require(_openingTime >= block.timestamp);\r\n    require(_closingTime >= _openingTime);\r\n\r\n    openingTime = _openingTime;\r\n    closingTime = _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    return block.timestamp > closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n}\r\n\r\ncontract FinalizableCrowdsale is TimedCrowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasClosed());\r\n\r\n    finalization();\r\n    emit Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n\r\n}\r\n\r\ncontract TokenController is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    MintableToken public targetToken;\r\n    address public votingAddr;\r\n    address public tokensaleManagerAddr;\r\n\r\n    State public state;\r\n\r\n    enum State {\r\n        Init,\r\n        Tokensale,\r\n        Public\r\n    }\r\n\r\n    /// @dev The deployer must change the ownership of the target token to this contract.\r\n    /// @param _targetToken : The target token this contract manage the rights to mint.\r\n    /// @return \r\n    constructor (\r\n        MintableToken _targetToken\r\n    ) public {\r\n        targetToken = MintableToken(_targetToken);\r\n        state = State.Init;\r\n    }\r\n\r\n    /// @dev Mint and distribute specified amount of tokens to an address.\r\n    /// @param to An address that receive the minted tokens.\r\n    /// @param amount Amount to mint.\r\n    /// @return True if the distribution is successful, revert otherwise.\r\n    function mint (address to, uint256 amount) external returns (bool) {\r\n        /*\r\n          being called from voting contract will be available in the future\r\n          ex. if (state == State.Public && msg.sender == votingAddr) \r\n        */\r\n\r\n        if ((state == State.Init && msg.sender == owner) ||\r\n            (state == State.Tokensale && msg.sender == tokensaleManagerAddr)) {\r\n            return targetToken.mint(to, amount);\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    /// @dev Change the phase from \"Init\" to \"Tokensale\".\r\n    /// @param _tokensaleManagerAddr A contract address of token-sale.\r\n    /// @return True if the change of the phase is successful, revert otherwise.\r\n    function openTokensale (address _tokensaleManagerAddr)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        /* check if the owner of the target token is set to this contract */\r\n        require(MintableToken(targetToken).owner() == address(this));\r\n        require(state == State.Init);\r\n        require(_tokensaleManagerAddr != address(0x0));\r\n\r\n        tokensaleManagerAddr = _tokensaleManagerAddr;\r\n        state = State.Tokensale;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Change the phase from \"Tokensale\" to \"Public\". This function will be\r\n    ///      cahnged in the future to receive an address of voting contract as an\r\n    ///      argument in order to handle the result of minting proposal.\r\n    /// @return True if the change of the phase is successful, revert otherwise.\r\n    function closeTokensale () external returns (bool) {\r\n        require(state == State.Tokensale && msg.sender == tokensaleManagerAddr);\r\n\r\n        state = State.Public;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Check if the state is \"Init\" or not.\r\n    /// @return True if the state is \"Init\", false otherwise.\r\n    function isStateInit () external view returns (bool) {\r\n        return (state == State.Init);\r\n    }\r\n\r\n    /// @dev Check if the state is \"Tokensale\" or not.\r\n    /// @return True if the state is \"Tokensale\", false otherwise.\r\n    function isStateTokensale () external view returns (bool) {\r\n        return (state == State.Tokensale);\r\n    }\r\n\r\n    /// @dev Check if the state is \"Public\" or not.\r\n    /// @return True if the state is \"Public\", false otherwise.\r\n    function isStatePublic () external view returns (bool) {\r\n        return (state == State.Public);\r\n    }\r\n}\r\n\r\ncontract TokenSaleManager is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20Interface public token;\r\n    address public poolAddr;\r\n    address public tokenControllerAddr;\r\n    address public timeLockPoolAddr;\r\n    address[] public tokenSales;\r\n    mapping( address => bool ) public tokenSaleIndex;\r\n    bool public isStarted = false;\r\n    bool public isFinalized = false;\r\n\r\n    modifier onlyDaicoPool {\r\n        require(msg.sender == poolAddr);\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenSale {\r\n        require(tokenSaleIndex[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /// @dev Constructor. It set the DaicoPool to receive the starting signal from this contract.\r\n    /// @param _tokenControllerAddr The contract address of TokenController.\r\n    /// @param _timeLockPoolAddr The contract address of a TimeLockPool.\r\n    /// @param _daicoPoolAddr The contract address of DaicoPool.\r\n    /// @param _token The contract address of a ERC20 token.\r\n    constructor (\r\n        address _tokenControllerAddr,\r\n        address _timeLockPoolAddr,\r\n        address _daicoPoolAddr,\r\n        ERC20Interface _token\r\n    ) public {\r\n        require(_tokenControllerAddr != address(0x0));\r\n        tokenControllerAddr = _tokenControllerAddr;\r\n\r\n        require(_timeLockPoolAddr != address(0x0));\r\n        timeLockPoolAddr = _timeLockPoolAddr;\r\n\r\n        token = _token;\r\n\r\n        poolAddr = _daicoPoolAddr;\r\n        require(PoolAndSaleInterface(poolAddr).votingTokenAddr() == address(token));\r\n        PoolAndSaleInterface(poolAddr).setTokenSaleContract(this);\r\n\r\n    }\r\n\r\n    /// @dev This contract doen't receive any ETH.\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    /// @dev Add a new token sale with specific parameters. New sale should start\r\n    /// @dev after the previous one closed.\r\n    /// @param openingTime A timestamp of the date this sale will start.\r\n    /// @param closingTime A timestamp of the date this sale will end.\r\n    /// @param tokensCap Number of tokens to be sold. Can be 0 if it accepts carryover.\r\n    /// @param rate Number of tokens issued with 1 ETH. [minimal unit of the token / ETH]  \r\n    /// @param carryover If true, unsold tokens will be carryovered to next sale. \r\n    /// @param timeLockRate Specified rate of issued tokens will be locked. ex. 50 = 50%\r\n    /// @param timeLockEnd A timestamp of the date locked tokens will be released.\r\n    /// @param minAcceptableWei Minimum contribution.\r\n    function addTokenSale (\r\n        uint256 openingTime,\r\n        uint256 closingTime,\r\n        uint256 tokensCap,\r\n        uint256 rate,\r\n        bool carryover,\r\n        uint256 timeLockRate,\r\n        uint256 timeLockEnd,\r\n        uint256 minAcceptableWei\r\n    ) external onlyOwner {\r\n        require(!isStarted);\r\n        require(\r\n            tokenSales.length == 0 ||\r\n            TimedCrowdsale(tokenSales[tokenSales.length-1]).closingTime() < openingTime\r\n        );\r\n\r\n        require(TokenController(tokenControllerAddr).state() == TokenController.State.Init);\r\n\r\n        tokenSales.push(new TokenSale(\r\n            rate,\r\n            token,\r\n            poolAddr,\r\n            openingTime,\r\n            closingTime,\r\n            tokensCap,\r\n            timeLockRate,\r\n            timeLockEnd,\r\n            carryover,\r\n            minAcceptableWei\r\n        ));\r\n        tokenSaleIndex[tokenSales[tokenSales.length-1]] = true;\r\n\r\n    }\r\n\r\n    /// @dev Initialize the tokensales. No other sales can be added after initialization.\r\n    /// @return True if successful, revert otherwise.\r\n    function initialize () external onlyOwner returns (bool) {\r\n        require(!isStarted);\r\n        TokenSale(tokenSales[0]).initialize(0);\r\n        isStarted = true;\r\n    }\r\n\r\n    /// @dev Request TokenController to mint new tokens. This function is only called by \r\n    /// @dev token sales.\r\n    /// @param _beneficiary The address to receive the new tokens.\r\n    /// @param _tokenAmount Token amount to be minted.\r\n    /// @return True if successful, revert otherwise.\r\n    function mint (\r\n        address _beneficiary,\r\n        uint256 _tokenAmount\r\n    ) external onlyTokenSale returns(bool) {\r\n        require(isStarted && !isFinalized);\r\n        require(TokenController(tokenControllerAddr).mint(_beneficiary, _tokenAmount));\r\n        return true;\r\n    }\r\n\r\n    /// @dev Mint new tokens with time-lock. This function is only called by token sales.\r\n    /// @param _beneficiary The address to receive the new tokens.\r\n    /// @param _tokenAmount Token amount to be minted.\r\n    /// @param _releaseTime A timestamp of the date locked tokens will be released.\r\n    /// @return True if successful, revert otherwise.\r\n    function mintTimeLocked (\r\n        address _beneficiary,\r\n        uint256 _tokenAmount,\r\n        uint256 _releaseTime\r\n    ) external onlyTokenSale returns(bool) {\r\n        require(isStarted && !isFinalized);\r\n        require(TokenController(tokenControllerAddr).mint(this, _tokenAmount));\r\n        require(ERC20Interface(token).approve(timeLockPoolAddr, _tokenAmount));\r\n        require(TimeLockPool(timeLockPoolAddr).depositERC20(\r\n            token,\r\n            _beneficiary,\r\n            _tokenAmount,\r\n            _releaseTime\r\n        ));\r\n        return true;\r\n    }\r\n\r\n    /// @dev Adds single address to whitelist of all token sales.\r\n    /// @param _beneficiary Address to be added to the whitelist\r\n    function addToWhitelist(address _beneficiary) external onlyOwner {\r\n        require(isStarted);\r\n        for (uint256 i = 0; i < tokenSales.length; i++ ) {\r\n            WhitelistedCrowdsale(tokenSales[i]).addToWhitelist(_beneficiary);\r\n        }\r\n    }\r\n\r\n    /// @dev Adds multiple addresses to whitelist of all token sales.\r\n    /// @param _beneficiaries Addresses to be added to the whitelist\r\n    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\r\n        require(isStarted);\r\n        for (uint256 i = 0; i < tokenSales.length; i++ ) {\r\n            WhitelistedCrowdsale(tokenSales[i]).addManyToWhitelist(_beneficiaries);\r\n        }\r\n    }\r\n\r\n\r\n    /// @dev Finalize the specific token sale. Can be done if end date has come or \r\n    /// @dev all tokens has been sold out. It process carryover if it is set.\r\n    /// @param _indexTokenSale index of the target token sale. \r\n    function finalize (uint256 _indexTokenSale) external {\r\n        require(isStarted && !isFinalized);\r\n        TokenSale ts = TokenSale(tokenSales[_indexTokenSale]);\r\n\r\n        if (ts.canFinalize()) {\r\n            ts.finalize();\r\n            uint256 carryoverAmount = 0;\r\n            if (ts.carryover() &&\r\n                ts.tokensCap() > ts.tokensMinted() &&\r\n                _indexTokenSale.add(1) < tokenSales.length) {\r\n                carryoverAmount = ts.tokensCap().sub(ts.tokensMinted());\r\n            } \r\n            if(_indexTokenSale.add(1) < tokenSales.length) {\r\n                TokenSale(tokenSales[_indexTokenSale.add(1)]).initialize(carryoverAmount);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /// @dev Finalize the manager. Can be done if all token sales are already finalized.\r\n    /// @dev It makes the DaicoPool open the TAP.\r\n    function finalizeTokenSaleManager () external{\r\n        require(isStarted && !isFinalized);\r\n        for (uint256 i = 0; i < tokenSales.length; i++ ) {\r\n            require(FinalizableCrowdsale(tokenSales[i]).isFinalized());\r\n        }\r\n        require(TokenController(tokenControllerAddr).closeTokensale());\r\n        isFinalized = true;\r\n        PoolAndSaleInterface(poolAddr).startProject();\r\n    }\r\n}\r\n\r\ncontract WhitelistedCrowdsale is Crowdsale, Ownable {\r\n\r\n  mapping(address => bool) public whitelist;\r\n\r\n  /**\r\n   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\r\n   */\r\n  modifier isWhitelisted(address _beneficiary) {\r\n    require(whitelist[_beneficiary]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds single address to whitelist.\r\n   * @param _beneficiary Address to be added to the whitelist\r\n   */\r\n  function addToWhitelist(address _beneficiary) external onlyOwner {\r\n    whitelist[_beneficiary] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\r\n   * @param _beneficiaries Addresses to be added to the whitelist\r\n   */\r\n  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      whitelist[_beneficiaries[i]] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Removes single address from whitelist.\r\n   * @param _beneficiary Address to be removed to the whitelist\r\n   */\r\n  function removeFromWhitelist(address _beneficiary) external onlyOwner {\r\n    whitelist[_beneficiary] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\r\n   * @param _beneficiary Token beneficiary\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n}\r\n\r\ncontract TokenSale is FinalizableCrowdsale,\r\n                      WhitelistedCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    address public managerAddr; \r\n    address public poolAddr;\r\n    bool public isInitialized = false;\r\n    uint256 public timeLockRate;\r\n    uint256 public timeLockEnd;\r\n    uint256 public tokensMinted = 0;\r\n    uint256 public tokensCap;\r\n    uint256 public minAcceptableWei;\r\n    bool public carryover;\r\n\r\n    modifier onlyManager{\r\n        require(msg.sender == managerAddr);\r\n        _;\r\n    }\r\n\r\n    /// @dev Constructor.\r\n    /// @param _rate Number of tokens issued with 1 ETH. [minimal unit of the token / ETH]\r\n    /// @param _token The contract address of a ERC20 token.\r\n    /// @param _poolAddr The contract address of DaicoPool.\r\n    /// @param _openingTime A timestamp of the date this sale will start.\r\n    /// @param _closingTime A timestamp of the date this sale will end.\r\n    /// @param _tokensCap Number of tokens to be sold. Can be 0 if it accepts carryover.\r\n    /// @param _timeLockRate Specified rate of issued tokens will be locked. ex. 50 = 50%\r\n    /// @param _timeLockEnd A timestamp of the date locked tokens will be released.\r\n    /// @param _carryover If true, unsold tokens will be carryovered to next sale. \r\n    /// @param _minAcceptableWei Minimum contribution.\r\n    /// @return \r\n    constructor (\r\n        uint256 _rate, /* The unit of rate is [nano tokens / ETH] in this contract */\r\n        ERC20Interface _token,\r\n        address _poolAddr,\r\n        uint256 _openingTime,\r\n        uint256 _closingTime,\r\n        uint256 _tokensCap,\r\n        uint256 _timeLockRate,\r\n        uint256 _timeLockEnd,\r\n        bool _carryover,\r\n        uint256 _minAcceptableWei\r\n    ) public Crowdsale(_rate, _poolAddr, _token) TimedCrowdsale(_openingTime, _closingTime) {\r\n        require(_timeLockRate >= 0 && _timeLockRate <=100);\r\n        require(_poolAddr != address(0x0));\r\n\r\n        managerAddr = msg.sender;\r\n        poolAddr = _poolAddr;\r\n        timeLockRate = _timeLockRate;\r\n        timeLockEnd = _timeLockEnd;\r\n        tokensCap = _tokensCap;\r\n        carryover = _carryover;\r\n        minAcceptableWei = _minAcceptableWei;\r\n    }\r\n\r\n    /// @dev Initialize the sale. If carryoverAmount is given, it added the tokens to be sold.\r\n    /// @param carryoverAmount Amount of tokens to be added to capTokens.\r\n    /// @return \r\n    function initialize(uint256 carryoverAmount) external onlyManager {\r\n        require(!isInitialized);\r\n        isInitialized = true;\r\n        tokensCap = tokensCap.add(carryoverAmount);\r\n    }\r\n\r\n    /// @dev Finalize the sale. It transfers all the funds it has. Can be repeated.\r\n    /// @return \r\n    function finalize() onlyOwner public {\r\n        //require(!isFinalized);\r\n        require(isInitialized);\r\n        require(canFinalize());\r\n\r\n        finalization();\r\n        emit Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /// @dev Check if the sale can be finalized.\r\n    /// @return True if closing time has come or tokens are sold out.\r\n    function canFinalize() public view returns(bool) {\r\n        return (hasClosed() || (isInitialized && tokensCap <= tokensMinted));\r\n    }\r\n\r\n\r\n    /// @dev It transfers all the funds it has.\r\n    /// @return \r\n    function finalization() internal {\r\n        if(address(this).balance > 0){\r\n            poolAddr.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides delivery by minting tokens upon purchase.\r\n     * @param _beneficiary Token purchaser\r\n     * @param _tokenAmount Number of tokens to be minted\r\n     */\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        //require(tokensMinted.add(_tokenAmount) <= tokensCap);\r\n        require(tokensMinted < tokensCap);\r\n\r\n        uint256 time_locked = _tokenAmount.mul(timeLockRate).div(100); \r\n        uint256 instant = _tokenAmount.sub(time_locked);\r\n\r\n        if (instant > 0) {\r\n            require(TokenSaleManager(managerAddr).mint(_beneficiary, instant));\r\n        }\r\n        if (time_locked > 0) {\r\n            require(TokenSaleManager(managerAddr).mintTimeLocked(\r\n                _beneficiary,\r\n                time_locked,\r\n                timeLockEnd\r\n            ));\r\n        }\r\n  \r\n        tokensMinted = tokensMinted.add(_tokenAmount);\r\n    }\r\n\r\n    /// @dev Overrides _forwardFunds to do nothing. \r\n    function _forwardFunds() internal {}\r\n\r\n    /// @dev Overrides _preValidatePurchase to check minimam contribution and initialization.\r\n    /// @param _beneficiary Token purchaser\r\n    /// @param _weiAmount weiAmount to pay\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n        require(isInitialized);\r\n        require(_weiAmount >= minAcceptableWei);\r\n    }\r\n\r\n    /**\r\n     * @dev Overridden in order to change the unit of rate with [nano toekns / ETH]\r\n     * instead of original [minimal unit of the token / wei].\r\n     * @param _weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n      return _weiAmount.mul(rate).div(10**18); //The unit of rate is [nano tokens / ETH].\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokensCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAcceptableWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"carryover\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLockEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLockRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canFinalize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"carryoverAmount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_poolAddr\",\"type\":\"address\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_tokensCap\",\"type\":\"uint256\"},{\"name\":\"_timeLockRate\",\"type\":\"uint256\"},{\"name\":\"_timeLockEnd\",\"type\":\"uint256\"},{\"name\":\"_carryover\",\"type\":\"bool\"},{\"name\":\"_minAcceptableWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000d93b2232000000000000000000000000008232875761b97a5242a4cffb94828dff5c101950000000000000000000000000aeb3d7d5a6b52619b36d3bd0b6794e75e65a92bd000000000000000000000000000000000000000000000000000000005ba82900000000000000000000000000000000000000000000000000000000005bbbef4400000000000000000000000000000000000000000000000001386af0c136960000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000006f05b59d3b20000","Library":"","SwarmSource":"bzzr://18a568d52216bd356ff6b36052b5f5452f0f0f7240f7a133f1474b895673ecae"}]}