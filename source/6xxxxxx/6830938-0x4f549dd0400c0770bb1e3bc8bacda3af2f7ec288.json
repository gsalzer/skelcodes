{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/VestingPrivateSale.sol\r\n\r\n/**\r\n * Vesting smart contract for the private sale. Vesting period is 18 months in total.\r\n * All 6 months 33% percent of the vested tokens will be released - step function.\r\n */\r\ncontract VestingPrivateSale is Ownable {\r\n\r\n    uint256 constant public sixMonth = 182 days;  \r\n    uint256 constant public twelveMonth = 365 days;  \r\n    uint256 constant public eighteenMonth = sixMonth + twelveMonth;\r\n\r\n    ERC20Basic public erc20Contract;\r\n\r\n    struct Locking {\r\n        uint256 bucket1;\r\n        uint256 bucket2;\r\n        uint256 bucket3;\r\n        uint256 startDate;\r\n    }\r\n\r\n    mapping(address => Locking) public lockingMap;\r\n\r\n    event ReleaseVestingEvent(address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Constructor. With the reference to the ERC20 contract\r\n     */\r\n    constructor(address _erc20) public {\r\n        require(AddressUtils.isContract(_erc20), \"Address is not a smart contract\");\r\n\r\n        erc20Contract = ERC20Basic(_erc20);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds vested tokens to this contract. ERC20 contract has assigned the tokens. \r\n     * @param _tokenHolder The token holder.\r\n     * @param _bucket1 The first bucket. Will be available after 6 months.\r\n     * @param _bucket2 The second bucket. Will be available after 12 months.\r\n     * @param _bucket3 The third bucket. Will be available after 18 months.\r\n     * @return True if accepted.\r\n     */\r\n    function addVested(\r\n        address _tokenHolder, \r\n        uint256 _bucket1, \r\n        uint256 _bucket2, \r\n        uint256 _bucket3\r\n    ) \r\n        public \r\n        returns (bool) \r\n    {\r\n        require(msg.sender == address(erc20Contract), \"ERC20 contract required\");\r\n        require(lockingMap[_tokenHolder].startDate == 0, \"Address is already vested\");\r\n\r\n        lockingMap[_tokenHolder].startDate = block.timestamp;\r\n        lockingMap[_tokenHolder].bucket1 = _bucket1;\r\n        lockingMap[_tokenHolder].bucket2 = _bucket2;\r\n        lockingMap[_tokenHolder].bucket3 = _bucket3;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of the total assigned tokens of a tokenholder.\r\n     * @param _tokenHolder The address to query the balance of.\r\n     * @return The total amount of owned tokens (vested + available). \r\n     */\r\n    function balanceOf(\r\n        address _tokenHolder\r\n    ) \r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n        return lockingMap[_tokenHolder].bucket1 + lockingMap[_tokenHolder].bucket2 + lockingMap[_tokenHolder].bucket3;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of currently available (unlocked) tokens. This amount can be unlocked. \r\n     * @param _tokenHolder The address to query the balance of.\r\n     * @return The total amount of owned and available tokens.\r\n     */\r\n    function availableBalanceOf(\r\n        address _tokenHolder\r\n    ) \r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n        uint256 startDate = lockingMap[_tokenHolder].startDate;\r\n        uint256 tokens = 0;\r\n        \r\n        if (startDate + sixMonth <= block.timestamp) {\r\n            tokens = lockingMap[_tokenHolder].bucket1;\r\n        }\r\n\r\n        if (startDate + twelveMonth <= block.timestamp) {\r\n            tokens = tokens + lockingMap[_tokenHolder].bucket2;\r\n        }\r\n\r\n        if (startDate + eighteenMonth <= block.timestamp) {\r\n            tokens = tokens + lockingMap[_tokenHolder].bucket3;\r\n        }\r\n\r\n        return tokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Releases unlocked tokens of the transaction sender. \r\n     * @dev This function will transfer unlocked tokens to the owner.\r\n     * @return The total amount of released tokens.\r\n     */\r\n    function releaseBuckets() \r\n        public \r\n        returns (uint256) \r\n    {\r\n        return _releaseBuckets(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin function.\r\n     * @dev Releases unlocked tokens of the _tokenHolder. \r\n     * @dev This function will transfer unlocked tokens to the _tokenHolder.\r\n     * @param _tokenHolder Address of the token owner to release tokens.\r\n     * @return The total amount of released tokens.\r\n     */\r\n    function releaseBuckets(\r\n        address _tokenHolder\r\n    ) \r\n        public \r\n        onlyOwner\r\n        returns (uint256) \r\n    {\r\n        return _releaseBuckets(_tokenHolder);\r\n    }\r\n\r\n    function _releaseBuckets(\r\n        address _tokenHolder\r\n    ) \r\n        private \r\n        returns (uint256) \r\n    {\r\n        require(lockingMap[_tokenHolder].startDate != 0, \"Is not a locked address\");\r\n        uint256 startDate = lockingMap[_tokenHolder].startDate;\r\n        uint256 tokens = 0;\r\n        \r\n        if (startDate + sixMonth <= block.timestamp) {\r\n            tokens = lockingMap[_tokenHolder].bucket1;\r\n            lockingMap[_tokenHolder].bucket1 = 0;\r\n        }\r\n\r\n        if (startDate + twelveMonth <= block.timestamp) {\r\n            tokens = tokens + lockingMap[_tokenHolder].bucket2;\r\n            lockingMap[_tokenHolder].bucket2 = 0;\r\n        }\r\n\r\n        if (startDate + eighteenMonth <= block.timestamp) {\r\n            tokens = tokens + lockingMap[_tokenHolder].bucket3;\r\n            lockingMap[_tokenHolder].bucket3 = 0;\r\n        }\r\n        \r\n        require(erc20Contract.transfer(_tokenHolder, tokens), \"Transfer failed\");\r\n        emit ReleaseVestingEvent(_tokenHolder, tokens);\r\n\r\n        return tokens;\r\n    }\r\n}\r\n\r\n// File: contracts/VestingTreasury.sol\r\n\r\n/**\r\n * Treasury vesting smart contract. Vesting period is over 36 months.\r\n * Tokens are locked for 6 months. After that releasing the tokens over 30 months with a linear function.\r\n */\r\ncontract VestingTreasury {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public sixMonths = 182 days;  \r\n    uint256 constant public thirtyMonths = 912 days;  \r\n\r\n    ERC20Basic public erc20Contract;\r\n\r\n    struct Locking {\r\n        uint256 startDate;      // date when the release process of the vesting will start. \r\n        uint256 initialized;    // initialized amount of tokens\r\n        uint256 released;       // already released tokens\r\n    }\r\n\r\n    mapping(address => Locking) public lockingMap;\r\n\r\n    event ReleaseVestingEvent(address indexed to, uint256 value);\r\n\r\n    /**\r\n    * @dev Constructor. With the reference to the ERC20 contract\r\n    */\r\n    constructor(address _erc20) public {\r\n        require(AddressUtils.isContract(_erc20), \"Address is not a smart contract\");\r\n\r\n        erc20Contract = ERC20Basic(_erc20);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds vested tokens to this contract. ERC20 contract has assigned the tokens. \r\n     * @param _tokenHolder The token holder.\r\n     * @param _value The amount of tokens to protect.\r\n     * @return True if accepted.\r\n     */\r\n    function addVested(\r\n        address _tokenHolder, \r\n        uint256 _value\r\n    ) \r\n        public \r\n        returns (bool) \r\n    {\r\n        require(msg.sender == address(erc20Contract), \"ERC20 contract required\");\r\n        require(lockingMap[_tokenHolder].startDate == 0, \"Address is already vested\");\r\n\r\n        lockingMap[_tokenHolder].startDate = block.timestamp + sixMonths;\r\n        lockingMap[_tokenHolder].initialized = _value;\r\n        lockingMap[_tokenHolder].released = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of the total currently vested and available tokens.\r\n     * @param _tokenHolder The address to query the balance of.\r\n     * @return The total amount of owned tokens (vested + available). \r\n     */\r\n    function balanceOf(\r\n        address _tokenHolder\r\n    ) \r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n        return lockingMap[_tokenHolder].initialized.sub(lockingMap[_tokenHolder].released);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of currently available (unlocked) tokens. This amount can be unlocked. \r\n     * @param _tokenHolder The address to query the balance of.\r\n     * @return The total amount of owned and available tokens.\r\n     */\r\n    function availableBalanceOf(\r\n        address _tokenHolder\r\n    ) \r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n        uint256 startDate = lockingMap[_tokenHolder].startDate;\r\n        \r\n        if (block.timestamp <= startDate) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 tmpAvailableTokens = 0;\r\n        if (block.timestamp >= startDate + thirtyMonths) {\r\n            tmpAvailableTokens = lockingMap[_tokenHolder].initialized;\r\n        } else {\r\n            uint256 timeDiff = block.timestamp - startDate;\r\n            uint256 totalBalance = lockingMap[_tokenHolder].initialized;\r\n\r\n            tmpAvailableTokens = totalBalance.mul(timeDiff).div(thirtyMonths);\r\n        }\r\n\r\n        uint256 availableTokens = tmpAvailableTokens.sub(lockingMap[_tokenHolder].released);\r\n        require(availableTokens <= lockingMap[_tokenHolder].initialized, \"Max value exceeded\");\r\n\r\n        return availableTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Releases unlocked tokens of the transaction sender. \r\n     * @dev This function will transfer unlocked tokens to the owner.\r\n     * @return The total amount of released tokens.\r\n     */\r\n    function releaseTokens() \r\n        public \r\n        returns (uint256) \r\n    {\r\n        require(lockingMap[msg.sender].startDate != 0, \"Sender is not a vested address\");\r\n\r\n        uint256 tokens = availableBalanceOf(msg.sender);\r\n\r\n        lockingMap[msg.sender].released = lockingMap[msg.sender].released.add(tokens);\r\n        require(lockingMap[msg.sender].released <= lockingMap[msg.sender].initialized, \"Max value exceeded\");\r\n\r\n        require(erc20Contract.transfer(msg.sender, tokens), \"Transfer failed\");\r\n        emit ReleaseVestingEvent(msg.sender, tokens);\r\n\r\n        return tokens;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/CappedToken.sol\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract CappedToken is MintableToken {\r\n\r\n  uint256 public cap;\r\n\r\n  constructor(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/LockedToken.sol\r\n\r\ncontract LockedToken is CappedToken {\r\n    bool public transferActivated = false;\r\n\r\n    event TransferActivatedEvent();\r\n\r\n    constructor(uint256 _cap) public CappedToken(_cap) {\r\n    }\r\n\r\n    /**\r\n     * @dev Admin function.\r\n     * @dev Activates the token transfer. This action cannot be undone. \r\n     * @dev This function should be called after the ICO. \r\n     * @return True if ok. \r\n     */\r\n    function activateTransfer() \r\n        public \r\n        onlyOwner\r\n        returns (bool) \r\n    {\r\n        require(transferActivated == false, \"Already activated\");\r\n\r\n        transferActivated = true;\r\n\r\n        emit TransferActivatedEvent();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(\r\n        address _to, \r\n        uint256 _value\r\n    ) \r\n        public \r\n        returns (bool) \r\n    {\r\n        require(transferActivated, \"Transfer is not activated\");\r\n        require(_to != address(this), \"Invalid _to address\");\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * @param _from The address which you want to send tokens from.\r\n     * @param _to The address which you want to transfer to.\r\n     * @param _value The amount of tokens to be transferred.\r\n     */\r\n    function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _value\r\n    ) \r\n        public \r\n        returns (bool) \r\n    {\r\n        require(transferActivated, \"TransferFrom is not activated\");\r\n        require(_to != address(this), \"Invalid _to address\");\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/AlprockzToken.sol\r\n\r\n/**\r\n * @title The Alprockz ERC20 Token\r\n */\r\ncontract AlprockzToken is LockedToken {\r\n    \r\n    string public constant name = \"AlpRockz\";\r\n    string public constant symbol = \"APZ\";\r\n    uint8 public constant decimals = 18;\r\n    VestingPrivateSale public vestingPrivateSale;\r\n    VestingTreasury public vestingTreasury;\r\n\r\n    constructor() public LockedToken(175 * 1000000 * (10 ** uint256(decimals))) {\r\n    }\r\n\r\n    /**\r\n     * @dev Admin function.\r\n     * @dev Inits the VestingPrivateSale functionality. \r\n     * @dev Precondition: VestingPrivateSale smart contract must be deployed!\r\n     * @param _vestingContractAddr The address of the vesting contract for the function 'mintPrivateSale(...)'.\r\n     * @return True if everything is ok.\r\n     */\r\n    function initMintVestingPrivateSale(\r\n        address _vestingContractAddr\r\n    ) \r\n        external\r\n        onlyOwner\r\n        returns (bool) \r\n    {\r\n        require(address(vestingPrivateSale) == address(0x0), \"Already initialized\");\r\n        require(address(this) != _vestingContractAddr, \"Invalid address\");\r\n        require(AddressUtils.isContract(_vestingContractAddr), \"Address is not a smart contract\");\r\n        \r\n        vestingPrivateSale = VestingPrivateSale(_vestingContractAddr);\r\n        require(address(this) == address(vestingPrivateSale.erc20Contract()), \"Vesting link address not match\");\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin function.\r\n     * @dev Inits the VestingTreasury functionality. \r\n     * @dev Precondition: VestingTreasury smart contract must be deployed!\r\n     * @param _vestingContractAddr The address of the vesting contract for the function 'mintTreasury(...)'.\r\n     * @return True if everything is ok.\r\n     */\r\n    function initMintVestingTreasury(\r\n        address _vestingContractAddr\r\n    ) \r\n        external\r\n        onlyOwner\r\n        returns (bool) \r\n    {\r\n        require(address(vestingTreasury) == address(0x0), \"Already initialized\");\r\n        require(address(this) != _vestingContractAddr, \"Invalid address\");\r\n        require(AddressUtils.isContract(_vestingContractAddr), \"Address is not a smart contract\");\r\n        \r\n        vestingTreasury = VestingTreasury(_vestingContractAddr);\r\n        require(address(this) == address(vestingTreasury.erc20Contract()), \"Vesting link address not match\");\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin function.\r\n     * @dev Bulk mint function to save gas. \r\n     * @dev both arrays requires to have the same length.\r\n     * @param _recipients List of recipients.\r\n     * @param _tokens List of tokens to assign to the recipients.\r\n     */\r\n    function mintArray(\r\n        address[] _recipients, \r\n        uint256[] _tokens\r\n    ) \r\n        external\r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n        require(_recipients.length == _tokens.length, \"Array length not match\");\r\n        require(_recipients.length <= 40, \"Too many recipients\");\r\n\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            require(super.mint(_recipients[i], _tokens[i]), \"Mint failed\");\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin function.\r\n     * @dev Bulk mintPrivateSale function to save gas. \r\n     * @dev both arrays are required to have the same length.\r\n     * @dev Vesting: 25% directly available, 25% after 6, 25% after 12 and 25% after 18 months. \r\n     * @param _recipients List of recipients.\r\n     * @param _tokens List of tokens to assign to the recipients.\r\n     */\r\n    function mintPrivateSale(\r\n        address[] _recipients, \r\n        uint256[] _tokens\r\n    ) \r\n        external \r\n        onlyOwner\r\n        returns (bool) \r\n    {\r\n        require(address(vestingPrivateSale) != address(0x0), \"Init required\");\r\n        require(_recipients.length == _tokens.length, \"Array length not match\");\r\n        require(_recipients.length <= 10, \"Too many recipients\");\r\n\r\n\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n\r\n            address recipient = _recipients[i];\r\n            uint256 token = _tokens[i];\r\n\r\n            uint256 first;\r\n            uint256 second; \r\n            uint256 third; \r\n            uint256 fourth;\r\n            (first, second, third, fourth) = splitToFour(token);\r\n\r\n            require(super.mint(recipient, first), \"Mint failed\");\r\n\r\n            uint256 totalVested = second + third + fourth;\r\n            require(super.mint(address(vestingPrivateSale), totalVested), \"Mint failed\");\r\n            require(vestingPrivateSale.addVested(recipient, second, third, fourth), \"Vesting failed\");\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin function.\r\n     * @dev Bulk mintTreasury function to save gas. \r\n     * @dev both arrays are required to have the same length.\r\n     * @dev Vesting: Tokens are locked for 6 months. After that the tokens are released in a linear way.\r\n     * @param _recipients List of recipients.\r\n     * @param _tokens List of tokens to assign to the recipients.\r\n     */\r\n    function mintTreasury(\r\n        address[] _recipients, \r\n        uint256[] _tokens\r\n    ) \r\n        external \r\n        onlyOwner\r\n        returns (bool) \r\n    {\r\n        require(address(vestingTreasury) != address(0x0), \"Init required\");\r\n        require(_recipients.length == _tokens.length, \"Array length not match\");\r\n        require(_recipients.length <= 10, \"Too many recipients\");\r\n\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n\r\n            address recipient = _recipients[i];\r\n            uint256 token = _tokens[i];\r\n\r\n            require(super.mint(address(vestingTreasury), token), \"Mint failed\");\r\n            require(vestingTreasury.addVested(recipient, token), \"Vesting failed\");\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function splitToFour(\r\n        uint256 _amount\r\n    ) \r\n        private \r\n        pure \r\n        returns (\r\n            uint256 first, \r\n            uint256 second, \r\n            uint256 third, \r\n            uint256 fourth\r\n        ) \r\n    {\r\n        require(_amount >= 4, \"Minimum amount\");\r\n\r\n        uint256 rest = _amount % 4;\r\n\r\n        uint256 quarter = (_amount - rest) / 4;\r\n\r\n        first = quarter + rest;\r\n        second = quarter;\r\n        third = quarter;\r\n        fourth = quarter;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"vestingTreasury\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vestingContractAddr\",\"type\":\"address\"}],\"name\":\"initMintVestingTreasury\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vestingContractAddr\",\"type\":\"address\"}],\"name\":\"initMintVestingPrivateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"mintPrivateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingPrivateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"mintTreasury\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferActivated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"mintArray\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferActivatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AlprockzToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2c43564375850836f8f13ff7e595b7310ec1639bd61e54daa9914e9711f04ca6"}]}