{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n*\r\n* https://mobstreet.me/bosses\r\n*     \r\n*       ____                   _____\r\n*     ██████╗  ██████╗ ███████╗███████╗       \r\n*     ██╔══██╗██╔═══██╗██╔════╝██╔════╝       \r\n*     ██████╔╝██║   ██║███████╗███████╗       \r\n*     ██╔══██╗██║   ██║╚════██║╚════██║       \r\n*     ██████╔╝╚██████╔╝███████║███████║       \r\n*     ╚═════╝  ╚═════╝ ╚══════╝╚══════╝       \r\n*                                             \r\n*      ██████╗ █████╗ ██████╗ ██████╗ ███████╗\r\n*     ██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝\r\n*     ██║     ███████║██████╔╝██║  ██║███████╗\r\n*     ██║     ██╔══██║██╔══██╗██║  ██║╚════██║\r\n*     ╚██████╗██║  ██║██║  ██║██████╔╝███████║\r\n*      ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚══════╝\r\n*                                            \r\n*\r\n* https://mobstreet.me/bosses\r\n*\r\n*/\r\n\r\ncontract BossCards {\r\n    /*=================================\r\n    =        MODIFIERS        =\r\n    =================================*/\r\n\r\n\r\n\r\n    modifier onlyOwner(){\r\n\r\n        require(msg.sender == dev);\r\n        _;\r\n    }\r\n\r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event oncardPurchase(\r\n        address customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 card,\r\n        uint256 newPrice\r\n    );\r\n\r\n    event onWithdraw(\r\n        address customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    // ERC20\r\n    event Transfer(\r\n        address from,\r\n        address to,\r\n        uint256 card\r\n    );\r\n\r\n\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"FOUNDER CARDS\";\r\n    string public symbol = \"MOBCARD\";\r\n\r\n    uint8 constant public mobDivRate = 10;\r\n    uint8 constant public ownerDivRate = 50;\r\n    uint8 constant public distDivRate = 40;\r\n    uint8 constant public referralRate = 5;\r\n    uint8 constant public decimals = 18;\r\n    uint public totalCardValue = 7.25 ether; // Make sure this is sum of constructor values\r\n    uint public precisionFactor = 9;\r\n\r\n\r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n\r\n    mapping(uint => address) internal cardOwner;\r\n    mapping(uint => uint) public cardPrice;\r\n    mapping(uint => uint) internal cardPreviousPrice;\r\n    mapping(address => uint) internal ownerAccounts;\r\n    mapping(uint => uint) internal totalCardDivs;\r\n\r\n    uint cardPriceIncrement = 110;\r\n    uint totalDivsProduced = 0;\r\n\r\n    uint public totalCards;\r\n\r\n    bool allowReferral = true;\r\n\r\n    address dev;\r\n    address bossman;\r\n    address mobDivsAddr;\r\n\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --\r\n    */\r\n    constructor()\r\n        public\r\n    {\r\n        dev = msg.sender;\r\n        bossman = 0x41FE3738B503cBaFD01C1Fd8DD66b7fE6Ec11b01;\r\n        mobDivsAddr = 0x5E38C0BD4E0dDB71E67B6693Ddc4c7D7b4f26b49;\r\n\r\n        totalCards = 12;\r\n\r\n        cardOwner[0] = bossman;\r\n        cardPrice[0] = 2 ether;\r\n        cardPreviousPrice[0] = cardPrice[0];\r\n\r\n        cardOwner[1] = dev;\r\n        cardPrice[1] = 1.5 ether;\r\n        cardPreviousPrice[1] = cardPrice[1];\r\n\r\n        cardOwner[2] = dev;\r\n        cardPrice[2] = 1 ether;\r\n        cardPreviousPrice[2] = cardPrice[2];\r\n\r\n        cardOwner[3] = dev;\r\n        cardPrice[3] = 0.9 ether;\r\n        cardPreviousPrice[3] = cardPrice[3];\r\n\r\n        cardOwner[4] = dev;\r\n        cardPrice[4] = 0.75 ether;\r\n        cardPreviousPrice[4] = cardPrice[4];\r\n\r\n        cardOwner[5] = dev;\r\n        cardPrice[5] = 0.50 ether;\r\n        cardPreviousPrice[5] = cardPrice[5];\r\n\r\n        cardOwner[6] = dev;\r\n        cardPrice[6] = 0.25 ether;\r\n        cardPreviousPrice[6] = cardPrice[6];\r\n\r\n        cardOwner[7] = dev;\r\n        cardPrice[7] = 0.12 ether;\r\n        cardPreviousPrice[7] = cardPrice[7];\r\n\r\n        cardOwner[8] = dev;\r\n        cardPrice[8] = 0.08 ether;\r\n        cardPreviousPrice[8] = cardPrice[8];\r\n\r\n        cardOwner[9] = dev;\r\n        cardPrice[9] = 0.05 ether;\r\n        cardPreviousPrice[9] = cardPrice[9];\r\n\r\n        cardOwner[10] = dev;\r\n        cardPrice[10] = 0.05 ether;\r\n        cardPreviousPrice[10] = cardPrice[10];\r\n\r\n        cardOwner[11] = dev;\r\n        cardPrice[11] = 0.05 ether;\r\n        cardPreviousPrice[11] = cardPrice[11];\r\n\r\n    }\r\n\r\n    function addtotalCardValue(uint _new, uint _old)\r\n    internal\r\n    {\r\n        uint newPrice = SafeMath.div(SafeMath.mul(_new,cardPriceIncrement),100);\r\n        totalCardValue = SafeMath.add(totalCardValue, SafeMath.sub(newPrice,_old));\r\n    }\r\n\r\n    function buy(uint _card, address _referrer)\r\n        public\r\n        payable\r\n\r\n    {\r\n        require(_card < totalCards);\r\n        require(msg.value == cardPrice[_card]);\r\n        require(msg.sender != cardOwner[_card]);\r\n\r\n        addtotalCardValue(msg.value, cardPreviousPrice[_card]);\r\n\r\n        uint _newPrice = SafeMath.div(SafeMath.mul(msg.value, cardPriceIncrement), 100);\r\n\r\n         //Determine the total dividends\r\n        uint _baseDividends = SafeMath.sub(msg.value, cardPreviousPrice[_card]);\r\n\r\n        totalDivsProduced = SafeMath.add(totalDivsProduced, _baseDividends);\r\n\r\n        uint _mobDividends = SafeMath.div(SafeMath.mul(_baseDividends, mobDivRate),100);\r\n\r\n        uint _ownerDividends = SafeMath.div(SafeMath.mul(_baseDividends, ownerDivRate), 100);\r\n\r\n        totalCardDivs[_card] = SafeMath.add(totalCardDivs[_card], _ownerDividends);\r\n\r\n        _ownerDividends = SafeMath.add(_ownerDividends, cardPreviousPrice[_card]);\r\n\r\n        uint _distDividends = SafeMath.div(SafeMath.mul(_baseDividends, distDivRate), 100);\r\n\r\n        if (allowReferral && (_referrer != msg.sender) && (_referrer != 0x0000000000000000000000000000000000000000)) {\r\n\r\n            uint _referralDividends = SafeMath.div(SafeMath.mul(_baseDividends, referralRate), 100);\r\n\r\n            _distDividends = SafeMath.sub(_distDividends, _referralDividends);\r\n\r\n            ownerAccounts[_referrer] = SafeMath.add(ownerAccounts[_referrer], _referralDividends);\r\n        }\r\n\r\n\r\n        //distribute dividends to accounts\r\n        address _previousOwner = cardOwner[_card];\r\n        address _newOwner = msg.sender;\r\n\r\n        ownerAccounts[_previousOwner] = SafeMath.add(ownerAccounts[_previousOwner], _ownerDividends);\r\n\r\n        mobDivsAddr.transfer(_mobDividends);\r\n\r\n        distributeDivs(_distDividends);\r\n\r\n        //Increment the card Price\r\n        cardPreviousPrice[_card] = msg.value;\r\n        cardPrice[_card] = _newPrice;\r\n        cardOwner[_card] = _newOwner;\r\n\r\n        emit oncardPurchase(msg.sender, msg.value, _card, SafeMath.div(SafeMath.mul(msg.value, cardPriceIncrement), 100));\r\n    }\r\n\r\n\r\n    function distributeDivs(uint _distDividends) internal{\r\n\r\n            for (uint _card=0; _card < totalCards; _card++){\r\n\r\n                uint _divShare = SafeMath.div(SafeMath.div(SafeMath.mul(cardPreviousPrice[_card], 10 ** (precisionFactor + 1)), totalCardValue) + 5, 10);\r\n                uint _cardDivs = SafeMath.div(SafeMath.mul(_distDividends, _divShare), 10 ** precisionFactor);\r\n\r\n                ownerAccounts[cardOwner[_card]] += _cardDivs;\r\n\r\n                totalCardDivs[_card] = SafeMath.add(totalCardDivs[_card], _cardDivs);\r\n            }\r\n        }\r\n\r\n\r\n    function withdraw()\r\n\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        require(ownerAccounts[_customerAddress] >= 0.001 ether);\r\n\r\n        uint _dividends = ownerAccounts[_customerAddress];\r\n        ownerAccounts[_customerAddress] = 0;\r\n\r\n        _customerAddress.transfer(_dividends);\r\n\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n\r\n\r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\r\n    function setName(string _name)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n\r\n\r\n    function setSymbol(string _symbol)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setcardPrice(uint _card, uint _price)   //Allow the changing of a card price owner if the dev owns it\r\n        onlyOwner()\r\n        public\r\n    {\r\n        require(cardOwner[_card] == dev);\r\n        cardPrice[_card] = _price;\r\n    }\r\n\r\n    function addNewcard(uint _price)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        cardPrice[totalCards-1] = _price;\r\n        cardOwner[totalCards-1] = dev;\r\n        totalCardDivs[totalCards-1] = 0;\r\n        totalCards = totalCards + 1;\r\n    }\r\n\r\n    function setAllowReferral(bool _allowReferral)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        allowReferral = _allowReferral;\r\n    }\r\n\r\n\r\n\r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n\r\n\r\n    function getMyBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return ownerAccounts[msg.sender];\r\n    }\r\n\r\n    function getOwnerBalance(address _cardOwner)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return ownerAccounts[_cardOwner];\r\n    }\r\n\r\n    function getcardPrice(uint _card)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(_card < totalCards);\r\n        return cardPrice[_card];\r\n    }\r\n\r\n    function getcardOwner(uint _card)\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        require(_card < totalCards);\r\n        return cardOwner[_card];\r\n    }\r\n\r\n    function gettotalCardDivs(uint _card)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(_card < totalCards);\r\n        return totalCardDivs[_card];\r\n    }\r\n\r\n    function getTotalDivsProduced()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return totalDivsProduced;\r\n    }\r\n\r\n    function getCardDivShare(uint _card)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(_card < totalCards);\r\n        return SafeMath.div(SafeMath.div(SafeMath.mul(cardPreviousPrice[_card], 10 ** (precisionFactor + 1)), totalCardValue) + 5, 10);\r\n    }\r\n\r\n    function getCardDivs(uint  _card, uint _amt)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        uint _share = getCardDivShare(_card);\r\n        return SafeMath.div(SafeMath.mul( _share, _amt), 10 ** precisionFactor);\r\n    }\r\n\r\n    function gettotalCardValue()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n\r\n        return totalCardValue;\r\n    }\r\n\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address (this).balance;\r\n    }\r\n\r\n    function gettotalCards()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return totalCards;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"}],\"name\":\"getCardDivShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"}],\"name\":\"getcardPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"}],\"name\":\"getcardOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setcardPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"},{\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"getCardDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"}],\"name\":\"gettotalCardDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowReferral\",\"type\":\"bool\"}],\"name\":\"setAllowReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardOwner\",\"type\":\"address\"}],\"name\":\"getOwnerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addNewcard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"precisionFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalDivsProduced\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCardValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gettotalCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gettotalCardValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mobDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"card\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"oncardPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"card\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BossCards","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a953a97da0b0329f6cf098901a2b57a2cde9c27a283de91fb94b8a60f58ec90f"}]}