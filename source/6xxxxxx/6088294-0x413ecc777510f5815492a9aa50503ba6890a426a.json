{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ZTHInterface {\r\n    function buyAndSetDivPercentage(address _referredBy, uint8 _divChoice, string providedUnhashedPass) public payable returns (uint);\r\n    function balanceOf(address who) public view returns (uint);\r\n    function transfer(address _to, uint _value)     public returns (bool);\r\n    function transferFrom(address _from, address _toAddress, uint _amountOfTokens) public returns (bool);\r\n    function exit() public;\r\n    function sell(uint amountOfTokens) public;\r\n    function withdraw(address _recipient) public;\r\n}\r\n\r\n// The Zethr Token Bankrolls aren't quite done being tested yet,\r\n// so here is a bankroll shell that we are using in the meantime.\r\n\r\n// Will store tokens & divs @ the set div% until the token bankrolls are fully tested & battle ready\r\ncontract ZethrTokenBankrollShell {\r\n    // Setup Zethr\r\n    address ZethrAddress = address(0xD48B633045af65fF636F3c6edd744748351E020D);\r\n    ZTHInterface ZethrContract = ZTHInterface(ZethrAddress);\r\n    \r\n    address private owner;\r\n    \r\n    // Read-only after constructor\r\n    uint8 public divRate;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor (uint8 thisDivRate) public {\r\n        owner = msg.sender;\r\n        divRate = thisDivRate;\r\n    }\r\n    \r\n    // Accept ETH\r\n    function () public payable {}\r\n    \r\n    // Buy tokens at this contract's divRate\r\n    function buyTokens() public onlyOwner {\r\n        ZethrContract.buyAndSetDivPercentage(address(0x0), divRate, \"0x0\");\r\n    }\r\n    \r\n    // Transfer tokens to newTokenBankroll\r\n    // Transfer dividends to master bankroll\r\n    function transferTokensAndDividends(address newTokenBankroll, address masterBankroll) public onlyOwner {\r\n        // Withdraw divs to new masterBankroll\r\n        ZethrContract.withdraw(masterBankroll);\r\n        \r\n        // Transfer tokens to newTokenBankroll\r\n        ZethrContract.transfer(newTokenBankroll, ZethrContract.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newTokenBankroll\",\"type\":\"address\"},{\"name\":\"masterBankroll\",\"type\":\"address\"}],\"name\":\"transferTokensAndDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"thisDivRate\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ZethrTokenBankrollShell","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000002","Library":"","SwarmSource":"bzzr://2e580a048edb71ef40f3c40fefa6ab5af4309c44de542ecf1d8b72b9124e1904"}]}