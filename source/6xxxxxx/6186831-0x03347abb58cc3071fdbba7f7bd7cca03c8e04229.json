{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract CompanyShare {\r\n    using SafeMath for *;\r\n\r\n    mapping (address => uint256) public pIDxAddr_;          // (addr => pID) returns player id by address\r\n    mapping (uint256 => CompanySharedatasets.Player) public team_;          // (team => fees) fee distribution by team\r\n\r\n    /**\r\n     * @dev prevents contracts from interacting with fomo3d\r\n     */\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        address first = 0x7ce07aa2fc356fa52f622c1f4df1e8eaad7febf0;\r\n        address second = 0x6b5d2ba1691e30376a394c13e38f48e25634724f;\r\n        address third = 0x459b5286e28d0dd452af4f38ffed4d302fc833c8;\r\n        address fourth = 0xd775c5063bef4eda77a21646a6880494d9a1156b;\r\n\r\n        //creatTeam\r\n        team_[1] = CompanySharedatasets.Player(first,0, 500);\r\n        pIDxAddr_[first] = 1;\r\n        team_[2] = CompanySharedatasets.Player(second,0, 250);\r\n        pIDxAddr_[second] = 2;\r\n        team_[3] = CompanySharedatasets.Player(third,0, 125);\r\n        pIDxAddr_[third] = 3;\r\n        team_[4] = CompanySharedatasets.Player(fourth,0, 125);\r\n        pIDxAddr_[fourth] = 4;\r\n\t}\r\n\r\n    /**\r\n     * @dev emergency buy uses last stored affiliate ID and team snek\r\n     */\r\n    function()\r\n        public\r\n        payable\r\n    {\r\n        uint256 _eth = msg.value;\r\n        //giveTeam Gen\r\n        giveGen(_eth);\r\n    }\r\n\r\n    function deposit()\r\n        public\r\n        payable\r\n        returns(bool)\r\n    {\r\n        uint256 _eth = msg.value;\r\n        //giveTeam Gen\r\n        giveGen(_eth);\r\n        return true;\r\n    }\r\n\r\n\tfunction giveGen(uint256 _eth)\r\n\t\tprivate\r\n\t\treturns(uint256)\r\n    {\r\n        uint256 _genFirst = _eth.mul(team_[1].percent) /1000;\r\n        uint256 _genSecond = _eth.mul(team_[2].percent) /1000;\r\n        uint256 _genThird = _eth.mul(team_[3].percent) /1000;\r\n        uint256 _genFourth = _eth.sub(_genFirst).sub(_genSecond).sub(_genThird);\r\n        //give gen\r\n        team_[1].gen = _genFirst.add(team_[1].gen);\r\n        team_[2].gen = _genSecond.add(team_[2].gen);\r\n        team_[3].gen = _genThird.add(team_[3].gen);\r\n        team_[4].gen = _genFourth.add(team_[4].gen);\r\n    }\r\n\r\n        /**\r\n     * @dev withdraws all of your earnings.\r\n     * -functionhash- 0x3ccfd60b\r\n     */\r\n    function withdraw()\r\n        isHuman()\r\n        public\r\n    {\r\n        // fetch player ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        require(_pID != 0, \"sorry not team\");\r\n        // setup temp var for player eth\r\n        uint256 _eth;\r\n        // get their earnings\r\n        _eth = withdrawEarnings(_pID);\r\n        team_[_pID].addr.transfer(_eth);\r\n    }\r\n\r\n        /**\r\n     * @dev adds up unmasked earnings, & vault earnings, sets them all to 0\r\n     * @return earnings in wei format\r\n     */\r\n    function withdrawEarnings(uint256 _pID)\r\n        private\r\n        returns(uint256)\r\n    {\r\n\r\n        // from vaults\r\n        uint256 _earnings = team_[_pID].gen;\r\n        if (_earnings > 0)\r\n        {\r\n            team_[_pID].gen = 0;\r\n        }\r\n\r\n        return(_earnings);\r\n    }\r\n\r\n    function getGen()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(uint256)\r\n    {\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        require(_pID != 0, \"sorry not in team\");\r\n        uint256 _earnings = team_[_pID].gen;\r\n        return _earnings;\r\n    }\r\n    \r\n    \r\n     function destroy() public{ // so funds not locked in contract forever\r\n         require(msg.sender == 0x7ce07aa2fc356fa52f622c1f4df1e8eaad7febf0, \"sorry not the admin\");\r\n         suicide(0x7ce07aa2fc356fa52f622c1f4df1e8eaad7febf0); // send funds to organizer\r\n     }\r\n}\r\n\r\n\r\n//==============================================================================\r\n//   __|_ _    __|_ _  .\r\n//  _\\ | | |_|(_ | _\\  .\r\n//==============================================================================\r\nlibrary CompanySharedatasets {\r\n    //compressedData key\r\n    struct Player {\r\n        address addr;   // player address\r\n        uint256 gen;    // general vault\r\n        uint256 percent;    // gen percent vault\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr\r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"team_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"CompanyShare","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6341ee81a15bce872683d2e22bafeabf2716dc3bab800a45e3f48aa38ce6b319"}]}