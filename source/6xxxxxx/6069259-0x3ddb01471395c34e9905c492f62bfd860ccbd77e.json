{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public constant returns (string) {}\r\n    function symbol() public constant returns (string) {}\r\n    function decimals() public constant returns (uint8) {}\r\n    function totalSupply() public constant returns (uint256) {}\r\n    function balanceOf(address _owner) public constant returns (uint256) { _owner; }\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) { _owner; _spender; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n\r\n    /*\r\n        @dev constructor\r\n    */\r\n    constructor (address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    /*\r\n        @dev allows execution by the owner only\r\n    */\r\n    modifier ownerOnly {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /*\r\n        @dev allows transferring the contract ownership\r\n        the new owner still needs to accept the transfer\r\n        can only be called by the contract owner\r\n\r\n        @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /*\r\n        @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Utils {\r\n    /*\r\n        @dev constructor\r\n    */\r\n    constructor() public {\r\n    }\r\n\r\n    /*\r\n        @dev verifies that an amount is greater than zero\r\n    */\r\n    modifier greaterThanZero(uint256 _amount) {\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    /*\r\n        @dev validates an address - currently only checks that it isn't null\r\n    */\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n        _;\r\n    }\r\n\r\n    /*\r\n        @dev verifies that the address is different than this contract address\r\n    */\r\n    modifier notThis(address _address) {\r\n        require(_address != address(this));\r\n        _;\r\n    }\r\n\r\n    /*\r\n        @dev verifies that the string is not empty\r\n    */\r\n    modifier notEmpty(string _str) {\r\n        require(bytes(_str).length > 0);\r\n        _;\r\n    }\r\n\r\n    // Overflow protected math functions\r\n\r\n    /*\r\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\r\n\r\n        @param _x   value 1\r\n        @param _y   value 2\r\n\r\n        @return sum\r\n    */\r\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        assert(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    /*\r\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\r\n\r\n        @param _x   minuend\r\n        @param _y   subtrahend\r\n\r\n        @return difference\r\n    */\r\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        require(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n\r\n    /*\r\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\r\n\r\n        @param _x   factor 1\r\n        @param _y   factor 2\r\n\r\n        @return product\r\n    */\r\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x * _y;\r\n        assert(_x == 0 || z / _x == _y);\r\n        return z;\r\n    }\r\n}\r\n\r\ncontract WithdrawalConfigurations is Ownable, Utils {\r\n    \r\n    /*\r\n     *  Members\r\n     */\r\n\r\n    uint public      minWithdrawalCoolingPeriod;\r\n    uint constant    maxWithdrawalCoolingPeriod = 12 * 1 weeks; // = 14515200 seconds\r\n    uint public      withdrawalCoolingPeriod;\r\n   \r\n    /*\r\n     *  Events\r\n     */\r\n    event WithdrawalRequested(address _userWithdrawalAccount, address _sender);\r\n    event SetWithdrawalCoolingPeriod(uint _withdrawalCoolingPeriod);\r\n\r\n    /*\r\n        @dev constructor\r\n\r\n        @param _withdrawalCoolingPeriod       The cooling period \r\n        @param _minWithdrawalCoolingPeriod    The minimum time from withdraw request to allow performing it\r\n\r\n    */\r\n    constructor (uint _withdrawalCoolingPeriod, uint _minWithdrawalCoolingPeriod) \r\n        Ownable(msg.sender)\r\n        public\r\n        {\r\n            require(_withdrawalCoolingPeriod <= maxWithdrawalCoolingPeriod &&\r\n                    _withdrawalCoolingPeriod >= _minWithdrawalCoolingPeriod);\r\n            require(_minWithdrawalCoolingPeriod >= 0);\r\n\r\n            minWithdrawalCoolingPeriod = _minWithdrawalCoolingPeriod;\r\n            withdrawalCoolingPeriod = _withdrawalCoolingPeriod;\r\n       }\r\n\r\n    /*\r\n        @dev Get the withdrawalCoolingPeriod parameter value. \r\n   \r\n     */\r\n    function getWithdrawalCoolingPeriod() external view returns(uint) {\r\n        return withdrawalCoolingPeriod;\r\n    }\r\n\r\n    /*\r\n        @dev Set the withdrawalCoolingPeriod parameter value. \r\n\r\n        @param _withdrawalCoolingPeriod   Cooling period in seconds\r\n     */\r\n    function setWithdrawalCoolingPeriod(uint _withdrawalCoolingPeriod)\r\n        ownerOnly()\r\n        public\r\n        {\r\n            require (_withdrawalCoolingPeriod <= maxWithdrawalCoolingPeriod &&\r\n                     _withdrawalCoolingPeriod >= minWithdrawalCoolingPeriod);\r\n            withdrawalCoolingPeriod = _withdrawalCoolingPeriod;\r\n            emit SetWithdrawalCoolingPeriod(_withdrawalCoolingPeriod);\r\n    }\r\n\r\n    /*\r\n        @dev Fire the WithdrawalRequested event. \r\n\r\n        @param _userWithdrawalAccount   User withdrawal account address\r\n        @param _sender                  The user account, activating this request\r\n     */\r\n    function emitWithrawalRequestEvent(address _userWithdrawalAccount, address _sender) \r\n        public\r\n        {\r\n            emit WithdrawalRequested(_userWithdrawalAccount, _sender);\r\n    }\r\n}\r\n\r\nlibrary SmartWalletLib {\r\n\r\n    /*\r\n     *  Structs\r\n     */ \r\n    struct Wallet {\r\n        address operatorAccount;\r\n        address userWithdrawalAccount;\r\n        address feesAccount;\r\n        uint    withdrawAllowedAt; //In Seconds\r\n    }\r\n\r\n    /*\r\n     *  Members\r\n     */\r\n    string constant VERSION = \"1.1\";\r\n    //The below is a sample address of a deployed WithdrawalConfigurations contract.\r\n    //If changed, need to change in the tests as well.\r\n    address constant withdrawalConfigurationsContract = 0xe9f25cc107e6435ccbe0d5e09331db4e42aaefb9; \r\n    \r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier addressNotSet(address _address) {\r\n        require(_address == 0);\r\n        _;\r\n    }\r\n\r\n    modifier operatorOnly(address _operatorAccount) {\r\n        require(msg.sender == _operatorAccount);\r\n        _;\r\n    }\r\n\r\n    modifier userWithdrawalAccountOnly(Wallet storage _self) {\r\n        require(msg.sender == _self.userWithdrawalAccount);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event TransferToBackupAccount(address _token, address _backupAccount, uint _amount);\r\n    event TransferToUserWithdrawalAccount(address _token, address _userWithdrawalAccount, uint _amount, address _feesToken, address _feesAccount, uint _fee);\r\n    event SetUserWithdrawalAccount(address _userWithdrawalAccount);\r\n    event PerformUserWithdraw(address _token, address _userWithdrawalAccount, uint _amount);\r\n    \r\n    /*\r\n        @dev Initialize the wallet with the operator and backupAccount address\r\n        \r\n        @param _self                        Wallet storage\r\n        @param _operator                    The operator account\r\n        @param _feesAccount                 The account to transfer fees to\r\n    */\r\n    function initWallet(Wallet storage _self, address _operator, address _feesAccount) \r\n            public\r\n            validAddress(_operator)\r\n            validAddress(_feesAccount)\r\n            {\r\n        \r\n                _self.operatorAccount = _operator;\r\n                _self.feesAccount = _feesAccount;\r\n    }\r\n\r\n    /*\r\n        @dev Setting the account of the user to send funds to. \r\n        \r\n        @param _self                        Wallet storage\r\n        @param _userWithdrawalAccount       The user account to withdraw funds to\r\n    */\r\n    function setUserWithdrawalAccount(Wallet storage _self, address _userWithdrawalAccount) \r\n            public\r\n            operatorOnly(_self.operatorAccount)\r\n            validAddress(_userWithdrawalAccount)\r\n            addressNotSet(_self.userWithdrawalAccount)\r\n            {\r\n        \r\n                _self.userWithdrawalAccount = _userWithdrawalAccount;\r\n                emit SetUserWithdrawalAccount(_userWithdrawalAccount);\r\n    }\r\n    \r\n    /*\r\n        @dev Withdraw funds to the user account. \r\n\r\n        @param _self                Wallet storage\r\n        @param _token               The ERC20 token the owner withdraws from \r\n        @param _amount              Amount to transfer  \r\n        @param _fee                 Fee to transfer   \r\n    */\r\n    function transferToUserWithdrawalAccount(Wallet storage _self, IERC20Token _token, uint _amount, IERC20Token _feesToken, uint _fee) \r\n            public \r\n            operatorOnly(_self.operatorAccount)\r\n            validAddress(_self.userWithdrawalAccount)\r\n            {\r\n\r\n                if (_fee > 0) {        \r\n                    _feesToken.transfer(_self.feesAccount, _fee); \r\n                }       \r\n                \r\n                _token.transfer(_self.userWithdrawalAccount, _amount);\r\n                emit TransferToUserWithdrawalAccount(_token, _self.userWithdrawalAccount, _amount,  _feesToken, _self.feesAccount, _fee);   \r\n        \r\n    }\r\n\r\n    /*\r\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\r\n\r\n        @param _x   value 1\r\n        @param _y   value 2\r\n\r\n        @return sum\r\n    */\r\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        assert(z >= _x);\r\n        return z;\r\n    }\r\n    \r\n    /*\r\n        @dev user request withdraw. \r\n\r\n        @param _self                Wallet storage\r\n        @param _token               The ERC20 token the owner withdraws from \r\n        \r\n    */\r\n    function requestWithdraw(Wallet storage _self) \r\n        public \r\n        userWithdrawalAccountOnly(_self)\r\n        {\r\n            \r\n            WithdrawalConfigurations withdrawalConfigurations = WithdrawalConfigurations(withdrawalConfigurationsContract);\r\n            \r\n            _self.withdrawAllowedAt = safeAdd(now, withdrawalConfigurations.getWithdrawalCoolingPeriod());\r\n\r\n            withdrawalConfigurations.emitWithrawalRequestEvent(_self.userWithdrawalAccount, msg.sender);\r\n    }\r\n\r\n    /*\r\n        @dev user perform withdraw. \r\n\r\n        @param _self                Wallet storage\r\n        @param _token               The ERC20 token the owner withdraws from \r\n        \r\n    */\r\n    function performUserWithdraw(Wallet storage _self, IERC20Token _token)\r\n        public\r\n        userWithdrawalAccountOnly(_self)\r\n        {\r\n            require(_self.withdrawAllowedAt != 0 &&\r\n                    _self.withdrawAllowedAt <= now );\r\n\r\n            uint userBalance = _token.balanceOf(this);\r\n            _token.transfer(_self.userWithdrawalAccount, userBalance);\r\n            emit PerformUserWithdraw(_token, _self.userWithdrawalAccount, userBalance);   \r\n        }\r\n\r\n}\r\n\r\ncontract SmartWallet {\r\n\r\n    /*\r\n     *  Members\r\n     */\r\n    using SmartWalletLib for SmartWalletLib.Wallet;\r\n    SmartWalletLib.Wallet public wallet;\r\n       \r\n   // Wallet public wallet;\r\n    /*\r\n     *  Events\r\n     */\r\n    event TransferToBackupAccount(address _token, address _backupAccount, uint _amount);\r\n    event TransferToUserWithdrawalAccount(address _token, address _userWithdrawalAccount, uint _amount, address _feesToken, address _feesAccount, uint _fee);\r\n    event SetUserWithdrawalAccount(address _userWithdrawalAccount);\r\n    event PerformUserWithdraw(address _token, address _userWithdrawalAccount, uint _amount);\r\n     \r\n    /*\r\n        @dev constructor\r\n\r\n        @param _backupAccount       A default operator's account to send funds to, in cases where the user account is\r\n                                    unavailable or lost\r\n        @param _operator            The contract operator address\r\n        @param _feesAccount         The account to transfer fees to \r\n\r\n    */\r\n    constructor (address _operator, address _feesAccount) public {\r\n        wallet.initWallet(_operator, _feesAccount);\r\n    }\r\n\r\n    /*\r\n        @dev Setting the account of the user to send funds to. \r\n        \r\n        @param _userWithdrawalAccount       The user account to withdraw funds to\r\n        \r\n    */\r\n    function setUserWithdrawalAccount(address _userWithdrawalAccount) public {\r\n        wallet.setUserWithdrawalAccount(_userWithdrawalAccount);\r\n    }\r\n\r\n    /*\r\n        @dev Withdraw funds to the user account. \r\n\r\n\r\n        @param _token               The ERC20 token the owner withdraws from \r\n        @param _amount              Amount to transfer    \r\n    */\r\n    function transferToUserWithdrawalAccount(IERC20Token _token, uint _amount, IERC20Token _feesToken, uint _fee) public {\r\n        wallet.transferToUserWithdrawalAccount(_token, _amount, _feesToken, _fee);\r\n    }\r\n\r\n    /*\r\n        @dev Allows the user to request a withdraw of his/her placements\r\n        \r\n        @param _token               The ERC20 token the user wishes to withdraw from \r\n    */\r\n    function requestWithdraw() public {\r\n        wallet.requestWithdraw();\r\n    }\r\n\r\n    /*\r\n        @dev Allows the user to perform the requestWithdraw operation\r\n        \r\n        @param _token               The ERC20 token the user withdraws from \r\n    */\r\n    function performUserWithdraw(IERC20Token _token) public {\r\n        wallet.performUserWithdraw(_token);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_feesToken\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"transferToUserWithdrawalAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"operatorAccount\",\"type\":\"address\"},{\"name\":\"userWithdrawalAccount\",\"type\":\"address\"},{\"name\":\"feesAccount\",\"type\":\"address\"},{\"name\":\"withdrawAllowedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"performUserWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userWithdrawalAccount\",\"type\":\"address\"}],\"name\":\"setUserWithdrawalAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_feesAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_backupAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferToBackupAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userWithdrawalAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_feesToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_feesAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"TransferToUserWithdrawalAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_userWithdrawalAccount\",\"type\":\"address\"}],\"name\":\"SetUserWithdrawalAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userWithdrawalAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PerformUserWithdraw\",\"type\":\"event\"}]","ContractName":"SmartWallet","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000aa1aeffe8bf1a7470558b31f35cb6ec7faf0679f000000000000000000000000aa1aeffe8bf1a7470558b31f35cb6ec7faf0679f","Library":"SmartWalletLib:7453841383579b92210e6564AAF86148717e466f","SwarmSource":"bzzr://1bb0520797648e96d9a6a5cfd1a1dcf9e44a31dd9f830dc0c9395270497f8d1c"}]}