{"status":"1","message":"OK","result":[{"SourceCode":"// Ethertote - Eth Raised from Token Sale\r\n//\r\n// The following contract automatically distributes the Eth raised from the\r\n// token sale.\r\n\r\n// 1. 50% of the Eth raised will go into a \"development\" ethereum wallet, immediately\r\n// accessible to the team, to be used for marketing, promotion, development, \r\n// running costs, exchange listing fees, bug bounties and other aspects of \r\n// running the company.\r\n//\r\n// 2. 25% of the Eth will go into a \"Tote Liquidator\" ethereum wallet, which will be\r\n// used by the team purely to to liquidate the ethertote over the the opening\r\n// 12 weeks. It will be very easy to see the transactions on Etherscan as \r\n// they will match the CryptoPot smart contracts that make up the Ethertote\r\n// ecosystem.\r\n//\r\n// 3. 25% of the Eth will go into a time-locked smart contract called \"Team Eth\"\r\n// which will be available to claim by the Ethertote team over a 12-month period\r\n//\r\n//\r\n// Note that ALL Eth raised from the token sale will initially go to this \r\n// smart contract\r\n// ----------------------------------------------------------------------------\r\n\r\npragma solidity 0.4.24;\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// SafeMath Library \r\n///////////////////////////////////////////////////////////////////////////////\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Main contract\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract EthRaised {\r\n    using SafeMath for uint256;\r\n\r\n    address public thisContractAddress;\r\n    address public admin;\r\n    \r\n    // time contract was deployed\r\n    uint public createdAt;\r\n    \r\n    // address of the Ethertote Development wallet\r\n    address public ethertoteDevelopmentWallet = \r\n    0x1a3c1ca46c58e9b140485A9B0B740d42aB3B4a26;\r\n    \r\n    // address of the ToteLiquidator wallet\r\n    address public toteLiquidatorWallet = \r\n    0x8AF2dA3182a3dae379d51367a34480Bd5d04F4e2;\r\n    \r\n    // address of the TeamEth time-locked contract\r\n    address public teamEthContract = \r\n    0x67ed24A0dB2Ae01C4841Cd8aef1DA519B588E2B2;\r\n    \r\n\r\n    // ensure call to each function is only made once\r\n    bool public ethertoteDevelopmentTransferComplete;\r\n    bool public toteLiquidatorTransferComplete;\r\n    bool public teamEthTransferComplete;\r\n\r\n\r\n    \r\n    // amount of eth that will be distributed\r\n    uint public ethToBeDistributed;\r\n    \r\n    // ensure the function is called once\r\n    bool public ethToBeDistributedSet;\r\n\r\n///////////////////////////////////////////////////////////////////////////////    \r\n// percentages to be sent\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n    // 50% to the development wallet\r\n    // 100/50 = 2\r\n    uint public divForEthertoteDevelopmentWallet = 2;\r\n    \r\n    // 25% to the liquidator wallet\r\n    // 100/25 = 4\r\n    uint public divForEthertoteLiquidatorWallet = 4;\r\n    \r\n    // 25% to the TeamEth Smart Contract\r\n    // 100/25 = 4\r\n    uint public divForTeamEthContract = 4;\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n    \r\n    // EVENTS\r\n    event Received(uint256);\r\n    event SentToTeamEth(uint256);\r\n    event SentToLiquidator(uint256);\r\n    event SentToDev(uint256);\r\n    \r\n    // MODIFIER\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    constructor () public {\r\n        admin = msg.sender;\r\n        thisContractAddress = address(this);\r\n        createdAt = now;\r\n    }\r\n\r\n    // fallback to store all the ether sent to this address\r\n    function() payable public { \r\n    }\r\n    \r\n    function thisContractBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    \r\n    // declare the token sale is complete, reference the balance, and make\r\n    // the necessary transfers\r\n    function _A_tokenSaleCompleted() onlyAdmin public {\r\n        require(ethToBeDistributedSet == false);\r\n        ethToBeDistributed = address(this).balance;\r\n        ethToBeDistributedSet = true;\r\n        emit Received(now);\r\n    }   \r\n    \r\n    \r\n    // move Eth to Ethertote development wallet\r\n    function _B_sendToEthertoteDevelopmentWallet() onlyAdmin public {\r\n       require(ethertoteDevelopmentTransferComplete == false);\r\n       require(ethToBeDistributed > 0);\r\n       // now allow a percentage of the balance\r\n       // total balance divided by 5 = 50% of balance\r\n       address(ethertoteDevelopmentWallet).transfer(ethToBeDistributed.div(divForEthertoteDevelopmentWallet));\r\n       emit SentToDev(ethToBeDistributed.div(divForEthertoteDevelopmentWallet)); \r\n       //ensure function can only ever be called once\r\n       ethertoteDevelopmentTransferComplete = true;\r\n    }\r\n    \r\n    // move Eth to tote liquidator wallet\r\n    function _C_sendToToteLiquidatorWallet() onlyAdmin public {\r\n       require(toteLiquidatorTransferComplete == false);\r\n       require(ethToBeDistributed > 0);\r\n       // now allow a percentage of the balance\r\n       // total balance divided by 4 = 25% of balance\r\n       address(toteLiquidatorWallet).transfer(ethToBeDistributed.div(divForEthertoteLiquidatorWallet));\r\n       emit SentToLiquidator(ethToBeDistributed.div(divForEthertoteLiquidatorWallet)); \r\n       //ensure function can only ever be called once\r\n       toteLiquidatorTransferComplete = true;\r\n    }\r\n\r\n    // move Eth to team eth time-locked contract\r\n    function _D_sendToTeamEthContract() onlyAdmin public {\r\n       require(teamEthTransferComplete == false);\r\n       require(ethToBeDistributed > 0);\r\n       // now allow a percentage of the balance\r\n       // total balance divided by 4 = 25% of balance\r\n       address(teamEthContract).transfer(ethToBeDistributed.div(divForTeamEthContract));\r\n       emit SentToTeamEth(ethToBeDistributed.div(divForTeamEthContract)); \r\n       //ensure function can only ever be called once\r\n       teamEthTransferComplete = true;\r\n    }\r\n    \r\n// ----------------------------------------------------------------------------\r\n// This method can be used by admin to extract Eth accidentally \r\n// sent to this smart contract after all previous transfers have been made\r\n// to the correct addresses\r\n// ----------------------------------------------------------------------------\r\n    function ClaimEth() onlyAdmin public {\r\n        require(ethertoteDevelopmentTransferComplete == true);\r\n        require(toteLiquidatorTransferComplete == true);\r\n        require(teamEthTransferComplete == true);\r\n        \r\n        // now withdraw any accidental Eth sent to this contract\r\n        require(address(this).balance > 0);\r\n        address(admin).transfer(address(this).balance);\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"divForEthertoteDevelopmentWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divForTeamEthContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ClaimEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_C_sendToToteLiquidatorWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_B_sendToEthertoteDevelopmentWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toteLiquidatorWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divForEthertoteLiquidatorWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamEthContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toteLiquidatorTransferComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_D_sendToTeamEthContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethertoteDevelopmentTransferComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamEthTransferComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethertoteDevelopmentWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToBeDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToBeDistributedSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_A_tokenSaleCompleted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SentToTeamEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SentToLiquidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SentToDev\",\"type\":\"event\"}]","ContractName":"EthRaised","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2767c673e57a7e421e71664473d51a6743b630f4069ecdd2d8c9f1943b9da868"}]}