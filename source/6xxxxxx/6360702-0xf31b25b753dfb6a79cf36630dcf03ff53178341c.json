{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright (c) 2018 blockimmo AG license@blockimmo.ch\r\n * Non-Profit Open Software License 3.0 (NPOSL-3.0)\r\n * https://opensource.org/licenses/NPOSL-3.0\r\n */\r\n\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title LandRegistry\r\n * @dev A minimal, simple database mapping properties to their on-chain representation (`TokenizedProperty`).\r\n *\r\n * The purpose of this contract is not to be official or replace the existing (off-chain) land registry.\r\n * Its purpose is to map entries in the official registry to their on-chain representation.\r\n * This mapping / bridging process is enabled by our legal framework, which works in-sync with and relies on this database.\r\n *\r\n * `this.landRegistry` is the single source of truth for on-chain properties verified legitimate by blockimmo.\r\n * Any property not indexed in `this.landRegistry` is NOT verified legitimate by blockimmo.\r\n *\r\n * `TokenizedProperty` references `this` to only allow tokens of verified properties to be transferred.\r\n * Any (unmodified) `TokenizedProperty`'s tokens will be transferable if and only if it is indexed in `this.landRegistry` (otherwise locked).\r\n *\r\n * `LandRegistryProxy` enables `this` to be easily and reliably upgraded if absolutely necessary.\r\n * `LandRegistryProxy` and `this` are controlled by a centralized entity.\r\n * This centralization provides an extra layer of control / security until our contracts are time and battle tested.\r\n * We intend to work towards full decentralization in small, precise, confident steps by transferring ownership\r\n * of these contracts when appropriate and necessary.\r\n */\r\ncontract LandRegistry is Claimable {\r\n  mapping(string => address) private landRegistry;\r\n\r\n  event Tokenized(string eGrid, address indexed property);\r\n  event Untokenized(string eGrid, address indexed property);\r\n\r\n  /**\r\n   * this function's abi should never change and always maintain backwards compatibility\r\n   */\r\n  function getProperty(string _eGrid) public view returns (address property) {\r\n    property = landRegistry[_eGrid];\r\n  }\r\n\r\n  function tokenizeProperty(string _eGrid, address _property) public onlyOwner {\r\n    require(bytes(_eGrid).length > 0, \"eGrid must be non-empty string\");\r\n    require(_property != address(0), \"property address must be non-null\");\r\n    require(landRegistry[_eGrid] == address(0), \"property must not already exist in land registry\");\r\n\r\n    landRegistry[_eGrid] = _property;\r\n    emit Tokenized(_eGrid, _property);\r\n  }\r\n\r\n  function untokenizeProperty(string _eGrid) public onlyOwner {\r\n    address property = getProperty(_eGrid);\r\n    require(property != address(0), \"property must exist in land registry\");\r\n\r\n    landRegistry[_eGrid] = address(0);\r\n    emit Untokenized(_eGrid, property);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_eGrid\",\"type\":\"string\"},{\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"tokenizeProperty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eGrid\",\"type\":\"string\"}],\"name\":\"getProperty\",\"outputs\":[{\"name\":\"property\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eGrid\",\"type\":\"string\"}],\"name\":\"untokenizeProperty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"eGrid\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"property\",\"type\":\"address\"}],\"name\":\"Tokenized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"eGrid\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"property\",\"type\":\"address\"}],\"name\":\"Untokenized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LandRegistry","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://682487e6e000f86701d44eb604dac86092f3cf600021ba1d73123107c8f4e1d2"}]}