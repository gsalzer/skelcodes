{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// Project: MOBU.io\r\n// v12, 2018-08-24\r\n// This code is the property of CryptoB2B.io\r\n// Copying in whole or in part is prohibited.\r\n// Authors: Ivan Fedorov and Dmitry Borodin\r\n// Do you want the same TokenSale platform? www.cryptob2b.io\r\n\r\ncontract GuidedByRoles {\r\n    IRightAndRoles public rightAndRoles;\r\n    function GuidedByRoles(IRightAndRoles _rightAndRoles) public {\r\n        rightAndRoles = _rightAndRoles;\r\n    }\r\n}\r\n\r\ncontract IToken{\r\n    function setUnpausedWallet(address _wallet, bool mode) public;\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function setPause(bool mode) public;\r\n    function setMigrationAgent(address _migrationAgent) public;\r\n    function migrateAll(address[] _holders) public;\r\n    function markTokens(address _beneficiary, uint256 _value) public;\r\n    function freezedTokenOf(address _beneficiary) public view returns (uint256 amount);\r\n    function defrostDate(address _beneficiary) public view returns (uint256 Date);\r\n    function freezeTokens(address _beneficiary, uint256 _amount, uint256 _when) public;\r\n}\r\n\r\ncontract IRightAndRoles {\r\n    address[][] public wallets;\r\n    mapping(address => uint16) public roles;\r\n\r\n    event WalletChanged(address indexed newWallet, address indexed oldWallet, uint8 indexed role);\r\n    event CloneChanged(address indexed wallet, uint8 indexed role, bool indexed mod);\r\n\r\n    function changeWallet(address _wallet, uint8 _role) external;\r\n    function setManagerPowerful(bool _mode) external;\r\n    function onlyRoles(address _sender, uint16 _roleMask) view external returns(bool);\r\n}\r\n\r\ncontract ERC20Provider is GuidedByRoles {\r\n    function transferTokens(ERC20Basic _token, address _to, uint256 _value) public returns (bool){\r\n        require(rightAndRoles.onlyRoles(msg.sender,2));\r\n        return _token.transfer(_to,_value);\r\n    }\r\n}\r\n\r\ncontract Crowdsale is GuidedByRoles, ERC20Provider{\r\n// (A1)\r\n// The main contract for the sale and management of rounds.\r\n// 0000000000000000000000000000000000000000000000000000000000000000\r\n\r\n    uint256 constant USER_UNPAUSE_TOKEN_TIMEOUT =  30 days;\r\n    uint256 constant FORCED_REFUND_TIMEOUT1     = 400 days;\r\n    uint256 constant FORCED_REFUND_TIMEOUT2     = 600 days;\r\n    uint256 constant ROUND_PROLONGATE           =  60 days;\r\n    //uint256 constant KYC_PERIOD                 =  90 days;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    enum TokenSaleType {round1, round2}\r\n    TokenSaleType public TokenSale = TokenSaleType.round1;\r\n\r\n\r\n    ICreator public creator;\r\n    bool isBegin=false;\r\n\r\n    IToken public token;\r\n    IAllocation public allocation;\r\n    IFinancialStrategy public financialStrategy;\r\n\r\n    bool public isFinalized;\r\n    bool public isInitialized;\r\n    bool public isPausedCrowdsale;\r\n    bool public chargeBonuses;\r\n    bool public canFirstMint=true;\r\n\r\n    struct Bonus {\r\n        uint256 value;\r\n        uint256 procent;\r\n        uint256 freezeTime;\r\n    }\r\n\r\n    struct Profit {\r\n        uint256 percent;\r\n        uint256 duration;\r\n    }\r\n\r\n    struct Freezed {\r\n        uint256 value;\r\n        uint256 dateTo;\r\n    }\r\n\r\n    mapping (address => bool) public promo;\r\n\r\n    Bonus[] public bonuses;\r\n    Profit[] public profits;\r\n\r\n\r\n    uint256 public startTime;  \r\n    uint256 public endTime; \r\n    uint256 public renewal;\r\n\r\n    // How many tokens (excluding the bonus) are transferred to the investor in exchange for 1 ETH\r\n    // **THOUSANDS** 10^18 for human, *10**18 for Solidity, 1e18 for MyEtherWallet (MEW).\r\n    // Example: if 1ETH = 40.5 Token ==> use 40500 finney\r\n    uint256 public rate; \r\n\r\n    // ETH/USD rate in US$\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: ETH/USD=$1000 ==> use 1000*10**18 (Solidity) or 1000 ether or 1000e18 (MEW)\r\n    uint256 public exchange;\r\n\r\n    // If the round does not attain this value before the closing date, the round is recognized as a\r\n    // failure and investors take the money back (the founders will not interfere in any way).\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: softcap=15ETH ==> use 15*10**18 (Solidity) or 15e18 (MEW)\r\n    uint256 public softCap;\r\n\r\n    // The maximum possible amount of income\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: hardcap=123.45ETH ==> use 123450*10**15 (Solidity) or 12345e15 (MEW)\r\n    uint256 public hardCap;\r\n\r\n    // If the last payment is slightly higher than the hardcap, then the usual contracts do\r\n    // not accept it, because it goes beyond the hardcap. However it is more reasonable to accept the\r\n    // last payment, very slightly raising the hardcap. The value indicates by how many ETH the\r\n    // last payment can exceed the hardcap to allow it to be paid. Immediately after this payment, the\r\n    // round closes. The funders should write here a small number, not more than 1% of the CAP.\r\n    // Can be equal to zero, to cancel.\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18\r\n    uint256 public overLimit;\r\n\r\n    // The minimum possible payment from an investor in ETH. Payments below this value will be rejected.\r\n    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: minPay=0.1ETH ==> use 100*10**15 (Solidity) or 100e15 (MEW)\r\n    uint256 public minPay;\r\n\r\n    uint256 public maxAllProfit; // max time bonus=20%, max value bonus=10%, maxAll=10%+20%\r\n\r\n    uint256 public ethWeiRaised;\r\n    uint256 public nonEthWeiRaised;\r\n    uint256 public weiRound1;\r\n    uint256 public tokenReserved;\r\n\r\n    uint256 public totalSaledToken;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    event Finalized();\r\n    event Initialized();\r\n\r\n    event PaymentedInOtherCurrency(uint256 token, uint256 value);\r\n    event ExchangeChanged(uint256 indexed oldExchange, uint256 indexed newExchange);\r\n\r\n    function Crowdsale(ICreator _creator,IToken _token) GuidedByRoles(_creator.getRightAndRoles()) public\r\n    {\r\n        creator=_creator;\r\n        token = _token;\r\n    }\r\n\r\n    function updateInfo(uint256 _ETHUSD,uint256 _token, uint256 _value) public {\r\n//        if(_ETHUSD > 0){\r\n//            changeExchange(_ETHUSD);\r\n//        }\r\n        if(_token > 0 && _value > 0){\r\n            paymentsInOtherCurrency(_token,_value);\r\n        }\r\n    }\r\n\r\n    // Setting the current rate ETH/USD         \r\n    //    function changeExchange(uint256 _ETHUSD) internal {\r\n    //        - skip -\r\n    //    }\r\n\r\n    function setPromo(address[] _investors, uint8[] _mod) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,18));\r\n        for(uint256 i = 0; i < _investors.length; i++){\r\n            promo[_investors[i]] = _mod[i] > 0;\r\n        }\r\n    }\r\n\r\n    // Setting of basic parameters, analog of class constructor\r\n    // @ Do I have to use the function      see your scenario\r\n    // @ When it is possible to call        before Round 1/2\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function begin() public\r\n    {\r\n\r\n        require(rightAndRoles.onlyRoles(msg.sender,22));\r\n        if (isBegin) return;\r\n        isBegin=true;\r\n\r\n        // This setting only for Round #1 (pre-ICO), not for both rounds.\r\n        startTime   = 1535799600;   // 1.09.18\r\n        endTime     = 1538391599;   // 1.10.18\r\n        rate        = 2000 ether;   // 1 ETH -> 2000 tokens (ETH/USD $300)\r\n        exchange    = 300 ether;    // ETH/USD\r\n        softCap     = 0 ether;     \r\n        hardCap     = 58333 ether;  // $20 000 000 (ETH/USD $300)\r\n        overLimit   = 20 ether;  \r\n        minPay      = 1000 finney;  // 1 ETH =~ $300 (ETH/USD $300)\r\n        maxAllProfit= 55;           // 55%\r\n\r\n        financialStrategy = creator.createFinancialStrategy();\r\n\r\n        token.setUnpausedWallet(rightAndRoles.wallets(1,0), true);\r\n        token.setUnpausedWallet(rightAndRoles.wallets(3,0), true);\r\n        token.setUnpausedWallet(rightAndRoles.wallets(4,0), true);\r\n        token.setUnpausedWallet(rightAndRoles.wallets(5,0), true);\r\n        token.setUnpausedWallet(rightAndRoles.wallets(6,0), true);\r\n\r\n        bonuses.push(Bonus(33 ether, 10,0));   // value >$10000 is +10% bonus   (ETH/USD $300)\r\n        bonuses.push(Bonus(333 ether, 20,0));  // value >$100000 is +20% bonus\r\n\r\n        profits.push(Profit(25,100 days));\r\n    }\r\n\r\n\r\n\r\n    // Issue of tokens for the zero round, it is usually called: private pre-sale (Round 0)\r\n    // @ Do I have to use the function      may be\r\n    // @ When it is possible to call        before Round 1/2\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function firstMintRound0(uint256 _amount /* QUINTILLIONS! */) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n        require(canFirstMint);\r\n        begin();\r\n        token.mint(rightAndRoles.wallets(3,0),_amount);\r\n        totalSaledToken = totalSaledToken.add(_amount);\r\n    }\r\n\r\n    function firstMintRound0For(address[] _to, uint256[] _amount, uint8[] _setAsUnpaused) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n        require(canFirstMint);\r\n        begin();\r\n        require(_to.length == _amount.length && _to.length == _setAsUnpaused.length);\r\n        for(uint256 i = 0; i < _to.length; i++){\r\n            token.mint(_to[i],_amount[i]);\r\n            totalSaledToken = totalSaledToken.add(_amount[i]);\r\n            if(_setAsUnpaused[i]>0){\r\n                token.setUnpausedWallet(_to[i], true);\r\n            }\r\n        }\r\n    }\r\n\r\n    // info\r\n    function totalSupply() external view returns (uint256){\r\n        return token.totalSupply();\r\n    }\r\n\r\n    function isPromo(address _address) public view returns (bool){\r\n       return promo[_address];\r\n    }\r\n\r\n    // Transfers the funds of the investor to the contract of return of funds. Internal.\r\n    function forwardFunds(address _beneficiary) internal {\r\n        financialStrategy.deposit.value(msg.value)(_beneficiary);\r\n    }\r\n\r\n    // Check for the possibility of buying tokens. Inside. Constant.\r\n    function validPurchase() internal view returns (bool) {\r\n\r\n        // The round started and did not end\r\n        bool withinPeriod = (now > startTime && now < endTime.add(renewal));\r\n\r\n        // Rate is greater than or equal to the minimum\r\n        bool nonZeroPurchase = msg.value >= minPay;\r\n\r\n        // hardCap is not reached, and in the event of a transaction, it will not be exceeded by more than OverLimit\r\n        bool withinCap = msg.value <= hardCap.sub(weiRaised()).add(overLimit);\r\n\r\n        // round is initialized and no \"Pause of trading\" is set\r\n        return withinPeriod && nonZeroPurchase && withinCap && isInitialized && !isFinalized && !isPausedCrowdsale;\r\n    }\r\n\r\n    // Check for the ability to finalize the round. Constant.\r\n    function hasEnded() public view returns (bool) {\r\n        bool isAdmin = rightAndRoles.onlyRoles(msg.sender,6);\r\n\r\n        bool timeReached = now > endTime.add(renewal);\r\n\r\n        bool capReached = weiRaised() >= hardCap;\r\n\r\n        return (timeReached || capReached || (isAdmin && goalReached())) && isInitialized && !isFinalized;\r\n    }\r\n\r\n    // Finalize. Only available to the Manager and the Beneficiary. If the round failed, then\r\n    // anyone can call the finalization to unlock the return of funds to investors\r\n    // You must call a function to finalize each round (after the Round1 & after the Round2)\r\n    // @ Do I have to use the function      yes\r\n    // @ When it is possible to call        after end of Round1 & Round2\r\n    // @ When it is launched automatically  no\r\n    // @ Who can call the function          admins or anybody (if round is failed)\r\n    function finalize() public {\r\n        require(hasEnded());\r\n\r\n        isFinalized = true;\r\n        finalization();\r\n        emit Finalized();\r\n    }\r\n\r\n    // The logic of finalization. Internal\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        -\r\n    // @ When it is launched automatically  after end of round\r\n    // @ Who can call the function          -\r\n    function finalization() internal {\r\n        bytes32[] memory params = new bytes32[](0);\r\n        // If the goal of the achievement\r\n        if (goalReached()) {\r\n\r\n            financialStrategy.setup(1,params);\r\n\r\n            // if there is anything to give\r\n            if (tokenReserved > 0) {\r\n\r\n                token.mint(rightAndRoles.wallets(3,0),tokenReserved);\r\n                totalSaledToken = totalSaledToken.add(tokenReserved);\r\n\r\n                // Reset the counter\r\n                tokenReserved = 0;\r\n            }\r\n\r\n            // If the finalization is Round 1\r\n            if (TokenSale == TokenSaleType.round1) {\r\n\r\n                // Reset settings\r\n                isInitialized = false;\r\n                isFinalized = false;\r\n                if(financialStrategy.freeCash() == 0){\r\n                    rightAndRoles.setManagerPowerful(true);\r\n                }\r\n\r\n                // Switch to the second round (to Round2)\r\n                TokenSale = TokenSaleType.round2;\r\n\r\n                // Reset the collection counter\r\n                weiRound1 = weiRaised();\r\n                ethWeiRaised = 0;\r\n                nonEthWeiRaised = 0;\r\n\r\n\r\n\r\n            }\r\n            else // If the second round is finalized\r\n            {\r\n\r\n                // Permission to collect tokens to those who can pick them up\r\n                chargeBonuses = true;\r\n\r\n                //totalSaledToken = token.totalSupply();\r\n                //partners = true;\r\n\r\n            }\r\n\r\n        }\r\n        else // If they failed round\r\n        {\r\n            financialStrategy.setup(3,params);\r\n        }\r\n    }\r\n\r\n    // The Manager freezes the tokens for the Team.\r\n    // You must call a function to finalize Round 2 (only after the Round2)\r\n    // @ Do I have to use the function      yes\r\n    // @ When it is possible to call        Round2\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function finalize2() public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n        require(chargeBonuses);\r\n        chargeBonuses = false;\r\n\r\n        allocation = creator.createAllocation(token, now + 1 years /* stage N1 */,0/* not need*/);\r\n        token.setUnpausedWallet(allocation, true);\r\n        // Team = %, Founders = %, Fund = %    TOTAL = %\r\n        allocation.addShare(rightAndRoles.wallets(7,0),100,100); // all 100% - first year\r\n\r\n        // 2% - bounty wallet\r\n        token.mint(rightAndRoles.wallets(5,0), totalSaledToken.mul(8).div(80));\r\n\r\n        // 10% - company\r\n        //token.mint(rightAndRoles.wallets(6,0), totalSaledToken.mul(10).div(77));\r\n\r\n        // 13% - team\r\n        token.mint(allocation, totalSaledToken.mul(12).div(80));\r\n    }\r\n\r\n\r\n\r\n    // Initializing the round. Available to the manager. After calling the function,\r\n    // the Manager loses all rights: Manager can not change the settings (setup), change\r\n    // wallets, prevent the beginning of the round, etc. You must call a function after setup\r\n    // for the initial round (before the Round1 and before the Round2)\r\n    // @ Do I have to use the function      yes\r\n    // @ When it is possible to call        before each round\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function initialize() public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n        // If not yet initialized\r\n        require(!isInitialized);\r\n        begin();\r\n\r\n\r\n        // And the specified start time has not yet come\r\n        // If initialization return an error, check the start date!\r\n        require(now <= startTime);\r\n\r\n        initialization();\r\n\r\n        emit Initialized();\r\n\r\n        renewal = 0;\r\n\r\n        isInitialized = true;\r\n\r\n        if(TokenSale == TokenSaleType.round2) canFirstMint = false;\r\n    }\r\n\r\n    function initialization() internal {\r\n        bytes32[] memory params = new bytes32[](0);\r\n        rightAndRoles.setManagerPowerful(false);\r\n        if (financialStrategy.state() != IFinancialStrategy.State.Active){\r\n            financialStrategy.setup(2,params);\r\n        }\r\n    }\r\n\r\n    // \r\n    // @ Do I have to use the function      \r\n    // @ When it is possible to call        \r\n    // @ When it is launched automatically  \r\n    // @ Who can call the function          \r\n    function getPartnerCash(uint8 _user, bool _calc) external {\r\n        if(_calc)\r\n            calcFin();\r\n        financialStrategy.getPartnerCash(_user, msg.sender);\r\n    }\r\n\r\n    function getBeneficiaryCash(bool _calc) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,22));\r\n        if(_calc)\r\n            calcFin();\r\n        financialStrategy.getBeneficiaryCash();\r\n        if(!isInitialized && financialStrategy.freeCash() == 0)\r\n            rightAndRoles.setManagerPowerful(true);\r\n    }\r\n\r\n    function claimRefund() external{\r\n        financialStrategy.refund(msg.sender);\r\n    }\r\n\r\n    function calcFin() public {\r\n        bytes32[] memory params = new bytes32[](2);\r\n        params[0] = bytes32(weiTotalRaised());\r\n        params[1] = bytes32(msg.sender);\r\n        financialStrategy.setup(4,params);\r\n    }\r\n\r\n    function calcAndGet() public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,22));\r\n        getBeneficiaryCash(true);\r\n        for (uint8 i=0; i<0; i++) { // <-- TODO check financialStrategy.wallets.length\r\n            financialStrategy.getPartnerCash(i, msg.sender);\r\n        }\r\n    }\r\n\r\n    // We check whether we collected the necessary minimum funds. Constant.\r\n    function goalReached() public view returns (bool) {\r\n        return weiRaised() >= softCap;\r\n    }\r\n\r\n\r\n    // Customize. The arguments are described in the constructor above.\r\n    // @ Do I have to use the function      yes\r\n    // @ When it is possible to call        before each rond\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function setup(uint256 _startTime, uint256 _endTime, uint256 _softCap, uint256 _hardCap,\r\n        uint256 _rate, uint256 _exchange,\r\n        uint256 _maxAllProfit, uint256 _overLimit, uint256 _minPay,\r\n        uint256[] _durationTB , uint256[] _percentTB, uint256[] _valueVB, uint256[] _percentVB, uint256[] _freezeTimeVB) public\r\n    {\r\n\r\n        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n        require(!isInitialized);\r\n\r\n        begin();\r\n\r\n        // Date and time are correct\r\n        require(now <= _startTime);\r\n        require(_startTime < _endTime);\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n\r\n        // The parameters are correct\r\n        require(_softCap <= _hardCap);\r\n\r\n        softCap = _softCap;\r\n        hardCap = _hardCap;\r\n\r\n        require(_rate > 0);\r\n\r\n        rate = _rate;\r\n\r\n        overLimit = _overLimit;\r\n        minPay = _minPay;\r\n        exchange = _exchange;\r\n\r\n        maxAllProfit = _maxAllProfit;\r\n\r\n        require(_valueVB.length == _percentVB.length && _valueVB.length == _freezeTimeVB.length);\r\n        bonuses.length = _valueVB.length;\r\n        for(uint256 i = 0; i < _valueVB.length; i++){\r\n            bonuses[i] = Bonus(_valueVB[i],_percentVB[i],_freezeTimeVB[i]);\r\n        }\r\n\r\n        require(_percentTB.length == _durationTB.length);\r\n        profits.length = _percentTB.length;\r\n        for( i = 0; i < _percentTB.length; i++){\r\n            profits[i] = Profit(_percentTB[i],_durationTB[i]);\r\n        }\r\n\r\n    }\r\n\r\n    // Collected funds for the current round. Constant.\r\n    function weiRaised() public constant returns(uint256){\r\n        return ethWeiRaised.add(nonEthWeiRaised);\r\n    }\r\n\r\n    // Returns the amount of fees for both phases. Constant.\r\n    function weiTotalRaised() public constant returns(uint256){\r\n        return weiRound1.add(weiRaised());\r\n    }\r\n\r\n    // Returns the percentage of the bonus on the current date. Constant.\r\n    function getProfitPercent() public constant returns (uint256){\r\n        return getProfitPercentForData(now);\r\n    }\r\n\r\n    // Returns the percentage of the bonus on the given date. Constant.\r\n    function getProfitPercentForData(uint256 _timeNow) public constant returns (uint256){\r\n        uint256 allDuration;\r\n        for(uint8 i = 0; i < profits.length; i++){\r\n            allDuration = allDuration.add(profits[i].duration);\r\n            if(_timeNow < startTime.add(allDuration)){\r\n                return profits[i].percent;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getBonuses(uint256 _value) public constant returns (uint256,uint256,uint256){\r\n        if(bonuses.length == 0 || bonuses[0].value > _value){\r\n            return (0,0,0);\r\n        }\r\n        uint16 i = 1;\r\n        for(i; i < bonuses.length; i++){\r\n            if(bonuses[i].value > _value){\r\n                break;\r\n            }\r\n        }\r\n        return (bonuses[i-1].value,bonuses[i-1].procent,bonuses[i-1].freezeTime);\r\n    }\r\n\r\n\r\n    // Remove the \"Pause of exchange\". Available to the manager at any time. If the\r\n    // manager refuses to remove the pause, then 30-120 days after the successful\r\n    // completion of the TokenSale, anyone can remove a pause and allow the exchange to continue.\r\n    // The manager does not interfere and will not be able to delay the term.\r\n    // He can only cancel the pause before the appointed time.\r\n    // @ Do I have to use the function      YES YES YES\r\n    // @ When it is possible to call        after end of ICO\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins or anybody\r\n    function tokenUnpause() external {\r\n\r\n        require(rightAndRoles.onlyRoles(msg.sender,2)\r\n        || (now > endTime.add(renewal).add(USER_UNPAUSE_TOKEN_TIMEOUT) && TokenSale == TokenSaleType.round2 && isFinalized && goalReached()));\r\n        token.setPause(false);\r\n    }\r\n\r\n    // Enable the \"Pause of exchange\". Available to the manager until the TokenSale is completed.\r\n    // The manager cannot turn on the pause, for example, 3 years after the end of the TokenSale.\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        while Round2 not ended\r\n    // @ When it is launched automatically  before any rounds\r\n    // @ Who can call the function          admins\r\n    function tokenPause() public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n        require(!isFinalized);\r\n        token.setPause(true);\r\n    }\r\n\r\n    // Pause of sale. Available to the manager.\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        during active rounds\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function setCrowdsalePause(bool mode) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n        isPausedCrowdsale = mode;\r\n    }\r\n\r\n    // For example - After 5 years of the project's existence, all of us suddenly decided collectively\r\n    // (company + investors) that it would be more profitable for everyone to switch to another smart\r\n    // contract responsible for tokens. The company then prepares a new token, investors\r\n    // disassemble, study, discuss, etc. \r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        only after ICO!\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n//    function moveTokens(address _migrationAgent) public {\r\n//        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n//        token.setMigrationAgent(_migrationAgent);\r\n//    }\r\n\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        only after ICO!\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n//    function migrateAll(address[] _holders) public {\r\n//        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n//        token.migrateAll(_holders);\r\n//    }\r\n\r\n\r\n    // For people who ignore the KYC/AML procedure during 30 days after payment (KYC_PERIOD): money back and zeroing tokens.\r\n    // ***CHECK***SCENARIO***\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        any time\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admin\r\n//    function invalidPayments(address[] _beneficiary, uint256[] _value) external {\r\n//        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n//        require(endTime.add(renewal).add(KYC_PERIOD) > now);\r\n//        require(_beneficiary.length == _value.length);\r\n//        for(uint16 i; i<_beneficiary.length; i++) {\r\n//            token.markTokens(_beneficiary[i],_value[i]);\r\n//        }\r\n//    }\r\n\r\n    // Extend the round time, if provided by the script. Extend the round only for\r\n    // a limited number of days - ROUND_PROLONGATE\r\n    // ***CHECK***SCENARIO***\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        during active round\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          admins\r\n    function prolong(uint256 _duration) external {\r\n        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n        require(now > startTime && now < endTime.add(renewal) && isInitialized && !isFinalized);\r\n        renewal = renewal.add(_duration);\r\n        require(renewal <= ROUND_PROLONGATE);\r\n\r\n    }\r\n    // If a little more than a year has elapsed (Round2 start date + 400 days), a smart contract\r\n    // will allow you to send all the money to the Beneficiary, if any money is present. This is\r\n    // possible if you mistakenly launch the Round2 for 30 years (not 30 days), investors will transfer\r\n    // money there and you will not be able to pick them up within a reasonable time. It is also\r\n    // possible that in our checked script someone will make unforeseen mistakes, spoiling the\r\n    // finalization. Without finalization, money cannot be returned. This is a rescue option to\r\n    // get around this problem, but available only after a year (400 days).\r\n\r\n    // Another reason - the TokenSale was a failure, but not all ETH investors took their money during the year after.\r\n    // Some investors may have lost a wallet key, for example.\r\n\r\n    // The method works equally with the Round1 and Round2. When the Round1 starts, the time for unlocking\r\n    // the distructVault begins. If the TokenSale is then started, then the term starts anew from the first day of the TokenSale.\r\n\r\n    // Next, act independently, in accordance with obligations to investors.\r\n\r\n    // Within 400 days (FORCED_REFUND_TIMEOUT1) of the start of the Round, if it fails only investors can take money. After\r\n    // the deadline this can also include the company as well as investors, depending on who is the first to use the method.\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        -\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          beneficiary & manager\r\n    function distructVault() public {\r\n        bytes32[] memory params = new bytes32[](1);\r\n        params[0] = bytes32(msg.sender);\r\n        if (rightAndRoles.onlyRoles(msg.sender,4) && (now > startTime.add(FORCED_REFUND_TIMEOUT1))) {\r\n            financialStrategy.setup(0,params);\r\n        }\r\n        if (rightAndRoles.onlyRoles(msg.sender,2) && (now > startTime.add(FORCED_REFUND_TIMEOUT2))) {\r\n            financialStrategy.setup(0,params);\r\n        }\r\n    }\r\n\r\n\r\n    // We accept payments other than Ethereum (ETH) and other currencies, for example, Bitcoin (BTC).\r\n    // Perhaps other types of cryptocurrency - see the original terms in the white paper and on the TokenSale website.\r\n\r\n    // We release tokens on Ethereum. During the Round1 and Round2 with a smart contract, you directly transfer\r\n    // the tokens there and immediately, with the same transaction, receive tokens in your wallet.\r\n\r\n    // When paying in any other currency, for example in BTC, we accept your money via one common wallet.\r\n    // Our manager fixes the amount received for the bitcoin wallet and calls the method of the smart\r\n    // contract paymentsInOtherCurrency to inform him how much foreign currency has been received - on a daily basis.\r\n    // The smart contract pins the number of accepted ETH directly and the number of BTC. Smart contract\r\n    // monitors softcap and hardcap, so as not to go beyond this framework.\r\n\r\n    // In theory, it is possible that when approaching hardcap, we will receive a transfer (one or several\r\n    // transfers) to the wallet of BTC, that together with previously received money will exceed the hardcap in total.\r\n    // In this case, we will refund all the amounts above, in order not to exceed the hardcap.\r\n\r\n    // Collection of money in BTC will be carried out via one common wallet. The wallet's address will be published\r\n    // everywhere (in a white paper, on the TokenSale website, on Telegram, on Bitcointalk, in this code, etc.)\r\n    // Anyone interested can check that the administrator of the smart contract writes down exactly the amount\r\n    // in ETH (in equivalent for BTC) there. In theory, the ability to bypass a smart contract to accept money in\r\n    // BTC and not register them in ETH creates a possibility for manipulation by the company. Thanks to\r\n    // paymentsInOtherCurrency however, this threat is leveled.\r\n\r\n    // Any user can check the amounts in BTC and the variable of the smart contract that accounts for this\r\n    // (paymentsInOtherCurrency method). Any user can easily check the incoming transactions in a smart contract\r\n    // on a daily basis. Any hypothetical tricks on the part of the company can be exposed and panic during the TokenSale,\r\n    // simply pointing out the incompatibility of paymentsInOtherCurrency (ie, the amount of ETH + BTC collection)\r\n    // and the actual transactions in BTC. The company strictly adheres to the described principles of openness.\r\n\r\n    // The company administrator is required to synchronize paymentsInOtherCurrency every working day (but you\r\n    // cannot synchronize if there are no new BTC payments). In the case of unforeseen problems, such as\r\n    // brakes on the Ethereum network, this operation may be difficult. You should only worry if the\r\n    // administrator does not synchronize the amount for more than 96 hours in a row, and the BTC wallet\r\n    // receives significant amounts.\r\n\r\n    // This scenario ensures that for the sum of all fees in all currencies this value does not exceed hardcap.\r\n\r\n    // ** QUINTILLIONS ** 10^18 / 1**18 / 1e18\r\n\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        during active rounds\r\n    // @ When it is launched automatically  every day from cryptob2b token software\r\n    // @ Who can call the function          admins + observer\r\n    function paymentsInOtherCurrency(uint256 _token, uint256 _value) internal {\r\n\r\n        // **For audit**\r\n        // BTC Wallet:             38kYRf1Ent74d77H8F4ZJCyngtRTJFPdhj\r\n        // BCH Wallet:             qpyjy2urvjhwz4emw0hfrlm39gmu3shvngy7aa673l\r\n        // DASH Wallet:            XrouPiHyXwfB2uajja1RALuAvHaDEUNPw7\r\n        // LTC Wallet:             MJxPYAeMbvYBoFsoNnF9WwiUqnLSUR8yVc\r\n        require(rightAndRoles.onlyRoles(msg.sender,18));\r\n        bool withinPeriod = (now >= startTime && now <= endTime.add(renewal));\r\n        bool withinCap = _value.add(ethWeiRaised) <= hardCap.add(overLimit);\r\n        require(withinPeriod && withinCap && isInitialized && !isFinalized);\r\n        emit PaymentedInOtherCurrency(_token,_value);\r\n        nonEthWeiRaised = _value;\r\n        tokenReserved = _token;\r\n\r\n    }\r\n\r\n    function lokedMint(address _beneficiary, uint256 _value, uint256 _freezeTime) internal {\r\n        if(_freezeTime > 0){\r\n\r\n            uint256 totalBloked = token.freezedTokenOf(_beneficiary).add(_value);\r\n            uint256 pastDateUnfreeze = token.defrostDate(_beneficiary);\r\n            uint256 newDateUnfreeze = _freezeTime.add(now);\r\n            newDateUnfreeze = (pastDateUnfreeze > newDateUnfreeze ) ? pastDateUnfreeze : newDateUnfreeze;\r\n\r\n            token.freezeTokens(_beneficiary,totalBloked,newDateUnfreeze);\r\n        }\r\n        token.mint(_beneficiary,_value);\r\n        totalSaledToken = totalSaledToken.add(_value);\r\n    }\r\n\r\n\r\n    // The function for obtaining smart contract funds in ETH. If all the checks are true, the token is\r\n    // transferred to the buyer, taking into account the current bonus.\r\n    function buyTokens(address _beneficiary) public payable {\r\n        require(_beneficiary != 0x0);\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        uint256 ProfitProcent = getProfitPercent();\r\n\r\n        uint256 value;\r\n        uint256 percent;\r\n        uint256 freezeTime;\r\n\r\n        (value,\r\n        percent,\r\n        freezeTime) = getBonuses(weiAmount);\r\n\r\n        Bonus memory curBonus = Bonus(value,percent,freezeTime);\r\n\r\n        uint256 bonus = curBonus.procent;\r\n\r\n\r\n        // --------------------------------------------------------------------------------------------\r\n        // *** Scenario 1 - select max from all bonuses + check maxAllProfit\r\n        //uint256 totalProfit = (ProfitProcent < bonus) ? bonus : ProfitProcent;\r\n        // *** Scenario 2 - sum both bonuses + check maxAllProfit\r\n        uint256 totalProfit = bonus.add(ProfitProcent);\r\n        if(isPromo(_beneficiary)){\r\n            totalProfit = totalProfit.add(10);\r\n        }\r\n        // --------------------------------------------------------------------------------------------\r\n        totalProfit = (totalProfit > maxAllProfit) ? maxAllProfit : totalProfit;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate).mul(totalProfit.add(100)).div(100 ether);\r\n\r\n        // update state\r\n        ethWeiRaised = ethWeiRaised.add(weiAmount);\r\n\r\n        lokedMint(_beneficiary, tokens, curBonus.freezeTime);\r\n\r\n        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n\r\n        forwardFunds(_beneficiary);//forwardFunds(msg.sender);\r\n    }\r\n\r\n    // buyTokens alias\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    function minus(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b>=a) return 0;\r\n        return a - b;\r\n    }\r\n}\r\n\r\ncontract IFinancialStrategy{\r\n\r\n    enum State { Active, Refunding, Closed }\r\n    State public state = State.Active;\r\n\r\n    event Deposited(address indexed beneficiary, uint256 weiAmount);\r\n    event Receive(address indexed beneficiary, uint256 weiAmount);\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n    event Started();\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    function freeCash() view public returns(uint256);\r\n    function deposit(address _beneficiary) external payable;\r\n    function refund(address _investor) external;\r\n    function setup(uint8 _state, bytes32[] _params) external;\r\n    function getBeneficiaryCash() external;\r\n    function getPartnerCash(uint8 _user, address _msgsender) external;\r\n}\r\n\r\ncontract IAllocation {\r\n    function addShare(address _beneficiary, uint256 _proportion, uint256 _percenForFirstPart) external;\r\n}\r\n\r\ncontract ICreator{\r\n    IRightAndRoles public rightAndRoles;\r\n    function createAllocation(IToken _token, uint256 _unlockPart1, uint256 _unlockPart2) external returns (IAllocation);\r\n    function createFinancialStrategy() external returns(IFinancialStrategy);\r\n    function getRightAndRoles() external returns(IRightAndRoles);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"finalize2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRound1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"prolong\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"begin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ETHUSD\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiTotalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calcAndGet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profits\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPromo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAllProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"renewal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calcFin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"uint8\"},{\"name\":\"_calc\",\"type\":\"bool\"}],\"name\":\"getPartnerCash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSaledToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rightAndRoles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_exchange\",\"type\":\"uint256\"},{\"name\":\"_maxAllProfit\",\"type\":\"uint256\"},{\"name\":\"_overLimit\",\"type\":\"uint256\"},{\"name\":\"_minPay\",\"type\":\"uint256\"},{\"name\":\"_durationTB\",\"type\":\"uint256[]\"},{\"name\":\"_percentTB\",\"type\":\"uint256[]\"},{\"name\":\"_valueVB\",\"type\":\"uint256[]\"},{\"name\":\"_percentVB\",\"type\":\"uint256[]\"},{\"name\":\"_freezeTimeVB\",\"type\":\"uint256[]\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"},{\"name\":\"_mod\",\"type\":\"uint8[]\"}],\"name\":\"setPromo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timeNow\",\"type\":\"uint256\"}],\"name\":\"getProfitPercentForData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distructVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_calc\",\"type\":\"bool\"}],\"name\":\"getBeneficiaryCash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonuses\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"procent\",\"type\":\"uint256\"},{\"name\":\"freezeTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canFirstMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"firstMintRound0\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonEthWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chargeBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPausedCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"promo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"name\":\"_setAsUnpaused\",\"type\":\"uint8[]\"}],\"name\":\"firstMintRound0For\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"overLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mode\",\"type\":\"bool\"}],\"name\":\"setCrowdsalePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"financialStrategy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PaymentedInOtherCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldExchange\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newExchange\",\"type\":\"uint256\"}],\"name\":\"ExchangeChanged\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000987a4a425190f5edfee695db77a2c8212f6df16f0000000000000000000000002b4dd5851da6e7ea0bc2d2c814c229abecf5dc80","Library":"","SwarmSource":"bzzr://b7fcbf2089ef83741fbfbfa5df09a250e355f1c2092b2ddbab0983220e570f7f"}]}