{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract EFFToken is StandardToken {\r\n    string public constant NAME = \"EFF Coin\";\r\n    string public constant SYMBOL = \"EFF\";\r\n    uint public constant DECIMALS = 8;\r\n\r\n\r\n    uint8[10] public bonusPercentages = [\r\n        40,\r\n        15,\r\n        10,\r\n        5\r\n    ];\r\n\r\n    uint public constant NUM_OF_PHASE = 4;\r\n  \r\n   \r\n\r\n    uint public constant BLOCKS_PER_PHASE = 84000;\r\n\r\n  \r\n    /// Note: this will be initialized during the contract deployment.\r\n    address public target;\r\n\r\n    /// `firstblock` specifies from which block our token sale starts.\r\n    /// This can only be modified once by the owner of `target` address.\r\n    uint public firstblock = 0;\r\n\r\n    /// Indicates whether unsold token have been issued. This part of EFF token\r\n    /// is managed by the project team and is issued directly to `target`.\r\n    bool public unsoldTokenIssued = false;\r\n\r\n    /// SOFTCAP Minimum amount of funds to be raised for the sale to succeed. \r\n    uint256 public constant GOAL = 86132 ether;\r\n\r\n    /// HARDCAP Maximum amount of fund to be raised, the sale ends on reaching this amount.\r\n    uint256 public constant HARD_CAP = 689061 ether;\r\n\r\n    /// Base exchange rate is set to 1 ETH = 59 EFF i.e 1 token = 0.017approx.\r\n    uint256 public constant BASE_RATE = 59;\r\n\r\n    /// A simple stat for emitting events.\r\n    uint public totalEthReceived = 0;\r\n\r\n    /// Issue event index starting from 0.\r\n    uint public issueIndex = 0;\r\n\r\n    /* \r\n     * EVENTS\r\n     */\r\n\r\n    /// Emitted only once after token sale starts.\r\n    event SaleStarted();\r\n\r\n    /// Emitted only once after token sale ended (all token issued).\r\n    event SaleEnded();\r\n\r\n    /// Emitted when a function is invocated by unauthorized addresses.\r\n    event InvalidCaller(address caller);\r\n\r\n    /// Emitted when a function is invocated without the specified preconditions.\r\n    /// This event will not come alone with an exception.\r\n    event InvalidState(bytes msg);\r\n\r\n    /// Emitted for each sucuessful token purchase.\r\n    event Issue(uint issueIndex, address addr, uint ethAmount, uint tokenAmount);\r\n\r\n    /// Emitted if the token sale succeeded.\r\n    event SaleSucceeded();\r\n\r\n    /// Emitted if the token sale failed.\r\n    /// When token sale failed, all Ether will be return to the original purchasing\r\n    /// address with a minor deduction of transaction feeï¼ˆgas)\r\n    event SaleFailed();\r\n\r\n    /*\r\n     * MODIFIERS\r\n     */\r\n\r\n    modifier onlyOwner {\r\n        if (target == msg.sender) {\r\n            _;\r\n        } else {\r\n            InvalidCaller(msg.sender);\r\n            throw;\r\n        }\r\n    }\r\n\r\n    modifier beforeStart {\r\n        if (!saleStarted()) {\r\n            _;\r\n        } else {\r\n            InvalidState(\"Sale has not started yet\");\r\n            throw;\r\n        }\r\n    }\r\n\r\n    modifier inProgress {\r\n        if (saleStarted() && !saleEnded()) {\r\n            _;\r\n        } else {\r\n            InvalidState(\"Sale is not in progress\");\r\n            throw;\r\n        }\r\n    }\r\n\r\n    modifier afterEnd {\r\n        if (saleEnded()) {\r\n            _;\r\n        } else {\r\n            InvalidState(\"Sale is not ended yet\");\r\n            throw;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * CONSTRUCTOR \r\n     * \r\n     * @dev Initialize the EFF Token\r\n     * @param _target The escrow account address, all ethers will\r\n     * be sent to this address.\r\n     *\r\n     */\r\n    function EFFToken(address _target) {\r\n        target = _target;\r\n        totalSupply = 10 ** 16;\r\n        balances[target] = totalSupply;\r\n    }\r\n\r\n    /*\r\n     * PUBLIC FUNCTIONS\r\n     */\r\n\r\n    /// @dev Start the token sale.\r\n    /// @param _firstblock The block from which the sale will start.\r\n    function start(uint _firstblock) public onlyOwner beforeStart {\r\n        if (_firstblock <= block.number) {\r\n            // Must specify a block in the future.\r\n            throw;\r\n        }\r\n\r\n        firstblock = _firstblock;\r\n        SaleStarted();\r\n    }\r\n\r\n    /// @dev Triggers unsold tokens to be issued to `target` address.\r\n    function close() public onlyOwner afterEnd {\r\n        if (totalEthReceived < GOAL) {\r\n            SaleFailed();\r\n        } else {\r\n            SaleSucceeded();\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the current price.\r\n    function price() public constant returns (uint tokens) {\r\n        return computeTokenAmount(1 ether);\r\n    }\r\n\r\n    /// @dev This default function allows token to be purchased by directly\r\n    /// sending ether to this smart contract.\r\n    function () payable {\r\n        issueToken(msg.sender);\r\n    }\r\n\r\n    /// @dev Issue token based on Ether received.\r\n    /// @param recipient Address that newly issued token will be sent to.\r\n    function issueToken(address recipient) payable inProgress {\r\n        // We only accept minimum purchase of 0.01 ETH.\r\n        assert(msg.value >= 0.01 ether);\r\n\r\n        // We only accept maximum purchase of 35 ETH.\r\n        assert(msg.value <= 35 ether);\r\n\r\n        // We only accept totalEthReceived < HARD_CAP\r\n        uint ethReceived = totalEthReceived + msg.value;\r\n        assert(ethReceived <= HARD_CAP);\r\n\r\n        uint tokens = computeTokenAmount(msg.value);\r\n        totalEthReceived = totalEthReceived.add(msg.value);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n        balances[target] = balances[target].sub(tokens);\r\n\r\n        Issue(\r\n            issueIndex++,\r\n            recipient,\r\n            msg.value,\r\n            tokens\r\n        );\r\n\r\n        if (!target.send(msg.value)) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * INTERNAL FUNCTIONS\r\n     */\r\n  \r\n    /// @dev Compute the amount of EFF token that can be purchased.\r\n    /// @param ethAmount Amount of Ether to purchase EFF.\r\n    /// @return Amount of EFF token to purchase\r\n    function computeTokenAmount(uint ethAmount) internal constant returns (uint tokens) {\r\n        uint phase = (block.number - firstblock).div(BLOCKS_PER_PHASE);\r\n\r\n        // A safe check\r\n        if (phase >= bonusPercentages.length) {\r\n            phase = bonusPercentages.length - 1;\r\n        }\r\n\r\n        uint tokenBase = ethAmount.mul(BASE_RATE);\r\n        uint tokenBonus = tokenBase.mul(bonusPercentages[phase]).div(100);\r\n\r\n        tokens = tokenBase.add(tokenBonus);\r\n    }\r\n\r\n    /// @return true if sale has started, false otherwise.\r\n    function saleStarted() constant returns (bool) {\r\n        return (firstblock > 0 && block.number >= firstblock);\r\n    }\r\n\r\n    /// @return true if sale has ended, false otherwise.\r\n    function saleEnded() constant returns (bool) {\r\n        return firstblock > 0 && (saleDue() || hardCapReached());\r\n    }\r\n\r\n    /// @return true if sale is due when the last phase is finished.\r\n    function saleDue() constant returns (bool) {\r\n        return block.number >= firstblock + BLOCKS_PER_PHASE * NUM_OF_PHASE;\r\n    }\r\n\r\n    /// @return true if the hard cap is reached.\r\n    function hardCapReached() constant returns (bool) {\r\n        return totalEthReceived >= HARD_CAP;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusPercentages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLOCKS_PER_PHASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issueIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"issueToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_firstblock\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsoldTokenIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleDue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUM_OF_PHASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstblock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InvalidCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"bytes\"}],\"name\":\"InvalidState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issueIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"EFFToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000c2512952370fbd6a95a8073080dbc97a15b0ec3","Library":"","SwarmSource":"bzzr://29cd68c8f2698341c0227f2bad5c52dcb20a38b77f2532fd0afea4d3f0a86855"}]}