{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n  \r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract LotteryData is Ownable{\r\n    address[] public players;\r\n    address[] public inviters;\r\n    uint256[] public tickets;\r\n    uint256[] public miniTickets;\r\n    uint256[] public benzTickets;\r\n    uint256[] public porscheTickets;\r\n    \r\n\r\n    mapping (address => uint256) public playerID;\r\n    mapping (address => uint256) public inviterID;\r\n    mapping (uint256 => address) public ticketToOwner;\r\n    mapping (uint256 => address) public miniToOwner;\r\n    mapping (uint256 => address) public benzToOwner;\r\n    mapping (uint256 => address) public porscheToOwner; \r\n    mapping (address => uint256) ownerTicketCount;\r\n    mapping (address => uint256) ownerMiniCount;\r\n    mapping (address => uint256) ownerBenzCount;\r\n    mapping (address => uint256) ownerPorscheCount;\r\n\r\n    //Bears prop\r\n    mapping (address => address) inviter;//invitee => inviter\r\n    mapping (address => uint256) inviteeCount;//邀请总数\r\n    mapping (address => uint256) inviteeAccumulator;//邀请总额\r\n \r\n    mapping (address => uint256) public ownerAccWei;//投资wei总额\r\n    mapping (address => uint8) ownerTeam;//0:bull 1:wolf 2:bear\r\n    mapping (address => bool) public invalidPlayer;//false:valid true:invalid\r\n    mapping (uint256 => bool) internal invalidPhone;\r\n    mapping (uint256 => bool) internal invalidMini;\r\n    mapping (uint256 => bool) internal invalidBenz;\r\n    mapping (uint256 => bool) internal invalidPorsche;\r\n\r\n    \r\n    //Prize\r\n    uint256[] internal phones;\r\n    uint256[] internal phoneType;\r\n    uint256 public miniWinner;\r\n    uint256 public benzWinner;\r\n    uint256 public porscheWinner;\r\n\r\n    uint256 internal totalWei;\r\n    uint256 internal accumulatedWei;\r\n    uint256 internal accumulatedPlayer;\r\n    uint256 internal accumulatedInvitor;\r\n    uint256 public invalidTicketCount;\r\n    uint256 public invalidMiniTicketCount;\r\n    uint256 public invalidBenzTicketCount;\r\n    uint256 public invalidPorscheTicketCount;\r\n    //Events\r\n    event Invalidate(address player, uint256 soldAmount, address inviter);\r\n    event DrawPhone(uint256 id, address luckyOne, uint256 prizeType);\r\n    event DrawMini(address luckyOne);\r\n    event DrawBenz(address luckyOne);\r\n    event DrawPorsche(address luckyOne);\r\n}\r\n\r\ncontract LotteryExternal is LotteryData{\r\n    using SafeMath for uint256;\r\n\r\n    //ADMIN SET\r\n    function setTeamByAddress(uint8 team, address player)\r\n        external\r\n        onlyOwner\r\n    {\r\n        ownerTeam[player] = team;\r\n    }\r\n\r\n    //使用户失效\r\n    function invalidate(address player, uint256 soldAmount)\r\n        external \r\n        onlyOwner \r\n    {\r\n        invalidPlayer[player] = true;\r\n        address supernode = inviter[player];\r\n        ownerAccWei[player] = ownerAccWei[player].sub(soldAmount);\r\n        totalWei = totalWei.sub(soldAmount);\r\n        \r\n        inviteeCount[supernode] = inviteeCount[supernode].sub(1);\r\n        inviteeAccumulator[supernode] = inviteeAccumulator[supernode].sub(soldAmount);\r\n        invalidTicketCount = invalidTicketCount.add(ownerTicketCount[player]);\r\n        invalidMiniTicketCount = invalidMiniTicketCount.add(ownerMiniCount[player]);\r\n        invalidBenzTicketCount = invalidBenzTicketCount.add(ownerBenzCount[player]);\r\n        invalidPorscheTicketCount = invalidPorscheTicketCount.add(ownerPorscheCount[player]);\r\n        desposeBear(supernode);\r\n        emit Invalidate(player, soldAmount, supernode);\r\n    }\r\n    \r\n    //有人失效后,判断推荐人获得抽奖号资格低于一半时就使抽奖号失效\r\n    function desposeBear(address player)\r\n        public\r\n        onlyOwner\r\n    {\r\n        uint256 gotTickets = inviteeCount[player].div(10) + ownerAccWei[player].div(10**16);\r\n        uint256 gotMTickets = inviteeCount[player].div(100);\r\n        uint256 gotBTickets = inviteeCount[player].div(200);\r\n        uint256 gotPTickets = inviteeCount[player].div(400);\r\n\r\n        if(inviteeAccumulator[player].div(10**17)+ownerAccWei[player].div(10**16) >= gotTickets){\r\n            gotTickets = inviteeAccumulator[player].div(10**17)+ownerAccWei[player].div(10**16);\r\n        }\r\n        if(inviteeAccumulator[player].div(((10**18)*5)) >= gotMTickets){\r\n            gotMTickets = inviteeAccumulator[player].div(((10**18)*5));\r\n        }\r\n        if(inviteeAccumulator[player].div(((10**18)*10)) >= gotBTickets){\r\n            gotBTickets = inviteeAccumulator[player].div(((10**18)*10));\r\n        }\r\n        if(inviteeAccumulator[player].div(((10**18)*20)) >= gotPTickets){\r\n            gotPTickets = inviteeAccumulator[player].div(((10**18)*20));\r\n        }\r\n\r\n        if(ownerTicketCount[player] > gotTickets){\r\n            for (uint8 index = 0; index < getTicketsByOwner(player).length; index++) {\r\n                if(invalidPhone[getTicketsByOwner(player)[index]] == false){\r\n                    invalidPhone[getTicketsByOwner(player)[index]] = true;\r\n                    break;\r\n                }\r\n            }\r\n            invalidTicketCount = invalidTicketCount.add(ownerTicketCount[player].sub(gotTickets));\r\n        }\r\n        if(ownerMiniCount[player] > gotMTickets){\r\n            for (uint8 miniIndex = 0; miniIndex < getMiniByOwner(player).length; miniIndex++) {\r\n                if(invalidPhone[getMiniByOwner(player)[miniIndex]] == false){\r\n                    invalidPhone[getMiniByOwner(player)[miniIndex]] = true;\r\n                    break;\r\n                }\r\n            }\r\n            invalidMiniTicketCount = invalidMiniTicketCount.add(ownerMiniCount[player].sub(gotMTickets));\r\n        }\r\n        if(ownerBenzCount[player] > gotBTickets){\r\n            for (uint8 benzIndex = 0; benzIndex < getBenzByOwner(player).length; benzIndex++) {\r\n                if(invalidPhone[getBenzByOwner(player)[benzIndex]] == false){\r\n                    invalidPhone[getBenzByOwner(player)[benzIndex]] = true;\r\n                    break;\r\n                }\r\n            }\r\n            invalidBenzTicketCount = invalidBenzTicketCount.add(ownerBenzCount[player].sub(gotBTickets));\r\n        }\r\n        if(ownerPorscheCount[player] > gotPTickets){\r\n            for (uint8 porsIndex = 0; porsIndex < getPorscheByOwner(player).length; porsIndex++) {\r\n                if(invalidPhone[getPorscheByOwner(player)[porsIndex]] == false){\r\n                    invalidPhone[getPorscheByOwner(player)[porsIndex]] = true;\r\n                    break;\r\n                }\r\n            }\r\n            invalidPorscheTicketCount = invalidPorscheTicketCount.add(ownerPorscheCount[player].sub(gotPTickets));\r\n\r\n        }\r\n    }\r\n\r\n    //获取用户所有手机抽奖码\r\n    function getTicketsByOwner(address _owner) \r\n        public \r\n        view \r\n    returns(uint[]) \r\n    {\r\n        uint[] memory result = new uint[](ownerTicketCount[_owner]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < tickets.length; i++) {\r\n            if (ticketToOwner[i] == _owner) {\r\n                result[counter] = i + 1;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    //获取用户mini抽奖码\r\n    function getMiniByOwner(address _owner) \r\n        public \r\n        view \r\n    returns(uint[]) \r\n    {\r\n        uint[] memory result = new uint[](ownerMiniCount[_owner]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < miniTickets.length; i++) {\r\n            if (miniToOwner[i] == _owner) {\r\n                result[counter] = i + 1;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    //获取用户benz抽奖码\r\n    function getBenzByOwner(address _owner) \r\n        public \r\n        view \r\n    returns(uint[]) \r\n    {\r\n        uint[] memory result = new uint[](ownerBenzCount[_owner]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < benzTickets.length; i++) {\r\n            if (benzToOwner[i] == _owner) {\r\n                result[counter] = i + 1;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    //获取用户porsche抽奖码\r\n    function getPorscheByOwner(address _owner) \r\n        public \r\n        view \r\n    returns(uint[]) \r\n    {\r\n        uint[] memory result = new uint[](ownerPorscheCount[_owner]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < porscheTickets.length; i++) {\r\n            if (porscheToOwner[i] == _owner) {\r\n                result[counter] = i + 1;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getPrizes()\r\n        external\r\n        view\r\n    returns (uint256[]) \r\n    {\r\n        return phones;\r\n    }\r\n\r\n    function getPlayerInfo(address player)\r\n        external\r\n        view\r\n        returns(uint256, uint, bool, address, uint256, uint256)\r\n    {\r\n        return(\r\n            ownerAccWei[player],\r\n            ownerTeam[player],\r\n            invalidPlayer[player],\r\n            //Just For Bears\r\n            inviter[player],\r\n            inviteeCount[player],\r\n            inviteeAccumulator[player]\r\n        );\r\n    }\r\n\r\n    function getAccumulator()\r\n        external\r\n        view\r\n        returns(uint256, uint256, uint256, uint256)\r\n    {\r\n        return(totalWei, accumulatedWei, accumulatedPlayer, accumulatedInvitor);\r\n    }\r\n\r\n    function getRate()\r\n        external\r\n        view\r\n        returns(uint256, uint256, uint256, uint256)\r\n    {\r\n        return (\r\n            tickets.length - invalidTicketCount,\r\n            miniTickets.length - invalidMiniTicketCount,\r\n            benzTickets.length - invalidBenzTicketCount,\r\n            porscheTickets.length - invalidPorscheTicketCount\r\n        );\r\n    }\r\n}\r\n\r\ncontract LotteryDraw is LotteryExternal{\r\n    //增加抽奖号\r\n    function createTicket(address player, uint count) \r\n        public \r\n        onlyOwner\r\n    {\r\n        for(uint i = 0;i < count;i++){\r\n            uint256 ticket = tickets.push(tickets.length+1)-1;\r\n            ticketToOwner[ticket] = player;\r\n            ownerTicketCount[player] = ownerTicketCount[player].add(1);\r\n        }\r\n    }\r\n\r\n    //增加Mini抽奖号\r\n    function createMiniTicket(address player, uint count)\r\n        public \r\n        onlyOwner\r\n    {\r\n        for(uint i = 0;i < count;i++){\r\n            uint256 ticket = miniTickets.push(miniTickets.length+1)-1;\r\n            miniToOwner[ticket] = player;\r\n            ownerMiniCount[player] = ownerMiniCount[player].add(1);\r\n        }\r\n    }\r\n\r\n    //增加Benz抽奖号\r\n    function createBenzTicket(address player, uint count) \r\n        public \r\n        onlyOwner\r\n    {\r\n        for(uint i = 0;i < count;i++){\r\n            uint256 ticket = benzTickets.push(benzTickets.length+1)-1;\r\n            benzToOwner[ticket] = player;\r\n            ownerBenzCount[player] = ownerBenzCount[player].add(1);\r\n        }\r\n    }\r\n\r\n    //增加Porsche抽奖号\r\n    function createPorscheTicket(address player, uint count) \r\n        public \r\n        onlyOwner\r\n    {\r\n        for(uint i = 0;i < count;i++){\r\n            uint256 ticket = porscheTickets.push(porscheTickets.length+1)-1;\r\n            porscheToOwner[ticket] = player;\r\n            ownerPorscheCount[player] = ownerPorscheCount[player].add(1);\r\n        }\r\n    }\r\n\r\n    //Draw\r\n    function drawPhone()\r\n        external\r\n        onlyOwner\r\n    returns (bool)\r\n    {\r\n        uint256 lucky = luckyOne(tickets.length);\r\n        if(invalidPlayer[ticketToOwner[lucky]] == true) {\r\n            return false;\r\n        }\r\n        else if(invalidPhone[lucky] == true){\r\n            return false;\r\n        }\r\n        else{\r\n            phones.push(lucky);\r\n            uint256 prizeType = luckyOne(3);\r\n            phoneType.push(prizeType);\r\n            emit DrawPhone(phones.length, ticketToOwner[lucky], prizeType);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function drawMini()\r\n        external\r\n        onlyOwner\r\n    returns (bool)\r\n    {\r\n        uint256 lucky = luckyOne(miniTickets.length);\r\n        if(invalidPlayer[miniToOwner[lucky]] == true) {\r\n            return false;\r\n        }else if(invalidMini[lucky] == true){\r\n            return false;\r\n        }\r\n        else{\r\n            miniWinner = lucky;\r\n            emit DrawMini(miniToOwner[lucky]);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function drawBenz()\r\n        external\r\n        onlyOwner\r\n    returns (bool)\r\n    {\r\n        uint256 lucky = luckyOne(benzTickets.length);\r\n        if(invalidPlayer[benzToOwner[lucky]] == true) {\r\n            return false;\r\n        }else if(invalidBenz[lucky] == true){\r\n            return false;\r\n        }\r\n        else{\r\n            benzWinner = lucky;\r\n            emit DrawBenz(benzToOwner[lucky]);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function drawPorsche()\r\n        external\r\n        onlyOwner\r\n    returns (bool)\r\n    {\r\n        uint256 lucky = luckyOne(porscheTickets.length);\r\n        if(invalidPlayer[porscheToOwner[lucky]] == true) {\r\n            return false;\r\n        }else if(invalidPorsche[lucky] == true){\r\n            return false;\r\n        }\r\n        else{\r\n            porscheWinner = lucky;\r\n            emit DrawPorsche(porscheToOwner[lucky]);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    //For testing the random function\r\n    function rollIt()\r\n        public\r\n        onlyOwner\r\n    returns (bool)\r\n    {\r\n        uint256 lucky = luckyOne(tickets.length);\r\n        if(invalidPlayer[ticketToOwner[lucky]] == true) {\r\n            return false;\r\n        }else{\r\n            phones.push(lucky);\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n    function luckyOne(uint256 candidate)\r\n        public\r\n        view\r\n    returns (uint256)\r\n    {\r\n        uint256 seed = uint256(\r\n            keccak256(  \r\n                abi.encodePacked(\r\n            (block.timestamp).add\r\n            (block.difficulty).add\r\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\r\n            (block.gaslimit).add\r\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\r\n            (block.number)\r\n        )));\r\n        uint256 lucky = seed % candidate;\r\n        return lucky;\r\n    }\r\n}\r\n\r\ncontract Lottery is LotteryDraw{\r\n    using SafeMath for uint256;\r\n    //Test\r\n    function setInviteeAccumulator(address player, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        inviteeAccumulator[player] = amount;\r\n        updateBearCount(player);\r\n    }\r\n\r\n    function setInviteeCount(address player, uint256 count)\r\n        external\r\n        onlyOwner\r\n    {\r\n        inviteeCount[player] = count;\r\n        updateBearCount(player);\r\n    }\r\n\r\n        //ADMIN SET\r\n    function setTeamByAddress(uint8 team, address player)\r\n        external\r\n        onlyOwner\r\n    {\r\n        ownerTeam[player] = team;\r\n    }\r\n\r\n    //更新用户累计购买以太\r\n    function updatePlayerEth(address player,uint256 weiAmount, address supernode)\r\n        external\r\n        onlyOwner\r\n    returns (uint256)\r\n    {\r\n        if(playerID[player] == 0){\r\n            accumulatedPlayer = accumulatedPlayer.add(1);\r\n            playerID[player] = accumulatedPlayer;\r\n        }\r\n        ownerAccWei[player] = ownerAccWei[player].add(weiAmount);\r\n        totalWei = totalWei.add(weiAmount);\r\n        accumulatedWei = accumulatedWei.add(weiAmount);\r\n        //为邀请人增加\r\n        inviter[player] = supernode;\r\n        inviteeCount[supernode] = inviteeCount[supernode].add(1);\r\n        inviteeAccumulator[supernode] = inviteeAccumulator[supernode].add(weiAmount);\r\n        if(inviterID[supernode] == 0){\r\n            accumulatedInvitor = accumulatedInvitor.add(1);\r\n            inviterID[supernode] = accumulatedInvitor;\r\n        }\r\n\r\n        if(ownerTeam[player] == 0) {\r\n            //牛队\r\n            uint256 gotMTickets = ownerAccWei[player].div(10**18);\r\n            uint256 gotBTickets = ownerAccWei[player].div(10**18).div(2);\r\n            uint256 gotPTickets = ownerAccWei[player].div(10**18).div(5);\r\n\r\n            createMiniTicket(player, gotMTickets - ownerMiniCount[player]);\r\n            createBenzTicket(player, gotBTickets - ownerBenzCount[player]);\r\n            createPorscheTicket(player, gotPTickets - ownerPorscheCount[player]);\r\n        }else if(ownerTeam[player] == 1) {\r\n            //狼队//龙队\r\n            uint256 gotTickets = ownerAccWei[player].div(10**16);\r\n            createTicket(player, gotTickets - ownerTicketCount[player]);\r\n            \r\n        } \r\n        if(ownerTeam[player] == 2){\r\n            uint256 gotPhones = ownerAccWei[player].div(10**16);\r\n            createTicket(player, gotPhones - ownerTicketCount[player]);\r\n            updateBearCount(player);\r\n        }\r\n        return ownerAccWei[player];\r\n    } \r\n\r\n    function updateBearCount(address player)\r\n        public\r\n        onlyOwner\r\n    {\r\n        if(ownerAccWei[player] < 10**16){\r\n            return;\r\n        }\r\n\r\n        uint256 gotTickets = inviteeCount[player].div(10) + ownerAccWei[player].div(10**16);\r\n        uint256 gotMTickets = inviteeCount[player].div(100);\r\n        uint256 gotBTickets = inviteeCount[player].div(200);\r\n        uint256 gotPTickets = inviteeCount[player].div(400);\r\n\r\n        if(inviteeAccumulator[player].div(10**17) >= gotTickets){\r\n            gotTickets = inviteeAccumulator[player].div(10**17)+ownerAccWei[player].div(10**16);\r\n        }\r\n        if(inviteeAccumulator[player].div(((10**18)*5)) >= gotMTickets){\r\n            gotMTickets = inviteeAccumulator[player].div(((10**18)*5));\r\n        }\r\n        if(inviteeAccumulator[player].div(((10**18)*10)) >= gotBTickets){\r\n            gotBTickets = inviteeAccumulator[player].div(((10**18)*10));\r\n        }\r\n        if(inviteeAccumulator[player].div(((10**18)*20)) >= gotPTickets){\r\n            gotPTickets = inviteeAccumulator[player].div(((10**18)*20));\r\n        }\r\n\r\n        createTicket(player, gotTickets - ownerTicketCount[player]);\r\n        createMiniTicket(player, gotMTickets - ownerMiniCount[player]);\r\n        createBenzTicket(player, gotBTickets - ownerBenzCount[player]);\r\n        createPorscheTicket(player, gotPTickets - ownerPorscheCount[player]);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getMiniByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"benzWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"soldAmount\",\"type\":\"uint256\"}],\"name\":\"invalidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drawPhone\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"createTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setInviteeAccumulator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBenzByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"benzTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getPorscheByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invalidPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"porscheTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"createPorscheTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTicketsByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"uint256\"}],\"name\":\"luckyOne\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"porscheToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"benzToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invalidPorscheTicketCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inviters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invalidMiniTicketCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"createBenzTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miniWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drawPorsche\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"team\",\"type\":\"uint8\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"setTeamByAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drawMini\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drawBenz\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"updateBearCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rollIt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"desposeBear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"supernode\",\"type\":\"address\"}],\"name\":\"updatePlayerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerAccWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invalidTicketCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"createMiniTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"porscheWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrizes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invalidBenzTicketCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setInviteeCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccumulator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"soldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"Invalidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"luckyOne\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prizeType\",\"type\":\"uint256\"}],\"name\":\"DrawPhone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"luckyOne\",\"type\":\"address\"}],\"name\":\"DrawMini\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"luckyOne\",\"type\":\"address\"}],\"name\":\"DrawBenz\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"luckyOne\",\"type\":\"address\"}],\"name\":\"DrawPorsche\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9831c7f0a04d2a350f8b5eb7789b92005ab0f732ded90a835d2e27ade41346ee"}]}