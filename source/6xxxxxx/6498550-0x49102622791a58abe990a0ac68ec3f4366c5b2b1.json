{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath \r\n{\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c  / a == b);\r\n        return c;\r\n    }\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        return a  / b;\r\n    }\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Owner\r\n{\r\n    address internal owner;\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function changeOwner(address newOwner) public onlyOwner returns(bool)\r\n    {\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract EagleEvent {\r\n\tevent onEventDeposit (\r\n\t\taddress indexed who,\r\n\t\tuint256 indexed value\r\n\t);\r\n\t\r\n\tevent onEventWithdraw (\r\n\t\taddress indexed who,\r\n\t\taddress indexed to,\r\n\t\tuint256 indexed value\r\n\t);\r\n\t\r\n\tevent onEventWithdrawLost (\r\n\t\taddress indexed from,\r\n\t\taddress indexed to,\r\n\t\tuint256 indexed value\r\n\t);\r\n\t\r\n\tevent onEventReport (\r\n\t\taddress indexed from,\r\n\t\taddress indexed to\r\n\t);\r\n\t\r\n\tevent onEventVerify (\r\n\t\taddress indexed from\r\n\t);\r\n\t\r\n\tevent onEventReset (\r\n\t\taddress indexed from\r\n\t);\r\n\t\r\n\tevent onEventUnlock (\r\n\t\taddress indexed from\r\n\t);\r\n}\r\n\r\ncontract Eagle is Owner, EagleEvent\r\n{\r\n\t//State\r\n\tenum State {\r\n\t\tNormal, Report, Verify, Lock\r\n\t}\r\n\tusing SafeMath for uint256;\r\n\tuint256 public constant withdraw_fee = 600000000000000;  // 0.0006eth for every withdraw\r\n\tuint256 public constant withdraw_fee_lost = 10000000000000000; // 0.01eth for withdraw after lost\r\n\tuint256 public constant report_lock = 100000000000000000; // 0.1eth for report, cost for some malicious attacks.\r\n\t//core data\r\n\tmapping(address => uint256) public balances;\r\n\tmapping(address => State) public states;\r\n\tmapping(address => uint) public verifytimes;\r\n\tmapping(address => address) public tos;\r\n\tmapping(address => bytes) public signs;\r\n\t\r\n\tconstructor() public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t}\r\n\t\r\n\tfunction getbalance(address _owner) public view returns(uint256)\r\n\t{\r\n\t\treturn balances[_owner];\r\n\t}\r\n\t\r\n\tfunction getstate(address _owner) public view returns(State)\r\n\t{\r\n\t\treturn states[_owner];\r\n\t}\r\n\t\r\n\tfunction getverifytime(address _owner) public view returns(uint)\r\n\t{\r\n\t\treturn verifytimes[_owner];\r\n\t}\r\n\t\r\n\t//deposit\r\n\tfunction () public payable\r\n\t{\r\n\t\trequire(states[msg.sender] == State.Normal);\r\n\t\tbalances[msg.sender] = balances[msg.sender].add(msg.value);\r\n\t\temit onEventDeposit(msg.sender, msg.value.div(100000000000000));\r\n\t}\r\n\t\r\n\t//withdraw\r\n\tfunction withdraw(address _to, uint256 _value) public\r\n\t{\r\n\t\trequire(states[msg.sender] != State.Lock);\r\n\t\trequire(balances[msg.sender] >= _value.add(withdraw_fee));\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value.add(withdraw_fee));\r\n\t\t_to.transfer(_value);\r\n\t\towner.transfer(withdraw_fee);\r\n\t\temit onEventWithdraw(msg.sender, _to, _value.div(100000000000000));\r\n\t}\r\n\t\r\n\t//withdraw for loss\r\n\tfunction withdrawloss(address _from, address _to) public\r\n\t{\r\n\t\trequire(_to == msg.sender);\r\n\t\trequire(tos[_from] == _to);\r\n\t\trequire(states[_from] == State.Verify);\r\n\t\trequire(states[_to] == State.Normal);\r\n\t\t//check verify time\r\n\t\trequire(now >= verifytimes[_from] + 5 days);\r\n\t\trequire(balances[_from] >= withdraw_fee_lost);\r\n\t\t\r\n\t\temit onEventWithdrawLost(_from, _to, balances[_from].div(100000000000000));\r\n\t\t\r\n\t\towner.transfer(withdraw_fee_lost);\r\n\t\tbalances[_to] = balances[_to].add(balances[_from]).sub(withdraw_fee_lost);\r\n\t\tbalances[_from] = 0;\r\n\t\tstates[_from] = State.Normal;\r\n\t\tverifytimes[_from] = 0;\r\n\t\ttos[_from] = 0;\r\n\t}\r\n\t\r\n\t//report \r\n\tfunction report(address _from, address _to, bytes _sign) public\r\n\t{\r\n\t\trequire(_to == msg.sender);\r\n\t\trequire(states[_from] == State.Normal);\r\n\t\trequire(balances[_to] >= report_lock);\r\n\t\trequire(states[_to] == State.Normal);\r\n\t\tsigns[_from] = _sign;\r\n\t\ttos[_from] = _to;\r\n\t\tstates[_from] = State.Report;\r\n\t\tstates[_to] = State.Lock;\r\n\t\t\r\n\t\temit onEventReport(_from, _to);\r\n\t}\r\n\t\r\n\t//verify\r\n\tfunction verify(address _from, bytes _id) public\r\n\t{\r\n\t\trequire(states[_from] == State.Report);\r\n\t\tbytes memory signedstr = signs[_from];\r\n\t\tbytes32 hash = keccak256(_id);\r\n\t\thash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n\t\tbytes32 r;\r\n\t\tbytes32 s;\r\n\t\tuint8 v;\r\n\t\taddress addr;\r\n\t\tif (signedstr.length != 65) {\r\n\t\t\taddr = 0;\r\n\t\t} else {\r\n\t\t\tassembly {\r\n\t\t\t\tr := mload(add(signedstr, 32))\r\n\t\t\t\ts := mload(add(signedstr, 64))\r\n\t\t\t\tv := and(mload(add(signedstr, 65)), 255)\r\n\t\t\t}\r\n\t\t\tif(v < 27) {\r\n\t\t\t\tv += 27;\r\n\t\t\t}\r\n\t\t\tif(v != 27 && v != 28) {\r\n\t\t\t\taddr = 0;\r\n\t\t\t} else {\r\n\t\t\t\taddr = ecrecover(hash, v, r, s);\r\n\t\t\t}\r\n\t\t}\r\n\t\trequire(addr == _from);\r\n\t\tverifytimes[_from] = now;\r\n\t\tstates[_from] = State.Verify;\r\n\t\tstates[tos[_from]] = State.Normal;\r\n\t\t\r\n\t\temit onEventVerify(_from);\r\n\t}\r\n\t\r\n\t// reset the user's state for some malicious attacks\r\n\tfunction resetState(address _from) public onlyOwner\r\n\t{\r\n\t\trequire(states[_from] == State.Report || states[_from] == State.Lock);\r\n\t\tif(states[_from] == State.Report) {\r\n\t\t\tstates[_from] = State.Normal;\r\n\t\t\tverifytimes[_from] = 0;\r\n\t\t\ttos[_from] = 0;\r\n\t\t\temit onEventReset(_from);\r\n\t\t} else if(states[_from] == State.Lock) {\r\n\t\t\tstates[_from] = State.Normal;\r\n\t\t\tbalances[_from] = balances[_from].sub(report_lock);\r\n\t\t\towner.transfer(report_lock);\r\n\t\t\temit onEventUnlock(_from);\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"states\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"resetState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signs\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdraw_fee_lost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"report\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawloss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"report_lock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getstate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"verifytimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tos\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getverifytime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdraw_fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"onEventDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"onEventWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"onEventWithdrawLost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"onEventReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"onEventVerify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"onEventReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"onEventUnlock\",\"type\":\"event\"}]","ContractName":"Eagle","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://65c1f057ae0d8a8c7608a1ba403aee5748bda2231c4dec1fd76fab52153a1fc7"}]}