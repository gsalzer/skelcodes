{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract tokenInterface{\r\n    uint256 public totalSupply;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    string public name;\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf( address who ) public view returns (uint value);\r\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Owned{\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the contract ownership\r\n        the new owner still need to accept the transfer\r\n        can only be called by the contract owner\r\n\r\n        @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n        @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n}\r\n\r\ncontract BITCC_Account_Policy is Owned{\r\n    tokenInterface private tokenLedger;\r\n    string public clause;\r\n    string private oldClause;\r\n    struct Policy {\r\n        uint256 since;\r\n        uint256 policyNum;\r\n        uint256 amount;\r\n    }\r\n\r\n    uint256 public policyActiveNum=0;\r\n    \r\n    mapping (uint256 => uint256) policyInternalID;\r\n    // policies[policyInternalID[policyNum]]\r\n    Policy[] public policies;\r\n    \r\n    event ClauseUpdate(string _prevClause, string _newClause);\r\n    event WelcomePolicy(uint256 holder, uint256 month_num);\r\n    \r\n    constructor(address token, string memory clauseTx) public{\r\n        tokenLedger=tokenInterface(token);\r\n        clause=clauseTx;\r\n        addPolicy(0,0);\r\n    }\r\n    \r\n    function changeClause(string memory clauseTx) public onlyOwner returns(bool){\r\n        oldClause=clause;\r\n        clause=clauseTx;\r\n        emit ClauseUpdate(oldClause,clause);\r\n        return true;\r\n    }\r\n    \r\n    function acceptPolicyNum(uint256[] memory policyNums, uint256[] memory amounts) public onlyOwner returns(bool){\r\n        require(policyNums.length == amounts.length);\r\n        uint i;\r\n        for (i=0;i<policyNums.length;i++){\r\n            uint256 id=policyInternalID[policyNums[i]];\r\n            if (id == 0) {\r\n                id = policies.length;\r\n                policyInternalID[policyNums[i]] = id;\r\n                if(!addPolicy(policyNums[i],amounts[i])){revert();}\r\n                emit WelcomePolicy(policyNums[i],amounts[i]);\r\n                policyActiveNum++;\r\n            }\r\n            \r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function addPolicy(uint256 policyNum,uint256 amount) internal returns(bool){\r\n        policies.length++;\r\n        policies[policies.length-1].since = now; // + 3 days\r\n        policies[policies.length-1].policyNum = policyNum;\r\n        policies[policies.length-1].amount = amount;\r\n        return true;\r\n    }\r\n    \r\n    function policyID(uint256 policyNum) public view returns (uint id){\r\n        return policyInternalID[policyNum];\r\n    }\r\n    \r\n    function tokenDecimals() public view returns(uint8){\r\n        return tokenLedger.decimals();\r\n    }\r\n    \r\n    function tokenTotalSupply() public view returns(uint256){\r\n        return tokenLedger.totalSupply();\r\n    }\r\n    \r\n    function tokenSymbol() public view returns(string memory){\r\n        return tokenLedger.symbol();\r\n    }\r\n    \r\n    function partyBName() public view returns(string memory){\r\n        return tokenLedger.name();\r\n    }\r\n    \r\n    function claimTokens(address _token) onlyOwner public {\r\n        require(_token != address(0));\r\n\r\n        ERC20 token = ERC20(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n        token.transfer(owner, balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"policyActiveNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clauseTx\",\"type\":\"string\"}],\"name\":\"changeClause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partyBName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clause\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"policyNum\",\"type\":\"uint256\"}],\"name\":\"policyID\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"policies\",\"outputs\":[{\"name\":\"since\",\"type\":\"uint256\"},{\"name\":\"policyNum\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"policyNums\",\"type\":\"uint256[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"acceptPolicyNum\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"clauseTx\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevClause\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_newClause\",\"type\":\"string\"}],\"name\":\"ClauseUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"month_num\",\"type\":\"uint256\"}],\"name\":\"WelcomePolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"BITCC_Account_Policy","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000007a58629aaf3e1a0d07d8f43114b76bd5eee3b910000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000005a68747470733a2f2f65746865727363616e2e696f2f74782f307832363034363135623136306335626361643761353831616136303630316338313737313835356166393266633736613634306335663438356532643865363565000000000000","Library":"","SwarmSource":"bzzr://4203b3848026f7ecbba4de63ce89874e1131eb69a260d7dd5bc94613bb22bd0d"}]}