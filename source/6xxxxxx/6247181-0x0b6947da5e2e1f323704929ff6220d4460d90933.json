{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface ERC721 /* is ERC165 */ {\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    /// @dev This emits when the approved address for an NFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that NFT (if any) is reset to none.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all NFTs of the owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @notice Count all NFTs assigned to an owner\r\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _owner An address for whom to query the balance\r\n    /// @return The number of NFTs owned by `_owner`, possibly zero\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    /// @notice Find the owner of an NFT\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @param _tokenId The identifier for an NFT\r\n    /// @return The address of the owner of the NFT\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\".\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    /// @notice Change or reaffirm the approved address for an NFT\r\n    /// @dev The zero address indicates there is no approved address.\r\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved NFT controller\r\n    /// @param _tokenId The NFT to approve\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all of `msg.sender`'s assets\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\r\n    ///  multiple operators per owner.\r\n    /// @param _operator Address to add to the set of authorized operators\r\n    /// @param _approved True if the operator is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the NFTs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Operator\r\n * @dev Allow two roles: 'owner' or 'operator'\r\n *      - owner: admin/superuser (e.g. with financial rights)\r\n *      - operator: can update configurations\r\n */\r\ncontract Operator is Ownable {\r\n    address[] public operators;\r\n\r\n    uint public MAX_OPS = 20; // Default maximum number of operators allowed\r\n\r\n    mapping(address => bool) public isOperator;\r\n\r\n    event OperatorAdded(address operator);\r\n    event OperatorRemoved(address operator);\r\n\r\n    // @dev Throws if called by any non-operator account. Owner has all ops rights.\r\n    modifier onlyOperator() {\r\n        require(\r\n            isOperator[msg.sender] || msg.sender == owner,\r\n            \"Permission denied. Must be an operator or the owner.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner or operators to add operators\r\n     * @param _newOperator New operator address\r\n     */\r\n    function addOperator(address _newOperator) public onlyOwner {\r\n        require(\r\n            _newOperator != address(0),\r\n            \"Invalid new operator address.\"\r\n        );\r\n\r\n        // Make sure no dups\r\n        require(\r\n            !isOperator[_newOperator],\r\n            \"New operator exists.\"\r\n        );\r\n\r\n        // Only allow so many ops\r\n        require(\r\n            operators.length < MAX_OPS,\r\n            \"Overflow.\"\r\n        );\r\n\r\n        operators.push(_newOperator);\r\n        isOperator[_newOperator] = true;\r\n\r\n        emit OperatorAdded(_newOperator);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner or operators to remove operator\r\n     * @param _operator Address of the operator to be removed\r\n     */\r\n    function removeOperator(address _operator) public onlyOwner {\r\n        // Make sure operators array is not empty\r\n        require(\r\n            operators.length > 0,\r\n            \"No operator.\"\r\n        );\r\n\r\n        // Make sure the operator exists\r\n        require(\r\n            isOperator[_operator],\r\n            \"Not an operator.\"\r\n        );\r\n\r\n        // Manual array manipulation:\r\n        // - replace the _operator with last operator in array\r\n        // - remove the last item from array\r\n        address lastOperator = operators[operators.length - 1];\r\n        for (uint i = 0; i < operators.length; i++) {\r\n            if (operators[i] == _operator) {\r\n                operators[i] = lastOperator;\r\n            }\r\n        }\r\n        operators.length -= 1; // remove the last element\r\n\r\n        isOperator[_operator] = false;\r\n        emit OperatorRemoved(_operator);\r\n    }\r\n\r\n    // @dev Remove ALL operators\r\n    function removeAllOps() public onlyOwner {\r\n        for (uint i = 0; i < operators.length; i++) {\r\n            isOperator[operators[i]] = false;\r\n        }\r\n        operators.length = 0;\r\n    }\r\n}\r\n\r\ninterface AvatarItemService {\r\n\r\n  function getTransferTimes(uint256 _tokenId) external view returns(uint256);\r\n  function getOwnedItems(address _owner) external view returns(uint256[] _tokenIds);\r\n  \r\n  function getItemInfo(uint256 _tokenId)\r\n    external \r\n    view \r\n    returns(string, string, bool, uint256[4] _attr1, uint8[5] _attr2, uint16[2] _attr3);\r\n\r\n  function isBurned(uint256 _tokenId) external view returns (bool); \r\n  function isSameItem(uint256 _tokenId1, uint256 _tokenId2) external view returns (bool _isSame);\r\n  function getBurnedItemCount() external view returns (uint256);\r\n  function getBurnedItemByIndex(uint256 _index) external view returns (uint256);\r\n  function getSameItemCount(uint256 _tokenId) external view returns(uint256);\r\n  function getSameItemIdByIndex(uint256 _tokenId, uint256 _index) external view returns(uint256);\r\n  function getItemHash(uint256 _tokenId) external view returns (bytes8); \r\n\r\n  function burnItem(address _owner, uint256 _tokenId) external;\r\n  /**\r\n    @param _owner         owner of the token\r\n    @param _founder       founder type of the token \r\n    @param _creator       creator type of the token\r\n    @param _isBitizenItem true is for bitizen or false\r\n    @param _attr1         _atrr1[0] => node   _atrr1[1] => listNumber _atrr1[2] => setNumber  _atrr1[3] => quality\r\n    @param _attr2         _atrr2[0] => rarity _atrr2[1] => socket     _atrr2[2] => gender     _atrr2[3] => energy  _atrr2[4] => ext \r\n    @param _attr3         _atrr3[0] => miningTime  _atrr3[1] => magicFind     \r\n    @return               token id\r\n   */\r\n  function createItem( \r\n    address _owner,\r\n    string _founder,\r\n    string _creator, \r\n    bool _isBitizenItem, \r\n    uint256[4] _attr1,\r\n    uint8[5] _attr2,\r\n    uint16[2] _attr3)\r\n    external  \r\n    returns(uint256 _tokenId);\r\n\r\n  function updateItem(\r\n    uint256 _tokenId,\r\n    bool  _isBitizenItem,\r\n    uint16 _miningTime,\r\n    uint16 _magicFind,\r\n    uint256 _node,\r\n    uint256 _listNumber,\r\n    uint256 _setNumber,\r\n    uint256 _quality,\r\n    uint8 _rarity,\r\n    uint8 _socket,\r\n    uint8 _gender,\r\n    uint8 _energy,\r\n    uint8 _ext\r\n  ) \r\n  external;\r\n}\r\n\r\ncontract AvatarItemOperator is Operator {\r\n\r\n  enum ItemRarity{\r\n    RARITY_LIMITED,\r\n    RARITY_OTEHR\r\n  }\r\n\r\n  event ItemCreated(address indexed _owner, uint256 _itemId, ItemRarity _type);\r\n \r\n  event UpdateLimitedItemCount(bytes8 _hash, uint256 _maxCount);\r\n\r\n  // item hash => max value \r\n  mapping(bytes8 => uint256) internal itemLimitedCount;\r\n  // token id => position\r\n  mapping(uint256 => uint256) internal itemPosition;\r\n  // item hash => index\r\n  mapping(bytes8 => uint256) internal itemIndex;\r\n\r\n  AvatarItemService internal itemService;\r\n  ERC721 internal ERC721Service;\r\n\r\n  constructor() public {\r\n    _setDefaultLimitedItem();\r\n  }\r\n\r\n  function injectItemService(AvatarItemService _itemService) external onlyOwner {\r\n    itemService = AvatarItemService(_itemService);\r\n    ERC721Service = ERC721(_itemService);\r\n  }\r\n\r\n  function getOwnedItems() external view returns(uint256[] _itemIds) {\r\n    return itemService.getOwnedItems(msg.sender);\r\n  }\r\n\r\n  function getItemInfo(uint256 _itemId)\r\n    external \r\n    view \r\n    returns(string, string, bool, uint256[4] _attr1, uint8[5] _attr2, uint16[2] _attr3) {\r\n    return itemService.getItemInfo(_itemId);\r\n  }\r\n\r\n  function getSameItemCount(uint256 _itemId) external view returns(uint256){\r\n    return itemService.getSameItemCount(_itemId);\r\n  }\r\n\r\n  function getSameItemIdByIndex(uint256 _itemId, uint256 _index) external view returns(uint256){\r\n    return itemService.getSameItemIdByIndex(_itemId, _index);\r\n  }\r\n\r\n  function getItemHash(uint256 _itemId) external view  returns (bytes8) {\r\n    return itemService.getItemHash(_itemId);\r\n  }\r\n\r\n  function isSameItem(uint256 _itemId1, uint256 _itemId2) external view returns (bool) {\r\n    return itemService.isSameItem(_itemId1,_itemId2);\r\n  }\r\n\r\n  function getLimitedValue(uint256 _itemId) external view returns(uint256) {\r\n    return itemLimitedCount[itemService.getItemHash(_itemId)];\r\n  }\r\n  // return the item position when get it in all same items\r\n  function getItemPosition(uint256 _itemId) external view returns (uint256 _pos) {\r\n    require(ERC721Service.ownerOf(_itemId) != address(0), \"token not exist\");\r\n    _pos = itemPosition[_itemId];\r\n  }\r\n\r\n  function updateLimitedItemCount(bytes8 _itemBytes8, uint256 _count) public onlyOperator {\r\n    itemLimitedCount[_itemBytes8] = _count;\r\n    emit UpdateLimitedItemCount(_itemBytes8, _count);\r\n  }\r\n  \r\n  function createItem( \r\n    address _owner,\r\n    string _founder,\r\n    string _creator,\r\n    bool _isBitizenItem,\r\n    uint256[4] _attr1,\r\n    uint8[5] _attr2,\r\n    uint16[2] _attr3) \r\n    external \r\n    onlyOperator\r\n    returns(uint256 _itemId) {\r\n    require(_attr3[0] >= 0 && _attr3[0] <= 10000, \"param must be range to 0 ~ 10000 \");\r\n    require(_attr3[1] >= 0 && _attr3[1] <= 10000, \"param must be range to 0 ~ 10000 \");\r\n    _itemId = _mintItem(_owner, _founder, _creator, _isBitizenItem, _attr1, _attr2, _attr3);\r\n  }\r\n\r\n  // add limited item check \r\n  function _mintItem( \r\n    address _owner,\r\n    string _founder,\r\n    string _creator,\r\n    bool _isBitizenItem,\r\n    uint256[4] _attr1,\r\n    uint8[5] _attr2,\r\n    uint16[2] _attr3) \r\n    internal \r\n    returns(uint256) {\r\n    uint256 tokenId = itemService.createItem(_owner, _founder, _creator, _isBitizenItem, _attr1, _attr2, _attr3);\r\n    bytes8 itemHash = itemService.getItemHash(tokenId);\r\n    _saveItemIndex(itemHash, tokenId);\r\n    if(itemLimitedCount[itemHash] > 0){\r\n      require(itemService.getSameItemCount(tokenId) <= itemLimitedCount[itemHash], \"overflow\");  // limited item\r\n      emit ItemCreated(_owner, tokenId, ItemRarity.RARITY_LIMITED);\r\n    } else {\r\n      emit ItemCreated(_owner, tokenId,  ItemRarity.RARITY_OTEHR);\r\n    }\r\n    return tokenId;\r\n  }\r\n\r\n  function _saveItemIndex(bytes8 _itemHash, uint256 _itemId) private {\r\n    itemIndex[_itemHash]++;\r\n    itemPosition[_itemId] = itemIndex[_itemHash];\r\n  }\r\n\r\n  function _setDefaultLimitedItem() private {\r\n    itemLimitedCount[0xc809275c18c405b7] = 3;     //  Pioneer‘s Compass\r\n    itemLimitedCount[0x7cb371a84bb16b98] = 100;   //  Pioneer of the Wild Hat\r\n    itemLimitedCount[0x26a27c8bf9dd554b] = 100;   //  Pioneer of the Wild Top \r\n    itemLimitedCount[0xa8c29099f2421c0b] = 100;   //  Pioneer of the Wild Pant\r\n    itemLimitedCount[0x8060b7c58dce9548] = 100;   //  Pioneer of the Wild Shoes\r\n    itemLimitedCount[0x4f7d254af1d033cf] = 25;    //  Pioneer of the Skies Hat\r\n    itemLimitedCount[0x19b6d994c1491e27] = 25;    //  Pioneer of the Skies Top\r\n    itemLimitedCount[0x71e84d6ef1cf6c85] = 25;    //  Pioneer of the Skies Shoes\r\n    itemLimitedCount[0xff5f095a3a3b990f] = 25;    //  Pioneer of the Skies Pant\r\n    itemLimitedCount[0xa066c007ef8c352c] = 1;     //  Pioneer of the Cyberspace Hat\r\n    itemLimitedCount[0x1029368269e054d5] = 1;     //  Pioneer of the Cyberspace Top\r\n    itemLimitedCount[0xfd0e74b52734b343] = 1;     //  Pioneer of the Cyberspace Pant\r\n    itemLimitedCount[0xf5974771adaa3a6b] = 1;     //  Pioneer of the Cyberspace Shoes\r\n    itemLimitedCount[0x405b16d28c964f69] = 10;    //  Pioneer of the Seas Hat\r\n    itemLimitedCount[0x8335384d55547989] = 10;    //  Pioneer of the Seas Top\r\n    itemLimitedCount[0x679a5e1e0312d35a] = 10;    //  Pioneer of the Seas Pant\r\n    itemLimitedCount[0xe3d973cce112f782] = 10;    //  Pioneer of the Seas Shoes\r\n    itemLimitedCount[0xcde6284740e5fde9] = 50;    //  DAPP T-Shirt\r\n  }\r\n\r\n  function () public {\r\n    revert();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_founder\",\"type\":\"string\"},{\"name\":\"_creator\",\"type\":\"string\"},{\"name\":\"_isBitizenItem\",\"type\":\"bool\"},{\"name\":\"_attr1\",\"type\":\"uint256[4]\"},{\"name\":\"_attr2\",\"type\":\"uint8[5]\"},{\"name\":\"_attr3\",\"type\":\"uint16[2]\"}],\"name\":\"createItem\",\"outputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getSameItemCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemBytes8\",\"type\":\"bytes8\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"updateLimitedItemCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OPS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSameItemIdByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnedItems\",\"outputs\":[{\"name\":\"_itemIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getItemHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAllOps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getItemPosition\",\"outputs\":[{\"name\":\"_pos\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getItemInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"_attr1\",\"type\":\"uint256[4]\"},{\"name\":\"_attr2\",\"type\":\"uint8[5]\"},{\"name\":\"_attr3\",\"type\":\"uint16[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getLimitedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemService\",\"type\":\"address\"}],\"name\":\"injectItemService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId1\",\"type\":\"uint256\"},{\"name\":\"_itemId2\",\"type\":\"uint256\"}],\"name\":\"isSameItem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"ItemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"UpdateLimitedItemCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AvatarItemOperator","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4c62744a41b847428c0bd93ec8491ec94a9c3894ea9d392c7b40d1481436f79f"}]}