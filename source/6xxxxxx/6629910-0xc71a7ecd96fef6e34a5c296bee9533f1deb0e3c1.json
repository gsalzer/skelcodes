{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, reverts on overflow.\r\n     */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, reverts on overflow.\r\n     */\r\n    function add(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @dev Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ninterface IRemoteFunctions {\r\n  function _externalAddMasternode(address) external;\r\n  function _externalStopMasternode(address) external;\r\n  function isMasternodeOwner(address) external view returns (bool);\r\n  function userHasActiveNodes(address) external view returns (bool);\r\n}\r\n\r\ninterface ICaelumMasternode {\r\n    function _externalArrangeFlow() external;\r\n    function rewardsProofOfWork() external view returns (uint) ;\r\n    function rewardsMasternode() external view returns (uint) ;\r\n    function masternodeIDcounter() external view returns (uint) ;\r\n    function masternodeCandidate() external view returns (uint) ; \r\n    function getUserFromID(uint) external view returns  (address) ;\r\n    function userCounter() external view returns(uint);\r\n    function contractProgress() external view returns (uint, uint, uint, uint, uint, uint, uint, uint);\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns(uint256);\r\n\r\n    function balanceOf(address _who) public view returns(uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address _owner, address _spender) public view returns(uint256);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool);\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath\r\n    for uint256;\r\n\r\n    mapping(address => uint256) internal balances;\r\n\r\n    uint256 internal totalSupply_;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns(uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(_value <= balances[msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns(uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    returns(bool) {\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n    public\r\n    returns(bool) {\r\n        allowed[msg.sender][_spender] = (\r\n            allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n    public\r\n    returns(bool) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public constant returns (uint);\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\ncontract InterfaceContracts is Ownable {\r\n    InterfaceContracts public _internalMod;\r\n    \r\n    function setModifierContract (address _t) onlyOwner public {\r\n        _internalMod = InterfaceContracts(_t);\r\n    }\r\n\r\n    modifier onlyMiningContract() {\r\n      require(msg.sender == _internalMod._contract_miner(), \"Wrong sender\");\r\n          _;\r\n      }\r\n\r\n    modifier onlyTokenContract() {\r\n      require(msg.sender == _internalMod._contract_token(), \"Wrong sender\");\r\n      _;\r\n    }\r\n    \r\n    modifier onlyMasternodeContract() {\r\n      require(msg.sender == _internalMod._contract_masternode(), \"Wrong sender\");\r\n      _;\r\n    }\r\n    \r\n    modifier onlyVotingOrOwner() {\r\n      require(msg.sender == _internalMod._contract_voting() || msg.sender == owner, \"Wrong sender\");\r\n      _;\r\n    }\r\n    \r\n    modifier onlyVotingContract() {\r\n      require(msg.sender == _internalMod._contract_voting() || msg.sender == owner, \"Wrong sender\");\r\n      _;\r\n    }\r\n      \r\n    function _contract_voting () public view returns (address) {\r\n        return _internalMod._contract_voting();\r\n    }\r\n    \r\n    function _contract_masternode () public view returns (address) {\r\n        return _internalMod._contract_masternode();\r\n    }\r\n    \r\n    function _contract_token () public view returns (address) {\r\n        return _internalMod._contract_token();\r\n    }\r\n    \r\n    function _contract_miner () public view returns (address) {\r\n        return _internalMod._contract_miner();\r\n    }\r\n}\r\n\r\ncontract CaelumAcceptERC20  is InterfaceContracts {\r\n    using SafeMath for uint;\r\n\r\n    address[] public tokensList;\r\n    bool setOwnContract = true;\r\n\r\n    struct _whitelistTokens {\r\n        address tokenAddress;\r\n        bool active;\r\n        uint requiredAmount;\r\n        uint validUntil;\r\n        uint timestamp;\r\n    }\r\n\r\n    mapping(address => mapping(address => uint)) public tokens;\r\n    mapping(address => _whitelistTokens) acceptedTokens;\r\n\r\n    event Deposit(address token, address user, uint amount, uint balance);\r\n    event Withdraw(address token, address user, uint amount, uint balance);\r\n\r\n    /**\r\n     * @notice Allow the dev to set it's own token as accepted payment.\r\n     * @dev Can be hardcoded in the constructor. Given the contract size, we decided to separate it.\r\n     * @return bool\r\n     */\r\n    function addOwnToken() internal returns(bool) {\r\n        require(setOwnContract);\r\n        addToWhitelist(this, 5000 * 1e8, 36500);\r\n        setOwnContract = false;\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Add a new token as accepted payment method.\r\n     * @param _token Token contract address.\r\n     * @param _amount Required amount of this Token as collateral\r\n     * @param daysAllowed How many days will we accept this token?\r\n     */\r\n    function addToWhitelist(address _token, uint _amount, uint daysAllowed) internal {\r\n        _whitelistTokens storage newToken = acceptedTokens[_token];\r\n        newToken.tokenAddress = _token;\r\n        newToken.requiredAmount = _amount;\r\n        newToken.timestamp = now;\r\n        newToken.validUntil = now + (daysAllowed * 1 days);\r\n        newToken.active = true;\r\n\r\n        tokensList.push(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev internal function to determine if we accept this token.\r\n     * @param _ad Token contract address\r\n     * @return bool\r\n     */\r\n    function isAcceptedToken(address _ad) internal view returns(bool) {\r\n        return acceptedTokens[_ad].active;\r\n    }\r\n\r\n    /**\r\n     * @dev internal function to determine the requiredAmount for a specific token.\r\n     * @param _ad Token contract address\r\n     * @return bool\r\n     */\r\n    function getAcceptedTokenAmount(address _ad) internal view returns(uint) {\r\n        return acceptedTokens[_ad].requiredAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev internal function to determine if the token is still accepted timewise.\r\n     * @param _ad Token contract address\r\n     * @return bool\r\n     */\r\n    function isValid(address _ad) internal view returns(bool) {\r\n        uint endTime = acceptedTokens[_ad].validUntil;\r\n        if (block.timestamp < endTime) return true;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns an array of all accepted token. You can get more details by calling getTokenDetails function with this address.\r\n     * @return array Address\r\n     */\r\n    function listAcceptedTokens() public view returns(address[]) {\r\n        return tokensList;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns a full list of the token details\r\n     * @param token Token contract address\r\n     */\r\n    function getTokenDetails(address token) public view returns(address ad, uint required, bool active, uint valid) {\r\n        return (acceptedTokens[token].tokenAddress, acceptedTokens[token].requiredAmount, acceptedTokens[token].active, acceptedTokens[token].validUntil);\r\n    }\r\n\r\n    /**\r\n     * @notice Public function that allows any user to deposit accepted tokens as collateral to become a masternode.\r\n     * @param token Token contract address\r\n     * @param amount Amount to deposit\r\n     */\r\n    function depositCollateral(address token, uint amount) public {\r\n\r\n        require(isAcceptedToken(token), \"ERC20 not authorised\"); // Should be a token from our list\r\n        require(amount == getAcceptedTokenAmount(token)); // The amount needs to match our set amount\r\n        require(isValid(token)); // It should be called within the setup timeframe\r\n\r\n\r\n        tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\r\n        emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\r\n\r\n        require(StandardToken(token).transferFrom(msg.sender, this, amount), \"error with transfer\");\r\n        IRemoteFunctions(_contract_masternode())._externalAddMasternode(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Public function that allows any user to withdraw deposited tokens and stop as masternode\r\n     * @param token Token contract address\r\n     * @param amount Amount to withdraw\r\n     */\r\n    function withdrawCollateral(address token, uint amount) public {\r\n        require(token != 0, \"No token specified\"); // token should be an actual address\r\n        require(isAcceptedToken(token), \"ERC20 not authorised\"); // Should be a token from our list\r\n        require(amount == getAcceptedTokenAmount(token)); // The amount needs to match our set amount, allow only one withdrawal at a time.\r\n        uint amountToWithdraw = amount;\r\n\r\n        tokens[token][msg.sender] = tokens[token][msg.sender] - amount;\r\n        emit Withdraw(token, msg.sender, amountToWithdraw, amountToWithdraw);\r\n\r\n        require(StandardToken(token).transfer(msg.sender, amountToWithdraw),\"error with transfer\");\r\n        IRemoteFunctions(_contract_masternode())._externalStopMasternode(msg.sender);\r\n    }\r\n\r\n}\r\n\r\ncontract CaelumToken is CaelumAcceptERC20, StandardToken {\r\n    using SafeMath for uint;\r\n\r\n    ICaelumMasternode public masternodeInterface;\r\n\r\n    bool public swapClosed = false;\r\n    bool isOnTestNet = true;\r\n\r\n    string public symbol = \"CLM\";\r\n    string public name = \"Caelum Token\";\r\n    uint8 public decimals = 8;\r\n    uint256 public totalSupply = 2100000000000000;\r\n\r\n    address allowedSwapAddress01 = 0x7600bF5112945F9F006c216d5d6db0df2806eDc6;\r\n    address allowedSwapAddress02 = 0x16Da16948e5092A3D2aA71Aca7b57b8a9CFD8ddb;\r\n\r\n    uint swapStartedBlock;\r\n\r\n    mapping(address => uint) manualSwaps;\r\n    mapping(address => bool) hasSwapped;\r\n\r\n    event NewSwapRequest(address _swapper, uint _amount);\r\n    event TokenSwapped(address _swapper, uint _amount);\r\n\r\n    constructor() public {\r\n        addOwnToken();\r\n        swapStartedBlock = now;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow users to upgrade from our previous tokens.\r\n     * For trust issues, addresses are hardcoded.\r\n     * @param _token Token the user wants to swap.\r\n     */\r\n    function upgradeTokens(address _token) public {\r\n        require(!hasSwapped[msg.sender], \"User already swapped\");\r\n        require(now <= swapStartedBlock + 1 days, \"Timeframe exipred, please use manualUpgradeTokens function\");\r\n        require(_token == allowedSwapAddress01 || _token == allowedSwapAddress02, \"Token not allowed to swap.\");\r\n\r\n        uint amountToUpgrade = ERC20(_token).balanceOf(msg.sender);\r\n\r\n        require(amountToUpgrade <= ERC20(_token).allowance(msg.sender, this));\r\n        require(ERC20(_token).transferFrom(msg.sender, this, amountToUpgrade));\r\n        require(ERC20(_token).balanceOf(msg.sender) == 0);\r\n\r\n        tokens[_token][msg.sender] = tokens[_token][msg.sender].add(amountToUpgrade);\r\n        balances[msg.sender] = balances[msg.sender].add(amountToUpgrade);\r\n\r\n        emit Transfer(this, msg.sender, amountToUpgrade);\r\n        emit TokenSwapped(msg.sender, amountToUpgrade);\r\n\r\n        if(\r\n          ERC20(allowedSwapAddress01).balanceOf(msg.sender) == 0  &&\r\n          ERC20(allowedSwapAddress02).balanceOf(msg.sender) == 0\r\n        ) {\r\n          hasSwapped[msg.sender] = true;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Allow users to upgrade manualy from our previous tokens.\r\n     * For trust issues, addresses are hardcoded.\r\n     * Used when a user failed to swap in time.\r\n     * Dev should manually verify the origin of these tokens before allowing it.\r\n     * @param _token Token the user wants to swap.\r\n     */\r\n    function manualUpgradeTokens(address _token) public {\r\n        require(!hasSwapped[msg.sender], \"User already swapped\");\r\n        require(now >= swapStartedBlock + 1 days, \"Timeframe incorrect\");\r\n        require(_token == allowedSwapAddress01 || _token == allowedSwapAddress02, \"Token not allowed to swap.\");\r\n\r\n        uint amountToUpgrade = ERC20(_token).balanceOf(msg.sender);\r\n        require(amountToUpgrade <= ERC20(_token).allowance(msg.sender, this));\r\n\r\n        if (ERC20(_token).transferFrom(msg.sender, this, amountToUpgrade)) {\r\n            require(ERC20(_token).balanceOf(msg.sender) == 0);\r\n            if(\r\n              ERC20(allowedSwapAddress01).balanceOf(msg.sender) == 0  &&\r\n              ERC20(allowedSwapAddress02).balanceOf(msg.sender) == 0\r\n            ) {\r\n              hasSwapped[msg.sender] = true;\r\n            }\r\n\r\n            tokens[_token][msg.sender] = tokens[_token][msg.sender].add(amountToUpgrade);\r\n            manualSwaps[msg.sender] = amountToUpgrade;\r\n            emit NewSwapRequest(msg.sender, amountToUpgrade);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allow users to partially upgrade manualy from our previous tokens.\r\n     * For trust issues, addresses are hardcoded.\r\n     * Used when a user failed to swap in time.\r\n     * Dev should manually verify the origin of these tokens before allowing it.\r\n     * @param _token Token the user wants to swap.\r\n     */\r\n    function manualUpgradePartialTokens(address _token, uint _amount) public {\r\n        require(!hasSwapped[msg.sender], \"User already swapped\");\r\n        require(now >= swapStartedBlock + 1 days, \"Timeframe incorrect\");\r\n        require(_token == allowedSwapAddress01 || _token == allowedSwapAddress02, \"Token not allowed to swap.\");\r\n\r\n        uint amountToUpgrade = _amount; //ERC20(_token).balanceOf(msg.sender);\r\n        require(amountToUpgrade <= ERC20(_token).allowance(msg.sender, this));\r\n\r\n        uint newBalance = ERC20(_token).balanceOf(msg.sender) - (amountToUpgrade);\r\n        if (ERC20(_token).transferFrom(msg.sender, this, amountToUpgrade)) {\r\n\r\n            require(ERC20(_token).balanceOf(msg.sender) == newBalance, \"Balance error.\");\r\n\r\n            if(\r\n              ERC20(allowedSwapAddress01).balanceOf(msg.sender) == 0  &&\r\n              ERC20(allowedSwapAddress02).balanceOf(msg.sender) == 0\r\n            ) {\r\n              hasSwapped[msg.sender] = true;\r\n            }\r\n\r\n            tokens[_token][msg.sender] = tokens[_token][msg.sender].add(amountToUpgrade);\r\n            manualSwaps[msg.sender] = amountToUpgrade;\r\n            emit NewSwapRequest(msg.sender, amountToUpgrade);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Due to some bugs in the previous contracts, a handfull of users will\r\n     * be unable to fully withdraw their masternodes. Owner can replace those tokens\r\n     * who are forever locked up in the old contract with new ones.\r\n     */\r\n     function getLockedTokens(address _contract, address _holder) public view returns(uint) {\r\n         return CaelumAcceptERC20(_contract).tokens(_contract, _holder);\r\n     }\r\n\r\n    /**\r\n     * @dev Approve a request for manual token swaps\r\n     * @param _holder Holder The user who requests a swap.\r\n     */\r\n    function approveManualUpgrade(address _holder) onlyOwner public {\r\n        balances[_holder] = balances[_holder].add(manualSwaps[_holder]);\r\n        emit Transfer(this, _holder, manualSwaps[_holder]);\r\n    }\r\n\r\n    /**\r\n     * @dev Decline a request for manual token swaps\r\n     * @param _holder Holder The user who requests a swap.\r\n     */\r\n    function declineManualUpgrade(address _token, address _holder) onlyOwner public {\r\n        require(ERC20(_token).transfer(_holder, manualSwaps[_holder]));\r\n        tokens[_token][_holder] = tokens[_token][_holder] - manualSwaps[_holder];\r\n        delete manualSwaps[_holder];\r\n        delete hasSwapped[_holder];\r\n    }\r\n\r\n    /**\r\n     * @dev Due to some bugs in the previous contracts, a handfull of users will\r\n     * be unable to fully withdraw their masternodes. Owner can replace those tokens\r\n     * who are forever locked up in the old contract with new ones.\r\n     */\r\n     function replaceLockedTokens(address _contract, address _holder) onlyOwner public {\r\n         uint amountLocked = getLockedTokens(_contract, _holder);\r\n         balances[_holder] = balances[_holder].add(amountLocked);\r\n         emit Transfer(this, _holder, amountLocked);\r\n         hasSwapped[msg.sender] = true;\r\n     }\r\n\r\n    /**\r\n     * @dev Used to grant the mining contract rights to reward users.\r\n     * As our contracts are separate, we call this function with modifier onlyMiningContract to sent out rewards.\r\n     * @param _receiver Who receives the mining reward.\r\n     * @param _amount What amount to reward.\r\n     */\r\n    function rewardExternal(address _receiver, uint _amount) onlyMiningContract public {\r\n        balances[_receiver] = balances[_receiver].add(_amount);\r\n        emit Transfer(this, _receiver, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev We allow the masternodecontract to add tokens to our whitelist. By this approach,\r\n     * we can move all voting logic to a contract that can be upgraden when needed.\r\n     */\r\n    function addToWhitelistExternal(address _token, uint _amount, uint daysAllowed) onlyMasternodeContract public {\r\n        addToWhitelist( _token, _amount, daysAllowed);\r\n    }\r\n\r\n    /**\r\n     * @dev Fetch data from the actual reward. We do this to prevent pools payout out\r\n     * the global reward instead of the calculated ones.\r\n     * By default, pools fetch the `getMiningReward()` value and will payout this amount.\r\n     */\r\n    function getMiningRewardForPool() public view returns(uint) {\r\n        return masternodeInterface.rewardsProofOfWork();\r\n    }\r\n\r\n    /**\r\n     * @dev Return the Proof of Work reward from the masternode contract.\r\n     */\r\n    function rewardsProofOfWork() public view returns(uint) {\r\n        return masternodeInterface.rewardsProofOfWork();\r\n    }\r\n\r\n    /**\r\n     * @dev Return the masternode reward from the masternode contract.\r\n     */\r\n    function rewardsMasternode() public view returns(uint) {\r\n        return masternodeInterface.rewardsMasternode();\r\n    }\r\n\r\n    /**\r\n     * @dev Return the number of masternodes from the masternode contract.\r\n     */\r\n    function masternodeCounter() public view returns(uint) {\r\n        return masternodeInterface.userCounter();\r\n    }\r\n\r\n    /**\r\n     * @dev Return the general state from the masternode contract.\r\n     */\r\n    function contractProgress() public view returns\r\n    (\r\n        uint epoch,\r\n        uint candidate,\r\n        uint round,\r\n        uint miningepoch,\r\n        uint globalreward,\r\n        uint powreward,\r\n        uint masternodereward,\r\n        uint usercounter\r\n    )\r\n    {\r\n        return ICaelumMasternode(_contract_masternode()).contractProgress();\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev pull new masternode contract from the modifier contract\r\n     */\r\n    function setMasternodeContract() internal  {\r\n        masternodeInterface = ICaelumMasternode(_contract_masternode());\r\n    }\r\n\r\n    /**\r\n     * Override; For some reason, truffle testing does not recognize function.\r\n     * Remove before live?\r\n     */\r\n    function setModifierContract (address _contract) onlyOwner public {\r\n        require (now <= swapStartedBlock + 10 days);\r\n        _internalMod = InterfaceContracts(_contract);\r\n        setMasternodeContract();\r\n    }\r\n\r\n    /**\r\n    * @dev Move the voting away from token. All votes will be made from the voting\r\n    */\r\n    function VoteModifierContract (address _contract) onlyVotingContract external {\r\n        //_internalMod = CaelumModifierAbstract(_contract);\r\n        _internalMod = InterfaceContracts(_contract);\r\n        setMasternodeContract();\r\n    }\r\n    \r\n    /**\r\n     * Owner can transfer out any accidentally sent ERC20 tokens\r\n     */\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Needed for testnet only. Comment codeblock out before deploy, leave it as example.\r\n     */\r\n    /** \r\n    function setSwap(address _contract, address _contract_2) onlyOwner public {\r\n        require (isOnTestNet == true);\r\n        allowedSwapAddress01 = _contract;\r\n        allowedSwapAddress02 = _contract_2;\r\n    }\r\n    */\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningRewardForPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contract_miner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masternodeInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"VoteModifierContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsProofOfWork\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setModifierContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"declineManualUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualUpgradePartialTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardExternal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractProgress\",\"outputs\":[{\"name\":\"epoch\",\"type\":\"uint256\"},{\"name\":\"candidate\",\"type\":\"uint256\"},{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"miningepoch\",\"type\":\"uint256\"},{\"name\":\"globalreward\",\"type\":\"uint256\"},{\"name\":\"powreward\",\"type\":\"uint256\"},{\"name\":\"masternodereward\",\"type\":\"uint256\"},{\"name\":\"usercounter\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contract_voting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"daysAllowed\",\"type\":\"uint256\"}],\"name\":\"addToWhitelistExternal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listAcceptedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"name\":\"ad\",\"type\":\"address\"},{\"name\":\"required\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"valid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"upgradeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"manualUpgradeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getLockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contract_masternode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contract_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_internalMod\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masternodeCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"replaceLockedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"approveManualUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsMasternode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapper\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"NewSwapRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapper\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CaelumToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d01f7e94808b4cf074389050506cd19a9090847c642adffd59ac38dcdb351eb0"}]}