{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) whitelist;\r\n    event AddedToWhitelist(address indexed account);\r\n    event RemovedFromWhitelist(address indexed account);\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function add(address _address) public onlyOwner {\r\n        whitelist[_address] = true;\r\n        emit AddedToWhitelist(_address);\r\n    }\r\n\r\n    function remove(address _address) public onlyOwner {\r\n        whitelist[_address] = false;\r\n        emit RemovedFromWhitelist(_address);\r\n    }\r\n\r\n    function isWhitelisted(address _address) public view returns(bool) {\r\n        return whitelist[_address];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract CrowdfundableToken is MintableToken {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public cap;\r\n\r\n    function CrowdfundableToken(uint256 _cap, string _name, string _symbol, uint8 _decimals) public {\r\n        require(_cap > 0);\r\n        require(bytes(_name).length > 0);\r\n        require(bytes(_symbol).length > 0);\r\n        cap = _cap;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    // override\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        require(totalSupply_.add(_amount) <= cap);\r\n        return super.mint(_to, _amount);\r\n    }\r\n\r\n    // override\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(mintingFinished == true);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    // override\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(mintingFinished == true);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function burn(uint amount) public {\r\n        totalSupply_ = totalSupply_.sub(amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    }\r\n}\r\n\r\ncontract Minter is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    /* --- EVENTS --- */\r\n\r\n    event Minted(address indexed account, uint etherAmount, uint tokenAmount);\r\n    event Reserved(uint etherAmount);\r\n    event MintedReserved(address indexed account, uint etherAmount, uint tokenAmount);\r\n    event Unreserved(uint etherAmount);\r\n\r\n    /* --- FIELDS --- */\r\n\r\n    CrowdfundableToken public token;\r\n    uint public saleEtherCap;\r\n    uint public confirmedSaleEther;\r\n    uint public reservedSaleEther;\r\n\r\n    /* --- MODIFIERS --- */\r\n\r\n    modifier onlyInUpdatedState() {\r\n        updateState();\r\n        _;\r\n    }\r\n\r\n    modifier upToSaleEtherCap(uint additionalEtherAmount) {\r\n        uint totalEtherAmount = confirmedSaleEther.add(reservedSaleEther).add(additionalEtherAmount);\r\n        require(totalEtherAmount <= saleEtherCap);\r\n        _;\r\n    }\r\n\r\n    modifier onlyApprovedMinter() {\r\n        require(canMint(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier atLeastMinimumAmount(uint etherAmount) {\r\n        require(etherAmount >= getMinimumContribution());\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAddress(address account) {\r\n        require(account != 0x0);\r\n        _;\r\n    }\r\n\r\n    /* --- CONSTRUCTOR --- */\r\n\r\n    constructor(CrowdfundableToken _token, uint _saleEtherCap) public onlyValidAddress(address(_token)) {\r\n        require(_saleEtherCap > 0);\r\n\r\n        token = _token;\r\n        saleEtherCap = _saleEtherCap;\r\n    }\r\n\r\n    /* --- PUBLIC / EXTERNAL METHODS --- */\r\n\r\n    function transferTokenOwnership() external onlyOwner {\r\n        token.transferOwnership(owner);\r\n    }\r\n\r\n    function reserve(uint etherAmount) external\r\n        onlyInUpdatedState\r\n        onlyApprovedMinter\r\n        upToSaleEtherCap(etherAmount)\r\n        atLeastMinimumAmount(etherAmount)\r\n    {\r\n        reservedSaleEther = reservedSaleEther.add(etherAmount);\r\n        updateState();\r\n        emit Reserved(etherAmount);\r\n    }\r\n\r\n    function mintReserved(address account, uint etherAmount, uint tokenAmount) external\r\n        onlyInUpdatedState\r\n        onlyApprovedMinter\r\n    {\r\n        reservedSaleEther = reservedSaleEther.sub(etherAmount);\r\n        confirmedSaleEther = confirmedSaleEther.add(etherAmount);\r\n        require(token.mint(account, tokenAmount));\r\n        updateState();\r\n        emit MintedReserved(account, etherAmount, tokenAmount);\r\n    }\r\n\r\n    function unreserve(uint etherAmount) public\r\n        onlyInUpdatedState\r\n        onlyApprovedMinter\r\n    {\r\n        reservedSaleEther = reservedSaleEther.sub(etherAmount);\r\n        updateState();\r\n        emit Unreserved(etherAmount);\r\n    }\r\n\r\n    function mint(address account, uint etherAmount, uint tokenAmount) public\r\n        onlyInUpdatedState\r\n        onlyApprovedMinter\r\n        upToSaleEtherCap(etherAmount)\r\n    {\r\n        confirmedSaleEther = confirmedSaleEther.add(etherAmount);\r\n        require(token.mint(account, tokenAmount));\r\n        updateState();\r\n        emit Minted(account, etherAmount, tokenAmount);\r\n    }\r\n\r\n    // abstract\r\n    function getMinimumContribution() public view returns(uint);\r\n\r\n    // abstract\r\n    function updateState() public;\r\n\r\n    // abstract\r\n    function canMint(address sender) public view returns(bool);\r\n\r\n    // abstract\r\n    function getTokensForEther(uint etherAmount) public view returns(uint);\r\n}\r\n\r\ncontract ExternalMinter {\r\n    Minter public minter;\r\n}\r\n\r\ncontract Tge is Minter {\r\n    using SafeMath for uint;\r\n\r\n    /* --- CONSTANTS --- */\r\n\r\n    uint constant public MIMIMUM_CONTRIBUTION_AMOUNT_PREICO = 3 ether;\r\n    uint constant public MIMIMUM_CONTRIBUTION_AMOUNT_ICO = 1 ether / 5;\r\n    \r\n    uint constant public PRICE_MULTIPLIER_PREICO1 = 1443000;\r\n    uint constant public PRICE_MULTIPLIER_PREICO2 = 1415000;\r\n\r\n    uint constant public PRICE_MULTIPLIER_ICO1 = 1332000;\r\n    uint constant public PRICE_MULTIPLIER_ICO2 = 1304000;\r\n    uint constant public PRICE_MULTIPLIER_ICO3 = 1248000;\r\n    uint constant public PRICE_MULTIPLIER_ICO4 = 1221000;\r\n    uint constant public PRICE_MULTIPLIER_ICO5 = 1165000;\r\n    uint constant public PRICE_MULTIPLIER_ICO6 = 1110000;\r\n    uint constant public PRICE_DIVIDER = 1000;\r\n\r\n    /* --- EVENTS --- */\r\n\r\n    event StateChanged(uint from, uint to);\r\n    event PrivateIcoInitialized(uint _cap, uint _tokensForEther, uint _startTime, uint _endTime, uint _minimumContribution);\r\n    event PrivateIcoFinalized();\r\n\r\n    /* --- FIELDS --- */\r\n\r\n    // minters\r\n    address public crowdsale;\r\n    address public deferredKyc;\r\n    address public referralManager;\r\n    address public allocator;\r\n    address public airdropper;\r\n\r\n    // state\r\n    enum State {Presale, Preico1, Preico2, Break, Ico1, Ico2, Ico3, Ico4, Ico5, Ico6, FinishingIco, Allocating, Airdropping, Finished}\r\n    State public currentState = State.Presale;\r\n    mapping(uint => uint) public startTimes;\r\n    mapping(uint => uint) public etherCaps;\r\n\r\n    // private ico\r\n    bool public privateIcoFinalized = true;\r\n    uint public privateIcoCap = 0;\r\n    uint public privateIcoTokensForEther = 0;\r\n    uint public privateIcoStartTime = 0;\r\n    uint public privateIcoEndTime = 0;\r\n    uint public privateIcoMinimumContribution = 0;\r\n\r\n    /* --- MODIFIERS --- */\r\n\r\n    modifier onlyInState(State _state) {\r\n        require(_state == currentState);\r\n        _;\r\n    }\r\n\r\n    modifier onlyProperExternalMinters(address minter1, address minter2, address minter3, address minter4, address minter5) {\r\n        require(ExternalMinter(minter1).minter() == address(this));\r\n        require(ExternalMinter(minter2).minter() == address(this));\r\n        require(ExternalMinter(minter3).minter() == address(this));\r\n        require(ExternalMinter(minter4).minter() == address(this));\r\n        require(ExternalMinter(minter5).minter() == address(this));\r\n        _;\r\n    }\r\n\r\n    /* --- CONSTRUCTOR / INITIALIZATION --- */\r\n\r\n    constructor(\r\n        CrowdfundableToken _token,\r\n        uint _saleEtherCap\r\n    ) public Minter(_token, _saleEtherCap) {\r\n        require(keccak256(_token.symbol()) == keccak256(\"ALL\"));\r\n        require(_token.totalSupply() == 0);\r\n    }\r\n\r\n    // initialize states start times and caps\r\n    function setupStates(uint saleStart, uint singleStateEtherCap, uint[] stateLengths) internal {\r\n        require(!isPrivateIcoActive());\r\n\r\n        startTimes[uint(State.Preico1)] = saleStart;\r\n        setStateLength(State.Preico1, stateLengths[0]);\r\n        setStateLength(State.Preico2, stateLengths[1]);\r\n        setStateLength(State.Break, stateLengths[2]);\r\n        setStateLength(State.Ico1, stateLengths[3]);\r\n        setStateLength(State.Ico2, stateLengths[4]);\r\n        setStateLength(State.Ico3, stateLengths[5]);\r\n        setStateLength(State.Ico4, stateLengths[6]);\r\n        setStateLength(State.Ico5, stateLengths[7]);\r\n        setStateLength(State.Ico6, stateLengths[8]);\r\n\r\n        // the total sale ether cap is distributed evenly over all selling states\r\n        // the cap from previous states is accumulated in consequent states\r\n        // adding confirmed sale ether from private ico\r\n        etherCaps[uint(State.Preico1)] = singleStateEtherCap;\r\n        etherCaps[uint(State.Preico2)] = singleStateEtherCap.mul(2);\r\n        etherCaps[uint(State.Ico1)] = singleStateEtherCap.mul(3);\r\n        etherCaps[uint(State.Ico2)] = singleStateEtherCap.mul(4);\r\n        etherCaps[uint(State.Ico3)] = singleStateEtherCap.mul(5);\r\n        etherCaps[uint(State.Ico4)] = singleStateEtherCap.mul(6);\r\n        etherCaps[uint(State.Ico5)] = singleStateEtherCap.mul(7);\r\n        etherCaps[uint(State.Ico6)] = singleStateEtherCap.mul(8);\r\n    }\r\n\r\n    function setup(\r\n        address _crowdsale,\r\n        address _deferredKyc,\r\n        address _referralManager,\r\n        address _allocator,\r\n        address _airdropper,\r\n        uint saleStartTime,\r\n        uint singleStateEtherCap,\r\n        uint[] stateLengths\r\n    )\r\n    public\r\n    onlyOwner\r\n    onlyInState(State.Presale)\r\n    onlyProperExternalMinters(_crowdsale, _deferredKyc, _referralManager, _allocator, _airdropper)\r\n    {\r\n        require(stateLengths.length == 9); // preico 1-2, break, ico 1-6\r\n        require(saleStartTime >= now);\r\n        require(singleStateEtherCap > 0);\r\n        require(singleStateEtherCap.mul(8) <= saleEtherCap);\r\n        crowdsale = _crowdsale;\r\n        deferredKyc = _deferredKyc;\r\n        referralManager = _referralManager;\r\n        allocator = _allocator;\r\n        airdropper = _airdropper;\r\n        setupStates(saleStartTime, singleStateEtherCap, stateLengths);\r\n    }\r\n\r\n    /* --- PUBLIC / EXTERNAL METHODS --- */\r\n\r\n    function moveState(uint from, uint to) external onlyInUpdatedState onlyOwner {\r\n        require(uint(currentState) == from);\r\n        advanceStateIfNewer(State(to));\r\n    }\r\n\r\n    // override\r\n    function transferTokenOwnership() external onlyInUpdatedState onlyOwner {\r\n        require(currentState == State.Finished);\r\n        token.transferOwnership(owner);\r\n    }\r\n\r\n    // override\r\n    function getTokensForEther(uint etherAmount) public view returns(uint) {\r\n        uint tokenAmount = 0;\r\n        if (isPrivateIcoActive()) tokenAmount = etherAmount.mul(privateIcoTokensForEther).div(PRICE_DIVIDER);\r\n        else if (currentState == State.Preico1) tokenAmount = etherAmount.mul(PRICE_MULTIPLIER_PREICO1).div(PRICE_DIVIDER);\r\n        else if (currentState == State.Preico2) tokenAmount = etherAmount.mul(PRICE_MULTIPLIER_PREICO2).div(PRICE_DIVIDER);\r\n        else if (currentState == State.Ico1) tokenAmount = etherAmount.mul(PRICE_MULTIPLIER_ICO1).div(PRICE_DIVIDER);\r\n        else if (currentState == State.Ico2) tokenAmount = etherAmount.mul(PRICE_MULTIPLIER_ICO2).div(PRICE_DIVIDER);\r\n        else if (currentState == State.Ico3) tokenAmount = etherAmount.mul(PRICE_MULTIPLIER_ICO3).div(PRICE_DIVIDER);\r\n        else if (currentState == State.Ico4) tokenAmount = etherAmount.mul(PRICE_MULTIPLIER_ICO4).div(PRICE_DIVIDER);\r\n        else if (currentState == State.Ico5) tokenAmount = etherAmount.mul(PRICE_MULTIPLIER_ICO5).div(PRICE_DIVIDER);\r\n        else if (currentState == State.Ico6) tokenAmount = etherAmount.mul(PRICE_MULTIPLIER_ICO6).div(PRICE_DIVIDER);\r\n\r\n        return tokenAmount;\r\n    }\r\n\r\n    function isSellingState() public view returns(bool) {\r\n        if (currentState == State.Presale) return isPrivateIcoActive();\r\n        return (\r\n            uint(currentState) >= uint(State.Preico1) &&\r\n            uint(currentState) <= uint(State.Ico6) &&\r\n            uint(currentState) != uint(State.Break)\r\n        );\r\n    }\r\n\r\n    function isPrivateIcoActive() public view returns(bool) {\r\n        return now >= privateIcoStartTime && now < privateIcoEndTime;\r\n    }\r\n\r\n    function initPrivateIco(uint _cap, uint _tokensForEther, uint _startTime, uint _endTime, uint _minimumContribution) external onlyOwner {\r\n        require(_startTime > privateIcoEndTime); // should start after previous private ico\r\n        require(now >= privateIcoEndTime); // previous private ico should be finished\r\n        require(privateIcoFinalized); // previous private ico should be finalized\r\n        require(_tokensForEther > 0);\r\n        require(_endTime > _startTime);\r\n        require(_endTime < startTimes[uint(State.Preico1)]);\r\n\r\n        privateIcoCap = _cap;\r\n        privateIcoTokensForEther = _tokensForEther;\r\n        privateIcoStartTime = _startTime;\r\n        privateIcoEndTime = _endTime;\r\n        privateIcoMinimumContribution = _minimumContribution;\r\n        privateIcoFinalized = false;\r\n        emit PrivateIcoInitialized(_cap, _tokensForEther, _startTime, _endTime, _minimumContribution);\r\n    }\r\n\r\n    function finalizePrivateIco() external onlyOwner {\r\n        require(!isPrivateIcoActive());\r\n        require(now >= privateIcoEndTime); // previous private ico should be finished\r\n        require(!privateIcoFinalized);\r\n        require(reservedSaleEther == 0); // kyc needs to be finished\r\n\r\n        privateIcoFinalized = true;\r\n        confirmedSaleEther = 0;\r\n        emit PrivateIcoFinalized();\r\n    }\r\n\r\n    /* --- INTERNAL METHODS --- */\r\n\r\n    // override\r\n    function getMinimumContribution() public view returns(uint) {\r\n        if (currentState == State.Preico1 || currentState == State.Preico2) {\r\n            return MIMIMUM_CONTRIBUTION_AMOUNT_PREICO;\r\n        }\r\n        if (uint(currentState) >= uint(State.Ico1) && uint(currentState) <= uint(State.Ico6)) {\r\n            return MIMIMUM_CONTRIBUTION_AMOUNT_ICO;\r\n        }\r\n        if (isPrivateIcoActive()) {\r\n            return privateIcoMinimumContribution;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // override\r\n    function canMint(address account) public view returns(bool) {\r\n        if (currentState == State.Presale) {\r\n            // external sales and private ico\r\n            return account == crowdsale || account == deferredKyc;\r\n        }\r\n        else if (isSellingState()) {\r\n            // crowdsale: external sales\r\n            // deferredKyc: adding and approving kyc\r\n            // referralManager: referral fees\r\n            return account == crowdsale || account == deferredKyc || account == referralManager;\r\n        }\r\n        else if (currentState == State.Break || currentState == State.FinishingIco) {\r\n            // crowdsale: external sales\r\n            // deferredKyc: approving kyc\r\n            // referralManager: referral fees\r\n            return account == crowdsale || account == deferredKyc || account == referralManager;\r\n        }\r\n        else if (currentState == State.Allocating) {\r\n            // Community and Bounty allocations\r\n            // Advisors, Developers, Ambassadors and Partners allocations\r\n            // Customer Rewards allocations\r\n            // Team allocations\r\n            return account == allocator;\r\n        }\r\n        else if (currentState == State.Airdropping) {\r\n            // airdropping for all token holders\r\n            return account == airdropper;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // override\r\n    function updateState() public {\r\n        updateStateBasedOnTime();\r\n        updateStateBasedOnContributions();\r\n    }\r\n\r\n    function updateStateBasedOnTime() internal {\r\n        // move to the next state, if the current one has finished\r\n        if (now >= startTimes[uint(State.FinishingIco)]) advanceStateIfNewer(State.FinishingIco);\r\n        else if (now >= startTimes[uint(State.Ico6)]) advanceStateIfNewer(State.Ico6);\r\n        else if (now >= startTimes[uint(State.Ico5)]) advanceStateIfNewer(State.Ico5);\r\n        else if (now >= startTimes[uint(State.Ico4)]) advanceStateIfNewer(State.Ico4);\r\n        else if (now >= startTimes[uint(State.Ico3)]) advanceStateIfNewer(State.Ico3);\r\n        else if (now >= startTimes[uint(State.Ico2)]) advanceStateIfNewer(State.Ico2);\r\n        else if (now >= startTimes[uint(State.Ico1)]) advanceStateIfNewer(State.Ico1);\r\n        else if (now >= startTimes[uint(State.Break)]) advanceStateIfNewer(State.Break);\r\n        else if (now >= startTimes[uint(State.Preico2)]) advanceStateIfNewer(State.Preico2);\r\n        else if (now >= startTimes[uint(State.Preico1)]) advanceStateIfNewer(State.Preico1);\r\n    }\r\n\r\n    function updateStateBasedOnContributions() internal {\r\n        // move to the next state, if the current one's cap has been reached\r\n        uint totalEtherContributions = confirmedSaleEther.add(reservedSaleEther);\r\n        if(isPrivateIcoActive()) {\r\n            // if private ico cap exceeded, revert transaction\r\n            require(totalEtherContributions <= privateIcoCap);\r\n            return;\r\n        }\r\n        \r\n        if (!isSellingState()) {\r\n            return;\r\n        }\r\n        \r\n        else if (int(currentState) < int(State.Break)) {\r\n            // preico\r\n            if (totalEtherContributions >= etherCaps[uint(State.Preico2)]) advanceStateIfNewer(State.Break);\r\n            else if (totalEtherContributions >= etherCaps[uint(State.Preico1)]) advanceStateIfNewer(State.Preico2);\r\n        }\r\n        else {\r\n            // ico\r\n            if (totalEtherContributions >= etherCaps[uint(State.Ico6)]) advanceStateIfNewer(State.FinishingIco);\r\n            else if (totalEtherContributions >= etherCaps[uint(State.Ico5)]) advanceStateIfNewer(State.Ico6);\r\n            else if (totalEtherContributions >= etherCaps[uint(State.Ico4)]) advanceStateIfNewer(State.Ico5);\r\n            else if (totalEtherContributions >= etherCaps[uint(State.Ico3)]) advanceStateIfNewer(State.Ico4);\r\n            else if (totalEtherContributions >= etherCaps[uint(State.Ico2)]) advanceStateIfNewer(State.Ico3);\r\n            else if (totalEtherContributions >= etherCaps[uint(State.Ico1)]) advanceStateIfNewer(State.Ico2);\r\n        }\r\n    }\r\n\r\n    function advanceStateIfNewer(State newState) internal {\r\n        if (uint(newState) > uint(currentState)) {\r\n            emit StateChanged(uint(currentState), uint(newState));\r\n            currentState = newState;\r\n        }\r\n    }\r\n\r\n    function setStateLength(State state, uint length) internal {\r\n        // state length is determined by next state's start time\r\n        startTimes[uint(state)+1] = startTimes[uint(state)].add(length);\r\n    }\r\n\r\n    function isInitialized() public view returns(bool) {\r\n        return crowdsale != 0x0 && referralManager != 0x0 && allocator != 0x0 && airdropper != 0x0 && deferredKyc != 0x0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedSaleEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEtherCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_MULTIPLIER_PREICO2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmedSaleEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIMIMUM_CONTRIBUTION_AMOUNT_ICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIMIMUM_CONTRIBUTION_AMOUNT_PREICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_MULTIPLIER_PREICO1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPrivateIcoActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_MULTIPLIER_ICO3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateIcoTokensForEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateIcoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"getTokensForEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mintReserved\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"unreserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"startTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"reserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_MULTIPLIER_ICO5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"},{\"name\":\"_deferredKyc\",\"type\":\"address\"},{\"name\":\"_referralManager\",\"type\":\"address\"},{\"name\":\"_allocator\",\"type\":\"address\"},{\"name\":\"_airdropper\",\"type\":\"address\"},{\"name\":\"saleStartTime\",\"type\":\"uint256\"},{\"name\":\"singleStateEtherCap\",\"type\":\"uint256\"},{\"name\":\"stateLengths\",\"type\":\"uint256[]\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deferredKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_MULTIPLIER_ICO2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"etherCaps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateIcoMinimumContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateIcoFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_MULTIPLIER_ICO4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateIcoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePrivateIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateIcoCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_MULTIPLIER_ICO6\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_tokensForEther\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_minimumContribution\",\"type\":\"uint256\"}],\"name\":\"initPrivateIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSellingState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"moveState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_MULTIPLIER_ICO1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinimumContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_saleEtherCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokensForEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_minimumContribution\",\"type\":\"uint256\"}],\"name\":\"PrivateIcoInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PrivateIcoFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Reserved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"MintedReserved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Unreserved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Tge","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002afdbcecdd645c0873f369b145127501a918a04600000000000000000000000000000000000000000000102d811a26ea76ef0000","Library":"","SwarmSource":"bzzr://da35c53c3976ee8f5667e3972242c456e2f897e46890183a5477e74df982c3a8"}]}