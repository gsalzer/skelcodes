{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount);\r\n    function balanceOf(address) returns (uint256);\r\n}\r\n\r\ncontract Crowdsale {\r\n    address public beneficiary;\r\n    address master;\r\n    uint public tokenBalance;\r\n    uint public amountRaised;\r\n    uint start_time;\r\n    uint public price;\r\n    uint public offChainTokens;\r\n    uint public minimumSpend;\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    bool public paused;\r\n\r\n    address public contlength;  // Remove\r\n\r\n    modifier isPaused() { if (paused == true) _; }\r\n    modifier notPaused() { if (paused == false) _; }\r\n    modifier isMaster() { if (msg.sender == master) _; }\r\n    \r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function Crowdsale() {\r\n\r\n        offChainTokens = 0;\r\n        amountRaised = 0;\r\n        tokenBalance = 30000000;  //Change\r\n        minimumSpend = 0.01 * 1 ether;\r\n        beneficiary = 0x0677f6a5383b10dc4ac253b4d56d8f69df76f548;   \r\n        start_time = now;\r\n        tokenReward = token(0xfACfB7aaD014f30f06E67cBeE8d3308C69aeD37a);    \r\n        master =  0x69F8C1604f27475AF9f872E07c2E6a56b485DAcf;\r\n        paused = false;\r\n        price = 953584813430000;\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n    **/\r\n\r\n    function () payable notPaused {\r\n\r\n        uint amount = msg.value;\r\n        amountRaised += amount;\r\n        tokenBalance = SafeMath.sub(tokenBalance, SafeMath.div(amount, price));\r\n        if (tokenBalance < offChainTokens ) { revert(); }\r\n        if (amount <  minimumSpend) { revert(); }\r\n        tokenReward.transfer(msg.sender, SafeMath.div(amount * 1 ether, price));\r\n        FundTransfer(msg.sender, amount, true);\r\n        balanceOf[msg.sender] += amount;\r\n        \r\n    }\r\n\r\n    function safeWithdrawal() isMaster {\r\n\r\n      if (beneficiary.send(amountRaised)) {\r\n          FundTransfer(beneficiary, amountRaised, false);\r\n          tokenReward.transfer(beneficiary, tokenReward.balanceOf(this));\r\n          tokenBalance = 0;\r\n      }\r\n    }\r\n\r\n    function pause() notPaused isMaster {\r\n      paused = true;\r\n    }\r\n\r\n    function unPause() isPaused isMaster {\r\n      paused = false;\r\n    }\r\n\r\n    function updatePrice(uint _price) isMaster {\r\n      price = _price;\r\n    }\r\n\r\n    function updateMinSpend(uint _minimumSpend) isMaster {\r\n      minimumSpend = _minimumSpend;\r\n    }\r\n\r\n    function updateOffChainTokens(uint _offChainTokens) isMaster {\r\n        offChainTokens = _offChainTokens;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumSpend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offChainTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimumSpend\",\"type\":\"uint256\"}],\"name\":\"updateMinSpend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contlength\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offChainTokens\",\"type\":\"uint256\"}],\"name\":\"updateOffChainTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3c986eb7b7c1eaf73a5a6153477961834757b716b360ce540824ac283f38aeb5"}]}