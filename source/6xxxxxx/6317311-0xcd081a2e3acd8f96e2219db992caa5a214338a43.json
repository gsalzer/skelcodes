{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Crowdsale is Owned{\r\n\r\n  \tusing SafeMath for uint256;\r\n  \t\r\n  \tERC20Interface private token;\r\n  \t\r\n  \t// Amount Raised\r\n  \tuint256 public weiRaised;\r\n\t\r\n\t// Wallet where funds will be transfered\r\n\taddress public wallet;\r\n\t\r\n\t// Is the crowdsale paused?\r\n\tbool isCrowdsalePaused = false;\r\n\t\r\n\t// the exchange rate\r\n\tuint256 public rate;\r\n\t\r\n\t// total ETH for sale\r\n\tuint256 public cap;\r\n\t\r\n\tuint8 public decimals;\r\n\t\r\n\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\tconstructor() public {\r\n\t\twallet = 0x73b8D31A7FF02C3608FDaF3770D40c487CA9b11D;\r\n\t\ttoken = ERC20Interface(0x5D9f5D8d878Deb8DB5a4940fE7e86664E58c38FA);\r\n\t\tdecimals = 18;\r\n\t \tcap = 20000 * 10**uint(decimals);\r\n    \trate = 1000;\r\n    \trequire(wallet != address(0));\r\n\t\trequire(token != address(0));\r\n\t\trequire(cap > 0);\r\n\t\trequire(rate > 0);\r\n\t}\r\n\t\r\n\tfunction () external payable {\r\n    \tbuyTokens(msg.sender);\r\n \t}\r\n \t\r\n \tfunction buyTokens(address beneficiary) public payable {\r\n \t\r\n   \t\trequire(beneficiary != 0x0);\r\n\r\n\t    uint256 amount = msg.value;\r\n\t    \r\n\t    require(isCrowdsalePaused == false);\r\n\t    \r\n\t    require(weiRaised.add(amount) <= cap);\r\n\r\n    \tuint256 tokens = getTokenAmount(amount);\r\n\r\n    \tweiRaised = weiRaised.add(amount);\r\n\r\n    \tprocessPurchase(beneficiary, tokens);\r\n    \t\r\n\t\temit TokenPurchase(msg.sender, beneficiary, amount, tokens);\r\n\r\n    \tforwardFunds();\r\n    \t\r\n\t}\r\n\t\r\n\tfunction rate() public view returns(uint256){\r\n\t\treturn rate;\r\n\t}\r\n\t\r\n\tfunction weiRaised() public view returns (uint256) {\r\n    \treturn weiRaised;\r\n\t}\r\n\t\r\n\tfunction deliverTokens(address beneficiary,uint256 tokenAmount) internal{\r\n\t\ttoken.transferFrom(wallet, beneficiary, tokenAmount);\r\n\t}\r\n\t\r\n\tfunction processPurchase(address beneficiary,uint256 tokenAmount) internal{\r\n\t\tdeliverTokens(beneficiary, tokenAmount);\r\n\t}\r\n\r\n\tfunction getTokenAmount(uint256 amount) internal view returns (uint256){\r\n    \treturn rate.mul(amount);\r\n  \t}\r\n  \t\r\n  \tfunction forwardFunds() internal {\r\n\t\twallet.transfer(msg.value);\r\n\t}\r\n\t\r\n\tfunction remainingTokens() public view returns (uint256) {\r\n\t\treturn token.allowance(wallet, this);\r\n\t}\r\n\r\n\tfunction capReached() public view returns (bool) {\r\n\t\treturn weiRaised >= cap;\r\n\t}\r\n\t\r\n\tfunction pauseCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = true;\r\n    }\r\n    \r\n    function resumeCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = false;\r\n    }\r\n    \r\n    function takeTokensBack() public onlyOwner\r\n     {\r\n         uint remainingTokensInTheContract = token.balanceOf(address(this));\r\n         token.transfer(owner,remainingTokensInTheContract);\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeTokensBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bf32343f0936a6112f254da952761e5dafb6b3785aeb8e2e8f104a092a7ef465"}]}