{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract DaiInterface {\r\n    function transferFrom(address src, address dst, uint wad) public returns (bool);\r\n}\r\n\r\n\r\ncontract DaiTransferrer {\r\n\r\n    address daiAddress = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    DaiInterface daiContract = DaiInterface(daiAddress);\r\n\r\n    function transferDai(address _src, address _dst, uint _dai) internal {\r\n        require(daiContract.transferFrom(_src, _dst, _dai));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev + and - operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath64\r\n * @dev + and - operations with safety checks that revert on error for uint64\r\n */\r\nlibrary SafeMath64 {\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b <= a);\r\n        uint64 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        uint64 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ScorchablePayments is DaiTransferrer {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath64 for uint64;\r\n\r\n    struct Payment {\r\n        address payer;\r\n        address payee;\r\n        uint amount;\r\n        uint payeeBondAmount;\r\n        uint payerInactionTimeout;\r\n        uint listIndex;\r\n        bool payeeBondPaid;\r\n        bool isEthPayment;\r\n    }\r\n\r\n    uint64[] public paymentIds;\r\n    uint64 public currentId = 1;\r\n    mapping(uint64 => Payment) public payments;\r\n    address public scorchAddress = 0x0;\r\n\r\n    modifier onlyPayer(uint64 paymentId) {\r\n        require(msg.sender == payments[paymentId].payer);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayee(uint64 paymentId) {\r\n        require(msg.sender == payments[paymentId].payee);\r\n        _;\r\n    }\r\n\r\n    function createPayment(\r\n        address payee,\r\n        uint amountToPay,\r\n        uint payeeBondAmount,\r\n        uint payerInactionTimeout,\r\n        bool isEthPayment\r\n    )\r\n    external\r\n    payable\r\n    {\r\n        transferTokens(msg.sender, address(this), amountToPay, isEthPayment);\r\n        require(payerInactionTimeout < now.add(27 weeks));\r\n        payments[currentId] = Payment(\r\n            msg.sender,\r\n            payee,\r\n            amountToPay,\r\n            payeeBondAmount,\r\n            payerInactionTimeout,\r\n            paymentIds.push(currentId).sub(1),\r\n            payeeBondAmount == 0,\r\n            isEthPayment\r\n        );\r\n        currentId = currentId.add(1);\r\n    }\r\n\r\n    function cancelPayment(uint64 paymentId) external onlyPayer(paymentId) {\r\n        require(payments[paymentId].payeeBondPaid == false);\r\n        transferTokens(\r\n            address(this),\r\n            msg.sender,\r\n            payments[paymentId].amount,\r\n            payments[paymentId].isEthPayment\r\n        );\r\n        _deletePayment(paymentId);\r\n    }\r\n\r\n    function payBond(\r\n        uint64 paymentId\r\n    )\r\n    external\r\n    payable\r\n    {\r\n        require(payments[paymentId].payeeBondPaid == false);\r\n        transferTokens(\r\n            msg.sender,\r\n            address(this),\r\n            payments[paymentId].payeeBondAmount,\r\n            payments[paymentId].isEthPayment\r\n        );\r\n        payments[paymentId].amount = payments[paymentId].amount.add(payments[paymentId].payeeBondAmount);\r\n        payments[paymentId].payeeBondPaid = true;\r\n    }\r\n\r\n    function returnTokensToSender(uint64 paymentId, uint amount) external onlyPayee(paymentId) {\r\n        require(amount <= payments[paymentId].amount);\r\n        transferTokens(address(this), payments[paymentId].payer, amount, payments[paymentId].isEthPayment);\r\n        if (amount == payments[paymentId].amount) {\r\n            _deletePayment(paymentId);\r\n        }\r\n        else {\r\n            payments[paymentId].amount = payments[paymentId].amount.sub(amount);\r\n        }\r\n    }\r\n\r\n    function topUp(uint64 paymentId, uint amount) external payable {\r\n        transferTokens(msg.sender, address(this), amount, payments[paymentId].isEthPayment);\r\n        payments[paymentId].amount = payments[paymentId].amount.add(amount);\r\n    }\r\n\r\n    function releasePayment(uint64 paymentId, uint amount) external onlyPayer(paymentId) {\r\n        require(amount <= payments[paymentId].amount);\r\n        payments[paymentId].amount = payments[paymentId].amount.sub(amount);\r\n        transferTokens(address(this), payments[paymentId].payee, amount, payments[paymentId].isEthPayment);\r\n        if (payments[paymentId].amount == 0) {\r\n            _deletePayment(paymentId);\r\n        }\r\n    }\r\n\r\n    function scorchPayment(uint64 paymentId, uint256 amountToScorch) external onlyPayer(paymentId) {\r\n        payments[paymentId].amount = payments[paymentId].amount.sub(amountToScorch);\r\n        transferTokens(address(this), scorchAddress, amountToScorch, payments[paymentId].isEthPayment);\r\n        if (payments[paymentId].amount == 0) {\r\n            _deletePayment(paymentId);\r\n        }\r\n    }\r\n\r\n    function claimTimedOutPayment(uint64 paymentId) external onlyPayee(paymentId) {\r\n        require(now > payments[paymentId].payerInactionTimeout);\r\n        transferTokens(\r\n            address(this),\r\n            payments[paymentId].payee,\r\n            payments[paymentId].amount,\r\n            payments[paymentId].isEthPayment\r\n        );\r\n        _deletePayment(paymentId);\r\n    }\r\n\r\n    function getNumPayments() external view returns (uint length) {\r\n        return paymentIds.length;\r\n    }\r\n\r\n    function getPaymentsForAccount(address account) external view returns (uint64[], uint64[]) {\r\n        uint64[] memory outgoingIds = new uint64[](paymentIds.length);\r\n        uint64[] memory incomingIds = new uint64[](paymentIds.length);\r\n        uint outgoingReturnLength = 0;\r\n        uint incomingReturnLength = 0;\r\n\r\n        for (uint i=0; i < paymentIds.length; i = i.add(1)) {\r\n            if (payments[paymentIds[i]].payer == account) {\r\n                outgoingIds[outgoingReturnLength] = paymentIds[i];\r\n                outgoingReturnLength = outgoingReturnLength.add(1);\r\n            }\r\n            if (payments[paymentIds[i]].payee == account) {\r\n                incomingIds[incomingReturnLength] = paymentIds[i];\r\n                incomingReturnLength = incomingReturnLength.add(1);\r\n            }\r\n        }\r\n\r\n        uint64[] memory returnOutgoingIds = new uint64[](outgoingReturnLength);\r\n        uint64[] memory returnIncomingIds = new uint64[](incomingReturnLength);\r\n\r\n        for (uint j=0; j < outgoingReturnLength; j = j.add(1)) {\r\n            returnOutgoingIds[j] = outgoingIds[j];\r\n        }\r\n        for (uint k=0; k < incomingReturnLength; k = k.add(1)) {\r\n            returnIncomingIds[k] = incomingIds[k];\r\n        }\r\n        return (returnOutgoingIds, returnIncomingIds);\r\n    }\r\n\r\n    function extendInactionTimeout(uint64 paymentId) public onlyPayer(paymentId) {\r\n        payments[paymentId].payerInactionTimeout = now.add(5 weeks);\r\n    }\r\n\r\n    function transferTokens(address source, address dest, uint amount, bool isEthPayment) internal {\r\n        if (isEthPayment) {\r\n            if (dest == address(this)) {\r\n                require(msg.value == amount);\r\n            }\r\n            else {\r\n                dest.transfer(amount);\r\n            }\r\n        }\r\n        else {\r\n            transferDai(source, dest, amount);\r\n        }\r\n    }\r\n\r\n    function _deletePayment(uint64 paymentId) internal {\r\n        uint listIndex = payments[paymentId].listIndex;\r\n        paymentIds[listIndex] = paymentIds[paymentIds.length.sub(1)];\r\n        payments[paymentIds[listIndex]].listIndex = listIndex;\r\n        delete payments[paymentId];\r\n        paymentIds.length = paymentIds.length.sub(1);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getNumPayments\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"payer\",\"type\":\"address\"},{\"name\":\"payee\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"payeeBondAmount\",\"type\":\"uint256\"},{\"name\":\"payerInactionTimeout\",\"type\":\"uint256\"},{\"name\":\"listIndex\",\"type\":\"uint256\"},{\"name\":\"payeeBondPaid\",\"type\":\"bool\"},{\"name\":\"isEthPayment\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentId\",\"type\":\"uint64\"},{\"name\":\"amountToScorch\",\"type\":\"uint256\"}],\"name\":\"scorchPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentId\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"returnTokensToSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentId\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releasePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentId\",\"type\":\"uint64\"}],\"name\":\"payBond\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentId\",\"type\":\"uint64\"}],\"name\":\"claimTimedOutPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentId\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scorchAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPaymentsForAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[]\"},{\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payee\",\"type\":\"address\"},{\"name\":\"amountToPay\",\"type\":\"uint256\"},{\"name\":\"payeeBondAmount\",\"type\":\"uint256\"},{\"name\":\"payerInactionTimeout\",\"type\":\"uint256\"},{\"name\":\"isEthPayment\",\"type\":\"bool\"}],\"name\":\"createPayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentId\",\"type\":\"uint64\"}],\"name\":\"extendInactionTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentId\",\"type\":\"uint64\"}],\"name\":\"cancelPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ScorchablePayments","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7b3113904457bcc0a6379ffba99b927bc9add71e9b4ee6c1ead02773fc28031a"}]}