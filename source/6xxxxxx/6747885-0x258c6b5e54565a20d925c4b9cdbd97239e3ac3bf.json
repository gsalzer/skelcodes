{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// Generated by TokenGen and the Fabric Token platform.\r\n// https://tokengen.io\r\n// https://fabrictoken.io\r\n// File: contracts/library/SafeMath.sol\r\n// Extracted from a FundRaiser Contract and modified by WIMS\r\n// Added enableMinting *Found necessary but is not to be abused else tokens will be burnt\r\n// https://wims.io\r\n// Compiled with version 0.4.23\r\n\r\n\r\n/**\r\n * @title Safe Math\r\n *\r\n * @dev Library for safe mathematical operations.\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function minus(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function plus(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20Token.sol\r\n\r\n/**\r\n * @dev The standard ERC20 Token contract base.\r\n */\r\ncontract ERC20Token {\r\n    \r\n\tuint256 public totalSupply;  /* shorthand for public function and a property */    \r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Standard Token\r\n *\r\n * @dev The standard abstract implementation of the ERC20 interface.\r\n */\r\ncontract StandardToken is ERC20Token {\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    \r\n    /**\r\n     * @dev The constructor assigns the token name, symbols and decimals.\r\n     */\r\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) internal {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\t\ttotalSupply = _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the balance of an address.\r\n     *\r\n     * @param _address The address which's balance will be checked.\r\n     *\r\n     * @return The current balance of the address.\r\n     */\r\n    function balanceOf(address _address) public view returns (uint256 balance) {\r\n        return balances[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Checks the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * @param _owner The address which owns the funds allowed for spending by a third-party.\r\n     * @param _spender The third-party address that is allowed to spend the tokens.\r\n     *\r\n     * @return The number of tokens available to `_spender` to be spent.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Give permission to `_spender` to spend `_value` number of tokens on your behalf.\r\n     * E.g. You place a buy or sell order on an exchange and in that example, the \r\n     * `_spender` address is the address of the contract the exchange created to add your token to their \r\n     * website and you are `msg.sender`.\r\n     *\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     *\r\n     * @return Whether the approval process was successful or not.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `_value` number of tokens to the `_to` address.\r\n     *\r\n     * @param _to The address of the recipient.\r\n     * @param _value The number of tokens to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        executeTransfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows another contract to spend tokens on behalf of the `_from` address and send them to the `_to` address.\r\n     *\r\n     * @param _from The address which approved you to spend tokens on their behalf.\r\n     * @param _to The address where you want to send tokens.\r\n     * @param _value The number of tokens to be sent.\r\n     *\r\n     * @return Whether the transfer was successful or not.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n       // require(_value <= allowed[_from][msg.sender]);        \r\n        //allowed[_from][msg.sender] = allowed[_from][msg.sender].minus(_value);\r\n        executeTransfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that this reused by the transfer functions\r\n     */\r\n    function executeTransfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != address(0));\r\n        require(_value != 0 && _value <= balances[_from]);\r\n        \r\n        balances[_from] = balances[_from].minus(_value);\r\n        balances[_to] = balances[_to].plus(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/token/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable Token\r\n *\r\n * @dev Allows the creation of new tokens.\r\n */\r\ncontract MintableToken is StandardToken {\r\n    /// @dev The only address allowed to mint coins\r\n    address public minter;\r\n\r\n    /// @dev Indicates whether the token is still mintable.\r\n    bool public mintingDisabled = false;\r\n\r\n    /**\r\n     * @dev Event fired when minting is no longer allowed.\r\n     */\r\n    event MintingDisabled();\r\n    \r\n    /**\r\n     * @dev Event fired when minting is no longer allowed.\r\n     */\r\n    event MintingEnabled();\r\n\r\n    /**\r\n     * @dev Allows a function to be executed only if minting is still allowed.\r\n     */\r\n    modifier canMint() {\r\n        require(!mintingDisabled);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a function to be called only by the minter\r\n     */\r\n    modifier onlyMinter() {\r\n        require(msg.sender == minter);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The constructor assigns the minter which is allowed to mind and disable minting\r\n     */\r\n    constructor(address _minter) internal {\r\n        minter = _minter;\r\n    }\r\n\r\n    /**\r\n    * @dev Creates new `_value` number of tokens and sends them to the `_to` address.\r\n    *\r\n    * @param _to The address which will receive the freshly minted tokens.\r\n    * @param _value The number of tokens that will be created.\r\n    */\r\n    function mint(address _to, uint256 _value) public onlyMinter canMint {\r\n        totalSupply = totalSupply.plus(_value);\r\n        balances[_to] = balances[_to].plus(_value);\r\n\r\n        emit Transfer(0x0, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Disable the minting of new tokens. Cannot be reversed.\r\n    *\r\n    * @return Whether or not the process was successful.\r\n    */\r\n    function disableMinting() public onlyMinter canMint {\r\n        mintingDisabled = true;\r\n       \r\n        emit MintingDisabled();\r\n    }\r\n    \r\n        /**\r\n    * @dev Enable the minting of new tokens. Can be reversed.\r\n    *\r\n    * @return Whether or not the process was successful.\r\n    */\r\n    function enableMinting() public onlyMinter canMint {\r\n        mintingDisabled = false;\r\n       \r\n        emit MintingEnabled();\r\n    }\r\n}\r\n\r\n// File: contracts/token/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n *\r\n * @dev Allows tokens to be destroyed.\r\n */\r\ncontract BurnableToken is StandardToken {\r\n    /**\r\n     * @dev Event fired when tokens are burned.\r\n     *\r\n     * @param _from The address from which tokens will be removed.\r\n     * @param _value The number of tokens to be destroyed.\r\n     */\r\n    event Burn(address indexed _from, uint256 _value);\r\n\r\n    /**\r\n     * @dev Burnes `_value` number of tokens.\r\n     *\r\n     * @param _value The number of tokens that will be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value != 0);\r\n\r\n        address burner = msg.sender;\r\n        require(_value <= balances[burner]);\r\n\r\n        balances[burner] = balances[burner].minus(_value);\r\n        totalSupply = totalSupply.minus(_value);\r\n\r\n        emit Burn(burner, _value);\r\n        emit Transfer(burner, address(0), _value);\r\n    }\r\n}\r\n\r\n// File: contracts/trait/HasOwner.sol\r\n\r\n/**\r\n * @title HasOwner\r\n *\r\n * @dev Allows for exclusive access to certain functionality.\r\n */\r\ncontract HasOwner {\r\n    // The current owner.\r\n    address public owner;\r\n\r\n    // Conditionally the new owner.\r\n    address public newOwner;\r\n\r\n    /**\r\n     * @dev The constructor.\r\n     *\r\n     * @param _owner The address of the owner.\r\n     */\r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    /** \r\n     * @dev Access control modifier that allows only the current owner to call the function.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The event is fired when the current owner is changed.\r\n     *\r\n     * @param _oldOwner The address of the previous owner.\r\n     * @param _newOwner The address of the new owner.\r\n     */\r\n    event OwnershipTransfer(address indexed _oldOwner, address indexed _newOwner);\r\n\r\n    /**\r\n     * @dev Transfering the ownership is a two-step process, as we prepare\r\n     * for the transfer by setting `newOwner` and requiring `newOwner` to accept\r\n     * the transfer. This prevents accidental lock-out if something goes wrong\r\n     * when passing the `newOwner` address.\r\n     *\r\n     * @param _newOwner The address of the proposed new owner.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n \r\n    /**\r\n     * @dev The `newOwner` finishes the ownership transfer process by accepting the\r\n     * ownership.\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransfer(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/token/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable Token\r\n *\r\n * @dev Allows you to pause/unpause transfers of your token.\r\n **/\r\ncontract PausableToken is StandardToken, HasOwner {\r\n\r\n    /// Indicates whether the token contract is paused or not.\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Event fired when the token contracts gets paused.\r\n     */\r\n    event Pause();\r\n\r\n    /**\r\n     * @dev Event fired when the token contracts gets unpaused.\r\n     */\r\n    event Unpause();\r\n\r\n    /**\r\n     * @dev Allows a function to be called only when the token contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses the token contract.\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses the token contract.\r\n     */\r\n    function unpause() public onlyOwner {\r\n        require(paused);\r\n\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    /// Overrides of the standard token's functions to add the paused/unpaused functionality.\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title WIMT contract\r\n */\r\ncontract WIMT is MintableToken, BurnableToken, PausableToken {\r\n    constructor(address _owner, address _minter,  string tokenName,  string tokenSymbol, uint8 tokenDecimals, uint256 __totalSupply)\r\n        StandardToken\r\n\t\t(\r\n            tokenName,   // Token name\r\n            tokenSymbol, // Token symbol\r\n            tokenDecimals,  // Token decimals\r\n\t\t\t__totalSupply //total token supply\r\n        )\r\n        HasOwner(_owner)\r\n        MintableToken(_minter)\r\n        public\r\n    {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_minter\",\"type\":\"address\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"name\":\"__totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WIMT","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002b5c9365f9de48abe1cd9d0340e42b79032a26780000000000000000000000002b5c9365f9de48abe1cd9d0340e42b79032a267800000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000000000457494d5400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000457494d5400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://1bd3b2c79a04de4d8f37fa3edf592f5e7b9f847b408eb42366c2885bfe4cd4fa"}]}