{"status":"1","message":"OK","result":[{"SourceCode":"contract AirSwap {\r\n    function fill(\r\n      address makerAddress,\r\n      uint makerAmount,\r\n      address makerToken,\r\n      address takerAddress,\r\n      uint takerAmount,\r\n      address takerToken,\r\n      uint256 expiration,\r\n      uint256 nonce,\r\n      uint8 v,\r\n      bytes32 r,\r\n      bytes32 s\r\n    ) payable {}\r\n}\r\n\r\ncontract P3D {\r\n  uint256 public stakingRequirement;\r\n  function buy(address _referredBy) public payable returns(uint256) {}\r\n  function balanceOf(address _customerAddress) view public returns(uint256) {}\r\n  function exit() public {}\r\n  function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256) {}\r\n  function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256) { }\r\n  function myDividends(bool _includeReferralBonus) public view returns(uint256) {}\r\n  function withdraw() public {}\r\n  function totalSupply() public view returns(uint256);\r\n}\r\n\r\ncontract Pool {\r\n  P3D constant public p3d = P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\r\n\r\n  address public owner;\r\n  uint256 public minimum;\r\n\r\n  event Contribution(address indexed caller, address indexed receiver, uint256 contribution, uint256 payout);\r\n  event Approved(address addr);\r\n  event Removed(address addr);\r\n  event OwnerChanged(address owner);\r\n  event MinimumChanged(uint256 minimum);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function() external payable {\r\n    // accept donations\r\n    if (msg.sender != address(p3d)) {\r\n      p3d.buy.value(msg.value)(msg.sender);\r\n      emit Contribution(msg.sender, address(0), msg.value, 0);\r\n    }\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  mapping (address => bool) public approved;\r\n\r\n  function approve(address _addr) external onlyOwner() {\r\n    approved[_addr] = true;\r\n    emit Approved(_addr);\r\n  }\r\n\r\n  function remove(address _addr) external onlyOwner() {\r\n    approved[_addr] = false;\r\n    emit Removed(_addr);\r\n  }\r\n\r\n  function changeOwner(address _newOwner) external onlyOwner() {\r\n    owner = _newOwner;\r\n    emit OwnerChanged(owner);\r\n  }\r\n  \r\n  function changeMinimum(uint256 _minimum) external onlyOwner() {\r\n    minimum = _minimum;\r\n    emit MinimumChanged(minimum);\r\n  }\r\n\r\n  function contribute(address _masternode, address _receiver) external payable {\r\n    // buy p3d\r\n    p3d.buy.value(msg.value)(_masternode);\r\n    \r\n    uint256 payout;\r\n    \r\n    // caller must be approved and value must meet the minimum\r\n    if (approved[msg.sender] && msg.value >= minimum) {\r\n      payout = p3d.myDividends(true);\r\n      if (payout != 0) {\r\n        p3d.withdraw();\r\n        // send divs to receiver\r\n        _receiver.transfer(payout);\r\n      }\r\n    }\r\n    \r\n    emit Contribution(msg.sender, _receiver, msg.value, payout);\r\n  }\r\n\r\n  function getInfo() external view returns (uint256, uint256) {\r\n    return (\r\n      p3d.balanceOf(address(this)),\r\n      p3d.myDividends(true)\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Dex {\r\n  using SafeMath for uint256;\r\n\r\n  AirSwap constant airswap = AirSwap(0x8fd3121013A07C57f0D69646E86E7a4880b467b7);\r\n  Pool constant pool = Pool(0xE00c09fEdD3d3Ed09e2D6F6F6E9B1597c1A99bc8);\r\n  \r\n  function fill(\r\n    address masternode,\r\n    address makerAddress,\r\n    uint256 makerAmount,\r\n    address makerToken,\r\n    uint256 takerAmount,\r\n    address takerToken,\r\n    uint256 expiration,\r\n    uint256 nonce,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) public payable {\r\n    // taker token must be ether\r\n    require(takerToken == address(0));\r\n    \r\n    // maker token must not be ether\r\n    require(makerToken != address(0));\r\n    \r\n    // uint256 array to prevent stack too deep\r\n    // [0] fee \r\n    // [1] trade amount \r\n    // [2] maker balance checkpoint\r\n    uint256[] memory settings = new uint256[](3);\r\n    \r\n    // 1% fee on taker amount\r\n    settings[0] = takerAmount / 100;\r\n\r\n    // subtract fee from value\r\n    settings[1] = msg.value.sub(settings[0]);\r\n    \r\n    // checkpoint the maker ether balance\r\n    settings[2] = makerAddress.balance;\r\n      \r\n    // msg value less fee must match taker amount\r\n    require(settings[1] == takerAmount);\r\n    \r\n    // fill order\r\n    airswap.fill.value(settings[1])(\r\n      makerAddress,\r\n      makerAmount,\r\n      makerToken,\r\n      msg.sender,\r\n      settings[1],\r\n      takerToken,\r\n      expiration,\r\n      nonce,\r\n      v,\r\n      r,\r\n      s\r\n    );\r\n    \r\n    // check that the trade was successful (maker balance = checkpoint + trade amount)\r\n    require(makerAddress.balance == (settings[2].add(settings[1])));\r\n\r\n    // send fee to the pool contract\r\n    if (settings[0] != 0) {\r\n      pool.contribute.value(settings[0])(masternode, msg.sender);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"},{\"name\":\"makerAddress\",\"type\":\"address\"},{\"name\":\"makerAmount\",\"type\":\"uint256\"},{\"name\":\"makerToken\",\"type\":\"address\"},{\"name\":\"takerAmount\",\"type\":\"uint256\"},{\"name\":\"takerToken\",\"type\":\"address\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"fill\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Dex","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://05983326e777513ffce2f67f741237c7abac25774de4ef9274f796400db34075"}]}