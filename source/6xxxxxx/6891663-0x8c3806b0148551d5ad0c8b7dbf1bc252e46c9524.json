{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract EthToSmthSwaps {\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public owner;\r\n  address public ratingContractAddress;\r\n  uint256 SafeTime = 1 hours; // atomic swap timeOut\r\n\r\n  struct Swap {\r\n    address targetWallet;\r\n    bytes32 secret;\r\n    bytes20 secretHash;\r\n    uint256 createdAt;\r\n    uint256 balance;\r\n  }\r\n\r\n  // ETH Owner => BTC Owner => Swap\r\n  mapping(address => mapping(address => Swap)) public swaps;\r\n  mapping(address => mapping(address => uint)) public participantSigns;\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n\r\n\r\n  event CreateSwap(address _buyer, address _seller, uint256 _value, bytes20 _secretHash, uint256 createdAt);\r\n\r\n  // ETH Owner creates Swap with secretHash\r\n  // ETH Owner make token deposit\r\n  function createSwap(bytes20 _secretHash, address _participantAddress) public payable {\r\n    require(msg.value > 0);\r\n    require(swaps[msg.sender][_participantAddress].balance == uint256(0));\r\n\r\n    swaps[msg.sender][_participantAddress] = Swap(\r\n      _participantAddress,\r\n      bytes32(0),\r\n      _secretHash,\r\n      now,\r\n      msg.value\r\n    );\r\n\r\n    CreateSwap(_participantAddress, msg.sender, msg.value, _secretHash, now);\r\n  }\r\n\r\n  // ETH Owner creates Swap with secretHash\r\n  // ETH Owner make token deposit\r\n  function createSwapTarget(bytes20 _secretHash, address _participantAddress, address _targetWallet) public payable {\r\n    require(msg.value > 0);\r\n    require(swaps[msg.sender][_participantAddress].balance == uint256(0));\r\n\r\n    swaps[msg.sender][_participantAddress] = Swap(\r\n      _targetWallet,\r\n      bytes32(0),\r\n      _secretHash,\r\n      now,\r\n      msg.value\r\n    );\r\n\r\n    CreateSwap(_participantAddress, msg.sender, msg.value, _secretHash, now);\r\n  }\r\n\r\n  function getBalance(address _ownerAddress) public view returns (uint256) {\r\n    return swaps[_ownerAddress][msg.sender].balance;\r\n  }\r\n\r\n  // Get target wallet (buyer check)\r\n  function getTargetWallet(address _ownerAddress) public returns (address) {\r\n      return swaps[_ownerAddress][msg.sender].targetWallet;\r\n  }\r\n\r\n  event Withdraw(address _buyer, address _seller, uint256 withdrawnAt);\r\n\r\n  // BTC Owner withdraw money and adds secret key to swap\r\n  // BTC Owner receive +1 reputation\r\n  function withdraw(bytes32 _secret, address _ownerAddress) public {\r\n    Swap memory swap = swaps[_ownerAddress][msg.sender];\r\n\r\n    require(swap.secretHash == ripemd160(_secret));\r\n    require(swap.balance > uint256(0));\r\n    require(swap.createdAt.add(SafeTime) > now);\r\n\r\n    swap.targetWallet.transfer(swap.balance);\r\n\r\n    swaps[_ownerAddress][msg.sender].balance = 0;\r\n    swaps[_ownerAddress][msg.sender].secret = _secret;\r\n\r\n    Withdraw(msg.sender, _ownerAddress, now); \r\n  }\r\n  // BTC Owner withdraw money and adds secret key to swap\r\n  // BTC Owner receive +1 reputation\r\n  function withdrawNoMoney(bytes32 _secret, address participantAddress) public {\r\n    Swap memory swap = swaps[msg.sender][participantAddress];\r\n\r\n    require(swap.secretHash == ripemd160(_secret));\r\n    require(swap.balance > uint256(0));\r\n    require(swap.createdAt.add(SafeTime) > now);\r\n\r\n    swap.targetWallet.transfer(swap.balance);\r\n\r\n    swaps[msg.sender][participantAddress].balance = 0;\r\n    swaps[msg.sender][participantAddress].secret = _secret;\r\n\r\n    Withdraw(participantAddress, msg.sender, now); \r\n  }\r\n  // BTC Owner withdraw money and adds secret key to swap\r\n  // BTC Owner receive +1 reputation\r\n  function withdrawOther(bytes32 _secret, address _ownerAddress, address participantAddress) public {\r\n    Swap memory swap = swaps[_ownerAddress][participantAddress];\r\n\r\n    require(swap.secretHash == ripemd160(_secret));\r\n    require(swap.balance > uint256(0));\r\n    require(swap.createdAt.add(SafeTime) > now);\r\n\r\n    swap.targetWallet.transfer(swap.balance);\r\n\r\n    swaps[_ownerAddress][participantAddress].balance = 0;\r\n    swaps[_ownerAddress][participantAddress].secret = _secret;\r\n\r\n    Withdraw(participantAddress, _ownerAddress, now); \r\n  }\r\n\r\n  // ETH Owner receive secret\r\n  function getSecret(address _participantAddress) public view returns (bytes32) {\r\n    return swaps[msg.sender][_participantAddress].secret;\r\n  }\r\n\r\n  event Close(address _buyer, address _seller);\r\n\r\n\r\n\r\n  event Refund(address _buyer, address _seller);\r\n\r\n  // ETH Owner refund money\r\n  // BTC Owner gets -1 reputation\r\n  function refund(address _participantAddress) public {\r\n    Swap memory swap = swaps[msg.sender][_participantAddress];\r\n\r\n    require(swap.balance > uint256(0));\r\n    require(swap.createdAt.add(SafeTime) < now);\r\n\r\n    msg.sender.transfer(swap.balance);\r\n\r\n    clean(msg.sender, _participantAddress);\r\n\r\n    Refund(_participantAddress, msg.sender);\r\n  }\r\n\r\n  function clean(address _ownerAddress, address _participantAddress) internal {\r\n    delete swaps[_ownerAddress][_participantAddress];\r\n    delete participantSigns[_ownerAddress][_participantAddress];\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_secret\",\"type\":\"bytes32\"},{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"getSecret\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantSigns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secret\",\"type\":\"bytes32\"},{\"name\":\"participantAddress\",\"type\":\"address\"}],\"name\":\"withdrawNoMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"name\":\"_participantAddress\",\"type\":\"address\"},{\"name\":\"_targetWallet\",\"type\":\"address\"}],\"name\":\"createSwapTarget\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"swaps\",\"outputs\":[{\"name\":\"targetWallet\",\"type\":\"address\"},{\"name\":\"secret\",\"type\":\"bytes32\"},{\"name\":\"secretHash\",\"type\":\"bytes20\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"createSwap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secret\",\"type\":\"bytes32\"},{\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"name\":\"participantAddress\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratingContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"getTargetWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"indexed\":false,\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"CreateSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawnAt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"Refund\",\"type\":\"event\"}]","ContractName":"EthToSmthSwaps","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://255676d5aa401bd3587baa81092efd944a0a8fc9122d1fa7e951151fc4ad21e6"}]}