{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract BCSToken {\r\n    \r\n    function BCSToken() internal {}\r\n    function transfer(address _to, uint256 _value) public {}\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract investment{\r\n    using SafeMath for uint;\r\n    \r\n    address public owner;\r\n    mapping (address => uint) private amount;\r\n    mapping (address => uint) private day;\r\n    mapping (address => uint) private dateDeposit;\r\n    mapping (address => uint) private rewardPerYear;\r\n    mapping (address => uint) private outcome;\r\n    \r\n    struct a{\r\n        uint aday;\r\n        uint adateDeposit;\r\n        uint aamount;\r\n    }\r\n    BCSToken dc;\r\n    function investment(address _t) public {\r\n        dc = BCSToken(_t);\r\n        owner = msg.sender;\r\n    }\r\n    function Datenow () public view returns (uint timeNow){\r\n        return block.timestamp;\r\n    }\r\n    \r\n    \r\n    function calculate(address _user) private returns (bool status) {\r\n        uint _amount =amount[_user];\r\n        uint _day =day[_user];\r\n        uint _rewardPerYear = 1000;\r\n\r\n\r\n        if(_day == 90 && _amount >= SafeMath.mul(1000000,10**8)){\r\n            _rewardPerYear = 180;\r\n        }else if(_day == 60 && _amount >= SafeMath.mul(1000000,10**8)){\r\n            _rewardPerYear = 160;\r\n        }else if(_day == 90 && _amount >= SafeMath.mul(800000,10**8)){\r\n            _rewardPerYear = 140;\r\n        }else if(_day == 60 && _amount >= SafeMath.mul(800000,10**8)){\r\n            _rewardPerYear = 120;\r\n        }else if(_day == 90 && _amount >= SafeMath.mul(500000,10**8)){\r\n            _rewardPerYear = 100;\r\n        }else if(_day == 60 && _amount >= SafeMath.mul(500000,10**8)){\r\n            _rewardPerYear = 80;\r\n        }else if(_day == 90 && _amount >= SafeMath.mul(300000,10**8)){\r\n            _rewardPerYear = 60;\r\n        }else if(_day == 60 && _amount >= SafeMath.mul(300000,10**8)){\r\n            _rewardPerYear = 40;\r\n        }else if(_day == 30 && _amount >= SafeMath.mul(50001,10**8)){\r\n            _rewardPerYear = 15;\r\n        }else if(_day == 60 && _amount >= SafeMath.mul(50001,10**8)){ \r\n            _rewardPerYear = 25;\r\n        }else if(_day == 90 && _amount >= SafeMath.mul(50001,10**8)){\r\n            _rewardPerYear = 45;\r\n        }else if(_day == 30 && _amount >= SafeMath.mul(10001,10**8)){\r\n            _rewardPerYear = 5;\r\n        }else if(_day == 60 && _amount >= SafeMath.mul(10001,10**8)){\r\n            _rewardPerYear = 15;\r\n        }else if(_day == 90 && _amount >= SafeMath.mul(10001,10**8)){\r\n            _rewardPerYear = 25;\r\n        }else{\r\n            return false;\r\n        }\r\n        \r\n        rewardPerYear[_user]=_rewardPerYear;\r\n        outcome[_user] = SafeMath.add((SafeMath.div(SafeMath.mul(SafeMath.mul((_amount), rewardPerYear[_user]), _day), 365000)), _amount);\r\n        return true;\r\n    }\r\n    \r\n    function _withdraw(address _user) private returns (bool result){\r\n        \r\n        require(timeLeft(_user) == 0);\r\n        dc.transfer(_user, outcome[_user]);\r\n        amount[_user] = 0;\r\n        day[_user] = 0;\r\n        dateDeposit[_user] = 0;\r\n        rewardPerYear[_user] = 0;\r\n        outcome[_user] = 0;\r\n        return true;\r\n    }\r\n    \r\n    function timeLeft(address _user) view private returns (uint result){\r\n        \r\n        uint temp = SafeMath.add(SafeMath.mul(SafeMath.mul(SafeMath.mul(60,60),24),day[_user]),dateDeposit[_user]); // for mainnet (day-month)\r\n        if(now >= temp){\r\n            return 0;\r\n        }else{\r\n            return SafeMath.sub(temp,now);\r\n        }\r\n    }\r\n    \r\n    function deposit(uint _amount, uint _day) public returns (bool result){\r\n        require(amount[msg.sender]==0);\r\n        require(( _day == 90 || _day == 60 || _day == 30));\r\n        require(_amount >= SafeMath.mul(10001,10**8));\r\n        dc.transferFrom(msg.sender, this, _amount);\r\n        amount[msg.sender] = _amount;\r\n        day[msg.sender] = _day;\r\n        dateDeposit[msg.sender] = now;\r\n        calculate(msg.sender);\r\n        return true;\r\n    }\r\n    function withdraw(address _user) public returns (bool result) {\r\n        require(owner == msg.sender);\r\n        return _withdraw(_user);\r\n        \r\n    }\r\n    \r\n    function withdraw() public returns (bool result){\r\n        return _withdraw(msg.sender);\r\n    }\r\n    \r\n    function info(address _user) public view returns (uint principle, uint secondLeft, uint annualized, uint returnInvestment, uint packetDay, uint timestampDeposit){\r\n        return (amount[_user],timeLeft(_user),rewardPerYear[_user],outcome[_user],day[_user],dateDeposit[_user] );\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"info\",\"outputs\":[{\"name\":\"principle\",\"type\":\"uint256\"},{\"name\":\"secondLeft\",\"type\":\"uint256\"},{\"name\":\"annualized\",\"type\":\"uint256\"},{\"name\":\"returnInvestment\",\"type\":\"uint256\"},{\"name\":\"packetDay\",\"type\":\"uint256\"},{\"name\":\"timestampDeposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Datenow\",\"outputs\":[{\"name\":\"timeNow\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_t\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"investment","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000efcafd4a1e76d392d683d4a79cd0e4a751d0be75","Library":"","SwarmSource":"bzzr://16598c097612d00a77f22b5ea5ce27a80c040595de474f2c4adb626fe52a2057"}]}