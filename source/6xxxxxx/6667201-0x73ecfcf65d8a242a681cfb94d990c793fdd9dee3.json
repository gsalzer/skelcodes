{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Subby {\r\n    event Post(address indexed publisherAddress, uint indexed postId, uint indexed timestamp, string publisherUsername, string link, string comment);\r\n    event Donation(address indexed recipientAddress, int indexed postId, address indexed senderAddress, string recipientUsername, string senderUsername, string text, uint amount, uint timestamp);\r\n\r\n    mapping(address => string) public addressToThumbnail;\r\n    mapping(address => string) public addressToBio;\r\n    mapping(address => string) public addressToUsername;\r\n    mapping(string => address) private usernameToAddress;\r\n    mapping(address => string[]) private addressToComments;\r\n    mapping(address => string[]) private addressToLinks;\r\n    mapping(address => uint[]) public addressToTimestamps;\r\n    mapping(address => uint) public addressToMinimumTextDonation;\r\n    mapping(address => string[]) private addressToSubscriptions;\r\n    mapping(address => bool) public addressToIsTerminated;\r\n    mapping(address => uint) public addressToTotalDonationsAmount;\r\n    mapping(address => mapping(uint => uint)) public addressToPostIdToDonationsAmount;\r\n    mapping(address => bool) public addressToHideDonationsAmounts;\r\n   \r\n    constructor() public {}\r\n\r\n    function terminateAccount() public {\r\n        addressToIsTerminated[msg.sender] = true;\r\n    }\r\n  \r\n    function donate(string text, address recipientAddress, string recipientUsername, int postId) public payable {\r\n        require(addressToIsTerminated[recipientAddress] == false, \"Can't donate to terminated account.\");\r\n       \r\n        if (bytes(recipientUsername).length > 0) {\r\n            recipientAddress = usernameToAddress[recipientUsername];\r\n        }\r\n        if (bytes(text).length > 0) {\r\n            require(addressToMinimumTextDonation[recipientAddress] > 0, \"Recipient has disabled donations.\");\r\n            require(msg.value >= addressToMinimumTextDonation[recipientAddress], \"Donation amount lower than recipient minimum donation.\");\r\n        }\r\n        recipientAddress.transfer(msg.value);\r\n        addressToTotalDonationsAmount[recipientAddress] += msg.value;\r\n        if (postId >= 0) {\r\n            addressToPostIdToDonationsAmount[recipientAddress][uint(postId)] += msg.value;\r\n        }\r\n        if (msg.value > addressToMinimumTextDonation[recipientAddress] && addressToMinimumTextDonation[recipientAddress] > 0) {\r\n            if (postId < 0) {\r\n                postId = -1;\r\n            }\r\n            if (bytes(text).length > 0) {\r\n                emit Donation(recipientAddress, postId, msg.sender, addressToUsername[recipientAddress], addressToUsername[msg.sender], text, msg.value, now);\r\n            }\r\n        }\r\n    }\r\n\r\n    function publish(string link, string comment) public {\r\n        require(addressToIsTerminated[msg.sender] == false, \"Terminated accounts may not publish.\");\r\n        uint id = addressToComments[msg.sender].push(comment);\r\n        addressToLinks[msg.sender].push(link);\r\n        addressToTimestamps[msg.sender].push(now);\r\n\r\n        emit Post(msg.sender, id, now, addressToUsername[msg.sender], link, comment);\r\n    }\r\n\r\n    function setMinimumTextDonation (uint value) public {\r\n        addressToMinimumTextDonation[msg.sender] = value;\r\n    }\r\n\r\n    function setThumbnail(string thumbnail) public {\r\n        addressToThumbnail[msg.sender] = thumbnail;\r\n    }\r\n\r\n    function setBio(string bio) public {\r\n        addressToBio[msg.sender] = bio;\r\n    }\r\n\r\n    function editProfile(string thumbnail, bool changeThumbnail, string bio, bool changeBio, uint minimumTextDonation, bool changeMinimumTextDonation, bool hideDonations, bool changeHideDonations, string username, bool changeUsername) public {\r\n        require(addressToIsTerminated[msg.sender] == false, \"Cant not edit terminated account.\");\r\n        if (changeHideDonations) {\r\n            addressToHideDonationsAmounts[msg.sender] = hideDonations;\r\n        }\r\n        if (changeMinimumTextDonation) {\r\n            require(minimumTextDonation > 0, \"Can not set minimumTextDonation to less than 0.\");\r\n            addressToMinimumTextDonation[msg.sender] = minimumTextDonation;\r\n        }\r\n        if (changeThumbnail) {\r\n            addressToThumbnail[msg.sender] = thumbnail;\r\n        }\r\n        if (changeBio) {\r\n            addressToBio[msg.sender] = bio;\r\n        }\r\n        if (changeUsername) {\r\n            require(bytes(username).length < 39, \"Username can not have more than 39 characters.\");\r\n            require(bytes(username).length > 0, \"Username must be longer than 0 characters.\");\r\n            // Require that the name has not already been taken.\r\n            require(usernameToAddress[username] == 0x0000000000000000000000000000000000000000, \"Usernames can not be changed.\");\r\n            // Require that the sender has not already set a name.\r\n            require(bytes(addressToUsername[msg.sender]).length == 0, \"This username is already taken.\");\r\n            addressToUsername[msg.sender] = username;\r\n            usernameToAddress[username] = msg.sender;\r\n        }\r\n    }\r\n\r\n    function getProfile(address _address, string username) public view returns (address, string, uint, string[], uint, bool[]) {\r\n        string[] memory bio_thumbnail = new string[](2);\r\n        bool[] memory hideDonations_isTerminated = new bool[](2);\r\n        hideDonations_isTerminated[0] = addressToHideDonationsAmounts[_address];\r\n        hideDonations_isTerminated[1] = addressToIsTerminated[_address];\r\n        \r\n        if (addressToIsTerminated[_address]) {\r\n            return (0x0000000000000000000000000000000000000000, \"\", 0, bio_thumbnail, 0, hideDonations_isTerminated);\r\n        }\r\n\r\n        if (bytes(username).length > 0) {\r\n            _address = usernameToAddress[username];\r\n        }\r\n\r\n        bio_thumbnail[0] = getBio(_address);\r\n        bio_thumbnail[1] = getThumbnail(_address);\r\n        \r\n        return (_address, addressToUsername[_address], addressToMinimumTextDonation[_address], bio_thumbnail,\r\n            getTotalDonationsAmount(_address), hideDonations_isTerminated);\r\n    }\r\n\r\n    function getProfiles(address[] memory addresses, string[] memory usernames) public view returns (address[] memory, string[] memory, uint[]) {\r\n        address[] memory addressesFromUsernames = getAddressesFromUsernames(usernames);\r\n        string[] memory thumbnails_bios_usernames = new string[]((addresses.length + addressesFromUsernames.length) * 3);\r\n        address[] memory returnAddresses = new address[](addresses.length + addressesFromUsernames.length);\r\n        uint[] memory minimumTextDonations_totalDonationsAmounts = new uint[]((addresses.length + addressesFromUsernames.length) * 2);\r\n\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            thumbnails_bios_usernames[i] = getThumbnail(addresses[i]);\r\n            thumbnails_bios_usernames[i + addresses.length + addressesFromUsernames.length] = getBio(addresses[i]);\r\n            thumbnails_bios_usernames[i + ((addresses.length + addressesFromUsernames.length) * 2)] = getUsername(addresses[i]);\r\n            returnAddresses[i] = addresses[i];\r\n            minimumTextDonations_totalDonationsAmounts[i] = getMinimumTextDonation(addresses[i]);\r\n            minimumTextDonations_totalDonationsAmounts[i + addresses.length + addressesFromUsernames.length] = getTotalDonationsAmount(addresses[i]);\r\n        }\r\n        for (i = 0; i < addressesFromUsernames.length; i++) {\r\n            thumbnails_bios_usernames[i + addresses.length] = getThumbnail(addressesFromUsernames[i]);\r\n            thumbnails_bios_usernames[i + addresses.length + addresses.length + addressesFromUsernames.length] = getBio(addressesFromUsernames[i]);\r\n            thumbnails_bios_usernames[i + addresses.length + ((addresses.length + addressesFromUsernames.length) * 2)] = getUsername(addressesFromUsernames[i]);\r\n            returnAddresses[i + addresses.length] = addressesFromUsernames[i];\r\n            minimumTextDonations_totalDonationsAmounts[i + addresses.length] = getMinimumTextDonation(addressesFromUsernames[i]);\r\n            minimumTextDonations_totalDonationsAmounts[i + addresses.length + addresses.length + addressesFromUsernames.length] = getTotalDonationsAmount(addressesFromUsernames[i]);\r\n        }\r\n        return (returnAddresses, thumbnails_bios_usernames, minimumTextDonations_totalDonationsAmounts);\r\n    }\r\n        \r\n    function getSubscriptions(address _address, string username) public view returns (string[]) {\r\n        if (bytes(username).length > 0) {\r\n            _address = usernameToAddress[username];\r\n        }\r\n        return addressToSubscriptions[_address];\r\n    }\r\n\r\n    function getSubscriptionsFromSender() public view returns (string[]) {\r\n        return addressToSubscriptions[msg.sender];\r\n    }\r\n    \r\n    function syncSubscriptions(string[] subsToPush, string[] subsToOverwrite, uint[] indexesToOverwrite ) public {\r\n        for (uint i = 0; i < indexesToOverwrite.length; i++ ) {\r\n            addressToSubscriptions[msg.sender][indexesToOverwrite[i]] = subsToOverwrite[i];\r\n        }\r\n        for ( i = 0; i < subsToPush.length; i++) {\r\n            addressToSubscriptions[msg.sender].push(subsToPush[i]);\r\n        }\r\n    }\r\n\r\n    function getUsernameFromAddress(address _address) public view returns (string) {\r\n        return addressToUsername[_address];\r\n    }\r\n\r\n    function getAddressFromUsername(string username) public view returns (address) {\r\n        return usernameToAddress[username];\r\n    }\r\n\r\n    function getAddressesFromUsernames(string[] usernames) public view returns (address[]) {\r\n        address[] memory returnAddresses = new address[](usernames.length);\r\n        for (uint i = 0; i < usernames.length; i++) {\r\n            returnAddresses[i] = usernameToAddress[usernames[i]];\r\n        }\r\n        return returnAddresses;\r\n    }\r\n    \r\n    function getComment(address _address, uint id) public view returns (string) {\r\n        if (addressToIsTerminated[_address]) {\r\n            return \"\";\r\n        }\r\n        string[] memory comments = addressToComments[_address];\r\n        if (comments.length > id) {\r\n            return comments[id];\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n    \r\n    function getThumbnail(address _address) public view returns (string) {\r\n        if (addressToIsTerminated[_address]) {\r\n            return \"\";\r\n        }\r\n        return addressToThumbnail[_address];\r\n    }\r\n    \r\n    function getLink(address _address, uint id) public view returns (string) {\r\n        if (addressToIsTerminated[_address]) {\r\n            return \"\";\r\n        }\r\n        string[] memory links = addressToLinks[_address];\r\n        if (links.length > id) {\r\n            return links[id];\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    function getBio(address _address) public view returns (string) {\r\n        if (addressToIsTerminated[_address]) {\r\n            return \"\";\r\n        }\r\n        return addressToBio[_address];\r\n    }\r\n\r\n    function getTimestamp(address _address, uint id) public view returns (uint) {\r\n        if (addressToIsTerminated[_address]) {\r\n            return 0;\r\n        }\r\n        uint[] memory timestamps = addressToTimestamps[_address];\r\n        if (timestamps.length > id) {\r\n            return timestamps[id];\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getTotalDonationsAmount(address _address) public view returns (uint) {\r\n        if (addressToHideDonationsAmounts[_address]) {\r\n            return 0;\r\n        }\r\n        return addressToTotalDonationsAmount[_address];\r\n    }\r\n    \r\n    function getMinimumTextDonation(address _address) public view returns (uint) {\r\n        return addressToMinimumTextDonation[_address];\r\n    }\r\n    \r\n    function getUsername(address _address) public view returns (string) {\r\n        return addressToUsername[_address];\r\n    }\r\n\r\n    function getLinks(address _address) public view returns (string[]) {\r\n        return addressToLinks[_address];\r\n    }\r\n\r\n    function getComments(address _address) public view returns (string[]) {\r\n        return addressToComments[_address];\r\n    }\r\n\r\n    function getTimestamps(address _address) public view returns (uint[]) {\r\n        return addressToTimestamps[_address];\r\n    }\r\n\r\n    function getPostFromId(address _address, string username,  uint id) public view returns ( string[], address, uint, uint, uint) {\r\n        if (bytes(username).length > 0) {\r\n            _address = usernameToAddress[username];\r\n        }\r\n        string[] memory comment_link_username_thumbnail = new string[](4);\r\n        comment_link_username_thumbnail[0] = getComment(_address, id);\r\n        comment_link_username_thumbnail[1] = getLink(_address, id);\r\n        comment_link_username_thumbnail[2] = getUsername(_address);\r\n        comment_link_username_thumbnail[3] = addressToThumbnail[_address];\r\n        uint timestamp = getTimestamp(_address, id);\r\n        uint postDonationsAmount = getPostDonationsAmount(_address, id);\r\n\r\n        return (comment_link_username_thumbnail, _address,  timestamp,  addressToMinimumTextDonation[_address], postDonationsAmount);\r\n    }\r\n    \r\n    function getPostDonationsAmount(address _address, uint id) public view returns (uint) {\r\n        if (addressToHideDonationsAmounts[_address]) {\r\n            return 0;\r\n        }\r\n        return addressToPostIdToDonationsAmount[_address][id];\r\n    }\r\n\r\n    function getPostsFromIds(address[] addresses, string[] usernames, uint[] ids) public view returns (string[], address[], uint[]) {\r\n        address[] memory addressesFromUsernames = getAddressesFromUsernames(usernames);\r\n        string[] memory comments_links_usernames_thumbnails = new string[]((addresses.length + addressesFromUsernames.length) * 4);\r\n        address[] memory publisherAddresses = new address[](addresses.length + addressesFromUsernames.length);\r\n        uint[] memory minimumTextDonations_postDonationsAmount_timestamps = new uint[]((addresses.length + addressesFromUsernames.length) * 3);\r\n\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            comments_links_usernames_thumbnails[i] = getComment(addresses[i], ids[i]);\r\n            comments_links_usernames_thumbnails[i + addresses.length + addressesFromUsernames.length] = getLink(addresses[i], ids[i]);\r\n            comments_links_usernames_thumbnails[i + ((addresses.length + addressesFromUsernames.length) * 2)] = getUsername(addresses[i]);\r\n            comments_links_usernames_thumbnails[i + ((addresses.length + addressesFromUsernames.length) * 3)] = getThumbnail(addresses[i]);\r\n            publisherAddresses[i] = addresses[i];\r\n            minimumTextDonations_postDonationsAmount_timestamps[i] = getMinimumTextDonation(addresses[i]);\r\n            minimumTextDonations_postDonationsAmount_timestamps[i + addresses.length + addressesFromUsernames.length] = getPostDonationsAmount(addresses[i], ids[i]);\r\n            minimumTextDonations_postDonationsAmount_timestamps[i + ((addresses.length + addressesFromUsernames.length) * 2)] = getTimestamp(addresses[i], ids[i]);\r\n        }\r\n        \r\n        for (i = 0; i < addressesFromUsernames.length; i++) {\r\n            comments_links_usernames_thumbnails[i + addresses.length] = getComment(addressesFromUsernames[i], ids[i + addresses.length]);\r\n            comments_links_usernames_thumbnails[i + addresses.length + (addresses.length + addressesFromUsernames.length)] = getLink(addressesFromUsernames[i], ids[i + addresses.length]);\r\n            comments_links_usernames_thumbnails[i + addresses.length + ((addresses.length + addressesFromUsernames.length) * 2)] = getUsername(addressesFromUsernames[i]);\r\n            comments_links_usernames_thumbnails[i + addresses.length + ((addresses.length + addressesFromUsernames.length) * 3)] = getThumbnail(addressesFromUsernames[i]);\r\n            publisherAddresses[i + addresses.length] = addressesFromUsernames[i];\r\n            minimumTextDonations_postDonationsAmount_timestamps[i + addresses.length] = getMinimumTextDonation(addressesFromUsernames[i]);\r\n            minimumTextDonations_postDonationsAmount_timestamps[i + addresses.length + (addresses.length + addressesFromUsernames.length)] = getPostDonationsAmount(addressesFromUsernames[i], ids[i + addresses.length]);\r\n            minimumTextDonations_postDonationsAmount_timestamps[i + addresses.length + ((addresses.length + addressesFromUsernames.length) * 2)] = getTimestamp(addressesFromUsernames[i], ids[i + addresses.length]);\r\n        }\r\n        \r\n        return (comments_links_usernames_thumbnails, publisherAddresses, minimumTextDonations_postDonationsAmount_timestamps);\r\n    }\r\n    \r\n    function getPostsFromPublisher(address _address, string username, uint startAt, bool startAtLatestPost, uint limit)\r\n        public view returns (string[], string[], address, uint[]) {\r\n        if (bytes(username).length > 0) {\r\n            _address = usernameToAddress[username];\r\n        }\r\n        string[] memory comments_links = new string[](limit * 2);\r\n        string[] memory thumbnail_username = new string[](2);\r\n        thumbnail_username[0] = addressToThumbnail[_address];\r\n        thumbnail_username[1] = addressToUsername[_address];\r\n        if (startAtLatestPost == true) {\r\n            startAt = addressToComments[_address].length;\r\n        }\r\n        uint[] memory timestamps_postDonationsAmounts_minimumTextDonation_postCount = new uint[]((limit * 2) + 2);\r\n\r\n        parseCommentsLinks(comments_links, _address, startAt, limit, timestamps_postDonationsAmounts_minimumTextDonation_postCount);\r\n        timestamps_postDonationsAmounts_minimumTextDonation_postCount[limit * 2] = addressToMinimumTextDonation[_address];\r\n        timestamps_postDonationsAmounts_minimumTextDonation_postCount[(limit * 2) + 1] = addressToComments[_address].length;\r\n        \r\n        return (comments_links, thumbnail_username, _address, timestamps_postDonationsAmounts_minimumTextDonation_postCount );\r\n    }\r\n    \r\n    function parseCommentsLinks(string[] comments_links, \r\n        address _address, uint startAt, uint limit, uint[] timestamps_postDonationsAmounts_minimumTextDonation_postCount) public view {\r\n        uint count = 0;\r\n        for (uint i = 1; i < limit + 1; i++) {\r\n            comments_links[count] = getComment(_address, startAt - i);\r\n            timestamps_postDonationsAmounts_minimumTextDonation_postCount[count] = getTimestamp(_address, startAt - i);\r\n            timestamps_postDonationsAmounts_minimumTextDonation_postCount[count + limit] = getPostDonationsAmount(_address, startAt - i);\r\n            count++;\r\n        } \r\n        for (i = 1; i < limit + 1; i++) {\r\n            comments_links[count] = getLink(_address, startAt - i);\r\n            count++;\r\n        } \r\n    }\r\n\r\n    function getTimestampsFromPublishers(address[] addresses, string[] usernames, int[] startAts, int limit) public view returns (uint[], uint[]) {\r\n        uint[] memory returnTimestamps = new uint[]((addresses.length + usernames.length) * uint(limit));\r\n        uint[] memory publisherPostCounts = new uint[](addresses.length + usernames.length);\r\n        uint timestampIndex = 0;\r\n        uint addressesPlusUsernamesIndex = 0;\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            address _address = addresses[i];\r\n            // startAt is the first index that will be returned.\r\n            int startAt;\r\n            if (startAts.length == 0) {\r\n                startAt = int(addressToTimestamps[_address].length - 1);\r\n            } else {\r\n                startAt = startAts[addressesPlusUsernamesIndex];\r\n            }\r\n            // Collect timestamps, starting from startAt and counting down to 0 until limit is reached.\r\n            for (int j = 0; j < limit; j++) {\r\n                if (addressToIsTerminated[_address] == false && ((startAt - j) >= 0) && ((startAt - j) < int(addressToTimestamps[_address].length))) {\r\n                    returnTimestamps[timestampIndex] = addressToTimestamps[_address][uint(startAt - j)];\r\n                } else {\r\n                    returnTimestamps[timestampIndex] = 0;\r\n                }\r\n                timestampIndex++;\r\n            }\r\n            publisherPostCounts[addressesPlusUsernamesIndex] = addressToTimestamps[_address].length;\r\n            addressesPlusUsernamesIndex++;\r\n        }\r\n        // Do the same thing as above, but with usernames instead of addresses. Code duplication is essential to save gas.\r\n        if (usernames.length > 0) {\r\n            addresses = getAddressesFromUsernames(usernames);\r\n            for (i = 0; i < addresses.length; i++) {\r\n                _address = addresses[i];\r\n                if (startAts.length == 0) {\r\n                    startAt = int(addressToTimestamps[_address].length - 1);\r\n                } else {\r\n                    startAt = startAts[addressesPlusUsernamesIndex];\r\n                }\r\n                for (j = 0; j < limit; j++) {\r\n                    if (addressToIsTerminated[_address] == false && ((startAt - j) >= 0) && ((startAt - j) < int(addressToTimestamps[_address].length))) {\r\n                        returnTimestamps[timestampIndex] = addressToTimestamps[_address][uint(startAt - j)];\r\n                    } else {\r\n                        returnTimestamps[timestampIndex] = 0;\r\n                    }\r\n                    timestampIndex++;\r\n                }\r\n                publisherPostCounts[addressesPlusUsernamesIndex] = addressToTimestamps[_address].length;\r\n                addressesPlusUsernamesIndex++;\r\n            }\r\n        }\r\n        return (returnTimestamps, publisherPostCounts);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinimumTextDonation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToPostIdToDonationsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMinimumTextDonation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"usernames\",\"type\":\"string[]\"},{\"name\":\"startAts\",\"type\":\"int256[]\"},{\"name\":\"limit\",\"type\":\"int256\"}],\"name\":\"getTimestampsFromPublishers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLink\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getThumbnail\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getComments\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"usernames\",\"type\":\"string[]\"}],\"name\":\"getAddressesFromUsernames\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"comments_links\",\"type\":\"string[]\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"startAt\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"},{\"name\":\"timestamps_postDonationsAmounts_minimumTextDonation_postCount\",\"type\":\"uint256[]\"}],\"name\":\"parseCommentsLinks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getProfile\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToTimestamps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPostDonationsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSubscriptionsFromSender\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBio\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLinks\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getAddressFromUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminateAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"startAt\",\"type\":\"uint256\"},{\"name\":\"startAtLatestPost\",\"type\":\"bool\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getPostsFromPublisher\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"recipientAddress\",\"type\":\"address\"},{\"name\":\"recipientUsername\",\"type\":\"string\"},{\"name\":\"postId\",\"type\":\"int256\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"usernames\",\"type\":\"string[]\"},{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getPostsFromIds\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"thumbnail\",\"type\":\"string\"},{\"name\":\"changeThumbnail\",\"type\":\"bool\"},{\"name\":\"bio\",\"type\":\"string\"},{\"name\":\"changeBio\",\"type\":\"bool\"},{\"name\":\"minimumTextDonation\",\"type\":\"uint256\"},{\"name\":\"changeMinimumTextDonation\",\"type\":\"bool\"},{\"name\":\"hideDonations\",\"type\":\"bool\"},{\"name\":\"changeHideDonations\",\"type\":\"bool\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"changeUsername\",\"type\":\"bool\"}],\"name\":\"editProfile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPostFromId\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalDonationsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToTotalDonationsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToHideDonationsAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToBio\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"usernames\",\"type\":\"string[]\"}],\"name\":\"getProfiles\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTimestamps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"link\",\"type\":\"string\"},{\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"publish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subsToPush\",\"type\":\"string[]\"},{\"name\":\"subsToOverwrite\",\"type\":\"string[]\"},{\"name\":\"indexesToOverwrite\",\"type\":\"uint256[]\"}],\"name\":\"syncSubscriptions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUsernameFromAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getSubscriptions\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"thumbnail\",\"type\":\"string\"}],\"name\":\"setThumbnail\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToIsTerminated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToThumbnail\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToMinimumTextDonation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getComment\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bio\",\"type\":\"string\"}],\"name\":\"setBio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"publisherAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"publisherUsername\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"link\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"Post\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"postId\",\"type\":\"int256\"},{\"indexed\":true,\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recipientUsername\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"senderUsername\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"}]","ContractName":"Subby","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b1a42e83e03ac045e2e5fd423d00e8075a89a1a962657e425eb77bcb47ba28d6"}]}