{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/*\r\n* NamiMultiSigWallet smart contract-------------------------------\r\n*/\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\ncontract NamiMultiSigWallet {\r\n\r\n    uint constant public MAX_OWNER_COUNT = 50;\r\n\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId);\r\n    event Execution(uint indexed transactionId);\r\n    event ExecutionFailure(uint indexed transactionId);\r\n    event Deposit(address indexed sender, uint value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint required);\r\n\r\n    mapping (uint => Transaction) public transactions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] public owners;\r\n    uint public required;\r\n    uint public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    modifier onlyWallet() {\r\n        require(msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        require(!isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        require(isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        require(transactions[transactionId].destination != 0);\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        require(confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        require(!confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        require(!transactions[transactionId].executed);\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != 0);\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        require(!(ownerCount > MAX_OWNER_COUNT\r\n            || _required > ownerCount\r\n            || _required == 0\r\n            || ownerCount == 0));\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function() public payable {\r\n        if (msg.value > 0)\r\n            emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    constructor(address[] _owners, uint _required)\r\n        public\r\n        validRequirement(_owners.length, _required)\r\n    {\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            require(!(isOwner[_owners[i]] || _owners[i] == 0));\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param owner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint _required)\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, bytes data)\r\n        public\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n        public\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            // Transaction tx = transactions[transactionId];\r\n            transactions[transactionId].executed = true;\r\n            // tx.executed = true;\r\n            if (transactions[transactionId].destination.call.value(transactions[transactionId].value)(transactions[transactionId].data)) {\r\n                emit Execution(transactionId);\r\n            } else {\r\n                emit ExecutionFailure(transactionId);\r\n                transactions[transactionId].executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint value, bytes data)\r\n        internal\r\n        notNull(destination)\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination, \r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i = 0; i < transactionCount; i++) {\r\n            if (pending && !transactions[i].executed || executed && transactions[i].executed)\r\n                count += 1;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n        public\r\n        constant\r\n        returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n        public\r\n        constant\r\n        returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        }\r\n        _confirmations = new address[](count);\r\n        for (i = 0; i < count; i++) {\r\n            _confirmations[i] = confirmationsTemp[i];\r\n        }\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i = 0; i < transactionCount; i++) {\r\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i = from; i < to; i++) {\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n        }\r\n    }\r\n}\r\ncontract PresaleToken {\r\n    mapping (address => uint256) public balanceOf;\r\n    function burnTokens(address _owner) public;\r\n}\r\n /*\r\n * Contract that is working with ERC223 tokens\r\n */\r\n \r\n /**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\n \r\ncontract ERC223ReceivingContract {\r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool success);\r\n    function tokenFallbackBuyer(address _from, uint _value, address _buyer) public returns (bool success);\r\n    function tokenFallbackExchange(address _from, uint _value, uint _price) public returns (bool success);\r\n}\r\n// ERC20 token interface is implemented only partially.\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract NamiCrowdSale {\r\n    using SafeMath for uint256;\r\n\r\n    /// NAC Broker Presale Token\r\n    /// @dev Constructor\r\n    constructor(address _escrow, address _namiMultiSigWallet, address _namiPresale) public {\r\n        require(_namiMultiSigWallet != 0x0);\r\n        escrow = _escrow;\r\n        namiMultiSigWallet = _namiMultiSigWallet;\r\n        namiPresale = _namiPresale;\r\n    }\r\n\r\n\r\n    /*/\r\n     *  Constants\r\n    /*/\r\n\r\n    string public name = \"Nami ICO\";\r\n    string public  symbol = \"NAC\";\r\n    uint   public decimals = 18;\r\n\r\n    bool public TRANSFERABLE = false; // default not transferable\r\n\r\n    uint public constant TOKEN_SUPPLY_LIMIT = 1000000000 * (1 ether / 1 wei);\r\n    \r\n    uint public binary = 0;\r\n\r\n    /*/\r\n     *  Token state\r\n    /*/\r\n\r\n    enum Phase {\r\n        Created,\r\n        Running,\r\n        Paused,\r\n        Migrating,\r\n        Migrated\r\n    }\r\n\r\n    Phase public currentPhase = Phase.Created;\r\n    uint public totalSupply = 0; // amount of tokens already sold\r\n\r\n    // escrow has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public escrow;\r\n\r\n    // Gathered funds can be withdraw only to namimultisigwallet's address.\r\n    address public namiMultiSigWallet;\r\n\r\n    // nami presale contract\r\n    address public namiPresale;\r\n\r\n    // Crowdsale manager has exclusive priveleges to burn presale tokens.\r\n    address public crowdsaleManager;\r\n    \r\n    // binary option address\r\n    address public binaryAddress;\r\n    \r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    modifier onlyCrowdsaleManager() {\r\n        require(msg.sender == crowdsaleManager); \r\n        _; \r\n    }\r\n\r\n    modifier onlyEscrow() {\r\n        require(msg.sender == escrow);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyTranferable() {\r\n        require(TRANSFERABLE);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNamiMultisig() {\r\n        require(msg.sender == namiMultiSigWallet);\r\n        _;\r\n    }\r\n    \r\n    /*/\r\n     *  Events\r\n    /*/\r\n\r\n    event LogBuy(address indexed owner, uint value);\r\n    event LogBurn(address indexed owner, uint value);\r\n    event LogPhaseSwitch(Phase newPhase);\r\n    // Log migrate token\r\n    event LogMigrate(address _from, address _to, uint256 amount);\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /*/\r\n     *  Public functions\r\n    /*/\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    // only escrow can send token (to send token private sale)\r\n    function transferForTeam(address _to, uint256 _value) public\r\n        onlyEscrow\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public\r\n        onlyTranferable\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n       /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) \r\n        public\r\n        onlyTranferable\r\n        returns (bool success)\r\n    {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        onlyTranferable\r\n        returns (bool success) \r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        onlyTranferable\r\n        returns (bool success) \r\n    {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // allows transfer token\r\n    function changeTransferable () public\r\n        onlyEscrow\r\n    {\r\n        TRANSFERABLE = !TRANSFERABLE;\r\n    }\r\n    \r\n    // change escrow\r\n    function changeEscrow(address _escrow) public\r\n        onlyNamiMultisig\r\n    {\r\n        require(_escrow != 0x0);\r\n        escrow = _escrow;\r\n    }\r\n    \r\n    // change binary value\r\n    function changeBinary(uint _binary)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        binary = _binary;\r\n    }\r\n    \r\n    // change binary address\r\n    function changeBinaryAddress(address _binaryAddress)\r\n        public\r\n        onlyEscrow\r\n    {\r\n        require(_binaryAddress != 0x0);\r\n        binaryAddress = _binaryAddress;\r\n    }\r\n    \r\n    /*\r\n    * price in ICO:\r\n    * first week: 1 ETH = 2400 NAC\r\n    * second week: 1 ETH = 23000 NAC\r\n    * 3rd week: 1 ETH = 2200 NAC\r\n    * 4th week: 1 ETH = 2100 NAC\r\n    * 5th week: 1 ETH = 2000 NAC\r\n    * 6th week: 1 ETH = 1900 NAC\r\n    * 7th week: 1 ETH = 1800 NAC\r\n    * 8th week: 1 ETH = 1700 nac\r\n    * time: \r\n    * 1517443200: Thursday, February 1, 2018 12:00:00 AM\r\n    * 1518048000: Thursday, February 8, 2018 12:00:00 AM\r\n    * 1518652800: Thursday, February 15, 2018 12:00:00 AM\r\n    * 1519257600: Thursday, February 22, 2018 12:00:00 AM\r\n    * 1519862400: Thursday, March 1, 2018 12:00:00 AM\r\n    * 1520467200: Thursday, March 8, 2018 12:00:00 AM\r\n    * 1521072000: Thursday, March 15, 2018 12:00:00 AM\r\n    * 1521676800: Thursday, March 22, 2018 12:00:00 AM\r\n    * 1522281600: Thursday, March 29, 2018 12:00:00 AM\r\n    */\r\n    function getPrice() public view returns (uint price) {\r\n        if (now < 1517443200) {\r\n            // presale\r\n            return 3450;\r\n        } else if (1517443200 < now && now <= 1518048000) {\r\n            // 1st week\r\n            return 2400;\r\n        } else if (1518048000 < now && now <= 1518652800) {\r\n            // 2nd week\r\n            return 2300;\r\n        } else if (1518652800 < now && now <= 1519257600) {\r\n            // 3rd week\r\n            return 2200;\r\n        } else if (1519257600 < now && now <= 1519862400) {\r\n            // 4th week\r\n            return 2100;\r\n        } else if (1519862400 < now && now <= 1520467200) {\r\n            // 5th week\r\n            return 2000;\r\n        } else if (1520467200 < now && now <= 1521072000) {\r\n            // 6th week\r\n            return 1900;\r\n        } else if (1521072000 < now && now <= 1521676800) {\r\n            // 7th week\r\n            return 1800;\r\n        } else if (1521676800 < now && now <= 1522281600) {\r\n            // 8th week\r\n            return 1700;\r\n        } else {\r\n            return binary;\r\n        }\r\n    }\r\n\r\n\r\n    function() payable public {\r\n        buy(msg.sender);\r\n    }\r\n    \r\n    \r\n    function buy(address _buyer) payable public {\r\n        // Available only if presale is running.\r\n        require(currentPhase == Phase.Running);\r\n        // require ICO time or binary option\r\n        require(now <= 1522281600 || msg.sender == binaryAddress);\r\n        require(msg.value != 0);\r\n        uint newTokens = msg.value * getPrice();\r\n        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);\r\n        // add new token to buyer\r\n        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);\r\n        // add new token to totalSupply\r\n        totalSupply = totalSupply.add(newTokens);\r\n        emit LogBuy(_buyer,newTokens);\r\n        emit Transfer(this,_buyer,newTokens);\r\n    }\r\n    \r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function burnTokens(address _owner) public\r\n        onlyCrowdsaleManager\r\n    {\r\n        // Available only during migration phase\r\n        require(currentPhase == Phase.Migrating);\r\n\r\n        uint tokens = balanceOf[_owner];\r\n        require(tokens != 0);\r\n        balanceOf[_owner] = 0;\r\n        totalSupply -= tokens;\r\n        emit LogBurn(_owner, tokens);\r\n        emit Transfer(_owner, crowdsaleManager, tokens);\r\n\r\n        // Automatically switch phase when migration is done.\r\n        if (totalSupply == 0) {\r\n            currentPhase = Phase.Migrated;\r\n            emit LogPhaseSwitch(Phase.Migrated);\r\n        }\r\n    }\r\n\r\n\r\n    /*/\r\n     *  Administrative functions\r\n    /*/\r\n    function setPresalePhase(Phase _nextPhase) public\r\n        onlyEscrow\r\n    {\r\n        bool canSwitchPhase\r\n            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\r\n            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\r\n                // switch to migration phase only if crowdsale manager is set\r\n            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\r\n                && _nextPhase == Phase.Migrating\r\n                && crowdsaleManager != 0x0)\r\n            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\r\n                // switch to migrated only if everyting is migrated\r\n            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\r\n                && totalSupply == 0);\r\n\r\n        require(canSwitchPhase);\r\n        currentPhase = _nextPhase;\r\n        emit LogPhaseSwitch(_nextPhase);\r\n    }\r\n\r\n\r\n    function withdrawEther(uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != 0x0);\r\n        // Available at any phase.\r\n        if (address(this).balance > 0) {\r\n            namiMultiSigWallet.transfer(_amount);\r\n        }\r\n    }\r\n    \r\n    function safeWithdraw(address _withdraw, uint _amount) public\r\n        onlyEscrow\r\n    {\r\n        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\r\n        if (namiWallet.isOwner(_withdraw)) {\r\n            _withdraw.transfer(_amount);\r\n        }\r\n    }\r\n\r\n\r\n    function setCrowdsaleManager(address _mgr) public\r\n        onlyEscrow\r\n    {\r\n        // You can't change crowdsale contract when migration is in progress.\r\n        require(currentPhase != Phase.Migrating);\r\n        crowdsaleManager = _mgr;\r\n    }\r\n\r\n    // internal migrate migration tokens\r\n    function _migrateToken(address _from, address _to)\r\n        internal\r\n    {\r\n        PresaleToken presale = PresaleToken(namiPresale);\r\n        uint256 newToken = presale.balanceOf(_from);\r\n        require(newToken > 0);\r\n        // burn old token\r\n        presale.burnTokens(_from);\r\n        // add new token to _to\r\n        balanceOf[_to] = balanceOf[_to].add(newToken);\r\n        // add new token to totalSupply\r\n        totalSupply = totalSupply.add(newToken);\r\n        emit LogMigrate(_from, _to, newToken);\r\n        emit Transfer(this,_to,newToken);\r\n    }\r\n\r\n    // migate token function for Nami Team\r\n    function migrateToken(address _from, address _to) public\r\n        onlyEscrow\r\n    {\r\n        _migrateToken(_from, _to);\r\n    }\r\n\r\n    // migrate token for investor\r\n    function migrateForInvestor() public {\r\n        _migrateToken(msg.sender, msg.sender);\r\n    }\r\n\r\n    // Nami internal exchange\r\n    \r\n    // event for Nami exchange\r\n    event TransferToBuyer(address indexed _from, address indexed _to, uint _value, address indexed _seller);\r\n    event TransferToExchange(address indexed _from, address indexed _to, uint _value, uint _price);\r\n    \r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the NamiExchange address.\r\n     *      Invokes the `tokenFallbackExchange` function.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallbackExchange` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _price price to sell token.\r\n     */\r\n     \r\n    function transferToExchange(address _to, uint _value, uint _price) public {\r\n        uint codeLength;\r\n        \r\n        assembly {\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender,_to,_value);\r\n        if (codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallbackExchange(msg.sender, _value, _price);\r\n            emit TransferToExchange(msg.sender, _to, _value, _price);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the NamiExchange address.\r\n     *      Invokes the `tokenFallbackBuyer` function.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallbackBuyer` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _buyer address of seller.\r\n     */\r\n     \r\n    function transferToBuyer(address _to, uint _value, address _buyer) public {\r\n        uint codeLength;\r\n        \r\n        assembly {\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender,_to,_value);\r\n        if (codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallbackBuyer(msg.sender, _value, _buyer);\r\n            emit TransferToBuyer(msg.sender, _to, _value, _buyer);\r\n        }\r\n    }\r\n//-------------------------------------------------------------------------------------------------------\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/ds-stop/lib/ds-auth/src/auth.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() public {\r\n        owner = msg.sender;\r\n        LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/ds-stop/lib/ds-note/src/note.sol\r\n/// note.sol -- the `note' modifier, for logging calls as events\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint              wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n////// lib/ds-stop/src/stop.sol\r\n/// stop.sol -- mixin for enable/disable functionality\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import \"ds-auth/auth.sol\"; */\r\n/* import \"ds-note/note.sol\"; */\r\n\r\ncontract DSStop is DSNote, DSAuth {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\n////// lib/erc20/src/erc20.sol\r\n/// erc20.sol -- API for the ERC20 token standard\r\n\r\n// See <https://github.com/ethereum/EIPs/issues/20>.\r\n\r\n// This file likely does not meet the threshold of originality\r\n// required for copyright to apply.  As a result, this is free and\r\n// unencumbered software belonging to the public domain.\r\n\r\n/* pragma solidity ^0.4.8; */\r\n\r\ncontract ERC20Events {\r\n    event Approval(address indexed src, address indexed guy, uint wad);\r\n    event Transfer(address indexed src, address indexed dst, uint wad);\r\n}\r\n\r\ncontract ERC20 is ERC20Events {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address guy) public view returns (uint);\r\n    function allowance(address src, address guy) public view returns (uint);\r\n\r\n    function approve(address guy, uint wad) public returns (bool);\r\n    function transfer(address dst, uint wad) public returns (bool);\r\n    function transferFrom(\r\n        address src, address dst, uint wad\r\n    ) public returns (bool);\r\n}\r\n\r\n////// src/base.sol\r\n/// base.sol -- basic ERC20 implementation\r\n\r\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import \"erc20/erc20.sol\"; */\r\n/* import \"ds-math/math.sol\"; */\r\n\r\ncontract DSTokenBase is ERC20, DSMath {\r\n    uint256                                            _supply;\r\n    mapping (address => uint256)                       _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n\r\n    function DSTokenBase(uint supply) public {\r\n        _balances[msg.sender] = supply;\r\n        _supply = supply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _supply;\r\n    }\r\n    function balanceOf(address src) public view returns (uint) {\r\n        return _balances[src];\r\n    }\r\n    function allowance(address src, address guy) public view returns (uint) {\r\n        return _approvals[src][guy];\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (src != msg.sender) {\r\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        }\r\n\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n\r\n        Approval(msg.sender, guy, wad);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n////// src/token.sol\r\n/// token.sol -- ERC20 implementation with minting and burning\r\n\r\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import \"ds-stop/stop.sol\"; */\r\n\r\n/* import \"./base.sol\"; */\r\n\r\ncontract DSToken is DSTokenBase(10000000000000000000000000), DSStop {\r\n\r\n    bytes32  public  symbol;\r\n    uint256  public  decimals = 18; // standard token precision. override to customize\r\n\r\n    function DSToken(bytes32 symbol_) public {\r\n        symbol = symbol_;\r\n    }\r\n\r\n    event Mint(address indexed guy, uint wad);\r\n    event Burn(address indexed guy, uint wad);\r\n\r\n    function approve(address guy) public stoppable returns (bool) {\r\n        return super.approve(guy, uint(-1));\r\n    }\r\n\r\n    function approve(address guy, uint wad) public stoppable returns (bool) {\r\n        return super.approve(guy, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        stoppable\r\n        returns (bool)\r\n    {\r\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\r\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        }\r\n\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function push(address dst, uint wad) public {\r\n        transferFrom(msg.sender, dst, wad);\r\n    }\r\n    function pull(address src, uint wad) public {\r\n        transferFrom(src, msg.sender, wad);\r\n    }\r\n    function move(address src, address dst, uint wad) public {\r\n        transferFrom(src, dst, wad);\r\n    }\r\n\r\n    function mint(uint wad) public {\r\n        mint(msg.sender, wad);\r\n    }\r\n    function burn(uint wad) public {\r\n        burn(msg.sender, wad);\r\n    }\r\n    function mint(address guy, uint wad) public auth stoppable {\r\n        _balances[guy] = add(_balances[guy], wad);\r\n        _supply = add(_supply, wad);\r\n        Mint(guy, wad);\r\n    }\r\n    function burn(address guy, uint wad) public auth stoppable {\r\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\r\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\r\n        }\r\n\r\n        _balances[guy] = sub(_balances[guy], wad);\r\n        _supply = sub(_supply, wad);\r\n        Burn(guy, wad);\r\n    }\r\n\r\n    // Optional token name\r\n    bytes32   public  name = \"\";\r\n\r\n    function setName(bytes32 name_) public auth {\r\n        name = name_;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract NamiTradeDai{\r\n    using SafeMath for uint256;\r\n\r\n    constructor(address _escrow, address _namiMultiSigWallet, address _namiAddress, address _daiAddress) public {\r\n        require(_namiMultiSigWallet != 0x0);\r\n        escrow = _escrow;\r\n        namiMultiSigWallet = _namiMultiSigWallet;\r\n        NamiAddr = _namiAddress;\r\n        DaiAddress = _daiAddress;\r\n    }\r\n\r\n    // escrow has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public escrow;\r\n    uint public minWithdraw = 10 * 10**18; // 10 DAI\r\n    uint public maxWithdraw = 100 * 10**18; // max DAI withdraw one time\r\n\r\n    // Gathered funds can be withdraw only to namimultisigwallet's address.\r\n    address public namiMultiSigWallet;\r\n\r\n    address public DaiAddress;\r\n\r\n    /// address of Nami token\r\n    address public NamiAddr;\r\n\r\n    /**\r\n    * list setting function\r\n    */\r\n    mapping(address => bool) public isController;\r\n\r\n    /**\r\n     * List event\r\n     */\r\n    event Withdraw(address indexed user, uint amount, uint timeWithdraw);\r\n\r\n    modifier onlyEscrow() {\r\n        require(msg.sender == escrow);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNamiMultisig {\r\n        require(msg.sender == namiMultiSigWallet);\r\n        _;\r\n    }\r\n\r\n    modifier onlyController {\r\n        require(isController[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    // change escrow\r\n    function changeEscrow(address _escrow) public\r\n    onlyNamiMultisig\r\n    {\r\n        require(_escrow != 0x0);\r\n        escrow = _escrow;\r\n    }\r\n\r\n    // min and max for withdraw nac\r\n    function changeMinWithdraw(uint _minWithdraw) public\r\n    onlyEscrow\r\n    {\r\n        require(_minWithdraw != 0);\r\n        minWithdraw = _minWithdraw;\r\n    }\r\n\r\n    function changeMaxWithdraw(uint _maxNac) public\r\n    onlyEscrow\r\n    {\r\n        require(_maxNac != 0);\r\n        maxWithdraw = _maxNac;\r\n    }\r\n\r\n    /// @dev withdraw ether to nami multisignature wallet, only escrow can call\r\n    /// @param _amount value ether in wei to withdraw\r\n    function withdrawEther(uint _amount, address _to) public\r\n    onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != address(0x0));\r\n        // Available at any phase.\r\n        if (address(this).balance > 0) {\r\n            _to.transfer(_amount);\r\n        }\r\n    }\r\n\r\n\r\n    /// @dev withdraw NAC to nami multisignature wallet, only escrow can call\r\n    /// @param _amount value NAC to withdraw\r\n    function withdrawNac(uint _amount) public\r\n    onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != address(0x0));\r\n        // Available at any phase.\r\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\r\n        if (namiToken.balanceOf(address(this)) > 0) {\r\n            namiToken.transfer(namiMultiSigWallet, _amount);\r\n        }\r\n    }\r\n\r\n    /// @dev withdraw DAI to nami multisignature wallet, only escrow can call\r\n    /// @param _amount value NAC to withdraw\r\n    function withdrawDai(uint _amount) public\r\n    onlyEscrow\r\n    {\r\n        require(namiMultiSigWallet != address(0x0));\r\n        // Available at any phase.\r\n        DSToken DAIToken = DSToken(DaiAddress);\r\n        if (DAIToken.balanceOf(address(this)) > 0) {\r\n            DAIToken.transfer(namiMultiSigWallet, _amount);\r\n        }\r\n    }\r\n\r\n    // set controller address\r\n    /**\r\n     * make new controller\r\n     * require input address is not a controller\r\n     * execute any time in sc state\r\n     */\r\n    function setController(address _controller)\r\n    public\r\n    onlyEscrow\r\n    {\r\n        require(!isController[_controller]);\r\n        isController[_controller] = true;\r\n    }\r\n\r\n    /**\r\n     * remove controller\r\n     * require input address is a controller\r\n     * execute any time in sc state\r\n     */\r\n    function removeController(address _controller)\r\n    public\r\n    onlyEscrow\r\n    {\r\n        require(isController[_controller]);\r\n        isController[_controller] = false;\r\n    }\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    string public name = \"Nami wallet\";\r\n\r\n\r\n    function withdrawToken(address _account, uint _amount) public\r\n    onlyController\r\n    {\r\n        require(_account != address(0x0) && _amount != 0);\r\n        require(_amount >= minWithdraw && _amount <= maxWithdraw);\r\n        DSToken DAIToken = DSToken(DaiAddress);\r\n        if (DAIToken.balanceOf(address(this)) >= _amount) {\r\n            DAIToken.transfer(_account, _amount);\r\n        }\r\n        // emit event\r\n        emit Withdraw(_account, _amount, now);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"namiMultiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNac\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxNac\",\"type\":\"uint256\"}],\"name\":\"changeMaxWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NamiAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minWithdraw\",\"type\":\"uint256\"}],\"name\":\"changeMinWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"changeEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DaiAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_namiMultiSigWallet\",\"type\":\"address\"},{\"name\":\"_namiAddress\",\"type\":\"address\"},{\"name\":\"_daiAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeWithdraw\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"NamiTradeDai","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000059eda0839bb10479d20258a7c264a30a43e88bc90000000000000000000000004e237f139582708a592a14034b3c1a5b38da45a60000000000000000000000008d80de8a78198396329dfa769ad54d24bf90e7aa00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359","Library":"","SwarmSource":"bzzr://0536bde712de9405b6b4b27444ebc916aa467e1026d1d052a48431289f7d69f1"}]}