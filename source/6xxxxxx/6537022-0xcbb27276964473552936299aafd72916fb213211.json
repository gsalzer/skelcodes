{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    // OwnershipTransferred(owner, newOwner);\r\n   emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary Locklist {\r\n  \r\n  struct List {\r\n    mapping(address => bool) registry;\r\n  }\r\n  \r\n  function add(List storage list, address _addr)\r\n    internal\r\n  {\r\n    list.registry[_addr] = true;\r\n  }\r\n\r\n  function remove(List storage list, address _addr)\r\n    internal\r\n  {\r\n    list.registry[_addr] = false;\r\n  }\r\n\r\n  function check(List storage list, address _addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return list.registry[_addr];\r\n  }\r\n}\r\n\r\ncontract Locklisted is Ownable  {\r\n\r\n  Locklist.List private _list;\r\n  \r\n  modifier onlyLocklisted() {\r\n    require(Locklist.check(_list, msg.sender) == true);\r\n    _;\r\n  }\r\n\r\n  event AddressAdded(address _addr);\r\n  event AddressRemoved(address _addr);\r\n  \r\n  function LocklistedAddress()\r\n  public\r\n  {\r\n    Locklist.add(_list, msg.sender);\r\n  }\r\n\r\n  function LocklistAddressenable(address _addr) onlyOwner\r\n    public\r\n  {\r\n    Locklist.add(_list, _addr);\r\n    emit AddressAdded(_addr);\r\n  }\r\n\r\n  function LocklistAddressdisable(address _addr) onlyOwner\r\n    public\r\n  {\r\n    Locklist.remove(_list, _addr);\r\n   emit AddressRemoved(_addr);\r\n  }\r\n  \r\n  function LocklistAddressisListed(address _addr)\r\n  public\r\n  view\r\n  returns (bool)\r\n  {\r\n      return Locklist.check(_list, _addr);\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract BasicToken is ERC20Basic,Locklisted {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(!LocklistAddressisListed(_to));\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    \r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n   emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(!LocklistAddressisListed(_to));\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n   emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n   emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n   emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n   emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract TokenFreeze is Ownable, StandardToken {\r\n  uint256 public unfreeze_date;\r\n  \r\n  event FreezeDateChanged(string message, uint256 date);\r\n\r\n  function TokenFreeze() public {\r\n    unfreeze_date = now;\r\n  }\r\n\r\n  modifier freezed() {\r\n    require(unfreeze_date < now);\r\n    _;\r\n  }\r\n\r\n  function changeFreezeDate(uint256 datetime) onlyOwner public {\r\n    require(datetime != 0);\r\n    unfreeze_date = datetime;\r\n  emit  FreezeDateChanged(\"Unfreeze Date: \", datetime);\r\n  }\r\n  \r\n  function transferFrom(address _from, address _to, uint256 _value) freezed public returns (bool) {\r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) freezed public returns (bool) {\r\n    super.transfer(_to, _value);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is TokenFreeze {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  \r\n  string public constant name = \"Vertex\";\r\n  string public constant symbol = \"VTEX\";\r\n  uint8 public constant decimals = 5;  // 18 is the most common number of decimal places\r\n  bool public mintingFinished = false;\r\n \r\n  mapping (address => bool) public whitelist; \r\n  \r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    require(!LocklistAddressisListed(_to));\r\n    totalSupply = totalSupply.add(_amount);\r\n    require(totalSupply <= 30000000000000);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit  Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract WhitelistToken is Locklisted {\r\n\r\n  function onlyLocklistedCanDo()\r\n    onlyLocklisted\r\n    view\r\n    external\r\n  {    \r\n  }\r\n\r\n}\r\n\r\n//For production, change all days to days\r\n//Change and check days and discounts\r\ncontract Vertex_Token is Ownable,  Locklisted, MintableToken {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    MintableToken public token;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    // uint256 public PrivateSaleStartTime;\r\n    // uint256 public PrivateSaleEndTime;\r\n    uint256 public ICOStartTime = 1538380800;\r\n    uint256 public ICOEndTime = 1548403200;\r\n\r\n    uint256 public hardCap = 30000000000000;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate;\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event newOraclizeQuery(string description);\r\n\r\n    function Vertex_Token(uint256 _rate, address _wallet, uint256 _unfreeze_date)  public {\r\n        require(_rate > 0);\r\n        require(_wallet != address(0));\r\n\r\n        token = createTokenContract();\r\n\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        \r\n        token.changeFreezeDate(_unfreeze_date);\r\n    }\r\n   \r\n    // function startICO() onlyOwner public {\r\n    //     require(ICOStartTime == 0);\r\n    //     ICOStartTime = now;\r\n    //     ICOEndTime = ICOStartTime + 112 days;\r\n    // }\r\n    // function stopICO() onlyOwner public {\r\n    //     require(ICOEndTime > now);\r\n    //     ICOEndTime = now;\r\n    // }\r\n    \r\n    function changeTokenFreezeDate(uint256 _new_date) onlyOwner public {\r\n        token.changeFreezeDate(_new_date);\r\n    }\r\n    \r\n    function unfreezeTokens() onlyOwner public {\r\n        token.changeFreezeDate(now);\r\n    }\r\n\r\n    // creates the token to be sold.\r\n    // override this method to have crowdsale of a specific mintable token.\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new MintableToken();\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () payable public {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    //return token price in cents\r\n    function getUSDPrice() public constant returns (uint256 cents_by_token) {\r\n        uint256 total_tokens = SafeMath.div(totalTokenSupply(), token.decimals());\r\n\r\n        if (total_tokens > 165000000)\r\n            return 31;\r\n        else if (total_tokens > 150000000)\r\n            return 30;\r\n        else if (total_tokens > 135000000)\r\n            return 29;\r\n        else if (total_tokens > 120000000)\r\n            return 28;\r\n        else if (total_tokens > 105000000)\r\n            return 27;\r\n        else if (total_tokens > 90000000)\r\n            return 26;\r\n        else if (total_tokens > 75000000)\r\n            return 25;\r\n        else if (total_tokens > 60000000)\r\n            return 24;\r\n        else if (total_tokens > 45000000)\r\n            return 23;\r\n        else if (total_tokens > 30000000)\r\n            return 22;\r\n        else if (total_tokens > 15000000)\r\n            return 18;\r\n        else\r\n            return 15;\r\n    }\r\n    // function calcBonus(uint256 tokens, uint256 ethers) public constant returns (uint256 tokens_with_bonus) {\r\n    //     return tokens;\r\n    // }\r\n    // string 123.45 to 12345 converter\r\n    function stringFloatToUnsigned(string _s) payable public returns (string) {\r\n        bytes memory _new_s = new bytes(bytes(_s).length - 1);\r\n        uint k = 0;\r\n\r\n        for (uint i = 0; i < bytes(_s).length; i++) {\r\n            if (bytes(_s)[i] == '.') { break; } // 1\r\n\r\n            _new_s[k] = bytes(_s)[i];\r\n            k++;\r\n        }\r\n\r\n        return string(_new_s);\r\n    }\r\n    // callback for oraclize \r\n    // function __callback(bytes32 myid, string result) public {\r\n    //     if (msg.sender != oraclize_cbAddress()) revert();\r\n    //     string memory converted = stringFloatToUnsigned(result);\r\n    //     rate = parseInt(converted);\r\n    //     rate = SafeMath.div(1000000000000000000, rate); // price for 1 USD in WEI \r\n    // }\r\n    // price updater \r\n    // function updatePrice() payable public {\r\n    //     oraclize_setProof(proofType_NONE);\r\n    //     if (oraclize_getPrice(\"URL\") > address(this).balance) {\r\n    //      emit newOraclizeQuery(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee\");\r\n    //     } else {\r\n    //      emit   newOraclizeQuery(\"Oraclize query was sent, standing by for the answer..\");\r\n    //         oraclize_query(\"URL\", \"json(https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD).USD\");\r\n    //     }\r\n    // }\r\n    //amy\r\n    \r\n    \r\n     \r\n     function withdraw(uint amount) onlyOwner returns(bool) {\r\n         require(amount < this.balance);\r\n        wallet.transfer(amount);\r\n        return true;\r\n\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n   //end\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n\r\n        uint256 _convert_rate = SafeMath.div(SafeMath.mul(rate, getUSDPrice()), 100);\r\n\r\n        // calculate token amount to be created\r\n        uint256 weiAmount = SafeMath.mul(msg.value, 10**uint256(token.decimals()));\r\n        uint256 tokens = SafeMath.div(weiAmount, _convert_rate);\r\n        require(tokens > 0);\r\n        \r\n        //do not need bonus of contrib amount calc\r\n        // tokens = calcBonus(tokens, msg.value.div(10**uint256(token.decimals())));\r\n\r\n        // update state\r\n        weiRaised = SafeMath.add(weiRaised, msg.value);\r\n\r\n        // token.mint(beneficiary, tokens);\r\n        emit TokenPurchase(msg.sender, beneficiary, msg.value, tokens);\r\n        // updatePrice();\r\n        // forwardFunds();\r\n    }\r\n\r\n\r\n    //to send tokens for bitcoin bakers and bounty\r\n    function sendTokens(address _to, uint256 _amount) onlyOwner public {\r\n        token.mint(_to, _amount);\r\n    }\r\n    //change owner for child contract\r\n    function transferTokenOwnership(address _newOwner) onlyOwner public {\r\n        token.transferOwnership(_newOwner);\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(address(this).balance);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool hardCapOk = token.totalSupply() < SafeMath.mul(hardCap, 10**uint256(token.decimals()));\r\n       // bool withinPrivateSalePeriod = now >= PrivateSaleStartTime && now <= PrivateSaleEndTime;\r\n        bool withinICOPeriod = now >= ICOStartTime && now <= ICOEndTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        \r\n        // private-sale hardcap\r\n        uint256 total_tokens = SafeMath.div(totalTokenSupply(), token.decimals());\r\n        // if (withinPrivateSalePeriod && total_tokens >= 30000000)\r\n        // {\r\n        //     stopPrivateSale();\r\n        //     return false;\r\n        // }\r\n        \r\n        // return hardCapOk && (withinICOPeriod || withinPrivateSalePeriod) && nonZeroPurchase;\r\n         return hardCapOk && withinICOPeriod && nonZeroPurchase;\r\n    }\r\n    \r\n    // total supply of tokens\r\n    function totalTokenSupply() public view returns (uint256) {\r\n        return token.totalSupply();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ICOStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"changeFreezeDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_date\",\"type\":\"uint256\"}],\"name\":\"changeTokenFreezeDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unfreeze_date\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"LocklistAddressenable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"LocklistAddressisListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_s\",\"type\":\"string\"}],\"name\":\"stringFloatToUnsigned\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LocklistedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUSDPrice\",\"outputs\":[{\"name\":\"cents_by_token\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"LocklistAddressdisable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_unfreeze_date\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"newOraclizeQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"FreezeDateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Vertex_Token","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000f35a192475527f80efcfee5040c8b5bbb596f69a000000000000000000000000000000000000000000000000000000005bc67b80","Library":"","SwarmSource":"bzzr://f38137c18a913422f7e6b5dea2c59e691f57869073b960687e2482b7b8cdf029"}]}