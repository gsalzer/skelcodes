{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract NervesStakeTestingPremium{\r\n\r\n    using SafeMath for uint;\r\n    ERC20 public token;\r\n\r\n    struct Contribution{\r\n        uint amount;\r\n        uint time;\r\n    }\r\n\r\n    struct User{\r\n        address user;\r\n        uint amountAvailableToWithdraw;\r\n        bool exists;\r\n        uint totalAmount;\r\n        uint totalBonusReceived;\r\n        uint withdrawCount;\r\n        Contribution[] contributions;       \r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    \r\n    address[] usersList;\r\n    address owner;\r\n\r\n    uint public totalTokensDeposited;\r\n\r\n    uint public indexOfPayee;\r\n    uint public EthBonus;\r\n    uint public stakeContractBalance;\r\n    uint public bonusRate;\r\n\r\n    uint public indexOfEthSent;\r\n\r\n    bool public depositStatus;\r\n\r\n\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(address _token, uint _bonusRate) public {\r\n        token = ERC20(_token);\r\n        owner = msg.sender;\r\n        bonusRate = _bonusRate;\r\n    }\r\n\r\n    event OwnerChanged(address newOwner);\r\n\r\n    function ChangeOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != 0x0);\r\n        require(_newOwner != owner);\r\n        owner = _newOwner;\r\n\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n\r\n    event BonusChanged(uint newBonus);\r\n\r\n    function ChangeBonus(uint _newBonus) public onlyOwner {\r\n        require(_newBonus > 0);\r\n        bonusRate = _newBonus;\r\n\r\n        emit BonusChanged(_newBonus);\r\n    }\r\n\r\n    event Deposited(address from, uint amount);\r\n\r\n    function Deposit(uint _value) public returns(bool) {\r\n        require(depositStatus);\r\n        require(_value >= 100000 * (10 ** 18));\r\n        require(token.allowance(msg.sender, address(this)) >= _value);\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        if(!user.exists){\r\n            usersList.push(msg.sender);\r\n            user.user = msg.sender;\r\n            user.exists = true;\r\n        }\r\n        user.totalAmount = user.totalAmount.add(_value);\r\n        totalTokensDeposited = totalTokensDeposited.add(_value);\r\n        user.contributions.push(Contribution(_value, now));\r\n        token.transferFrom(msg.sender, address(this), _value);\r\n\r\n        stakeContractBalance = token.balanceOf(address(this));\r\n\r\n        emit Deposited(msg.sender, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function ChangeDepositeStatus(bool _status) public onlyOwner{\r\n        depositStatus = _status;\r\n    }\r\n\r\n    function MultiSendToken() public onlyOwner {\r\n        uint i = indexOfPayee;\r\n        \r\n        while(i<usersList.length && msg.gas > 90000){\r\n            User storage currentUser = users[usersList[i]];\r\n            \r\n            uint amount = 0;\r\n            for(uint q = 0; q < currentUser.contributions.length; q++){\r\n                if(now > currentUser.contributions[q].time + 24 hours){\r\n                    amount = amount.add(currentUser.contributions[q].amount);\r\n                }\r\n            }\r\n            \r\n            if(amount >= 100000 * (10 ** 18)){  //TODO\r\n                uint bonus = amount.mul(bonusRate).div(10000);\r\n\r\n                require(token.balanceOf(address(this)) >= bonus);\r\n                currentUser.totalBonusReceived = currentUser.totalBonusReceived.add(bonus);\r\n               \r\n                require(token.transfer(currentUser.user, bonus));\r\n            }\r\n            i++;\r\n        }\r\n\r\n        indexOfPayee = i;\r\n        if( i == usersList.length){\r\n            indexOfPayee = 0;\r\n        }\r\n        stakeContractBalance = token.balanceOf(address(this));\r\n    }\r\n\r\n\r\n    event EthBonusSet(uint bonus);\r\n    function SetEthBonus(uint _EthBonus) public onlyOwner {\r\n        require(_EthBonus > 0);\r\n        EthBonus = _EthBonus;\r\n        stakeContractBalance = token.balanceOf(address(this));\r\n        indexOfEthSent = 0;\r\n\r\n        emit EthBonusSet(_EthBonus);\r\n    } \r\n\r\n    function MultiSendEth() public onlyOwner {\r\n        require(EthBonus > 0);\r\n        require(stakeContractBalance > 0);\r\n        uint p = indexOfEthSent;\r\n\r\n        while(p<usersList.length && msg.gas > 90000){\r\n            User memory currentUser = users[usersList[p]];\r\n            \r\n            uint amount = 0;\r\n            for(uint q = 0; q < currentUser.contributions.length; q++){\r\n                if(now > currentUser.contributions[q].time + 3 days){\r\n                    amount = amount.add(currentUser.contributions[q].amount);\r\n                }\r\n            }            \r\n            if(amount >= 100000 * (10 ** 18)){  //TODO\r\n                uint EthToSend = EthBonus.mul(amount).div(totalTokensDeposited);\r\n                \r\n                require(address(this).balance >= EthToSend);\r\n                currentUser.user.transfer(EthToSend);\r\n            }\r\n            p++;\r\n        }\r\n\r\n        indexOfEthSent = p;\r\n\r\n    }\r\n\r\n    event MultiSendComplete(bool status);\r\n    function MultiSendTokenComplete() public onlyOwner {\r\n        indexOfPayee = 0;\r\n        emit MultiSendComplete(true);\r\n    }\r\n\r\n    event Withdrawn(address withdrawnTo, uint amount);\r\n    function WithdrawTokens(uint _value) public {\r\n        require(_value > 0);\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        for(uint q = 0; q < user.contributions.length; q++){\r\n            if(now > user.contributions[q].time + 1 weeks){\r\n                user.amountAvailableToWithdraw = user.amountAvailableToWithdraw.add(user.contributions[q].amount);\r\n            }\r\n        }\r\n\r\n        require(_value <= user.amountAvailableToWithdraw);\r\n        require(token.balanceOf(address(this)) >= _value);\r\n\r\n        user.amountAvailableToWithdraw = user.amountAvailableToWithdraw.sub(_value);\r\n        user.totalAmount = user.totalAmount.sub(_value);\r\n\r\n        user.withdrawCount = user.withdrawCount.add(1);\r\n\r\n        totalTokensDeposited = totalTokensDeposited.sub(_value);\r\n        token.transfer(msg.sender, _value);\r\n\r\n        stakeContractBalance = token.balanceOf(address(this));\r\n        emit Withdrawn(msg.sender, _value);\r\n\r\n\r\n    }\r\n\r\n\r\n    function() public payable{\r\n\r\n    }\r\n\r\n    function WithdrawETH(uint amount) public onlyOwner{\r\n        require(amount > 0);\r\n        require(address(this).balance >= amount * 1 ether);\r\n\r\n        msg.sender.transfer(amount * 1 ether);\r\n    }\r\n\r\n    function CheckAllowance() public view returns(uint){\r\n        uint allowance = token.allowance(msg.sender, address(this));\r\n        return allowance;\r\n    }\r\n\r\n    function GetBonusReceived() public view returns(uint){\r\n        User memory user = users[msg.sender];\r\n        return user.totalBonusReceived;\r\n    }\r\n    \r\n    function GetContributionsCount() public view returns(uint){\r\n        User memory user = users[msg.sender];\r\n        return user.contributions.length;\r\n    }\r\n\r\n    function GetWithdrawCount() public view returns(uint){\r\n        User memory user = users[msg.sender];\r\n        return user.withdrawCount;\r\n    }\r\n\r\n    function GetLockedTokens() public view returns(uint){\r\n        User memory user = users[msg.sender];\r\n\r\n        uint i;\r\n        uint lockedTokens = 0;\r\n        for(i = 0; i < user.contributions.length; i++){\r\n            if(now < user.contributions[i].time + 1 weeks){\r\n                lockedTokens = lockedTokens.add(user.contributions[i].amount);\r\n            }\r\n        }\r\n\r\n        return lockedTokens;\r\n\r\n    }\r\n\r\n    function ReturnTokens(address destination, address account, uint amount) public onlyOwner{\r\n        ERC20(destination).transfer(account,amount);\r\n    }\r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"depositStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetWithdrawCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"MultiSendEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ChangeDepositeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContributionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexOfPayee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"MultiSendToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetBonusReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_EthBonus\",\"type\":\"uint256\"}],\"name\":\"SetEthBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBonus\",\"type\":\"uint256\"}],\"name\":\"ChangeBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amountAvailableToWithdraw\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"totalBonusReceived\",\"type\":\"uint256\"},{\"name\":\"withdrawCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexOfEthSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReturnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetLockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"MultiSendTokenComplete\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CheckAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EthBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_bonusRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newBonus\",\"type\":\"uint256\"}],\"name\":\"BonusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"EthBonusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"MultiSendComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawnTo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"}]","ContractName":"NervesStakeTestingPremium","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ee5dfb5ddd54ea2fb93b796a8a1b83c3fe38e0e6000000000000000000000000000000000000000000000000000000000000000f","Library":"","SwarmSource":"bzzr://4688b290e32294b8e00519008fc2e9bb69b30d6ee72a97e6c522ec8ae89a6c28"}]}