{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n// Pixelicu Source code\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external payable;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\n// // Auction wrapper functions\r\n\r\n\r\n// Auction wrapper functions\r\n\r\n/// @title A facet of ArtworkCore that manages special access privileges.\r\n/// @author Axiom Zen (https://www.axiomzen.co)\r\n/// @dev See the ArtworkCore contract documentation to understand how the various contract facets are arranged.\r\ncontract ArtworkAccessControl {\r\n    // This facet controls access control for Pixelicu. There are four roles managed here:\r\n    //\r\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\r\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\r\n    //         set to the address that created the smart contract in the ArtworkCore constructor.\r\n    //\r\n    //     - The CFO: The CFO can withdraw funds from ArtworkCore and its auction contracts.\r\n    //\r\n    //     - The COO: The COO can release gen0 artworks to auction, and mint promo artworks.\r\n    //\r\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\r\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\r\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\r\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\r\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\r\n    // account.\r\n\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external payable onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external payable onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public payable onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/// @title Base contract for Pixelicu. Holds all common structs, events and base variables.\r\n/// @author Axiom Zen (https://www.axiomzen.co)\r\n/// @dev See the ArtworkCore contract documentation to understand how the various contract facets are arranged.\r\ncontract ArtworkBase is ArtworkAccessControl {\r\n    /*** EVENTS ***/\r\n\r\n    /// @dev The Birth event is fired whenever a new artwork comes into existence. This obviously\r\n    event Birth(address owner,bytes artworkContent);\r\n     /// @dev The CoupledArt  event is fired when two artworks successfully couple a\r\n    event CoupledArt(address owner, uint256 topId, uint256 bottomId);\r\n    event CoupledArtRightpiece(address owner, uint256 topId, uint256 bottomId);\r\n\r\n    /// @dev The Grant events are fired when a control token assigns a token to the left/right/control slots\r\n    event Grant(uint256 _tokenToGrantControlOf, uint256 _tokenToGrantControlTo);\r\n    event GrantControl(uint256 _tokenToGrantControlOf, uint256 _tokenToGrantControlTo);\r\n\r\n\r\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a artwork\r\n    ///  ownership is assigned, including births.\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    /*** DATA TYPES ***/\r\n\r\n    /// @dev The main Artwork struct. Every artwork in Pixelicu is represented by a copy\r\n    ///  of this structure, so great care was taken to ensure that it fits neatly into\r\n    ///  exactly two 256-bit words. Note that the order of the members in this structure\r\n    ///  is important because of the byte-packing rules used by Ethereum.\r\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\r\n    struct Artwork {\r\n        address creatorId;\r\n        uint64 birthTime;\r\n        bytes artworkContent;\r\n    }\r\n\r\n    /*** CONSTANTS ***/\r\n\r\n\r\n    // An approximation of currently how many seconds are in between blocks.\r\n    uint256 public secondsPerBlock = 15;\r\n\r\n    /*** STORAGE ***/\r\n\r\n    /// @dev An array containing the Artwork struct for all Artworks in existence. The ID\r\n    ///  of each artwork is actually an index into this array. Note that ID 0 is a negaartwork,\r\n    ///  the unArtwork, the mythical beast that is the parent of all gen0 artworks. A bizarre\r\n    ///  creature that is both creator and license... to itself! Has an invalid genetic code.\r\n    ///  In other words, artwork ID 0 is invalid... ;-)\r\n    // Artwork[] artworks; \r\n    Artwork[] artworks;\r\n    mapping (bytes => bool) isTaken;\r\n\r\n\r\n    /// @dev A mapping from artwork IDs to the address that owns them. All artworks have\r\n    ///  some valid owner address, even gen0 artworks are created with a non-zero owner.\r\n    mapping (uint256 => address) public artworkIndexToOwner;\r\n    mapping (uint256 => bool) public artworkIndexToPublic;\r\n    mapping (address=> bytes32) public addressToUsername;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) ownershipTokenCount;\r\n\r\n    /// @dev A mapping from ArtworkIDs to an address that has been approved to call\r\n    ///  transferFrom(). Each Artwork can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) public artworkIndexToApproved;\r\n    \r\n    mapping (uint256 => uint256) public artworkIndexToLeftpiece;\r\n    mapping (uint256 => uint256) public artworkIndexToRightpiece;\r\n    mapping (uint256 => uint256) public artworkIndexToControlPiece;\r\n\r\n\r\n    \r\n        /// @dev A mapping from artworkIDs to an address that has been approved to use\r\n    ///  this Kitty for coupling . Each Artwork can only have one approved\r\n    ///  address for coupling at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) public coupleAllowedToAddress;\r\n    /// @dev The address of the ClockAuction contract that handles sales of Artworks. This\r\n    ///  same contract handles both peer-to-peer sales as well as the gen0 sales which are\r\n    ///  initiated every 15 minutes.\r\n    SaleClockAuction public saleAuction;\r\n    CouplingClockAuction public couplingAuction;\r\n\r\n\r\n      function _getBytes(uint256 _artworkId) internal returns (bytes artworkContent){\r\n           return artworks[_artworkId].artworkContent;\r\n    }\r\n\r\n    /// @dev Assigns ownership of a specific Artwork to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        // Since the number of artworks is capped to 2^32 we can't overflow this\r\n        ownershipTokenCount[_to]++;\r\n        // transfer ownership\r\n        artworkIndexToOwner[_tokenId] = _to;\r\n        // When creating new artworks _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            // clear any previously approved ownership exchange\r\n            delete artworkIndexToApproved[_tokenId];\r\n        }\r\n        // Emit the transfer event.\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev An internal method that creates a new artwork and stores it. This\r\n    ///  method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid. Will generate both a Birth event\r\n    ///  and a Transfer event.\r\n    /// @param _creatorId The artwork ID of the creator of this artwork (zero for gen0)\r\n    /// @param _artworkContent The artwork's genetic code.\r\n    /// @param _owner The inital owner of this artwork, must be non-zero (except for the unArtwork, ID 0)\r\n    function _createArtwork(\r\n        bytes _artworkContent,\r\n        address _owner,\r\n        address _creatorId\r\n    )\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // These requires are not strictly necessary, our calling code should make\r\n        // sure that these conditions are never broken. However! _createArtwork() is already\r\n        // an expensive call (for storage), and it doesn't hurt to be especially careful\r\n        // to ensure our data structures are always valid.\r\n        require(isTaken[_artworkContent] == false);\r\n        Artwork memory _artwork = Artwork({\r\n            birthTime: uint64(now),\r\n            creatorId: _creatorId,\r\n            artworkContent: _artworkContent\r\n        });\r\n        \r\n        uint256 newArtId = artworks.push(_artwork) - 1;\r\n        isTaken[_artworkContent] = true;\r\n\r\n        // It's probably never going to happen, 4 ga-billion artworks is A LOT, but\r\n        // let's just be 100% sure we never let this happen.\r\n        require(newArtId == uint256(newArtId));\r\n\r\n        // emit the birth event\r\n        Birth(\r\n            _artwork.creatorId,\r\n            _artworkContent\r\n        );\r\n        artworkIndexToLeftpiece[newArtId] = 0;\r\n        artworkIndexToRightpiece[newArtId] = 0;\r\n\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(0, _owner, newArtId);\r\n\r\n        return newArtId;\r\n    }\r\n    \r\n     function _assignLeftpiece(uint256 _topId, uint256 _leftId) internal {\r\n\r\n\r\n        // Mark the topPiece as having a tailpiece, keeping track of which one\r\n        \r\n        artworkIndexToLeftpiece[_topId] = _leftId;\r\n        // Emit the coupling event.\r\n        CoupledArt(artworkIndexToOwner[_topId], _topId, _leftId);\r\n    }\r\n\r\n     function _assignControlPiece(uint256 _tokenId, uint256 _controlId) internal {\r\n    \r\n        artworkIndexToControlPiece[_tokenId] = _controlId;\r\n    }\r\n\r\n    function _assignRightpiece(uint256 _topId, uint256 _rightId) internal {\r\n         Artwork storage topArtwork = artworks[_topId];\r\n\r\n        // Mark the topPiece as having a tailpiece, keeping track of which one\r\n        //topArtwork.rightpieceId = _rightId;\r\n        \r\n        artworkIndexToRightpiece[_topId] = _rightId;\r\n        // Emit the coupling event.\r\n        CoupledArtRightpiece(artworkIndexToOwner[_topId], _topId, _rightId);\r\n    }\r\n    \r\n     function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return artworkIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n      // External function intended for subcontracts to be able to attach rewards to tokens\r\n     /// @dev Checks if a given address is the current owner of a particular Artwork.\r\n    /// @param _claimant the owned token of the msg sender they are using to validate their claim.\r\n    /// @param _tokenId the token that the caller is indicating as being controlled\r\n    /// @param _controlToken tthe token that is being used to control the _tokenId;\r\n      function _ownsOrControls(address _claimant, uint256 _tokenId, uint256 _controlToken) internal view returns (bool) {\r\n        return artworkIndexToOwner[_tokenId] == _claimant || artworkIndexToControlPiece[_tokenId] == _controlToken;\r\n    }\r\n\r\n    function _shareControl(uint256 _masterToken, uint256 _childToken) internal view returns (bool){\r\n        return (artworkIndexToControlPiece[_childToken] == _masterToken || artworkIndexToControlPiece[_childToken] == artworkIndexToControlPiece[_masterToken]);\r\n    }\r\n    \r\n     function _isCouplingPermitted(uint256 _topId, uint256 _partnerId) internal view returns (bool) {\r\n        address topOwner = artworkIndexToOwner[_topId];\r\n        address bottomOwner = artworkIndexToOwner[_partnerId];\r\n\r\n        // Coupling is okay if they have same owner, or if the top's owner was given\r\n        // permission to pair with this artwork.\r\n        return (topOwner == bottomOwner || coupleAllowedToAddress[_partnerId] == topOwner || artworkIndexToPublic[_partnerId] == true);\r\n    }\r\n    \r\n        function approveCoupling(address _addr, uint256 _partnerId)\r\n        external payable\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _partnerId));\r\n        coupleAllowedToAddress[_partnerId] = _addr;\r\n    }\r\n\r\n        function setUsername(bytes32 _username)\r\n        external payable\r\n        whenNotPaused\r\n    {\r\n        addressToUsername[msg.sender] = _username;\r\n    }\r\n\r\n\r\n      function setTokenAsPublic(uint256 _tokenId)\r\n        external payable\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _tokenId));\r\n        artworkIndexToPublic[_tokenId] = true;\r\n    }\r\n\r\n      function setTokenAsPrivate(uint256 _tokenId)\r\n        external payable\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _tokenId));\r\n        artworkIndexToPublic[_tokenId] = false;\r\n    }\r\n    \r\n           function removeCouplingPermission(uint256 _partnerId)\r\n        external payable\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _partnerId));\r\n        coupleAllowedToAddress[_partnerId] = msg.sender;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title The external contract that is responsible for generating metadata for the artworks,\r\n///  it has one function that will return the data as bytes.\r\ncontract ERC721Metadata {\r\n    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\r\n    function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {\r\n        if (_tokenId == 1) {\r\n            buffer[0] = \"Hello World! :D\";\r\n            count = 15;\r\n        } else if (_tokenId == 2) {\r\n            buffer[0] = \"I would definitely choose a medi\";\r\n            buffer[1] = \"um length string.\";\r\n            count = 49;\r\n        } else if (_tokenId == 3) {\r\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\r\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\r\n            buffer[2] = \" tristique vestibulum id, libero\";\r\n            buffer[3] = \" suscipit varius sapien aliquam.\";\r\n            count = 128;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @title The facet of the PIxelicus core contract that manages ownership, ERC-721 (draft) compliant.\r\n/// @author Axiom Zen (https://www.axiomzen.co)\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\n///  See the ArtworkCore contract documentation to understand how the various contract facets are arranged.\r\ncontract ArtworkOwnership is ArtworkBase, ERC721 {\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"glia.icu\";\r\n    string public constant symbol = \"GLIA\";\r\n\r\n    // The contract that will return artwork metadata\r\n    ERC721Metadata public erc721Metadata;\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n        bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('totalSupply()')) ^\r\n        bytes4(keccak256('balanceOf(address)')) ^\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('transfer(address,uint256)')) ^\r\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('tokensOfOwner(address)')) ^\r\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n    ///  ERC-165 (obviously!) and ERC-721.\r\n function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n        // DEBUG ONLY\r\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\r\n\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    /// @dev Set the address of the sibling contract that tracks metadata.\r\n    function setMetadataAddress(address _contractAddress) public onlyCEO {\r\n        erc721Metadata = ERC721Metadata(_contractAddress);\r\n     }\r\n\r\n    // Internal utility functions: These functions all assume that their input arguments\r\n    // are valid. We leave it to public methods to sanitize their inputs and follow\r\n    // the required logic.\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Artwork.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId artwork id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return artworkIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Artwork.\r\n    /// @param _claimant the address we are confirming artwork is approved for.\r\n    /// @param _tokenId artwork id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return artworkIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transferFrom() are used together for putting Artworks on auction, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        artworkIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @notice Returns the number of Artworks owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a Artwork to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  Pixelicu specifically) or your Artwork may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Artwork to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external payable\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any artworks (except very briefly\r\n        // after a gen0 artwork is created and before it goes on auction).\r\n        require(_to != address(this));\r\n        // Disallow transfers to the auction contracts to prevent accidental\r\n        // misuse. Auction contracts should only take ownership of artworks\r\n        // through the allow + transferFrom flow.\r\n        require(_to != address(saleAuction));\r\n        require(_to != address(couplingAuction));\r\n\r\n        // You can only send your own artwork.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific Artwork via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Artwork that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a Artwork owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Artwork to be transfered.\r\n    /// @param _to The address that should take ownership of the Artwork. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Artwork to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external payable\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any artworks (except very briefly\r\n        // after a gen0 artwork is created and before it goes on auction).\r\n        require(_to != address(this));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of Artworks currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return artworks.length - 1;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given Artwork.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = artworkIndexToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @notice Returns a list of all Artwork IDs assigned to an address.\r\n    /// @param _owner The owner whose Artworks we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    ///  expensive (it walks the entire Artwork array looking for artworks belonging to owner),\r\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    ///  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty arrayz\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalArtpieces = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all artworks have IDs starting at 1 and increasing\r\n            // sequentially up to the totalCat count.\r\n            uint256 artworkId;\r\n\r\n            for (artworkId = 1; artworkId <= totalArtpieces; artworkId++) {\r\n                if (artworkIndexToOwner[artworkId] == _owner) {\r\n                    result[resultIndex] = artworkId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <arachnid@notdot.net>)\r\n    ///  This method is licenced under the Apache License.\r\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n    function _memcpy(uint _dest, uint _src, uint _len) private view {\r\n        // Copy word-length chunks while possible\r\n        for(; _len >= 32; _len -= 32) {\r\n            assembly {\r\n                mstore(_dest, mload(_src))\r\n            }\r\n            _dest += 32;\r\n            _src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint256 mask = 256 ** (32 - _len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(_src), not(mask))\r\n            let destpart := and(mload(_dest), mask)\r\n            mstore(_dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <arachnid@notdot.net>)\r\n    ///  This method is licenced under the Apache License.\r\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\r\n        var outputString = new string(_stringLength);\r\n        uint256 outputPtr;\r\n        uint256 bytesPtr;\r\n\r\n        assembly {\r\n            outputPtr := add(outputString, 32)\r\n            bytesPtr := _rawBytes\r\n        }\r\n\r\n        _memcpy(outputPtr, bytesPtr, _stringLength);\r\n\r\n        return outputString;\r\n    }\r\n\r\n    /// @notice Returns a URI pointing to a metadata package for this token conforming to\r\n    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\r\n    /// @param _tokenId The ID number of the Artwork whose metadata should be returned.\r\n    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {\r\n        require(erc721Metadata != address(0));\r\n        bytes32[4] memory buffer;\r\n        uint256 count;\r\n        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\r\n\r\n        return _toString(buffer, count);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/// @title Auction Core\r\n/// @dev Contains models, variables, and internal methods for the auction.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuctionBase {\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Price (in wei) at beginning of auction\r\n        uint128 startingPrice;\r\n        // Price (in wei) at end of auction\r\n        uint128 endingPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint64 startedAt;\r\n    }\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Escrows the NFT, assigning ownership to this contract.\r\n    /// Throws if the escrow fails.\r\n    /// @param _owner - Current owner address of token to escrow.\r\n    /// @param _tokenId - ID of token whose approval to verify.\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions. Also fires the\r\n    ///  AuctionCreated event.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n        // Require that all auctions have a duration of\r\n        // at least one minute. (Keeps our math from getting hairy!)\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        AuctionCreated(\r\n            uint256(_tokenId),\r\n            uint256(_auction.startingPrice),\r\n            uint256(_auction.endingPrice),\r\n            uint256(_auction.duration)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        // Explicitly check that this auction is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return an auction object that is all zeros.)\r\n        require(_isOnAuction(auction));\r\n\r\n        // Check that the bid is greater than or equal to the current price\r\n        uint256 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the auction struct\r\n        // gets deleted.\r\n        address seller = auction.seller;\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenId);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0) {\r\n            // Calculate the auctioneer's cut.\r\n            // (NOTE: _computeCut() is guaranteed to return a\r\n            // value <= price, so this subtraction can't go negative.)\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n\r\n            // NOTE: Doing a transfer() in the middle of a complex\r\n            // method like this is generally discouraged because of\r\n            // reentrancy attacks and DoS attacks if the seller is\r\n            // a contract with an invalid fallback function. We explicitly\r\n            // guard against reentrancy attacks by removing the auction\r\n            // before calling transfer(), and the only thing the seller\r\n            // can DoS is the sale of their own asset! (And if it's an\r\n            // accident, they can call cancelAuction(). )\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        // Calculate any excess funds included with the bid. If the excess\r\n        // is anything worth worrying about, transfer it back to bidder.\r\n        // NOTE: We checked above that the bid amount is greater than or\r\n        // equal to the price so this cannot underflow.\r\n        uint256 bidExcess = _bidAmount - price;\r\n\r\n        // Return the funds. Similar to the previous transfer, this is\r\n        // not susceptible to a re-entry attack because the auction is\r\n        // removed before any transfers occur.\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        // Tell the world!\r\n        AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n    /// @dev Returns true if the NFT is on auction.\r\n    /// @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    /// @dev Returns current price of an NFT on auction. Broken into two\r\n    ///  functions (this one, that computes the duration from the auction\r\n    ///  structure, and the other that does the price computation) so we\r\n    ///  can easily test that the price computation works correctly.\r\n    function _currentPrice(Auction storage _auction)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        // A bit of insurance against negative values (or wraparound).\r\n        // Probably not necessary (since Ethereum guarnatees that the\r\n        // now variable doesn't ever go backwards).\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startingPrice,\r\n            _auction.endingPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    /// @dev Computes the current price of an auction. Factored out\r\n    ///  from _currentPrice so we can run extensive unit tests.\r\n    ///  When testing, make this function public and turn on\r\n    ///  `Current price computation` test suite.\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _secondsPassed\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our public functions carefully cap the maximum values for\r\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\r\n        //  also known to be non-zero (see the require() statement in\r\n        //  _addAuction())\r\n        if (_secondsPassed >= _duration) {\r\n            // We've reached the end of the dynamic pricing portion\r\n            // of the auction, just return the end price.\r\n            return _endingPrice;\r\n        } else {\r\n            // Starting price can be higher than ending price (and often is!), so\r\n            // this delta can be negative.\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n\r\n            // This multiplication can't overflow, _secondsPassed will easily fit within\r\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\r\n            // will always fit within 256-bits.\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n            // currentPriceChange can be negative, but if so, will have a magnitude\r\n            // less that _startingPrice. Thus, this result will always end up positive.\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the ClockAuction constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return _price * ownerCut / 10000;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() payable onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/// @title Clock auction for non-fungible tokens.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuction is Pausable, ClockAuctionBase {\r\n\r\n    /// @dev The ERC-165 interface signature for ERC-721.\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\r\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\r\n\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    /// @param _nftAddress - address of a deployed contract implementing\r\n    ///  the Nonfungible Interface.\r\n    /// @param _cut - percent cut the owner takes on each auction, must be\r\n    ///  between 0-10,000.\r\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the NFT contract, but can be called either by\r\n    ///  the owner or the NFT contract.\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == nftAddress\r\n        );\r\n        // We are using this boolean method to make sure that even if one fails it will still work\r\n        bool res = nftAddress.send(this.balance);\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of time to move between starting\r\n    ///  price and ending price (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(_owns(msg.sender, _tokenId));\r\n        _escrow(msg.sender, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Bids on an open auction, completing the auction and transferring\r\n    ///  ownership of the NFT if enough Ether is supplied.\r\n    /// @param _tokenId - ID of token to bid on.\r\n    function bid(uint256 _tokenId)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        // _bid will throw if the bid or funds transfer fails\r\n        _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n    }\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on auction\r\n    function cancelAuction(uint256 _tokenId)\r\n        external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on auction to cancel.\r\n    function cancelAuctionWhenPaused(uint256 _tokenId)\r\n        whenPaused\r\n        onlyOwner\r\n        external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return (\r\n            auction.seller,\r\n            auction.startingPrice,\r\n            auction.endingPrice,\r\n            auction.duration,\r\n            auction.startedAt\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _tokenId - ID of the token price we are checking.\r\n    function getCurrentPrice(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n}\r\n\r\n/// @title Reverse auction modified for coupling\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract CouplingClockAuction is ClockAuction {\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setCouplingAuctionAddress() call.\r\n    bool public isCouplingClockAuction = true;\r\n\r\n    // Delegate constructor\r\n    function CouplingClockAuction(address _nftAddr, uint256 _cut) public\r\n        ClockAuction(_nftAddr, _cut) {}\r\n\r\n    /// @dev Creates and begins a new auction. Since this function is wrapped,\r\n    /// require sender to be KittyCore contract.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of auction (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        external\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Places a bid for coupling. Requires the sender\r\n    /// is the KittyCore contract because all bid methods\r\n    /// should be wrapped. Also returns the artwork to the\r\n    /// seller rather than the winner.\r\n    function bid(uint256 _tokenId)\r\n        external\r\n        payable\r\n    {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        // _bid checks that token ID is valid and will throw if bid fails\r\n        _bid(_tokenId, msg.value);\r\n        // We transfer the artwork back to the seller, the winner will get\r\n        // the offspring\r\n        _transfer(seller, _tokenId);\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Clock auction modified for sale of artworks\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract SaleClockAuction is ClockAuction {\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setSaleAuctionAddress() call.\r\n    bool public isSaleClockAuction = true;\r\n\r\n    // Tracks last 5 sale price of gen0 artwork sales\r\n    uint256 public saleCount;\r\n    uint256[5] public lastSalePrices;\r\n\r\n    // Delegate constructor\r\n    function SaleClockAuction(address _nftAddr, uint256 _cut) public\r\n        ClockAuction(_nftAddr, _cut) \r\n        {}\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of auction (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        external\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Updates lastSalePrice if seller is the nft contract\r\n        /// @param _tokenId - tokenId\r\n\r\n    /// Otherwise, works the same as default bid method.\r\n    function bid(uint256 _tokenId)\r\n        external\r\n        payable\r\n    {\r\n        // _bid verifies token ID size\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        uint256 price = _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n\r\n       \r\n            lastSalePrices[saleCount % 5] = price;\r\n            saleCount++;\r\n        }\r\n    }\r\n\r\ncontract ArtworkLicensing is ArtworkOwnership {\r\n\r\n   \r\n\r\n\r\n    /// @notice The minimum payment required to createArtwork(). This is a cost paid \r\n    ///  the gas cost paid by whatever calls createArtwork(), and can be dynamically updated by\r\n    ///  the COO role as the gas price changes.\r\n    uint256 public autoCreationFee = 2 finney;\r\n\r\n\r\n    /// @dev Updates the minimum payment required for calling createArtwork(). Can only\r\n    ///  be called by the COO address. (This fee is used to offset the gas cost incurred\r\n    ///  by the autobirth daemon).\r\n    function setAutoCreationFee(uint256 val) external onlyCOO {\r\n        autoCreationFee = val;\r\n    }\r\n}\r\n\r\ncontract ArtworkAuction is ArtworkLicensing {\r\n\r\n    // @notice The auction contract variables are defined in ArtworkBase to allow\r\n    //  us to refer to them in ArtworkOwnership to prevent accidental transfers.\r\n    // `saleAuction` refers to the auction for gen0 and p2p sale of kitties.\r\n    // `siringAuction` refers to the auction for siring rights of kitties.\r\n\r\n    /// @dev Sets the reference to the sale auction.\r\n    /// @param _address - Address of sale contract.\r\n    function setSaleAuctionAddress(address _address) external onlyCEO {\r\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect -\r\n        require(candidateContract.isSaleClockAuction());\r\n\r\n        // Set the new contract address\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n        /// @dev Sets the reference to the coupling auction.\r\n    /// @param _address - Address of coupling contract.\r\n    function setCouplingAuctionAddress(address _address) external onlyCEO {\r\n        CouplingClockAuction candidateContract = CouplingClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect -\r\n        require(candidateContract.isCouplingClockAuction());\r\n\r\n        // Set the new contract address\r\n        couplingAuction = candidateContract;\r\n    }\r\n        /// @dev Put a artwork up for auction to be coupled.\r\n    ///  delegates to reverse auction.\r\n        function createCouplingAuction(\r\n        uint256 _artworkId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If artwork is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _artworkId));\r\n        _approve(_artworkId, couplingAuction);\r\n        // Coupling auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the artwork.\r\n        couplingAuction.createAuction(\r\n            _artworkId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n    /// @dev Sets the reference to the siring auction.\r\n        // FIXME ? removed for now\r\n\r\n    /// @dev Put an artwork up for auction.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function createSaleAuction(\r\n        uint256 _artworkId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If artwork is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _artworkId));\r\n        // Ensure the artwork is not pregnant to prevent the auction\r\n        // contract accidentally receiving ownership of the child.\r\n        // NOTE: the artwork IS allowed to be in a cooldown.\r\n        _approve(_artworkId, saleAuction);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the artwork.\r\n        saleAuction.createAuction(\r\n            _artworkId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n\r\n\r\n        /// @dev Completes a coupling auction by bidding.\r\n    ///  Immediately couples the winning top with the bottom on auction.\r\n    /// @param _partnerId - ID of the bottom on auction.\r\n    /// @param _topId - ID of the artwork owned by the bidder.\r\n    function bidOnCouplingAuction(\r\n        uint256 _partnerId,\r\n        uint256 _topId\r\n    )\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        require(_owns(msg.sender, _topId));\r\n\r\n        // Define the current price of the auction.\r\n        uint256 currentPrice = couplingAuction.getCurrentPrice(_partnerId);\r\n        require(msg.value >= currentPrice);\r\n\r\n        // Coupling auction will throw if the bid fails.\r\n        couplingAuction.bid.value(msg.value)(_partnerId);\r\n        _assignLeftpiece(_topId,_partnerId);\r\n    }\r\n   \r\n\r\n    /// @dev Transfers the balance of the sale auction contract\r\n    /// to the ArtworkCore contract. We use two-step withdrawal to\r\n    /// prevent two transfer calls in the auction bid function.\r\n    function withdrawAuctionBalances() external onlyCLevel {\r\n        saleAuction.withdrawBalance();\r\n        couplingAuction.withdrawBalance();\r\n    }\r\n}\r\n\r\n/// @title all functions related to creating artworks\r\ncontract ArtworkMinting is ArtworkAuction {\r\n\r\n    // Limits the number of artworks the contract owner can ever create.\r\n    uint256 public constant PROMO_CREATION_LIMIT = 5000;\r\n\r\n    // Counts the number of artworks the contract owner has created.\r\n    uint256 public promoCreatedCount;\r\n\r\n    /// @dev we can create promo artworks, up to a limit. Only callable by COO\r\n    /// @param _artworkContent the encoded artworkContent of the artwork to be created, any value is accepted\r\n    function createPromoArtwork(bytes _artworkContent) external payable onlyCOO {\r\n        address artOwner = msg.sender;\r\n        if (artOwner == address(0)) {\r\n             artOwner = cooAddress;\r\n        }\r\n        require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n        promoCreatedCount++;\r\n        _createArtwork(_artworkContent, artOwner,artOwner);\r\n    }\r\n\r\n    // Same as above but accessible by non-COO requires additional payment equal to autoCreation Fee\r\n     function createArtwork(bytes _artworkContent) external payable whenNotPaused {\r\n        address artOwner = msg.sender;\r\n        if (artOwner == address(0)) {\r\n             artOwner = cooAddress;\r\n        }\r\n        require(msg.value >= autoCreationFee);\r\n        _createArtwork(_artworkContent, artOwner,artOwner);\r\n    }\r\n     function _ownsOrIsOpUnassigned(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n         \r\n        return (_owns(msg.sender, _tokenId) || (msg.sender == cooAddress && artworkIndexToLeftpiece[_tokenId] == 0));\r\n\r\n    }\r\n      // public function callable in contract to assign the control/left/right pieces for an owner\r\n     /// @dev Checks if a given address is the current owner of a particular Artwork.\r\n    /// @param _tokenId (a.k.a. _topId) the owned token of the msg sender they are using to validate their claim.\r\n    /// @param _controlId the token that the caller is indicating as a control piece\r\n    /// msg.sender doesn't need to own _controlId to be able to assign, must own _tokenId which will receive assignment\r\n\r\n     function assignControlPiece(uint256 _tokenId, uint256 _controlId) external payable whenNotPaused  {\r\n        require(_owns(msg.sender, _tokenId));\r\n       _assignControlPiece(_tokenId,_controlId);\r\n    }\r\n       function assignLeftpiece(uint256 _topId, uint256 _leftId) external payable whenNotPaused  {\r\n        require(_owns(msg.sender, _topId));\r\n        require(_isCouplingPermitted(_topId, _leftId));\r\n       _assignLeftpiece(_topId,_leftId);\r\n    }\r\n\r\n          function assignRightpiece(uint256 _topId, uint256 _rightId) external payable whenNotPaused  {\r\n        require(_owns(msg.sender, _topId));\r\n        require(_isCouplingPermitted(_topId, _rightId));\r\n       _assignRightpiece(_topId,_rightId);\r\n    }\r\n    // External function intended for subcontracts to be able to attach rewards to tokens\r\n     /// @dev Checks if a given address is the current owner of a particular Artwork.\r\n    /// @param _masterId the owned token of the msg sender they are using to validate their claim.\r\n    /// @param _controlTargetId the token that the caller is indicating as a control piece\r\n    /// @param _receiverId the token that will have the piece attached to it msg.sender must own\r\n    /// @param _tokenToGrant the tokenThatWill be assigned.\r\n    /// @param _controlOwner address of owner of the control token.  If the address doesn't own those token grant fails\r\n\r\n    function grantRightpiece(uint256 _masterId,uint256 _controlTargetId, uint256 _receiverId, uint256 _tokenToGrant, address _controlOwner) external payable whenNotPaused {\r\n        require(artworkIndexToControlPiece[_masterId] != 0);\r\n        require(_owns(msg.sender, _masterId));  \r\n        require(_ownsOrControls(msg.sender, _tokenToGrant, _masterId));\r\n         require(_owns(_controlOwner, _receiverId));\r\n        require(_owns(_controlOwner, _controlTargetId));\r\n        require(_shareControl(_masterId,_controlTargetId));\r\n        require(_shareControl(_masterId,_receiverId));\r\n\r\n        _assignRightpiece(_receiverId,_tokenToGrant);\r\n        Grant(_receiverId, _tokenToGrant);\r\n    }\r\n\r\n\r\n       function grantLeftpiece(uint256 _masterId,uint256 _controlTargetId, uint256 _receiverId, uint256 _tokenToGrant, address _controlOwner) external payable whenNotPaused {\r\n        require(artworkIndexToControlPiece[_masterId] != 0);\r\n        require(_owns(msg.sender, _masterId));\r\n        require(_ownsOrControls(msg.sender, _tokenToGrant, _masterId));\r\n         require(_owns(_controlOwner, _receiverId));\r\n        require(_owns(_controlOwner, _controlTargetId));\r\n        require(_shareControl(_masterId,_controlTargetId));\r\n        require(_shareControl(_masterId,_receiverId));\r\n         _assignLeftpiece(_receiverId,_tokenToGrant);\r\n         Grant(_receiverId, _tokenToGrant);\r\n\r\n    }\r\n       // Allows an external contract to change the control piece of a token provided the msg.sender owns token\r\n     /// @dev Checks if a given address is the current owner of a particular Artwork.\r\n    /// @param _tokenToGrantControlOf this is the token that will have its control reassigned\r\n    /// @param _tokenToGrantControlTo the token that the caller wants to grant as a control piece\r\n    function grantControlpiece(uint256 _masterId,uint256 _tokenToGrantControlOf, uint256 _tokenToGrantControlTo)  external payable whenNotPaused {\r\n          require(artworkIndexToControlPiece[_masterId] != 0);\r\n        require(_owns(msg.sender, _masterId));  \r\n        require(_ownsOrControls(msg.sender, _tokenToGrantControlOf, _masterId));\r\n        require(_shareControl(_masterId,_tokenToGrantControlOf));\r\n        artworkIndexToControlPiece[_tokenToGrantControlTo];\r\n        GrantControl(_tokenToGrantControlOf, _tokenToGrantControlTo);\r\n    }\r\n      // Allows an external contract to change the control piece of a token provided the msg.sender owns token\r\n     /// @dev Checks if a given address is the current owner of a particular Artwork.\r\n    /// @param _masterId this is the token that is being used to assert control\r\n    /// @param _tokenToPoint this is the token the _masterId asserts control over and will be pointed to\r\n    /// @param _topToken this is the token that will point to _tokenToPoint\r\n    /// @param _controlOwner Additional Sanity check to make sure the address matches owner of token\r\n     function pointRightToControlledArtwork(uint256 _masterId, uint256 _tokenToPoint, uint256 _topToken, address _controlOwner) external payable whenNotPaused {\r\n        require(artworkIndexToControlPiece[_masterId] != 0);\r\n        require(_owns(msg.sender, _masterId));  \r\n        require(_ownsOrControls(msg.sender, _topToken, _masterId));\r\n        require(_ownsOrControls(msg.sender, _topToken, _masterId));\r\n        require(_shareControl(_masterId,_tokenToPoint));\r\n        _assignRightpiece(_topToken,_tokenToPoint);\r\n        Grant(_topToken, _tokenToPoint);\r\n    }\r\n\r\n\r\n     function pointLeftToControlledArtwork(uint256 _masterId, uint256 _tokenToPoint, uint256 _topToken, address _controlOwner) external payable whenNotPaused {\r\n        require(artworkIndexToControlPiece[_masterId] != 0);\r\n        require(_owns(msg.sender, _masterId));  \r\n        require(_ownsOrControls(msg.sender, _topToken, _masterId));\r\n         require(_owns(_controlOwner, _tokenToPoint));\r\n        require(_shareControl(_masterId,_tokenToPoint));\r\n\r\n        _assignLeftpiece(_topToken,_tokenToPoint);\r\n        Grant(_topToken, _tokenToPoint);\r\n    }\r\n\r\n\r\n    // Allows a external contract to allow token owner to reset the right/left pieces on their token to 0;\r\n     /// @dev Checks if a given address is the current owner of a particular Artwork.\r\n    /// @param _topId this is the token that will have its control reassigned\r\n          function removeRightpiece(uint256 _topId) external payable whenNotPaused {\r\n        require(_owns(msg.sender, _topId));\r\n        artworkIndexToRightpiece[_topId] = 0;\r\n    }\r\n\r\n          function removeLeftpiece(uint256 _topId) external payable whenNotPaused {\r\n        require(_owns(msg.sender, _topId));\r\n        artworkIndexToLeftpiece[_topId] = 0;\r\n    }\r\n\r\n    function shareControl(uint256 _tokenA, uint256 _tokenB) external view returns (bool){\r\n        return _shareControl(_tokenA,_tokenB);\r\n    }\r\n\r\n\r\n}\r\n/// @title Pixelicu: Collectible artworks on the Ethereum blockchain.\r\n/// @dev The main Pixelicu contract, keeps track of artworks\r\n\r\ncontract ArtworkCore is ArtworkMinting {\r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @notice Creates the main Pixelicu smart contract instance.\r\n    function ArtworkCore() public {\r\n        // Starts paused.\r\n        paused = true;\r\n\r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n\r\n        // the creator of the contract is also the initial COO\r\n        cooAddress = msg.sender;\r\n\r\n        // start with the mythical artwork 0 - so we don't have generation-0 parent issues\r\n        // we'll do this manually \r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\r\n        // See README.md for updgrade plan\r\n        newContractAddress = _v2Address;\r\n        ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /// @notice No tipping!\r\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\r\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\r\n    function() external payable {\r\n          require(\r\n            msg.sender == address(saleAuction) ||\r\n            msg.sender == address(couplingAuction)\r\n        );\r\n    }\r\n\r\n    /// @notice Returns all the relevant information about a specific artwork.\r\n    /// @param _id The ID of the artwork of interest.\r\n    function getArtwork(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n        uint256 birthTime,\r\n        address creatorId,\r\n        bytes artworkContent\r\n    ) {\r\n        Artwork storage art = artworks[_id];\r\n        birthTime = uint256(art.birthTime);\r\n        creatorId = art.creatorId;\r\n        artworkContent = art.artworkContent;\r\n    }\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    /// @notice This is public rather than external so we can call super.unpause\r\n    ///  without using an expensive CALL.\r\n    function unpause() public payable onlyCEO whenPaused {\r\n        require(saleAuction != address(0));\r\n        require(couplingAuction != address(0));\r\n        require(newContractAddress == address(0));\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n    \r\n   \r\n\r\n    // @dev Allows the CFO to capture the balance available to the contract.\r\n    function withdrawBalance() external onlyCFO {\r\n        uint256 balance = this.balance;\r\n        // Subtract all the currently pregnant artworks we have, plus 1 of margin.\r\n        cfoAddress.transfer(balance);\r\n    }\r\n}\r\n\r\n\r\n// @title Voting with delegation.\r\ncontract Contest {\r\n    // This declares a new complex type which will\r\n    // be used for variables later.\r\n    // It will represent a single voter.\r\n    struct Voter {\r\n        uint weight; // weight is accumulated by delegation\r\n        bool voted;  // if true, that person already voted\r\n        address delegate; // person delegated to\r\n        uint vote;   // index of the voted contestEntry\r\n    }\r\n\r\n    // This is a type for a single contestEntry.\r\n    struct ContestEntry {\r\n        uint voteCount; // number of accumulated votes\r\n    }\r\n\r\n    address public chairperson;\r\n\r\n    // This declares a state variable that\r\n    // stores a `Voter` struct for each possible address.\r\n    mapping(address => Voter) public voters;\r\n\r\n    // A dynamically-sized array of `ContestEntry` structs.\r\n    ContestEntry[] public contestEntrys;\r\n\r\n    /// Create a new contest to choose one of `contestEntryTokens`.\r\n    constructor(uint256[] contestEntryTokens) public {\r\n        chairperson = msg.sender;\r\n        voters[chairperson].weight = 1;\r\n\r\n        // For each of the provided contestEntry names,\r\n        // create a new contestEntry object and add it\r\n        // to the end of the array.\r\n    }\r\n\r\n    function addEntry(uint256 tokenId) public {\r\n        contestEntrys.push(  ContestEntry(   {voteCount:0}  ) );\r\n    }\r\n\r\n    // Give `voter` the right to vote on this contest.\r\n    // May only be called by `chairperson`.\r\n    function giveRightToVote(address voter) public {\r\n        // If the first argument of `require` evaluates\r\n        // to `false`, execution terminates and all\r\n        // changes to the state and to Ether balances\r\n        // are reverted.\r\n        // This used to consume all gas in old EVM versions, but\r\n        // not anymore.\r\n        // It is often a good idea to use `require` to check if\r\n        // functions are called correctly.\r\n        // As a second argument, you can also provide an\r\n        // explanation about what went wrong.\r\n        require(\r\n            msg.sender == chairperson,\r\n            \"Only chairperson can give right to vote.\"\r\n        );\r\n        require(\r\n            !voters[voter].voted,\r\n            \"The voter already voted.\"\r\n        );\r\n        require(voters[voter].weight == 0);\r\n        voters[voter].weight = 1;\r\n    }\r\n\r\n    /// Delegate your vote to the voter `to`.\r\n    function delegate(address to) public {\r\n        // assigns reference\r\n        Voter storage sender = voters[msg.sender];\r\n        require(!sender.voted, \"You already voted.\");\r\n\r\n        require(to != msg.sender, \"Self-delegation is disallowed.\");\r\n\r\n        // Forward the delegation as long as\r\n        // `to` also delegated.\r\n        // In general, such loops are very dangerous,\r\n        // because if they run too long, they might\r\n        // need more gas than is available in a block.\r\n        // In this case, the delegation will not be executed,\r\n        // but in other situations, such loops might\r\n        // cause a contract to get \"stuck\" completely.\r\n        while (voters[to].delegate != address(0)) {\r\n            to = voters[to].delegate;\r\n\r\n            // We found a loop in the delegation, not allowed.\r\n            require(to != msg.sender, \"Found loop in delegation.\");\r\n        }\r\n\r\n        // Since `sender` is a reference, this\r\n        // modifies `voters[msg.sender].voted`\r\n        sender.voted = true;\r\n        sender.delegate = to;\r\n        Voter storage delegate_ = voters[to];\r\n        if (delegate_.voted) {\r\n            // If the delegate already voted,\r\n            // directly add to the number of votes\r\n            contestEntrys[delegate_.vote].voteCount += sender.weight;\r\n        } else {\r\n            // If the delegate did not vote yet,\r\n            // add to her weight.\r\n            delegate_.weight += sender.weight;\r\n        }\r\n    }\r\n\r\n    /// Give your vote (including votes delegated to you)\r\n    /// to contestEntry `contestEntrys[contestEntry].name`.\r\n    function vote(uint contestEntry) public {\r\n        Voter storage sender = voters[msg.sender];\r\n        require(!sender.voted, \"Already voted.\");\r\n        sender.voted = true;\r\n        sender.vote = contestEntry;\r\n\r\n        // If `contestEntry` is out of the range of the array,\r\n        // this will throw automatically and revert all\r\n        // changes.\r\n        contestEntrys[contestEntry].voteCount += sender.weight;\r\n    }\r\n\r\n    /// @dev Computes the winning contestEntry taking all\r\n    /// previous votes into account.\r\n    function winningContestEntry() public view\r\n            returns (uint winningContestEntry_)\r\n    {\r\n        uint winningVoteCount = 0;\r\n        for (uint p = 0; p < contestEntrys.length; p++) {\r\n            if (contestEntrys[p].voteCount > winningVoteCount) {\r\n                winningVoteCount = contestEntrys[p].voteCount;\r\n                winningContestEntry_ = p;\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_controlId\",\"type\":\"uint256\"}],\"name\":\"assignControlPiece\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partnerId\",\"type\":\"uint256\"}],\"name\":\"removeCouplingPermission\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_preferredTransport\",\"type\":\"string\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkIndexToControlPiece\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getArtwork\",\"outputs\":[{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"creatorId\",\"type\":\"address\"},{\"name\":\"artworkContent\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkIndexToLeftpiece\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_topId\",\"type\":\"uint256\"},{\"name\":\"_rightId\",\"type\":\"uint256\"}],\"name\":\"assignRightpiece\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_partnerId\",\"type\":\"uint256\"}],\"name\":\"approveCoupling\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_topId\",\"type\":\"uint256\"},{\"name\":\"_leftId\",\"type\":\"uint256\"}],\"name\":\"assignLeftpiece\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"bytes32\"}],\"name\":\"setUsername\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artworkId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkIndexToRightpiece\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkIndexToPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_masterId\",\"type\":\"uint256\"},{\"name\":\"_tokenToGrantControlOf\",\"type\":\"uint256\"},{\"name\":\"_tokenToGrantControlTo\",\"type\":\"uint256\"}],\"name\":\"grantControlpiece\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_masterId\",\"type\":\"uint256\"},{\"name\":\"_controlTargetId\",\"type\":\"uint256\"},{\"name\":\"_receiverId\",\"type\":\"uint256\"},{\"name\":\"_tokenToGrant\",\"type\":\"uint256\"},{\"name\":\"_controlOwner\",\"type\":\"address\"}],\"name\":\"grantLeftpiece\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_masterId\",\"type\":\"uint256\"},{\"name\":\"_tokenToPoint\",\"type\":\"uint256\"},{\"name\":\"_topToken\",\"type\":\"uint256\"},{\"name\":\"_controlOwner\",\"type\":\"address\"}],\"name\":\"pointLeftToControlledArtwork\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenA\",\"type\":\"uint256\"},{\"name\":\"_tokenB\",\"type\":\"uint256\"}],\"name\":\"shareControl\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coupleAllowedToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_masterId\",\"type\":\"uint256\"},{\"name\":\"_tokenToPoint\",\"type\":\"uint256\"},{\"name\":\"_topToken\",\"type\":\"uint256\"},{\"name\":\"_controlOwner\",\"type\":\"address\"}],\"name\":\"pointRightToControlledArtwork\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setTokenAsPrivate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_masterId\",\"type\":\"uint256\"},{\"name\":\"_controlTargetId\",\"type\":\"uint256\"},{\"name\":\"_receiverId\",\"type\":\"uint256\"},{\"name\":\"_tokenToGrant\",\"type\":\"uint256\"},{\"name\":\"_controlOwner\",\"type\":\"address\"}],\"name\":\"grantRightpiece\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoCreationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_topId\",\"type\":\"uint256\"}],\"name\":\"removeLeftpiece\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artworkId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createCouplingAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artworkContent\",\"type\":\"bytes\"}],\"name\":\"createArtwork\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setTokenAsPublic\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partnerId\",\"type\":\"uint256\"},{\"name\":\"_topId\",\"type\":\"uint256\"}],\"name\":\"bidOnCouplingAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artworkContent\",\"type\":\"bytes\"}],\"name\":\"createPromoArtwork\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_topId\",\"type\":\"uint256\"}],\"name\":\"removeRightpiece\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setMetadataAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCouplingAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setAutoCreationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"couplingAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"artworkContent\",\"type\":\"bytes\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"topId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bottomId\",\"type\":\"uint256\"}],\"name\":\"CoupledArt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"topId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bottomId\",\"type\":\"uint256\"}],\"name\":\"CoupledArtRightpiece\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenToGrantControlOf\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenToGrantControlTo\",\"type\":\"uint256\"}],\"name\":\"Grant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenToGrantControlOf\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenToGrantControlTo\",\"type\":\"uint256\"}],\"name\":\"GrantControl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"ArtworkCore","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://c0ecdaab17816f79f6e007c548ba8b741cebdf42e569815021ccebd9f1275734"}]}