{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n//Author: Alexander Shevtsov \r\n//email: randomlogin76@gmail.com\r\n//date published: 14 November 2018\r\n//https://github.com/randomlogin/hkk-crowdsale\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address newOwner;\r\n\r\n    modifier only(address _allowed) {\r\n        require(msg.sender == _allowed);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) only(owner) public {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() only(newOwner) public {\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n}\r\n\r\ncontract Token is Owned {\r\n    using SafeMath for uint;\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n    address public crowdsale;\r\n\r\n    bool public mintable = true; //transferrable if not mintable\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n\r\n    constructor(string _name, string _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function setCrowdsale(address _crowdsale) public {\r\n        require(crowdsale == 0);\r\n        crowdsale = _crowdsale;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(!mintable);\r\n        require(_to != address(0));\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(!mintable);\r\n        require(_to != address(0));\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function multiTransfer(address[] dests, uint[] values) public  returns (bool result) {\r\n        uint i = 0;\r\n        while (i < dests.length) {\r\n           result  = result || transfer(dests[i], values[i]);\r\n           i += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve_fixed(address _spender, uint _currentValue, uint _value) public returns (bool success) {\r\n        if(allowed[msg.sender][_spender] == _currentValue){\r\n            allowed[msg.sender][_spender] = _value;\r\n            emit Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function mint(address _to, uint _amount) public returns(bool) {\r\n        require(msg.sender == owner || msg.sender == crowdsale);\r\n        require(mintable);\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function multimint(address[] dests, uint[] values) public returns (uint) {\r\n        require(msg.sender == owner || msg.sender == crowdsale);\r\n        uint i = 0;\r\n        while (i < dests.length) {\r\n           mint(dests[i], values[i]);\r\n           i += 1;\r\n        }\r\n        return(i);\r\n    }\r\n\r\n    function deactivateMint() only(owner) public {\r\n        require(mintable);\r\n        mintable = false;\r\n    }\r\n\r\n    function unMint(address _who) public {\r\n        require(balances[_who] > 0);\r\n        require(mintable);\r\n        require(msg.sender == owner || msg.sender == crowdsale);\r\n        totalSupply = totalSupply.sub(balances[_who]);\r\n        balances[_who] = 0;\r\n        emit Transfer(_who, 0x0, balances[_who]);\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract Crowdsale is Owned {\r\n\r\n    mapping(address => uint) contributions;\r\n    mapping(address => uint) contributionsUSD;\r\n\r\n    Token public token; //the token to be distributed\r\n    uint public ETHUSD; //pulled from exchange\r\n\r\n    uint public hardCap = 1000000000000000000000000; //in usd*10**18\r\n    uint public softCap = 200000000000000000000000; //in usd*10**18\r\n    bool public active = false;\r\n\r\n    bool public softCapReached;\r\n    bool public hardCapReached;\r\n\r\n    uint public totalUSD; //total USD contributed, via the rate at the moment it was contributed\r\n    uint public totalETH; //total ETH contributed (may be redudnant)\r\n\r\n    address[] public beneficiaries; //hardcoded beneficiaries, they recieve half of all contributed amount\r\n    address public updater; //the address who is eligible to update the ETH/USD price\r\n\r\n    uint[] public timestamps = [1544313600, 1545523200, 1546819200, 1547942400, 1549238400, 1550361600, 1551398400];\r\n    uint[] public prices = [1000, 1428, 1666, 1739, 1818, 1904, 2000];\r\n\r\n    modifier only(address _address) {\r\n        require(msg.sender == _address);\r\n        _;\r\n    }\r\n\r\n    constructor(address _tokenAddress, address _owner, address _updater) public {\r\n        token = Token(_tokenAddress);\r\n        require(prices.length == timestamps.length);\r\n        owner = _owner;\r\n        updater = _updater;\r\n        beneficiaries.push(0x8A0Dee4fB57041Da7104372004a9Fd80A5aC9716); //a bit of hardcode\r\n        beneficiaries.push(0x049d1EC8Af5e1C5E2b79983dAdb68Ca3C7eb37F4);\r\n    }\r\n\r\n\r\n    //Fallback function to receive Ether. Ether contributed is recalculated into USD.\r\n    function() payable public {\r\n        require(active);\r\n        require(!hardCapReached);\r\n\r\n        contributions[msg.sender] += msg.value;\r\n        contributionsUSD[msg.sender] += msg.value*ETHUSD / 10**(uint(18));\r\n\r\n        uint amount = calculateTokens(msg.value);\r\n\r\n        totalETH += msg.value;\r\n        totalUSD += msg.value*ETHUSD / 10**(uint(18));\r\n\r\n        token.mint(msg.sender, amount);\r\n        if (totalUSD >= softCap ) {\r\n            softCapReached = true;\r\n        }\r\n        if (totalUSD >= hardCap ) {\r\n            active = false;\r\n            hardCapReached = true;\r\n        }\r\n    }\r\n\r\n    //Takes amount of wei sent by investor and calculates how many tokens he must receive (according to the current\r\n    //ETH price and token price.\r\n    //function calculateTokens(uint val) view internal returns(uint) {\r\n    function calculateTokens(uint val) view public returns(uint) {\r\n        uint amount = val * ETHUSD / currentPrice();\r\n        return amount;\r\n    }\r\n\r\n    //Calculates current price of token in USD.\r\n    function currentPrice() constant public returns(uint) {\r\n        for (uint i = 0; i < prices.length; i++ ) {\r\n            if (now < timestamps[i]) {\r\n                return prices[i]*10**uint(17);\r\n            }\r\n        }\r\n        return prices[prices.length-1]*10**uint(17);\r\n    }\r\n\r\n    //Update current ETHUSD price.\r\n    function updatePrice(uint _newPrice) only(updater) public {\r\n        require(msg.sender == updater);\r\n        require(_newPrice != 0);\r\n        ETHUSD = _newPrice;\r\n    }\r\n\r\n    //Activates the ICO. It means tokens can be purchased only when ICO is active.\r\n    function activate() only(owner) public {\r\n        require(now < timestamps[timestamps.length-1]);\r\n        require(!active);\r\n        active = true;\r\n    }\r\n\r\n    //Deactivates the ICO;\r\n    function deactivate() only(owner) public {\r\n        require(active);\r\n        active = false;\r\n    }\r\n\r\n    //Only full amount of Ether can be sent back to the contributor\r\n    function returnEther(address _contributor) only(owner) public payable {\r\n        require(_contributor.send(contributions[_contributor]));\r\n        totalETH -= contributions[_contributor];\r\n        totalUSD -= contributionsUSD[_contributor];\r\n        contributions[_contributor] = 0;\r\n        contributionsUSD[_contributor] = 0;\r\n        token.unMint(_contributor);\r\n    }\r\n\r\n    function withdrawContributed() only(owner) public {\r\n        require(softCapReached);\r\n        require(beneficiaries[0].send(address(this).balance/2));\r\n        require(beneficiaries[1].send(address(this).balance));\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deactivate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"returnEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timestamps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawContributed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_updater\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000235fba75ffda1c27a6b8ce13b5a4b6d0370dbaad000000000000000000000000b7c6381afd563a6c87f25e056f5d5d465b804ecd000000000000000000000000c149f7797a1a38196edd762b72d1e988f64a3de3","Library":"","SwarmSource":"bzzr://a4cac5b7122e8856377deae30c93c69e18284a48e5650fd2d2f025e782d12e1d"}]}