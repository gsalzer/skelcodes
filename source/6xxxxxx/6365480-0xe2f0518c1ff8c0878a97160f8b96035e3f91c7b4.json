{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.7;\r\ncontract MobaBase {\r\n    address public owner = 0x0;\r\n    bool public isLock = false;\r\n    constructor ()  public  {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    event transferToOwnerEvent(uint256 price);\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"only owner can call this function\");\r\n        _;\r\n    }\r\n    \r\n    modifier notLock {\r\n        require(isLock == false,\"contract current is lock status\");\r\n        _;\r\n    }\r\n    \r\n    modifier msgSendFilter() {\r\n        address addr = msg.sender;\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        require(size <= 0,\"address must is not contract\");\r\n        require(msg.sender == tx.origin, \"msg.sender must equipt tx.origin\");\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function transferToOwner()    \r\n    onlyOwner \r\n    msgSendFilter \r\n    public {\r\n        uint256 totalBalace = address(this).balance;\r\n        owner.transfer(totalBalace);\r\n        emit transferToOwnerEvent(totalBalace);\r\n    }\r\n    \r\n    function updateLock(bool b) onlyOwner public {\r\n        \r\n        require(isLock != b,\" updateLock new status == old status\");\r\n        isLock = b;\r\n    }\r\n    \r\n   \r\n}\r\n\r\ncontract IRandomUtil{\r\n    function getRandom(bytes32 param) public returns (bytes32);\r\n}\r\n\r\ncontract IInviteData{\r\n    function GetAddressByName(bytes32 name) public view returns (address);\r\n}\r\ncontract IConfigData {\r\n   function getPrice() public view returns (uint256);\r\n   function getWinRate(uint8 winCount) public pure returns (uint);\r\n   function getOverRate(uint8 winCount) public pure returns (uint);\r\n   function getPumpRate() public view returns(uint8);\r\n   function getRandom(bytes32 param) public returns (bytes32);\r\n   function GetAddressByName(bytes32 name) public view returns (address);\r\n   function getInviteRate() public view returns (uint);\r\n   function loseHandler(address addr,uint8 wincount) public ;\r\n}\r\n\r\ncontract BRBasketballConfig is MobaBase {\r\n    \r\n   uint256 mPrice    = 10 finney;\r\n   uint8 mPumpRate   = 10;\r\n   uint8 mInviteRate = 10;\r\n   uint8 mWinRate    = 50;\r\n   IRandomUtil public mRandomUtil;\r\n   IInviteData public mInviteData;\r\n   \r\n   constructor(address randomUtil,address inviteData) public {\r\n        mRandomUtil = IRandomUtil(randomUtil);\r\n        mInviteData = IInviteData(inviteData);\r\n   }\r\n   \r\n   function getPrice() public view returns (uint256) {\r\n       return mPrice;\r\n   }\r\n \r\n   function getPumpRate() public view returns(uint8) {\r\n       return mPumpRate;\r\n   }\r\n   \r\n   function getWinRate(uint8 winCount) public view returns (uint8) {\r\n       return mWinRate;\r\n   }\r\n    \r\n   function getOverRate(uint8 winCount) public pure returns (uint) {\r\n       \r\n        if(winCount  <= 1) {\r\n            return 50;\r\n        }\r\n        if(winCount  <= 2) {\r\n            return 55;  \r\n        } \r\n        if(winCount  <= 3) {\r\n            return 60;  \r\n        } \r\n        if(winCount  <= 4) {\r\n            return 65;  \r\n        } \r\n        if(winCount  <= 5) {\r\n            return 70;  \r\n        } \r\n        if(winCount  <= 6) {\r\n            return 75;  \r\n        } \r\n        return 80;  \r\n   }\r\n   \r\n   function getRandom(bytes32 param) public returns (bytes32) {\r\n       return mRandomUtil.getRandom(param);\r\n   }\r\n   function GetAddressByName(bytes32 name) public view returns (address) {\r\n       if(mInviteData != address(0)) {\r\n            return mInviteData.GetAddressByName(name);\r\n       }\r\n   }\r\n   function getInviteRate() public view returns (uint) {\r\n       return mInviteRate;\r\n   }\r\n   \r\n   function loseHandler(address addr,uint8 wincount) public {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"wincount\",\"type\":\"uint8\"}],\"name\":\"loseHandler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"winCount\",\"type\":\"uint8\"}],\"name\":\"getOverRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"winCount\",\"type\":\"uint8\"}],\"name\":\"getWinRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInviteRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mRandomUtil\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mInviteData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"updateLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPumpRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"param\",\"type\":\"bytes32\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"GetAddressByName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"randomUtil\",\"type\":\"address\"},{\"name\":\"inviteData\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transferToOwnerEvent\",\"type\":\"event\"}]","ContractName":"BRBasketballConfig","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000014c4459435d94f68334e2db588b09b40a848b3610000000000000000000000008796e9e3b15869d444b8aabda0d3ea7eeafdea96","Library":"","SwarmSource":"bzzr://dbc210f81f741221e95a53d823fc1a731715d8e8e68c5fb40a28d223bc9265b6"}]}