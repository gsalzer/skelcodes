{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract _2Percent {\r\n    address public owner;\r\n    uint public investedAmount;\r\n    address[] public addresses;\r\n    uint public lastPaymentDate;\r\n    uint constant public interest = 2;\r\n    uint constant public transactions_limit = 100;\r\n    mapping(address => Member) public members;\r\n    uint constant public min_withdraw = 100000000000000 wei;\r\n    uint constant public min_invest = 10000000000000000 wei;\r\n\r\n    struct Member\r\n    {\r\n        uint id;\r\n        address referrer;\r\n        uint deposit;\r\n        uint deposits;\r\n        uint date;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        addresses.length = 1;\r\n    }\r\n\r\n    function getMemberCount() public view returns (uint) {\r\n        return addresses.length - 1;\r\n    }\r\n\r\n    function getMemberDividendsAmount(address addr) public view returns (uint) {\r\n        return members[addr].deposit / 100 * interest * (now - members[addr].date) / 1 days;\r\n    }\r\n\r\n    function bytesToAddress(bytes bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function selfPayout() private {\r\n        require(members[msg.sender].id > 0, \"Member not found.\");\r\n        uint amount = getMemberDividendsAmount(msg.sender);\r\n        require(amount >= min_withdraw, \"Too small amount, minimum 0.0001 ether\");\r\n        members[msg.sender].date = now;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function() payable public {\r\n        if (owner == msg.sender) {\r\n            return;\r\n        }\r\n\r\n        if (0 == msg.value) {\r\n            selfPayout();\r\n            return;\r\n        }\r\n\r\n        require(msg.value >= min_invest, \"Too small amount, minimum 0.01 ether\");\r\n\r\n        Member storage user = members[msg.sender];\r\n\r\n        if (user.id == 0) {\r\n            msg.sender.transfer(0 wei);\r\n            user.date = now;\r\n            user.id = addresses.length;\r\n            addresses.push(msg.sender);\r\n\r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if (members[referrer].deposit > 0 && referrer != msg.sender) {\r\n                user.referrer = referrer;\r\n            }\r\n        } else {\r\n            selfPayout();\r\n        }\r\n\r\n        user.deposits += 1;\r\n        user.deposit += msg.value;\r\n\r\n        lastPaymentDate = now;\r\n        investedAmount += msg.value;\r\n\r\n        owner.transfer(msg.value / 5);\r\n\r\n        if (user.referrer > 0x0) {\r\n            uint bonusAmount = (msg.value / 100) * interest;\r\n            user.referrer.send(bonusAmount);\r\n\r\n            if (user.deposits == 1) {\r\n                msg.sender.send(bonusAmount);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"deposits\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMemberDividendsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactions_limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPaymentDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMemberCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_invest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"_2Percent","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c609c9f728b9d3bda2ef9a7efc76d8afd3f0c82526b7e7162cc970203ad80278"}]}