{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/CHOAM.sol\r\n\r\ncontract CHOAM is Ownable\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 public constant PLANET_PRICE = \t100000000000000000;\r\n\tuint256 public constant FEE_RANGE = \t\t29000000000000000;\r\n\tuint256 public constant FEE_MIN = \t\t\t5000000000000000;\r\n\tuint256 public constant FEE_SILO =\t\t\t10000000000000000;\r\n\tuint256 public constant TIMER_STEP = \t\t120;\r\n\r\n\tuint256 public constant PAGE_SIZE = 25;\r\n\r\n\taddress public master;\r\n\r\n\tbool public inited = false;\r\n\r\n\tuint256 public koef = 1;\r\n\r\n\tbool private create_flag = false;\r\n\r\n\tuint256 public silo;\r\n\r\n\taddress public silo_addr = address(0);\r\n\r\n\tuint256 public silo_timer = now;\r\n\r\n\tstruct Player\r\n\t{\r\n\t\tuint256 balance;\r\n\t\tuint256 position;\r\n\t\tuint8 state;\r\n\t\tuint256 discount;\r\n\t\tuint256[] planets;\r\n\t}\r\n\r\n\tmapping(address => Player) players;\r\n\r\n\tstruct Planet\r\n\t{\r\n\t\tuint256 fee;\r\n\t\tbytes32 data;\r\n\t\taddress owner;\r\n\t}\r\n\r\n\tstruct Node\r\n\t{\r\n\t\tPlanet planet;\r\n\t\tuint256 prev;\r\n\t\tuint256 next;\r\n\t}\r\n\r\n\tNode[] public nodes;\r\n\r\n\r\n\tconstructor(address addr) public\r\n\t{\r\n\t\tmaster = addr;\r\n\t}\r\n\r\n\r\n\tfunction init() public onlyOwner\r\n\t{\r\n\t\tif(!inited)\r\n\t\t{\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\t\t}\r\n\t\tinited = true;\r\n\t}\r\n\r\n\r\n\tfunction() public payable\r\n\t{\r\n\t\tbuy_spice_melange();\r\n\t}\r\n\r\n\r\n\tfunction get_owner_planets(uint256 page) external view returns (uint256[] fees, bytes32[] datas, uint256[] ids, uint256[] order)\r\n\t{\r\n\t\trequire(msg.sender != address(0));\r\n\r\n\t\tfees = new uint256[](PAGE_SIZE);\r\n\t\tdatas = new bytes32[](PAGE_SIZE);\r\n\t\tids = new uint256[](PAGE_SIZE);\r\n\t\torder = new uint256[](PAGE_SIZE);\r\n\r\n\t\tuint256 start = page.mul(PAGE_SIZE);\r\n\r\n\t\tfor(uint8 i = 0; i < PAGE_SIZE; i++)\r\n\t\t{\r\n\t\t\tif(i + start < players[msg.sender].planets.length)\r\n\t\t\t{\r\n\t\t\t\tuint256 tmp = players[msg.sender].planets[i + start];\r\n\t\t\t\tfees[i] = nodes[tmp].planet.fee.div(koef);\r\n\t\t\t\tdatas[i] = nodes[tmp].planet.data;\r\n\t\t\t\tids[i] = tmp;\r\n\t\t\t\torder[i] = i + start;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction set_master(address adr) public onlyOwner\r\n\t{\r\n\t\trequire(adr != address(0));\r\n\t\trequire(msg.sender != address(this));\r\n\r\n\t\tmaster = adr;\r\n\t}\r\n\r\n\r\n\tfunction set_koef(uint256 _koef) public onlyOwner\r\n\t{\r\n\t\trequire(_koef > 0);\r\n\r\n\t\tkoef = _koef;\r\n\t}\r\n\r\n\r\n\tfunction get_planet_price() public view returns (uint256)\r\n\t{\r\n\t\treturn PLANET_PRICE.div(koef).add(FEE_SILO.div(koef));\r\n\t}\r\n\r\n\r\n\tfunction get_planet_info(uint id) external view returns (uint256 fee, bytes32 data, address owner, uint256 prev, uint256 next)\r\n\t{\r\n\t\tfee = nodes[id].planet.fee.div(koef);\r\n\t\tdata = nodes[id].planet.data;\r\n\t\towner = nodes[id].planet.owner;\r\n\t\tprev = nodes[id].prev;\r\n\t\tnext = nodes[id].next;\r\n\t}\r\n\r\n\r\n\tfunction get_info(uint256 id) public view returns (uint256[] fees, bytes32[] datas, address[] addresses, uint256[] infos)\r\n\t{\r\n\t\tfees = new uint256[](12);\r\n\t\tdatas = new bytes32[](12);\r\n\t\taddresses = new address[](14);\r\n\t\tinfos = new uint256[](14);\r\n\r\n\t\tuint8 i;\r\n\r\n\t\tfor(i = 0; i < 12; i++)\r\n\t\t{\r\n\t\t\tif(i < nodes.length)\r\n\t\t\t{\r\n\t\t\t\tfees[i] = nodes[id].planet.fee.div(koef);\r\n\t\t\t\tdatas[i] = nodes[id].planet.data;\r\n\t\t\t\taddresses[i] = nodes[id].planet.owner;\r\n\t\t\t\tinfos[i] = id;\r\n\r\n\t\t\t\tid = nodes[id].next;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\taddresses[i] = silo_addr;\r\n\t\tinfos[i] = silo;\r\n\t\ti++;\r\n\t\tif(now < silo_timer)\r\n\t\t\tinfos[i] = silo_timer - now;\r\n\r\n\t}\r\n\r\n\r\n\tfunction get_player_state() external view returns (uint256 balance, uint256 position, uint8 state, uint256 discount,\r\n\t\tuint256 planet_price, uint256 owned_len)\r\n\t{\r\n\t\tbalance = players[msg.sender].balance;\r\n\t\tposition = players[msg.sender].position;\r\n\t\tstate = players[msg.sender].state;\r\n\t\tdiscount = players[msg.sender].discount;\r\n\t\tplanet_price = PLANET_PRICE.div(koef);\r\n\t\tplanet_price = planet_price.sub(planet_price.mul(discount).div(100)).add(FEE_SILO.div(koef));\r\n\t\towned_len = players[msg.sender].planets.length;\r\n\t}\r\n\r\n\r\n\tfunction create_planet() private\r\n\t{\r\n\t\tbytes32 hash = keccak256(abi.encodePacked(uint256(blockhash(block.number - 11)) + uint256(msg.sender) + uint256(nodes.length)));\r\n\r\n\t\tuint256 fee = (uint256(hash) % FEE_RANGE).add(FEE_MIN);\r\n\r\n\t\tuint256 id = 0;\r\n\r\n\t\tif(nodes.length > 0)\r\n\t\t{\r\n\t\t\tid = uint256(hash) % nodes.length;\r\n\t\t}\r\n\r\n\t\tinsert(Planet(fee, hash, address(0)), id);\r\n\t}\r\n\r\n\r\n\tfunction buy_spice_melange() public payable\r\n\t{\r\n\t\trequire(msg.sender == tx.origin);\r\n\t\trequire(msg.sender != address(0));\r\n\t\trequire(msg.sender != address(this));\r\n\t\trequire(msg.value > 0);\r\n\r\n\t\tif(players[msg.sender].state == 0 && nodes.length > 0)\r\n\t\t{\r\n\t\t\tbytes32 hash = keccak256(abi.encodePacked(uint256(blockhash(block.number - 11)) + uint256(msg.sender) + uint256(nodes.length)));\r\n\r\n\t\t\tplayers[msg.sender].position = uint256(hash) % nodes.length;\r\n\r\n\t\t\tplayers[msg.sender].state = 1;\r\n\t\t}\r\n\r\n\t\tplayers[msg.sender].balance = players[msg.sender].balance.add(msg.value);\r\n\t}\r\n\r\n\r\n\tfunction sell_spice_melange(uint256 amount) public returns (uint256)\r\n\t{\r\n\t\trequire(msg.sender == tx.origin);\r\n\t\trequire(msg.sender != address(0));\r\n\t\trequire(msg.sender != address(this));\r\n\t\trequire(players[msg.sender].state > 0);\r\n\t\trequire(amount <= players[msg.sender].balance);\r\n\r\n\t\tif(amount > 0)\r\n\t\t{\r\n\t\t\tplayers[msg.sender].balance = players[msg.sender].balance.sub(amount);\r\n\r\n\t\t\tif(!msg.sender.send(amount))\r\n\t\t\t{\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn amount;\r\n\t}\r\n\r\n\r\n\tfunction move() public\r\n\t{\r\n\t\trequire(msg.sender == tx.origin);\r\n\t\trequire(msg.sender != address(0));\r\n\t\trequire(msg.sender != address(this));\r\n\t\trequire(players[msg.sender].balance > 0);\r\n\t\trequire(players[msg.sender].state > 0);\r\n\r\n\t\tuint256 id = players[msg.sender].position;\r\n\r\n\t\twhile(true)\r\n\t\t{\r\n\t\t\tid = nodes[id].next;\r\n\r\n\t\t\tif(nodes[id].planet.owner == address(0))\r\n\t\t\t{\r\n\t\t\t\tplayers[msg.sender].position = id;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\telse if(nodes[id].planet.owner == msg.sender)\r\n\t\t\t{\r\n\t\t\t\tplayers[msg.sender].position = id;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tuint256 fee = nodes[id].planet.fee.div(koef);\r\n\r\n\t\t\t\tif(fee > players[msg.sender].balance)\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tplayers[msg.sender].balance = players[msg.sender].balance.sub(fee);\r\n\t\t\t\tplayers[nodes[id].planet.owner].balance = players[nodes[id].planet.owner].balance.add(fee);\r\n\r\n\t\t\t\tplayers[msg.sender].position = id;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction step() public\r\n\t{\r\n\t\trequire(msg.sender == tx.origin);\r\n\t\trequire(msg.sender != address(0));\r\n\t\trequire(msg.sender != address(this));\r\n\t\trequire(players[msg.sender].balance > 0);\r\n\t\trequire(players[msg.sender].state > 0);\r\n\r\n\t\tuint256 id = players[msg.sender].position;\r\n\r\n\t\tid = nodes[id].next;\r\n\r\n\t\tif(nodes[id].planet.owner == address(0))\r\n\t\t{\r\n\t\t\tplayers[msg.sender].position = id;\r\n\t\t}\r\n\t\telse if(nodes[id].planet.owner == msg.sender)\r\n\t\t{\r\n\t\t\tplayers[msg.sender].position = id;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tuint256 fee = nodes[id].planet.fee.div(koef);\r\n\t\t\tif(fee > players[msg.sender].balance)\r\n\t\t\t\treturn;\r\n\t\t\tplayers[msg.sender].balance = players[msg.sender].balance.sub(fee);\r\n\t\t\tplayers[nodes[id].planet.owner].balance = players[nodes[id].planet.owner].balance.add(fee);\r\n\t\t\tplayers[msg.sender].position = id;\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\tfunction buy_planet() public\r\n\t{\r\n\t\trequire(msg.sender == tx.origin);\r\n\t\trequire(msg.sender != address(0));\r\n\t\trequire(msg.sender != address(this));\r\n\t\trequire(players[msg.sender].state > 0);\r\n\r\n\t\tuint256 price = PLANET_PRICE.div(koef);\r\n\r\n\t\tprice = price.sub(price.mul(players[msg.sender].discount).div(100)).add(FEE_SILO.div(koef));\r\n\r\n\t\trequire(players[msg.sender].balance >= price);\r\n\r\n\t\tuint256 id = players[msg.sender].position;\r\n\r\n\t\trequire(nodes[id].planet.owner == address(0));\r\n\r\n\t\tplayers[msg.sender].balance = players[msg.sender].balance.sub(price);\r\n\r\n\t\tplayers[msg.sender].planets.push(id);\r\n\r\n\t\tnodes[id].planet.owner = msg.sender;\r\n\r\n\t\tif(!create_flag)\r\n\t\t{\r\n\t\t\tcreate_flag = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\t\t\tcreate_planet();\r\n\r\n\t\t\tcreate_flag = false;\r\n\t\t}\r\n\r\n\t\tif(now < silo_timer)\r\n\t\t{\r\n\t\t\tsilo_addr = msg.sender;\r\n\t\t\tsilo_timer = silo_timer.add(TIMER_STEP);\r\n\t\t\tsilo = silo.add(FEE_SILO);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(silo > 0 && silo_addr != address(0))\r\n\t\t\t\tplayers[silo_addr].balance = players[silo_addr].balance.add(silo);\r\n\r\n\t\t\tsilo_addr = msg.sender;\r\n\t\t\tsilo_timer = now.add(TIMER_STEP);\r\n\t\t\tsilo = FEE_SILO;\r\n\r\n\t\t}\r\n\r\n\t\tif(players[msg.sender].discount < 50)\r\n\t\t\tplayers[msg.sender].discount = players[msg.sender].discount.add(1);\r\n\r\n\t\tmaster.transfer(price);\r\n\t}\r\n\r\n\r\n\tfunction get_len() external view returns(uint256)\r\n\t{\r\n\t\treturn nodes.length;\r\n\t}\r\n\r\n\r\n\tfunction insert(Planet planet, uint256 prev) private returns(uint256)\r\n\t{\r\n\t\tNode memory node;\r\n\r\n\t\tif(nodes.length == 0)\r\n\t\t{\r\n\t\t\tnode = Node(planet, 0, 0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trequire(prev < nodes.length);\r\n\r\n\t\t\tnode = Node(planet, prev, nodes[prev].next);\r\n\r\n\t\t\tnodes[node.next].prev = nodes.length;\r\n\t\t\tnodes[prev].next = nodes.length;\r\n\t\t}\r\n\r\n\t\treturn nodes.push(node) - 1;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"silo_timer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"silo_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodes\",\"outputs\":[{\"components\":[{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"planet\",\"type\":\"tuple\"},{\"name\":\"prev\",\"type\":\"uint256\"},{\"name\":\"next\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAGE_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy_planet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_player_state\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"position\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"discount\",\"type\":\"uint256\"},{\"name\":\"planet_price\",\"type\":\"uint256\"},{\"name\":\"owned_len\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"move\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_planet_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inited\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIMER_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLANET_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"set_master\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell_spice_melange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_len\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"get_owner_planets\",\"outputs\":[{\"name\":\"fees\",\"type\":\"uint256[]\"},{\"name\":\"datas\",\"type\":\"bytes32[]\"},{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"order\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"koef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_SILO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"get_planet_info\",\"outputs\":[{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"prev\",\"type\":\"uint256\"},{\"name\":\"next\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"get_info\",\"outputs\":[{\"name\":\"fees\",\"type\":\"uint256[]\"},{\"name\":\"datas\",\"type\":\"bytes32[]\"},{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"infos\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"step\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy_spice_melange\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"silo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_koef\",\"type\":\"uint256\"}],\"name\":\"set_koef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_RANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CHOAM","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f9c024a74938f8e9172c14de7b513d3ce4329b49","Library":"","SwarmSource":"bzzr://d3f0eaef5d22fb92659e97048566b4ce4b2a0599c57659b4bcbabe164d65f7db"}]}