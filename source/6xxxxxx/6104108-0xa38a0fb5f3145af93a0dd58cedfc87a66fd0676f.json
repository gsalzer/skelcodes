{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/GolixToken.sol\r\n\r\n/**\r\n * @title Golix Token contract - ERC20 compatible token contract.\r\n * @author Gustavo Guimaraes - <gustavoguimaraes@gmail.com>\r\n */\r\ncontract GolixToken is PausableToken, MintableToken {\r\n    string public constant name = \"Golix Token\";\r\n    string public constant symbol = \"GLX\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    /**\r\n     * @dev Allow for staking of GLX tokens\r\n     * function is called only from owner which is the GLX token distribution contract\r\n     * is only triggered for a period of time and only if there are still tokens from crowdsale\r\n     * @param staker Address of token holder\r\n     * @param glxStakingContract Address where staking tokens goes to\r\n     */\r\n    function stakeGLX(address staker, address glxStakingContract) public onlyOwner {\r\n        uint256 stakerGLXBalance = balanceOf(staker);\r\n        balances[staker] = 0;\r\n        balances[glxStakingContract] = balances[glxStakingContract].add(stakerGLXBalance);\r\n        emit Transfer(staker, glxStakingContract, stakerGLXBalance);\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: contracts/VestTokenAllocation.sol\r\n\r\n/**\r\n * @title VestTokenAllocation contract\r\n * @author Gustavo Guimaraes - <gustavoguimaraes@gmail.com>\r\n */\r\ncontract VestTokenAllocation is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    uint256 public cliff;\r\n    uint256 public start;\r\n    uint256 public duration;\r\n    uint256 public allocatedTokens;\r\n    uint256 public canSelfDestruct;\r\n\r\n    mapping (address => uint256) public totalTokensLocked;\r\n    mapping (address => uint256) public releasedTokens;\r\n\r\n    ERC20 public golix;\r\n    address public tokenDistribution;\r\n\r\n    event Released(address beneficiary, uint256 amount);\r\n\r\n    /**\r\n     * @dev creates the locking contract with vesting mechanism\r\n     * as well as ability to set tokens for addresses and time contract can self-destruct\r\n     * @param _token GolixToken address\r\n     * @param _tokenDistribution GolixTokenDistribution contract address\r\n     * @param _start timestamp representing the beginning of the token vesting process\r\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest. ie 1 year in secs\r\n     * @param _duration time in seconds of the period in which the tokens completely vest. ie 4 years in secs\r\n     * @param _canSelfDestruct timestamp of when contract is able to selfdestruct\r\n     */\r\n    function VestTokenAllocation\r\n        (\r\n            ERC20 _token,\r\n            address _tokenDistribution,\r\n            uint256 _start,\r\n            uint256 _cliff,\r\n            uint256 _duration,\r\n            uint256 _canSelfDestruct\r\n        )\r\n        public\r\n    {\r\n        require(_token != address(0) && _cliff != 0);\r\n        require(_cliff <= _duration);\r\n        require(_start > now);\r\n        require(_canSelfDestruct > _duration.add(_start));\r\n\r\n        duration = _duration;\r\n        cliff = _start.add(_cliff);\r\n        start = _start;\r\n\r\n        golix = ERC20(_token);\r\n        tokenDistribution = _tokenDistribution;\r\n        canSelfDestruct = _canSelfDestruct;\r\n    }\r\n\r\n    modifier onlyOwnerOrTokenDistributionContract() {\r\n        require(msg.sender == address(owner) || msg.sender == address(tokenDistribution));\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Adds vested token allocation\r\n     * @param beneficiary Ethereum address of a person\r\n     * @param allocationValue Number of tokens allocated to person\r\n     */\r\n    function addVestTokenAllocation(address beneficiary, uint256 allocationValue)\r\n        external\r\n        onlyOwnerOrTokenDistributionContract\r\n    {\r\n        require(totalTokensLocked[beneficiary] == 0 && beneficiary != address(0)); // can only add once.\r\n\r\n        allocatedTokens = allocatedTokens.add(allocationValue);\r\n        require(allocatedTokens <= golix.balanceOf(this));\r\n\r\n        totalTokensLocked[beneficiary] = allocationValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     */\r\n    function release() public {\r\n        uint256 unreleased = releasableAmount();\r\n\r\n        require(unreleased > 0);\r\n\r\n        releasedTokens[msg.sender] = releasedTokens[msg.sender].add(unreleased);\r\n\r\n        golix.safeTransfer(msg.sender, unreleased);\r\n\r\n        emit Released(msg.sender, unreleased);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     */\r\n    function releasableAmount() public view returns (uint256) {\r\n        return vestedAmount().sub(releasedTokens[msg.sender]);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     */\r\n    function vestedAmount() public view returns (uint256) {\r\n        uint256 totalBalance = totalTokensLocked[msg.sender];\r\n\r\n        if (now < cliff) {\r\n            return 0;\r\n        } else if (now >= start.add(duration)) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(now.sub(start)).div(duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev allow for selfdestruct possibility and sending funds to owner\r\n     */\r\n    function kill() public onlyOwner {\r\n        require(now >= canSelfDestruct);\r\n        uint256 balance = golix.balanceOf(this);\r\n\r\n        if (balance > 0) {\r\n            golix.transfer(msg.sender, balance);\r\n        }\r\n\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n  // Override this method to have a way to add business logic to your crowdsale when buying\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    return weiAmount.mul(rate);\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n\r\n// File: contracts/GolixTokenDistribution.sol\r\n\r\n/**\r\n * @title Golix token distribution contract - crowdsale contract for the Golix tokens.\r\n * @author Gustavo Guimaraes - <gustavoguimaraes@gmail.com>\r\n */\r\ncontract GolixTokenDistribution is FinalizableCrowdsale {\r\n    uint256 constant public TOTAL_TOKENS_SUPPLY = 1274240097e18; // 1,274,240,097 tokens\r\n    // =~ 10% for Marketing, investment fund, partners\r\n    uint256 constant public MARKETING_SHARE = 127424009e18;\r\n    // =~ 15% for issued to investors, shareholders\r\n    uint256 constant public SHAREHOLDERS_SHARE = 191136015e18;\r\n    // =~ 25% for founding team, future employees\r\n    uint256 constant public FOUNDERS_SHARE = 318560024e18;\r\n    uint256 constant public TOTAL_TOKENS_FOR_CROWDSALE = 637120049e18; // =~ 50 % of total token supply\r\n\r\n    VestTokenAllocation public teamVestTokenAllocation;\r\n    VestTokenAllocation public contributorsVestTokenAllocation;\r\n    address public marketingWallet;\r\n    address public shareHoldersWallet;\r\n\r\n    bool public canFinalizeEarly;\r\n    bool public isStakingPeriod;\r\n\r\n    mapping (address => uint256) public icoContributions;\r\n\r\n    event MintedTokensFor(address indexed investor, uint256 tokensPurchased);\r\n    event GLXStaked(address indexed staker, uint256 amount);\r\n\r\n    /**\r\n     * @dev Contract constructor function\r\n     * @param _startTime The timestamp of the beginning of the crowdsale\r\n     * @param _endTime Timestamp when the crowdsale will finish\r\n     * @param _rate The token rate per ETH\r\n     * @param _wallet Multisig wallet that will hold the crowdsale funds.\r\n     * @param _marketingWallet address that will hold tokens for marketing campaign.\r\n     * @param _shareHoldersWallet address that will distribute shareholders tokens.\r\n     */\r\n    function GolixTokenDistribution\r\n        (\r\n            uint256 _startTime,\r\n            uint256 _endTime,\r\n            uint256 _rate,\r\n            address _wallet,\r\n            address _marketingWallet,\r\n            address _shareHoldersWallet\r\n        )\r\n        public\r\n        FinalizableCrowdsale()\r\n        Crowdsale(_startTime, _endTime, _rate, _wallet)\r\n    {\r\n        require(_marketingWallet != address(0) && _shareHoldersWallet != address(0));\r\n        require(\r\n            MARKETING_SHARE + SHAREHOLDERS_SHARE + FOUNDERS_SHARE + TOTAL_TOKENS_FOR_CROWDSALE\r\n            == TOTAL_TOKENS_SUPPLY\r\n        );\r\n\r\n        marketingWallet = _marketingWallet;\r\n        shareHoldersWallet = _shareHoldersWallet;\r\n\r\n        GolixToken(token).pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Mint tokens for crowdsale participants\r\n     * @param investorsAddress List of Purchasers addresses\r\n     * @param amountOfTokens List of token amounts for investor\r\n     */\r\n    function mintTokensForCrowdsaleParticipants(address[] investorsAddress, uint256[] amountOfTokens)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(investorsAddress.length == amountOfTokens.length);\r\n\r\n        for (uint256 i = 0; i < investorsAddress.length; i++) {\r\n            require(token.totalSupply().add(amountOfTokens[i]) <= TOTAL_TOKENS_FOR_CROWDSALE);\r\n\r\n            token.mint(investorsAddress[i], amountOfTokens[i]);\r\n            icoContributions[investorsAddress[i]] = icoContributions[investorsAddress[i]].add(amountOfTokens[i]);\r\n\r\n            emit MintedTokensFor(investorsAddress[i], amountOfTokens[i]);\r\n        }\r\n    }\r\n    \r\n    // override buytokens so all minting comes from Golix\r\n    function buyTokens(address beneficiary) public payable {\r\n        revert();\r\n    }\r\n    \r\n    /**\r\n     * @dev Set addresses which should receive the vested team tokens share on finalization\r\n     * @param _teamVestTokenAllocation address of team and advisor allocation contract\r\n     * @param _contributorsVestTokenAllocation address of ico contributors\r\n     * who for glx staking event in case there is still left over tokens from crowdsale\r\n     */\r\n    function setVestTokenAllocationAddresses\r\n        (\r\n            address _teamVestTokenAllocation,\r\n            address _contributorsVestTokenAllocation\r\n        )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_teamVestTokenAllocation != address(0) && _contributorsVestTokenAllocation != address(0));\r\n\r\n        teamVestTokenAllocation = VestTokenAllocation(_teamVestTokenAllocation);\r\n        contributorsVestTokenAllocation = VestTokenAllocation(_contributorsVestTokenAllocation);\r\n    }\r\n\r\n    // overriding Crowdsale#hasEnded to add cap logic\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        if (canFinalizeEarly) {\r\n            return true;\r\n        }\r\n\r\n        return super.hasEnded();\r\n    }\r\n\r\n    /**\r\n     * @dev Allow for staking of GLX tokens from crowdsale participants\r\n     * only works if tokens from token distribution are not sold out.\r\n     * investors must have GLX tokens in the same amount as it purchased during crowdsale\r\n     */\r\n    function stakeGLXForContributors() public {\r\n        uint256 senderGlxBalance = token.balanceOf(msg.sender);\r\n        require(senderGlxBalance == icoContributions[msg.sender] && isStakingPeriod);\r\n\r\n        GolixToken(token).stakeGLX(msg.sender, contributorsVestTokenAllocation);\r\n        contributorsVestTokenAllocation.addVestTokenAllocation(msg.sender, senderGlxBalance);\r\n        emit GLXStaked(msg.sender, senderGlxBalance);\r\n    }\r\n\r\n    /**\r\n    * @dev enables early finalization of crowdsale\r\n    */\r\n    function prepareForEarlyFinalization() public onlyOwner {\r\n        canFinalizeEarly = true;\r\n    }\r\n\r\n    /**\r\n    * @dev disables staking period\r\n    */\r\n    function disableStakingPeriod() public onlyOwner {\r\n        isStakingPeriod = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates Golix token contract. This is called on the constructor function of the Crowdsale contract\r\n     */\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new GolixToken();\r\n    }\r\n\r\n    /**\r\n     * @dev finalizes crowdsale\r\n     */\r\n    function finalization() internal {\r\n        // This must have been set manually prior to finalize() call.\r\n        require(teamVestTokenAllocation != address(0) && contributorsVestTokenAllocation != address(0));\r\n\r\n        if (TOTAL_TOKENS_FOR_CROWDSALE > token.totalSupply()) {\r\n            uint256 remainingTokens = TOTAL_TOKENS_FOR_CROWDSALE.sub(token.totalSupply());\r\n            token.mint(contributorsVestTokenAllocation, remainingTokens);\r\n            isStakingPeriod = true;\r\n        }\r\n\r\n        // final minting\r\n        token.mint(marketingWallet, MARKETING_SHARE);\r\n        token.mint(shareHoldersWallet, SHAREHOLDERS_SHARE);\r\n        token.mint(teamVestTokenAllocation, FOUNDERS_SHARE);\r\n\r\n        token.finishMinting();\r\n        GolixToken(token).unpause();\r\n        super.finalization();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoContributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDERS_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SHAREHOLDERS_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKENS_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorsAddress\",\"type\":\"address[]\"},{\"name\":\"amountOfTokens\",\"type\":\"uint256[]\"}],\"name\":\"mintTokensForCrowdsaleParticipants\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stakeGLXForContributors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStakingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKENS_FOR_CROWDSALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableStakingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestTokenAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamVestTokenAllocation\",\"type\":\"address\"},{\"name\":\"_contributorsVestTokenAllocation\",\"type\":\"address\"}],\"name\":\"setVestTokenAllocationAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canFinalizeEarly\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"prepareForEarlyFinalization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsVestTokenAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareHoldersWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"name\":\"_shareHoldersWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensPurchased\",\"type\":\"uint256\"}],\"name\":\"MintedTokensFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GLXStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"GolixTokenDistribution","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b697ca0000000000000000000000000000000000000000000000000000000005d841680000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000008388385a5a314f9d034e71c157984b3d0dbb6ab40000000000000000000000003ab84a9cbe270745c8e435761212ceef1e1071880000000000000000000000008388385a5a314f9d034e71c157984b3d0dbb6ab4","Library":"","SwarmSource":"bzzr://854d3dae9dbefa4fc43b442bb91078fae43935bb805b222b763b0760dba00977"}]}