{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-08-04\r\n*/\r\n\r\n/*\r\n\r\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n     http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.4.25;\r\npragma experimental \"v0.5.0\";\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    event NewOwner(address indexed old, address indexed current);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOwner(address _new)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_new != address(0));\r\n        owner = _new;\r\n        emit NewOwner(owner, _new);\r\n    }\r\n}\r\n\r\n/// @title Authority Interface - Allows interaction with the Authority contract.\r\n/// @author Gabriele Rigo - <gab@rigoblock.com>\r\n// solhint-disable-next-line\r\ninterface AuthorityFace {\r\n\r\n    /*\r\n     * EVENTS\r\n     */\r\n    event AuthoritySet(address indexed authority);\r\n    event WhitelisterSet(address indexed whitelister);\r\n    event WhitelistedUser(address indexed target, bool approved);\r\n    event WhitelistedRegistry(address indexed registry, bool approved);\r\n    event WhitelistedFactory(address indexed factory, bool approved);\r\n    event WhitelistedVault(address indexed vault, bool approved);\r\n    event WhitelistedDrago(address indexed drago, bool isWhitelisted);\r\n    event NewDragoEventful(address indexed dragoEventful);\r\n    event NewVaultEventful(address indexed vaultEventful);\r\n    event NewNavVerifier(address indexed navVerifier);\r\n    event NewExchangesAuthority(address indexed exchangesAuthority);\r\n\r\n    /*\r\n     * CORE FUNCTIONS\r\n     */\r\n    function setAuthority(address _authority, bool _isWhitelisted) external;\r\n    function setWhitelister(address _whitelister, bool _isWhitelisted) external;\r\n    function whitelistUser(address _target, bool _isWhitelisted) external;\r\n    function whitelistDrago(address _drago, bool _isWhitelisted) external;\r\n    function whitelistVault(address _vault, bool _isWhitelisted) external;\r\n    function whitelistRegistry(address _registry, bool _isWhitelisted) external;\r\n    function whitelistFactory(address _factory, bool _isWhitelisted) external;\r\n    function setDragoEventful(address _dragoEventful) external;\r\n    function setVaultEventful(address _vaultEventful) external;\r\n    function setNavVerifier(address _navVerifier) external;\r\n    function setExchangesAuthority(address _exchangesAuthority) external;\r\n\r\n    /*\r\n     * CONSTANT PUBLIC FUNCTIONS\r\n     */\r\n    function isWhitelistedUser(address _target) external view returns (bool);\r\n    function isAuthority(address _authority) external view returns (bool);\r\n    function isWhitelistedRegistry(address _registry) external view returns (bool);\r\n    function isWhitelistedDrago(address _drago) external view returns (bool);\r\n    function isWhitelistedVault(address _vault) external view returns (bool);\r\n    function isWhitelistedFactory(address _factory) external view returns (bool);\r\n    function getDragoEventful() external view returns (address);\r\n    function getVaultEventful() external view returns (address);\r\n    function getNavVerifier() external view returns (address);\r\n    function getExchangesAuthority() external view returns (address);\r\n}\r\n\r\n\r\n/// @title Authority - Allows to set up the base rules of the protocol.\r\n/// @author Gabriele Rigo - <gab@rigoblock.com>\r\n// solhint-disable-next-line\r\ncontract Authority is\r\n    Owned,\r\n    AuthorityFace\r\n{\r\n    BuildingBlocks public blocks;\r\n    Type public types;\r\n\r\n    mapping (address => Account) public accounts;\r\n\r\n    struct List {\r\n        address target;\r\n    }\r\n\r\n    struct Type {\r\n        string types;\r\n        List[] list;\r\n    }\r\n\r\n    struct Group {\r\n        bool whitelister;\r\n        bool drago;\r\n        bool vault;\r\n        bool user;\r\n        bool registry;\r\n        bool factory;\r\n        bool authority;\r\n    }\r\n\r\n    struct Account {\r\n        address account;\r\n        bool authorized;\r\n        mapping (bool => Group) groups; //mapping account to bool authorized to bool group\r\n    }\r\n\r\n    struct BuildingBlocks {\r\n        address dragoEventful;\r\n        address vaultEventful;\r\n        address navVerifier;\r\n        address exchangesAuthority;\r\n        address casper;\r\n        mapping (address => bool) initialized;\r\n    }\r\n\r\n    /*\r\n     * EVENTS\r\n     */\r\n    event AuthoritySet(address indexed authority);\r\n    event WhitelisterSet(address indexed whitelister);\r\n    event WhitelistedUser(address indexed target, bool approved);\r\n    event WhitelistedRegistry(address indexed registry, bool approved);\r\n    event WhitelistedFactory(address indexed factory, bool approved);\r\n    event WhitelistedVault(address indexed vault, bool approved);\r\n    event WhitelistedDrago(address indexed drago, bool isWhitelisted);\r\n    event NewDragoEventful(address indexed dragoEventful);\r\n    event NewVaultEventful(address indexed vaultEventful);\r\n    event NewNavVerifier(address indexed navVerifier);\r\n    event NewExchangesAuthority(address indexed exchangesAuthority);\r\n\r\n    /*\r\n     * MODIFIERS\r\n     */\r\n    modifier onlyAdmin {\r\n        require(msg.sender == owner || isWhitelister(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelister {\r\n        require(isWhitelister(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * CORE FUNCTIONS\r\n     */\r\n    /// @dev Allows the owner to whitelist an authority\r\n    /// @param _authority Address of the authority\r\n    /// @param _isWhitelisted Bool whitelisted\r\n    function setAuthority(address _authority, bool _isWhitelisted)\r\n        external\r\n        onlyOwner\r\n    {\r\n        setAuthorityInternal(_authority, _isWhitelisted);\r\n    }\r\n\r\n    /// @dev Allows the owner to whitelist a whitelister\r\n    /// @param _whitelister Address of the whitelister\r\n    /// @param _isWhitelisted Bool whitelisted\r\n    function setWhitelister(address _whitelister, bool _isWhitelisted)\r\n        external\r\n        onlyOwner\r\n    {\r\n        setWhitelisterInternal(_whitelister, _isWhitelisted);\r\n    }\r\n\r\n    /// @dev Allows a whitelister to whitelist a user\r\n    /// @param _target Address of the target user\r\n    /// @param _isWhitelisted Bool whitelisted\r\n    function whitelistUser(address _target, bool _isWhitelisted)\r\n        external\r\n        onlyWhitelister\r\n    {\r\n        accounts[_target].account = _target;\r\n        accounts[_target].authorized = _isWhitelisted;\r\n        accounts[_target].groups[_isWhitelisted].user = _isWhitelisted;\r\n        types.list.push(List(_target));\r\n        emit WhitelistedUser(_target, _isWhitelisted);\r\n    }\r\n\r\n    /// @dev Allows an admin to whitelist a drago\r\n    /// @param _drago Address of the target drago\r\n    /// @param _isWhitelisted Bool whitelisted\r\n    function whitelistDrago(address _drago, bool _isWhitelisted)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        accounts[_drago].account = _drago;\r\n        accounts[_drago].authorized = _isWhitelisted;\r\n        accounts[_drago].groups[_isWhitelisted].drago = _isWhitelisted;\r\n        types.list.push(List(_drago));\r\n        emit WhitelistedDrago(_drago, _isWhitelisted);\r\n    }\r\n\r\n    /// @dev Allows an admin to whitelist a vault\r\n    /// @param _vault Address of the target vault\r\n    /// @param _isWhitelisted Bool whitelisted\r\n    function whitelistVault(address _vault, bool _isWhitelisted)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        accounts[_vault].account = _vault;\r\n        accounts[_vault].authorized = _isWhitelisted;\r\n        accounts[_vault].groups[_isWhitelisted].vault = _isWhitelisted;\r\n        types.list.push(List(_vault));\r\n        emit WhitelistedVault(_vault, _isWhitelisted);\r\n    }\r\n\r\n    /// @dev Allows an admin to whitelist a registry\r\n    /// @param _registry Address of the target registry\r\n    /// @param _isWhitelisted Bool whitelisted\r\n    function whitelistRegistry(address _registry, bool _isWhitelisted)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        accounts[_registry].account = _registry;\r\n        accounts[_registry].authorized = _isWhitelisted;\r\n        accounts[_registry].groups[_isWhitelisted].registry = _isWhitelisted;\r\n        types.list.push(List(_registry));\r\n        emit WhitelistedRegistry(_registry, _isWhitelisted);\r\n    }\r\n\r\n    /// @dev Allows an admin to whitelist a factory\r\n    /// @param _factory Address of the target factory\r\n    /// @param _isWhitelisted Bool whitelisted\r\n    function whitelistFactory(address _factory, bool _isWhitelisted)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        accounts[_factory].account = _factory;\r\n        accounts[_factory].authorized = _isWhitelisted;\r\n        accounts[_factory].groups[_isWhitelisted].registry = _isWhitelisted;\r\n        types.list.push(List(_factory));\r\n        setAuthorityInternal(_factory, _isWhitelisted);\r\n        emit WhitelistedFactory(_factory, _isWhitelisted);\r\n    }\r\n\r\n    /// @dev Allows the owner to set the drago eventful\r\n    /// @param _dragoEventful Address of the logs contract\r\n    function setDragoEventful(address _dragoEventful)\r\n        external\r\n        onlyOwner\r\n    {\r\n        blocks.dragoEventful = _dragoEventful;\r\n        emit NewDragoEventful(blocks.dragoEventful);\r\n    }\r\n\r\n    /// @dev Allows the owner to set the vault eventful\r\n    /// @param _vaultEventful Address of the vault logs contract\r\n    function setVaultEventful(address _vaultEventful)\r\n        external\r\n        onlyOwner\r\n    {\r\n        blocks.vaultEventful = _vaultEventful;\r\n        emit NewVaultEventful(blocks.vaultEventful);\r\n    }\r\n\r\n    /// @dev Allows the owner to set the nav verifier\r\n    /// @param _navVerifier Address of the verifier\r\n    function setNavVerifier(address _navVerifier)\r\n        external\r\n        onlyOwner\r\n    {\r\n        blocks.navVerifier = _navVerifier;\r\n        emit NewNavVerifier(blocks.navVerifier);\r\n    }\r\n\r\n    /// @dev Allows the owner to set the exchanges authority\r\n    /// @param _exchangesAuthority Address of the exchanges authority\r\n    function setExchangesAuthority(address _exchangesAuthority)\r\n        external\r\n        onlyOwner\r\n    {\r\n        blocks.exchangesAuthority = _exchangesAuthority;\r\n        emit NewExchangesAuthority(blocks.exchangesAuthority);\r\n    }\r\n\r\n    /*\r\n     * CONSTANT PUBLIC FUNCTIONS\r\n     */\r\n    /// @dev Provides whether a user is whitelisted\r\n    /// @param _target Address of the target user\r\n    /// @return Bool is whitelisted\r\n    function isWhitelistedUser(address _target)\r\n        external view\r\n        returns (bool)\r\n    {\r\n        return accounts[_target].groups[true].user;\r\n    }\r\n\r\n    /// @dev Provides whether an address is an authority\r\n    /// @param _authority Address of the target authority\r\n    /// @return Bool is whitelisted\r\n    function isAuthority(address _authority)\r\n        external view\r\n        returns (bool)\r\n    {\r\n        return accounts[_authority].groups[true].authority;\r\n    }\r\n\r\n    /// @dev Provides whether a drago is whitelisted\r\n    /// @param _drago Address of the target drago\r\n    /// @return Bool is whitelisted\r\n    function isWhitelistedDrago(address _drago)\r\n        external view\r\n        returns (bool)\r\n    {\r\n        return accounts[_drago].groups[true].drago;\r\n    }\r\n\r\n    /// @dev Provides whether a vault is whitelisted\r\n    /// @param _vault Address of the target vault\r\n    /// @return Bool is whitelisted\r\n    function isWhitelistedVault(address _vault)\r\n        external view\r\n        returns (bool)\r\n    {\r\n        return accounts[_vault].groups[true].vault;\r\n    }\r\n\r\n    /// @dev Provides whether a registry is whitelisted\r\n    /// @param _registry Address of the target registry\r\n    /// @return Bool is whitelisted\r\n    function isWhitelistedRegistry(address _registry)\r\n        external view\r\n        returns (bool)\r\n    {\r\n        return accounts[_registry].groups[true].registry;\r\n    }\r\n\r\n    /// @dev Provides whether a factory is whitelisted\r\n    /// @param _factory Address of the target factory\r\n    /// @return Bool is whitelisted\r\n    function isWhitelistedFactory(address _factory)\r\n        external view\r\n        returns (bool)\r\n    {\r\n        return accounts[_factory].groups[true].registry;\r\n    }\r\n\r\n    /// @dev Provides the address of the drago logs contract\r\n    /// @return Address of the drago logs contract\r\n    function getDragoEventful()\r\n        external view\r\n        returns (address)\r\n    {\r\n        return blocks.dragoEventful;\r\n    }\r\n\r\n    /// @dev Provides the address of the vault logs contract\r\n    /// @return Address of the vault logs contract\r\n    function getVaultEventful()\r\n        external view\r\n        returns (address)\r\n    {\r\n        return blocks.vaultEventful;\r\n    }\r\n\r\n    /// @dev Provides the address of the nav verifier\r\n    /// @return Address of the verifier\r\n    function getNavVerifier()\r\n        external view\r\n        returns (address)\r\n    {\r\n        return blocks.navVerifier;\r\n    }\r\n\r\n    /// @dev Provides the address of the exchangee authority\r\n    /// @return Address of the adapter\r\n    function getExchangesAuthority()\r\n        external view\r\n        returns (address)\r\n    {\r\n        return blocks.exchangesAuthority;\r\n    }\r\n\r\n    /*\r\n     * INTERNAL FUNCTIONS\r\n     */\r\n    /// @dev Allows to whitelist an authority\r\n    /// @param _authority Address of the authority\r\n    /// @param _isWhitelisted Bool whitelisted\r\n    function setAuthorityInternal(\r\n        address _authority,\r\n        bool _isWhitelisted)\r\n        internal\r\n    {\r\n        accounts[_authority].account = _authority;\r\n        accounts[_authority].authorized = _isWhitelisted;\r\n        accounts[_authority].groups[_isWhitelisted].authority = _isWhitelisted;\r\n        setWhitelisterInternal(_authority, _isWhitelisted);\r\n        types.list.push(List(_authority));\r\n        emit AuthoritySet(_authority);\r\n    }\r\n\r\n    /// @dev Allows the owner to whitelist a whitelister\r\n    /// @param _whitelister Address of the whitelister\r\n    /// @param _isWhitelisted Bool whitelisted\r\n    function setWhitelisterInternal(\r\n        address _whitelister,\r\n        bool _isWhitelisted)\r\n        internal\r\n    {\r\n        accounts[_whitelister].account = _whitelister;\r\n        accounts[_whitelister].authorized = _isWhitelisted;\r\n        accounts[_whitelister].groups[_isWhitelisted].whitelister = _isWhitelisted;\r\n        types.list.push(List(_whitelister));\r\n        emit WhitelisterSet(_whitelister);\r\n    }\r\n\r\n    /// @dev Provides whether an address is whitelister\r\n    /// @param _whitelister Address of the target whitelister\r\n    /// @return Bool is whitelisted\r\n    function isWhitelister(address _whitelister)\r\n        internal view\r\n        returns (bool)\r\n    {\r\n        return accounts[_whitelister].groups[true].whitelister;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getVaultEventful\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vaultEventful\",\"type\":\"address\"}],\"name\":\"setVaultEventful\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"isAuthority\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDragoEventful\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_drago\",\"type\":\"address\"}],\"name\":\"isWhitelistedDrago\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"authorized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"whitelistRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragoEventful\",\"type\":\"address\"}],\"name\":\"setDragoEventful\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"},{\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"whitelistFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExchangesAuthority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_navVerifier\",\"type\":\"address\"}],\"name\":\"setNavVerifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangesAuthority\",\"type\":\"address\"}],\"name\":\"setExchangesAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocks\",\"outputs\":[{\"name\":\"dragoEventful\",\"type\":\"address\"},{\"name\":\"vaultEventful\",\"type\":\"address\"},{\"name\":\"navVerifier\",\"type\":\"address\"},{\"name\":\"exchangesAuthority\",\"type\":\"address\"},{\"name\":\"casper\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"isWhitelistedRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"whitelistUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"isWhitelistedVault\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_drago\",\"type\":\"address\"},{\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"whitelistDrago\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"},{\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNavVerifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelister\",\"type\":\"address\"},{\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"types\",\"outputs\":[{\"name\":\"types\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"isWhitelistedUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"isWhitelistedFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"whitelistVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthoritySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"whitelister\",\"type\":\"address\"}],\"name\":\"WhitelisterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"WhitelistedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"WhitelistedRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"WhitelistedFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"WhitelistedVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"drago\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistedDrago\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dragoEventful\",\"type\":\"address\"}],\"name\":\"NewDragoEventful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vaultEventful\",\"type\":\"address\"}],\"name\":\"NewVaultEventful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"navVerifier\",\"type\":\"address\"}],\"name\":\"NewNavVerifier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exchangesAuthority\",\"type\":\"address\"}],\"name\":\"NewExchangesAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"Authority","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://947258d5c26bba004ca3ecf490bc9b3acae797425610c7dcc85e7dc622b71bdf"}]}