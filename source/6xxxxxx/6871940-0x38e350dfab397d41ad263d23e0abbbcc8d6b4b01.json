{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ETHSmartInvest {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public ONE_HUNDRED   = 10000;\r\n    uint256 constant public INTEREST      = 330;\r\n    uint256 constant public MARKETING_FEE = 800;\r\n    uint256 constant public ADMIN_FEE     = 200;\r\n    uint256 constant public ONE_DAY       = 1 days;\r\n    uint256 constant public MINIMUM       = 0.01 ether;\r\n\r\n    uint256[] public referralPercents     = [200, 100, 50, 25, 10];\r\n\r\n    struct User {\r\n        uint256 time;\r\n        uint256 deposit;\r\n        uint256 reserve;\r\n        address referrer;\r\n        uint256 bonus;\r\n    }\r\n\r\n    address public marketing = 0x137b2E4b00d40a42926e0846aca79F9b0AeBeFb6;\r\n    address public admin = 0x51ed5021AeD7F39CB0B350EF3Dd6eF1A29D17Ec5;\r\n\r\n    mapping(address => User) public users;\r\n\r\n    event InvestorAdded(address indexed investor, uint256 amount);\r\n    event ReferrerAdded(address indexed investor, address indexed referrer);\r\n    event DepositIncreased(address indexed investor, uint256 amount, uint256 totalAmount);\r\n    event DepositAddAll(uint256 amount);\r\n    event DividendsPayed(address indexed investor, uint256 amount);\r\n    event RefBonusPayed(address indexed investor, uint256 amount);\r\n    event RefBonusAdded(address indexed investor, address indexed referrer, uint256 amount, uint256 indexed level);\r\n\r\n    function() external payable {\r\n        if (msg.value == 0) {\r\n            withdraw();\r\n        } else {\r\n            invest();\r\n        }\r\n    }\r\n\r\n    function invest() public payable {\r\n        require(msg.value >= MINIMUM);\r\n        marketing.transfer(msg.value * MARKETING_FEE / ONE_HUNDRED);\r\n        admin.transfer(msg.value * ADMIN_FEE / ONE_HUNDRED);\r\n\r\n        if (users[msg.sender].deposit > 0) {\r\n            saveDividends();\r\n            emit DepositIncreased(msg.sender, msg.value, users[msg.sender].deposit + msg.value);\r\n        } else {\r\n            emit InvestorAdded(msg.sender, msg.value);\r\n        }\r\n\r\n        emit DepositAddAll(msg.value);\r\n\r\n        users[msg.sender].deposit += msg.value;\r\n        users[msg.sender].time = block.timestamp;\r\n\r\n        if (users[msg.sender].referrer != 0x0) {\r\n            refSystem();\r\n        } else if (msg.data.length == 20) {\r\n            addReferrer();\r\n        }\r\n    }\r\n\r\n\r\n    function withdraw() public {\r\n        uint256 payout = getDividends(msg.sender);\r\n        emit DividendsPayed(msg.sender, payout);\r\n\r\n        if (getRefBonus(msg.sender) != 0) {\r\n            payout += getRefBonus(msg.sender);\r\n            emit RefBonusPayed(msg.sender, getRefBonus(msg.sender));\r\n            users[msg.sender].bonus = 0;\r\n        }\r\n\r\n        require(payout >= MINIMUM);\r\n\r\n        if (users[msg.sender].reserve != 0) {\r\n            users[msg.sender].reserve = 0;\r\n        }\r\n\r\n        users[msg.sender].time += (block.timestamp.sub(users[msg.sender].time)).div(ONE_DAY).mul(ONE_DAY);\r\n\r\n        msg.sender.transfer(payout);\r\n    }\r\n\r\n    function bytesToAddress(bytes source) internal pure returns(address parsedReferrer) {\r\n        assembly {\r\n            parsedReferrer := mload(add(source,0x14))\r\n        }\r\n        return parsedReferrer;\r\n    }\r\n\r\n    function addReferrer() internal {\r\n        address refAddr = bytesToAddress(bytes(msg.data));\r\n        if (refAddr != msg.sender) {\r\n            users[msg.sender].referrer = refAddr;\r\n\r\n            refSystem();\r\n            emit ReferrerAdded(msg.sender, refAddr);\r\n        }\r\n    }\r\n\r\n    function refSystem() internal {\r\n        address first = users[msg.sender].referrer;\r\n        users[first].bonus += msg.value * referralPercents[0] / ONE_HUNDRED;\r\n        emit RefBonusAdded(msg.sender, first, msg.value * referralPercents[0] / ONE_HUNDRED, 1);\r\n        address second = users[first].referrer;\r\n        if (second != address(0)) {\r\n            users[second].bonus += msg.value * referralPercents[1] / ONE_HUNDRED;\r\n            emit RefBonusAdded(msg.sender, second, msg.value * referralPercents[1] / ONE_HUNDRED, 2);\r\n            address third = users[second].referrer;\r\n            if (third != address(0)) {\r\n                users[third].bonus += msg.value * referralPercents[2] / ONE_HUNDRED;\r\n                emit RefBonusAdded(msg.sender, third, msg.value * referralPercents[2] / ONE_HUNDRED, 3);\r\n                address fourth = users[third].referrer;\r\n                if (fourth != address(0)) {\r\n                    users[fourth].bonus += msg.value * referralPercents[3] / ONE_HUNDRED;\r\n                    emit RefBonusAdded(msg.sender, fourth, msg.value * referralPercents[3] / ONE_HUNDRED, 4);\r\n                    address fifth = users[fourth].referrer;\r\n                    if (fifth != address(0)) {\r\n                        users[fifth].bonus += msg.value * referralPercents[4] / ONE_HUNDRED;\r\n                        emit RefBonusAdded(msg.sender, fifth, msg.value * referralPercents[4] / ONE_HUNDRED, 5);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function saveDividends() internal {\r\n        uint256 dividends = (users[msg.sender].deposit.mul(INTEREST).div(ONE_HUNDRED)).mul(block.timestamp.sub(users[msg.sender].time)).div(ONE_DAY);\r\n        users[msg.sender].reserve += dividends;\r\n    }\r\n\r\n    function getDividends(address userAddr) public view returns(uint256) {\r\n        return (users[userAddr].deposit.mul(INTEREST).div(ONE_HUNDRED)).mul((block.timestamp.sub(users[userAddr].time)).div(ONE_DAY)).add(users[userAddr].reserve);\r\n    }\r\n\r\n    function getRefBonus(address userAddr) public view returns(uint256) {\r\n        return users[userAddr].bonus;\r\n    }\r\n\r\n    function getNextTime(address userAddr) public view returns(uint256) {\r\n        if (users[userAddr].time != 0) {\r\n            return (block.timestamp.sub(users[userAddr].time)).div(ONE_DAY).mul(ONE_DAY).add(users[userAddr].time).add(ONE_DAY);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getNextTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getRefBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"reserve\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_HUNDRED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTEREST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAddAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendsPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonusPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"RefBonusAdded\",\"type\":\"event\"}]","ContractName":"ETHSmartInvest","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://08baff12c1f712b78a737a9d9706213335668975c4d6a5414af7e9cb8404dd7d"}]}