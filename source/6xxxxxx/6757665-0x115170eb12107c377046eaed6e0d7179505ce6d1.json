{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title Description: This code is for creating a token contract\r\n * This contract is mintable, pausable, burnable, administered, admin-transferrable and \r\n * has safety Maths and security operations checks done and yet have been kept short and simple\r\n * It has got 3 contracts\r\n * 1. Manager Contract - This contract gives a user the power to manage the token functions\r\n * 2. ERC20 Standard Contract - It implements ERC20 pre requisites\r\n * 3. WIMT Token Contract - It is a custom contract that inherits from the above two contracts\r\n * This source code was tested with Remix and solidity compiler version 0.4.21\r\n * The source code was adapted and modified by wims.io\r\n * source : https://github.com/tintinweb/smart-contract-sanctuary/blob/master/contracts/ropsten/46/46b8357a9a9361258358308d3668e2072d6732a9_AxelToken.sol\r\n */\r\n\r\n /**\r\n * @notice Manager contract\r\n */\r\n \r\ncontract Manager\r\n{\r\n    address public contractManager; //address to manage the token contract\r\n    \r\n    bool public paused = false; // Indicates whether the token contract is paused or not.\r\n\t\r\n\tevent NewContractManager(address newManagerAddress); //Will display change of token manager\r\n\r\n    /**\r\n    * @notice Function constructor for contract Manager with no parameters\r\n    * \r\n    */\r\n    function Manager() public\r\n\t{\r\n        contractManager = msg.sender; //address that creates contracts will manage it\r\n    }\r\n\r\n\t/**\r\n\t* @notice onlyManager restrict management operations to the Manager of contract\r\n\t*/\r\n    modifier onlyManager()\r\n\t{\r\n        require(msg.sender == contractManager); \r\n        _;\r\n    }\r\n    \r\n\t/**\r\n\t* @notice Manager set a new manager\r\n\t*/\r\n    function newManager(address newManagerAddress) public onlyManager \r\n\t{\r\n\t\trequire(newManagerAddress != 0);\r\n\t\t\r\n        contractManager = newManagerAddress;\r\n\t\t\r\n\t\temit NewContractManager(newManagerAddress);\r\n\r\n    }\r\n    \r\n    /**\r\n     * @dev Event fired when the token contracts gets paused.\r\n     */\r\n    event Pause();\r\n\r\n    /**\r\n     * @notice Event fired when the token contracts gets unpaused.\r\n     */\r\n    event Unpause();\r\n\r\n    /**\r\n     * @notice Allows a function to be called only when the token contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses the token contract.\r\n     */\r\n    function pause() public onlyManager whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Unpauses the token contract.\r\n     */\r\n    function unpause() public onlyManager {\r\n        require(paused);\r\n\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n *@notice ERC20 This is the traditional ERC20 contract\r\n */\r\ncontract ERC20 is Manager\r\n{\r\n\r\n    mapping(address => uint256) public balanceOf; //this variable displays users balances\r\n    \r\n    string public name;//this variable displays token contract name\r\n\t\r\n    string public symbol;//this variable displays token contract ticker symbol\r\n\t\r\n    uint256 public decimal; //this variable displays the number of decimals for the token\r\n\t\r\n    uint256 public totalSupply;//this variable displays the total supply of tokens\r\n    \r\n    mapping(address => mapping(address => uint256)) public allowance;//this will list of addresses a user will allow to Transfer his/her tokens\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value); //this event will notifies Transfers\r\n\t\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);//this event will notifies Approval\r\n    \r\n    /**\r\n    * @notice Function constructor for ERC20 contract\r\n    */\r\n    function ERC20(uint256 initialSupply, string _name, string _symbol, uint256 _decimal)  public\r\n\t{\r\n\t\trequire(initialSupply >= 0);//prevent negative numbers\r\n\r\n\t\trequire(_decimal >= 0);//no negative decimals allowed\r\n\t\t\r\n        balanceOf[msg.sender] = initialSupply;//give the contract creator address the total created tokens\r\n\t\t\r\n        name = _name; //When the contract is being created give it a name\r\n\t\t\r\n        symbol = _symbol;//When the contract is being created give it a symbol\r\n\t\t\r\n        decimal = _decimal;//When the contract is being created give it decimals standard is  18\r\n\t\t\r\n        totalSupply = initialSupply; //When the contract is being created set the token total supply\r\n    }\r\n    \r\n    /**\r\n    * @notice function transfer which will move tokens from user account to an address specified at to parameter\r\n    *\r\n    */\r\n    function transfer(address _to, uint256 _value)public whenNotPaused returns (bool success)\r\n\t{\r\n\t\trequire(_value > 0);//prevent transferring nothing\r\n\t\t\r\n\t\trequire(balanceOf[msg.sender] >= _value);//the token sender must have tokens to transfer\r\n\t\t\r\n\t\trequire(balanceOf[_to] + _value >= balanceOf[_to]);//the token receiver balance must change and be bigger\r\n\r\n        balanceOf[msg.sender] -= _value;//the balance of the token sender must decrease accordingly\r\n\t\t\r\n        balanceOf[_to] += _value;//effect the actual transfer of tokens\r\n\t\t\r\n        emit Transfer(msg.sender, _to, _value);//publish addresses and amount Transferred\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @notice function approve gives an address power to spend specified amount\r\n    *\r\n    */\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) \r\n\t{\r\n\t\trequire(_value > 0); //approved amount must be greater than zero\r\n\t\t\r\n\t\tallowance[msg.sender][_spender] = _value;//_spender will be approved to spend _value from as user's address that called this function\r\n\r\n        emit Approval(msg.sender, _spender, _value);//broadcast the activity\r\n\t\t\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @notice function allowance : displays address allow to transfer tokens from owner\r\n    * \r\n    */    \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) \r\n\t{\r\n      return allowance[_owner][_spender];\r\n    }\r\n\r\n\t/**\r\n    * @notice function transferFrom : moves tokens from one address to another\r\n    * \r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value)public whenNotPaused returns (bool success)\r\n\t{\r\n\t\trequire(_value > 0); //move at least 1 token\r\n\t\t\r\n        require(balanceOf[_from] >= _value);//check that there tokens to move\r\n\t\t\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);//after the move the new value must be greater\r\n        \r\n        require(_value <= allowance[_from][msg.sender]); //only authorized addresses can transferFrom\r\n\r\n        balanceOf[_from] -= _value;//remove tokens from _from address\r\n\t\t\r\n        balanceOf[_to] += _value;//add these tokens to _to address\r\n        \r\n        allowance[_from][msg.sender] -= _value; //change the base token balance\r\n\r\n        emit Transfer(_from, _to, _value);//publish transferFrom activity to network\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @notice function balanceOf will display balance of given address\r\n    * \r\n    */\r\n    function balanceOf(address _owner)public constant returns (uint256 balance) \r\n\t{\r\n        return balanceOf[_owner];\r\n    }\r\n}\r\n\r\n/**\r\n *@notice  WIMT Token implements Manager and ERC contracts\r\n */\r\ncontract WIMT is Manager, ERC20\r\n{\r\n    /**\r\n     * @notice function constructor for the WIMT contract\r\n     */\r\n     \r\n    function WIMT(uint256 _totalSupply, string _name, string _symbol, uint8 _decimal ) public  ERC20(_totalSupply, _name, _symbol, _decimal)\r\n\t{\r\n\r\n        contractManager = msg.sender;\r\n\r\n        balanceOf[contractManager] = _totalSupply;\r\n\t\t\r\n        totalSupply = _totalSupply;\r\n\t\t\r\n\t\tdecimal = _decimal;\r\n\r\n    }\r\n    \r\n    /**\r\n    * @notice function mint to be executed by Manager of token\r\n    * \r\n    */\r\n    function mint(address target, uint256 mintedAmount)public onlyManager whenNotPaused\r\n\t{\r\n\t\trequire(target != 0);//check executor is supplied \r\n\t\t\r\n\t\trequire(mintedAmount > 0);//disallow negative minting\r\n\t\t\r\n\t    require(balanceOf[target] + mintedAmount >= balanceOf[target]);//after the move the new value must be greater\r\n        \r\n        require(totalSupply + mintedAmount >= totalSupply);//after the move the new value must be greater\r\n        \r\n        balanceOf[target] += mintedAmount;//add tokens to address target\r\n\t\t\r\n        totalSupply += mintedAmount;//increase totalSupply\r\n\t\t\r\n        emit Transfer(0, this, mintedAmount);//publish transfer\r\n\t\t\r\n        emit Transfer(this, target, mintedAmount);//publish transfer\r\n    }\r\n    \r\n\t/**\r\n    * @notice function burn decrease total Supply of tokens\r\n    * \r\n    */\r\n\tfunction burn(uint256 mintedAmount) public onlyManager whenNotPaused\r\n\t{\r\n\t\t\r\n\t\trequire(mintedAmount > 0);//at least 1 token must be destroyed\r\n\t\t\r\n\t\trequire(totalSupply - mintedAmount <= totalSupply);//after the move the new value must be greater\r\n        \r\n\t    require(balanceOf[msg.sender] - mintedAmount <= balanceOf[msg.sender]);//after the move the new value must be greater\r\n\r\n        balanceOf[msg.sender] -= mintedAmount;//decrease balance of destroyer\r\n\t\t\r\n        totalSupply -= mintedAmount;//decrease totalSupply by destroyed tokens\r\n\t\t\r\n        emit Transfer(0, msg.sender, mintedAmount);//publish burn activity\r\n\t\t\r\n        \r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManagerAddress\",\"type\":\"address\"}],\"name\":\"newManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimal\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManagerAddress\",\"type\":\"address\"}],\"name\":\"NewContractManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"WIMT","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000457494d5400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000457494d5400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://5c19051cb077c55cc66eca79d70a27a7b3a8a6378b22535d2f42b33cd194964b"}]}