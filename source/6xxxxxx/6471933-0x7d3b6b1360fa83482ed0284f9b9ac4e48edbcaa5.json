{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract dPonzi {\r\n    address public manager;\r\n\r\n    struct PlayerStruct {\r\n        uint key;\r\n        uint food;\r\n        uint idx;\r\n        uint gametime;\r\n        uint flag;\r\n    }\r\n\r\n    struct RefStruct {\r\n        address player;\r\n        uint flag;\r\n    }\r\n\r\n    struct RefStructAdd {\r\n        bool flag;\r\n        string name;\r\n    }\r\n\r\n    struct PotCntStruct {\r\n        address[] player;\r\n        address lastPlayer;\r\n        uint last;\r\n        uint balance;\r\n        uint keys;\r\n        uint food;\r\n        uint gtime;\r\n        uint gameTime;\r\n        uint lastRecord;\r\n        uint entryAmount;\r\n        mapping(string => PackageStruct) potStruct;\r\n    }\r\n\r\n    struct IdxStruct {\r\n      mapping(address => PlayerStruct) playerStruct;\r\n    }\r\n\r\n    struct PackageStruct {\r\n      uint entryAmount;\r\n    }\r\n\r\n    mapping(string => PotCntStruct) potCntInfo;\r\n    mapping(string => IdxStruct) idxStruct;\r\n    mapping(string => RefStruct) idxR;\r\n    mapping(address => RefStructAdd) public idxRadd;\r\n\r\n\r\n    constructor() public {\r\n        manager = msg.sender;\r\n\r\n        potCntInfo['d'].gameTime   = 0;\r\n        potCntInfo['7'].gameTime   = 0;\r\n        potCntInfo['30'].gameTime  = 0;\r\n        potCntInfo['90'].gameTime  = 0;\r\n        potCntInfo['180'].gameTime = 0;\r\n        potCntInfo['365'].gameTime = 0;\r\n\r\n        potCntInfo['i'].entryAmount   = 10;\r\n        potCntInfo['d'].entryAmount   = 1;\r\n        potCntInfo['7'].entryAmount   = 4;\r\n        potCntInfo['30'].entryAmount  = 8;\r\n        potCntInfo['90'].entryAmount  = 15;\r\n        potCntInfo['180'].entryAmount = 25;\r\n        potCntInfo['365'].entryAmount = 5;\r\n        potCntInfo['l'].entryAmount   = 2;\r\n    }\r\n\r\n    function enter(string package, address advisor) public payable {\r\n        require(msg.value >= 0.01 ether, \"0 ether is not allowed\");\r\n\r\n        uint key = 0;\r\n        uint multiplier = 100000000000000;\r\n\r\n        if(keccak256(abi.encodePacked(package)) == keccak256(\"BasicK\")) {\r\n            require(msg.value == 0.01 ether, \"Invalid Package Amount\");\r\n            key = 1;\r\n        }\r\n        else if (keccak256(abi.encodePacked(package)) == keccak256(\"PremiumK\")){\r\n            require(msg.value == 0.1 ether, \"Invalid Package Amount\");\r\n            key = 11;\r\n            multiplier = multiplier * 10;\r\n        }\r\n        else if (keccak256(abi.encodePacked(package)) == keccak256(\"LuxuryK\")){\r\n            require(msg.value == 1 ether, \"Invalid Package Amount\");\r\n            key = 120;\r\n            multiplier = multiplier * 100;\r\n            addRoyLuxList('l', 'idxLuxury', now, 500);\r\n        }\r\n        else if (keccak256(abi.encodePacked(package)) == keccak256(\"RoyalK\")){\r\n            require(msg.value == 10 ether, \"Invalid Package Amount\");\r\n            key = 1300;\r\n            multiplier = multiplier * 1000;\r\n            addRoyLuxList('r', 'idxRoyal', now, 100);\r\n        }\r\n\r\n        if (key > 0){\r\n            if ( idxRadd[advisor].flag ) {\r\n                advisor.transfer(potCntInfo['i'].entryAmount * multiplier);\r\n            }\r\n            else {\r\n                potCntInfo['i'].balance += potCntInfo['i'].entryAmount * multiplier;\r\n            }\r\n            potCntInfo['d'].balance   += potCntInfo['d'].entryAmount    * multiplier;\r\n            potCntInfo['7'].balance   += potCntInfo['7'].entryAmount    * multiplier;\r\n            potCntInfo['30'].balance  += potCntInfo['30'].entryAmount   * multiplier;\r\n            potCntInfo['90'].balance  += potCntInfo['90'].entryAmount   * multiplier;\r\n            potCntInfo['180'].balance += potCntInfo['180'].entryAmount  * multiplier;\r\n            potCntInfo['365'].balance += potCntInfo['365'].entryAmount  * multiplier;\r\n            potCntInfo['l'].balance   += potCntInfo['l'].entryAmount    * multiplier;\r\n            potCntInfo['r'].balance   += potCntInfo['365'].entryAmount  * multiplier;\r\n            potCntInfo['i'].balance   += potCntInfo['i'].entryAmount    * multiplier;\r\n            potCntInfo['dv'].balance  += potCntInfo['90'].entryAmount   * multiplier;\r\n\r\n            addPlayerMapping('d',   'idxDaily',  key, 0, 0);\r\n            addPlayerMapping('7',   'idx7Pot',   key, 60, 3600);\r\n            addPlayerMapping('30',  'idx30Pot',  key, 90, 10800);\r\n            addPlayerMapping('90',  'idx90Pot',  key, 120, 21600);\r\n            addPlayerMapping('180', 'idx180Pot', key, 150, 43200);\r\n            addPlayerMapping('365', 'idx365Pot', key, 0, 0);\r\n        }\r\n    }\r\n\r\n    function addPlayerMapping(string x1, string x2, uint key, uint timeAdd, uint hardCap ) private{\r\n      if(potCntInfo[x1].last <= now){\r\n        potCntInfo[x1].last = now;\r\n      }\r\n\r\n      if(keccak256(abi.encodePacked(x1)) == keccak256(\"d\")) {\r\n          if (potCntInfo[x1].gameTime == 0) {\r\n              potCntInfo[x1].gameTime   = now%86400 == 0 ? (now-28800) : now-28800-(now%86400);\r\n              potCntInfo[x1].gtime   = now;\r\n              potCntInfo[x1].last = potCntInfo[x1].gameTime + 1 days;\r\n          }\r\n      }\r\n      else if(keccak256(abi.encodePacked(x1)) == keccak256(\"365\")) {\r\n        if (potCntInfo[x1].gameTime == 0) {\r\n            potCntInfo[x1].gameTime = now%86400 == 0 ? (now-28800) : now-28800-(now%86400);\r\n            potCntInfo[x1].gtime = now;\r\n            potCntInfo[x1].last = potCntInfo[x1].gameTime + 365 days;\r\n            potCntInfo['l'].gameTime = potCntInfo[x1].gameTime;\r\n            potCntInfo['r'].gameTime = potCntInfo[x1].gameTime;\r\n            potCntInfo['l'].gtime   = now;\r\n            potCntInfo['r'].gtime   = now;\r\n        }\r\n      }else  {\r\n          if (potCntInfo[x1].gameTime == 0) {\r\n              potCntInfo[x1].gameTime   = now%86400 == 0 ? (now-28800) : now-28800-(now%86400);\r\n              potCntInfo[x1].gtime   = now;\r\n              potCntInfo[x1].last = (now + (key * timeAdd))>=now+hardCap ? now + hardCap : now + (key * timeAdd);\r\n          }\r\n          else {\r\n              potCntInfo[x1].last = (potCntInfo[x1].last + (key * timeAdd))>=now+hardCap ? now + hardCap : potCntInfo[x1].last + (key * timeAdd);\r\n          }\r\n      }\r\n\r\n      if (idxStruct[x2].playerStruct[msg.sender].flag == 0) {\r\n          potCntInfo[x1].player.push(msg.sender);\r\n          idxStruct[x2].playerStruct[msg.sender] = PlayerStruct(key, 0, potCntInfo[x1].player.length, potCntInfo[x1].gtime, 1);\r\n      }\r\n      else if (idxStruct[x2].playerStruct[msg.sender].gametime != potCntInfo[x1].gtime){\r\n          potCntInfo[x1].player.push(msg.sender);\r\n          idxStruct[x2].playerStruct[msg.sender] = PlayerStruct(key, 0, potCntInfo[x1].player.length, potCntInfo[x1].gtime, 1);\r\n      }\r\n      else {\r\n          idxStruct[x2].playerStruct[msg.sender].key += key;\r\n      }\r\n      potCntInfo[x1].keys += key;\r\n      potCntInfo[x1].lastPlayer = msg.sender;\r\n    }\r\n\r\n    function joinboard(string name) public payable {\r\n        require(msg.value >= 0.01 ether, \"0 ether is not allowed\");\r\n\r\n        if (idxR[name].flag == 0 ) {\r\n            idxR[name] = RefStruct(msg.sender, 1);\r\n            potCntInfo['i'].balance += msg.value;\r\n            idxRadd[msg.sender].name = name;\r\n            idxRadd[msg.sender].flag = true;\r\n        }\r\n        else {\r\n            revert(\"Name is not unique\");\r\n        }\r\n    }\r\n\r\n    function pickFood(uint pickTime, string x1, string x2, uint num, uint c) public restricted {\r\n        uint i = 0;\r\n        uint pCounter = 0;\r\n        uint food = 0;\r\n        if (potCntInfo[x1].player.length > 0 && potCntInfo[x1].food < num) {\r\n            do {\r\n                pCounter = random(potCntInfo[x1].player.length, pickTime+i+pCounter+food);\r\n                food = random(idxStruct[x2].playerStruct[potCntInfo[x1].player[pCounter]].key, pickTime+i+pCounter+food);\r\n                if (potCntInfo[x1].food + food > num) {\r\n                    idxStruct[x2].playerStruct[potCntInfo[x1].player[pCounter]].food += num-potCntInfo[x1].food;\r\n                    potCntInfo[x1].food = num;\r\n                    break;\r\n                }\r\n                else {\r\n                    idxStruct[x2].playerStruct[potCntInfo[x1].player[pCounter]].food += food;\r\n                    potCntInfo[x1].food += food;\r\n                }\r\n                i++;\r\n\r\n                if(potCntInfo[x1].food == num) {\r\n                    break;\r\n                }\r\n            }\r\n            while (i < c);\r\n            potCntInfo[x1].lastRecord = potCntInfo[x1].food == num ? 1 : 0;\r\n        }\r\n        else {\r\n            potCntInfo[x1].lastRecord = 1;\r\n        }\r\n    }\r\n\r\n    function pickWinner(uint pickTime, bool sendDaily, bool send7Pot, bool send30Pot, bool send90Pot, bool send180Pot, bool send365Pot) public restricted{\r\n        hitPotProcess('7', send7Pot,  pickTime);\r\n        hitPotProcess('30', send30Pot, pickTime);\r\n        hitPotProcess('90', send90Pot, pickTime);\r\n        hitPotProcess('180', send180Pot, pickTime);\r\n\r\n        maturityProcess('d', sendDaily, pickTime, 86400);\r\n        maturityProcess('7', send7Pot, pickTime, 604800);\r\n        maturityProcess('30', send30Pot, pickTime, 2592000);\r\n        maturityProcess('90', send90Pot, pickTime, 7776000);\r\n        maturityProcess('180', send180Pot, pickTime, 15552000);\r\n        maturityProcess('365', send365Pot, pickTime, 31536000);\r\n        maturityProcess('l', send365Pot, pickTime, 31536000);\r\n        maturityProcess('r', send365Pot, pickTime, 31536000);\r\n    }\r\n\r\n    function hitPotProcess(string x1, bool send, uint pickTime) private {\r\n        if( pickTime > potCntInfo[x1].last) {\r\n            if (potCntInfo[x1].balance > 0 && send) {\r\n                if (pickTime - potCntInfo[x1].last >= 20) {\r\n                    potCntInfo[x1].balance = 0;\r\n                    potCntInfo[x1].food = 0;\r\n                    potCntInfo[x1].keys = 0;\r\n                    delete potCntInfo[x1].player;\r\n                    potCntInfo[x1].gameTime = 0;\r\n                    potCntInfo[x1].gtime = pickTime;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function maturityProcess(string x1, bool send, uint pickTime, uint addTime) private {\r\n      if( pickTime > potCntInfo[x1].gameTime) {\r\n          if ( (pickTime - potCntInfo[x1].gameTime) >= addTime) {\r\n            if (potCntInfo[x1].balance > 0 && send) {\r\n                potCntInfo[x1].balance = 0;\r\n                potCntInfo[x1].food = 0;\r\n                potCntInfo[x1].keys = 0;\r\n                delete potCntInfo[x1].player;\r\n                potCntInfo[x1].gameTime = 0;\r\n                potCntInfo[x1].gtime    = pickTime;\r\n            }\r\n        }\r\n      }\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == manager, \"Only manager is allowed\");\r\n        _;\r\n    }\r\n\r\n    function random(uint maxNum, uint timestamp) private view returns (uint){\r\n        return uint(keccak256(abi.encodePacked(block.difficulty, timestamp, potCntInfo['d'].balance, potCntInfo['7'].balance, potCntInfo['30'].balance, potCntInfo['90'].balance, potCntInfo['180'].balance, potCntInfo['365'].balance))) % maxNum;\r\n    }\r\n\r\n    function addRoyLuxList(string x1, string x2, uint timestamp, uint num) private {\r\n        uint pick;\r\n\r\n        if ( potCntInfo[x1].player.length < num) {\r\n            if (idxStruct[x2].playerStruct[msg.sender].flag == 0 ) {\r\n                idxStruct[x2].playerStruct[msg.sender] = PlayerStruct(0, 0, potCntInfo[x1].player.length, potCntInfo['365'].gtime, 1);\r\n                potCntInfo[x1].player.push(msg.sender);\r\n            }\r\n            else if (idxStruct[x2].playerStruct[msg.sender].gametime != potCntInfo['365'].gtime ) {\r\n                idxStruct[x2].playerStruct[msg.sender] = PlayerStruct(0, 0, potCntInfo[x1].player.length, potCntInfo['365'].gtime, 1);\r\n                potCntInfo[x1].player.push(msg.sender);\r\n            }\r\n        }\r\n        else {\r\n            if (idxStruct[x2].playerStruct[msg.sender].flag == 0 ) {\r\n                pick = random(potCntInfo[x1].player.length, timestamp);\r\n                idxStruct[x2].playerStruct[msg.sender] = PlayerStruct(0, 0, idxStruct[x2].playerStruct[potCntInfo[x1].player[pick]].idx, potCntInfo['365'].gtime, 1);\r\n                idxStruct[x2].playerStruct[potCntInfo[x1].player[pick]].flag = 0;\r\n                potCntInfo[x1].player[pick] = msg.sender;\r\n            }\r\n            else if (idxStruct[x2].playerStruct[msg.sender].gametime != potCntInfo['365'].gtime ) {\r\n                pick = random(potCntInfo[x1].player.length, timestamp);\r\n                idxStruct[x2].playerStruct[msg.sender] = PlayerStruct(0, 0, idxStruct[x2].playerStruct[potCntInfo[x1].player[pick]].idx, potCntInfo['365'].gtime, 1);\r\n                idxStruct[x2].playerStruct[potCntInfo[x1].player[pick]].flag = 0;\r\n                potCntInfo[x1].player[pick] = msg.sender;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getPotCnt(string x) public constant returns(uint count, uint pLast, uint pot, uint keystore, uint gtime, uint gameTime, uint food) {\r\n        return (potCntInfo[x].player.length, potCntInfo[x].last, potCntInfo[x].balance, potCntInfo[x].keys, potCntInfo[x].gtime, potCntInfo[x].gameTime, potCntInfo[x].food);\r\n    }\r\n\r\n    function getIdx(string x1, string x2, uint p) public constant returns(address p1, uint key, uint food, uint gametime, uint flag) {\r\n        return (potCntInfo[x1].player[p], idxStruct[x2].playerStruct[potCntInfo[x1].player[p]].key, idxStruct[x2].playerStruct[potCntInfo[x1].player[p]].food, idxStruct[x2].playerStruct[potCntInfo[x1].player[p]].gametime, idxStruct[x2].playerStruct[potCntInfo[x1].player[p]].flag);\r\n    }\r\n\r\n    function getLast(string x) public constant returns(uint lastRecord) {\r\n        return potCntInfo[x].lastRecord;\r\n    }\r\n\r\n    function getLastPlayer(string x) public constant returns(address lastPlayer) {\r\n        return potCntInfo[x].lastPlayer;\r\n    }\r\n\r\n    function sendFood(address p, uint food) public restricted {\r\n         p.transfer(food);\r\n    }\r\n\r\n    function sendFoods(address[500] p, uint[500] food) public restricted {\r\n        for(uint k = 0; k < p.length; k++){\r\n            if (food[k] == 0) {\r\n                return;\r\n            }\r\n            p[k].transfer(food[k]);\r\n        }\r\n    }\r\n\r\n    function sendItDv(string x1) public restricted {\r\n        msg.sender.transfer(potCntInfo[x1].balance);\r\n        potCntInfo[x1].balance = 0;\r\n    }\r\n\r\n    function sendDv(string x1) public restricted {\r\n        potCntInfo[x1].balance = 0;\r\n    }\r\n\r\n    function getReffAdd(string x) public constant returns(address){\r\n      if( idxR[x].flag == 1){\r\n        return idxR[x].player;\r\n      }else{\r\n        revert(\"Not found!\");\r\n      }\r\n    }\r\n\r\n    function getReffName(address x) public constant returns(string){\r\n      if( idxRadd[x].flag){\r\n        return idxRadd[x].name;\r\n      }else{\r\n        revert(\"Not found!\");\r\n      }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"string\"}],\"name\":\"getLastPlayer\",\"outputs\":[{\"name\":\"lastPlayer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x1\",\"type\":\"string\"}],\"name\":\"sendDv\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"string\"}],\"name\":\"getPotCnt\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"pLast\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"keystore\",\"type\":\"uint256\"},{\"name\":\"gtime\",\"type\":\"uint256\"},{\"name\":\"gameTime\",\"type\":\"uint256\"},{\"name\":\"food\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"string\"}],\"name\":\"getLast\",\"outputs\":[{\"name\":\"lastRecord\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x1\",\"type\":\"string\"},{\"name\":\"x2\",\"type\":\"string\"},{\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"getIdx\",\"outputs\":[{\"name\":\"p1\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"food\",\"type\":\"uint256\"},{\"name\":\"gametime\",\"type\":\"uint256\"},{\"name\":\"flag\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x1\",\"type\":\"string\"}],\"name\":\"sendItDv\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pickTime\",\"type\":\"uint256\"},{\"name\":\"sendDaily\",\"type\":\"bool\"},{\"name\":\"send7Pot\",\"type\":\"bool\"},{\"name\":\"send30Pot\",\"type\":\"bool\"},{\"name\":\"send90Pot\",\"type\":\"bool\"},{\"name\":\"send180Pot\",\"type\":\"bool\"},{\"name\":\"send365Pot\",\"type\":\"bool\"}],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"string\"}],\"name\":\"getReffAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pickTime\",\"type\":\"uint256\"},{\"name\":\"x1\",\"type\":\"string\"},{\"name\":\"x2\",\"type\":\"string\"},{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"pickFood\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"package\",\"type\":\"string\"},{\"name\":\"advisor\",\"type\":\"address\"}],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"p\",\"type\":\"address[500]\"},{\"name\":\"food\",\"type\":\"uint256[500]\"}],\"name\":\"sendFoods\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"p\",\"type\":\"address\"},{\"name\":\"food\",\"type\":\"uint256\"}],\"name\":\"sendFood\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"address\"}],\"name\":\"getReffName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"idxRadd\",\"outputs\":[{\"name\":\"flag\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"joinboard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"dPonzi","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cdb077b2a3fee2f990f8d38de3f0d6cac2b45007975d0361a6256be88eb2df71"}]}