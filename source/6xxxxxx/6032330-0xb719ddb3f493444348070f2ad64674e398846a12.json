{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract MultiEthSender {\r\n    using SafeMath for uint256;\r\n\r\n    event Send(uint256 _amount, address indexed _receiver);\r\n\r\n    function multiSendEth(uint256 amount, address[] list) public returns (bool){\r\n        uint256 _userCount = list.length;\r\n\r\n        require( address(this).balance > amount.mul(_userCount));\r\n\r\n        for(uint256 _i = 0; _i < _userCount; _i++){\r\n            list[_i].transfer(amount);\r\n            emit Send(amount, list[_i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function() public payable{}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"multiSendEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"Send\",\"type\":\"event\"}]","ContractName":"MultiEthSender","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://838ac48e52f0e319d0347d99923e69987ed755b46fc4084617a29b8787a3b7a9"}]}