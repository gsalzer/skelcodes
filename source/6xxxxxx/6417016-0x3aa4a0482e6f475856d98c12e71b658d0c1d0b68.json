{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". This adds two-phase\r\n * ownership control to OpenZeppelin's Ownable class. In this model, the original owner \r\n * designates a new owner but does not actually transfer ownership. The new owner then accepts \r\n * ownership and completes the transfer.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public pendingOwner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    pendingOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\n// library AddressUtils {\r\n\r\n//   /**\r\n//    * Returns whether the target address is a contract\r\n//    * @dev This function will return false if invoked during the constructor of a contract,\r\n//    * as the code is not actually created until after the constructor finishes.\r\n//    * @param addr address to check\r\n//    * @return whether the target address is a contract\r\n//    */\r\n//   function isContract(address addr) internal view returns (bool) {\r\n//     uint256 size;\r\n//     // XXX Currently there is no better way to check if there is a contract in an address\r\n//     // than to check the size of the code at that address.\r\n//     // See https://ethereum.stackexchange.com/a/14016/36603\r\n//     // for more details about how this works.\r\n//     // TODO Check this again before the Serenity release, because all addresses will be\r\n//     // contracts then.\r\n//     // solium-disable-next-line security/no-inline-assembly\r\n//     assembly { size := extcodesize(addr) }\r\n//     return size > 0;\r\n//   }\r\n\r\n// }\r\n\r\n/**\r\n* @title PermissionedTokenStorage\r\n* @notice a PermissionedTokenStorage is constructed by setting Regulator, BalanceSheet, and AllowanceSheet locations.\r\n* Once the storages are set, they cannot be changed.\r\n*/\r\ncontract PermissionedTokenStorage is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n        Storage\r\n    */\r\n    mapping (address => mapping (address => uint256)) public allowances;\r\n    mapping (address => uint256) public balances;\r\n    uint256 public totalSupply;\r\n\r\n    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowances[_tokenHolder][_spender] = allowances[_tokenHolder][_spender].add(_value);\r\n    }\r\n\r\n    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowances[_tokenHolder][_spender] = allowances[_tokenHolder][_spender].sub(_value);\r\n    }\r\n\r\n    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowances[_tokenHolder][_spender] = _value;\r\n    }\r\n\r\n    function addBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balances[_addr] = balances[_addr].add(_value);\r\n    }\r\n\r\n    function subBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balances[_addr] = balances[_addr].sub(_value);\r\n    }\r\n\r\n    function setBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balances[_addr] = _value;\r\n    }\r\n\r\n    function addTotalSupply(uint256 _value) public onlyOwner {\r\n        totalSupply = totalSupply.add(_value);\r\n    }\r\n\r\n    function subTotalSupply(uint256 _value) public onlyOwner {\r\n        totalSupply = totalSupply.sub(_value);\r\n    }\r\n\r\n    function setTotalSupply(uint256 _value) public onlyOwner {\r\n        totalSupply = _value;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  function () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize)\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize)\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize) }\r\n      default { return(0, returndatasize) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _implementation Address of the initial implementation.\r\n   */\r\n  constructor(address _implementation) public {\r\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\r\n\r\n    _setImplementation(_implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) private {\r\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n*\r\n* @dev Stores permissions and validators and provides setter and getter methods. \r\n* Permissions determine which methods users have access to call. Validators\r\n* are able to mutate permissions at the Regulator level.\r\n*\r\n*/\r\ncontract RegulatorStorage is Ownable {\r\n    \r\n    /** \r\n        Structs \r\n    */\r\n\r\n    /* Contains metadata about a permission to execute a particular method signature. */\r\n    struct Permission {\r\n        string name; // A one-word description for the permission. e.g. \"canMint\"\r\n        string description; // A longer description for the permission. e.g. \"Allows user to mint tokens.\"\r\n        string contract_name; // e.g. \"PermissionedToken\"\r\n        bool active; // Permissions can be turned on or off by regulator\r\n    }\r\n\r\n    /** \r\n        Constants: stores method signatures. These are potential permissions that a user can have, \r\n        and each permission gives the user the ability to call the associated PermissionedToken method signature\r\n    */\r\n    bytes4 public constant MINT_SIG = bytes4(keccak256(\"mint(address,uint256)\"));\r\n    bytes4 public constant MINT_CUSD_SIG = bytes4(keccak256(\"mintCUSD(address,uint256)\"));\r\n    bytes4 public constant CONVERT_WT_SIG = bytes4(keccak256(\"convertWT(uint256)\"));\r\n    bytes4 public constant BURN_SIG = bytes4(keccak256(\"burn(uint256)\"));\r\n    bytes4 public constant CONVERT_CARBON_DOLLAR_SIG = bytes4(keccak256(\"convertCarbonDollar(address,uint256)\"));\r\n    bytes4 public constant BURN_CARBON_DOLLAR_SIG = bytes4(keccak256(\"burnCarbonDollar(address,uint256)\"));\r\n    bytes4 public constant DESTROY_BLACKLISTED_TOKENS_SIG = bytes4(keccak256(\"destroyBlacklistedTokens(address,uint256)\"));\r\n    bytes4 public constant APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG = bytes4(keccak256(\"approveBlacklistedAddressSpender(address)\"));\r\n    bytes4 public constant BLACKLISTED_SIG = bytes4(keccak256(\"blacklisted()\"));\r\n\r\n    /** \r\n        Mappings \r\n    */\r\n\r\n    /* each method signature maps to a Permission */\r\n    mapping (bytes4 => Permission) public permissions;\r\n    /* list of validators, either active or inactive */\r\n    mapping (address => bool) public validators;\r\n    /* each user can be given access to a given method signature */\r\n    mapping (address => mapping (bytes4 => bool)) public userPermissions;\r\n\r\n    /** \r\n        Events \r\n    */\r\n    event PermissionAdded(bytes4 methodsignature);\r\n    event PermissionRemoved(bytes4 methodsignature);\r\n    event ValidatorAdded(address indexed validator);\r\n    event ValidatorRemoved(address indexed validator);\r\n\r\n    /** \r\n        Modifiers \r\n    */\r\n    /**\r\n    * @notice Throws if called by any account that does not have access to set attributes\r\n    */\r\n    modifier onlyValidator() {\r\n        require (isValidator(msg.sender), \"Sender must be validator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Sets a permission within the list of permissions.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    * @param _permissionName A \"slug\" name for this permission (e.g. \"canMint\").\r\n    * @param _permissionDescription A lengthier description for this permission (e.g. \"Allows user to mint tokens\").\r\n    * @param _contractName Name of the contract that the method belongs to.\r\n    */\r\n    function addPermission(\r\n        bytes4 _methodsignature, \r\n        string _permissionName, \r\n        string _permissionDescription, \r\n        string _contractName) public onlyValidator { \r\n        Permission memory p = Permission(_permissionName, _permissionDescription, _contractName, true);\r\n        permissions[_methodsignature] = p;\r\n        emit PermissionAdded(_methodsignature);\r\n    }\r\n\r\n    /**\r\n    * @notice Removes a permission the list of permissions.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    */\r\n    function removePermission(bytes4 _methodsignature) public onlyValidator {\r\n        permissions[_methodsignature].active = false;\r\n        emit PermissionRemoved(_methodsignature);\r\n    }\r\n    \r\n    /**\r\n    * @notice Sets a permission in the list of permissions that a user has.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    */\r\n    function setUserPermission(address _who, bytes4 _methodsignature) public onlyValidator {\r\n        require(permissions[_methodsignature].active, \"Permission being set must be for a valid method signature\");\r\n        userPermissions[_who][_methodsignature] = true;\r\n    }\r\n\r\n    /**\r\n    * @notice Removes a permission from the list of permissions that a user has.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    */\r\n    function removeUserPermission(address _who, bytes4 _methodsignature) public onlyValidator {\r\n        require(permissions[_methodsignature].active, \"Permission being removed must be for a valid method signature\");\r\n        userPermissions[_who][_methodsignature] = false;\r\n    }\r\n\r\n    /**\r\n    * @notice add a Validator\r\n    * @param _validator Address of validator to add\r\n    */\r\n    function addValidator(address _validator) public onlyOwner {\r\n        validators[_validator] = true;\r\n        emit ValidatorAdded(_validator);\r\n    }\r\n\r\n    /**\r\n    * @notice remove a Validator\r\n    * @param _validator Address of validator to remove\r\n    */\r\n    function removeValidator(address _validator) public onlyOwner {\r\n        validators[_validator] = false;\r\n        emit ValidatorRemoved(_validator);\r\n    }\r\n\r\n    /**\r\n    * @notice does validator exist?\r\n    * @return true if yes, false if no\r\n    **/\r\n    function isValidator(address _validator) public view returns (bool) {\r\n        return validators[_validator];\r\n    }\r\n\r\n    /**\r\n    * @notice does permission exist?\r\n    * @return true if yes, false if no\r\n    **/\r\n    function isPermission(bytes4 _methodsignature) public view returns (bool) {\r\n        return permissions[_methodsignature].active;\r\n    }\r\n\r\n    /**\r\n    * @notice get Permission structure\r\n    * @param _methodsignature request to retrieve the Permission struct for this methodsignature\r\n    * @return Permission\r\n    **/\r\n    function getPermission(bytes4 _methodsignature) public view returns \r\n        (string name, \r\n         string description, \r\n         string contract_name,\r\n         bool active) {\r\n        return (permissions[_methodsignature].name,\r\n                permissions[_methodsignature].description,\r\n                permissions[_methodsignature].contract_name,\r\n                permissions[_methodsignature].active);\r\n    }\r\n\r\n    /**\r\n    * @notice does permission exist?\r\n    * @return true if yes, false if no\r\n    **/\r\n    function hasUserPermission(address _who, bytes4 _methodsignature) public view returns (bool) {\r\n        return userPermissions[_who][_methodsignature];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Regulator\r\n * @dev Regulator can be configured to meet relevant securities regulations, KYC policies\r\n * AML requirements, tax laws, and more. The Regulator ensures that the PermissionedToken\r\n * makes compliant transfers possible. Contains the userPermissions necessary\r\n * for regulatory compliance.\r\n *\r\n */\r\ncontract Regulator is RegulatorStorage {\r\n    \r\n    /** \r\n        Modifiers \r\n    */\r\n    /**\r\n    * @notice Throws if called by any account that does not have access to set attributes\r\n    */\r\n    modifier onlyValidator() {\r\n        require (isValidator(msg.sender), \"Sender must be validator\");\r\n        _;\r\n    }\r\n\r\n    /** \r\n        Events \r\n    */\r\n    event LogWhitelistedUser(address indexed who);\r\n    event LogBlacklistedUser(address indexed who);\r\n    event LogNonlistedUser(address indexed who);\r\n    event LogSetMinter(address indexed who);\r\n    event LogRemovedMinter(address indexed who);\r\n    event LogSetBlacklistDestroyer(address indexed who);\r\n    event LogRemovedBlacklistDestroyer(address indexed who);\r\n    event LogSetBlacklistSpender(address indexed who);\r\n    event LogRemovedBlacklistSpender(address indexed who);\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a user to mint tokens.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setMinter(address _who) public onlyValidator {\r\n        _setMinter(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Removes the necessary permissions for a user to mint tokens.\r\n    * @param _who The address of the account that we are removing permissions for.\r\n    */\r\n    function removeMinter(address _who) public onlyValidator {\r\n        _removeMinter(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a user to spend tokens from a blacklisted account.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setBlacklistSpender(address _who) public onlyValidator {\r\n        require(isPermission(APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG), \"Blacklist spending not supported by token\");\r\n        setUserPermission(_who, APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG);\r\n        emit LogSetBlacklistSpender(_who);\r\n    }\r\n    \r\n    /**\r\n    * @notice Removes the necessary permissions for a user to spend tokens from a blacklisted account.\r\n    * @param _who The address of the account that we are removing permissions for.\r\n    */\r\n    function removeBlacklistSpender(address _who) public onlyValidator {\r\n        require(isPermission(APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG), \"Blacklist spending not supported by token\");\r\n        removeUserPermission(_who, APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG);\r\n        emit LogRemovedBlacklistSpender(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a user to destroy tokens from a blacklisted account.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setBlacklistDestroyer(address _who) public onlyValidator {\r\n        require(isPermission(DESTROY_BLACKLISTED_TOKENS_SIG), \"Blacklist token destruction not supported by token\");\r\n        setUserPermission(_who, DESTROY_BLACKLISTED_TOKENS_SIG);\r\n        emit LogSetBlacklistDestroyer(_who);\r\n    }\r\n    \r\n\r\n    /**\r\n    * @notice Removes the necessary permissions for a user to destroy tokens from a blacklisted account.\r\n    * @param _who The address of the account that we are removing permissions for.\r\n    */\r\n    function removeBlacklistDestroyer(address _who) public onlyValidator {\r\n        require(isPermission(DESTROY_BLACKLISTED_TOKENS_SIG), \"Blacklist token destruction not supported by token\");\r\n        removeUserPermission(_who, DESTROY_BLACKLISTED_TOKENS_SIG);\r\n        emit LogRemovedBlacklistDestroyer(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a \"whitelisted\" user.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setWhitelistedUser(address _who) public onlyValidator {\r\n        _setWhitelistedUser(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a \"blacklisted\" user. A blacklisted user has their accounts\r\n    * frozen; they cannot transfer, burn, or withdraw any tokens.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setBlacklistedUser(address _who) public onlyValidator {\r\n        _setBlacklistedUser(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a \"nonlisted\" user. Nonlisted users can trade tokens,\r\n    * but cannot burn them (and therefore cannot convert them into fiat.)\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setNonlistedUser(address _who) public onlyValidator {\r\n        _setNonlistedUser(_who);\r\n    }\r\n\r\n    /** Returns whether or not a user is whitelisted.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is whitelisted, `false` otherwise.\r\n     */\r\n    function isWhitelistedUser(address _who) public view returns (bool) {\r\n        return (hasUserPermission(_who, BURN_SIG) && !hasUserPermission(_who, BLACKLISTED_SIG));\r\n    }\r\n\r\n    /** Returns whether or not a user is blacklisted.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is blacklisted, `false` otherwise.\r\n     */\r\n    function isBlacklistedUser(address _who) public view returns (bool) {\r\n        return (!hasUserPermission(_who, BURN_SIG) && hasUserPermission(_who, BLACKLISTED_SIG));\r\n    }\r\n\r\n    /** Returns whether or not a user is nonlisted.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is nonlisted, `false` otherwise.\r\n     */\r\n    function isNonlistedUser(address _who) public view returns (bool) {\r\n        return (!hasUserPermission(_who, BURN_SIG) && !hasUserPermission(_who, BLACKLISTED_SIG));\r\n    }\r\n\r\n    /** Returns whether or not a user is a blacklist spender.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is a blacklist spender, `false` otherwise.\r\n     */\r\n    function isBlacklistSpender(address _who) public view returns (bool) {\r\n        return hasUserPermission(_who, APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG);\r\n    }\r\n\r\n    /** Returns whether or not a user is a blacklist destroyer.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is a blacklist destroyer, `false` otherwise.\r\n     */\r\n    function isBlacklistDestroyer(address _who) public view returns (bool) {\r\n        return hasUserPermission(_who, DESTROY_BLACKLISTED_TOKENS_SIG);\r\n    }\r\n\r\n    /** Returns whether or not a user is a minter.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is a minter, `false` otherwise.\r\n     */\r\n    function isMinter(address _who) public view returns (bool) {\r\n        return hasUserPermission(_who, MINT_SIG);\r\n    }\r\n\r\n    /** Internal Functions **/\r\n\r\n    function _setMinter(address _who) internal {\r\n        require(isPermission(MINT_SIG), \"Minting not supported by token\");\r\n        setUserPermission(_who, MINT_SIG);\r\n        emit LogSetMinter(_who);\r\n    }\r\n\r\n    function _removeMinter(address _who) internal {\r\n        require(isPermission(MINT_SIG), \"Minting not supported by token\");\r\n        removeUserPermission(_who, MINT_SIG);\r\n        emit LogRemovedMinter(_who);\r\n    }\r\n\r\n    function _setNonlistedUser(address _who) internal {\r\n        require(isPermission(BURN_SIG), \"Burn method not supported by token\");\r\n        require(isPermission(BLACKLISTED_SIG), \"Self-destruct method not supported by token\");\r\n        removeUserPermission(_who, BURN_SIG);\r\n        removeUserPermission(_who, BLACKLISTED_SIG);\r\n        emit LogNonlistedUser(_who);\r\n    }\r\n\r\n    function _setBlacklistedUser(address _who) internal {\r\n        require(isPermission(BURN_SIG), \"Burn method not supported by token\");\r\n        require(isPermission(BLACKLISTED_SIG), \"Self-destruct method not supported by token\");\r\n        removeUserPermission(_who, BURN_SIG);\r\n        setUserPermission(_who, BLACKLISTED_SIG);\r\n        emit LogBlacklistedUser(_who);\r\n    }\r\n\r\n    function _setWhitelistedUser(address _who) internal {\r\n        require(isPermission(BURN_SIG), \"Burn method not supported by token\");\r\n        require(isPermission(BLACKLISTED_SIG), \"Self-destruct method not supported by token\");\r\n        setUserPermission(_who, BURN_SIG);\r\n        removeUserPermission(_who, BLACKLISTED_SIG);\r\n        emit LogWhitelistedUser(_who);\r\n    }\r\n}\r\n\r\n/**\r\n* @title PermissionedTokenProxy\r\n* @notice A proxy contract that serves the latest implementation of PermissionedToken.\r\n*/\r\ncontract PermissionedTokenProxy is UpgradeabilityProxy, Ownable {\r\n    \r\n    PermissionedTokenStorage public tokenStorage;\r\n    Regulator public regulator;\r\n\r\n    // Events\r\n    event ChangedRegulator(address indexed oldRegulator, address indexed newRegulator );\r\n\r\n\r\n    /**\r\n    * @dev create a new PermissionedToken as a proxy contract\r\n    * with a brand new data storage \r\n    **/\r\n    constructor(address _implementation, address _regulator) \r\n    UpgradeabilityProxy(_implementation) public {\r\n        regulator = Regulator(_regulator);\r\n        tokenStorage = new PermissionedTokenStorage();\r\n    }\r\n\r\n    /**\r\n    * @dev Upgrade the backing implementation of the proxy.\r\n    * Only the admin can call this function.\r\n    * @param newImplementation Address of the new implementation.\r\n    */\r\n    function upgradeTo(address newImplementation) public onlyOwner {\r\n        _upgradeTo(newImplementation);\r\n    }\r\n\r\n\r\n    /**\r\n    * @return The address of the implementation.\r\n    */\r\n    function implementation() public view returns (address) {\r\n        return _implementation();\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistedTokenRegulator\r\n * @dev WhitelistedTokenRegulator is a type of Regulator that modifies its definitions of\r\n * what constitutes a \"whitelisted/nonlisted/blacklisted\" user. A WhitelistedToken\r\n * provides a user the additional ability to convert from a whtielisted stablecoin into the\r\n * meta-token CUSD, or mint CUSD directly through a specific WT.\r\n *\r\n */\r\ncontract WhitelistedTokenRegulator is Regulator {\r\n\r\n    function isMinter(address _who) public view returns (bool) {\r\n        return (super.isMinter(_who) && hasUserPermission(_who, MINT_CUSD_SIG));\r\n    }\r\n\r\n    // Getters\r\n\r\n    function isWhitelistedUser(address _who) public view returns (bool) {\r\n        return (hasUserPermission(_who, CONVERT_WT_SIG) && super.isWhitelistedUser(_who));\r\n    }\r\n\r\n    function isBlacklistedUser(address _who) public view returns (bool) {\r\n        return (!hasUserPermission(_who, CONVERT_WT_SIG) && super.isBlacklistedUser(_who));\r\n    }\r\n\r\n    function isNonlistedUser(address _who) public view returns (bool) {\r\n        return (!hasUserPermission(_who, CONVERT_WT_SIG) && super.isNonlistedUser(_who));\r\n    }   \r\n\r\n    /** Internal functions **/\r\n\r\n    // A WT minter should have option to either mint directly into CUSD via mintCUSD(), or\r\n    // mint the WT via an ordinary mint() \r\n    function _setMinter(address _who) internal {\r\n        require(isPermission(MINT_CUSD_SIG), \"Minting to CUSD not supported by token\");\r\n        setUserPermission(_who, MINT_CUSD_SIG);\r\n        super._setMinter(_who);\r\n    }\r\n\r\n    function _removeMinter(address _who) internal {\r\n        require(isPermission(MINT_CUSD_SIG), \"Minting to CUSD not supported by token\");\r\n        removeUserPermission(_who, MINT_CUSD_SIG);\r\n        super._removeMinter(_who);\r\n    }\r\n\r\n    // Setters\r\n\r\n    // A WT whitelisted user should gain ability to convert their WT into CUSD. They can also burn their WT, as a\r\n    // PermissionedToken whitelisted user can do\r\n    function _setWhitelistedUser(address _who) internal {\r\n        require(isPermission(CONVERT_WT_SIG), \"Converting to CUSD not supported by token\");\r\n        setUserPermission(_who, CONVERT_WT_SIG);\r\n        super._setWhitelistedUser(_who);\r\n    }\r\n\r\n    function _setBlacklistedUser(address _who) internal {\r\n        require(isPermission(CONVERT_WT_SIG), \"Converting to CUSD not supported by token\");\r\n        removeUserPermission(_who, CONVERT_WT_SIG);\r\n        super._setBlacklistedUser(_who);\r\n    }\r\n\r\n    function _setNonlistedUser(address _who) internal {\r\n        require(isPermission(CONVERT_WT_SIG), \"Converting to CUSD not supported by token\");\r\n        removeUserPermission(_who, CONVERT_WT_SIG);\r\n        super._setNonlistedUser(_who);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n* @title WhitelistedTokenProxy\r\n* @notice This contract IS a WhitelistedToken. All calls to the WhitelistedToken contract will\r\n* be routed through this proxy, since this proxy contract is the owner of the\r\n* storage contracts.\r\n*/\r\ncontract WhitelistedTokenProxy is PermissionedTokenProxy {\r\n    address public cusdAddress;\r\n\r\n\r\n    constructor(address _implementation, \r\n                address _regulator, \r\n                address _cusd) public PermissionedTokenProxy(_implementation, _regulator) {\r\n        // base class override\r\n        regulator = WhitelistedTokenRegulator(_regulator);\r\n\r\n        cusdAddress = _cusd;\r\n\r\n    }\r\n}\r\n\r\n/**\r\n*\r\n* @dev WhitelistedTokenProxyFactory creates new WhitelistedTokenProxy contracts with new data storage sheets, properly configured\r\n* with ownership, and the proxy logic implementations are based on a user-specified WhitelistedTokenProxy. \r\n*\r\n**/\r\ncontract WhitelistedTokenProxyFactory {\r\n    // Parameters\r\n    address[] public tokens;\r\n\r\n    // Events\r\n    event CreatedWhitelistedTokenProxy(address newToken, uint256 index);\r\n\r\n    /**\r\n    *\r\n    * @dev generate a new proxy address that users can cast to a PermissionedToken or PermissionedTokenProxy. The\r\n    * proxy has empty data storage contracts connected to it and it is set with an initial logic contract\r\n    * to which it will delegate functionality\r\n    * @param regulator the address of the initial regulator contract that regulates the proxy\r\n    * @param tokenImplementation the address of the initial PT token implementation\r\n    *\r\n    **/\r\n    function createToken(address tokenImplementation, address cusdAddress, address regulator) public {\r\n        \r\n        address proxy = address(new WhitelistedTokenProxy(tokenImplementation, regulator, cusdAddress));\r\n\r\n        // The function caller should own the proxy contract\r\n        WhitelistedTokenProxy(proxy).transferOwnership(msg.sender);\r\n\r\n        tokens.push(proxy);\r\n        emit CreatedWhitelistedTokenProxy(proxy, getCount()-1);\r\n    }\r\n\r\n    // Return number of token proxy contracts created so far\r\n    function getCount() public view returns (uint256) {\r\n        return tokens.length;\r\n    }\r\n\r\n    // Return the i'th created token\r\n    function getToken(uint256 i) public view returns(address) {\r\n        require((i < tokens.length) && (i >= 0), \"Invalid index\");\r\n        return tokens[i];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenImplementation\",\"type\":\"address\"},{\"name\":\"cusdAddress\",\"type\":\"address\"},{\"name\":\"regulator\",\"type\":\"address\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CreatedWhitelistedTokenProxy\",\"type\":\"event\"}]","ContractName":"WhitelistedTokenProxyFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3e9acdc34551327b4aa7803e215908c9b4026e40c591889f5991095ca2f3546a"}]}