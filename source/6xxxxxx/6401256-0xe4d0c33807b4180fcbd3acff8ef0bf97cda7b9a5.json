{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Base\r\n{\r\n    uint8 constant HEROLEVEL_MIN = 1;\r\n    uint8 constant HEROLEVEL_MAX = 5;\r\n\r\n    uint8 constant LIMITCHIP_MINLEVEL = 3;\r\n    uint constant PARTWEIGHT_NORMAL = 100;\r\n    uint constant PARTWEIGHT_LIMIT = 40;\r\n\r\n    address creator;\r\n\r\n    constructor() public\r\n    {\r\n        creator = msg.sender;\r\n    }\r\n\r\n    modifier MasterAble()\r\n    {\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n    function IsLimitPart(uint8 level, uint part) internal pure returns(bool)\r\n    {\r\n        if (level < LIMITCHIP_MINLEVEL) return false;\r\n        if (part < GetPartNum(level)) return false;\r\n        return true;\r\n    }\r\n\r\n    function GetPartWeight(uint8 level, uint part) internal pure returns(uint)\r\n    {\r\n        if (IsLimitPart(level, part)) return PARTWEIGHT_LIMIT;\r\n        return PARTWEIGHT_NORMAL;\r\n    }\r\n    \r\n    function GetPartNum(uint8 level) internal pure returns(uint)\r\n    {\r\n        if (level <= 2) return 3;\r\n        else if (level <= 4) return 4;\r\n        return 5;\r\n    }\r\n\r\n}\r\n\r\ncontract BasicTime\r\n{\r\n    uint constant DAY_SECONDS = 60 * 60 * 24;\r\n\r\n    function GetDayCount(uint timestamp) pure internal returns(uint)\r\n    {\r\n        return timestamp/DAY_SECONDS;\r\n    }\r\n\r\n    function GetExpireTime(uint timestamp, uint dayCnt) pure internal returns(uint)\r\n    {\r\n        uint dayEnd = GetDayCount(timestamp) + dayCnt;\r\n        return dayEnd * DAY_SECONDS;\r\n    }\r\n\r\n}\r\n\r\ncontract BasicAuth is Base\r\n{\r\n\r\n    address master;\r\n    mapping(address => bool) auth_list;\r\n\r\n    function InitMaster(address acc) internal\r\n    {\r\n        require(address(0) != acc);\r\n        master = acc;\r\n    }\r\n\r\n    modifier MasterAble()\r\n    {\r\n        require(msg.sender == creator || msg.sender == master);\r\n        _;\r\n    }\r\n\r\n    modifier OwnerAble(address acc)\r\n    {\r\n        require(acc == tx.origin);\r\n        _;\r\n    }\r\n\r\n    modifier AuthAble()\r\n    {\r\n        require(auth_list[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function CanHandleAuth(address from) internal view returns(bool)\r\n    {\r\n        return from == creator || from == master;\r\n    }\r\n    \r\n    function SetAuth(address target) external\r\n    {\r\n        require(CanHandleAuth(tx.origin) || CanHandleAuth(msg.sender));\r\n        auth_list[target] = true;\r\n    }\r\n\r\n    function ClearAuth(address target) external\r\n    {\r\n        require(CanHandleAuth(tx.origin) || CanHandleAuth(msg.sender));\r\n        delete auth_list[target];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract MainBase is Base \r\n{\r\n    modifier ValidLevel(uint8 level)\r\n    {\r\n        require(level<=HEROLEVEL_MAX && level>=HEROLEVEL_MIN);\r\n        _;\r\n    }\r\n\r\n    modifier ValidParts(uint8 level, uint32[] parts)\r\n    {\r\n        require(GetPartNum(level) == parts.length);\r\n        _;\r\n    }\r\n\r\n    modifier ValidPart(uint8 level, uint part)\r\n    {\r\n        require(part > 0);\r\n        require(GetPartNum(level) >= part);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nlibrary IndexList\r\n{\r\n    function insert(uint32[] storage self, uint32 index, uint pos) external\r\n    {\r\n        require(self.length >= pos);\r\n        self.length++;\r\n        for (uint i=self.length; i>pos; i++)\r\n        {\r\n            self[i+1] = self[i];\r\n        }\r\n        self[pos] = index;\r\n    }\r\n\r\n    function remove(uint32[] storage self, uint32 index) external returns(bool)\r\n    {\r\n        return remove(self,index,0);\r\n    }\r\n\r\n    function remove(uint32[] storage self, uint32 index, uint startPos) public returns(bool)\r\n    {\r\n        for (uint i=startPos; i<self.length; i++)\r\n        {\r\n            if (self[i] != index) continue;\r\n            for (uint j=i; j<self.length-1; j++)\r\n            {\r\n                self[j] = self[j+1];\r\n            }\r\n            delete self[self.length-1];\r\n            self.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\nlibrary ItemList {\r\n\r\n    using IndexList for uint32[];\r\n    \r\n    struct Data {\r\n        uint32[] m_List;\r\n        mapping(uint32 => uint) m_Maps;\r\n    }\r\n\r\n    function _insert(Data storage self, uint32 key, uint val) internal\r\n    {\r\n        self.m_List.push(key);\r\n        self.m_Maps[key] = val;\r\n    }\r\n\r\n    function _delete(Data storage self, uint32 key) internal\r\n    {\r\n        self.m_List.remove(key);\r\n        delete self.m_Maps[key];\r\n    }\r\n\r\n    function set(Data storage self, uint32 key, uint num) public\r\n    {\r\n        if (!has(self,key)) {\r\n            if (num == 0) return;\r\n            _insert(self,key,num);\r\n        }\r\n        else if (num == 0) {\r\n            _delete(self,key);\r\n        } \r\n        else {\r\n            uint old = self.m_Maps[key];\r\n            if (old == num) return;\r\n            self.m_Maps[key] = num;\r\n        }\r\n    }\r\n\r\n    function add(Data storage self, uint32 key, uint num) external\r\n    {\r\n        uint iOld = get(self,key);\r\n        uint iNow = iOld+num;\r\n        require(iNow >= iOld);\r\n        set(self,key,iNow);\r\n    }\r\n\r\n    function sub(Data storage self, uint32 key, uint num) external\r\n    {\r\n        uint iOld = get(self,key);\r\n        require(iOld >= num);\r\n        set(self,key,iOld-num);\r\n    }\r\n\r\n    function has(Data storage self, uint32 key) public view returns(bool)\r\n    {\r\n        return self.m_Maps[key] > 0;\r\n    }\r\n\r\n    function get(Data storage self, uint32 key) public view returns(uint)\r\n    {\r\n        return self.m_Maps[key];\r\n    }\r\n\r\n    function list(Data storage self) view external returns(uint32[],uint[])\r\n    {\r\n        uint len = self.m_List.length;\r\n        uint[] memory values = new uint[](len);\r\n        for (uint i=0; i<len; i++)\r\n        {\r\n            uint32 key = self.m_List[i];\r\n            values[i] = self.m_Maps[key];\r\n        }\r\n        return (self.m_List,values);\r\n    }\r\n\r\n    function isEmpty(Data storage self) view external returns(bool)\r\n    {\r\n        return self.m_List.length == 0;\r\n    }\r\n\r\n    function keys(Data storage self) view external returns(uint32[])\r\n    {\r\n        return self.m_List;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract MainCard is BasicAuth,MainBase\r\n{\r\n    struct Card {\r\n        uint32 m_Index;\r\n        uint32 m_Duration;\r\n        uint8 m_Level;\r\n        uint16 m_DP;  //DynamicProfit\r\n        uint16 m_DPK; //K is coefficient\r\n        uint16 m_SP;  //StaticProfit\r\n        uint16 m_IP;  //ImmediateProfit\r\n        uint32[] m_Parts;\r\n    }\r\n\r\n    struct CardLib {\r\n        uint32[] m_List;\r\n        mapping(uint32 => Card) m_Lib;\r\n    }\r\n\r\n    CardLib g_CardLib;\r\n\r\n    function AddNewCard(uint32 iCard, uint32 duration, uint8 level, uint16 dp, uint16 dpk, uint16 sp, uint16 ip, uint32[] parts) external MasterAble ValidLevel(level) ValidParts(level,parts)\r\n    {\r\n        require(!CardExists(iCard));\r\n        g_CardLib.m_List.push(iCard);\r\n        g_CardLib.m_Lib[iCard] = Card({\r\n            m_Index   : iCard,\r\n            m_Duration: duration,\r\n            m_Level   : level,\r\n            m_DP      : dp,\r\n            m_DPK     : dpk,\r\n            m_SP      : sp,\r\n            m_IP      : ip,\r\n            m_Parts   : parts\r\n        });\r\n    }\r\n\r\n    function CardExists(uint32 iCard) public view returns(bool)\r\n    {\r\n        Card storage obj = g_CardLib.m_Lib[iCard];\r\n        return obj.m_Index == iCard;\r\n    }\r\n\r\n    function GetCard(uint32 iCard) internal view returns(Card storage)\r\n    {\r\n        return g_CardLib.m_Lib[iCard];\r\n    }\r\n\r\n    function GetCardInfo(uint32 iCard) external view returns(uint32, uint32, uint8, uint16, uint16, uint16, uint16, uint32[])\r\n    {\r\n        Card storage obj = GetCard(iCard);\r\n        return (obj.m_Index, obj.m_Duration, obj.m_Level, obj.m_DP, obj.m_DPK, obj.m_SP, obj.m_IP, obj.m_Parts);\r\n    }\r\n\r\n    function GetExistsCardList() external view returns(uint32[])\r\n    {\r\n        return g_CardLib.m_List;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract MainChip is BasicAuth,MainBase\r\n{\r\n    using IndexList for uint32[];\r\n\r\n    struct Chip\r\n    {\r\n        uint8 m_Level;\r\n        uint8 m_LimitNum;\r\n        uint8 m_Part;\r\n        uint32 m_Index;\r\n        uint256 m_UsedNum;\r\n    }\r\n\r\n    struct PartManager\r\n    {\r\n        uint32[] m_IndexList;   //index list, player can obtain\r\n        uint32[] m_UnableList;  //player can't obtain\r\n    }\r\n\r\n    struct ChipLib\r\n    {\r\n        uint32[] m_List;\r\n        mapping(uint32 => Chip) m_Lib;\r\n        mapping(uint32 => uint[]) m_TempList;\r\n        mapping(uint8 => mapping(uint => PartManager)) m_PartMap;//level -> level list\r\n    }\r\n\r\n    ChipLib g_ChipLib;\r\n\r\n    function AddNewChip(uint32 iChip, uint8 lv, uint8 limit, uint8 part) external MasterAble ValidLevel(lv) ValidPart(lv,part)\r\n    {\r\n        require(!ChipExists(iChip));\r\n        g_ChipLib.m_List.push(iChip);\r\n        g_ChipLib.m_Lib[iChip] = Chip({\r\n            m_Index       : iChip,\r\n            m_Level       : lv,\r\n            m_LimitNum    : limit,\r\n            m_Part        : part,\r\n            m_UsedNum     : 0\r\n        });\r\n        PartManager storage pm = GetPartManager(lv,part);\r\n        pm.m_IndexList.push(iChip);\r\n    }\r\n\r\n    function GetChip(uint32 iChip) internal view returns(Chip storage)\r\n    {\r\n        return g_ChipLib.m_Lib[iChip];\r\n    }\r\n\r\n    function GetPartManager(uint8 level, uint iPart) internal view returns(PartManager storage)\r\n    {\r\n        return g_ChipLib.m_PartMap[level][iPart];\r\n    }\r\n\r\n    function ChipExists(uint32 iChip) public view returns(bool)\r\n    {\r\n        Chip storage obj = GetChip(iChip);\r\n        return obj.m_Index == iChip;\r\n    }\r\n\r\n    function GetChipUsedNum(uint32 iChip) internal view returns(uint)\r\n    {\r\n        Chip storage obj = GetChip(iChip);\r\n        uint[] memory tempList = g_ChipLib.m_TempList[iChip];\r\n        uint num = tempList.length;\r\n        for (uint i=num; i>0; i--)\r\n        {\r\n            if(tempList[i-1]<=now) {\r\n                num -= i;\r\n                break;\r\n            }\r\n        }\r\n        return obj.m_UsedNum + num;\r\n    }\r\n\r\n    function CanObtainChip(uint32 iChip) internal view returns(bool)\r\n    {\r\n        Chip storage obj = GetChip(iChip);\r\n        if (obj.m_LimitNum == 0) return true;\r\n        if (GetChipUsedNum(iChip) < obj.m_LimitNum) return true;\r\n        return false;\r\n    }\r\n\r\n    function CostChip(uint32 iChip) internal\r\n    {\r\n        BeforeChipCost(iChip);\r\n        Chip storage obj = GetChip(iChip);\r\n        obj.m_UsedNum--;\r\n    }\r\n\r\n    function ObtainChip(uint32 iChip) internal\r\n    {\r\n        BeforeChipObtain(iChip);\r\n        Chip storage obj = GetChip(iChip);\r\n        obj.m_UsedNum++;\r\n    }\r\n\r\n    function BeforeChipObtain(uint32 iChip) internal\r\n    {\r\n        Chip storage obj = GetChip(iChip);\r\n        if (obj.m_LimitNum == 0) return;\r\n        uint usedNum = GetChipUsedNum(iChip);\r\n        require(obj.m_LimitNum >= usedNum+1);\r\n        if (obj.m_LimitNum == usedNum+1) {\r\n            PartManager storage pm = GetPartManager(obj.m_Level,obj.m_Part);\r\n            if (pm.m_IndexList.remove(iChip)){\r\n                pm.m_UnableList.push(iChip);\r\n            }\r\n        }\r\n    }\r\n\r\n    function BeforeChipCost(uint32 iChip) internal\r\n    {\r\n        Chip storage obj = GetChip(iChip);\r\n        if (obj.m_LimitNum == 0) return;\r\n        uint usedNum = GetChipUsedNum(iChip);\r\n        require(obj.m_LimitNum >= usedNum);\r\n        if (obj.m_LimitNum == usedNum) {\r\n            PartManager storage pm = GetPartManager(obj.m_Level,obj.m_Part);\r\n            if (pm.m_UnableList.remove(iChip)) {\r\n                pm.m_IndexList.push(iChip);\r\n            }\r\n        }\r\n    }\r\n\r\n    function AddChipTempTime(uint32 iChip, uint expireTime) internal\r\n    {\r\n        uint[] storage list = g_ChipLib.m_TempList[iChip];\r\n        require(list.length==0 || expireTime>=list[list.length-1]);\r\n        BeforeChipObtain(iChip);\r\n        list.push(expireTime);\r\n    }\r\n\r\n    function RefreshChipUnableList(uint8 level) internal\r\n    {\r\n        uint partNum = GetPartNum(level);\r\n        for (uint iPart=1; iPart<=partNum; iPart++)\r\n        {\r\n            PartManager storage pm = GetPartManager(level,iPart);\r\n            for (uint i=pm.m_UnableList.length; i>0; i--)\r\n            {\r\n                uint32 iChip = pm.m_UnableList[i-1];\r\n                if (CanObtainChip(iChip)) {\r\n                    pm.m_IndexList.push(iChip);\r\n                    pm.m_UnableList.remove(iChip,i-1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function GenChipByWeight(uint random, uint8 level, uint[] extWeight) internal view returns(uint32)\r\n    {\r\n        uint partNum = GetPartNum(level);\r\n        uint allWeight;\r\n        uint[] memory newWeight = new uint[](partNum+1);\r\n        uint[] memory realWeight = new uint[](partNum+1);\r\n        for (uint iPart=1; iPart<=partNum; iPart++)\r\n        {\r\n            PartManager storage pm = GetPartManager(level,iPart);\r\n            uint curWeight = extWeight[iPart-1]+GetPartWeight(level,iPart);\r\n            allWeight += pm.m_IndexList.length*curWeight;\r\n            newWeight[iPart] = allWeight;\r\n            realWeight[iPart] = curWeight;\r\n        }\r\n\r\n        uint weight = random % allWeight;\r\n        for (iPart=1; iPart<=partNum; iPart++)\r\n        {\r\n            if (weight >= newWeight[iPart]) continue;\r\n            pm = GetPartManager(level,iPart);\r\n            uint idx = (weight-newWeight[iPart-1])/realWeight[iPart];\r\n            return pm.m_IndexList[idx];\r\n        }\r\n    }\r\n\r\n    function GetChipInfo(uint32 iChip) external view returns(uint32, uint8, uint8, uint, uint8, uint)\r\n    {\r\n        Chip storage obj = GetChip(iChip);\r\n        return (obj.m_Index, obj.m_Level, obj.m_LimitNum, GetPartWeight(obj.m_Level,obj.m_Part), obj.m_Part, GetChipUsedNum(iChip));\r\n    }\r\n\r\n    function GetExistsChipList() external view returns(uint32[])\r\n    {\r\n        return g_ChipLib.m_List;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract MainBonus is BasicTime,BasicAuth,MainBase,MainCard\r\n{\r\n    uint constant BASERATIO = 10000;\r\n\r\n    struct PlayerBonus\r\n    {\r\n        uint m_DrawedDay;\r\n        uint16 m_DDPermanent;// drawed day permanent\r\n        mapping(uint => uint16) m_DayStatic;\r\n        mapping(uint => uint16) m_DayPermanent;\r\n        mapping(uint => uint32[]) m_DayDynamic;\r\n    }\r\n\r\n    struct DayRatio\r\n    {\r\n        uint16 m_Static;\r\n        uint16 m_Permanent;\r\n        uint32[] m_DynamicCard;\r\n        mapping(uint32 => uint) m_CardNum;\r\n    }\r\n\r\n    struct BonusData\r\n    {\r\n        uint m_RewardBonus;//bonus pool,waiting for withdraw\r\n        uint m_RecordDay;// recordday\r\n        uint m_RecordBonus;//recordday bonus , to show\r\n        uint m_RecordPR;// recordday permanent ratio\r\n        mapping(uint => DayRatio) m_DayRatio;\r\n        mapping(uint => uint) m_DayBonus;// day final bonus\r\n        mapping(address => PlayerBonus) m_PlayerBonus;\r\n    }\r\n\r\n    BonusData g_Bonus;\r\n\r\n    constructor() public\r\n    {\r\n        g_Bonus.m_RecordDay = GetDayCount(now);\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n    function NeedRefresh(uint dayNo) internal view returns(bool)\r\n    {\r\n        if (g_Bonus.m_RecordBonus == 0) return false;\r\n        if (g_Bonus.m_RecordDay == dayNo) return false;\r\n        return true;\r\n    }\r\n\r\n    function PlayerNeedRefresh(address acc, uint dayNo) internal view returns(bool)\r\n    {\r\n        if (g_Bonus.m_RecordBonus == 0) return false;\r\n        PlayerBonus storage pb = g_Bonus.m_PlayerBonus[acc];\r\n        if (pb.m_DrawedDay == dayNo) return false;\r\n        return true;\r\n    }\r\n\r\n    function GetDynamicRatio(uint dayNo) internal view returns(uint tempRatio)\r\n    {\r\n        DayRatio storage dr = g_Bonus.m_DayRatio[dayNo];\r\n        for (uint i=0; i<dr.m_DynamicCard.length; i++)\r\n        {\r\n            uint32 iCard = dr.m_DynamicCard[i];\r\n            uint num = dr.m_CardNum[iCard];\r\n            Card storage oCard = GetCard(iCard);\r\n            tempRatio += num*oCard.m_DP*oCard.m_DPK/(oCard.m_DPK+num);\r\n        }\r\n    }\r\n\r\n    function GenDayRatio(uint dayNo) internal view returns(uint iDR)\r\n    {\r\n        DayRatio storage dr = g_Bonus.m_DayRatio[dayNo];\r\n        iDR += dr.m_Permanent;\r\n        iDR += dr.m_Static;\r\n        iDR += GetDynamicRatio(dayNo);\r\n    }\r\n\r\n    function GetDynamicCardNum(uint32 iCard, uint dayNo) internal view returns(uint num)\r\n    {\r\n        DayRatio storage dr = g_Bonus.m_DayRatio[dayNo];\r\n        num = dr.m_CardNum[iCard];\r\n    }\r\n\r\n    function GetPlayerDynamicRatio(address acc, uint dayNo) internal view returns(uint tempRatio)\r\n    {\r\n        PlayerBonus storage pb = g_Bonus.m_PlayerBonus[acc];\r\n        DayRatio storage dr = g_Bonus.m_DayRatio[dayNo];\r\n        uint32[] storage cards = pb.m_DayDynamic[dayNo];\r\n        for (uint idx=0; idx<cards.length; idx++)\r\n        {\r\n            uint32 iCard = cards[idx];\r\n            uint num = dr.m_CardNum[iCard];\r\n            Card storage oCard = GetCard(iCard);\r\n            tempRatio += oCard.m_DP*oCard.m_DPK/(oCard.m_DPK+num);\r\n        }\r\n    }\r\n\r\n    function GenPlayerRatio(address acc, uint dayNo) internal view returns(uint tempRatio)\r\n    {\r\n        PlayerBonus storage pb = g_Bonus.m_PlayerBonus[acc];\r\n        tempRatio += pb.m_DayPermanent[dayNo];\r\n        tempRatio += pb.m_DayStatic[dayNo];\r\n        tempRatio += GetPlayerDynamicRatio(acc,dayNo);\r\n    }\r\n\r\n    function RefreshDayBonus() internal\r\n    {\r\n        uint todayNo = GetDayCount(now);\r\n        if (!NeedRefresh(todayNo)) return;\r\n\r\n        uint tempBonus = g_Bonus.m_RecordBonus;\r\n        uint tempPR = g_Bonus.m_RecordPR;\r\n        uint tempRatio;\r\n        for (uint dayNo=g_Bonus.m_RecordDay; dayNo<todayNo; dayNo++)\r\n        {\r\n            tempRatio = tempPR+GenDayRatio(dayNo);\r\n            if (tempRatio == 0) continue;\r\n            DayRatio storage dr = g_Bonus.m_DayRatio[dayNo];\r\n            tempPR += dr.m_Permanent;\r\n            g_Bonus.m_DayBonus[dayNo] = tempBonus;\r\n            tempBonus -= tempBonus*tempRatio/BASERATIO;\r\n        }\r\n\r\n        g_Bonus.m_RecordPR = tempPR;\r\n        g_Bonus.m_RecordDay = todayNo;\r\n        g_Bonus.m_RecordBonus = tempBonus;\r\n    }\r\n\r\n    function QueryPlayerBonus(address acc, uint todayNo) view internal returns(uint accBonus,uint16 accPR)\r\n    {\r\n        PlayerBonus storage pb = g_Bonus.m_PlayerBonus[acc];\r\n        accPR = pb.m_DDPermanent;\r\n\r\n        if (!PlayerNeedRefresh(acc, todayNo)) return;\r\n\r\n        uint tempBonus = g_Bonus.m_RecordBonus;\r\n        uint tempPR = g_Bonus.m_RecordPR;\r\n        uint dayNo = pb.m_DrawedDay;\r\n        if (dayNo == 0) return;\r\n        for (; dayNo<todayNo; dayNo++)\r\n        {\r\n            uint tempRatio = tempPR+GenDayRatio(dayNo);\r\n            if (tempRatio == 0) continue;\r\n\r\n            uint accRatio = accPR+GenPlayerRatio(acc,dayNo);\r\n            accPR += pb.m_DayPermanent[dayNo];\r\n\r\n            DayRatio storage dr = g_Bonus.m_DayRatio[dayNo];\r\n            if (dayNo >= g_Bonus.m_RecordDay) {\r\n                tempPR += dr.m_Permanent;\r\n                accBonus += tempBonus*accRatio/BASERATIO;\r\n                tempBonus -= tempBonus*tempRatio/BASERATIO;\r\n            }\r\n            else {\r\n                if (accRatio == 0) continue;\r\n                accBonus += g_Bonus.m_DayBonus[dayNo]*accRatio/BASERATIO;\r\n            }\r\n        }\r\n    }\r\n\r\n    function GetDynamicCardAmount(uint32 iCard, uint timestamp) external view returns(uint num)\r\n    {\r\n        num = GetDynamicCardNum(iCard, GetDayCount(timestamp));\r\n    }\r\n\r\n    function AddDynamicProfit(address acc, uint32 iCard, uint duration) internal\r\n    {\r\n        RefreshDayBonus();\r\n        uint todayNo = GetDayCount(now);\r\n        PlayerBonus storage pb = g_Bonus.m_PlayerBonus[acc];\r\n        if (pb.m_DrawedDay == 0) pb.m_DrawedDay = todayNo;\r\n        for (uint dayNo=todayNo; dayNo<todayNo+duration; dayNo++)\r\n        {\r\n            pb.m_DayDynamic[dayNo].push(iCard);\r\n            DayRatio storage dr= g_Bonus.m_DayRatio[dayNo];\r\n            if (dr.m_CardNum[iCard] == 0) {\r\n                dr.m_DynamicCard.push(iCard);\r\n            }\r\n            dr.m_CardNum[iCard]++;\r\n        }\r\n    }\r\n\r\n    function AddStaticProfit(address acc,uint16 ratio,uint duration) internal\r\n    {\r\n        RefreshDayBonus();\r\n        uint todayNo = GetDayCount(now);\r\n        PlayerBonus storage pb = g_Bonus.m_PlayerBonus[acc];\r\n        if (pb.m_DrawedDay == 0) pb.m_DrawedDay = todayNo;\r\n        if (duration == 0) {\r\n            pb.m_DayPermanent[todayNo] += ratio;\r\n            g_Bonus.m_DayRatio[todayNo].m_Permanent += ratio;\r\n        }\r\n        else {\r\n            for (uint dayNo=todayNo; dayNo<todayNo+duration; dayNo++)\r\n            {\r\n                pb.m_DayStatic[dayNo] += ratio;\r\n                g_Bonus.m_DayRatio[dayNo].m_Static += ratio;\r\n            }\r\n        }\r\n    }\r\n\r\n    function ImmediateProfit(address acc, uint ratio) internal\r\n    {\r\n        RefreshDayBonus();\r\n        uint bonus = ratio*g_Bonus.m_RecordBonus/BASERATIO;\r\n        g_Bonus.m_RecordBonus -= bonus;\r\n        g_Bonus.m_RewardBonus -= bonus;\r\n        if (bonus == 0) return\r\n        acc.transfer(bonus);\r\n    }\r\n\r\n\r\n    function ProfitByCard(address acc, uint32 iCard) internal\r\n    {\r\n        Card storage oCard = GetCard(iCard);\r\n        if (oCard.m_IP > 0) {\r\n            ImmediateProfit(acc,oCard.m_IP);\r\n        }\r\n        else if (oCard.m_SP > 0) {\r\n            AddStaticProfit(acc,oCard.m_SP,oCard.m_Duration);\r\n        }\r\n        else {\r\n            AddDynamicProfit(acc,iCard,oCard.m_Duration);\r\n        }\r\n    }\r\n\r\n    function QueryBonus() external view returns(uint)\r\n    {\r\n        uint todayNo = GetDayCount(now);\r\n        if (!NeedRefresh(todayNo)) return g_Bonus.m_RecordBonus;\r\n\r\n        uint tempBonus = g_Bonus.m_RecordBonus;\r\n        uint tempPR = g_Bonus.m_RecordPR;\r\n        uint tempRatio;\r\n        for (uint dayNo=g_Bonus.m_RecordDay; dayNo<todayNo; dayNo++)\r\n        {\r\n            tempRatio = tempPR+GenDayRatio(dayNo);\r\n            if (tempRatio == 0) continue;\r\n            DayRatio storage dr = g_Bonus.m_DayRatio[dayNo];\r\n            tempPR += dr.m_Permanent;\r\n            tempBonus -= tempBonus*tempRatio/BASERATIO;\r\n        }\r\n        return tempBonus;\r\n    }\r\n\r\n    function QueryMyBonus(address acc) external view returns(uint bonus)\r\n    {\r\n        (bonus,) = QueryPlayerBonus(acc, GetDayCount(now));\r\n    }\r\n\r\n    function AddBonus(uint bonus) external AuthAble\r\n    {\r\n        RefreshDayBonus();\r\n        g_Bonus.m_RewardBonus += bonus;\r\n        g_Bonus.m_RecordBonus += bonus;\r\n    }\r\n\r\n    function Withdraw(address acc) external\r\n    {\r\n        RefreshDayBonus();\r\n        PlayerBonus storage pb = g_Bonus.m_PlayerBonus[acc];\r\n        uint bonus;\r\n        uint todayNo = GetDayCount(now);\r\n        (bonus, pb.m_DDPermanent) = QueryPlayerBonus(acc, todayNo);\r\n        require(bonus > 0);\r\n        pb.m_DrawedDay = todayNo;\r\n        acc.transfer(bonus);\r\n        g_Bonus.m_RewardBonus -= bonus;\r\n    }\r\n\r\n    function MasterWithdraw() external\r\n    {\r\n        uint bonus = address(this).balance-g_Bonus.m_RewardBonus;\r\n        require(bonus > 0);\r\n        master.transfer(bonus);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract MainBag is BasicTime,BasicAuth,MainChip,MainCard\r\n{\r\n    using ItemList for ItemList.Data;\r\n\r\n    struct Bag\r\n    {\r\n        ItemList.Data m_Stuff;\r\n        ItemList.Data m_TempStuff;\r\n        ItemList.Data m_Chips;\r\n        ItemList.Data m_TempCards; // temporary cards\r\n        ItemList.Data m_PermCards; // permanent cards\r\n    }\r\n\r\n    mapping(address => Bag) g_BagList;\r\n\r\n    function GainStuff(address acc, uint32 iStuff, uint iNum) external AuthAble OwnerAble(acc)\r\n    {\r\n        Bag storage obj = g_BagList[acc];\r\n        obj.m_Stuff.add(iStuff,iNum);\r\n    }\r\n\r\n    function CostStuff(address acc, uint32 iStuff, uint iNum) external AuthAble OwnerAble(acc)\r\n    {\r\n        Bag storage obj = g_BagList[acc];\r\n        obj.m_Stuff.sub(iStuff,iNum);\r\n    }\r\n\r\n    function GetStuffNum(address acc, uint32 iStuff) view external returns(uint)\r\n    {\r\n        Bag storage obj = g_BagList[acc];\r\n        return obj.m_Stuff.get(iStuff);\r\n    }\r\n\r\n    function GetStuffList(address acc) external view returns(uint32[],uint[])\r\n    {\r\n        Bag storage obj = g_BagList[acc];\r\n        return obj.m_Stuff.list();\r\n    }\r\n\r\n    function GainTempStuff(address acc, uint32 iStuff, uint dayCnt) external AuthAble OwnerAble(acc)\r\n    {\r\n        Bag storage obj = g_BagList[acc];\r\n        require(obj.m_TempStuff.get(iStuff) <= now);\r\n        obj.m_TempStuff.set(iStuff,now+dayCnt*DAY_SECONDS);\r\n    }\r\n\r\n    function GetTempStuffExpire(address acc, uint32 iStuff) external view returns(uint expire)\r\n    {\r\n        Bag storage obj = g_BagList[acc];\r\n        expire = obj.m_TempStuff.get(iStuff);\r\n    }\r\n\r\n    function GetTempStuffList(address acc) external view returns(uint32[],uint[])\r\n    {\r\n        Bag storage obj = g_BagList[acc];\r\n        return obj.m_TempStuff.list();\r\n    }\r\n\r\n    function GainChip(address acc, uint32 iChip,bool bGenerated) external AuthAble OwnerAble(acc)\r\n    {\r\n        if (!bGenerated) {\r\n            require(CanObtainChip(iChip));\r\n            ObtainChip(iChip);\r\n        }\r\n        Bag storage obj = g_BagList[acc];\r\n        obj.m_Chips.add(iChip,1);\r\n    }\r\n\r\n    function CostChip(address acc, uint32 iChip) external AuthAble OwnerAble(acc)\r\n    {\r\n        Bag storage obj = g_BagList[acc];\r\n        obj.m_Chips.sub(iChip,1);\r\n        CostChip(iChip);\r\n    }\r\n\r\n    function GetChipNum(address acc, uint32 iChip) external view returns(uint)\r\n    {\r\n        Bag storage obj = g_BagList[acc];\r\n        return obj.m_Chips.get(iChip);\r\n    }\r\n\r\n    function GetChipList(address acc) external view returns(uint32[],uint[])\r\n    {\r\n        Bag storage obj = g_BagList[acc];\r\n        return obj.m_Chips.list();\r\n    }\r\n\r\n    function GainCard2(address acc, uint32 iCard) internal\r\n    {\r\n        Card storage oCard = GetCard(iCard);\r\n        if (oCard.m_IP > 0) return;\r\n        uint i;\r\n        uint32 iChip;\r\n        Bag storage obj = g_BagList[acc];\r\n        if (oCard.m_Duration > 0) {\r\n            // temporary\r\n            uint expireTime = GetExpireTime(now,oCard.m_Duration);\r\n            for (i=0; i<oCard.m_Parts.length; i++)\r\n            {\r\n                iChip = oCard.m_Parts[i];\r\n                AddChipTempTime(iChip,expireTime);\r\n            }\r\n            obj.m_TempCards.set(iCard,expireTime);\r\n        }\r\n        else {\r\n            // permanent\r\n            for (i=0; i<oCard.m_Parts.length; i++)\r\n            {\r\n                iChip = oCard.m_Parts[i];\r\n                ObtainChip(iChip);\r\n            }\r\n            obj.m_PermCards.set(iCard,1);\r\n        }\r\n    }\r\n\r\n    function HasCard(address acc, uint32 iCard) public view returns(bool)\r\n    {\r\n        Bag storage obj = g_BagList[acc];\r\n        if (obj.m_TempCards.get(iCard) > now) return true;\r\n        if (obj.m_PermCards.has(iCard)) return true;\r\n        return false;\r\n    }\r\n\r\n    function GetCardList(address acc) external view returns(uint32[] tempCards, uint[] cardsTime, uint32[] permCards)\r\n    {\r\n        Bag storage obj = g_BagList[acc];\r\n        (tempCards,cardsTime) = obj.m_TempCards.list();\r\n        permCards = obj.m_PermCards.keys();\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract Main is MainChip,MainCard,MainBag,MainBonus\r\n{\r\n\r\n    constructor(address Master) public\r\n    {\r\n        InitMaster(Master);\r\n    }\r\n\r\n    function GainCard(address acc, uint32 iCard) external\r\n    {\r\n        require(CardExists(iCard) && !HasCard(acc,iCard));\r\n        GainCard2(acc,iCard);\r\n        ProfitByCard(acc,iCard);\r\n    }\r\n\r\n    function GetDynamicCardAmountList(address acc) external view returns(uint[] amountList)\r\n    {\r\n        Bag storage oBag = g_BagList[acc];\r\n        uint len = oBag.m_TempCards.m_List.length;\r\n        amountList = new uint[](len);\r\n        for (uint i=0; i<len; i++)\r\n        {\r\n            uint32 iCard = oBag.m_TempCards.m_List[i];\r\n            amountList[i] = GetDynamicCardNum(iCard,GetDayCount(now));\r\n        }\r\n    }\r\n\r\n    function GenChipByRandomWeight(uint random, uint8 level, uint[] extWeight) external AuthAble returns(uint32 iChip)\r\n    {\r\n        RefreshChipUnableList(level);\r\n        iChip = GenChipByWeight(random,level,extWeight);\r\n        ObtainChip(iChip);\r\n    }\r\n\r\n    function CheckGenChip(uint32 iChip) external view returns(bool)\r\n    {\r\n        return CanObtainChip(iChip);\r\n    }\r\n\r\n    function GenChip(uint32 iChip) external AuthAble\r\n    {\r\n        require(CanObtainChip(iChip));\r\n        ObtainChip(iChip);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"QueryBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetExistsCardList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iStuff\",\"type\":\"uint32\"},{\"name\":\"iNum\",\"type\":\"uint256\"}],\"name\":\"GainStuff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"iCard\",\"type\":\"uint32\"}],\"name\":\"CardExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iChip\",\"type\":\"uint32\"},{\"name\":\"bGenerated\",\"type\":\"bool\"}],\"name\":\"GainChip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"iCard\",\"type\":\"uint32\"}],\"name\":\"GetCardInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iCard\",\"type\":\"uint32\"}],\"name\":\"HasCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"iCard\",\"type\":\"uint32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GetDynamicCardAmount\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"iChip\",\"type\":\"uint32\"}],\"name\":\"ChipExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iStuff\",\"type\":\"uint32\"}],\"name\":\"GetTempStuffExpire\",\"outputs\":[{\"name\":\"expire\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"QueryMyBonus\",\"outputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"iCard\",\"type\":\"uint32\"},{\"name\":\"duration\",\"type\":\"uint32\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"dp\",\"type\":\"uint16\"},{\"name\":\"dpk\",\"type\":\"uint16\"},{\"name\":\"sp\",\"type\":\"uint16\"},{\"name\":\"ip\",\"type\":\"uint16\"},{\"name\":\"parts\",\"type\":\"uint32[]\"}],\"name\":\"AddNewCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iStuff\",\"type\":\"uint32\"},{\"name\":\"dayCnt\",\"type\":\"uint256\"}],\"name\":\"GainTempStuff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iChip\",\"type\":\"uint32\"}],\"name\":\"GetChipNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"AddBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"iChip\",\"type\":\"uint32\"}],\"name\":\"GetChipInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"GetTempStuffList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"GetCardList\",\"outputs\":[{\"name\":\"tempCards\",\"type\":\"uint32[]\"},{\"name\":\"cardsTime\",\"type\":\"uint256[]\"},{\"name\":\"permCards\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iStuff\",\"type\":\"uint32\"},{\"name\":\"iNum\",\"type\":\"uint256\"}],\"name\":\"CostStuff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"MasterWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"GetChipList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iCard\",\"type\":\"uint32\"}],\"name\":\"GainCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iStuff\",\"type\":\"uint32\"}],\"name\":\"GetStuffNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"GetDynamicCardAmountList\",\"outputs\":[{\"name\":\"amountList\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetExistsChipList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iChip\",\"type\":\"uint32\"}],\"name\":\"CostChip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"SetAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ClearAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"random\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"extWeight\",\"type\":\"uint256[]\"}],\"name\":\"GenChipByRandomWeight\",\"outputs\":[{\"name\":\"iChip\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"iChip\",\"type\":\"uint32\"}],\"name\":\"CheckGenChip\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"iChip\",\"type\":\"uint32\"},{\"name\":\"lv\",\"type\":\"uint8\"},{\"name\":\"limit\",\"type\":\"uint8\"},{\"name\":\"part\",\"type\":\"uint8\"}],\"name\":\"AddNewChip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"GetStuffList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"iChip\",\"type\":\"uint32\"}],\"name\":\"GenChip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"Master\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Main","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000035f9610d5c11755bb58313b19dab2929038618ed","Library":"IndexList:b0B67e82e9A4a9ccEB3Da2eCC19a0F4c39F677d6;ItemList:7cBCdcdDE0c605ba01EEf2731E501cD5C784a525","SwarmSource":"bzzr://f50050a93a9647c5a1e138c3d64380cce9c1829608acfb732af228d3647463c0"}]}