{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.22;\r\n/**\r\n * Zigilua token contract\r\n *\r\n * Solidity 0.4.22 compiler\r\n *\r\n * @package   Zigilua\r\n * @author    Roger Sei <https://www.linkedin.com/in/roger-sei/>\r\n * @copyright 2018 Roger Sei\r\n * @license   http://www.gnu.org/licenses/gpl.txt GPL\r\n * @version   Release: GIT: 1\r\n *\r\n * Convention used: PHPCS\r\n */\r\n\r\n/**\r\n * ERC20 interface\r\n *\r\n * https://en.wikipedia.org/wiki/ERC20\r\n */\r\ninterface ERC20\r\n{\r\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function balanceOf(address _owner) external constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n}\r\n\r\n/**\r\n * Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n * Adapted to 0.4.22 solidity version\r\n */\r\ncontract StandardToken is ERC20\r\n{\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        if (!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) {\r\n            revert();\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    function balanceOf(address _owner) public constant returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success)\r\n    {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 supply) \r\n    {\r\n        return totalSupply;\r\n\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * Zigilua contract\r\n *\r\n * @author    Roger Sei\r\n */\r\ncontract Zigilua is StandardToken\r\n{\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    string public version = 'Z1';\r\n    address public zigWallet;\r\n\r\n    uint256 private _usd;\r\n    uint8 private _crrStage;\r\n    uint private _minUSDrequired;\r\n    uint8[] public ZIGS_BY_STAGE = [\r\n                                    1,\r\n                                    1,\r\n                                    3,\r\n                                    5\r\n                                   ];\r\n\r\n\r\n    /**\r\n     * Constructor for Zigilua\r\n     */\r\n    function Zigilua() public\r\n    {\r\n        balances[msg.sender] = 79700000000;\r\n        totalSupply          = 79700000000;\r\n        name                 = \"ZigiLua\";\r\n        decimals             = 0;\r\n        symbol               = \"ZGL\";\r\n        zigWallet            = msg.sender;\r\n\r\n        _crrStage            = 0;\r\n        _minUSDrequired      = 200;\r\n        _usd                 = 50000;\r\n    }\r\n\r\n\r\n    /**\r\n     * Payable fallback\r\n     *\r\n     * @return void\r\n     */\r\n    function () public payable\r\n    {\r\n        buy(msg.value);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Allows to buy zigs (ZGL) from DApps\r\n     *\r\n     * @param wai {uint256} Desired amount, in wei\r\n     *\r\n     * @return {uint256[]} [wai, _usd, amount, owner balance, user balance] Useful for debugging purposes\r\n     */\r\n    function buy(uint256 wai) public payable returns (uint256[5])\r\n    {\r\n        uint256 amount = ((wai * _usd * 10 * ZIGS_BY_STAGE[_crrStage]) / (1e18));\r\n\r\n        require(balances[zigWallet] >= amount);\r\n        require(amount >= (2000 * (1 / ZIGS_BY_STAGE[_crrStage])));\r\n\r\n        balances[zigWallet]  = (balances[zigWallet] - amount);\r\n        balances[msg.sender] = (balances[msg.sender] + amount);\r\n\r\n        emit Transfer(zigWallet, msg.sender, amount);\r\n\r\n        zigWallet.transfer(msg.value);\r\n\r\n        return ([wai, _usd, amount, balances[zigWallet], balances[msg.sender]]);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the owner balance, in zigs\r\n     *\r\n     * @return {uint256} Current owner balance\r\n     */\r\n    function getBalanceFromOwner() public view returns (uint256)\r\n    {\r\n        return balances[zigWallet];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns a balance, in zigs, from a given address, identified by from\r\n     *\r\n     * @param from {address} Any given address\r\n     *\r\n     * @return {uint256} Current user balance\r\n     */\r\n    function getBalanceFrom(address from) public view returns (uint256)\r\n    {\r\n        return balances[from];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the current dollar rate, wihtout decimal\r\n     *\r\n     * @return {uint256} Returns the current dollar rate used to buy zigs\r\n     */\r\n    function getUSD() public view returns (uint256)\r\n    {\r\n        return _usd;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns current ICO stage\r\n     *\r\n     * @return {uint256} \r\n     */\r\n    function getStage() public view returns (uint256)\r\n    {\r\n        return _crrStage;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Defines the ICO stage, allowed to be changed only by Zigilua (owner)\r\n     *\r\n     * @param stage {uint8} Defines the ICO stage\r\n     *\r\n     * @return {bool} True if successful\r\n     */\r\n    function setStage(uint8 stage) public returns (bool)\r\n    {\r\n        require(msg.sender == zigWallet);\r\n\r\n        _crrStage = stage;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Allows Zigilua to set the dollar rate\r\n     *\r\n     * @param usd {uint256} Dollar rate, in ethereum, without decimal\r\n     *\r\n     * @return {bool} True if successful\r\n     */\r\n    function setUSD(uint256 usd) public returns (bool)\r\n    {\r\n        require(msg.sender == zigWallet);\r\n        require(usd > 0);\r\n        _usd = usd;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ZIGS_BY_STAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"usd\",\"type\":\"uint256\"}],\"name\":\"setUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getBalanceFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stage\",\"type\":\"uint8\"}],\"name\":\"setStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wai\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceFromOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Zigilua","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://57d7d0d4ef2b3a0442ae42aef2f705ff991b4a71832e0caeabffd94904236f00"}]}