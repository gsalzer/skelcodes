{"status":"1","message":"OK","result":[{"SourceCode":"// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Lockup.sol\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\ncontract Lockup is Ownable{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 public lockupTime;\r\n\tmapping(address => bool) public lockup_list;\r\n\r\n\tevent UpdateLockup(address indexed owner, uint256 lockup_date);\r\n\r\n\tevent UpdateLockupList(address indexed owner, address indexed user_address, bool flag);\r\n\r\n\tconstructor(uint256 _lockupTime ) public\r\n\t{\r\n\t\tlockupTime = _lockupTime;\r\n\r\n\t\temit UpdateLockup(msg.sender, lockupTime);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function to get lockup date\r\n\t* @return A uint256 that indicates if the operation was successful.\r\n\t*/\r\n\tfunction getLockup()public view returns (uint256){\r\n\t\treturn lockupTime;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function to check token locked date that is reach or not\r\n\t* @return A bool that indicates if the operation was successful.\r\n\t*/\r\n\tfunction isLockup() public view returns(bool){\r\n\t\treturn (now < lockupTime);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function to update token lockup time\r\n\t* @param _newLockUpTime uint256 lockup date\r\n\t* @return A bool that indicates if the operation was successful.\r\n\t*/\r\n\tfunction updateLockup(uint256 _newLockUpTime) onlyOwner public returns(bool){\r\n\r\n\t\tlockupTime = _newLockUpTime;\r\n\r\n\t\temit UpdateLockup(msg.sender, lockupTime);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function get user's lockup status\r\n\t* @param _add address\r\n\t* @return A bool that indicates if the operation was successful.\r\n\t*/\r\n\tfunction inLockupList(address _add)public view returns(bool){\r\n\t\treturn lockup_list[_add];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function update lockup status for purchaser, if user in the lockup list, they can only transfer token after lockup date\r\n\t* @param _add address\r\n\t* @param _flag bool this user's token should be lockup or not\r\n\t* @return A bool that indicates if the operation was successful.\r\n\t*/\r\n\tfunction updateLockupList(address _add, bool _flag)onlyOwner public returns(bool){\r\n\t\tlockup_list[_add] = _flag;\r\n\r\n\t\temit UpdateLockupList(msg.sender, _add, _flag);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ERC223/ERC223Token.sol\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\ncontract ERC223Token is StandardToken{\r\n  function transfer(address to, uint256 value, bytes data) public returns (bool);\r\n  event TransferERC223(address indexed from, address indexed to, uint256 value, bytes data);\r\n}\r\n\r\n// File: contracts/ERC223/ERC223ContractInterface.sol\r\n\r\npragma solidity ^0.4.18;\r\n\r\ncontract ERC223ContractInterface{\r\n  function tokenFallback(address from_, uint256 value_, bytes data_) external;\r\n}\r\n\r\n// File: contracts/CIMCoin.sol\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CIMCoin is ERC223Token, Ownable{\r\n\tusing SafeMath for uint256;\r\n\r\n\tstring public constant name = 'CIMTOKEN';\r\n\tstring public constant symbol = 'CIM';\r\n\tuint8 public constant decimals = 18;\r\n\tuint256 public constant INITIAL_SUPPLY = 25000000000 * (10 ** uint256(decimals));\r\n\tuint256 public constant INITIAL_SALE_SUPPLY = 11250000000 * (10 ** uint256(decimals));\r\n\tuint256 public constant INITIAL_UNSALE_SUPPLY = INITIAL_SUPPLY - INITIAL_SALE_SUPPLY;\r\n\r\n\taddress public owner_wallet;\r\n\taddress public unsale_owner_wallet;\r\n\r\n\tLockup public lockup;\r\n\r\n\t/**\r\n\t* @dev Constructor that gives msg.sender all of existing tokens.\r\n\t*/\r\n\tconstructor(address _sale_owner_wallet, address _unsale_owner_wallet, Lockup _lockup) public {\r\n\t\tlockup = _lockup;\r\n\t\towner_wallet = _sale_owner_wallet;\r\n\t\tunsale_owner_wallet = _unsale_owner_wallet;\r\n\t\ttotalSupply_ = INITIAL_SUPPLY;\r\n\r\n\t\tbalances[owner_wallet] = INITIAL_SALE_SUPPLY;\r\n\t\temit Transfer(0x0, owner_wallet, INITIAL_SALE_SUPPLY);\r\n\r\n\t\tbalances[unsale_owner_wallet] = INITIAL_UNSALE_SUPPLY;\r\n\t\temit Transfer(0x0, unsale_owner_wallet, INITIAL_UNSALE_SUPPLY);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev transfer token for a specified address\r\n\t* @param _to The address to transfer to.\r\n\t* @param _value The amount to be transferred.\r\n\t*/\r\n\tfunction sendTokens(address _to, uint256 _value) onlyOwner public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[owner_wallet]);\r\n\r\n\t\tbytes memory empty;\r\n\t\t\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\tbalances[owner_wallet] = balances[owner_wallet].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\r\n\t    bool isUserAddress = false;\r\n\t    // solium-disable-next-line security/no-inline-assembly\r\n\t    assembly {\r\n\t      isUserAddress := iszero(extcodesize(_to))\r\n\t    }\r\n\r\n\t    if (isUserAddress == false) {\r\n\t      ERC223ContractInterface receiver = ERC223ContractInterface(_to);\r\n\t      receiver.tokenFallback(msg.sender, _value, empty);\r\n\t    }\r\n\r\n\t\temit Transfer(owner_wallet, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev transfer token for a specified address\r\n\t* @param _to The address to transfer to.\r\n\t* @param _value The amount to be transferred.\r\n\t*/\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\t\trequire(_value > 0);\r\n\r\n\t\tbytes memory empty;\r\n\r\n\t\tbool inLockupList = lockup.inLockupList(msg.sender);\r\n\r\n\t\t//if user in the lockup list, they can only transfer token after lockup date\r\n\t\tif(inLockupList){\r\n\t\t\trequire( lockup.isLockup() == false );\r\n\t\t}\r\n\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\r\n\t    bool isUserAddress = false;\r\n\t    // solium-disable-next-line security/no-inline-assembly\r\n\t    assembly {\r\n\t      isUserAddress := iszero(extcodesize(_to))\r\n\t    }\r\n\r\n\t    if (isUserAddress == false) {\r\n\t      ERC223ContractInterface receiver = ERC223ContractInterface(_to);\r\n\t      receiver.tokenFallback(msg.sender, _value, empty);\r\n\t    }\r\n\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev transfer token for a specified address\r\n\t* @param _to The address to transfer to.\r\n\t* @param _value The amount to be transferred.\r\n\t* @param _data The data info.\r\n\t*/\r\n\tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\t\trequire(_value > 0);\r\n\r\n\t\tbool inLockupList = lockup.inLockupList(msg.sender);\r\n\r\n\t\t//if user in the lockup list, they can only transfer token after lockup date\r\n\t\tif(inLockupList){\r\n\t\t\trequire( lockup.isLockup() == false );\r\n\t\t}\r\n\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\r\n\t    bool isUserAddress = false;\r\n\t    // solium-disable-next-line security/no-inline-assembly\r\n\t    assembly {\r\n\t      isUserAddress := iszero(extcodesize(_to))\r\n\t    }\r\n\r\n\t    if (isUserAddress == false) {\r\n\t      ERC223ContractInterface receiver = ERC223ContractInterface(_to);\r\n\t      receiver.tokenFallback(msg.sender, _value, _data);\r\n\t    }\r\n\r\n\t    emit Transfer(msg.sender, _to, _value);\r\n\t\temit TransferERC223(msg.sender, _to, _value, _data);\r\n\t\treturn true;\r\n\t}\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsale_owner_wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_UNSALE_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SALE_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_sale_owner_wallet\",\"type\":\"address\"},{\"name\":\"_unsale_owner_wallet\",\"type\":\"address\"},{\"name\":\"_lockup\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransferERC223\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CIMCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b7712f307efc858d343f678216a15c9f348e8e3e00000000000000000000000096b9f054f7c12008510caba5afe4ee8cf1569d10000000000000000000000000394796dc623702876843fcbea8541eb909b0c688","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://8e505de805bd36a0cd8c6c178c81652f90fa4334700873f36de28723f94c1686"}]}