{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\ncontract CryptocurrencyRaz is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint public numberOfRazzes = 3;\r\n    uint idCounter = 1;\r\n    struct RazInformation\r\n    {\r\n        uint razInstance;\r\n        uint winningBet;\r\n        address winningAddress;\r\n        address[] allLosers;\r\n        uint timestamp;\r\n        uint id;\r\n    }\r\n    \r\n    struct previousBets\r\n    {\r\n        uint timestamp;\r\n        uint[] bets;\r\n    }\r\n    mapping(uint=>mapping(uint=>RazInformation)) public RazInstanceInformation;\r\n    mapping(uint=>mapping(uint=>mapping(address=>previousBets))) public userBetsInEachRazInstance;\r\n    \r\n    mapping(uint=>uint) public runningRazInstance;\r\n   \r\n    mapping(uint=>bool) public razCompletion;\r\n    mapping(uint=>mapping(uint=>address)) public numbersTaken;\r\n    mapping(uint=>uint) public maxBetsForEachRaz;\r\n    mapping(uint=>uint256) public participationFeeForEachRaz;\r\n    mapping(uint=>uint256) public winnerPrizeMoneyForEachRaz;\r\n    mapping(uint=>uint256) public ownerPrizeMoneyForEachRaz;\r\n    mapping(uint=>string) public razName;\r\n    mapping (address=>uint[]) public pastWinnings;\r\n    mapping (address=>uint[]) public pastLosings;\r\n    \r\n    \r\n    uint[] razList;\r\n    uint[] empty;\r\n    \r\n    uint[] winOrLoseArray;\r\n    uint WinOrLoseNumber;\r\n    previousBets aBet;\r\n    address[] losers;\r\n    \r\n    RazInformation information;\r\n    \r\n    event BetPlaced(address gambler, string razName, uint[] bets);\r\n    event BetWon(address gambler, string razName, uint betNum, uint razNumber, uint razInstance);\r\n    event allBetsPlaced(uint[] b);\r\n    uint[] bb;\r\n    \r\n    constructor(address _owner) public \r\n    {\r\n        owner = _owner;\r\n        Setup();\r\n    }\r\n    \r\n    function Setup() internal {\r\n        maxBetsForEachRaz[1] = 10;\r\n        maxBetsForEachRaz[2] = 20;\r\n        maxBetsForEachRaz[3] = 10;\r\n        \r\n        razName[1] = \"Mighty genesis\";\r\n        razName[2] = \"Second titan\";\r\n        razName[3] = \"Trinity affair\";\r\n        \r\n        participationFeeForEachRaz[1] = 3 * 10 ** 16;\r\n        participationFeeForEachRaz[2] = 1 * 10 ** 16;\r\n        participationFeeForEachRaz[3] = 1 * 10 ** 16;\r\n        \r\n        winnerPrizeMoneyForEachRaz[1] = 21 * 10 ** 16;\r\n        winnerPrizeMoneyForEachRaz[2] = 15 * 10 ** 16;\r\n        winnerPrizeMoneyForEachRaz[3] = 7 * 10 ** 16;\r\n        \r\n        ownerPrizeMoneyForEachRaz[1] = 9 * 10 ** 16;\r\n        ownerPrizeMoneyForEachRaz[2] = 5 * 10 ** 16;\r\n        ownerPrizeMoneyForEachRaz[3] = 3 * 10 ** 16;\r\n        \r\n        runningRazInstance[1] = 1;\r\n        runningRazInstance[2] = 1;\r\n        runningRazInstance[3] = 1;\r\n    }\r\n    \r\n    function EnterBetsForRaz(uint razNumber, uint[] bets) public payable\r\n    {\r\n        require(razNumber>=1 && razNumber<=numberOfRazzes);\r\n        uint numBets = bets.length;     //finding the numbers of bets the user has placed\r\n        require(msg.value>=participationFeeForEachRaz[razNumber].mul(numBets));    //user has to pay according to the number of bets placed\r\n        require(razCompletion[razNumber] == false);\r\n        uint instance = runningRazInstance[razNumber];\r\n        bb = userBetsInEachRazInstance[razNumber][instance][msg.sender].bets;\r\n        for (uint i=0;i<numBets;i++)\r\n        {\r\n            require(numbersTaken[razNumber][bets[i]] == 0);\r\n            require(bets[i]>=1 && bets[i]<=maxBetsForEachRaz[razNumber]);\r\n            numbersTaken[razNumber][bets[i]] = msg.sender;\r\n            bb.push(bets[i]);\r\n        }\r\n        aBet.bets = bb;\r\n        aBet.timestamp = now;\r\n        userBetsInEachRazInstance[razNumber][instance][msg.sender] = aBet;\r\n        MarkRazAsComplete(razNumber);\r\n       \r\n        emit BetPlaced(msg.sender,razName[razNumber],bets);\r\n    }\r\n    \r\n    function MarkRazAsComplete(uint razNumber) internal returns (bool)\r\n    {\r\n        require(razNumber>=1 && razNumber<=numberOfRazzes);\r\n        for (uint i=1;i<=maxBetsForEachRaz[razNumber];i++)\r\n        {\r\n            if (numbersTaken[razNumber][i] == 0)\r\n            return false;\r\n        }\r\n        razCompletion[razNumber] = true;\r\n        uint randomNumber = uint8(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty)))%maxBetsForEachRaz[razNumber]);\r\n        randomNumber = randomNumber.add(1);\r\n        declareWinnerForRaz(razNumber,randomNumber);\r\n        return true;\r\n    }\r\n   \r\n    function getAvailableNumbersForRaz (uint razNumber) public returns (uint[])\r\n    {\r\n        require(razNumber>=1 && razNumber<=numberOfRazzes);\r\n        razList = empty;\r\n        for (uint i=1;i<=maxBetsForEachRaz[razNumber];i++)\r\n        {\r\n            if (numbersTaken[razNumber][i] == 0)\r\n                razList.push(i);\r\n        }\r\n        return razList;\r\n    }\r\n    \r\n    function resetRaz(uint razNumber,address winningAddress, uint winningNumber) internal \r\n    {\r\n        delete losers;\r\n        \r\n        bool isRepeat;\r\n        for (uint i=1;i<=maxBetsForEachRaz[razNumber];i++)\r\n        {\r\n            isRepeat = false;\r\n            if (numbersTaken[razNumber][i] == winningAddress && i == winningNumber)\r\n            {\r\n                winOrLoseArray = pastWinnings[numbersTaken[razNumber][i]];\r\n                winOrLoseArray.push(razNumber);\r\n                pastWinnings[numbersTaken[razNumber][i]] = winOrLoseArray;\r\n            }\r\n            else\r\n            {\r\n                if (numbersTaken[razNumber][i] != winningAddress)\r\n                {\r\n                    for (uint j=0;j<losers.length;j++)\r\n                    {\r\n                        if (numbersTaken[razNumber][i] == losers[j])\r\n                            isRepeat = true;\r\n                    }\r\n                    if (!isRepeat)\r\n                    {\r\n                        winOrLoseArray = pastLosings[numbersTaken[razNumber][i]];\r\n                        winOrLoseArray.push(razNumber);\r\n                        pastLosings[numbersTaken[razNumber][i]] = winOrLoseArray;\r\n                        losers.push(numbersTaken[razNumber][i]);\r\n                    }\r\n                }\r\n            }\r\n            numbersTaken[razNumber][i]=0;\r\n        }   \r\n        razCompletion[razNumber] = false;\r\n        uint thisInstance = runningRazInstance[razNumber];\r\n        information = RazInformation({razInstance:thisInstance, winningBet: winningNumber, winningAddress: winningAddress,allLosers: losers, timestamp:now, id:idCounter});\r\n        idCounter = idCounter.add(1);\r\n        RazInstanceInformation[razNumber][thisInstance] = information;\r\n        runningRazInstance[razNumber] = runningRazInstance[razNumber].add(1);\r\n    }\r\n    \r\n    function declareWinnerForRaz(uint razNumber,uint winningNumber) internal\r\n    {\r\n        require(razNumber>=1 && razNumber<=numberOfRazzes);\r\n        require(razCompletion[razNumber] == true);   \r\n        address winningAddress =  numbersTaken[razNumber][winningNumber];\r\n        winningAddress.transfer(winnerPrizeMoneyForEachRaz[razNumber]);\r\n        owner.transfer(ownerPrizeMoneyForEachRaz[razNumber]);\r\n        emit BetWon(winningAddress,razName[razNumber],winningNumber,razNumber,runningRazInstance[razNumber]);\r\n        resetRaz(razNumber,winningAddress,winningNumber);\r\n    }\r\n    \r\n    function GetUserBetsInRaz(address userAddress, uint razNumber) public returns (uint[])\r\n    {\r\n        require(razNumber>=1 && razNumber<=numberOfRazzes);\r\n        razList = empty;\r\n        for (uint i=1;i<=maxBetsForEachRaz[razNumber];i++)\r\n        {\r\n            if (numbersTaken[razNumber][i]==userAddress)\r\n                razList.push(i);\r\n        }   \r\n        return razList;\r\n    }\r\n    function changeParticipationFeeForRaz(uint razNumber,uint participationFee) public onlyOwner \r\n    {\r\n        require(razNumber>=1 && razNumber<=numberOfRazzes);\r\n        participationFeeForEachRaz[razNumber] = participationFee;\r\n    }\r\n    \r\n     function changeWinnerPrizeMoneyForRaz(uint razNumber,uint prizeMoney) public onlyOwner \r\n     {\r\n        require(razNumber>=1 && razNumber<=numberOfRazzes);\r\n        winnerPrizeMoneyForEachRaz[razNumber] = prizeMoney;\r\n    }\r\n    \r\n    function addNewRaz(uint maxBets, uint winningAmount, uint ownerAmount, uint particFee, string name) public onlyOwner returns (uint) \r\n    {\r\n        require(maxBets.mul(particFee) == winningAmount.add(ownerAmount));\r\n        numberOfRazzes = numberOfRazzes.add(1);\r\n        maxBetsForEachRaz[numberOfRazzes] = maxBets;\r\n        participationFeeForEachRaz[numberOfRazzes] = particFee;\r\n        winnerPrizeMoneyForEachRaz[numberOfRazzes] = winningAmount;\r\n        ownerPrizeMoneyForEachRaz[numberOfRazzes] = ownerAmount;    \r\n        razName[numberOfRazzes] = name;\r\n        runningRazInstance[numberOfRazzes] = 1;\r\n        return numberOfRazzes;\r\n    }\r\n    \r\n    function updateExistingRaz(uint razNumber, uint maxBets, uint winningAmount, uint ownerAmount, uint particFee, string name) public onlyOwner returns (uint) \r\n    {\r\n        require (razNumber<=numberOfRazzes);\r\n        require(!IsRazRunning(razNumber));\r\n        require(maxBets.mul(particFee) == winningAmount.add(ownerAmount));\r\n        maxBetsForEachRaz[razNumber] = maxBets;\r\n        participationFeeForEachRaz[razNumber] = particFee;\r\n        winnerPrizeMoneyForEachRaz[razNumber] = winningAmount;\r\n        ownerPrizeMoneyForEachRaz[razNumber] = ownerAmount;   \r\n        razName[razNumber] = name;\r\n    }\r\n    function getMyPastWins(address addr) public constant returns (uint[])\r\n    {\r\n        return pastWinnings[addr];\r\n    }\r\n    function getMyPastLosses(address addr) public constant returns (uint[]) \r\n    {\r\n        return pastLosings[addr];\r\n    }\r\n    \r\n    function getRazInstanceInformation(uint razNumber, uint instanceNumber) public constant returns (uint, address, address[],uint,uint)\r\n    {\r\n        return (RazInstanceInformation[razNumber][instanceNumber].winningBet, \r\n                RazInstanceInformation[razNumber][instanceNumber].winningAddress,\r\n                RazInstanceInformation[razNumber][instanceNumber].allLosers,\r\n                RazInstanceInformation[razNumber][instanceNumber].timestamp,\r\n                RazInstanceInformation[razNumber][instanceNumber].id);\r\n    }\r\n    function getRunningRazInstance(uint razNumber) public constant returns (uint)\r\n    {\r\n        return runningRazInstance[razNumber];\r\n    }\r\n    \r\n    function getUserBetsInARazInstance(uint razNumber, uint instanceNumber) public constant returns(uint[])\r\n    {\r\n        return (userBetsInEachRazInstance[razNumber][instanceNumber][msg.sender].bets);\r\n    }\r\n    function getUserBetsTimeStampInARazInstance(uint razNumber, uint instanceNumber) public constant returns(uint)\r\n    {\r\n        return (userBetsInEachRazInstance[razNumber][instanceNumber][msg.sender].timestamp);\r\n    }\r\n    \r\n    function IsRazRunning(uint razNumber) constant public returns (bool)\r\n    {\r\n        require(razNumber>=1 && razNumber<=numberOfRazzes);\r\n        for (uint i=1;i<=maxBetsForEachRaz[razNumber];i++)\r\n        {\r\n            if (numbersTaken[razNumber][i] != 0)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RazInstanceInformation\",\"outputs\":[{\"name\":\"razInstance\",\"type\":\"uint256\"},{\"name\":\"winningBet\",\"type\":\"uint256\"},{\"name\":\"winningAddress\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participationFeeForEachRaz\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"razNumber\",\"type\":\"uint256\"}],\"name\":\"IsRazRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pastLosings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBetsInEachRazInstance\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"razNumber\",\"type\":\"uint256\"}],\"name\":\"getRunningRazInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxBets\",\"type\":\"uint256\"},{\"name\":\"winningAmount\",\"type\":\"uint256\"},{\"name\":\"ownerAmount\",\"type\":\"uint256\"},{\"name\":\"particFee\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addNewRaz\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerPrizeMoneyForEachRaz\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerPrizeMoneyForEachRaz\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numbersTaken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"razNumber\",\"type\":\"uint256\"}],\"name\":\"GetUserBetsInRaz\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"razNumber\",\"type\":\"uint256\"}],\"name\":\"getAvailableNumbersForRaz\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"razNumber\",\"type\":\"uint256\"},{\"name\":\"maxBets\",\"type\":\"uint256\"},{\"name\":\"winningAmount\",\"type\":\"uint256\"},{\"name\":\"ownerAmount\",\"type\":\"uint256\"},{\"name\":\"particFee\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updateExistingRaz\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pastWinnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfRazzes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"runningRazInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxBetsForEachRaz\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMyPastWins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMyPastLosses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"razNumber\",\"type\":\"uint256\"},{\"name\":\"instanceNumber\",\"type\":\"uint256\"}],\"name\":\"getRazInstanceInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"razNumber\",\"type\":\"uint256\"},{\"name\":\"instanceNumber\",\"type\":\"uint256\"}],\"name\":\"getUserBetsInARazInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"razNumber\",\"type\":\"uint256\"},{\"name\":\"participationFee\",\"type\":\"uint256\"}],\"name\":\"changeParticipationFeeForRaz\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"razNumber\",\"type\":\"uint256\"},{\"name\":\"instanceNumber\",\"type\":\"uint256\"}],\"name\":\"getUserBetsTimeStampInARazInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"razCompletion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"razName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"razNumber\",\"type\":\"uint256\"},{\"name\":\"bets\",\"type\":\"uint256[]\"}],\"name\":\"EnterBetsForRaz\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"razNumber\",\"type\":\"uint256\"},{\"name\":\"prizeMoney\",\"type\":\"uint256\"}],\"name\":\"changeWinnerPrizeMoneyForRaz\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gambler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"razName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"bets\",\"type\":\"uint256[]\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gambler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"razName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"betNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"razNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"razInstance\",\"type\":\"uint256\"}],\"name\":\"BetWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"b\",\"type\":\"uint256[]\"}],\"name\":\"allBetsPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptocurrencyRaz","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b2678983b62292a5b2023ae8239032982976e790","Library":"","SwarmSource":"bzzr://ff3cb146b8e84913d0f6f3e889bc548d2b1c4add8ecb0a314c7e54f5a89f0c60"}]}