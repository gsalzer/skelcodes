{"status":"1","message":"OK","result":[{"SourceCode":"pragma  solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable{\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n      owner = msg.sender;\r\n  }\r\n    \r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n \r\n    /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n    \r\n}\r\n\r\nlibrary Locklist {\r\n  \r\n  struct List {\r\n    mapping(address => bool) registry;\r\n  }\r\n  \r\n  function add(List storage list, address _addr)\r\n    internal\r\n  {\r\n    list.registry[_addr] = true;\r\n  }\r\n\r\n  function remove(List storage list, address _addr)\r\n    internal\r\n  {\r\n    list.registry[_addr] = false;\r\n  }\r\n\r\n  function check(List storage list, address _addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return list.registry[_addr];\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Locklisted  {\r\n\r\n  Locklist.List private _list;\r\n  \r\n  modifier onlyLocklisted() {\r\n    require(Locklist.check(_list, msg.sender) == true);\r\n    _;\r\n  }\r\n\r\n  event AddressAdded(address _addr);\r\n  event AddressRemoved(address _addr);\r\n  \r\n  function LocklistedAddress()\r\n  public\r\n  {\r\n    Locklist.add(_list, msg.sender);\r\n  }\r\n\r\n  function LocklistAddressenable(address _addr)\r\n    public\r\n  {\r\n    Locklist.add(_list, _addr);\r\n    emit AddressAdded(_addr);\r\n  }\r\n\r\n  function LocklistAddressdisable(address _addr)\r\n    public\r\n  {\r\n    Locklist.remove(_list, _addr);\r\n   emit AddressRemoved(_addr);\r\n  }\r\n  \r\n  function LocklistAddressisListed(address _addr)\r\n  public\r\n  view\r\n  returns (bool)\r\n  {\r\n      return Locklist.check(_list, _addr);\r\n  }\r\n}\r\n\r\ncontract VTEXP is Ownable,Locklisted {\r\n \r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  using SafeMath for uint256;\r\n  string public constant name = \"VTEX Promo Token\";\r\n  string public constant symbol = \"VTEXP\";\r\n  uint8 public constant decimals = 5;  // 18 is the most common number of decimal places\r\n  bool public mintingFinished = false;\r\n  uint256 public totalSupply;\r\n  mapping(address => uint256) balances;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n \r\n  /**\r\n  * @dev Function to mint tokens\r\n  * @param _to The address that will receive the minted tokens.\r\n  * @param _amount The amount of tokens to mint.\r\n  * @return A boolean that indicates if the operation was successful.\r\n  */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    require(!LocklistAddressisListed(_to));\r\n    totalSupply = totalSupply.add(_amount);\r\n    require(totalSupply <= 10000000000000);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit  Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Function to stop minting new tokens.\r\n  * @return True if the operation was successful.\r\n  */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n \r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= totalSupply);\r\n    require(!LocklistAddressisListed(_to));\r\n      balances[_to] = balances[_to].add(_value);\r\n      totalSupply = totalSupply.sub(_value);\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      emit Transfer(msg.sender, _to, _value);\r\n      return true;\r\n  }\r\n \r\n \r\n  function transferFrom(address _from, address _to, uint256 _value) onlyOwner public returns (bool) {\r\n    require(!LocklistAddressisListed(_to));\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n \r\n \r\n \r\n\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function balanceEth(address _owner) public constant returns (uint256 balance) {\r\n    return _owner.balance;\r\n  }\r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceEth\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"LocklistAddressenable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"LocklistAddressisListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LocklistedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"LocklistAddressdisable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VTEXP","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://73c25c76bebae8bc72d497f0412a4e3785bf37c0678b8161a17bf24a993fedcb"}]}