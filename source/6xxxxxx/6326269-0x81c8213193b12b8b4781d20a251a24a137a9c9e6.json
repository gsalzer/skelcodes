{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract EternalStorage is Ownable {\r\n\r\n    struct Storage {\r\n        mapping(uint256 => uint256) _uint;\r\n        mapping(uint256 => address) _address;\r\n    }\r\n\r\n    Storage internal s;\r\n    address allowed;\r\n\r\n    constructor(uint _rF, address _r, address _f, address _a, address _t)\r\n\r\n    public {\r\n        setAddress(0, _a);\r\n        setAddress(1, _r);\r\n        setUint(1, _rF);\r\n        setAddress(2, _f);\r\n        setAddress(3, _t);\r\n    }\r\n\r\n    modifier onlyAllowed() {\r\n        require(msg.sender == owner || msg.sender == allowed);\r\n        _;\r\n    }\r\n\r\n    function identify(address _address) external onlyOwner {\r\n        allowed = _address;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a\r\n     * newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        Ownable.transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to set a value for an unsigned integer variable.\r\n     * @param i Unsigned integer variable key\r\n     * @param v The value to be stored\r\n     */\r\n    function setUint(uint256 i, uint256 v) public onlyOwner {\r\n        s._uint[i] = v;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to set a value for a address variable.\r\n     * @param i Unsigned integer variable key\r\n     * @param v The value to be stored\r\n     */\r\n    function setAddress(uint256 i, address v) public onlyOwner {\r\n        s._address[i] = v;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the value stored of a uint variable by the hash name\r\n     * @param i Unsigned integer variable key\r\n     */\r\n    function getUint(uint256 i) external view onlyAllowed returns (uint256) {\r\n        return s._uint[i];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the value stored of a address variable by the hash name\r\n     * @param i Unsigned integer variable key\r\n     */\r\n    function getAddress(uint256 i) external view onlyAllowed returns (address) {\r\n        return s._address[i];\r\n    }\r\n\r\n    function selfDestruct () external onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n    public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\ncontract Escrow is Ownable {\r\n\r\n    enum transactionStatus {\r\n        Default,\r\n        Pending,\r\n        PendingR1,\r\n        PendingR2,\r\n        Completed,\r\n        Canceled}\r\n\r\n    struct Transaction {\r\n        transactionStatus status;\r\n        uint baseAmt;\r\n        uint txnAmt;\r\n        uint sellerFee;\r\n        uint buyerFee;\r\n        uint buyerBalance;\r\n        address buyer;\r\n        uint token;\r\n    }\r\n\r\n    mapping(address => Transaction) transactions;\r\n    mapping(address => uint) balance;\r\n    ERC20 base;\r\n    ERC20 token;\r\n    EternalStorage eternal;\r\n    uint rF;\r\n    address r;\r\n    address reserve;\r\n\r\n    constructor(ERC20 _base, address _s) public {\r\n\r\n        base = _base;\r\n        eternal = EternalStorage(_s);\r\n\r\n    }\r\n\r\n    modifier onlyAllowed() {\r\n        require(msg.sender == owner || msg.sender == eternal.getAddress(0));\r\n        _;\r\n    }\r\n\r\n    function createTransaction (\r\n\r\n        address _tag,\r\n        uint _baseAmt,\r\n        uint _txnAmt,\r\n        uint _sellerFee,\r\n        uint _buyerFee) external payable {\r\n\r\n        Transaction storage transaction = transactions[_tag];\r\n        require(transaction.buyer == 0x0);\r\n        transactions[_tag] =\r\n        Transaction(\r\n            transactionStatus.Pending,\r\n            _baseAmt,\r\n            _txnAmt,\r\n            _sellerFee,\r\n            _buyerFee,\r\n            0,\r\n            msg.sender,\r\n            0);\r\n\r\n        uint buyerTotal = _txnAmt + _buyerFee;\r\n        require(transaction.buyerBalance + msg.value == buyerTotal);\r\n        transaction.buyerBalance += msg.value;\r\n        balance[msg.sender] += msg.value;\r\n    }\r\n\r\n    function createTokenTransaction (\r\n\r\n        address _tag,\r\n        uint _baseAmt,\r\n        uint _txnAmt,\r\n        uint _sellerFee,\r\n        uint _buyerFee,\r\n        address _buyer,\r\n        uint _token) external onlyAllowed {\r\n\r\n        require(_token != 0);\r\n        require(eternal.getAddress(_token) != 0x0);\r\n        Transaction storage transaction = transactions[_tag];\r\n        require(transaction.buyer == 0x0);\r\n        transactions[_tag] =\r\n        Transaction(\r\n            transactionStatus.Pending,\r\n            _baseAmt,\r\n            _txnAmt,\r\n            _sellerFee,\r\n            _buyerFee,\r\n            0,\r\n            _buyer,\r\n            _token);\r\n\r\n        uint buyerTotal = _txnAmt + _buyerFee;\r\n        token = ERC20(eternal.getAddress(_token));\r\n        token.transferFrom(_buyer, address(this), buyerTotal);\r\n        transaction.buyerBalance += buyerTotal;\r\n    }\r\n\r\n    function release(address _tag) external onlyAllowed {\r\n        releaseFunds(_tag);\r\n    }\r\n\r\n    function releaseFunds (address _tag) private {\r\n        Transaction storage transaction = transactions[_tag];\r\n        require(transaction.status == transactionStatus.Pending);\r\n        uint buyerTotal = transaction.txnAmt + transaction.buyerFee;\r\n        uint buyerBalance = transaction.buyerBalance;\r\n        transaction.buyerBalance = 0;\r\n        require(buyerTotal == buyerBalance);\r\n        base.transferFrom(_tag, transaction.buyer, transaction.baseAmt);\r\n        uint totalFees = transaction.buyerFee + transaction.sellerFee;\r\n        uint sellerTotal = transaction.txnAmt - transaction.sellerFee;\r\n        transaction.txnAmt = 0;\r\n        transaction.sellerFee = 0;\r\n        if (transaction.token == 0) {\r\n            _tag.transfer(sellerTotal);\r\n            owner.transfer(totalFees);\r\n        } else {\r\n            token = ERC20(eternal.getAddress(transaction.token));\r\n            token.transfer(_tag, sellerTotal);\r\n            token.transfer(owner, totalFees);\r\n        }\r\n\r\n        transaction.status = transactionStatus.PendingR1;\r\n        recovery(_tag);\r\n    }\r\n\r\n    function recovery(address _tag) private {\r\n        r1(_tag);\r\n        r2(_tag);\r\n    }\r\n\r\n    function r1 (address _tag) private {\r\n        Transaction storage transaction = transactions[_tag];\r\n        require(transaction.status == transactionStatus.PendingR1);\r\n        transaction.status = transactionStatus.PendingR2;\r\n        base.transferFrom(reserve, _tag, rF);\r\n    }\r\n\r\n    function r2 (address _tag) private {\r\n        Transaction storage transaction = transactions[_tag];\r\n        require(transaction.status == transactionStatus.PendingR2);\r\n        transaction.buyer = 0x0;\r\n        transaction.status = transactionStatus.Completed;\r\n        base.transferFrom(_tag, r, rF);\r\n    }\r\n\r\n    function cancel (address _tag) external onlyAllowed {\r\n        Transaction storage transaction = transactions[_tag];\r\n        if (transaction.token == 0) {\r\n            cancelTransaction(_tag);\r\n        } else {\r\n            cancelTokenTransaction(_tag);\r\n        }\r\n    }\r\n\r\n    function cancelTransaction (address _tag) private {\r\n        Transaction storage transaction = transactions[_tag];\r\n        require(transaction.status == transactionStatus.Pending);\r\n        uint refund = transaction.buyerBalance;\r\n        transaction.buyerBalance = 0;\r\n        address buyer = transaction.buyer;\r\n        transaction.buyer = 0x0;\r\n        buyer.transfer(refund);\r\n        transaction.status = transactionStatus.Canceled;\r\n    }\r\n\r\n    function cancelTokenTransaction (address _tag) private {\r\n        Transaction storage transaction = transactions[_tag];\r\n        require(transaction.status == transactionStatus.Pending);\r\n        token = ERC20(eternal.getAddress(transaction.token));\r\n        uint refund = transaction.buyerBalance;\r\n        transaction.buyerBalance = 0;\r\n        address buyer = transaction.buyer;\r\n        transaction.buyer = 0x0;\r\n        token.transfer(buyer, refund);\r\n        transaction.status = transactionStatus.Canceled;\r\n    }\r\n\r\n    function resync () external onlyOwner {\r\n        rF = eternal.getUint(1);\r\n        r = eternal.getAddress(1);\r\n        reserve = eternal.getAddress(2);\r\n    }\r\n\r\n    function selfDestruct () external onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function status (address _tag) external view onlyOwner returns (\r\n        transactionStatus _status,\r\n        uint _baseAmt,\r\n        uint _txnAmt,\r\n        uint _sellerFee,\r\n        uint _buyerFee,\r\n        uint _buyerBalance,\r\n        address _buyer,\r\n        uint _token) {\r\n\r\n        Transaction storage transaction = transactions[_tag];\r\n        return (\r\n        transaction.status,\r\n        transaction.baseAmt,\r\n        transaction.txnAmt,\r\n        transaction.sellerFee,\r\n        transaction.buyerFee,\r\n        transaction.buyerBalance,\r\n        transaction.buyer,\r\n        transaction.token\r\n        );\r\n    }\r\n\r\n    function getAddress (uint i) external view onlyAllowed returns (address) {\r\n        return eternal.getAddress(i);\r\n    }\r\n\r\n    function variables () external view onlyAllowed returns (\r\n        address,\r\n        address,\r\n        address,\r\n        uint) {\r\n\r\n        address p = eternal.getAddress(0);\r\n        return (p, r, reserve, rF);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"identify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"setUint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getUint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rF\",\"type\":\"uint256\"},{\"name\":\"_r\",\"type\":\"address\"},{\"name\":\"_f\",\"type\":\"address\"},{\"name\":\"_a\",\"type\":\"address\"},{\"name\":\"_t\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EternalStorage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000001158e460913d00000000000000000000000000000157b7e6c09204982d9fc7b307a3cf6d5f4885b3b0000000000000000000000006c5c8309e22056d154c6dd752ad6dbfa8959c0890000000000000000000000000b8046e60b3d57870844aa3bb44659cf4ba31b7b0000000000000000000000008dd5fbce2f6a956c3022ba3663759011dd51e73e","Library":"","SwarmSource":"bzzr://264c4faa72d2ad9f8c94a12a23e895c63fbf28a4fe450aba70f04d302d450c32"}]}