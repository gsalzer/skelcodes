{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/* COOPEX Smart Contract */\r\n/* This is the smart 'hotwallet' for the Cooperative Exchange. All Ethereum assets will be stored on this smart contract. This smart contract will be used while we work on a fully decentralized exchange. */\r\n/* Visit us at https://coopex.market */\r\n\r\ncontract Token {\r\n    bytes32 public standard;\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public totalSupply;\r\n    uint8 public decimals;\r\n    bool public allowTransactions;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\ncontract Exchange {\r\n    \r\n    \r\n\r\n  function safeMul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n  \r\n  constructor() {\r\n    owner = msg.sender;\r\n    locked = false;\r\n    secure = false;\r\n  }\r\n  \r\n  address public owner;\r\n  mapping (address => bool) public admins;\r\n  bool locked;\r\n  bool secure;\r\n  \r\n  event SetOwner(address indexed previousOwner, address indexed newOwner);\r\n  event Deposit(address token, address user, uint256 amount);\r\n  event Withdraw(address token, address user, uint256 amount);\r\n  event Lock(bool lock);\r\n  \r\n  modifier onlyOwner {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyAdmin {\r\n    require(msg.sender != owner && !admins[msg.sender]);\r\n    _;\r\n  }\r\n  \r\n  function setOwner(address newOwner) onlyOwner {\r\n    SetOwner(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  \r\n  function getOwner() view returns (address out) {\r\n    return owner;\r\n  }\r\n\r\n  function setAdmin(address admin, bool isAdmin) onlyOwner {\r\n    admins[admin] = isAdmin;\r\n  }\r\n\r\n\r\n\r\n  function() public payable {\r\n    Deposit(0, msg.sender, msg.value);\r\n  }\r\n\r\n \r\n\r\n  function withdraw(address token, uint256 amount) onlyAdmin returns (bool success) {\r\n    require(!locked);\r\n    if (token == address(0)) {\r\n        if(msg.sender != owner && secure && (amount > this.balance / 3)){\r\n            locked = true;\r\n            Lock(true);\r\n        }\r\n        else{\r\n            require(msg.sender.send(amount));\r\n        }\r\n    } else {\r\n      require(amount <= Token(token).balanceOf(this));\r\n      require(Token(token).transfer(msg.sender, amount));\r\n    }\r\n    Withdraw(token, msg.sender, amount);\r\n    return true;\r\n  }\r\n\r\n  function lock() onlyOwner{\r\n      locked = true;\r\n      Lock(true);\r\n  }\r\n  \r\n  function unlock() onlyOwner{\r\n      locked = false;\r\n      Lock(false);\r\n  }\r\n  \r\n  function secureMode() onlyOwner{\r\n      secure = true;\r\n  }\r\n  \r\n  function insecureMode() onlyOwner{\r\n      secure = false;\r\n  }\r\n  \r\n  function getBalance(address token) view returns (uint256 balance){\r\n      if(token == address(0)){\r\n          return this.balance;\r\n      }\r\n      else{\r\n          return Token(token).balanceOf(this);\r\n      }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"secureMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"out\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"insecureMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"Lock\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://763970371155e97e33c97b96cfe718dcb6c8eb6546bf00070c78fcf55c7352fc"}]}