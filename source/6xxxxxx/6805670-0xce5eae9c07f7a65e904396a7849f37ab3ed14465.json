{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ConferencePay {\r\n    uint public endTime;\r\n    address public owner;\r\n    mapping (bytes32 => uint) public talkMapping;\r\n    using SafeMath for uint256;\r\n\r\n    struct Talk {\r\n        uint amount;\r\n        address addr;\r\n        bytes32 title;\r\n    }\r\n\r\n    Talk[] public talks;\r\n\r\n    modifier onlyBefore(uint _time) { require(now < _time); _; }\r\n    modifier onlyAfter(uint _time) { require(now > _time); _; }\r\n\r\n\t//event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n\tconstructor(uint end) public {\r\n        endTime = end;\r\n        owner = msg.sender;\r\n\t}\r\n\r\n    function getTalkCount() public constant returns(uint) {\r\n        return talks.length;\r\n    }\r\n\r\n    function add(address addr, bytes32 title) public returns(uint) {\r\n        uint index = talks.length;\r\n        talkMapping[title] = index;\r\n        talks.push(Talk({\r\n            amount: 0,\r\n            addr: addr,\r\n            title: title\r\n        }));\r\n        return index;\r\n    }\r\n\r\n\tfunction pay(uint talk) public payable returns(bool sufficient) {\r\n\t\ttalks[talk].amount += msg.value;\r\n\t\treturn true;\r\n\t}\r\n\r\n    function end() public {\r\n        require(now > endTime);\r\n        uint max = 0;\r\n        address winnerAddress;\r\n        uint balance = address(this).balance;\r\n        owner.transfer(balance.mul(20).div(100));\r\n        for (uint i = 0; i < talks.length; i++) {\r\n            if (talks[i].amount > max) {\r\n                max = talks[i].amount;\r\n                winnerAddress = talks[i].addr;\r\n            }\r\n            talks[i].addr.transfer(talks[i].amount.mul(70).div(100));\r\n        }\r\n        winnerAddress.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"bytes32\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTalkCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"talk\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[{\"name\":\"sufficient\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"talks\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"talkMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ConferencePay","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005c012e2a","Library":"","SwarmSource":"bzzr://24ea203b0bea924b7e0afdf7ab167e4f5754fd8fd7d3f297cd6245ce974da955"}]}