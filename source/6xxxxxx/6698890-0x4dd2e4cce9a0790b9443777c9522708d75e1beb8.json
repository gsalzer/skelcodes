{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    mapping(address => bool)  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(address authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority[authority_] = true;\r\n        emit LogSetAuthority(authority_);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority[src] == true) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract KYCVerification is DSAuth{\r\n    \r\n    mapping(address => bool) public kycAddress;\r\n    \r\n    event LogKYCVerification(address _kycAddress,bool _status);\r\n    \r\n    function addVerified(address[] _kycAddress,bool _status) auth public\r\n    {\r\n        for(uint tmpIndex = 0; tmpIndex <= _kycAddress.length; tmpIndex++)\r\n        {\r\n            kycAddress[_kycAddress[tmpIndex]] = _status;\r\n        }\r\n    }\r\n    \r\n    function updateVerifcation(address _kycAddress,bool _status) auth public\r\n    {\r\n        kycAddress[_kycAddress] = _status;\r\n        \r\n        emit LogKYCVerification(_kycAddress,_status);\r\n    }\r\n    \r\n    function isVerified(address _user) view public returns(bool)\r\n    {\r\n        return kycAddress[_user] == true; \r\n    }\r\n}\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint              wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf( address who ) public view returns (uint value);\r\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSStop is DSNote, DSAuth {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\ncontract DSTokenBase is ERC20, DSMath {\r\n    uint256                                            _supply;\r\n    mapping (address => uint256)                       _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n\r\n    constructor (uint supply) public {\r\n        _balances[msg.sender] = supply;\r\n        _supply = supply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _supply;\r\n    }\r\n    function balanceOf(address src) public view returns (uint) {\r\n        return _balances[src];\r\n    }\r\n    function allowance(address src, address guy) public view returns (uint) {\r\n        return _approvals[src][guy];\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (src != msg.sender) {\r\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        }\r\n\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n\r\n        emit Approval(msg.sender, guy, wad);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DSToken is DSTokenBase(0), DSStop {\r\n\r\n    mapping (address => mapping (address => bool)) _trusted;\r\n\r\n    // Optional token name\r\n    string  public  name = \"\";\r\n    string  public  symbol;\r\n    uint256  public  decimals = 18; // standard token precision. override to customize\r\n    bool public kycEnabled = true;\r\n\r\n    KYCVerification public kycVerification;\r\n    \r\n    constructor (string name_,string symbol_,KYCVerification _kycAddress) public {\r\n        name = name_;\r\n        symbol = symbol_;\r\n        \r\n        kycVerification = _kycAddress;\r\n    }\r\n\r\n    event Trust(address indexed src, address indexed guy, bool wat);\r\n    event Burn(address indexed guy, uint wad);\r\n    event KYCMandateUpdate(bool _kycEnabled);\r\n    \r\n    modifier kycVerified(address _guy) {\r\n\r\n        if(kycEnabled == true)\r\n        {\r\n            if(kycVerification.isVerified(_guy) == false)\r\n            {\r\n                revert(\"KYC Not Verified\");\r\n            }\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function updateKycMandate(bool _kycEnabled) public auth\r\n    {\r\n        kycEnabled = _kycEnabled;\r\n        emit KYCMandateUpdate(_kycEnabled);\r\n    }\r\n\r\n    function trusted(address src, address guy) public view returns (bool) {\r\n        return _trusted[src][guy];\r\n    }\r\n    function trust(address guy, bool wat) public stoppable {\r\n        _trusted[msg.sender][guy] = wat;\r\n        emit Trust(msg.sender, guy, wat);\r\n    }\r\n\r\n    function approve(address guy, uint wad) public stoppable returns (bool) {\r\n        return super.approve(guy, wad);\r\n    }\r\n    \r\n    function transfer(address dst, uint wad) public stoppable kycVerified(msg.sender) returns (bool) {\r\n        \r\n        return super.transfer(dst,wad);\r\n    }\r\n    \r\n    \r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        stoppable\r\n        returns (bool)\r\n    {\r\n        if (src != msg.sender && !_trusted[src][msg.sender]) {\r\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        }\r\n\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function mint(uint wad) public {\r\n        mint(msg.sender, wad);\r\n    }\r\n    function burn(uint wad) public {\r\n        burn(msg.sender, wad);\r\n    }\r\n    function mint(address guy, uint wad) public auth stoppable {\r\n        _balances[guy] = add(_balances[guy], wad);\r\n        _supply = add(_supply, wad);\r\n        \r\n        emit Transfer(address(0),address(this),wad);\r\n        emit Transfer(address(this),guy,wad);\r\n    }\r\n    function burn(address guy, uint wad) public auth stoppable {\r\n        if (guy != msg.sender && !_trusted[guy][msg.sender]) {\r\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\r\n        }\r\n\r\n        _balances[guy] = sub(_balances[guy], wad);\r\n        _supply = sub(_supply, wad);\r\n        emit Burn(guy, wad);\r\n    }\r\n\r\n    \r\n\r\n    function setName(string name_) public auth {\r\n        name = name_;\r\n    }\r\n}\r\n\r\ncontract ZeosXPrivatePreSale is DSAuth, DSMath {\r\n\r\n    uint public MAX_FUNDING =  1000 ether;  // contribution hard-cap 1000 ether;\r\n    uint public BONUS = 50;   /* Bonus in % */\r\n    uint public MIN_CONTRIBUTION = 0.1 ether;\r\n    \r\n    DSToken public zeosXToken;         // zeosXToken token contract\r\n    address public beneficiary;       // destination to collect eth deposits\r\n    uint public startTime;           // start time of sale\r\n    uint public endTime;             // end time of sale\r\n\r\n    uint public totalEthDeposited;    // sums of ether raised\r\n    uint public totalTokensBought;    // total tokens issued on sale\r\n    uint public totalEthCollected;    // total eth collected from sale\r\n    uint public totalEthRefunded;     // total eth refunded after a failed sale\r\n\r\n    mapping (bytes32 => uint) public totalEthDepositsViaOtherCurrency; //Deposits via BTC, LTC etc\r\n    \r\n    mapping(address => bool) public whiteListedBuyers;\r\n    // buyers ether deposits\r\n    mapping (address => uint) public ethDeposits;\r\n    mapping (address => uint) public ethDepositsViaOtherCurrency;\r\n\r\n    // ether refunds after a failed sale\r\n    mapping (address => uint) public ethRefunds;\r\n\r\n    enum State {Pending,Running,Succeeded,Failed}\r\n    State public state = State.Pending;\r\n\r\n    uint public tokensPerEth ;\r\n    \r\n\r\n    /*******************************  Events *************************************/\r\n    event LogBuy(address indexed buyer,uint ethDeposit,uint tokensBought,uint bonusToken);\r\n    event LogBuyViaOtherCurrency(address indexed buyer,uint ethDeposit,bytes32 viaCurrency, bytes32 viaCurrencyAmt, bytes32 gatewayTxId, uint tokensBought,uint bonusToken);\r\n\r\n    event LogRefund(address indexed buyer,uint ethRefund);\r\n    event LogStartSale(uint startTime,uint endTime);\r\n    event LogEndSale(bool success,uint totalEthDeposited,uint totalTokensBought);\r\n    event LogExtendSale(uint endTime);\r\n    event LogCollectEth(uint ethCollected,uint totalEthDeposited);\r\n    event LogWhitelistAddresses(address[] buyer,bool status);\r\n    event LogUpdateWhitelisting(address indexed buyer,bool status);\r\n    event LogBonusUpdate(uint _percent);\r\n    event LogHardcapUpdate(uint _MAX_FUNDING);\r\n    event LogExchangeRateUpdate(uint _tokensPerEth);\r\n\r\n    /*******************************  Modifiers ***********************************/\r\n\r\n    // check given state of sale\r\n    \r\n    modifier saleIn(State state_) { require(state_ == state); _; }\r\n\r\n    // check current block is inside closed interval [startBlock, endBlock]\r\n    modifier inRunningBlock() {\r\n        require(now >= startTime);\r\n        require(now <= endTime);\r\n        _;\r\n    }\r\n\r\n    // check sender has sent some ethers\r\n    modifier ethSent() { require(msg.value > 0); _; }\r\n\r\n    modifier isWhiteListedBuyer {\r\n        require(whiteListedBuyers[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    /*******************************  Public Methods *********************************/\r\n\r\n    constructor (DSToken zeosXToken_, address beneficiary_,uint _tokensPerEth) public\r\n    {\r\n        zeosXToken = zeosXToken_;\r\n        beneficiary = beneficiary_;\r\n        tokensPerEth = _tokensPerEth;\r\n        \r\n        /* Contract in State Pending */\r\n        state = State.Pending;\r\n    }\r\n\r\n    function() public payable \r\n    {\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens() saleIn(State.Running) inRunningBlock ethSent isWhiteListedBuyer public payable \r\n    {\r\n        require(msg.value >= MIN_CONTRIBUTION);\r\n        uint tokensBought = calcTokensForPurchase(msg.value);\r\n        \r\n        /* Add Bonus */\r\n        uint _bonusToken = wdiv(wmul(tokensBought, BONUS), 100);\r\n        tokensBought += _bonusToken;\r\n        \r\n        \r\n        ethDeposits[msg.sender] = add(msg.value, ethDeposits[msg.sender]);\r\n        totalEthDeposited = add(msg.value, totalEthDeposited);\r\n        totalTokensBought = add(tokensBought, totalTokensBought);\r\n\r\n        require(totalEthDeposited <= MAX_FUNDING);\r\n\r\n        zeosXToken.mint(msg.sender, tokensBought);\r\n\r\n        emit LogBuy(msg.sender, msg.value, tokensBought,_bonusToken);\r\n    }\r\n\r\n\r\n  \r\n    /********************** Authentication required ******************************/\r\n\r\n    function buyTokensWithOtherCurrency(address reciever, uint ethInWei, bytes32 viaCurrency,bytes32 viaCurrencyAmt,bytes32 gatewayTxId) \r\n            saleIn(State.Running) inRunningBlock auth public\r\n    {\r\n        require(ethInWei >= MIN_CONTRIBUTION);\r\n        uint tokensBought = calcTokensForPurchase(ethInWei);\r\n\r\n        /* Add Bonus */\r\n        uint _bonusToken = wdiv(wmul(tokensBought, BONUS), 100);\r\n        tokensBought += _bonusToken;\r\n\r\n        /*  Log User Deposits  */\r\n        ethDepositsViaOtherCurrency[reciever] = add(ethInWei, ethDepositsViaOtherCurrency[reciever]);\r\n        \r\n        /*  Log in Other Deposits */\r\n        totalEthDepositsViaOtherCurrency[viaCurrency] = add(ethInWei, totalEthDepositsViaOtherCurrency[viaCurrency]);\r\n\r\n        /*  Log Tokens Bought  */\r\n        totalTokensBought = add(tokensBought, totalTokensBought);\r\n\r\n        require(totalEthDeposited <= MAX_FUNDING);\r\n\r\n        /*  Mint Tokens  */\r\n        zeosXToken.mint(reciever, tokensBought);\r\n\r\n        emit LogBuy(reciever, ethInWei, tokensBought,_bonusToken);\r\n        emit LogBuyViaOtherCurrency(reciever, ethInWei, viaCurrency, viaCurrencyAmt, gatewayTxId, tokensBought,_bonusToken);\r\n    } \r\n\r\n    function startSale(uint _startTime, uint _endTime) auth saleIn(State.Pending) public\r\n    {\r\n        // require(_startTime >= now);\r\n        require(startTime < _endTime);\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n    \r\n        state      = State.Running;\r\n\r\n        emit LogStartSale(startTime, endTime);\r\n    }\r\n\r\n    function endSale() auth saleIn(State.Running) public\r\n    {\r\n        state = State.Succeeded;\r\n        \r\n        emit LogEndSale(state == State.Succeeded, totalEthDeposited, totalTokensBought);\r\n    }\r\n\r\n    function extendSale(uint _endTime) auth saleIn(State.Running) public\r\n    {\r\n        require(_endTime > endTime);\r\n\r\n        endTime = _endTime;\r\n        emit LogExtendSale(endTime);\r\n    }\r\n\r\n    function collectEth() auth public\r\n    {\r\n        require(address(this).balance > 0);\r\n\r\n        uint ethToCollect = address(this).balance;\r\n        totalEthCollected = add(totalEthCollected, ethToCollect);\r\n        address(beneficiary).transfer(ethToCollect);\r\n        \r\n        emit LogCollectEth(ethToCollect, totalEthDeposited);\r\n    }\r\n    \r\n    function whiteListAddresses(address[] _buyer,bool _status) auth public \r\n    {\r\n        for(uint tmp = 0; tmp < _buyer.length; tmp++)\r\n        {\r\n            whiteListedBuyers[_buyer[tmp]] = _status;    \r\n        }\r\n\r\n        emit LogWhitelistAddresses(_buyer,_status);\r\n    }\r\n\r\n    function updateWhiteListing(address _buyer,bool _status) auth public \r\n    {\r\n        require(_buyer != address(0));\r\n        \r\n        whiteListedBuyers[_buyer] = _status;\r\n        \r\n        emit LogUpdateWhitelisting(_buyer,_status);\r\n    }\r\n    \r\n    function updateBonusPercent(uint _percent) auth saleIn(State.Running) public\r\n    {\r\n        BONUS = _percent;\r\n        \r\n        emit LogBonusUpdate(_percent);\r\n    }\r\n    \r\n    function updateHardcap(uint _MAX_FUNDING) auth saleIn(State.Running) public\r\n    {\r\n        MAX_FUNDING = _MAX_FUNDING;\r\n        \r\n        emit LogHardcapUpdate(MAX_FUNDING);\r\n    }\r\n    \r\n    function updateExchangeRate(uint _tokensPerEth) auth saleIn(State.Running) public\r\n    {\r\n        tokensPerEth = _tokensPerEth;\r\n        \r\n        emit LogExchangeRateUpdate(tokensPerEth);\r\n    }\r\n\r\n    /********************** Private Methods ******************************/\r\n\r\n    \r\n\r\n    // calculate number of tokens buyer get when sending 'ethSent' ethers\r\n    // after 'ethDepostiedSoFar` already reeived in the sale\r\n    function calcTokensForPurchase(uint ethSentByUser) private view returns (uint tokens)\r\n    {\r\n        return wmul(ethSentByUser, tokensPerEth);\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"extendSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"totalEthDepositsViaOtherCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zeosXToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FUNDING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethDepositsViaOtherCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MAX_FUNDING\",\"type\":\"uint256\"}],\"name\":\"updateHardcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address[]\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"whiteListAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reciever\",\"type\":\"address\"},{\"name\":\"ethInWei\",\"type\":\"uint256\"},{\"name\":\"viaCurrency\",\"type\":\"bytes32\"},{\"name\":\"viaCurrencyAmt\",\"type\":\"bytes32\"},{\"name\":\"gatewayTxId\",\"type\":\"bytes32\"}],\"name\":\"buyTokensWithOtherCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateWhiteListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethRefunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"updateExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListedBuyers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateBonusPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"zeosXToken_\",\"type\":\"address\"},{\"name\":\"beneficiary_\",\"type\":\"address\"},{\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusToken\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"viaCurrency\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"viaCurrencyAmt\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"gatewayTxId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusToken\",\"type\":\"uint256\"}],\"name\":\"LogBuyViaOtherCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethRefund\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"LogStartSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"totalEthDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokensBought\",\"type\":\"uint256\"}],\"name\":\"LogEndSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"LogExtendSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethCollected\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalEthDeposited\",\"type\":\"uint256\"}],\"name\":\"LogCollectEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogWhitelistAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogUpdateWhitelisting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"LogBonusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_MAX_FUNDING\",\"type\":\"uint256\"}],\"name\":\"LogHardcapUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"LogExchangeRateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"ZeosXPrivatePreSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002c03192971db309d4c3df206b480792b0bebe9ef000000000000000000000000ab0874cb61d83f6b67dc08141568868102233bef00000000000000000000000000000000000000000000001b1ae4d6e2ef500000","Library":"","SwarmSource":"bzzr://40573673c1e6e192a1b0e13d9bf19707773b7785ec0ca458f4092a984837698b"}]}