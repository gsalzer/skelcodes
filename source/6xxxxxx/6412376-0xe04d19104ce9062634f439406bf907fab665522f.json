{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n\r\n  */\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    if (a == 0) {\r\n\r\n      return 0;\r\n\r\n    }\r\n\r\n    uint256 c = a * b;\r\n\r\n    require(c / a == b);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n\r\n  */\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    require(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\r\n  */\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    require(b <= a);\r\n\r\n    return a - b;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Adds two numbers, throws on overflow.\r\n\r\n  */\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    uint256 c = a + b;\r\n\r\n    require(c >= a);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable \r\n\r\n{\r\n\r\n  address public owner;\r\n\r\n \r\n\r\n  constructor(address _owner) public \r\n\r\n  {\r\n\r\n    owner = _owner;\r\n\r\n  }\r\n\r\n \r\n\r\n  modifier onlyOwner() \r\n\r\n  {\r\n\r\n    require(msg.sender == owner);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n \r\n\r\n  function transferOwnership(address newOwner) onlyOwner \r\n\r\n  {\r\n\r\n    require(newOwner != address(0));      \r\n\r\n    owner = newOwner;\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract BiLinkToken is StandardToken, Ownable {\r\n\tstring public name = \"BiLink\"; \r\n\tstring public symbol = \"BLK\";\r\n\tuint256 public decimals = 18;\r\n\tuint256 public INITIAL_SUPPLY = 10000 * 10000 * (10 ** decimals);\r\n\tbool public mintingFinished = false;\r\n\tuint256 public totalMintableAmount;\r\n\r\n\taddress public contractBalance;\r\n\r\n\taddress public accountFoundation;\r\n\taddress public accountCompany;\r\n\taddress public accountPartnerBase;\r\n\tmapping (address => uint256) public lockedAccount2WithdrawTap;\r\n\tmapping (address => uint256) public lockedAccount2WithdrawedAmount;\r\n\tuint256 public lockStartTime;\r\n\tuint256 public lockEndTime;\r\n\tuint256 public releaseEndTime;\r\n\tuint256 public tapOfOne;\r\n\tuint256 public amountMinted;\r\n\tuint256 public lockTimeSpan;\r\n\r\n\taddress[] public accountsCanShareProfit;//balance > 10000 * (10 ** decimals)\r\n\tuint256 public amountMinCanShareProfit;\r\n\r\n\tevent Burn(address indexed burner, uint256 value);\r\n\tevent Mint(address indexed to, uint256 amount);\r\n\tevent MintFinished();\r\n\r\n\tconstructor(address _owner, address _accountFoundation, address _accountCompany, address _accountPartnerBase) public \r\n\t\tOwnable(_owner)\r\n\t{\r\n\t\ttotalSupply_ = INITIAL_SUPPLY* 70/ 100;\r\n\t\taccountFoundation= _accountFoundation;\r\n\t\taccountCompany= _accountCompany;\r\n\t\taccountPartnerBase= _accountPartnerBase;\r\n\r\n\t\tlockStartTime= now;\r\n\t\tlockTimeSpan= 1 * 365 * 24 * 3600;\r\n\t\tlockEndTime= now+ lockTimeSpan;\r\n\t\treleaseEndTime= now+ 2 * lockTimeSpan;\r\n\r\n\t\tbalances[accountCompany]= INITIAL_SUPPLY* 40/ 100;\r\n\t\tbalances[accountFoundation]= INITIAL_SUPPLY* 10/ 100;\r\n\t\tbalances[accountPartnerBase]= INITIAL_SUPPLY* 20/ 100;\r\n\r\n\t\ttapOfOne= (10 ** decimals)/ (lockTimeSpan);\r\n\t\tlockedAccount2WithdrawTap[accountCompany]= tapOfOne.mul(balances[accountCompany]);\r\n\t\tlockedAccount2WithdrawTap[accountPartnerBase]= tapOfOne.mul(balances[accountPartnerBase]);\r\n\r\n\t\taccountsCanShareProfit.push(accountCompany);\r\n\t\taccountsCanShareProfit.push(accountFoundation);\r\n\t\taccountsCanShareProfit.push(accountPartnerBase);\r\n\r\n\t\tamountMinCanShareProfit= 10000 * (10 ** decimals);\r\n\t\ttotalMintableAmount= INITIAL_SUPPLY * 30/ 100;\r\n\t}\r\n\r\n\tfunction setMintAndBurnOwner (address _contractBalance) public onlyOwner {\r\n\t\tcontractBalance= _contractBalance;\r\n\t}\r\n\r\n\tfunction burn(uint256 _amount) public {\r\n\t\trequire(msg.sender== contractBalance);\r\n\t\trequire(_amount <= balances[msg.sender]);\r\n\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_amount);\r\n\t\ttotalSupply_ = totalSupply_.sub(_amount);\r\n\t\temit Burn(msg.sender, _amount);\r\n\t\temit Transfer(msg.sender, address(0), _amount);\r\n\t}\r\n\r\n\tfunction transferToPartnerAccount(address _partner, uint256 _amount) onlyOwner {\r\n\t\trequire(balances[accountPartnerBase].sub(_amount) > 0);\r\n\r\n\t\tbalances[_partner]= balances[_partner].add(_amount);\r\n\t\tbalances[accountPartnerBase]= balances[accountPartnerBase].sub(_amount);\r\n\r\n\t\tlockedAccount2WithdrawTap[_partner]= tapOfOne.mul(balances[_partner]);\r\n\r\n\t\tif(balances[_partner].sub(_amount) < amountMinCanShareProfit&& balances[_partner] >= amountMinCanShareProfit)\r\n\t\t\taccountsCanShareProfit.push(_partner);\r\n\t}\r\n\r\n\tmodifier canMint() {\r\n\t\trequire(!mintingFinished);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier hasMintPermission() {\r\n\t\trequire(msg.sender == contractBalance);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier canTransfer(address _from, address _to, uint256 _value)  {\r\n        require(_from != accountFoundation&& (lockedAccount2WithdrawTap[_from] <= 0 || now >= releaseEndTime || (now >= lockEndTime && _value <= (lockedAccount2WithdrawTap[_from].mul(now.sub(lockStartTime))).sub(lockedAccount2WithdrawedAmount[_from]))));\r\n        _;\r\n    }\r\n\r\n\tfunction mintFinished() public constant returns (bool) {\r\n\t\treturn mintingFinished;\r\n\t}\r\n\r\n\tfunction mint(address _to, uint256 _amount)\r\n\t\thasMintPermission\r\n\t\tcanMint\r\n\t\tpublic\r\n\t\treturns (bool)\r\n\t{\r\n\t\tuint256 _actualMintAmount= _amount.mul(totalMintableAmount- amountMinted).div(totalMintableAmount);\r\n\t\tif(amountMinted.add(_actualMintAmount) > totalMintableAmount) {\r\n\t\t\tfinishMinting();\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tamountMinted= amountMinted.add(_actualMintAmount);\r\n\t\t\ttotalSupply_ = totalSupply_.add(_actualMintAmount);\r\n\t\t\tbalances[_to] = balances[_to].add(_actualMintAmount);\r\n\r\n\t\t\temit Mint(_to, _actualMintAmount);\r\n\t\t\temit Transfer(address(0), _to, _actualMintAmount);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction finishMinting() canMint private returns (bool) {\r\n\t\tmintingFinished = true;\r\n\t\temit MintFinished();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction preTransfer(address _from, address _to, uint256 _value) private {\r\n\t\tif(lockedAccount2WithdrawTap[_from] > 0)\r\n\t\t\tlockedAccount2WithdrawedAmount[_from]= lockedAccount2WithdrawedAmount[_from].add(_value);\r\n\r\n\t\tif(balances[_from] >= amountMinCanShareProfit && balances[_from].sub(_value) < amountMinCanShareProfit) {\r\n\t\t\tfor(uint256 i= 0; i< accountsCanShareProfit.length; i++) {\r\n\r\n\t\t\t\tif(accountsCanShareProfit[i]== _from) {\r\n\r\n\t\t\t\t\tif(i< accountsCanShareProfit.length- 1&& accountsCanShareProfit.length> 1)\r\n\r\n\t\t\t\t\t\taccountsCanShareProfit[i]= accountsCanShareProfit[accountsCanShareProfit.length- 1];\r\n\r\n\t\t\t\t\tdelete accountsCanShareProfit[accountsCanShareProfit.length- 1];\r\n\r\n\t\t\t\t\taccountsCanShareProfit.length--;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(balances[_to] < amountMinCanShareProfit&& balances[_to].add(_value) >= amountMinCanShareProfit) {\r\n\t\t\taccountsCanShareProfit.push(_to);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public canTransfer(msg.sender, _to, _value) returns (bool) {\r\n\t\tpreTransfer(msg.sender, _to, _value);\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to, _value) returns (bool) {\r\n\t\tpreTransfer(_from, _to, _value);\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender, _value) returns (bool) {\r\n        return super.approve(_spender,_value);\r\n    }\r\n\r\n\tfunction getCanShareProfitAccounts() public constant returns (address[]) {\r\n\t\treturn accountsCanShareProfit;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountFoundation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractBalance\",\"type\":\"address\"}],\"name\":\"setMintAndBurnOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCanShareProfitAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tapOfOne\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToPartnerAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAccount2WithdrawedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountPartnerBase\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountsCanShareProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMintableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAccount2WithdrawTap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountMinCanShareProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockTimeSpan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_accountFoundation\",\"type\":\"address\"},{\"name\":\"_accountCompany\",\"type\":\"address\"},{\"name\":\"_accountPartnerBase\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BiLinkToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e4e3627034a97b75d899ee7525d446bf2d42ad66000000000000000000000000174bd933a24a24d1823de6fa7ba292ae9c936a3c000000000000000000000000c1c7ba872a1402c96bea0f5195eb3a3c6c6650260000000000000000000000002e8260441032a4502a1e6109426195b494c5a32e","Library":"","SwarmSource":"bzzr://5b81d127688d79f474487642f32fd7b51f940fddc96472078fb9eee3e2a804b8"}]}