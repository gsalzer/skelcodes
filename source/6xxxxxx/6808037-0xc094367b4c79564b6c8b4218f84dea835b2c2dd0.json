{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/***\r\n * https://templeofeth.io\r\n *\r\n * Tiki Madness.\r\n *\r\n * 6 Tiki Masks are flipping\r\n * Price increases by 32% every flip.\r\n *\r\n * 10% of rise buyer gets TMPL tokens in the TempleOfETH.\r\n * 5% of rise goes to tiki holder fund.\r\n * 5% of rise goes to temple management.\r\n * 2% of rise goes to the God Tiki owner (The Tiki with the lowest value.)\r\n * The rest (110%) goes to previous owner.\r\n * Over 1 hour price will fall to 12.5% of the Tiki Holder fund..\r\n * Holders after 1 hours with no flip can collect the holder fund.\r\n *\r\n * Temple Warning: Do not play with more than you can afford to lose.\r\n */\r\n\r\ncontract TempleInterface {\r\n  function purchaseFor(address _referredBy, address _customerAddress) public payable returns (uint256);\r\n}\r\n\r\ncontract TikiMadness {\r\n\r\n  /*=================================\r\n  =            MODIFIERS            =\r\n  =================================*/\r\n\r\n  /// @dev Access modifier for owner functions\r\n  modifier onlyOwner() {\r\n    require(msg.sender == contractOwner);\r\n    _;\r\n  }\r\n\r\n  /// @dev Prevent contract calls.\r\n  modifier notContract() {\r\n    require(tx.origin == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /// @dev notPaused\r\n  modifier notPaused() {\r\n    require(now > startTime);\r\n    _;\r\n  }\r\n\r\n  /// @dev easyOnGas\r\n  modifier easyOnGas() {\r\n    require(tx.gasprice < 99999999999);\r\n    _;\r\n  }\r\n\r\n  /*==============================\r\n  =            EVENTS            =\r\n  ==============================*/\r\n\r\n  event onTokenSold(\r\n       uint256 indexed tokenId,\r\n       uint256 price,\r\n       address prevOwner,\r\n       address newOwner,\r\n       string name\r\n    );\r\n\r\n\r\n  /*==============================\r\n  =            CONSTANTS         =\r\n  ==============================*/\r\n\r\n  uint256 private increaseRatePercent =  132;\r\n  uint256 private godTikiPercent =  2; // 2% of all sales\r\n  uint256 private devFeePercent =  5;\r\n  uint256 private bagHolderFundPercent =  5;\r\n  uint256 private exchangeTokenPercent =  10;\r\n  uint256 private previousOwnerPercent =  110;\r\n  uint256 private priceFallDuration =  1 hours;\r\n\r\n  /*==============================\r\n  =            STORAGE           =\r\n  ==============================*/\r\n\r\n  /// @dev A mapping from tiki IDs to the address that owns them.\r\n  mapping (uint256 => address) public tikiIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  // @dev The address of the owner\r\n  address public contractOwner;\r\n  \r\n  /// @dev Start Time\r\n  uint256 public startTime = 1543692600; // GMT: Saturday, December 1, 2018 19:30:00 PM\r\n\r\n  // @dev Current dev fee\r\n  uint256 public currentDevFee = 0;\r\n\r\n  // @dev The address of the temple contract\r\n  address public templeOfEthaddress = 0x0e21902d93573c18fd0acbadac4a5464e9732f54; // MAINNET\r\n\r\n  /// @dev Interface to temple\r\n  TempleInterface public templeContract;\r\n\r\n  /*==============================\r\n  =            DATATYPES         =\r\n  ==============================*/\r\n\r\n  struct TikiMask {\r\n    string name;\r\n    uint256 basePrice; // current base price = 12.5% of holder fund.\r\n    uint256 highPrice;\r\n    uint256 fallDuration;\r\n    uint256 saleTime; // when was sold last\r\n    uint256 bagHolderFund;\r\n  }\r\n\r\n  TikiMask [6] public tikiMasks;\r\n\r\n  constructor () public {\r\n\r\n    contractOwner = msg.sender;\r\n    templeContract = TempleInterface(templeOfEthaddress);\r\n\r\n    TikiMask memory _Huracan = TikiMask({\r\n            name: \"Huracan\",\r\n            basePrice: 0.015 ether,\r\n            highPrice: 0.015 ether,\r\n            fallDuration: priceFallDuration,\r\n            saleTime: now,\r\n            bagHolderFund: 0\r\n            });\r\n\r\n    tikiMasks[0] =  _Huracan;\r\n\r\n    TikiMask memory _Itzamna = TikiMask({\r\n            name: \"Itzamna\",\r\n            basePrice: 0.018 ether,\r\n            highPrice: 0.018 ether,\r\n            fallDuration: priceFallDuration,\r\n            saleTime: now,\r\n            bagHolderFund: 0\r\n            });\r\n\r\n    tikiMasks[1] =  _Itzamna;\r\n\r\n    TikiMask memory _Mitnal = TikiMask({\r\n            name: \"Mitnal\",\r\n            basePrice: 0.020 ether,\r\n            highPrice: 0.020 ether,\r\n            fallDuration: priceFallDuration,\r\n            saleTime: now,\r\n            bagHolderFund: 0\r\n            });\r\n\r\n    tikiMasks[2] =  _Mitnal;\r\n\r\n    TikiMask memory _Tepeu = TikiMask({\r\n            name: \"Tepeu\",\r\n            basePrice: 0.025 ether,\r\n            highPrice: 0.025 ether,\r\n            fallDuration: priceFallDuration,\r\n            saleTime: now,\r\n            bagHolderFund: 0\r\n            });\r\n\r\n    tikiMasks[3] =  _Tepeu;\r\n\r\n    TikiMask memory _Usukan = TikiMask({\r\n            name: \"Usukan\",\r\n            basePrice: 0.030 ether,\r\n            highPrice: 0.030 ether,\r\n            fallDuration: priceFallDuration,\r\n            saleTime: now,\r\n            bagHolderFund: 0\r\n            });\r\n\r\n    tikiMasks[4] =  _Usukan;\r\n\r\n    TikiMask memory _Voltan = TikiMask({\r\n            name: \"Voltan\",\r\n            basePrice: 0.035 ether,\r\n            highPrice: 0.035 ether,\r\n            fallDuration: priceFallDuration,\r\n            saleTime: now,\r\n            bagHolderFund: 0\r\n            });\r\n\r\n    tikiMasks[5] =  _Voltan;\r\n\r\n    _transfer(0x0, contractOwner, 0);\r\n    _transfer(0x0, contractOwner, 1);\r\n    _transfer(0x0, contractOwner, 2);\r\n    _transfer(0x0, contractOwner, 3);\r\n    _transfer(0x0, contractOwner, 4);\r\n    _transfer(0x0, contractOwner, 5);\r\n\r\n\r\n  }\r\n\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific tiki.\r\n  /// @param _tokenId The tokenId of the tiki of interest.\r\n  function getTiki(uint256 _tokenId) public view returns (\r\n    string tikiName,\r\n    uint256 currentPrice,\r\n    uint256 basePrice,\r\n    address currentOwner,\r\n    uint256 bagHolderFund,\r\n    bool isBagFundAvailable\r\n  ) {\r\n    TikiMask storage tiki = tikiMasks[_tokenId];\r\n    tikiName = tiki.name;\r\n    currentPrice = priceOf(_tokenId);\r\n    basePrice = tiki.basePrice;\r\n    currentOwner = tikiIndexToOwner[_tokenId];\r\n    bagHolderFund = tiki.bagHolderFund;\r\n    isBagFundAvailable = now > (tiki.saleTime + priceFallDuration);\r\n  }\r\n\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = tikiIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId , address _referredBy) public payable notContract notPaused easyOnGas  {\r\n\r\n    address oldOwner = tikiIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n    uint256 currentPrice = priceOf(_tokenId);\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= currentPrice);\r\n\r\n    uint256 previousOwnerGets = SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),previousOwnerPercent);\r\n    uint256 exchangeTokensAmount = SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),exchangeTokenPercent);\r\n    uint256 devFeeAmount = SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),devFeePercent);\r\n    uint256 bagHolderFundAmount = SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),bagHolderFundPercent);\r\n    uint256 godTikiGets = SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),godTikiPercent);\r\n\r\n    if (msg.value>currentPrice){\r\n      bagHolderFundAmount = bagHolderFundAmount + (msg.value-currentPrice); // overbidding should be discouraged\r\n    }\r\n    currentDevFee = currentDevFee + devFeeAmount;\r\n\r\n    // buy the tokens for this player and include the referrer too (templenodes work)\r\n    templeContract.purchaseFor.value(exchangeTokensAmount)(_referredBy, msg.sender);\r\n \r\n    // the god tiki receives their amount.\r\n    ownerOf(godTiki()).transfer(godTikiGets);\r\n\r\n    // do the sale\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // set new price and saleTime\r\n    tikiMasks[_tokenId].highPrice = SafeMath.mul(SafeMath.div(currentPrice,100),increaseRatePercent);\r\n    tikiMasks[_tokenId].saleTime = now;\r\n    tikiMasks[_tokenId].bagHolderFund = tikiMasks[_tokenId].bagHolderFund + bagHolderFundAmount;\r\n    tikiMasks[_tokenId].basePrice = max(tikiMasks[_tokenId].basePrice,SafeMath.div(tikiMasks[_tokenId].bagHolderFund,8));  // 12.5% of the holder fund\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      if (oldOwner.send(previousOwnerGets)){}\r\n    }\r\n\r\n    emit onTokenSold(_tokenId, currentPrice, oldOwner, newOwner, tikiMasks[_tokenId].name);\r\n\r\n  }\r\n\r\n  /// @dev this is the tiki with the current lowest value - it receives 2% of ALL sales.\r\n  function godTiki() public view returns (uint256 tokenId) {\r\n    uint256 lowestPrice = priceOf(0);\r\n    uint256 lowestId = 0;\r\n    for(uint x=1;x<6;x++){\r\n      if(priceOf(x)<lowestPrice){\r\n        lowestId=x;\r\n      }\r\n    }\r\n    return lowestId;\r\n  }\r\n\r\n  /// @dev calculate the current price of this token\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n\r\n    TikiMask storage tiki = tikiMasks[_tokenId];\r\n    uint256 secondsPassed  = now - tiki.saleTime;\r\n\r\n    if (secondsPassed >= tiki.fallDuration || tiki.highPrice==tiki.basePrice) {\r\n            return tiki.basePrice;\r\n    }\r\n\r\n    uint256 totalPriceChange = tiki.highPrice - tiki.basePrice;\r\n    uint256 currentPriceChange = totalPriceChange * secondsPassed /tiki.fallDuration;\r\n    uint256 currentPrice = tiki.highPrice - currentPriceChange;\r\n\r\n    return currentPrice;\r\n  }\r\n\r\n  /// @dev allow holder to collect fund if time is expired\r\n  function collectBagHolderFund(uint256 _tokenId) public notPaused {\r\n      require(msg.sender == tikiIndexToOwner[_tokenId]);\r\n      uint256 bagHolderFund;\r\n      bool isBagFundAvailable = false;\r\n       (\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        bagHolderFund,\r\n        isBagFundAvailable\r\n        ) = getTiki(_tokenId);\r\n        require(isBagFundAvailable && bagHolderFund > 0);\r\n        uint256 amount = bagHolderFund;\r\n        tikiMasks[_tokenId].bagHolderFund = 0;\r\n        tikiMasks[_tokenId].basePrice = 0.015 ether;\r\n        msg.sender.transfer(amount);\r\n  }\r\n\r\n  function paused() public view returns (bool){\r\n    return (now < startTime);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == tikiIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific token to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n\r\n    // no transfer to contract\r\n    uint length;\r\n    assembly { length := extcodesize(_to) }\r\n    require (length == 0);\r\n\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    tikiIndexToOwner[_tokenId] = _to;\r\n\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n    }\r\n  }\r\n\r\n  /// @dev Not a charity\r\n  function collectDevFees() public onlyOwner {\r\n      if (currentDevFee < address(this).balance){\r\n         uint256 amount = currentDevFee;\r\n         currentDevFee = 0;\r\n         contractOwner.transfer(amount);\r\n      }\r\n  }\r\n\r\n\r\n    /// @dev stop and start\r\n    function max(uint a, uint b) private pure returns (uint) {\r\n           return a > b ? a : b;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"godTiki\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tikiIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectDevFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"templeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"templeOfEthaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTiki\",\"outputs\":[{\"name\":\"tikiName\",\"type\":\"string\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"currentOwner\",\"type\":\"address\"},{\"name\":\"bagHolderFund\",\"type\":\"uint256\"},{\"name\":\"isBagFundAvailable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tikiMasks\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"highPrice\",\"type\":\"uint256\"},{\"name\":\"fallDuration\",\"type\":\"uint256\"},{\"name\":\"saleTime\",\"type\":\"uint256\"},{\"name\":\"bagHolderFund\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDevFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"collectBagHolderFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"onTokenSold\",\"type\":\"event\"}]","ContractName":"TikiMadness","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://30762886c4b796c5fd797c226d6da6854ae0728cd9bdd15ad91ca880cd1f4f12"}]}