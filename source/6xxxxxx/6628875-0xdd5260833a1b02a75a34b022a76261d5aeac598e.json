{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public admin;\r\n  uint256 public lockedIn;\r\n  uint256 public OWNER_AMOUNT;\r\n  uint256 public OWNER_PERCENT = 2;\r\n  uint256 public OWNER_MIN = 0.0001 ether;\r\n  \r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor(address addr, uint256 percent, uint256 min) public {\r\n    require(addr != address(0), 'invalid addr');\r\n    owner = msg.sender;\r\n    admin = addr;\r\n    OWNER_PERCENT = percent;\r\n    OWNER_MIN = min;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender==owner || msg.sender==admin);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n  function _cash() public view returns(uint256){\r\n      return address(this).balance;\r\n  }\r\n\r\n  function kill() onlyOwner public{\r\n    require(lockedIn == 0, \"invalid lockedIn\");\r\n    selfdestruct(owner);\r\n  }\r\n  \r\n  function setAdmin(address addr) onlyOwner public{\r\n      require(addr != address(0), 'invalid addr');\r\n      admin = addr;\r\n  }\r\n  \r\n  function setOwnerPercent(uint256 percent) onlyOwner public{\r\n      OWNER_PERCENT = percent;\r\n  }\r\n  \r\n  function setOwnerMin(uint256 min) onlyOwner public{\r\n      OWNER_MIN = min;\r\n  }\r\n  \r\n  function _fee() internal returns(uint256){\r\n      uint256 fe = msg.value*OWNER_PERCENT/100;\r\n      if(fe < OWNER_MIN){\r\n          fe = OWNER_MIN;\r\n      }\r\n      OWNER_AMOUNT += fe;\r\n      return fe;\r\n  }\r\n  \r\n  function cashOut() onlyOwner public{\r\n    require(OWNER_AMOUNT > 0, 'invalid OWNER_AMOUNT');\r\n    owner.send(OWNER_AMOUNT);\r\n  }\r\n\r\n  modifier isHuman() {\r\n      address _addr = msg.sender;\r\n      uint256 _codeLength;\r\n      assembly {_codeLength := extcodesize(_addr)}\r\n      require(_codeLength == 0, \"sorry humans only\");\r\n      _;\r\n  }\r\n\r\n  modifier isContract() {\r\n      address _addr = msg.sender;\r\n      uint256 _codeLength;\r\n      assembly {_codeLength := extcodesize(_addr)}\r\n      require(_codeLength > 0, \"sorry contract only\");\r\n      _;\r\n  }\r\n}\r\n\r\n /**\r\n * luck100.win - Fair Ethereum game platform\r\n * \r\n * Single dice\r\n * \r\n * Winning rules:\r\n * \r\n * result = sha3(txhash + blockhash(betBN+3)) % 6 + 1\r\n * \r\n * 1.The player chooses a bet of 1-6 and bets up to 5 digits at the same time;\r\n * \r\n * 2.After the player bets successfully, get the transaction hash txhash;\r\n * \r\n * 3.Take the block that the player bets to count the new 3rd Ethereum block hash blockhash;\r\n * \r\n * 4.Txhash and blockhash are subjected to sha3 encryption operation, and then modulo with 6 to \r\n * get the result of the lottery.\r\n */\r\n\r\n\r\ncontract Dice1Contract is Ownable{\r\n    event betEvent(address indexed addr, uint256 betBlockNumber, uint256 betMask, uint256 amount);\r\n    event openEvent(address indexed addr, uint256 openBlockNumber, uint256 openNumber, bytes32 txhash, bool isWin);\r\n    struct Bet{\r\n        uint256 betBlockNumber;\r\n        uint256 openBlockNumber;\r\n        uint256 betMask;\r\n        uint256 openNumber;\r\n        uint256 amount;\r\n        uint256 winAmount;\r\n        bytes32 txhash;\r\n        bytes32 openHash;\r\n        bool isWin;\r\n    }\r\n    mapping(address=>mapping(uint256=>Bet)) betList;\r\n    uint256 constant MIN_BET = 0.01 ether;\r\n    uint8 public N = 3;\r\n    uint8 constant M = 6;\r\n    uint16[M] public MASKS = [0, 32, 48, 56, 60, 62];\r\n    uint16[M] public AMOUNTS = [0, 101, 253, 510, 1031, 2660];\r\n    uint16[M] public ODDS = [0, 600, 300, 200, 150, 120];\r\n    \r\n    constructor(address addr, uint256 percent, uint256 min) Ownable(addr, percent, min) public{\r\n        \r\n    }\r\n    \r\n    function() public payable{\r\n        uint8 diceNum = uint8(msg.data.length);\r\n        uint256 betMask = 0;\r\n        uint256 t = 0;\r\n        for(uint8 i=0;i<diceNum;i++){\r\n            t = uint256(msg.data[i]);\r\n            if(t==0 || t>M){\r\n                diceNum--;\r\n                continue;\r\n            }\r\n            betMask += 2**(t-1);\r\n        }\r\n        if(diceNum==0) return ;\r\n        _placeBet(betMask, diceNum);\r\n    }\r\n    \r\n    function placeBet(uint256 betMask, uint8 diceNum) public payable{\r\n        _placeBet(betMask, diceNum);\r\n    }\r\n    \r\n    function _placeBet(uint256 betMask, uint8 diceNum) private{\r\n        require(diceNum>0 && diceNum<M, 'invalid diceNum');\r\n        uint256 MAX_BET = AMOUNTS[diceNum]/100*(10**18);\r\n        require(msg.value>=MIN_BET && msg.value<=MAX_BET, 'invalid amount');\r\n        require(betMask>0 && betMask<=MASKS[diceNum], 'invalid betMask');\r\n        uint256 fee = _fee();\r\n        uint256 winAmount = (msg.value-fee)*ODDS[diceNum]/100;\r\n        lockedIn += winAmount;\r\n        betList[msg.sender][block.number] = Bet({\r\n            betBlockNumber:block.number,\r\n            openBlockNumber:block.number+N,\r\n            betMask:betMask,\r\n            openNumber:0,\r\n            amount:msg.value,\r\n            winAmount:winAmount,\r\n            txhash:0,\r\n            openHash:0,\r\n            isWin:false\r\n        });\r\n        emit betEvent(msg.sender, block.number, betMask, msg.value);\r\n    }\r\n    \r\n    function setN(uint8 n) onlyOwner public{\r\n        N = n;\r\n    }\r\n    \r\n    function open(address addr, uint256 bn, bytes32 txhash) onlyOwner public{\r\n        uint256 openBlockNumber = betList[addr][bn].openBlockNumber;\r\n        bytes32 openBlockHash = blockhash(openBlockNumber);\r\n        require(uint256(openBlockHash)>0, 'invalid openBlockNumber');\r\n        _open(addr, bn, txhash, openBlockHash);\r\n    }\r\n    \r\n    function open2(address addr, uint256 bn, bytes32 txhash, bytes32 openBlockHash) onlyOwner public{\r\n        _open(addr, bn, txhash, openBlockHash);\r\n    }\r\n    \r\n    function _open(address addr, uint256 bn, bytes32 txhash, bytes32 openBlockHash) private{\r\n        Bet storage bet = betList[addr][bn];\r\n        require(bet.betBlockNumber==bn && bet.openNumber==0, 'invalid bet');\r\n        lockedIn -= bet.winAmount;\r\n        bytes32 openHash = keccak256(abi.encodePacked(txhash, openBlockHash));\r\n        uint256 r = uint256(openHash) % M;\r\n        uint256 t = bet.betMask & (2**r);\r\n        bet.openNumber = r+1;\r\n        bet.txhash = txhash;\r\n        bet.openHash = openHash;\r\n        if(t > 0){\r\n            bet.isWin = true;\r\n            addr.send(bet.winAmount);\r\n        }\r\n        emit openEvent(addr, bet.openBlockNumber, bet.openNumber, txhash, bet.isWin);\r\n    }\r\n    \r\n    function getBet(address addr, uint256 bn) view public returns(uint256,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32,bool){\r\n        Bet memory bet = betList[addr][bn];\r\n        return (bet.betBlockNumber, bet.openBlockNumber, bet.betMask, bet.openNumber, bet.amount, bet.winAmount, bet.txhash, bet.openHash, bet.isWin);\r\n    }\r\n    \r\n    function output() view public returns(uint8,uint256,uint256,uint16[M],uint16[M],uint16[M]){\r\n        return (N, OWNER_PERCENT, OWNER_MIN, MASKS, AMOUNTS, ODDS);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"betMask\",\"type\":\"uint256\"},{\"name\":\"diceNum\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_cash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"setOwnerMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ODDS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MASKS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cashOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"bn\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint8\"}],\"name\":\"setN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"bn\",\"type\":\"uint256\"},{\"name\":\"txhash\",\"type\":\"bytes32\"},{\"name\":\"openBlockHash\",\"type\":\"bytes32\"}],\"name\":\"open2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setOwnerPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"N\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AMOUNTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"output\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint16[6]\"},{\"name\":\"\",\"type\":\"uint16[6]\"},{\"name\":\"\",\"type\":\"uint16[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"bn\",\"type\":\"uint256\"},{\"name\":\"txhash\",\"type\":\"bytes32\"}],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"min\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"betBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betMask\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"betEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"openBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"openNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txhash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isWin\",\"type\":\"bool\"}],\"name\":\"openEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Dice1Contract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c54427a77b54304cbae1e76815b7935a817f44a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000b5e620f48000","Library":"","SwarmSource":"bzzr://3ac7e3b72a8e68111f160226977bba1132d1ce8c35bc7ad797c02fc1fc2d005c"}]}