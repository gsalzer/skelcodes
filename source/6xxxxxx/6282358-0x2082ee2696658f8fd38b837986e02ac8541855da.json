{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface FoundationInterface {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface PlayerBookReceiverInterface {\r\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff) external;\r\n    function receivePlayerNameList(uint256 _pID, bytes32 _name) external;\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You are not owner.\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"Invalid address.\");\r\n\r\n        owner = _newOwner;\r\n\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n}\r\n\r\ncontract PlayerBook is Ownable {\r\n    using SafeMath for uint256;\r\n    using NameFilter for string;\r\n\r\n    FoundationInterface private foundation = FoundationInterface(0x2Ad0EbB0FFa7A9c698Ae7F1d23BD7d86FF0ae386);\r\n\r\n    uint256 public registrationFee_ = 10 finney;\r\n    mapping(uint256 => PlayerBookReceiverInterface) public games_;\r\n    mapping(address => bytes32) public gameNames_;\r\n    mapping(address => uint256) public gameIDs_;\r\n\r\n    uint256 public gID_;\r\n    uint256 public pID_;\r\n    mapping (address => uint256) public pIDxAddr_;\r\n    mapping (bytes32 => uint256) public pIDxName_;\r\n\r\n    struct Player {\r\n        address addr;\r\n        bytes32 name;\r\n        uint256 laff;\r\n        uint256 names;\r\n    }\r\n\r\n    mapping (uint256 => Player) public plyr_;\r\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_;\r\n    mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_;\r\n\r\n    event onNewName(\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {\r\n            _codeLength := extcodesize(_addr)\r\n        }\r\n\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    modifier isRegisteredGame() {\r\n        require(gameIDs_[msg.sender] != 0);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        plyr_[1].addr = 0xC464F4001C76558AD802bBA405A9E0658dcb1F75;\r\n        plyr_[1].name = \"asia\";\r\n        plyr_[1].names = 1;\r\n        pIDxAddr_[0xC464F4001C76558AD802bBA405A9E0658dcb1F75] = 1;\r\n        pIDxName_[\"asia\"] = 1;\r\n        plyrNames_[1][\"asia\"] = true;\r\n        plyrNameList_[1][1] = \"asia\";\r\n\r\n        pID_ = 1;\r\n    }\r\n\r\n    function setFoundationInterface(address _who) public onlyOwner {\r\n        foundation = FoundationInterface(_who);\r\n    }\r\n\r\n    function checkIfNameValid(string _nameStr) public view returns(bool) {\r\n        bytes32 _name = _nameStr.nameFilter();\r\n        if (pIDxName_[_name] == 0) {\r\n            return (true);\r\n        } else {\r\n            return (false);\r\n        }\r\n    }\r\n\r\n    function registerNameXID(string _nameString, uint256 _affCode, bool _all) public payable isHuman {\r\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n        address _addr = msg.sender;\r\n\r\n        bool _isNewPlayer = determinePID(_addr);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        if (_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID) {\r\n            plyr_[_pID].laff = _affCode;\r\n        } else if (_affCode == _pID) {\r\n            _affCode = 0;\r\n        }\r\n\r\n        registerNameCore(_pID, _addr, _affCode, _name, _isNewPlayer, _all);\r\n    }\r\n\r\n    function registerNameXaddr(string _nameString, address _affCode, bool _all) public payable isHuman {\r\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n        address _addr = msg.sender;\r\n\r\n        bool _isNewPlayer = determinePID(_addr);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        uint256 _affID;\r\n        if (_affCode != address(0) && _affCode != _addr) {\r\n            _affID = pIDxAddr_[_affCode];\r\n            if (_affID != plyr_[_pID].laff) {\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\r\n    }\r\n\r\n    function registerNameXname(string _nameString, bytes32 _affCode, bool _all) public payable isHuman {\r\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n        address _addr = msg.sender;\r\n\r\n        bool _isNewPlayer = determinePID(_addr);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        uint256 _affID;\r\n        if (_affCode != \"\" && _affCode != _name) {\r\n            _affID = pIDxName_[_affCode];\r\n            if (_affID != plyr_[_pID].laff) {\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\r\n    }\r\n\r\n    function addMeToGame(uint256 _gameID) public isHuman {\r\n        require(_gameID <= gID_, \"silly player, that game doesn't exist yet\");\r\n\r\n        address _addr = msg.sender;\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        require(_pID != 0, \"hey there buddy, you dont even have an account\");\r\n\r\n        games_[_gameID].receivePlayerInfo(_pID, _addr, plyr_[_pID].name, plyr_[_pID].laff);\r\n\r\n        uint256 _totalNames = plyr_[_pID].names;\r\n        if (_totalNames > 1) {\r\n            for (uint256 ii = 1; ii <= _totalNames; ii++) {\r\n                games_[_gameID].receivePlayerNameList(_pID, plyrNameList_[_pID][ii]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addMeToAllGames() public isHuman {\r\n        address _addr = msg.sender;\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        require(_pID != 0, \"hey there buddy, you dont even have an account\");\r\n\r\n        uint256 _laff = plyr_[_pID].laff;\r\n        uint256 _totalNames = plyr_[_pID].names;\r\n        bytes32 _name = plyr_[_pID].name;\r\n\r\n        for (uint256 i = 1; i <= gID_; i++) {\r\n            games_[i].receivePlayerInfo(_pID, _addr, _name, _laff);\r\n            if (_totalNames > 1) {\r\n                for (uint256 ii = 1; ii <= _totalNames; ii++) {\r\n                    games_[i].receivePlayerNameList(_pID, plyrNameList_[_pID][ii]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function useMyOldName(string _nameString) public isHuman {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        require(plyrNames_[_pID][_name] == true, \"umm... thats not a name you own\");\r\n\r\n        plyr_[_pID].name = _name;\r\n    }\r\n\r\n    function registerNameCore(uint256 _pID, address _addr, uint256 _affID, bytes32 _name, bool _isNewPlayer, bool _all) private {\r\n        if (pIDxName_[_name] != 0) {\r\n            require(plyrNames_[_pID][_name] == true, \"sorry that names already taken\");\r\n        }\r\n\r\n        plyr_[_pID].name = _name;\r\n        pIDxName_[_name] = _pID;\r\n        if (plyrNames_[_pID][_name] == false) {\r\n            plyrNames_[_pID][_name] = true;\r\n            plyr_[_pID].names++;\r\n            plyrNameList_[_pID][plyr_[_pID].names] = _name;\r\n        }\r\n\r\n        foundation.deposit.value(address(this).balance)();\r\n\r\n        if (_all == true) {\r\n            for (uint256 i = 1; i <= gID_; i++) {\r\n                games_[i].receivePlayerInfo(_pID, _addr, _name, _affID);\r\n            }\r\n        }\r\n\r\n        emit onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, msg.value, now);\r\n    }\r\n\r\n    function determinePID(address _addr) private returns (bool) {\r\n        if (pIDxAddr_[_addr] == 0) {\r\n            pID_++;\r\n            pIDxAddr_[_addr] = pID_;\r\n            plyr_[pID_].addr = _addr;\r\n\r\n            return (true);\r\n        } else {\r\n            return (false);\r\n        }\r\n    }\r\n\r\n    function getPlayerID(address _addr) external isRegisteredGame returns (uint256) {\r\n        determinePID(_addr);\r\n\r\n        return (pIDxAddr_[_addr]);\r\n    }\r\n\r\n    function getPlayerName(uint256 _pID) external view returns (bytes32) {\r\n        return (plyr_[_pID].name);\r\n    }\r\n\r\n    function getPlayerLAff(uint256 _pID) external view returns (uint256) {\r\n        return (plyr_[_pID].laff);\r\n    }\r\n\r\n    function getPlayerAddr(uint256 _pID) external view returns (address) {\r\n        return (plyr_[_pID].addr);\r\n    }\r\n\r\n    function getNameFee() external view returns (uint256) {\r\n        return(registrationFee_);\r\n    }\r\n\r\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) external payable isRegisteredGame returns(bool, uint256) {\r\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n\r\n        bool _isNewPlayer = determinePID(_addr);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        uint256 _affID = _affCode;\r\n        if (_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID) {\r\n            plyr_[_pID].laff = _affID;\r\n        } else if (_affID == _pID) {\r\n            _affID = 0;\r\n        }\r\n\r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\r\n\r\n        return(_isNewPlayer, _affID);\r\n    }\r\n\r\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) external payable isRegisteredGame returns(bool, uint256) {\r\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n\r\n        bool _isNewPlayer = determinePID(_addr);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        uint256 _affID;\r\n        if (_affCode != address(0) && _affCode != _addr) {\r\n            _affID = pIDxAddr_[_affCode];\r\n            if (_affID != plyr_[_pID].laff) {\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\r\n\r\n        return(_isNewPlayer, _affID);\r\n    }\r\n\r\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) external payable isRegisteredGame returns(bool, uint256) {\r\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n\r\n        bool _isNewPlayer = determinePID(_addr);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        uint256 _affID;\r\n        if (_affCode != \"\" && _affCode != _name) {\r\n            _affID = pIDxName_[_affCode];\r\n            if (_affID != plyr_[_pID].laff) {\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\r\n\r\n        return(_isNewPlayer, _affID);\r\n    }\r\n\r\n    function addGame(address _gameAddress, string _gameNameStr) public onlyOwner {\r\n        require(gameIDs_[_gameAddress] == 0, \"derp, that games already been registered\");\r\n\r\n        gID_++;\r\n        bytes32 _name = _gameNameStr.nameFilter();\r\n        gameIDs_[_gameAddress] = gID_;\r\n        gameNames_[_gameAddress] = _name;\r\n        games_[gID_] = PlayerBookReceiverInterface(_gameAddress);\r\n\r\n        games_[gID_].receivePlayerInfo(1, plyr_[1].addr, plyr_[1].name, 0);\r\n    }\r\n\r\n    function setRegistrationFee(uint256 _fee) public onlyOwner {\r\n        registrationFee_ = _fee;\r\n    }\r\n}\r\n\r\nlibrary NameFilter {\r\n    function nameFilter(string _input) internal pure returns(bytes32) {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        if (_temp[0] == 0x30) {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n\r\n        bool _hasNonNumber;\r\n\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b) {\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n                if (_hasNonNumber == false) {\r\n                    _hasNonNumber = true;\r\n                }\r\n            } else {\r\n                require(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a), \"string contains invalid characters\");\r\n                if (_temp[i] == 0x20) {\r\n                    require( _temp[i + 1] != 0x20, \"string cannot contain consecutive spaces\");\r\n                }\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)) {\r\n                    _hasNonNumber = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"addMeToAllGames\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNameFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"plyrNames_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameNames_\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"setFoundationInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"},{\"name\":\"_gameNameStr\",\"type\":\"string\"}],\"name\":\"addGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameStr\",\"type\":\"string\"}],\"name\":\"checkIfNameValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXnameFromDapp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameID\",\"type\":\"uint256\"}],\"name\":\"addMeToGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXID\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrNameList_\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXaddrFromDapp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"}],\"name\":\"useMyOldName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXIDFromDapp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setRegistrationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameIDs_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"names\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerLAff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isNewPlayer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PlayerBook","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d4b09a06cc902cd3989aba40a5b14a53d27965d0dfa11932eabce41f55744337"}]}