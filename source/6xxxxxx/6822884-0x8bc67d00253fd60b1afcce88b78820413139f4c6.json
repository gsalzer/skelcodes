{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary AddressUtils {\r\n\r\n    /**\r\n    * Returns whether the target address is a contract\r\n    * @dev This function will return false if invoked during the constructor of a contract,\r\n    *  as the code is not actually created until after the constructor finishes.\r\n    * @param addr address to check\r\n    * @return whether the target address is a contract\r\n    */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(owner, newOwner);\r\n    }\r\n}\r\n\r\ncontract ERC721Basic {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n    function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) public;\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n    function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is ERC721Basic {\r\n    using SafeMath for uint256;\r\n    using AddressUtils for address;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 public constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) internal tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) internal tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => uint256) internal ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n    /**\r\n    * @dev Guarantees msg.sender is owner of the given token\r\n    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n    */\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require (ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n    * @param _tokenId uint256 ID of the token to validate\r\n    */\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        require (isApprovedOrOwner(msg.sender, _tokenId));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address\r\n    * @param _owner address to query the balance of\r\n    * @return uint256 representing the amount owned by the passed address\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        require (_owner != address(0));\r\n        return ownedTokensCount[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the owner of the specified token ID\r\n    * @param _tokenId uint256 ID of the token to query the owner of\r\n    * @return owner address currently marked as the owner of the given token ID\r\n    */\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    function isOwnerOf(address _owner, uint256 _tokenId) public view returns (bool) {\r\n        address owner = ownerOf(_tokenId);\r\n        return owner == _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the specified token exists\r\n    * @param _tokenId uint256 ID of the token to query the existence of\r\n    * @return whether the token exists\r\n    */\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Approves another address to transfer the given token ID\r\n    * @dev The zero address indicates there is no approved address.\r\n    * @dev There can only be one approved address per token at a given time.\r\n    * @dev Can only be called by the token owner or an approved operator.\r\n    * @param _to address to be approved for the given token ID\r\n    * @param _tokenId uint256 ID of the token to be approved\r\n    */\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        address owner = ownerOf(_tokenId);\r\n        require (_to != owner);\r\n        require (msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        tokenApprovals[_tokenId] = _to;\r\n        emit Approval(owner, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the approved address for a token ID, or zero if no address set\r\n    * @param _tokenId uint256 ID of the token to query the approval of\r\n    * @return address currently approved for the given token ID\r\n    */\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets or unsets the approval of a given operator\r\n    * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n    * @param _to operator address to set the approval\r\n    * @param _approved representing the status of the approval to be set\r\n    */\r\n    function setApprovalForAll(address _to, bool _approved) public {\r\n        require (_to != msg.sender);\r\n        operatorApprovals[msg.sender][_to] = _approved;\r\n        emit ApprovalForAll(msg.sender, _to, _approved);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells whether an operator is approved by a given owner\r\n    * @param _owner owner address which you want to query the approval of\r\n    * @param _operator operator address which you want to query the approval of\r\n    * @return bool whether the given operator is approved by the given owner\r\n    */\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the ownership of a given token ID to another address\r\n    * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n    * @dev Requires the msg sender to be the owner, approved, or operator\r\n    * @param _from current owner of the token\r\n    * @param _to address to receive the ownership of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n        require (_from != address(0));\r\n        require (_to != address(0));\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Safely transfers the ownership of a given token ID to another address\r\n    * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n    *  which is called upon a safe transfer, and return the magic value\r\n    *  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    *  the transfer is reverted.\r\n    * @dev Requires the msg sender to be the owner, approved, or operator\r\n    * @param _from current owner of the token\r\n    * @param _to address to receive the ownership of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n        // solium-disable-next-line arg-overflow\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n    * @dev Safely transfers the ownership of a given token ID to another address\r\n    * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n    *  which is called upon a safe transfer, and return the magic value\r\n    *  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    *  the transfer is reverted.\r\n    * @dev Requires the msg sender to be the owner, approved, or operator\r\n    * @param _from current owner of the token\r\n    * @param _to address to receive the ownership of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    * @param _data bytes data to send along with a safe transfer check\r\n    */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public canTransfer(_tokenId) {\r\n        transferFrom(_from, _to, _tokenId);\r\n        // solium-disable-next-line arg-overflow\r\n        require (checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the given spender can transfer a given token ID\r\n    * @param _spender address of the spender to query\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    * @return bool whether the msg.sender is approved for the given token ID,\r\n    *  is an operator of the owner, or is the owner of the token\r\n    */\r\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n        address owner = ownerOf(_tokenId);\r\n        // Disable solium check because of\r\n        // https://github.com/duaraghav8/Solium/issues/175\r\n        // solium-disable-next-line operator-whitespace\r\n        return (_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender));\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to mint a new token\r\n    * @dev Reverts if the given token ID already exists\r\n    * @param _to The address that will own the minted token\r\n    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n    */\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        //require (_to != address(0));\r\n        addTokenTo(_to, _tokenId);\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to burn a specific token\r\n    * @dev Reverts if the token does not exist\r\n    * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n    */\r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        clearApproval(_owner, _tokenId);\r\n        removeTokenFrom(_owner, _tokenId);\r\n        emit Transfer(_owner, address(0), _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to clear current approval of a given token ID\r\n    * @dev Reverts if the given address is not indeed the owner of the token\r\n    * @param _owner owner of the token\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function clearApproval(address _owner, uint256 _tokenId) internal {\r\n        require (ownerOf(_tokenId) == _owner);\r\n        if (tokenApprovals[_tokenId] != address(0)) {\r\n            tokenApprovals[_tokenId] = address(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to add a token ID to the list of a given address\r\n    * @param _to address representing the new owner of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n    */\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        //        require (tokenOwner[_tokenId] == address(0));\r\n        tokenOwner[_tokenId] = _to;\r\n        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove a token ID from the list of a given address\r\n    * @param _from address representing the previous owner of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n    */\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        require (ownerOf(_tokenId) == _from);\r\n        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n        tokenOwner[_tokenId] = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to invoke `onERC721Received` on a target address\r\n    * @dev The call is not executed if the target address is not a contract\r\n    * @param _from address representing the previous owner of the given token ID\r\n    * @param _to target address that will receive the tokens\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    * @param _data bytes optional data to send along with the call\r\n    * @return whether the call correctly returned the expected magic value\r\n    */\r\n    function checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data) internal returns (bool) {\r\n        if (!_to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n        return (retval == ERC721_RECEIVED);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n    /**\r\n    * @dev Magic value to be returned upon successful reception of an NFT\r\n    *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n    *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n    */\r\n    bytes4 public constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    /**\r\n    * @notice Handle the receipt of an NFT\r\n    * @dev The ERC721 smart contract calls this function on the recipient\r\n    *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n    *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n    *  than the magic value MUST result in the transaction being reverted.\r\n    *  Note: the contract address is always the message sender.\r\n    * @param _from The sending address\r\n    * @param _tokenId The NFT identifier which is being transfered\r\n    * @param _data Additional data with no specified format\r\n    * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    */\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\ncontract ERC721Holder is ERC721Receiver {\r\n    function onERC721Received(address, address, uint256, bytes) public returns(bytes4) {\r\n        return ERC721_RECEIVED;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is ERC721, ERC721BasicToken {\r\n\r\n    // Token name\r\n    string internal name_ = \"CryptoFlowers\";\r\n\r\n    // Token symbol\r\n    string internal symbol_ = \"CF\";\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => uint256[]) internal ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] internal allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n    function uint2str(uint i) internal pure returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint length;\r\n        while (j != 0){\r\n            length++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(length);\r\n        uint k = length - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal pure returns (string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory ab = new string(_ba.length + _bb.length);\r\n        bytes memory bab = bytes(ab);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\r\n\r\n        return string(bab);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns an URI for a given token ID\r\n    * @dev Throws if the token ID does not exist. May return an empty string.\r\n    * @notice The user/developper needs to add the tokenID, in the end of URL, to\r\n    * use the URI and get all details. Ex. www.<apiURL>.com/token/<tokenID>\r\n    * @param _tokenId uint256 ID of the token to query\r\n    */\r\n    function tokenURI(uint256 _tokenId) public view returns (string) {\r\n        require(exists(_tokenId));\r\n        string memory infoUrl;\r\n        infoUrl = strConcat('https://cryptoflowers.io/v/', uint2str(_tokenId));\r\n        return infoUrl;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n    * @param _owner address owning the tokens list to be accessed\r\n    * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n    * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n    */\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n        require (_index < balanceOf(_owner));\r\n        return ownedTokens[_owner][_index];\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the total amount of tokens stored by the contract\r\n    * @return uint256 representing the total amount of tokens\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return allTokens.length - 1;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the token ID at a given index of all the tokens in this contract\r\n    * @dev Reverts if the index is greater or equal to the total number of tokens\r\n    * @param _index uint256 representing the index to be accessed of the tokens list\r\n    * @return uint256 token ID at the given index of the tokens list\r\n    */\r\n    function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n        require (_index <= totalSupply());\r\n        return allTokens[_index];\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Internal function to add a token ID to the list of a given address\r\n    * @param _to address representing the new owner of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n    */\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        super.addTokenTo(_to, _tokenId);\r\n        uint256 length = ownedTokens[_to].length;\r\n        ownedTokens[_to].push(_tokenId);\r\n        ownedTokensIndex[_tokenId] = length;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove a token ID from the list of a given address\r\n    * @param _from address representing the previous owner of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n    */\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        super.removeTokenFrom(_from, _tokenId);\r\n\r\n        // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot.\r\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n        ownedTokens[_from][tokenIndex] = lastToken;\r\n        // This also deletes the contents at the last position of the array\r\n        ownedTokens[_from].length--;\r\n\r\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n        // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n        // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n        ownedTokensIndex[_tokenId] = 0;\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the token name\r\n    * @return string representing the token name\r\n    */\r\n    function name() public view returns (string) {\r\n        return name_;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the token symbol\r\n    * @return string representing the token symbol\r\n    */\r\n    function symbol() public view returns (string) {\r\n        return symbol_;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to mint a new token\r\n    * @dev Reverts if the given token ID already exists\r\n    * @param _to address the beneficiary that will own the minted token\r\n    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n    */\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        super._mint(_to, _tokenId);\r\n\r\n        allTokensIndex[_tokenId] = allTokens.length;\r\n        allTokens.push(_tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to burn a specific token\r\n    * @dev Reverts if the token does not exist\r\n    * @param _owner owner of the token to burn\r\n    * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n    */\r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        super._burn(_owner, _tokenId);\r\n\r\n        // Reorg all tokens array\r\n        uint256 tokenIndex = allTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = allTokens.length.sub(1);\r\n        uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n        allTokens[tokenIndex] = lastToken;\r\n        allTokens[lastTokenIndex] = 0;\r\n\r\n        allTokens.length--;\r\n        allTokensIndex[_tokenId] = 0;\r\n        allTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 = 0x01ffc9a7;\r\n    /*\r\n    bytes4(keccak256('supportsInterface(bytes4)'));\r\n    */\r\n\r\n    bytes4 constant InterfaceSignature_ERC721Enumerable = 0x780e9d63;\r\n    /*\r\n    bytes4(keccak256('totalSupply()')) ^\r\n    bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n    bytes4(keccak256('tokenByIndex(uint256)'));\r\n    */\r\n\r\n    bytes4 constant InterfaceSignature_ERC721Metadata = 0x5b5e139f;\r\n    /*\r\n    bytes4(keccak256('name()')) ^\r\n    bytes4(keccak256('symbol()')) ^\r\n    bytes4(keccak256('tokenURI(uint256)'));\r\n    */\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\r\n    /*\r\n    bytes4(keccak256('balanceOf(address)')) ^\r\n    bytes4(keccak256('ownerOf(uint256)')) ^\r\n    bytes4(keccak256('approve(address,uint256)')) ^\r\n    bytes4(keccak256('getApproved(uint256)')) ^\r\n    bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n    bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'));\r\n    */\r\n\r\n    bytes4 public constant InterfaceSignature_ERC721Optional =- 0x4f558e79;\r\n    /*\r\n    bytes4(keccak256('exists(uint256)'));\r\n    */\r\n\r\n    /**\r\n    * @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    * @dev Returns true for any standardized interfaces implemented by this contract.\r\n    * @param _interfaceID bytes4 the interface to check for\r\n    * @return true for any standardized interfaces implemented by this contract.\r\n    */\r\n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool)\r\n    {\r\n        return ((_interfaceID == InterfaceSignature_ERC165)\r\n        || (_interfaceID == InterfaceSignature_ERC721)\r\n        || (_interfaceID == InterfaceSignature_ERC721Enumerable)\r\n        || (_interfaceID == InterfaceSignature_ERC721Metadata));\r\n    }\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract GenomeInterface {\r\n    function isGenome() public pure returns (bool);\r\n    function mixGenes(uint256 genes1, uint256 genes2) public returns (uint256);\r\n}\r\n\r\ncontract FlowerAdminAccess {\r\n    address public rootAddress;\r\n    address public adminAddress;\r\n\r\n    event ContractUpgrade(address newContract);\r\n\r\n    address public gen0SellerAddress;\r\n    address public giftHolderAddress;\r\n\r\n    bool public stopped = false;\r\n\r\n    modifier onlyRoot() {\r\n        require(msg.sender == rootAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin()  {\r\n        require(msg.sender == adminAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdministrator() {\r\n        require(msg.sender == rootAddress || msg.sender == adminAddress);\r\n        _;\r\n    }\r\n\r\n    function setRoot(address _newRoot) external onlyAdministrator {\r\n        require(_newRoot != address(0));\r\n        rootAddress = _newRoot;\r\n    }\r\n\r\n    function setAdmin(address _newAdmin) external onlyRoot {\r\n        require(_newAdmin != address(0));\r\n        adminAddress = _newAdmin;\r\n    }\r\n\r\n    modifier whenNotStopped() {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n\r\n    modifier whenStopped {\r\n        require(stopped);\r\n        _;\r\n    }\r\n\r\n    function setStop() public onlyAdministrator whenNotStopped {\r\n        stopped = true;\r\n    }\r\n\r\n    function setStart() public onlyAdministrator whenStopped {\r\n        stopped = false;\r\n    }\r\n}\r\n\r\ncontract FlowerBase is ERC721Token {\r\n\r\n    struct Flower {\r\n        uint256 genes;\r\n        uint64 birthTime;\r\n        uint64 cooldownEndBlock;\r\n        uint32 matronId;\r\n        uint32 sireId;\r\n        uint16 cooldownIndex;\r\n        uint16 generation;\r\n    }\r\n\r\n    Flower[] flowers;\r\n\r\n    mapping (uint256 => uint256) genomeFlowerIds;\r\n\r\n    // Сooldown duration\r\n    uint32[14] public cooldowns = [\r\n    uint32(1 minutes),\r\n    uint32(2 minutes),\r\n    uint32(5 minutes),\r\n    uint32(10 minutes),\r\n    uint32(30 minutes),\r\n    uint32(1 hours),\r\n    uint32(2 hours),\r\n    uint32(4 hours),\r\n    uint32(8 hours),\r\n    uint32(16 hours),\r\n    uint32(1 days),\r\n    uint32(2 days),\r\n    uint32(4 days),\r\n    uint32(7 days)\r\n    ];\r\n\r\n    event Birth(address owner, uint256 flowerId, uint256 matronId, uint256 sireId, uint256 genes);\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Money(address from, string actionType, uint256 sum, uint256 cut, uint256 tokenId, uint256 blockNumber);\r\n\r\n    function _createFlower(uint256 _matronId, uint256 _sireId, uint256 _generation, uint256 _genes, address _owner) internal returns (uint) {\r\n        require(_matronId == uint256(uint32(_matronId)));\r\n        require(_sireId == uint256(uint32(_sireId)));\r\n        require(_generation == uint256(uint16(_generation)));\r\n        require(checkUnique(_genes));\r\n\r\n        uint16 cooldownIndex = uint16(_generation / 2);\r\n        if (cooldownIndex > 13) {\r\n            cooldownIndex = 13;\r\n        }\r\n\r\n        Flower memory _flower = Flower({\r\n            genes: _genes,\r\n            birthTime: uint64(now),\r\n            cooldownEndBlock: 0,\r\n            matronId: uint32(_matronId),\r\n            sireId: uint32(_sireId),\r\n            cooldownIndex: cooldownIndex,\r\n            generation: uint16(_generation)\r\n            });\r\n\r\n        uint256 newFlowerId = flowers.push(_flower) - 1;\r\n\r\n        require(newFlowerId == uint256(uint32(newFlowerId)));\r\n\r\n        genomeFlowerIds[_genes] = newFlowerId;\r\n\r\n        emit Birth(_owner, newFlowerId, uint256(_flower.matronId), uint256(_flower.sireId), _flower.genes);\r\n\r\n        _mint(_owner, newFlowerId);\r\n\r\n        return newFlowerId;\r\n    }\r\n\r\n    function checkUnique(uint256 _genome) public view returns (bool) {\r\n        uint256 _flowerId = uint256(genomeFlowerIds[_genome]);\r\n        return !(_flowerId > 0);\r\n    }\r\n}\r\n\r\ncontract FlowerOwnership is FlowerBase, FlowerAdminAccess {\r\n    SaleClockAuction public saleAuction;\r\n    BreedingClockAuction public breedingAuction;\r\n\r\n    uint256 public secondsPerBlock = 15;\r\n\r\n    function setSecondsPerBlock(uint256 secs) external onlyAdministrator {\r\n        require(secs < cooldowns[0]);\r\n        secondsPerBlock = secs;\r\n    }\r\n}\r\n\r\ncontract ClockAuctionBase {\r\n\r\n    struct Auction {\r\n        address seller;\r\n        uint128 startingPrice;\r\n        uint128 endingPrice;\r\n        uint64 duration;\r\n        uint64 startedAt;\r\n    }\r\n\r\n    ERC721Token public nonFungibleContract;\r\n\r\n    uint256 public ownerCut;\r\n\r\n    mapping (uint256 => Auction) tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n    event Money(address from, string actionType, uint256 sum, uint256 cut, uint256 tokenId, uint256 blockNumber);\r\n\r\n    function isOwnerOf(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        nonFungibleContract.transferFrom(this, _receiver, _tokenId);\r\n    }\r\n\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        emit AuctionCreated(uint256(_tokenId), uint256(_auction.startingPrice), uint256(_auction.endingPrice), uint256(_auction.duration));\r\n    }\r\n\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        emit AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount, address _sender) internal returns (uint256) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        require(_isOnAuction(auction));\r\n\r\n        uint256 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n\r\n        address seller = auction.seller;\r\n\r\n        _removeAuction(_tokenId);\r\n\r\n        if (price > 0) {\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n            seller.transfer(sellerProceeds);\r\n\r\n            emit Money(_sender, \"AuctionSuccessful\", price, auctioneerCut, _tokenId, block.number);\r\n        }\r\n\r\n        uint256 bidExcess = _bidAmount - price;\r\n\r\n        _sender.transfer(bidExcess);\r\n\r\n        emit AuctionSuccessful(_tokenId, price, _sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\r\n        return (_auction.startedAt > 0 && _auction.startedAt < now);\r\n    }\r\n\r\n    function _currentPrice(Auction storage _auction) internal view returns (uint256) {\r\n        uint256 secondsPassed = 0;\r\n\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(_auction.startingPrice, _auction.endingPrice, _auction.duration, secondsPassed);\r\n    }\r\n\r\n    function _computeCurrentPrice(uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, uint256 _secondsPassed) internal pure returns (uint256) {\r\n        if (_secondsPassed >= _duration) {\r\n            return _endingPrice;\r\n        } else {\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        return uint256(_price * ownerCut / 10000);\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused returns (bool) {\r\n        paused = true;\r\n        emit Pause();\r\n        return true;\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused returns (bool) {\r\n        paused = false;\r\n        emit Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ClockAuction is Pausable, ClockAuctionBase {\r\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x80ac58cd);\r\n    constructor(address _nftAddress, uint256 _cut) public {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n\r\n        ERC721Token candidateContract = ERC721Token(_nftAddress);\r\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n        require(msg.sender == owner || msg.sender == nftAddress);\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function createAuction(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, address _seller, uint64 _startAt) external whenNotPaused {\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n        require(isOwnerOf(msg.sender, _tokenId));\r\n        _escrow(msg.sender, _tokenId);\r\n        uint64 startAt = _startAt;\r\n        if (_startAt == 0) {\r\n            startAt = uint64(now);\r\n        }\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(startAt)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    function bid(uint256 _tokenId, address _sender) external payable whenNotPaused {\r\n        _bid(_tokenId, msg.value, _sender);\r\n        _transfer(_sender, _tokenId);\r\n    }\r\n\r\n    function cancelAuction(uint256 _tokenId) external {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    function cancelAuctionByAdmin(uint256 _tokenId) onlyOwner external {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    function getAuction(uint256 _tokenId) external view returns (address seller, uint256 startingPrice, uint256 endingPrice, uint256 duration, uint256 startedAt) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return (auction.seller, auction.startingPrice, auction.endingPrice, auction.duration, auction.startedAt);\r\n    }\r\n\r\n    function getCurrentPrice(uint256 _tokenId) external view returns (uint256){\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n    // TMP\r\n    function getContractBalance() onlyOwner external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n}\r\n\r\ncontract BreedingClockAuction is ClockAuction {\r\n\r\n    bool public isBreedingClockAuction = true;\r\n\r\n    constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}\r\n\r\n    function bid(uint256 _tokenId, address _sender) external payable {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        _bid(_tokenId, msg.value, _sender);\r\n        _transfer(seller, _tokenId);\r\n    }\r\n\r\n    function getCurrentPrice(uint256 _tokenId) external view returns (uint256) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n    function createAuction(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, address _seller, uint64 _startAt) external {\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        uint64 startAt = _startAt;\r\n        if (_startAt == 0) {\r\n            startAt = uint64(now);\r\n        }\r\n        Auction memory auction = Auction(_seller, uint128(_startingPrice), uint128(_endingPrice), uint64(_duration), uint64(startAt));\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract SaleClockAuction is ClockAuction {\r\n\r\n    bool public isSaleClockAuction = true;\r\n\r\n    uint256 public gen0SaleCount;\r\n    uint256[5] public lastGen0SalePrices;\r\n\r\n    constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}\r\n\r\n    address public gen0SellerAddress;\r\n    function setGen0SellerAddress(address _newAddress) external {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        gen0SellerAddress = _newAddress;\r\n    }\r\n\r\n    function createAuction(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, address _seller, uint64 _startAt) external {\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        uint64 startAt = _startAt;\r\n        if (_startAt == 0) {\r\n            startAt = uint64(now);\r\n        }\r\n        Auction memory auction = Auction(_seller, uint128(_startingPrice), uint128(_endingPrice), uint64(_duration), uint64(startAt));\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    function bid(uint256 _tokenId) external payable {\r\n        // _bid verifies token ID size\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        uint256 price = _bid(_tokenId, msg.value, msg.sender);\r\n        _transfer(msg.sender, _tokenId);\r\n\r\n        // If not a gen0 auction, exit\r\n        if (seller == address(gen0SellerAddress)) {\r\n            // Track gen0 sale prices\r\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\r\n            gen0SaleCount++;\r\n        }\r\n    }\r\n\r\n    function bidGift(uint256 _tokenId, address _to) external payable {\r\n        // _bid verifies token ID size\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        uint256 price = _bid(_tokenId, msg.value, msg.sender);\r\n        _transfer(_to, _tokenId);\r\n\r\n        // If not a gen0 auction, exit\r\n        if (seller == address(gen0SellerAddress)) {\r\n            // Track gen0 sale prices\r\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\r\n            gen0SaleCount++;\r\n        }\r\n    }\r\n\r\n    function averageGen0SalePrice() external view returns (uint256) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            sum += lastGen0SalePrices[i];\r\n        }\r\n        return sum / 5;\r\n    }\r\n\r\n    function computeCut(uint256 _price) public view returns (uint256) {\r\n        return _computeCut(_price);\r\n    }\r\n\r\n    function getSeller(uint256 _tokenId) public view returns (address) {\r\n        return address(tokenIdToAuction[_tokenId].seller);\r\n    }\r\n}\r\n\r\n// Flowers crossing\r\ncontract FlowerBreeding is FlowerOwnership {\r\n\r\n    // Fee for breeding\r\n    uint256 public autoBirthFee = 2 finney;\r\n    uint256 public giftFee = 2 finney;\r\n\r\n    GenomeInterface public geneScience;\r\n\r\n    // Set Genome contract address\r\n    function setGenomeContractAddress(address _address) external onlyAdministrator {\r\n        geneScience = GenomeInterface(_address);\r\n    }\r\n\r\n    function _isReadyToAction(Flower _flower) internal view returns (bool) {\r\n        return _flower.cooldownEndBlock <= uint64(block.number);\r\n    }\r\n\r\n    function isReadyToAction(uint256 _flowerId) public view returns (bool) {\r\n        require(_flowerId > 0);\r\n        Flower storage flower = flowers[_flowerId];\r\n        return _isReadyToAction(flower);\r\n    }\r\n\r\n    function _setCooldown(Flower storage _flower) internal {\r\n        _flower.cooldownEndBlock = uint64((cooldowns[_flower.cooldownIndex]/secondsPerBlock) + block.number);\r\n\r\n        if (_flower.cooldownIndex < 13) {\r\n            _flower.cooldownIndex += 1;\r\n        }\r\n    }\r\n\r\n    function setAutoBirthFee(uint256 val) external onlyAdministrator {\r\n        autoBirthFee = val;\r\n    }\r\n\r\n    function setGiftFee(uint256 _fee) external onlyAdministrator {\r\n        giftFee = _fee;\r\n    }\r\n\r\n    // Check if a given sire and matron are a valid crossing pair\r\n    function _isValidPair(Flower storage _matron, uint256 _matronId, Flower storage _sire, uint256 _sireId) private view returns(bool) {\r\n        if (_matronId == _sireId) {\r\n            return false;\r\n        }\r\n\r\n        // Generation zero can crossing\r\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\r\n            return true;\r\n        }\r\n\r\n        // Do not crossing with it parrents\r\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\r\n            return false;\r\n        }\r\n\r\n        // Can't crossing with brothers and sisters\r\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function canBreedWith(uint256 _matronId, uint256 _sireId) external view returns (bool) {\r\n        return _canBreedWith(_matronId, _sireId);\r\n    }\r\n\r\n    function _canBreedWith(uint256 _matronId, uint256 _sireId) internal view returns (bool) {\r\n        require(_matronId > 0);\r\n        require(_sireId > 0);\r\n        Flower storage matron = flowers[_matronId];\r\n        Flower storage sire = flowers[_sireId];\r\n        return _isValidPair(matron, _matronId, sire, _sireId);\r\n    }\r\n\r\n    function _born(uint256 _matronId, uint256 _sireId) internal {\r\n        Flower storage sire = flowers[_sireId];\r\n        Flower storage matron = flowers[_matronId];\r\n\r\n        uint16 parentGen = matron.generation;\r\n        if (sire.generation > matron.generation) {\r\n            parentGen = sire.generation;\r\n        }\r\n\r\n        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes);\r\n        address owner = ownerOf(_matronId);\r\n        uint256 flowerId = _createFlower(_matronId, _sireId, parentGen + 1, childGenes, owner);\r\n\r\n        Flower storage child = flowers[flowerId];\r\n\r\n        _setCooldown(sire);\r\n        _setCooldown(matron);\r\n        _setCooldown(child);\r\n    }\r\n\r\n    // Crossing two of owner flowers\r\n    function breedOwn(uint256 _matronId, uint256 _sireId) external payable whenNotStopped {\r\n        require(msg.value >= autoBirthFee);\r\n        require(isOwnerOf(msg.sender, _matronId));\r\n        require(isOwnerOf(msg.sender, _sireId));\r\n\r\n        Flower storage matron = flowers[_matronId];\r\n        require(_isReadyToAction(matron));\r\n\r\n        Flower storage sire = flowers[_sireId];\r\n        require(_isReadyToAction(sire));\r\n\r\n        require(_isValidPair(matron, _matronId, sire, _sireId));\r\n\r\n        _born(_matronId, _sireId);\r\n\r\n        gen0SellerAddress.transfer(autoBirthFee);\r\n\r\n        emit Money(msg.sender, \"BirthFee-own\", autoBirthFee, autoBirthFee, _sireId, block.number);\r\n    }\r\n}\r\n\r\n// Handles creating auctions for sale and siring\r\ncontract FlowerAuction is FlowerBreeding {\r\n\r\n    // Set sale auction contract address\r\n    function setSaleAuctionAddress(address _address) external onlyAdministrator {\r\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\r\n        require(candidateContract.isSaleClockAuction());\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n    // Set siring auction contract address\r\n    function setBreedingAuctionAddress(address _address) external onlyAdministrator {\r\n        BreedingClockAuction candidateContract = BreedingClockAuction(_address);\r\n        require(candidateContract.isBreedingClockAuction());\r\n        breedingAuction = candidateContract;\r\n    }\r\n\r\n    // Flower sale auction\r\n    function createSaleAuction(uint256 _flowerId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external whenNotStopped {\r\n        require(isOwnerOf(msg.sender, _flowerId));\r\n        require(isReadyToAction(_flowerId));\r\n        approve(saleAuction, _flowerId);\r\n        saleAuction.createAuction(_flowerId, _startingPrice, _endingPrice, _duration, msg.sender, 0);\r\n    }\r\n\r\n    // Create siring auction\r\n    function createBreedingAuction(uint256 _flowerId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external whenNotStopped {\r\n        require(isOwnerOf(msg.sender, _flowerId));\r\n        require(isReadyToAction(_flowerId));\r\n        approve(breedingAuction, _flowerId);\r\n        breedingAuction.createAuction(_flowerId, _startingPrice, _endingPrice, _duration, msg.sender, 0);\r\n    }\r\n\r\n    // Siring auction complete\r\n    function bidOnBreedingAuction(uint256 _sireId, uint256 _matronId) external payable whenNotStopped {\r\n        require(isOwnerOf(msg.sender, _matronId));\r\n        require(isReadyToAction(_matronId));\r\n        require(isReadyToAction(_sireId));\r\n        require(_canBreedWith(_matronId, _sireId));\r\n\r\n        uint256 currentPrice = breedingAuction.getCurrentPrice(_sireId);\r\n        require(msg.value >= currentPrice + autoBirthFee);\r\n\r\n        // Siring auction will throw if the bid fails.\r\n        breedingAuction.bid.value(msg.value - autoBirthFee)(_sireId, msg.sender);\r\n        _born(uint32(_matronId), uint32(_sireId));\r\n        gen0SellerAddress.transfer(autoBirthFee);\r\n        emit Money(msg.sender, \"BirthFee-bid\", autoBirthFee, autoBirthFee, _sireId, block.number);\r\n    }\r\n\r\n    // Transfers the balance of the sale auction contract to the Core contract\r\n    function withdrawAuctionBalances() external onlyAdministrator {\r\n        saleAuction.withdrawBalance();\r\n        breedingAuction.withdrawBalance();\r\n    }\r\n\r\n    function sendGift(uint256 _flowerId, address _to) external payable whenNotStopped {\r\n        require(isOwnerOf(msg.sender, _flowerId));\r\n        require(isReadyToAction(_flowerId));\r\n\r\n        transferFrom(msg.sender, _to, _flowerId);\r\n    }\r\n\r\n    function makeGift(uint256 _flowerId) external payable whenNotStopped {\r\n        require(isOwnerOf(msg.sender, _flowerId));\r\n        require(isReadyToAction(_flowerId));\r\n        require(msg.value >= giftFee);\r\n\r\n        transferFrom(msg.sender, giftHolderAddress, _flowerId);\r\n        giftHolderAddress.transfer(msg.value);\r\n\r\n        emit Money(msg.sender, \"MakeGift\", msg.value, msg.value, _flowerId, block.number);\r\n    }\r\n}\r\n\r\ncontract FlowerMinting is FlowerAuction {\r\n    // Constants for gen0 auctions.\r\n    uint256 public constant GEN0_STARTING_PRICE = 10 finney;\r\n    uint256 public constant GEN0_AUCTION_DURATION = 1 days;\r\n    // Counts the number of cats the contract owner has created\r\n    uint256 public promoCreatedCount;\r\n    uint256 public gen0CreatedCount;\r\n\r\n    // Create promo flower\r\n    function createPromoFlower(uint256 _genes, address _owner) external onlyAdministrator {\r\n        address flowerOwner = _owner;\r\n        if (flowerOwner == address(0)) {\r\n            flowerOwner = adminAddress;\r\n        }\r\n        promoCreatedCount++;\r\n        gen0CreatedCount++;\r\n        _createFlower(0, 0, 0, _genes, flowerOwner);\r\n    }\r\n\r\n    function createGen0Auction(uint256 _genes, uint64 _auctionStartAt) external onlyAdministrator {\r\n        uint256 flowerId = _createFlower(0, 0, 0, _genes, address(gen0SellerAddress));\r\n        tokenApprovals[flowerId] = saleAuction;\r\n        //approve(saleAuction, flowerId);\r\n\r\n        gen0CreatedCount++;\r\n\r\n        saleAuction.createAuction(flowerId, _computeNextGen0Price(), 0, GEN0_AUCTION_DURATION, address(gen0SellerAddress), _auctionStartAt);\r\n    }\r\n\r\n    // Computes the next gen0 auction starting price, given the average of the past 5 prices + 50%.\r\n    function _computeNextGen0Price() internal view returns (uint256) {\r\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\r\n\r\n        // Sanity check to ensure we don't overflow arithmetic\r\n        require(avePrice == uint256(uint128(avePrice)));\r\n\r\n        uint256 nextPrice = avePrice + (avePrice / 2);\r\n\r\n        // We never auction for less than starting price\r\n        if (nextPrice < GEN0_STARTING_PRICE) {\r\n            nextPrice = GEN0_STARTING_PRICE;\r\n        }\r\n\r\n        return nextPrice;\r\n    }\r\n\r\n    function setGen0SellerAddress(address _newAddress) external onlyAdministrator {\r\n        gen0SellerAddress = _newAddress;\r\n        saleAuction.setGen0SellerAddress(_newAddress);\r\n    }\r\n\r\n    function setGiftHolderAddress(address _newAddress) external onlyAdministrator {\r\n        giftHolderAddress = _newAddress;\r\n    }\r\n}\r\n\r\ncontract FlowerCore is FlowerMinting {\r\n\r\n    constructor() public {\r\n        stopped = true;\r\n        rootAddress = msg.sender;\r\n        adminAddress = msg.sender;\r\n        _createFlower(0, 0, 0, uint256(-1), address(0));\r\n    }\r\n\r\n    // Get flower information\r\n    function getFlower(uint256 _id) external view returns (bool isReady, uint256 cooldownIndex, uint256 nextActionAt, uint256 birthTime, uint256 matronId, uint256 sireId, uint256 generation, uint256 genes) {\r\n        Flower storage flower = flowers[_id];\r\n        isReady = (flower.cooldownEndBlock <= block.number);\r\n        cooldownIndex = uint256(flower.cooldownIndex);\r\n        nextActionAt = uint256(flower.cooldownEndBlock);\r\n        birthTime = uint256(flower.birthTime);\r\n        matronId = uint256(flower.matronId);\r\n        sireId = uint256(flower.sireId);\r\n        generation = uint256(flower.generation);\r\n        genes = flower.genes;\r\n    }\r\n\r\n    // Start the game\r\n    function unstop() public onlyAdministrator whenStopped {\r\n        require(geneScience != address(0));\r\n\r\n        super.setStart();\r\n    }\r\n\r\n    function withdrawBalance() external onlyAdministrator {\r\n        rootAddress.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newRoot\",\"type\":\"address\"}],\"name\":\"setRoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"breedingAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_STARTING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_genome\",\"type\":\"uint256\"}],\"name\":\"checkUnique\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_flowerId\",\"type\":\"uint256\"}],\"name\":\"isReadyToAction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_AUCTION_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_flowerId\",\"type\":\"uint256\"}],\"name\":\"makeGift\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"giftFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"breedOwn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBreedingAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_flowerId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"canBreedWith\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setAutoBirthFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_flowerId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sendGift\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceSignature_ERC721Optional\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGenomeContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"bidOnBreedingAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setGen0SellerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoFlower\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_auctionStartAt\",\"type\":\"uint64\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getFlower\",\"outputs\":[{\"name\":\"isReady\",\"type\":\"bool\"},{\"name\":\"cooldownIndex\",\"type\":\"uint256\"},{\"name\":\"nextActionAt\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint256\"},{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"genes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0SellerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"giftHolderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoBirthFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setGiftFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setGiftHolderAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOwnerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_flowerId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createBreedingAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721_RECEIVED\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unstop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"flowerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"actionType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Money\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"FlowerCore","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7cc1ac9088c6f0bcdb19cba8d05ec31456cf1d6b9f6925157d63f2c8315e3bbf"}]}