{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_from != address(0));\r\n        require(_to != address(0));\r\n\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract EIForceCoin is StandardToken, Ownable {\r\n\r\n    string public name = \" EIForceCoin \";\r\n    string public symbol = \"EFT\";\r\n    uint public decimals = 18;\r\n\r\n    // The token allocation\r\n    uint public constant TOTAL_SUPPLY       = 1000000000e18;\r\n    uint public constant ALLOC_FOUNDER    =  1000000000e18; // 100%\r\n\r\n\r\n    // wallets\r\n    address public constant WALLET_FOUNDER    = 0x4aDE23e2dc751527b16289c18c7E26fE4dF7a4B7; \r\n    \r\n    \r\n    // 2 groups of lockup\r\n    mapping(address => uint256) public jishis_locked; \r\n    mapping(address => uint256) public simus_locked;\r\n    mapping(address => uint256) public jiedians_locked;\r\n    mapping(address => uint256) public dakehus_locked;\r\n\r\n    // 2 types of releasing\r\n    mapping(address => uint256) public jishis_jishiDate;\r\n    mapping(address => uint256) public simus_simuDate;\r\n    mapping(address => uint256) public jiedians_jiedianDate;\r\n    mapping(address => uint256) public dakehus_dakehuDate;\r\n\r\n    // MODIFIER\r\n\r\n    // checks if the address can transfer certain amount of tokens\r\n    modifier canTransfer(address _sender, uint256 _value) {\r\n        require(_sender != address(0));\r\n\r\n        uint256 remaining = balances[_sender].sub(_value);\r\n        uint256 totalLockAmt = 0;\r\n\r\n        if (jishis_locked[_sender] > 0) {\r\n            totalLockAmt = totalLockAmt.add(getLockedAmount_jishis(_sender));\r\n        }\r\n\r\n        if (simus_locked[_sender] > 0) {\r\n            totalLockAmt = totalLockAmt.add(getLockedAmount_simus(_sender));\r\n        }\r\n\r\n  \t\tif (simus_locked[_sender] > 0) {\r\n            totalLockAmt = totalLockAmt.add(getLockedAmount_jiedians(_sender));\r\n        }\r\n\r\n \t\t if (simus_locked[_sender] > 0) {\r\n            totalLockAmt = totalLockAmt.add(getLockedAmount_dakehus(_sender));\r\n        }\r\n        require(remaining >= totalLockAmt);\r\n\r\n        _;\r\n    }\r\n\r\n    // EVENTS\r\n    event UpdatedLockingState(string whom, address indexed to, uint256 value, uint256 date);\r\n\r\n    // FUNCTIONS\r\n\r\n    function EIForceCoin () public {\r\n        balances[msg.sender] = TOTAL_SUPPLY;\r\n        totalSupply = TOTAL_SUPPLY;\r\n\r\n        // do the distribution of the token, in token transfer\r\n        transfer(WALLET_FOUNDER, ALLOC_FOUNDER);\r\n    }\r\n\t\r\n    // get jishis' locked amount of token\r\n    function getLockedAmount_jishis(address _jishi) \r\n        public\r\n\t\tconstant\r\n\t\treturns (uint256)\r\n\t{\r\n        uint256 jishiDate = jishis_jishiDate[_jishi];\r\n        uint256 lockedAmt = jishis_locked[_jishi];\r\n\r\n        if (now <= jishiDate + (30 * 1 days)) {return lockedAmt;}\r\n        if (now <= jishiDate + (30 * 2 days)) {return lockedAmt.mul(4).div(5);}\r\n        if (now <= jishiDate + (30 * 3 days)) {return lockedAmt.mul(3).div(5);}\r\n        if (now <= jishiDate + (30 * 4 days)) {return lockedAmt.mul(2).div(5);}\r\n        if (now <= jishiDate + (30 * 5 days)) {return lockedAmt.mul(1).div(5);}\r\n     \r\n\t\r\n        return 0;\r\n    }\r\n\r\n    // get simus' locked amount of token\r\n      function getLockedAmount_simus(address _simu)\r\n        public\r\n\t\tconstant\r\n\t\treturns (uint256)\r\n\t{\r\n        uint256 simuDate = simus_simuDate[_simu];\r\n        uint256 lockedAmt = simus_locked[_simu];\r\n\r\n        if (now <= simuDate + (30 * 1 days)) {return lockedAmt;}\r\n        if (now <= simuDate + (30 * 2 days)) {return lockedAmt.mul(9).div(10);}\r\n        if (now <= simuDate + (30 * 3 days)) {return lockedAmt.mul(8).div(10);}\r\n        if (now <= simuDate + (30 * 4 days)) {return lockedAmt.mul(7).div(10);}\r\n        if (now <= simuDate + (30 * 5 days)) {return lockedAmt.mul(6).div(10);}\r\n        if (now <= simuDate + (30 * 6 days)) {return lockedAmt.mul(5).div(10);}\r\n        if (now <= simuDate + (30 * 7 days)) {return lockedAmt.mul(4).div(10);}\r\n        if (now <= simuDate + (30 * 8 days)) {return lockedAmt.mul(3).div(10);}\r\n        if (now <= simuDate + (30 * 9 days)) {return lockedAmt.mul(2).div(10);}\r\n        if (now <= simuDate + (30 * 10 days)) {return lockedAmt.mul(1).div(10);}\r\n\t\r\n        return 0;\r\n    }\r\n\r\n    function getLockedAmount_jiedians(address _jiedian)\r\n        public\r\n\t\tconstant\r\n\t\treturns (uint256)\r\n\t{\r\n        uint256 jiedianDate = jiedians_jiedianDate[_jiedian];\r\n        uint256 lockedAmt = jiedians_locked[_jiedian];\r\n\r\n        if (now <= jiedianDate + (30 * 1 days)) {return lockedAmt;}\r\n        if (now <= jiedianDate + (30 * 2 days)){return lockedAmt.mul(11).div(12);}\r\n        if (now <= jiedianDate + (30 * 3 days)) {return lockedAmt.mul(10).div(12);}\r\n        if (now <= jiedianDate + (30 * 4 days)) {return lockedAmt.mul(9).div(12);}\r\n        if (now <= jiedianDate + (30 * 5 days)) {return lockedAmt.mul(8).div(12);}\r\n        if (now <= jiedianDate + (30 * 6 days)) {return lockedAmt.mul(7).div(12);}\r\n        if (now <= jiedianDate + (30 * 7 days)) {return lockedAmt.mul(6).div(12);}\r\n        if (now <= jiedianDate + (30 * 8 days)) {return lockedAmt.mul(5).div(12);}\r\n        if (now <= jiedianDate + (30 * 9 days)) {return lockedAmt.mul(4).div(12);}\r\n        if (now <= jiedianDate + (30 * 10 days)) {return lockedAmt.mul(3).div(12);}\r\n        if (now <= jiedianDate + (30 * 11 days)) {return lockedAmt.mul(2).div(12);}\r\n        if (now <= jiedianDate + (30 * 12 days)) {return lockedAmt.mul(1).div(12);}\r\n\t\r\n        return 0;\r\n    }\r\n\r\n    function getLockedAmount_dakehus(address _dakehu)\r\n        public\r\n\t\tconstant\r\n\t\treturns (uint256)\r\n\t{\r\n        uint256 dakehuDate = dakehus_dakehuDate[_dakehu];\r\n        uint256 lockedAmt = dakehus_locked[_dakehu];\r\n\r\n        if (now <= dakehuDate + (30 * 1 days)) {return lockedAmt;}\r\n        if (now <= dakehuDate + (30 * 2 days)) {return lockedAmt.mul(23).div(24);}\r\n        if (now <= dakehuDate + (30 * 3 days)) {return lockedAmt.mul(22).div(24);}\r\n        if (now <= dakehuDate + (30 * 4 days)) {return lockedAmt.mul(21).div(24);}\r\n        if (now <= dakehuDate + (30 * 5 days)) {return lockedAmt.mul(20).div(24);}\r\n        if (now <= dakehuDate + (30 * 6 days)) {return lockedAmt.mul(19).div(24);}\r\n        if (now <= dakehuDate + (30 * 7 days)) {return lockedAmt.mul(18).div(24);}\r\n        if (now <= dakehuDate + (30 * 8 days)) {return lockedAmt.mul(17).div(24);}\r\n        if (now <= dakehuDate + (30 * 9 days)) {return lockedAmt.mul(16).div(24);}\r\n        if (now <= dakehuDate + (30 * 10 days)) {return lockedAmt.mul(15).div(24);}\r\n        if (now <= dakehuDate + (30 * 11 days)) {return lockedAmt.mul(14).div(24);}\r\n        if (now <= dakehuDate + (30 * 12 days)) {return lockedAmt.mul(13).div(24);}\r\n        if (now <= dakehuDate + (30 * 13 days)) {return lockedAmt.mul(12).div(24);}\r\n        if (now <= dakehuDate + (30 * 14 days)) {return lockedAmt.mul(11).div(24);}\r\n        if (now <= dakehuDate + (30 * 15 days)) {return lockedAmt.mul(10).div(24);}\r\n        if (now <= dakehuDate + (30 * 16 days)) {return lockedAmt.mul(9).div(24);}\r\n        if (now <= dakehuDate + (30 * 17 days)) {return lockedAmt.mul(8).div(24);}\r\n        if (now <= dakehuDate + (30 * 18 days)) {return lockedAmt.mul(7).div(24);}\r\n        if (now <= dakehuDate + (30 * 19 days)) {return lockedAmt.mul(6).div(24);}\r\n        if (now <= dakehuDate + (30 * 20 days)) {return lockedAmt.mul(5).div(24);}\r\n        if (now <= dakehuDate + (30 * 21 days)) {return lockedAmt.mul(4).div(24);}\r\n        if (now <= dakehuDate + (30 * 22 days)) {return lockedAmt.mul(3).div(24);}\r\n        if (now <= dakehuDate + (30 * 23 days)) {return lockedAmt.mul(2).div(24);}\r\n        if (now <= dakehuDate + (30 * 24 days)) {return lockedAmt.mul(1).div(24);}\r\n\r\n\t\r\n        return 0;\r\n    }\r\n\r\n\r\n    // set lockup for jishis \r\n    function setLockup_jishis(address _jishi, uint256 _value, uint256 _jishiDate)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_jishi != address(0));\r\n\r\n        jishis_locked[_jishi] = _value;\r\n        jishis_jishiDate[_jishi] = _jishiDate;\r\n        UpdatedLockingState(\"jishi\", _jishi, _value, _jishiDate);\r\n    }\r\n\r\n    // set lockup for strategic simu\r\n    function setLockup_simus(address _simu, uint256 _value, uint256 _simuDate)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_simu != address(0));\r\n\r\n        simus_locked[_simu] = _value;\r\n        simus_simuDate[_simu] = _simuDate;\r\n        UpdatedLockingState(\"simu\", _simu, _value, _simuDate);\r\n    }\r\n\r\n    function setLockup_jiedians(address _jiedian, uint256 _value, uint256 _jiedianDate)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_jiedian != address(0));\r\n\r\n        jiedians_locked[_jiedian] = _value;\r\n        jiedians_jiedianDate[_jiedian] = _jiedianDate;\r\n        UpdatedLockingState(\"jiedian\", _jiedian, _value, _jiedianDate);\r\n    }\r\n\r\n    function setLockup_dakehus(address _dakehu, uint256 _value, uint256 _dakehuDate)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_dakehu != address(0));\r\n\r\n        dakehus_locked[_dakehu] = _value;\r\n        dakehus_dakehuDate[_dakehu] = _dakehuDate;\r\n        UpdatedLockingState(\"dakehu\", _dakehu, _value, _dakehuDate);\r\n    }\r\n\r\n\r\n\t// Transfer amount of tokens from sender account to recipient.\r\n    function transfer(address _to, uint _value)\r\n        public\r\n        canTransfer(msg.sender, _value)\r\n\t\treturns (bool success)\r\n\t{\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n\t// Transfer amount of tokens from a specified address to a recipient.\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        canTransfer(_from, _value)\r\n\t\treturns (bool success)\r\n\t{\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"jiedians_jiedianDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dakehu\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_dakehuDate\",\"type\":\"uint256\"}],\"name\":\"setLockup_dakehus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jishi\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_jishiDate\",\"type\":\"uint256\"}],\"name\":\"setLockup_jishis\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_simu\",\"type\":\"address\"}],\"name\":\"getLockedAmount_simus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"jishis_jishiDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jishi\",\"type\":\"address\"}],\"name\":\"getLockedAmount_jishis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_FOUNDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dakehu\",\"type\":\"address\"}],\"name\":\"getLockedAmount_dakehus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dakehus_dakehuDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_FOUNDER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"simus_locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_simu\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_simuDate\",\"type\":\"uint256\"}],\"name\":\"setLockup_simus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jiedian\",\"type\":\"address\"}],\"name\":\"getLockedAmount_jiedians\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"jiedians_locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dakehus_locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jiedian\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_jiedianDate\",\"type\":\"uint256\"}],\"name\":\"setLockup_jiedians\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"jishis_locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"simus_simuDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"whom\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"UpdatedLockingState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EIForceCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://297ade141f6c7dd4ff166569ab3dc2c7426a0d0648537b3ba2963d9f3ee27a19"}]}