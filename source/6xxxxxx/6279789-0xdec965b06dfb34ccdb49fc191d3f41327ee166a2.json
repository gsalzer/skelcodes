{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n        if (!assertion) throw;\r\n    }\r\n}\r\n\r\ncontract AccessControl is SafeMath{\r\n\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    address newContractAddress;\r\n\r\n    uint public tip_total = 0;\r\n    uint public tip_rate = 10000000000000000;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    function () public payable{\r\n        tip_total = safeAdd(tip_total, msg.value);\r\n    }\r\n\r\n    /// @dev Count amount with tip.\r\n    /// @param amount The totalAmount\r\n    function amountWithTip(uint amount) internal returns(uint){\r\n        uint tip = safeMul(amount, tip_rate) / (1 ether);\r\n        tip_total = safeAdd(tip_total, tip);\r\n        return safeSub(amount, tip);\r\n    }\r\n\r\n    /// @dev Withdraw Tip.\r\n    function withdrawTip(uint amount) external onlyCFO {\r\n        require(amount > 0 && amount <= tip_total);\r\n        require(msg.sender.send(amount));\r\n        tip_total = tip_total - amount;\r\n    }\r\n\r\n    // updgrade\r\n    function setNewAddress(address newContract) external onlyCEO whenPaused {\r\n        newContractAddress = newContract;\r\n        emit ContractUpgrade(newContract);\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\n\r\ncontract RpsGame is SafeMath , AccessControl{\r\n\r\n    /// @dev Constant definition\r\n    uint8 constant public NONE = 0;\r\n    uint8 constant public ROCK = 10;\r\n    uint8 constant public PAPER = 20;\r\n    uint8 constant public SCISSORS = 30;\r\n    uint8 constant public DEALERWIN = 201;\r\n    uint8 constant public PLAYERWIN = 102;\r\n    uint8 constant public DRAW = 101;\r\n\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event CreateGame(uint gameid, address dealer, uint amount);\r\n    event JoinGame(uint gameid, address player, uint amount);\r\n    event Reveal(uint gameid, address player, uint8 choice);\r\n    event CloseGame(uint gameid,address dealer,address player, uint8 result);\r\n\r\n    /// @dev struct of a game\r\n    struct Game {\r\n        uint expireTime;\r\n        address dealer;\r\n        uint dealerValue;\r\n        bytes32 dealerHash;\r\n        uint8 dealerChoice;\r\n        address player;\r\n        uint8 playerChoice;\r\n        uint playerValue;\r\n        uint8 result;\r\n        bool closed;\r\n    }\r\n\r\n    /// @dev struct of a game\r\n    mapping (uint => mapping(uint => uint8)) public payoff;\r\n    mapping (uint => Game) public games;\r\n    mapping (address => uint[]) public gameidsOf;\r\n\r\n    /// @dev Current game maximum id\r\n    uint public maxgame = 0;\r\n    uint public expireTimeLimit = 30 minutes;\r\n\r\n    /// @dev Initialization contract\r\n    function RpsGame() {\r\n        payoff[ROCK][ROCK] = DRAW;\r\n        payoff[ROCK][PAPER] = PLAYERWIN;\r\n        payoff[ROCK][SCISSORS] = DEALERWIN;\r\n        payoff[PAPER][ROCK] = DEALERWIN;\r\n        payoff[PAPER][PAPER] = DRAW;\r\n        payoff[PAPER][SCISSORS] = PLAYERWIN;\r\n        payoff[SCISSORS][ROCK] = PLAYERWIN;\r\n        payoff[SCISSORS][PAPER] = DEALERWIN;\r\n        payoff[SCISSORS][SCISSORS] = DRAW;\r\n        payoff[NONE][NONE] = DRAW;\r\n        payoff[ROCK][NONE] = DEALERWIN;\r\n        payoff[PAPER][NONE] = DEALERWIN;\r\n        payoff[SCISSORS][NONE] = DEALERWIN;\r\n        payoff[NONE][ROCK] = PLAYERWIN;\r\n        payoff[NONE][PAPER] = PLAYERWIN;\r\n        payoff[NONE][SCISSORS] = PLAYERWIN;\r\n\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n        cfoAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Create a game\r\n    function createGame(bytes32 dealerHash, address player) public payable whenNotPaused returns (uint){\r\n        require(dealerHash != 0x0);\r\n\r\n        maxgame += 1;\r\n        Game storage game = games[maxgame];\r\n        game.dealer = msg.sender;\r\n        game.player = player;\r\n        game.dealerHash = dealerHash;\r\n        game.dealerChoice = NONE;\r\n        game.dealerValue = msg.value;\r\n        game.expireTime = expireTimeLimit + now;\r\n\r\n        gameidsOf[msg.sender].push(maxgame);\r\n\r\n        emit CreateGame(maxgame, game.dealer, game.dealerValue);\r\n\r\n        return maxgame;\r\n    }\r\n\r\n    /// @dev Join a game\r\n    function joinGame(uint gameid, uint8 choice) public payable whenNotPaused returns (uint){\r\n        Game storage game = games[gameid];\r\n\r\n        require(msg.value == game.dealerValue && game.dealer != address(0) && game.dealer != msg.sender && game.playerChoice==NONE);\r\n        require(game.player == address(0) || game.player == msg.sender);\r\n        require(!game.closed);\r\n        require(now < game.expireTime);\r\n        require(checkChoice(choice));\r\n\r\n        game.player = msg.sender;\r\n        game.playerChoice = choice;\r\n        game.playerValue = msg.value;\r\n        game.expireTime = expireTimeLimit + now;\r\n\r\n        gameidsOf[msg.sender].push(gameid);\r\n\r\n        emit JoinGame(gameid, game.player, game.playerValue);\r\n\r\n        return gameid;\r\n    }\r\n\r\n    /// @dev Creator reveals game choice\r\n    function reveal(uint gameid, uint8 choice, bytes32 randomSecret) public returns (bool) {\r\n        Game storage game = games[gameid];\r\n        bytes32 proof = getProof(msg.sender, choice, randomSecret);\r\n\r\n        require(!game.closed);\r\n        require(now < game.expireTime);\r\n        require(game.dealerHash != 0x0);\r\n        require(checkChoice(choice));\r\n        require(checkChoice(game.playerChoice));\r\n        require(game.dealer == msg.sender && proof == game.dealerHash );\r\n\r\n        game.dealerChoice = choice;\r\n\r\n        Reveal(gameid, msg.sender, choice);\r\n\r\n        close(gameid);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Close game settlement rewards\r\n    function close(uint gameid) public returns(bool) {\r\n        Game storage game = games[gameid];\r\n\r\n        require(!game.closed);\r\n        require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE));\r\n\r\n        uint8 result = payoff[game.dealerChoice][game.playerChoice];\r\n\r\n        if(result == DEALERWIN){\r\n            require(game.dealer.send(amountWithTip(safeAdd(game.dealerValue, game.playerValue))));\r\n        }else if(result == PLAYERWIN){\r\n            require(game.player.send(amountWithTip(safeAdd(game.dealerValue, game.playerValue))));\r\n        }else if(result == DRAW){\r\n            require(game.dealer.send(game.dealerValue) && game.player.send(game.playerValue));\r\n        }\r\n\r\n        game.closed = true;\r\n        game.result = result;\r\n\r\n        emit CloseGame(gameid, game.dealer, game.player, result);\r\n\r\n        return game.closed;\r\n    }\r\n\r\n\r\n    function getProof(address sender, uint8 choice, bytes32 randomSecret) public pure returns (bytes32){\r\n        return sha3(sender, choice, randomSecret);\r\n    }\r\n\r\n    function gameCountOf(address owner) public view returns (uint){\r\n        return gameidsOf[owner].length;\r\n    }\r\n\r\n    function checkChoice(uint8 choice) public view returns (bool){\r\n        return choice==ROCK||choice==PAPER||choice==SCISSORS;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameid\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"expireTime\",\"type\":\"uint256\"},{\"name\":\"dealer\",\"type\":\"address\"},{\"name\":\"dealerValue\",\"type\":\"uint256\"},{\"name\":\"dealerHash\",\"type\":\"bytes32\"},{\"name\":\"dealerChoice\",\"type\":\"uint8\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"playerChoice\",\"type\":\"uint8\"},{\"name\":\"playerValue\",\"type\":\"uint256\"},{\"name\":\"result\",\"type\":\"uint8\"},{\"name\":\"closed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"gameCountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"choice\",\"type\":\"uint8\"}],\"name\":\"checkChoice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"choice\",\"type\":\"uint8\"},{\"name\":\"randomSecret\",\"type\":\"bytes32\"}],\"name\":\"getProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expireTimeLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DRAW\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tip_rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payoff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameid\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"uint8\"},{\"name\":\"randomSecret\",\"type\":\"bytes32\"}],\"name\":\"reveal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCISSORS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROCK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAPER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEALERWIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameid\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"uint8\"}],\"name\":\"joinGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameidsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLAYERWIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxgame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tip_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealerHash\",\"type\":\"bytes32\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"createGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dealer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreateGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JoinGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"choice\",\"type\":\"uint8\"}],\"name\":\"Reveal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dealer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"CloseGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"RpsGame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://01e0a16935ccddeef5757bdb81cdb001f7c4c388eebbb1843e0a6df46a2c7223"}]}