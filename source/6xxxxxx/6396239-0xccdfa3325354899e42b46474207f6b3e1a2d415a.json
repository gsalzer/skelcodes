{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n//\r\n//\r\n//    ðŸŒ€ EnishiCoin\r\n//\r\n//\r\n\r\n/**\r\n * @title OwnerSigneture\r\n * @dev The OwnerSigneture contract has multiple owner addresses\r\n *      and does not execute if there is no signature of all owners.\r\n */\r\ncontract OwnerSigneture\r\n{\r\n  address[] public owners;\r\n  mapping (address => bytes32) public signetures;\r\n\r\n  function OwnerSigneture(address[] _owners) public\r\n  {\r\n    owners = _owners;\r\n    initSignetures();\r\n  }\r\n\r\n  function initSignetures() private\r\n  {\r\n    for (uint i = 0; i < owners.length; i++) {\r\n      signetures[owners[i]] = bytes32(i + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Add owners to the list\r\n   * @param _address Address of owner to add\r\n   */\r\n  function addOwner(address _address) signed public {\r\n    owners.push(_address);\r\n  }\r\n\r\n  /**\r\n   * @dev Remove owners from the list\r\n   * @param _address Address of owner to remove\r\n   */\r\n  function removeOwner(address _address) signed public returns (bool) {\r\n\r\n    uint NOT_FOUND = 1e10;\r\n    uint index = NOT_FOUND;\r\n    for (uint i = 0; i < owners.length; i++) {\r\n      if (owners[i] == _address) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (index == NOT_FOUND) {\r\n      return false;\r\n    }\r\n\r\n    for (uint j = index; j < owners.length - 1; j++){\r\n      owners[j] = owners[j + 1];\r\n    }\r\n    delete owners[owners.length - 1];\r\n    owners.length--;\r\n\r\n    return true;\r\n  }\r\n\r\n  modifier signed()\r\n  {\r\n    require(signetures[msg.sender] != 0x0);\r\n    bytes32 signeture = sha256(msg.data);\r\n    signetures[msg.sender] = signeture;\r\n\r\n    bool success = true;\r\n    for (uint i = 0; i < owners.length; i++) {\r\n      if (signeture != signetures[owners[i]]) {\r\n        success = false;\r\n      }\r\n    }\r\n\r\n    if (success) {\r\n      initSignetures();\r\n      _;\r\n      \r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC223\r\n * @dev ERC223 contract interface with ERC20 functions and events\r\n *    Fully backward compatible with ERC20\r\n *    Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\r\n */\r\ncontract ERC223\r\n{\r\n  uint public totalSupply;\r\n\r\n  // ERC223 functions\r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function decimals() public view returns (uint8 _decimals);\r\n  function totalSupply() public view returns (uint256 _supply);\r\n  function balanceOf(address who) public view returns (uint);\r\n\r\n  // ERC223 functions and events\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title EnishiCoin\r\n * @author Megumi ðŸŒµ\r\n * @dev EnishiCoin is an ERC223 Token with ERC20 functions and events\r\n *    Fully backward compatible with ERC20\r\n */\r\ncontract EnishiCoin is ERC223, OwnerSigneture\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"EnishiCoin\";\r\n  string public symbol = \"XENS\";\r\n  uint8 public decimals = 8;\r\n  uint256 dec = 1e8;\r\n\r\n  uint256 public initialSupply = 100e8 * dec; // 100å„„æžš\r\n  uint256 public totalSupply;\r\n  bool public mintingFinished = false;\r\n\r\n  address public temporaryAddress = 0x092dEBAEAD027b43301FaFF52360B2B0538b0c98;\r\n\r\n  mapping (address => uint) balances;\r\n  mapping (address => bool) public frozenAccount;\r\n  mapping (address => uint256) public unlockUnixTime;\r\n\r\n  mapping (address => uint) public temporaryBalances;\r\n  mapping (address => uint256) temporaryLimitUnixTime;\r\n\r\n  event FrozenFunds(address indexed target, bool frozen);\r\n  event LockedFunds(address indexed target, uint256 locked);\r\n  event Burn(address indexed burner, uint256 value);\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  function EnishiCoin(address[] _owners) OwnerSigneture(_owners) public\r\n  {\r\n    owners = _owners;\r\n    totalSupply = initialSupply;\r\n    for (uint i = 0; i < _owners.length; i++) {\r\n        balances[_owners[i]] = totalSupply.div(_owners.length);\r\n    }\r\n  }\r\n\r\n  function name() public view returns (string _name)\r\n  {\r\n    return name;\r\n  }\r\n\r\n  function symbol() public view returns (string _symbol)\r\n  {\r\n    return symbol;\r\n  }\r\n\r\n  function decimals() public view returns (uint8 _decimals)\r\n  {\r\n    return decimals;\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256 _totalSupply)\r\n  {\r\n    return totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint balance)\r\n  {\r\n    return balances[_owner];\r\n  }\r\n\r\n  modifier onlyPayloadSize(uint256 _size)\r\n  {\r\n    assert(msg.data.length >= _size + 4);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevent targets from sending or receiving tokens\r\n   * @param _targets Addresses to be frozen\r\n   * @param _isFrozen either to freeze it or not\r\n   */\r\n  function freezeAccounts(address[] _targets, bool _isFrozen) signed public\r\n  {\r\n    require(_targets.length > 0);\r\n\r\n    for (uint i = 0; i < _targets.length; i++) {\r\n      require(_targets[i] != 0x0);\r\n      frozenAccount[_targets[i]] = _isFrozen;\r\n      FrozenFunds(_targets[i], _isFrozen);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Prevent targets from sending or receiving tokens by setting Unix times\r\n   * @param _targets Addresses to be locked funds\r\n   * @param _unixTimes Unix times when locking up will be finished\r\n   */\r\n  function lockupAccounts(address[] _targets, uint[] _unixTimes) signed public\r\n  {\r\n    require(true\r\n      && _targets.length > 0\r\n      && _targets.length == _unixTimes.length\r\n    );\r\n\r\n    for(uint i = 0; i < _targets.length; i++) {\r\n      require(unlockUnixTime[_targets[i]] < _unixTimes[i]);\r\n      unlockUnixTime[_targets[i]] = _unixTimes[i];\r\n      LockedFunds(_targets[i], _unixTimes[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is called when a user or another contract wants to transfer funds.\r\n   */\r\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success)\r\n  {\r\n    require(true\r\n      && _value > 0\r\n      && frozenAccount[msg.sender] == false\r\n      && frozenAccount[_to] == false\r\n      && now > unlockUnixTime[msg.sender]\r\n      && now > unlockUnixTime[_to]\r\n    );\r\n\r\n    if (isContract(_to)) {\r\n      if (balanceOf(msg.sender) < _value) {\r\n        revert();\r\n      }\r\n      balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\r\n      balances[_to] = SafeMath.add(balanceOf(_to), _value);\r\n      assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n      Transfer(msg.sender, _to, _value, _data);\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else {\r\n      return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is called when a user or another contract wants to transfer funds.\r\n   */\r\n  function transfer(address _to, uint _value, bytes _data) public returns (bool success)\r\n  {\r\n    require(true\r\n      && _value > 0\r\n      && frozenAccount[msg.sender] == false\r\n      && frozenAccount[_to] == false\r\n      && now > unlockUnixTime[msg.sender]\r\n      && now > unlockUnixTime[_to]\r\n    );\r\n\r\n    if (isContract(_to)) {\r\n      return transferToContract(_to, _value, _data);\r\n    } else {\r\n      return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Standard function transfer similar to ERC20 transfer with no _data. Added due to backwards compatibility reasons.\r\n   */\r\n  function transfer(address _to, uint _value) public returns (bool success)\r\n  {\r\n    require(true\r\n      && _value > 0\r\n      && frozenAccount[msg.sender] == false\r\n      && frozenAccount[_to] == false\r\n      && now > unlockUnixTime[msg.sender]\r\n      && now > unlockUnixTime[_to]\r\n    );\r\n\r\n    bytes memory empty;\r\n    if (isContract(_to)) {\r\n      return transferToContract(_to, _value, empty);\r\n    } else {\r\n      return transferToAddress(_to, _value, empty);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev assemble the given address bytecode. If bytecode exists then the _address is a contract.\r\n   */\r\n  function isContract(address _address) private view returns (bool is_contract)\r\n  {\r\n    uint length;\r\n    assembly {\r\n      // retrieve the size of the code on target address, this needs assembly\r\n      length := extcodesize(_address)\r\n    }\r\n    return (length > 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is called when transaction target is an address.\r\n   */\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success)\r\n  {\r\n    if (balanceOf(msg.sender) < _value) {\r\n      revert();\r\n    }\r\n    balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\r\n    balances[_to] = SafeMath.add(balanceOf(_to), _value);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is called when transaction target is a contract.\r\n   */\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success)\r\n  {\r\n    if (balanceOf(msg.sender) < _value) {\r\n      revert();\r\n    }\r\n    balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\r\n    balances[_to] = SafeMath.add(balanceOf(_to), _value);\r\n    ContractReceiver receiver = ContractReceiver(_to);\r\n    receiver.tokenFallback(msg.sender, _value, _data);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _from The address that will burn the tokens.\r\n   * @param _amount The amount of token to be burned.\r\n   */\r\n  function burn(address _from, uint256 _amount) signed public\r\n  {\r\n    require(true\r\n      && _amount > 0\r\n      && balances[_from] >= _amount\r\n    );\r\n\r\n    _amount = SafeMath.mul(_amount, dec);\r\n    balances[_from] = SafeMath.sub(balances[_from], _amount);\r\n    totalSupply = SafeMath.sub(totalSupply, _amount);\r\n    Burn(_from, _amount);\r\n  }\r\n\r\n  modifier canMint()\r\n  {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   */\r\n  function mint(address _to, uint256 _amount) signed canMint public returns (bool)\r\n  {\r\n    require(_amount > 0);\r\n\r\n    _amount = SafeMath.mul(_amount, dec);\r\n    totalSupply = SafeMath.add(totalSupply, _amount);\r\n    balances[_to] = SafeMath.add(balances[_to], _amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   */\r\n  function finishMinting() signed canMint public returns (bool)\r\n  {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to distribute tokens to the list of addresses by the provided amount\r\n   */\r\n  function distributeAirdrop(address[] _addresses, uint256 _amount) public returns (bool)\r\n  {\r\n    require(true\r\n      && _amount > 0\r\n      && _addresses.length > 0\r\n      && frozenAccount[msg.sender] == false\r\n      && now > unlockUnixTime[msg.sender]\r\n    );\r\n\r\n    _amount = SafeMath.mul(_amount, dec);\r\n    uint256 totalAmount = SafeMath.mul(_amount, _addresses.length);\r\n    require(balances[msg.sender] >= totalAmount);\r\n\r\n    for (uint i = 0; i < _addresses.length; i++) {\r\n      require(true\r\n        && _addresses[i] != 0x0\r\n        && frozenAccount[_addresses[i]] == false\r\n        && now > unlockUnixTime[_addresses[i]]\r\n      );\r\n\r\n      balances[_addresses[i]] = SafeMath.add(balances[_addresses[i]], _amount);\r\n      Transfer(msg.sender, _addresses[i], _amount);\r\n    }\r\n    balances[msg.sender] = SafeMath.sub(balances[msg.sender], totalAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to collect tokens from the list of _addresses\r\n   */\r\n  function collectTokens(address[] _addresses, uint256[] _amounts) signed public returns (bool)\r\n  {\r\n    require(true\r\n      && _addresses.length > 0\r\n      && _addresses.length == _amounts.length\r\n    );\r\n\r\n    uint256 totalAmount = 0;\r\n\r\n    for (uint i = 0; i < _addresses.length; i++) {\r\n      require(true\r\n        && _amounts[i] > 0\r\n        && _addresses[i] != 0x0\r\n        && frozenAccount[_addresses[i]] == false\r\n        && now > unlockUnixTime[_addresses[i]]\r\n      );\r\n\r\n      _amounts[i] = SafeMath.mul(_amounts[i], dec);\r\n      require(balances[_addresses[i]] >= _amounts[i]);\r\n\r\n      balances[_addresses[i]] = SafeMath.sub(balances[_addresses[i]], _amounts[i]);\r\n      totalAmount = SafeMath.add(totalAmount, _amounts[i]);\r\n      Transfer(_addresses[i], msg.sender, _amounts[i]);\r\n    }\r\n    balances[msg.sender] = SafeMath.add(balances[msg.sender], totalAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Push tokens to temporary area.\r\n   */\r\n  function pushToken(address[] _addresses, uint256 _amount, uint _limitUnixTime) public returns (bool)\r\n  {\r\n    require(true\r\n      && _amount > 0\r\n      && _addresses.length > 0\r\n      && frozenAccount[msg.sender] == false\r\n      && now > unlockUnixTime[msg.sender]\r\n    );\r\n\r\n    _amount = SafeMath.mul(_amount, dec);\r\n    uint256 totalAmount = SafeMath.mul(_amount, _addresses.length);\r\n    require(balances[msg.sender] >= totalAmount);\r\n\r\n    for (uint i = 0; i < _addresses.length; i++) {\r\n      require(true\r\n        && _addresses[i] != 0x0\r\n        && frozenAccount[_addresses[i]] == false\r\n        && now > unlockUnixTime[_addresses[i]]\r\n      );\r\n      temporaryBalances[_addresses[i]] = SafeMath.add(temporaryBalances[_addresses[i]], _amount);\r\n      temporaryLimitUnixTime[_addresses[i]] = _limitUnixTime;\r\n    }\r\n    balances[msg.sender] = SafeMath.sub(balances[msg.sender], totalAmount);\r\n    balances[temporaryAddress] = SafeMath.add(balances[temporaryAddress], totalAmount);\r\n    Transfer(msg.sender, temporaryAddress, totalAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Pop tokens from temporary area. _amount\r\n   */\r\n  function popToken(address _to) public returns (bool)\r\n  {\r\n    require(true\r\n      && temporaryBalances[msg.sender] > 0\r\n      && frozenAccount[msg.sender] == false\r\n      && now > unlockUnixTime[msg.sender]\r\n      && frozenAccount[_to] == false\r\n      && now > unlockUnixTime[_to]\r\n      && balances[temporaryAddress] >= temporaryBalances[msg.sender]\r\n      && temporaryLimitUnixTime[msg.sender] > now\r\n    );\r\n\r\n    uint256 amount = temporaryBalances[msg.sender];\r\n\r\n    temporaryBalances[msg.sender] = 0;\r\n    balances[temporaryAddress] = SafeMath.sub(balances[temporaryAddress], amount);\r\n    balances[_to] = SafeMath.add(balances[_to], amount);\r\n    Transfer(temporaryAddress, _to, amount);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath\r\n{\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n  {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256)\r\n  {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n  {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256)\r\n  {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ContractReceiver\r\n * @dev Contract that is working with ERC223 tokens\r\n */\r\ncontract ContractReceiver\r\n{\r\n  struct TKN {\r\n    address sender;\r\n    uint value;\r\n    bytes data;\r\n    bytes4 sig;\r\n  }\r\n\r\n  function tokenFallback(address _from, uint _value, bytes _data) public pure\r\n  {\r\n    TKN memory tkn;\r\n    tkn.sender = _from;\r\n    tkn.value = _value;\r\n    tkn.data = _data;\r\n    uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n    tkn.sig = bytes4(u);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"temporaryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"temporaryBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_unixTimes\",\"type\":\"uint256[]\"}],\"name\":\"lockupAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"popToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signetures\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_isFrozen\",\"type\":\"bool\"}],\"name\":\"freezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockUnixTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_limitUnixTime\",\"type\":\"uint256\"}],\"name\":\"pushToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"collectTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"uint256\"}],\"name\":\"LockedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"EnishiCoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fde51cd597e63f1fca7fae03b6f658141554d0f00000000000000000000000001ef098bb51fdec5a8474d0cd00632dc11cfb37ef","Library":"","SwarmSource":"bzzr://8c9f330983a0050e420a8a632bfbfeb28d8e8e66c655cfbe958c3e1c7141ff4c"}]}