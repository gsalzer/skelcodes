{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\npragma experimental \"v0.5.0\";\r\n/******************************************************************************\\\r\n* Author: Nick Mudge, nick@mokens.io\r\n* Copyright (c) 2018\r\n* Mokens\r\n*\r\n* The QueryMokenDelegates contract contains functions for retrieving function\r\n* signatures and delegate contract addresses used by the Mokens contract.\r\n/******************************************************************************/\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//Storage contracts\r\n////////////\r\n//Some delegate contracts are listed with storage contracts they inherit.\r\n///////////////////////////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//Mokens\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage0 {\r\n    // funcId => delegate contract\r\n    mapping(bytes4 => address) internal delegates;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenUpdates\r\n//MokenOwner\r\n//QueryMokenDelegates\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage1 is Storage0 {\r\n    address internal contractOwner;\r\n    bytes[] internal funcSignatures;\r\n    // signature => index+1\r\n    mapping(bytes => uint256) internal funcSignatureToIndex;\r\n}\r\n\r\ncontract QueryMokenDelegates is Storage1 {\r\n\r\n    function totalFunctions() external view returns(uint256) {\r\n        return funcSignatures.length;\r\n    }\r\n\r\n    function functionByIndex(uint256 _index) external view returns(string memory functionSignature, bytes4 functionId, address delegate) {\r\n        require(_index < funcSignatures.length, \"functionSignatures index does not exist.\");\r\n        bytes memory signature = funcSignatures[_index];\r\n        functionId = bytes4(keccak256(signature));\r\n        delegate = delegates[functionId];\r\n        return (string(signature), functionId, delegate);\r\n    }\r\n\r\n    function functionExists(string _functionSignature) external view returns(bool) {\r\n        return funcSignatureToIndex[bytes(_functionSignature)] != 0;\r\n    }\r\n\r\n    function functionSignatures() external view returns(string) {\r\n        uint256 signaturesLength;\r\n        bytes memory signatures;\r\n        bytes memory signature;\r\n        uint256 functionIndex;\r\n        uint256 charPos;\r\n        uint256 funcSignaturesNum = funcSignatures.length;\r\n        bytes[] memory memoryFuncSignatures = new bytes[](funcSignaturesNum);\r\n        for(; functionIndex < funcSignaturesNum; functionIndex++) {\r\n            signature = funcSignatures[functionIndex];\r\n            signaturesLength += signature.length;\r\n            memoryFuncSignatures[functionIndex] = signature;\r\n        }\r\n        signatures = new bytes(signaturesLength);\r\n        functionIndex = 0;\r\n        for(; functionIndex < funcSignaturesNum; functionIndex++) {\r\n            signature = memoryFuncSignatures[functionIndex];\r\n            for(uint256 i = 0; i < signature.length; i++) {\r\n                signatures[charPos] = signature[i];\r\n                charPos++;\r\n            }\r\n        }\r\n        return string(signatures);\r\n    }\r\n\r\n    function delegateFunctionSignatures(address _delegate) external view returns(string) {\r\n        uint256 funcSignaturesNum = funcSignatures.length;\r\n        bytes[] memory delegateSignatures = new bytes[](funcSignaturesNum);\r\n        uint256 delegateSignaturesPos;\r\n        uint256 signaturesLength;\r\n        bytes memory signatures;\r\n        bytes memory signature;\r\n        uint256 functionIndex;\r\n        uint256 charPos;\r\n        for(; functionIndex < funcSignaturesNum; functionIndex++) {\r\n            signature = funcSignatures[functionIndex];\r\n            if(_delegate == delegates[bytes4(keccak256(signature))]) {\r\n                signaturesLength += signature.length;\r\n                delegateSignatures[delegateSignaturesPos] = signature;\r\n                delegateSignaturesPos++;\r\n            }\r\n\r\n        }\r\n        signatures = new bytes(signaturesLength);\r\n        functionIndex = 0;\r\n        for(; functionIndex < delegateSignatures.length; functionIndex++) {\r\n            signature = delegateSignatures[functionIndex];\r\n            if(signature.length == 0) {\r\n                break;\r\n            }\r\n            for(uint256 i = 0; i < signature.length; i++) {\r\n                signatures[charPos] = signature[i];\r\n                charPos++;\r\n            }\r\n        }\r\n        return string(signatures);\r\n    }\r\n\r\n    function delegateAddress(string _functionSignature) external view returns(address) {\r\n        require(funcSignatureToIndex[bytes(_functionSignature)] != 0, \"Function signature not found.\");\r\n        return delegates[bytes4(keccak256(bytes(_functionSignature)))];\r\n    }\r\n\r\n    function functionBySignature(string _functionSignature) external view returns(bytes4 functionId, address delegate) {\r\n        require(funcSignatureToIndex[bytes(_functionSignature)] != 0, \"Function signature not found.\");\r\n        functionId = bytes4(keccak256(bytes(_functionSignature)));\r\n        return (functionId,delegates[functionId]);\r\n    }\r\n\r\n    function functionById(bytes4 _functionId) external view returns(string signature, address delegate) {\r\n        for(uint256 i = 0; i < funcSignatures.length; i++) {\r\n            if(_functionId == bytes4(keccak256(funcSignatures[i]))) {\r\n                return (string(funcSignatures[i]), delegates[_functionId]);\r\n            }\r\n        }\r\n        revert(\"functionId not found\");\r\n    }\r\n\r\n    function delegateAddresses() external view returns(address[]) {\r\n        uint256 funcSignaturesNum = funcSignatures.length;\r\n        address[] memory delegatesBucket = new address[](funcSignaturesNum);\r\n        uint256 numDelegates;\r\n        uint256 functionIndex;\r\n        bool foundDelegate;\r\n        address delegate;\r\n        for(; functionIndex < funcSignaturesNum; functionIndex++) {\r\n            delegate = delegates[bytes4(keccak256(funcSignatures[functionIndex]))];\r\n            for(uint256 i = 0; i < numDelegates; i++) {\r\n                if(delegate == delegatesBucket[i]) {\r\n                    foundDelegate = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(foundDelegate == false) {\r\n                delegatesBucket[numDelegates] = delegate;\r\n                numDelegates++;\r\n            }\r\n            else {\r\n                foundDelegate = false;\r\n            }\r\n        }\r\n        address[] memory delegates_ = new address[](numDelegates);\r\n        functionIndex = 0;\r\n        for(; functionIndex < numDelegates; functionIndex++) {\r\n            delegates_[functionIndex] = delegatesBucket[functionIndex];\r\n        }\r\n        return delegates_;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"functionByIndex\",\"outputs\":[{\"name\":\"functionSignature\",\"type\":\"string\"},{\"name\":\"functionId\",\"type\":\"bytes4\"},{\"name\":\"delegate\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_functionSignature\",\"type\":\"string\"}],\"name\":\"delegateAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"functionSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"delegateFunctionSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_functionSignature\",\"type\":\"string\"}],\"name\":\"functionExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegateAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_functionSignature\",\"type\":\"string\"}],\"name\":\"functionBySignature\",\"outputs\":[{\"name\":\"functionId\",\"type\":\"bytes4\"},{\"name\":\"delegate\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunctions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_functionId\",\"type\":\"bytes4\"}],\"name\":\"functionById\",\"outputs\":[{\"name\":\"signature\",\"type\":\"string\"},{\"name\":\"delegate\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"QueryMokenDelegates","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8145de33d1ecbef47d58d6f44c9accfd96a920dbaefd99bd78e68f8db9bdbf92"}]}