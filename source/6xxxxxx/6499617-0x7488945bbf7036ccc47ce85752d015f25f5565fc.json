{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n// ----------------------------------------------------------------------------\r\n// 'Medica Token' contract with following features\r\n//      => In-built ICO functionality - Infinite duration\r\n//      => ERC20 Compliance\r\n//      => Higher control of ICO by admin/owner\r\n//      => selfdestruct functionality\r\n//      => SafeMath implementation \r\n//\r\n// Deployed to : 0x6A51a1415ED5e6156D4A6046C890e2f2a4Cfd0B9\r\n// Symbol      : MEDTK\r\n// Name        : Medica Token\r\n// Total supply: 10,000,000,000  (10 Billion)\r\n// Decimals    : 18\r\n//\r\n// Copyright (c) 2018 Medica Ltd, Belize (https://www.medica.ai)\r\n// Contract designed by Ether Authority (https://EtherAuthority.io)\r\n// ----------------------------------------------------------------------------\r\n   \r\n    /**\r\n     * @title SafeMath\r\n     * @dev Math operations with safety checks that throw on error\r\n     */\r\n    library SafeMath {\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n      }\r\n    \r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n      }\r\n    \r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n      }\r\n    \r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n      }\r\n    }\r\n    \r\n    contract owned {\r\n        address public owner;\r\n    \tusing SafeMath for uint256;\r\n    \t\r\n         constructor () public {\r\n            owner = msg.sender;\r\n        }\r\n    \r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n    \r\n        function transferOwnership(address newOwner) onlyOwner public {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n    \r\n    contract TokenERC20 {\r\n        // Public variables of the token\r\n        using SafeMath for uint256;\r\n    \tstring public name;\r\n        string public symbol;\r\n        uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it\r\n        uint256 public totalSupply;\r\n        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\r\n    \r\n        // This creates an array with all balances\r\n        mapping (address => uint256) public balanceOf;\r\n        mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n        // This generates a public event on the blockchain that will notify clients\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n        // This notifies clients about the amount burnt\r\n        event Burn(address indexed from, uint256 value);\r\n    \r\n        /**\r\n         * Constrctor function\r\n         *\r\n         * Initializes contract with initial supply tokens to the creator of the contract\r\n         */\r\n        constructor (\r\n            uint256 initialSupply,\r\n            string tokenName,\r\n            string tokenSymbol\r\n        ) public {\r\n            totalSupply = initialSupply.mul(1 ether);           // Update total supply with the decimal amount\r\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n            name = tokenName;                                   // Set the name for display purposes\r\n            symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        }\r\n    \r\n        /**\r\n         * Internal transfer, only can be called by this contract\r\n         */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            require(!safeguard);\r\n            // Prevent transfer to 0x0 address. Use burn() instead\r\n            require(_to != 0x0);\r\n            // Check if the sender has enough\r\n            require(balanceOf[_from] >= _value);\r\n            // Check for overflows\r\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n            // Save this for an assertion in the future\r\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n            // Subtract from the sender\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);\r\n            // Add the same to the recipient\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens\r\n         *\r\n         * Send `_value` tokens to `_to` from your account\r\n         *\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transfer(address _to, uint256 _value) public {\r\n            _transfer(msg.sender, _to, _value);\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens from other address\r\n         *\r\n         * Send `_value` tokens to `_to` in behalf of `_from`\r\n         *\r\n         * @param _from The address of the sender\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n            require(!safeguard);\r\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n            _transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address\r\n         *\r\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         */\r\n        function approve(address _spender, uint256 _value) public\r\n            returns (bool success) {\r\n            require(!safeguard);\r\n            allowance[msg.sender][_spender] = _value;\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address and notify\r\n         *\r\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         * @param _extraData some extra information to send to the approved contract\r\n         */\r\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n            public\r\n            returns (bool success) {\r\n            require(!safeguard);\r\n            tokenRecipient spender = tokenRecipient(_spender);\r\n            if (approve(_spender, _value)) {\r\n                spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n                return true;\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens\r\n         *\r\n         * Remove `_value` tokens from the system irreversibly\r\n         *\r\n         * @param _value the amount of money to burn\r\n         */\r\n        function burn(uint256 _value) public returns (bool success) {\r\n            require(!safeguard);\r\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\r\n            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n           \temit Burn(msg.sender, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens from other account\r\n         *\r\n         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n         *\r\n         * @param _from the address of the sender\r\n         * @param _value the amount of money to burn\r\n         */\r\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n            require(!safeguard);\r\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\r\n            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\r\n          \temit  Burn(_from, _value);\r\n            return true;\r\n        }\r\n        \r\n    }\r\n    \r\n    //*******************************************************//\r\n    //-------------  ADVANCED TOKEN STARTS HERE -------------//\r\n    //*******************************************************//\r\n    \r\n    contract MedicaToken is owned, TokenERC20 {\r\n    \tusing SafeMath for uint256;\r\n    \t\r\n    \t/**********************************/\r\n        /* Code for the ERC20 MedicaToken */\r\n        /**********************************/\r\n    \r\n    \t// Public variables of the token\r\n    \tstring private tokenName = \"Medica Token\";\r\n        string private tokenSymbol = \"MEDTK\";\r\n        uint256 private initialSupply = 10000000000; \t// Initial supply of the tokens   \r\n\r\n\t\t// Records for the fronzen accounts \r\n        mapping (address => bool) public frozenAccount;\r\n        \r\n        /* This generates a public event on the blockchain that will notify clients */\r\n        event FrozenFunds(address target, bool frozen);\r\n    \r\n        /* Initializes contract with initial supply tokens to the creator of the contract */\r\n        constructor () TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n        /* Internal transfer, only can be called by this contract */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            require(!safeguard);\r\n\t\t\trequire (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\t\trequire (balanceOf[_from] >= _value);               // Check if the sender has enough\r\n\t\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\r\n\t\t\trequire(!frozenAccount[_from]);                     // Check if sender is frozen\r\n\t\t\trequire(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n\t\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\r\n\t\t\tbalanceOf[_to] = balanceOf[_to].add(_value);                           // Add the same to the recipient\r\n\t\t\temit Transfer(_from, _to, _value);\r\n        }\r\n        \r\n\t\t/// @notice Create `mintedAmount` tokens and send it to `target`\r\n\t\t/// @param target Address to receive the tokens\r\n\t\t/// @param mintedAmount the amount of tokens it will receive\r\n\t\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n\t\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\r\n\t\t\ttotalSupply = totalSupply.add(mintedAmount);\r\n\t\t \temit Transfer(0, this, mintedAmount);\r\n\t\t \temit Transfer(this, target, mintedAmount);\r\n\t\t}\r\n\r\n\t\t/// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n\t\t/// @param target Address to be frozen\r\n\t\t/// @param freeze either to freeze it or not\r\n\t\tfunction freezeAccount(address target, bool freeze) onlyOwner public {\r\n\t\t\t\tfrozenAccount[target] = freeze;\r\n\t\t\temit  FrozenFunds(target, freeze);\r\n\t\t}\r\n\r\n\t\t/**************************/\r\n\t\t/* Code for the Crowdsale */\r\n\t\t/**************************/\r\n\r\n\t\t//public variables for the Crowdsale\r\n\t\tuint256 public icoStartDate = 999 ;  // Any past timestamp\r\n\t\tuint256 public icoEndDate = 9999999999999999 ;    // Infinite end date.\r\n\t\tuint256 public exchangeRate = 10000;         // 1 ETH = 10000 Tokens \r\n\t\tuint256 public tokensSold = 0;              // how many tokens sold through crowdsale\r\n\r\n\t\t//@dev fallback function, only accepts ether if ICO is running or Reject\r\n\t\tfunction () payable public {\r\n\t\t\trequire(icoEndDate > now);\r\n\t\t\trequire(icoStartDate < now);\r\n            require(!safeguard);\r\n\t\t\tuint ethervalueWEI=msg.value;\r\n\t\t\t// calculate token amount to be sent\r\n\t\t\tuint256 token = ethervalueWEI.mul(exchangeRate); //weiamount * price\r\n\t\t\ttokensSold = tokensSold.add(token);\r\n\t\t\t_transfer(this, msg.sender, token);              // makes the transfers\r\n\t\t\tforwardEherToOwner();\r\n\t\t}\r\n\r\n\t\t//Automatocally forwards ether from smart contract to owner address\r\n\t\tfunction forwardEherToOwner() internal {\r\n\t\t\towner.transfer(msg.value); \r\n\t\t}\r\n\r\n\t\t//function to start an ICO.\r\n\t\t//It requires: timestamp of start and end date, exchange rate (1 ETH = ? Tokens), and token amounts to allocate for the ICO\r\n\t\t//It will transfer allocated amount to the smart contract from Owner\r\n\t\tfunction startIco(uint256 start,uint256 end, uint256 exchangeRateNew, uint256 TokensAllocationForICO) onlyOwner public {\r\n\t\t\trequire(start < end);\r\n\t\t\tuint256 tokenAmount = TokensAllocationForICO.mul(1 ether);\r\n\t\t\trequire(balanceOf[msg.sender] > tokenAmount);\r\n\t\t\ticoStartDate=start;\r\n\t\t\ticoEndDate=end;\r\n\t\t\texchangeRate = exchangeRateNew;\r\n\t\t\tapprove(this,tokenAmount);\r\n\t\t\ttransfer(this,tokenAmount);\r\n        }\r\n        \r\n        //Stops an ICO.\r\n        //It will also transfer remaining tokens to owner\r\n\t\tfunction stopICO() onlyOwner public{\r\n            icoEndDate = 0;\r\n            uint256 tokenAmount=balanceOf[this];\r\n            _transfer(this, msg.sender, tokenAmount);\r\n        }\r\n        \r\n        //function to check wheter ICO is running or not.\r\n        function isICORunning() public view returns(bool){\r\n            if(icoEndDate > now && icoStartDate < now){\r\n                return true;                \r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        //Function to set ICO Exchange rate. \r\n    \tfunction setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\r\n\t\t\texchangeRate=newExchangeRate;\r\n        }\r\n        \r\n        //Just in case, owner wants to transfer Tokens from contract to owner address\r\n        function manualWithdrawToken(uint256 _amount) onlyOwner public {\r\n      \t\tuint256 tokenAmount = _amount.mul(1 ether);\r\n            _transfer(this, msg.sender, tokenAmount);\r\n        }\r\n          \r\n        //Just in case, owner wants to transfer Ether from contract to owner address\r\n        function manualWithdrawEther()onlyOwner public{\r\n\t\t\tuint256 amount=address(this).balance;\r\n\t\t\towner.transfer(amount);\r\n\t\t}\r\n\t\t\r\n\t\t//selfdestruct function. just in case owner decided to destruct this contract.\r\n\t\tfunction destructContract()onlyOwner public{\r\n\t\t\tselfdestruct(owner);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n         * Change safeguard status on or off\r\n         *\r\n         * When safeguard is true, then all the non-owner functions will stop working.\r\n         */\r\n        function changeSafeguardStatus() onlyOwner public{\r\n            if (safeguard == false){\r\n\t\t\t    safeguard = true;\r\n            }\r\n            else{\r\n                safeguard = false;    \r\n            }\r\n\t\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICORunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeSafeguardStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualWithdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destructContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeguard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"exchangeRateNew\",\"type\":\"uint256\"},{\"name\":\"TokensAllocationForICO\",\"type\":\"uint256\"}],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setICOExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MedicaToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e87ef1dbac1ebe67f70a0d6580bca1aa505bc213a678e704cd35c37e36601a67"}]}