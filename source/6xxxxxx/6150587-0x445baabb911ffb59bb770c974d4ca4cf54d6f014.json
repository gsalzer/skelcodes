{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract InterbetCore {\r\n\r\n\t/* Global constants */\r\n\tuint constant oddsDecimals = 2; // Max. decimal places of odds\r\n\tuint constant feeRateDecimals = 1; // Max. decimal places of fee rate\r\n\r\n\tuint public minMakerBetFund = 100 * 1 finney; // Minimum fund of a maker bet\r\n\r\n\tuint public maxAllowedTakerBetsPerMakerBet = 100; // Limit the number of taker-bets in 1 maker-bet\r\n\tuint public minAllowedStakeInPercentage = 1; // 100 รท maxAllowedTakerBetsPerMakerBet\r\n\r\n\tuint public baseVerifierFee = 1 finney; // Ensure verifier has some minimal profit to cover their gas cost at least\r\n\r\n\t/* Owner and admins */\r\n\taddress private owner;\r\n\tmapping(address => bool) private admins;\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction changeOwner(address newOwner) external onlyOwner {\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n\tfunction addAdmin(address addr) external onlyOwner {\r\n\t\tadmins[addr] = true;\r\n\t}\r\n\r\n\tfunction removeAdmin(address addr) external onlyOwner {\r\n\t\tadmins[addr] = false;\r\n\t}\r\n\r\n\tmodifier onlyAdmin() {\r\n\t\trequire(admins[msg.sender] == true);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction changeMinMakerBetFund(uint weis) external onlyAdmin {\r\n\t\tminMakerBetFund = mul(weis, 1 wei);\r\n\t}\r\n\r\n\tfunction changeAllowedTakerBetsPerMakerBet(uint maxCount, uint minPercentage) external onlyAdmin {\r\n\t\tmaxAllowedTakerBetsPerMakerBet = maxCount;\r\n\t\tminAllowedStakeInPercentage = minPercentage;\r\n\t}\r\n\r\n\tfunction changeBaseVerifierFee(uint weis) external onlyAdmin {\r\n\t\tbaseVerifierFee = mul(weis, 1 wei);\r\n\t}\r\n\r\n\t/* Events */\r\n\tevent LogUpdateVerifier(address indexed addr, uint oldFeeRate, uint newFeeRate);\r\n\tevent LogMakeBet(uint indexed makerBetId, address indexed maker);\r\n\tevent LogAddFund(uint indexed makerBetId, address indexed maker, uint oldTotalFund, uint newTotalFund);\r\n\tevent LogUpdateOdds(uint indexed makerBetId, address indexed maker, uint oldOdds, uint newOdds);\r\n\tevent LogPauseBet(uint indexed makerBetId, address indexed maker);\r\n\tevent LogReopenBet(uint indexed makerBetId, address indexed maker);\r\n\tevent LogCloseBet(uint indexed makerBetId, address indexed maker);\r\n\tevent LogTakeBet(uint indexed makerBetId, address indexed maker, uint indexed takerBetId, address taker);\r\n\tevent LogSettleBet(uint indexed makerBetId, address indexed maker);\r\n\tevent LogWithdraw(uint indexed makerBetId, address indexed maker, address indexed addr);\r\n\r\n\t/* Betting Core */\r\n\tenum BetStatus {\r\n\t\tOpen, \r\n\t\tPaused, \r\n\t\tClosed, \r\n\t\tSettled\r\n\t}\r\n\r\n\tenum BetOutcome {\r\n\t\tNotSettled,\r\n\t\tMakerWin,\r\n\t\tTakerWin,\r\n\t\tDraw,\r\n\t\tCanceled\r\n\t}\r\n\r\n\tstruct MakerBet {\r\n\t\tuint makerBetId;\r\n\t\taddress maker;\r\n\t\tuint odds;\r\n\t\tuint totalFund;\r\n\t\tVerifier trustedVerifier;\r\n\t\tuint expiry;\r\n\t\tBetStatus status;\r\n\t\tuint reservedFund;\r\n\t\tuint takerBetsCount;\r\n\t\tuint totalStake;\r\n\t\tTakerBet[] takerBets;\r\n\t\tBetOutcome outcome;\r\n\t\tbool makerFundWithdrawn;\r\n\t\tbool trustedVerifierFeeSent;\r\n\t}\r\n\r\n\tstruct TakerBet {\r\n\t\tuint takerBetId;\r\n\t\taddress taker;\r\n\t\tuint odds;\r\n\t\tuint stake;\r\n        bool settled;\r\n\t}\r\n\r\n\tstruct Verifier {\r\n\t\taddress addr;\r\n\t\tuint feeRate;\r\n\t}\r\n\r\n\tuint public makerBetsCount;\r\n\tmapping(uint => mapping(address => MakerBet)) private makerBets;\r\n\r\n\tmapping(address => Verifier) private verifiers;\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\tmakerBetsCount = 0;\r\n\t}\r\n\r\n\tfunction () external payable {\r\n\t\trevert();\r\n\t}\r\n\r\n\t/// Update verifier's data\r\n\tfunction updateVerifier(uint feeRate) external {\r\n\t\trequire(feeRate >= 0 && feeRate <= ((10 ** feeRateDecimals) * 100));\r\n\r\n\t\tVerifier storage verifier = verifiers[msg.sender];\r\n\r\n\t\tuint oldFeeRate = verifier.feeRate;\r\n\r\n\t\tverifier.addr = msg.sender;\r\n\t\tverifier.feeRate = feeRate;\r\n\r\n\t\temit LogUpdateVerifier(msg.sender, oldFeeRate, feeRate);\r\n\t}\r\n\r\n\t/// Make a bet\r\n\tfunction makeBet(uint makerBetId, uint odds, address trustedVerifier, uint trustedVerifierFeeRate, uint expiry) external payable {\r\n\t\tuint fund = sub(msg.value, baseVerifierFee);\r\n\r\n\t\trequire(fund >= minMakerBetFund);\r\n\t\trequire(odds > (10 ** oddsDecimals) && odds < ((10 ** 8) * (10 ** oddsDecimals)));\r\n\t\trequire(expiry > now);\r\n\r\n        MakerBet storage makerBet = makerBets[makerBetId][msg.sender];\r\n\r\n        require(makerBet.makerBetId == 0);\r\n\r\n        Verifier memory verifier = verifiers[trustedVerifier];\r\n\r\n        require(verifier.addr != address(0x0));\r\n        require(trustedVerifierFeeRate == verifier.feeRate);\r\n\r\n\t\tmakerBet.makerBetId = makerBetId;\r\n\t\tmakerBet.maker = msg.sender;\r\n\t\tmakerBet.odds = odds;\r\n\t\tmakerBet.totalFund = fund;\r\n\t\tmakerBet.trustedVerifier = Verifier(verifier.addr, verifier.feeRate);\r\n\t\tmakerBet.expiry = expiry;\r\n\t\tmakerBet.status = BetStatus.Open;\r\n\t\tmakerBet.reservedFund = 0;\r\n\t\tmakerBet.takerBetsCount = 0;\r\n\t\tmakerBet.totalStake = 0;\r\n\r\n\t\tmakerBetsCount++;\r\n\r\n\t\temit LogMakeBet(makerBetId, msg.sender);\r\n\t}\r\n\r\n\t/// Increase total fund of a bet\r\n    function addFund(uint makerBetId) external payable {\r\n    \tMakerBet storage makerBet = makerBets[makerBetId][msg.sender];\r\n\t\trequire(makerBet.makerBetId != 0);\r\n\r\n    \trequire(now < makerBet.expiry);\r\n\r\n    \trequire(makerBet.status == BetStatus.Open || makerBet.status == BetStatus.Paused);\r\n\r\n    \trequire(msg.sender == makerBet.maker);\r\n\r\n\t\trequire(msg.value > 0);\r\n\r\n\t\tuint oldTotalFund = makerBet.totalFund;\r\n\r\n    \tmakerBet.totalFund = add(makerBet.totalFund, msg.value);\r\n\r\n    \temit LogAddFund(makerBetId, msg.sender, oldTotalFund, makerBet.totalFund);\r\n    }\r\n\r\n    /// Update odds of a bet\r\n    function updateOdds(uint makerBetId, uint odds) external {\r\n    \trequire(odds > (10 ** oddsDecimals) && odds < ((10 ** 8) * (10 ** oddsDecimals)));\r\n\r\n\t\tMakerBet storage makerBet = makerBets[makerBetId][msg.sender];\r\n\t\trequire(makerBet.makerBetId != 0);\r\n\r\n\t\trequire(now < makerBet.expiry);\r\n\r\n    \trequire(makerBet.status == BetStatus.Open || makerBet.status == BetStatus.Paused);\r\n\r\n    \trequire(msg.sender == makerBet.maker);\r\n\r\n    \trequire(odds != makerBet.odds);\r\n\r\n    \tuint oldOdds = makerBet.odds;\r\n\r\n    \tmakerBet.odds = odds;\r\n\r\n    \temit LogUpdateOdds(makerBetId, msg.sender, oldOdds, makerBet.odds);\r\n    }\r\n\r\n    /// Pause a bet\r\n    function pauseBet(uint makerBetId) external {\r\n    \tMakerBet storage makerBet = makerBets[makerBetId][msg.sender];\r\n\t\trequire(makerBet.makerBetId != 0);\r\n\r\n    \trequire(makerBet.status == BetStatus.Open);\r\n\r\n    \trequire(msg.sender == makerBet.maker);\r\n\r\n\t\tmakerBet.status = BetStatus.Paused;\r\n\r\n\t\temit LogPauseBet(makerBetId, msg.sender);\r\n    }\r\n\r\n    /// Reopen a bet\r\n    function reopenBet(uint makerBetId) external {\r\n    \tMakerBet storage makerBet = makerBets[makerBetId][msg.sender];\r\n\t\trequire(makerBet.makerBetId != 0);\r\n\r\n    \trequire(makerBet.status == BetStatus.Paused);\r\n\r\n    \trequire(msg.sender == makerBet.maker);\r\n\r\n\t\tmakerBet.status = BetStatus.Open;\r\n\r\n\t\temit LogReopenBet(makerBetId, msg.sender);\r\n    }\r\n\r\n    /// Close a bet and withdraw unused fund\r\n    function closeBet(uint makerBetId) external {\r\n    \tMakerBet storage makerBet = makerBets[makerBetId][msg.sender];\r\n\t\trequire(makerBet.makerBetId != 0);\r\n\r\n    \trequire(makerBet.status == BetStatus.Open || makerBet.status == BetStatus.Paused);\r\n\r\n    \trequire(msg.sender == makerBet.maker);\r\n\r\n\t\tmakerBet.status = BetStatus.Closed;\r\n\r\n\t\t// refund unused fund to maker\r\n\t\tuint unusedFund = sub(makerBet.totalFund, makerBet.reservedFund);\r\n\r\n\t\tif (unusedFund > 0) {\r\n\t\t\tmakerBet.totalFund = makerBet.reservedFund;\r\n\r\n\t\t\tuint refundAmount = unusedFund;\r\n\t\t\tif (makerBet.totalStake == 0) {\r\n\t\t\t\trefundAmount = add(refundAmount, baseVerifierFee); // Refund base verifier fee too if no taker-bets, because verifier do not need to settle the bet with no takers\r\n\t\t\t\tmakerBet.makerFundWithdrawn = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!makerBet.maker.send(refundAmount)) {\r\n\t\t\t\tmakerBet.totalFund = add(makerBet.totalFund, unusedFund);\r\n\t            makerBet.status = BetStatus.Paused;\r\n\t            makerBet.makerFundWithdrawn = false;\r\n\t        } else {\r\n\t        \temit LogCloseBet(makerBetId, msg.sender);\r\n\t        }\r\n\t\t} else {\r\n\t\t\temit LogCloseBet(makerBetId, msg.sender);\r\n\t\t}\r\n    }\r\n\r\n    /// Take a bet\r\n\tfunction takeBet(uint makerBetId, address maker, uint odds, uint takerBetId) external payable {\r\n\t\trequire(msg.sender != maker);\r\n\r\n\t\trequire(msg.value > 0);\r\n\r\n\t\tMakerBet storage makerBet = makerBets[makerBetId][maker];\r\n\t\trequire(makerBet.makerBetId != 0);\r\n\r\n\t\trequire(msg.sender != makerBet.trustedVerifier.addr);\r\n\r\n\t\trequire(now < makerBet.expiry);\r\n\r\n\t\trequire(makerBet.status == BetStatus.Open);\r\n\r\n\t\trequire(makerBet.odds == odds);\r\n\r\n\t\t// Avoid too many taker-bets in one maker-bet\r\n\t\trequire(makerBet.takerBetsCount < maxAllowedTakerBetsPerMakerBet);\r\n\r\n\t\t// Avoid too many tiny bets\r\n\t\tuint minAllowedStake = mul(mul(makerBet.totalFund, (10 ** oddsDecimals)), minAllowedStakeInPercentage) / sub(odds, (10 ** oddsDecimals)) / 100;\r\n\t\tuint maxAvailableStake = mul(sub(makerBet.totalFund, makerBet.reservedFund), (10 ** oddsDecimals)) / sub(odds, (10 ** oddsDecimals));\r\n\t\tif (maxAvailableStake >= minAllowedStake) {\r\n\t\t\trequire(msg.value >= minAllowedStake);\r\n\t\t} else {\r\n\t\t\trequire(msg.value >= sub(maxAvailableStake, (maxAvailableStake / 10)) && msg.value <= maxAvailableStake);\r\n\t\t}\r\n\r\n        // If remaining fund is not enough, send the money back.\r\n\t\trequire(msg.value <= maxAvailableStake);\r\n\r\n        makerBet.takerBets.length++;\r\n\t\tmakerBet.takerBets[makerBet.takerBetsCount] = TakerBet(takerBetId, msg.sender, odds, msg.value, false);\r\n\t\tmakerBet.reservedFund = add(makerBet.reservedFund, mul(msg.value, sub(odds, (10 ** oddsDecimals))) / (10 ** oddsDecimals));   \r\n\t\tmakerBet.totalStake = add(makerBet.totalStake, msg.value);\r\n\t\tmakerBet.takerBetsCount++;\r\n\r\n\t\temit LogTakeBet(makerBetId, maker, takerBetId, msg.sender);\r\n\t}\r\n\r\n\t/// Payout to maker\r\n\tfunction payMaker(MakerBet storage makerBet) private returns (bool fullyWithdrawn) {\r\n\t\tfullyWithdrawn = false;\r\n\r\n\t\tif (!makerBet.makerFundWithdrawn) {\r\n\t\t\tmakerBet.makerFundWithdrawn = true;\r\n\r\n\t\t\tuint payout = 0;\r\n\t\t\tif (makerBet.outcome == BetOutcome.MakerWin) {\r\n\t\t\t\tuint trustedVerifierFeeMakerWin = mul(makerBet.totalStake, makerBet.trustedVerifier.feeRate) / ((10 ** feeRateDecimals) * 100);\r\n\t\t\t\tpayout = sub(add(makerBet.totalFund, makerBet.totalStake), trustedVerifierFeeMakerWin);\r\n\t\t\t} else if (makerBet.outcome == BetOutcome.TakerWin) {\r\n\t\t\t\tpayout = sub(makerBet.totalFund, makerBet.reservedFund);\r\n\t\t\t} else if (makerBet.outcome == BetOutcome.Draw || makerBet.outcome == BetOutcome.Canceled) {\r\n\t\t\t\tpayout = makerBet.totalFund;\r\n\t\t\t}\r\n\r\n\t\t\tif (payout > 0) {\r\n\t\t\t\tfullyWithdrawn = true;\r\n\r\n\t\t\t\tif (!makerBet.maker.send(payout)) {\r\n\t                makerBet.makerFundWithdrawn = false;\r\n\t                fullyWithdrawn = false;\r\n\t            }\r\n\t        }\r\n        }\r\n\r\n        return fullyWithdrawn;\r\n\t}\r\n\r\n\t/// Payout to taker\r\n\tfunction payTaker(MakerBet storage makerBet, address taker) private returns (bool fullyWithdrawn) {\r\n\t\tfullyWithdrawn = false;\r\n\r\n\t\tuint payout = 0;\r\n\r\n\t\tfor (uint betIndex = 0; betIndex < makerBet.takerBetsCount; betIndex++) {\r\n\t\t\tif (makerBet.takerBets[betIndex].taker == taker) {\r\n\t\t\t\tif (!makerBet.takerBets[betIndex].settled) {\r\n\t\t\t\t\tmakerBet.takerBets[betIndex].settled = true;\r\n\r\n\t\t\t\t\tif (makerBet.outcome == BetOutcome.MakerWin) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t} else if (makerBet.outcome == BetOutcome.TakerWin) {\r\n\t\t\t\t\t\tuint netProfit = mul(mul(makerBet.takerBets[betIndex].stake, sub(makerBet.takerBets[betIndex].odds, (10 ** oddsDecimals))), sub(((10 ** feeRateDecimals) * 100), makerBet.trustedVerifier.feeRate)) / (10 ** oddsDecimals) / ((10 ** feeRateDecimals) * 100);\r\n\t\t\t\t\t\tpayout = add(payout, add(makerBet.takerBets[betIndex].stake, netProfit));\r\n\t\t\t\t\t} else if (makerBet.outcome == BetOutcome.Draw || makerBet.outcome == BetOutcome.Canceled) {\r\n\t\t\t\t\t\tpayout = add(payout, makerBet.takerBets[betIndex].stake);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (payout > 0) {\r\n\t\t\tfullyWithdrawn = true;\r\n\r\n\t\t\tif (!taker.send(payout)) {\r\n\t\t\t\tfullyWithdrawn = false;\r\n\r\n\t\t\t\tfor (uint betIndex2 = 0; betIndex2 < makerBet.takerBetsCount; betIndex2++) {\r\n\t\t\t\t\tif (makerBet.takerBets[betIndex2].taker == taker) {\r\n\t\t\t\t\t\tif (makerBet.takerBets[betIndex2].settled) {\r\n\t\t\t\t\t\t\tmakerBet.takerBets[betIndex2].settled = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            }\r\n        }\r\n\r\n\t\treturn fullyWithdrawn;\r\n\t}\r\n\r\n\t/// Payout to verifier\r\n\tfunction payVerifier(MakerBet storage makerBet) private returns (bool fullyWithdrawn) {\r\n\t\tfullyWithdrawn = false;\r\n\r\n\t\tif (!makerBet.trustedVerifierFeeSent) {\r\n\t    \tmakerBet.trustedVerifierFeeSent = true;\r\n\r\n\t    \tuint payout = 0;\r\n\t\t\tif (makerBet.outcome == BetOutcome.MakerWin) {\r\n\t\t\t\tuint trustedVerifierFeeMakerWin = mul(makerBet.totalStake, makerBet.trustedVerifier.feeRate) / ((10 ** feeRateDecimals) * 100);\r\n\t\t\t\tpayout = add(baseVerifierFee, trustedVerifierFeeMakerWin);\r\n\t\t\t} else if (makerBet.outcome == BetOutcome.TakerWin) {\r\n\t\t\t\tuint trustedVerifierFeeTakerWin = mul(makerBet.reservedFund, makerBet.trustedVerifier.feeRate) / ((10 ** feeRateDecimals) * 100);\r\n\t\t\t\tpayout = add(baseVerifierFee, trustedVerifierFeeTakerWin);\r\n\t\t\t} else if (makerBet.outcome == BetOutcome.Draw || makerBet.outcome == BetOutcome.Canceled) {\r\n\t\t\t\tpayout = baseVerifierFee;\r\n\t\t\t}\r\n\r\n\t\t\tif (payout > 0) {\r\n\t\t\t\tfullyWithdrawn = true;\r\n\r\n\t\t    \tif (!makerBet.trustedVerifier.addr.send(payout)) {\r\n\t\t    \t\tmakerBet.trustedVerifierFeeSent = false;\r\n\t\t    \t\tfullyWithdrawn = false;\r\n\t\t    \t}\r\n\t    \t}\r\n\t    }\r\n\r\n\t    return fullyWithdrawn;\r\n\t}\r\n\r\n\t/// Settle a bet by trusted verifier\r\n\tfunction settleBet(uint makerBetId, address maker, uint outcome) external {\r\n\t\trequire(outcome == 1 || outcome == 2 || outcome == 3 || outcome == 4);\r\n\r\n\t\tMakerBet storage makerBet = makerBets[makerBetId][maker];\r\n\t\trequire(makerBet.makerBetId != 0);\r\n\r\n\t\trequire(msg.sender == makerBet.trustedVerifier.addr);\r\n\r\n\t\trequire(makerBet.totalStake > 0);\r\n\r\n\t\trequire(makerBet.status != BetStatus.Settled);\r\n\r\n\t\tBetOutcome betOutcome = BetOutcome(outcome);\r\n\t\tmakerBet.outcome = betOutcome;\r\n\t\tmakerBet.status = BetStatus.Settled;\r\n\r\n\t\tpayMaker(makerBet);\r\n\t\tpayVerifier(makerBet);\r\n\r\n\t\temit LogSettleBet(makerBetId, maker);\r\n\t}\r\n\r\n\t/// Manual withdraw fund from a bet after outcome is set\r\n\tfunction withdraw(uint makerBetId, address maker) external {\r\n\t\tMakerBet storage makerBet = makerBets[makerBetId][maker];\r\n\t\trequire(makerBet.makerBetId != 0);\r\n\r\n\t\trequire(makerBet.outcome != BetOutcome.NotSettled);\r\n\r\n\t\trequire(makerBet.status == BetStatus.Settled);\r\n\r\n\t\tbool fullyWithdrawn = false;\r\n\r\n\t\tif (msg.sender == maker) {\r\n\t\t\tfullyWithdrawn = payMaker(makerBet);\r\n\t\t} else if (msg.sender == makerBet.trustedVerifier.addr) {\r\n\t\t\tfullyWithdrawn = payVerifier(makerBet);\r\n\t\t} else {\r\n\t\t\tfullyWithdrawn = payTaker(makerBet, msg.sender);\r\n\t\t}\r\n\r\n\t\tif (fullyWithdrawn) {\r\n\t\t\temit LogWithdraw(makerBetId, maker, msg.sender);\r\n\t\t}\r\n\t}\r\n\r\n    /* External views */\r\n    function getOwner() external view returns(address) {\r\n        return owner;\r\n    }\r\n\r\n    function isAdmin(address addr) external view returns(bool) {\r\n        return admins[addr];\r\n    }\r\n\r\n    function getVerifier(address addr) external view returns(address, uint) {\r\n    \tVerifier memory verifier = verifiers[addr];\r\n    \treturn (verifier.addr, verifier.feeRate);\r\n    }\r\n\r\n    function getMakerBetBasicInfo(uint makerBetId, address maker) external view returns(uint, address, address, uint, uint) {\r\n    \tMakerBet memory makerBet = makerBets[makerBetId][maker];\r\n    \treturn (makerBet.makerBetId, makerBet.maker, makerBet.trustedVerifier.addr, makerBet.trustedVerifier.feeRate, makerBet.expiry);\r\n    }\r\n\r\n    function getMakerBetDetails(uint makerBetId, address maker) external view returns(uint, BetStatus, uint, uint, uint, uint, uint, BetOutcome, bool, bool) {\r\n\t\tMakerBet memory makerBet = makerBets[makerBetId][maker];\r\n    \treturn (makerBet.makerBetId, makerBet.status, makerBet.odds, makerBet.totalFund, makerBet.reservedFund, makerBet.takerBetsCount, makerBet.totalStake, makerBet.outcome, makerBet.makerFundWithdrawn, makerBet.trustedVerifierFeeSent);\r\n    }\r\n\r\n    function getTakerBet(uint makerBetId, address maker, uint takerBetId, address taker) external view returns(uint, address, uint, uint, bool) {\r\n    \tMakerBet memory makerBet = makerBets[makerBetId][maker];\r\n    \tfor (uint betIndex = 0; betIndex < makerBet.takerBetsCount; betIndex++) {\r\n\t\t\tTakerBet memory takerBet = makerBet.takerBets[betIndex];\r\n\r\n\t\t\tif (takerBet.takerBetId == takerBetId && takerBet.taker == taker) {\r\n\t\t\t\treturn (takerBet.takerBetId, takerBet.taker, takerBet.odds, takerBet.stake, takerBet.settled);\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n\t/* Math utilities */\r\n\tfunction mul(uint256 _a, uint256 _b) private pure returns(uint256 c) {\r\n\t    if (_a == 0) {\r\n\t      return 0;\r\n\t    }\r\n\r\n\t    c = _a * _b;\r\n\t    assert(c / _a == _b);\r\n\t    return c;\r\n  \t}\r\n\r\n  \tfunction sub(uint256 _a, uint256 _b) private pure returns(uint256) {\r\n    \tassert(_b <= _a);\r\n    \treturn _a - _b;\r\n  \t}\r\n\r\n  \tfunction add(uint256 _a, uint256 _b) private pure returns(uint256 c) {\r\n   \t\tc = _a + _b;\r\n    \tassert(c >= _a);\r\n    \treturn c;\r\n  \t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseVerifierFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getVerifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"takerBetId\",\"type\":\"uint256\"},{\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"getTakerBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"}],\"name\":\"pauseBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMakerBetFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"}],\"name\":\"addFund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"odds\",\"type\":\"uint256\"},{\"name\":\"trustedVerifier\",\"type\":\"address\"},{\"name\":\"trustedVerifierFeeRate\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"makeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"updateVerifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"outcome\",\"type\":\"uint256\"}],\"name\":\"settleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxCount\",\"type\":\"uint256\"},{\"name\":\"minPercentage\",\"type\":\"uint256\"}],\"name\":\"changeAllowedTakerBetsPerMakerBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makerBetsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"odds\",\"type\":\"uint256\"},{\"name\":\"takerBetId\",\"type\":\"uint256\"}],\"name\":\"takeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weis\",\"type\":\"uint256\"}],\"name\":\"changeMinMakerBetFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"}],\"name\":\"closeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"getMakerBetBasicInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weis\",\"type\":\"uint256\"}],\"name\":\"changeBaseVerifierFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"odds\",\"type\":\"uint256\"}],\"name\":\"updateOdds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"getMakerBetDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAllowedTakerBetsPerMakerBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAllowedStakeInPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"}],\"name\":\"reopenBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"LogUpdateVerifier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"LogMakeBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldTotalFund\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalFund\",\"type\":\"uint256\"}],\"name\":\"LogAddFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldOdds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newOdds\",\"type\":\"uint256\"}],\"name\":\"LogUpdateOdds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"LogPauseBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"LogReopenBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"LogCloseBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"takerBetId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"LogTakeBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"LogSettleBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"}]","ContractName":"InterbetCore","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://03d0a3575e71a060a50ab2014260d66028f2a0b83ff96c5708c7880b3a4dc8bb"}]}