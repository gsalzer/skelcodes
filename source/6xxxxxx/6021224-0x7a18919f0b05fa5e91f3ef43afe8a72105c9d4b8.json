{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n *  The WatermelonBlock Token contract complies with the ERC20 standard (see https://github.com/ethereum/EIPs/issues/20).\r\n *  Author: Justas Kregzde\r\n */\r\n \r\npragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract WatermelonBlockToken {\r\n    using SafeMath for uint;\r\n\r\n    // Public variables of the token\r\n    string constant public standard = \"ERC20\";\r\n    string constant public name = \"WatermelonBlock tokens\";\r\n    string constant public symbol = \"WMB\";\r\n    uint8 constant public decimals = 6;\r\n\r\n    uint _totalSupply = 400000000e6; // Total supply of 400 million WatermelonBlock tokens\r\n    uint constant public tokensICO = 240000000e6; // 60% token sale\r\n    uint constant public teamReserve = 80000000e6; // 20% team\r\n    uint constant public seedInvestorsReserve = 40000000e6; // 10% seed investors\r\n    uint constant public emergencyReserve = 40000000e6; // 10% emergency\r\n\r\n    address public icoAddr;\r\n    address public teamAddr;\r\n    address public emergencyAddr;\r\n\r\n    uint constant public lockStartTime = 1527811200; // 2018 June 1, Friday, 00:00:00\r\n    bool icoEnded;\r\n\r\n    struct Lockup\r\n    {\r\n        uint lockupTime;\r\n        uint lockupAmount;\r\n    }\r\n    Lockup lockup;\r\n    mapping(address=>Lockup) lockupParticipants;\r\n\r\n    uint[] lockupTeamSum = [80000000e6,70000000e6,60000000e6,50000000e6,40000000e6,30000000e6,20000000e6,10000000e6];\r\n    uint[] lockupTeamDate = [1535760000,1543622400,1551398400,1559347200,1567296000,1575158400,1583020800,1590969600];\r\n\r\n    // Array with all balances\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n    // Public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed _owner, address indexed spender, uint value);\r\n    event Burned(uint amount);\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // Get the total token supply\r\n    function totalSupply() constant returns (uint totalSupply) {\r\n        totalSupply = _totalSupply;\r\n    }\r\n\r\n    // Initializes contract\r\n    function WatermelonBlockToken(address _icoAddr, address _teamAddr, address _emergencyAddr) {\r\n        icoAddr = _icoAddr;\r\n        teamAddr = _teamAddr;\r\n        emergencyAddr = _emergencyAddr;\r\n\r\n        balances[icoAddr] = tokensICO;\r\n        balances[teamAddr] = teamReserve;\r\n\r\n        // seed investors\r\n        address investor_1 = 0xF735e4a0A446ed52332AB891C46661cA4d9FD7b9;\r\n        balances[investor_1] = 20000000e6;\r\n        var lockupTime = lockStartTime.add(1 years);\r\n        lockup = Lockup({lockupTime:lockupTime,lockupAmount:balances[investor_1]});\r\n        lockupParticipants[investor_1] = lockup;\r\n\r\n        address investor_2 = 0x425207D7833737b62E76785A3Ab3f9dEce3953F5;\r\n        balances[investor_2] = 8000000e6;\r\n        lockup = Lockup({lockupTime:lockupTime,lockupAmount:balances[investor_2]});\r\n        lockupParticipants[investor_2] = lockup;\r\n\r\n        var leftover = seedInvestorsReserve.sub(balances[investor_1]).sub(balances[investor_2]);\r\n        balances[emergencyAddr] = emergencyReserve.add(leftover);\r\n    }\r\n\r\n    // Send some of your tokens to a given address\r\n    function transfer(address _to, uint _value) returns(bool) {\r\n        if (lockupParticipants[msg.sender].lockupAmount > 0) {\r\n            if (now < lockupParticipants[msg.sender].lockupTime) {\r\n                require(balances[msg.sender].sub(_value) >= lockupParticipants[msg.sender].lockupAmount);\r\n            }\r\n        }\r\n        if (msg.sender == teamAddr) {\r\n            for (uint i = 0; i < lockupTeamDate.length; i++) {\r\n                if (now < lockupTeamDate[i])\r\n                    require(balances[msg.sender].sub(_value) >= lockupTeamSum[i]);\r\n            }\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_value); // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\t\r\n    // A contract or person attempts to get the tokens of somebody else.\r\n    // This is only allowed if the token holder approved.\r\n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\r\n        if (lockupParticipants[_from].lockupAmount > 0) {\r\n            if (now < lockupParticipants[_from].lockupTime) {\r\n                require(balances[_from].sub(_value) >= lockupParticipants[_from].lockupAmount);\r\n            }\r\n        }\r\n        if (_from == teamAddr) {\r\n            for (uint i = 0; i < lockupTeamDate.length; i++) {\r\n                if (now < lockupTeamDate[i])\r\n                    require(balances[_from].sub(_value) >= lockupTeamSum[i]);\r\n            }\r\n        }\r\n        var _allowed = allowed[_from][msg.sender];\r\n        balances[_from] = balances[_from].sub(_value); // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\r\n        allowed[_from][msg.sender] = _allowed.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\t\r\n    // Approve the passed address to spend the specified amount of tokens\r\n    // on behalf of msg.sender.\r\n    function approve(address _spender, uint _value) returns (bool) {\r\n        //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedInvestorsReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_icoAddr\",\"type\":\"address\"},{\"name\":\"_teamAddr\",\"type\":\"address\"},{\"name\":\"_emergencyAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"}]","ContractName":"WatermelonBlockToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001cec2b588eee2cb56842ab09c009d470ff17408c000000000000000000000000162f9dd9e5bd80cad35b37c2eb5f78f3d50e8bd30000000000000000000000007b40ef4d92552e131b6538efdbd9c1e0aaef29ca","Library":"","SwarmSource":"bzzr://304a5c611b4ec542e0001d33dcece5320ddcf32adf181d90ce73fede843fcba1"}]}