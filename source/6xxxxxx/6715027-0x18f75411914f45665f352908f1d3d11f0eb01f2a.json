{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only contract owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Certificates is Ownable{\r\n    \r\n    struct Certificate {\r\n        string WorkshopName;\r\n        string Date;\r\n        string Location;\r\n    }\r\n\r\n    event CertificateCreated(bytes32 certId, string WorkshopName, string Date, string Location);\r\n    \r\n    mapping (bytes32 => Certificate) public issuedCertificates;\r\n\r\n    function getCert(string Name, string Surname, string DateOfIssue) public view returns (string, string, string) {\r\n        return (issuedCertificates[keccak256(abi.encodePacked(Name, Surname, DateOfIssue))].WorkshopName,\r\n                issuedCertificates[keccak256(abi.encodePacked(Name, Surname, DateOfIssue))].Date,\r\n                issuedCertificates[keccak256(abi.encodePacked(Name, Surname, DateOfIssue))].Location);\r\n    }\r\n\r\n    function getCertById(bytes32 certId) public view returns (string, string, string) {\r\n        return (issuedCertificates[certId].WorkshopName,\r\n                issuedCertificates[certId].Date,\r\n                issuedCertificates[certId].Location);\r\n    }\r\n    \r\n    function setCertById(bytes32 certId, string WorkshopName, string Date, string Location) public onlyOwner{\r\n        issuedCertificates[certId] = Certificate(WorkshopName, Date, Location);\r\n        emit CertificateCreated(certId, WorkshopName, Date, Location);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Surname\",\"type\":\"string\"},{\"name\":\"DateOfIssue\",\"type\":\"string\"}],\"name\":\"getCert\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"certId\",\"type\":\"bytes32\"}],\"name\":\"getCertById\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"issuedCertificates\",\"outputs\":[{\"name\":\"WorkshopName\",\"type\":\"string\"},{\"name\":\"Date\",\"type\":\"string\"},{\"name\":\"Location\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"certId\",\"type\":\"bytes32\"},{\"name\":\"WorkshopName\",\"type\":\"string\"},{\"name\":\"Date\",\"type\":\"string\"},{\"name\":\"Location\",\"type\":\"string\"}],\"name\":\"setCertById\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"certId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"WorkshopName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"Date\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"Location\",\"type\":\"string\"}],\"name\":\"CertificateCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Certificates","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aa9031147b707fcacb7c390e3a22711820483239fa5f9583caf38586ecc07169"}]}