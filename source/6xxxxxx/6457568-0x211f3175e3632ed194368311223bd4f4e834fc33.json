{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n//    _____ _     _      _                _____           _    \r\n//   / ____| |   (_)    | |              |  __ \\         | |   \r\n//  | |    | |__  _  ___| | _____ _ __   | |__) |_ _ _ __| | __\r\n//  | |    | '_ \\| |/ __| |/ / _ \\ '_ \\  |  ___/ _` | '__| |/ /\r\n//  | |____| | | | | (__|   <  __/ | | | | |  | (_| | |  |   < \r\n//   \\_____|_| |_|_|\\___|_|\\_\\___|_| |_| |_|   \\__,_|_|  |_|\\_\\\r\n\r\n// ------- What? ------- \r\n//A home for blockchain games.\r\n\r\n// ------- How? ------- \r\n//Buy CKN Token before playing any games.\r\n//You can buy & sell CKN in this contract at anytime and anywhere.\r\n//As the amount of ETH in the contract increases to 10,000, the dividend will gradually drop to 2%.\r\n\r\n//We got 4 phase in the Roadmap, will launch Plasma chain in the phase 2.\r\n\r\n// ------- How? ------- \r\n//10/2018 SIMPLE E-SPORT\r\n//11/2018 SPORT PREDICTION\r\n//02/2019 MOBILE GAME\r\n//06/2019 MMORPG\r\n\r\n// ------- Who? ------- \r\n//Only 1/10 smarter than vitalik.\r\n//admin@chickenpark.io\r\n//Sometime we think plama is a Pseudo topic, but it's a only way to speed up the TPS.\r\n//And Everybody will also trust the Node & Result.\r\n\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }   \r\n}\r\n\r\ncontract ERC223ReceivingContract { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data)public;\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\ncontract ChickenPark is Owned{\r\n\r\n    using SafeMath for *;\r\n\r\n    modifier notContract() {\r\n        require (msg.sender == tx.origin);\r\n        _;\r\n    }\r\n    \r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint tokens\r\n    );\r\n\r\n    event Approval(\r\n        address indexed tokenOwner,\r\n        address indexed spender,\r\n        uint tokens\r\n    );\r\n\r\n    event CKNPrice(\r\n        address indexed who,\r\n        uint prePrice,\r\n        uint afterPrice,\r\n        uint ethValue,\r\n        uint token,\r\n        uint timestamp,\r\n        string action\r\n    );\r\n    \r\n    event Withdraw(\r\n        address indexed who,\r\n        uint dividents\r\n    );\r\n\r\n    /*=====================================\r\n    =            CONSTANTS                =\r\n    =====================================*/\r\n    uint8 constant public                decimals              = 18;\r\n    uint constant internal               tokenPriceInitial_    = 0.00001 ether;\r\n    uint constant internal               magnitude             = 2**64;\r\n\r\n    /*================================\r\n    =          CONFIGURABLES         =\r\n    ================================*/\r\n    string public                        name               = \"Chicken Park Coin\";\r\n    string public                        symbol             = \"CKN\";\r\n\r\n    /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n\r\n    // Tracks Token\r\n    mapping(address => uint) internal    balances;\r\n    mapping(address => mapping (address => uint))public allowed;\r\n\r\n    // Payout tracking\r\n    mapping(address => uint)    public referralBalance_;\r\n    mapping(address => int256)  public payoutsTo_;\r\n    uint256 public profitPerShare_ = 0;\r\n    \r\n    // Token\r\n    uint internal tokenSupply = 0;\r\n\r\n    // Sub Contract\r\n    mapping(address => bool)  public gameAddress;\r\n    address public marketAddress;\r\n\r\n    /*================================\r\n    =            FUNCTION            =\r\n    ================================*/\r\n\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return tokenSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`  CKN\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the referral balance for account `tokenOwner`   ETH\r\n    // ------------------------------------------------------------------------\r\n    function referralBalanceOf(address tokenOwner) public view returns(uint){\r\n        return referralBalance_[tokenOwner];\r\n    }\r\n\r\n    function setGameAddrt(address addr_, bool status_) public onlyOwner{\r\n        gameAddress[addr_] = status_;\r\n    }\r\n    \r\n    function setMarketAddr(address addr_) public onlyOwner{\r\n        marketAddress = addr_;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // ERC20 Basic Function: Transfer CKN Token\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        require(balances[msg.sender] >= tokens);\r\n\r\n        payoutsTo_[msg.sender] = payoutsTo_[msg.sender] - int(tokens.mul(profitPerShare_)/1e18);\r\n        payoutsTo_[to] = payoutsTo_[to] + int(tokens.mul(profitPerShare_)/1e18);\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        require(tokens <= balances[from] &&  tokens <= allowed[from][msg.sender]);\r\n\r\n        payoutsTo_[from] = payoutsTo_[from] - int(tokens.mul(profitPerShare_)/1e18);\r\n        payoutsTo_[to] = payoutsTo_[to] + int(tokens.mul(profitPerShare_)/1e18);\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Buy Chicken Park Coin, 1% for me, 1% for chicken market, 19.6 ~ 0% for dividents\r\n    // ------------------------------------------------------------------------\r\n    function buyChickenParkCoin(address referedAddress) notContract() public payable{\r\n        uint fee = msg.value.mul(2)/100;\r\n        owner.transfer(fee/2);\r\n\r\n        marketAddress.transfer(fee/2);\r\n\r\n        uint realBuy = msg.value.sub(fee).mul((1e20).sub(calculateDivi()))/1e20;\r\n        uint divMoney = msg.value.sub(realBuy).sub(fee);\r\n\r\n        if(referedAddress != msg.sender && referedAddress != address(0)){\r\n            uint referralMoney = divMoney/10;\r\n            referralBalance_[referedAddress] = referralBalance_[referedAddress].add(referralMoney);\r\n            divMoney = divMoney.sub(referralMoney);\r\n        }\r\n\r\n        uint tokenAdd = getBuy(realBuy);\r\n        uint price1 = getCKNPriceNow();\r\n\r\n        tokenSupply = tokenSupply.add(tokenAdd);\r\n\r\n        payoutsTo_[msg.sender] += (int256)(profitPerShare_.mul(tokenAdd)/1e18);\r\n        profitPerShare_ = profitPerShare_.add(divMoney.mul(1e18)/totalSupply());\r\n        balances[msg.sender] = balances[msg.sender].add(tokenAdd);\r\n\r\n        uint price2 = getCKNPriceNow();\r\n        emit Transfer(address(0x0), msg.sender, tokenAdd);\r\n        emit CKNPrice(msg.sender,price1,price2,msg.value,tokenAdd,now,\"BUY\");\r\n    } \r\n\r\n    // ------------------------------------------------------------------------\r\n    // Sell Chicken Park Coin, 1% for me, 1% for chicken market, 19.6 ~ 0% for dividents\r\n    // ------------------------------------------------------------------------\r\n    function sellChickenParkCoin(uint tokenAnount) notContract() public {\r\n        uint tokenSub = tokenAnount;\r\n        uint sellEther = getSell(tokenSub);\r\n        uint price1 = getCKNPriceNow();\r\n\r\n        payoutsTo_[msg.sender] = payoutsTo_[msg.sender] - int(tokenSub.mul(profitPerShare_)/1e18);\r\n        tokenSupply = tokenSupply.sub(tokenSub);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(tokenSub);\r\n        uint diviTo = sellEther.mul(calculateDivi())/1e20;\r\n\r\n        if(totalSupply()>0){\r\n            profitPerShare_ = profitPerShare_.add(diviTo.mul(1e18)/totalSupply());\r\n        }else{\r\n            owner.transfer(diviTo); \r\n        }\r\n\r\n        owner.transfer(sellEther.mul(1)/100);\r\n        marketAddress.transfer(sellEther.mul(1)/100);\r\n\r\n        msg.sender.transfer((sellEther.mul(98)/(100)).sub(diviTo));\r\n\r\n        uint price2 = getCKNPriceNow();\r\n        emit Transfer(msg.sender, address(0x0), tokenSub);\r\n        emit CKNPrice(msg.sender,price1,price2,sellEther,tokenSub,now,\"SELL\");\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Withdraw your ETH dividents from Referral & CKN Dividents\r\n    // ------------------------------------------------------------------------\r\n    function withdraw() public {\r\n        require(msg.sender == tx.origin || msg.sender == marketAddress || gameAddress[msg.sender]);\r\n        require(myDividends(true)>0);\r\n\r\n        uint dividents_ = uint(getDividents()).add(referralBalance_[msg.sender]);\r\n        payoutsTo_[msg.sender] = payoutsTo_[msg.sender] + int(getDividents());\r\n        referralBalance_[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(dividents_);\r\n        emit Withdraw(msg.sender, dividents_);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // ERC223 Transfer CKN Token With Data Function\r\n    // ------------------------------------------------------------------------\r\n    function transferTo (address _from, address _to, uint _amountOfTokens, bytes _data) public {\r\n        if (_from != msg.sender){\r\n            require(_amountOfTokens <= balances[_from] &&  _amountOfTokens <= allowed[_from][msg.sender]);\r\n        }\r\n        else{\r\n            require(_amountOfTokens <= balances[_from]);\r\n        }\r\n\r\n        transferFromInternal(_from, _to, _amountOfTokens, _data);\r\n    }\r\n\r\n    function transferFromInternal(address _from, address _toAddress, uint _amountOfTokens, bytes _data) internal\r\n    {\r\n        require(_toAddress != address(0x0));\r\n        address _customerAddress     = _from;\r\n        \r\n        if (_customerAddress != msg.sender){\r\n        // Update the allowed balance.\r\n        // Don't update this if we are transferring our own tokens (via transfer or buyAndTransfer)\r\n            allowed[_customerAddress][msg.sender] = allowed[_customerAddress][msg.sender].sub(_amountOfTokens);\r\n        }\r\n\r\n        // Exchange tokens\r\n        balances[_customerAddress]    = balances[_customerAddress].sub(_amountOfTokens);\r\n        balances[_toAddress]          = balances[_toAddress].add(_amountOfTokens);\r\n\r\n        // Update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256)(profitPerShare_.mul(_amountOfTokens)/1e18);\r\n        payoutsTo_[_toAddress]       +=  (int256)(profitPerShare_.mul(_amountOfTokens)/1e18);\r\n\r\n        uint length;\r\n\r\n        assembly {\r\n            length := extcodesize(_toAddress)\r\n        }\r\n\r\n        if (length > 0){\r\n        // its a contract\r\n        // note: at ethereum update ALL addresses are contracts\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_toAddress);\r\n            receiver.tokenFallback(_from, _amountOfTokens, _data);\r\n        }\r\n\r\n        // Fire logging event.\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n    }\r\n\r\n    function getCKNPriceNow() public view returns(uint){\r\n        return (tokenPriceInitial_.mul(1e18+totalSupply()/100000000))/(1e18);\r\n    }\r\n\r\n    function getBuy(uint eth) public view returns(uint){\r\n        return ((((1e36).add(totalSupply().sq()/1e16).add(totalSupply().mul(2).mul(1e10)).add(eth.mul(1e28).mul(2)/tokenPriceInitial_)).sqrt()).sub(1e18).sub(totalSupply()/1e8)).mul(1e8);\r\n    }\r\n\r\n    function calculateDivi()public view returns(uint){\r\n        if(totalSupply() < 4e26){\r\n            uint diviRate = (20e18).sub(totalSupply().mul(5)/1e8);\r\n            return diviRate;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getSell(uint token) public view returns(uint){\r\n        return tokenPriceInitial_.mul((1e18).add((totalSupply().sub(token/2))/100000000)).mul(token)/(1e36);\r\n    }\r\n\r\n    function myDividends(bool _includeReferralBonus) public view returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? getDividents().add(referralBalance_[_customerAddress]) : getDividents() ;\r\n    }\r\n\r\n    function getDividents() public view returns(uint){\r\n        require(int((balances[msg.sender].mul(profitPerShare_)/1e18))-(payoutsTo_[msg.sender])>=0);\r\n        return uint(int((balances[msg.sender].mul(profitPerShare_)/1e18))-(payoutsTo_[msg.sender]));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referedAddress\",\"type\":\"address\"}],\"name\":\"buyChickenParkCoin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"referralBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setMarketAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitPerShare_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAnount\",\"type\":\"uint256\"}],\"name\":\"sellChickenParkCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCKNPriceNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBalance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateDivi\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"getSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payoutsTo_\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr_\",\"type\":\"address\"},{\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"setGameAddrt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDividents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"getBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"afterPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"string\"}],\"name\":\"CKNPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividents\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ChickenPark","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://91162b9c51a4e667bc73637067a2bfa5ad4756ac257bebe13ac0312fe0bb5d46"}]}