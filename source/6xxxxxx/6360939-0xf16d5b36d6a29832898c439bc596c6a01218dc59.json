{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    bool public transfersEnabled;\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    bool public transfersEnabled;\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => bool) public whitelistPayee;\r\n\r\n\r\n    /**\r\n    * Protection against short address attack\r\n    */\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    function checkTransfer(address _to) public view {\r\n        bool permit = false;\r\n        if (!transfersEnabled) {\r\n            if (whitelistPayee[_to]) {\r\n                permit = true;\r\n            }\r\n        } else {\r\n            permit = true;\r\n        }\r\n        require(permit);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {\r\n        checkTransfer(_to);\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\r\n        checkTransfer(_to);\r\n\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        }\r\n        else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    string public constant name = \"PHOENIX INVESTMENT FUND\";\r\n    string public constant symbol = \"PHI\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    bool public mintingFinished;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount, address _owner) canMint internal returns (bool) {\r\n        require(_to != address(0));\r\n        require(_owner != address(0));\r\n        require(_amount <= balances[_owner]);\r\n\r\n        balances[_to] = balances[_to].add(_amount);\r\n        balances[_owner] = balances[_owner].sub(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(_owner, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Peterson's Law Protection\r\n     * Claim tokens\r\n     */\r\n    function claimTokens(address _token) public onlyOwner {\r\n        if (_token == 0x0) {\r\n            owner.transfer(address(this).balance);\r\n            return;\r\n        }\r\n        MintableToken token = MintableToken(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(owner, balance);\r\n        emit Transfer(_token, owner, balance);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale is Ownable {\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n    uint256 public tokenAllocated;\r\n\r\n    constructor(address _wallet) public {\r\n        require(_wallet != address(0));\r\n        wallet = _wallet;\r\n    }\r\n}\r\n\r\n\r\ncontract PHICrowdsale is Ownable, Crowdsale, MintableToken {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public ratePreIco  = 600;\r\n    uint256 public rateIco  = 400;\r\n\r\n    uint256 public weiMin = 0.03 ether;\r\n\r\n    mapping (address => uint256) public deposited;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 63 * 10**6 * (10 ** uint256(decimals));\r\n    uint256 public    fundForSale = 60250 * 10**3 * (10 ** uint256(decimals));\r\n\r\n    uint256 fundTeam =          150 * 10**3 * (10 ** uint256(decimals));\r\n    uint256 fundAirdropPreIco = 250 * 10**3 * (10 ** uint256(decimals));\r\n    uint256 fundAirdropIco =    150 * 10**3 * (10 ** uint256(decimals));\r\n    uint256 fundBounty     =    100 * 10**3 * (10 ** uint256(decimals));\r\n    uint256 fundAdvisor   =    210 * 10**3 * (10 ** uint256(decimals));\r\n    uint256 fundReferal    =    1890 * 10**3 * (10 ** uint256(decimals));\r\n\r\n    uint256 limitPreIco = 12 * 10**5 * (10 ** uint256(decimals));\r\n\r\n    address addressFundTeam = 0x26cfc82A77ECc5a493D72757936A78A089FA592a;\r\n    address addressFundAirdropPreIco = 0x87953BAE7A92218FAcE2DDdb30AB2193263394Ef;\r\n    address addressFundAirdropIco = 0xaA8C9cA32cC8A6A7FF5eCB705787C22d9400F377;\r\n\r\n    address addressFundBounty =  0x253fBeb28dA7E85c720F66bbdCFC4D9418196EE5;\r\n    address addressFundAdvisor = 0x61eAEe13A2a3805b57B46571EE97B6faf95fC34d;\r\n    address addressFundReferal = 0x4BfB1bA71952DAC3886DCfECDdE2a4Fea2A06bDb;\r\n\r\n    uint256 public startTimePreIco = 1538406000; // Mon, 01 Oct 2018 15:00:00 GMT\r\n    uint256 public endTimePreIco =   1539129600; // Wed, 10 Oct 2018 00:00:00 GMT\r\n    uint256 public startTimeIco =    1541300400; // Sun, 04 Nov 2018 03:00:00 GMT\r\n    uint256 public endTimeIco =      1542931200; // Fri, 23 Nov 2018 00:00:00 GMT\r\n\r\n    uint256 percentReferal = 5;\r\n\r\n    uint256 public countInvestor;\r\n\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n    event TokenLimitReached(address indexed sender, uint256 tokenRaised, uint256 purchasedToken);\r\n    event MinWeiLimitReached(address indexed sender, uint256 weiAmount);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event CurrentPeriod(uint period);\r\n    event ChangeTime(address indexed owner, uint256 newValue, uint256 oldValue);\r\n    event ChangeAddressFund(address indexed owner, address indexed newAddress, address indexed oldAddress);\r\n\r\n    constructor(address _owner, address _wallet) public\r\n    Crowdsale(_wallet)\r\n    {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n        //owner = msg.sender; // $$$ for test's\r\n        transfersEnabled = false;\r\n        mintingFinished = false;\r\n        totalSupply = INITIAL_SUPPLY;\r\n        bool resultMintForOwner = mintForFund(owner);\r\n        require(resultMintForOwner);\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() payable public {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _investor) public payable returns (uint256){\r\n        require(_investor != address(0));\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = validPurchaseTokens(weiAmount);\r\n        if (tokens == 0) {revert();}\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        tokenAllocated = tokenAllocated.add(tokens);\r\n        mint(_investor, tokens, owner);\r\n        makeReferalBonus(tokens);\r\n\r\n        emit TokenPurchase(_investor, weiAmount, tokens);\r\n        if (deposited[_investor] == 0) {\r\n            countInvestor = countInvestor.add(1);\r\n        }\r\n        deposit(_investor);\r\n        wallet.transfer(weiAmount);\r\n        return tokens;\r\n    }\r\n\r\n    function getTotalAmountOfTokens(uint256 _weiAmount) internal returns (uint256) {\r\n        uint256 currentDate = now;\r\n        //currentDate = 1538438400; // (02 Oct 2018) // $$$ for test's\r\n        //currentDate = 1540051200; // (20 Oct 2018) // $$$ for test's\r\n        uint currentPeriod = 0;\r\n        currentPeriod = getPeriod(currentDate);\r\n        uint256 amountOfTokens = 0;\r\n        if(currentPeriod > 0){\r\n            if(currentPeriod == 1){\r\n                amountOfTokens = _weiAmount.mul(ratePreIco);\r\n                if (tokenAllocated.add(amountOfTokens) > limitPreIco) {\r\n                    currentPeriod = currentPeriod.add(1);\r\n                }\r\n            }\r\n            if(currentPeriod == 2){\r\n                amountOfTokens = _weiAmount.mul(rateIco);\r\n            }\r\n        }\r\n        emit CurrentPeriod(currentPeriod);\r\n        return amountOfTokens;\r\n    }\r\n\r\n    function getPeriod(uint256 _currentDate) public view returns (uint) {\r\n        if(_currentDate < startTimePreIco){\r\n            return 0;\r\n        }\r\n        if( startTimePreIco <= _currentDate && _currentDate <= endTimePreIco){\r\n            return 1;\r\n        }\r\n        if( endTimePreIco < _currentDate && _currentDate < startTimeIco){\r\n            return 0;\r\n        }\r\n        if( startTimeIco <= _currentDate && _currentDate <= endTimeIco){\r\n            return 2;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function deposit(address investor) internal {\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n\r\n    function makeReferalBonus(uint256 _amountToken) internal returns(uint256 _refererTokens) {\r\n        _refererTokens = 0;\r\n        if(msg.data.length == 20) {\r\n            address referer = bytesToAddress(bytes(msg.data));\r\n            require(referer != msg.sender);\r\n            _refererTokens = _amountToken.mul(percentReferal).div(100);\r\n            if(balanceOf(addressFundReferal) >= _refererTokens.mul(2)) {\r\n                mint(referer, _refererTokens, addressFundReferal);\r\n                mint(msg.sender, _refererTokens, addressFundReferal);\r\n            }\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes source) internal pure returns(address) {\r\n        uint result;\r\n        uint mul = 1;\r\n        for(uint i = 20; i > 0; i--) {\r\n            result += uint8(source[i-1])*mul;\r\n            mul = mul*256;\r\n        }\r\n        return address(result);\r\n    }\r\n\r\n    function mintForFund(address _walletOwner) internal returns (bool result) {\r\n        result = false;\r\n        require(_walletOwner != address(0));\r\n        balances[_walletOwner] = balances[_walletOwner].add(fundForSale);\r\n\r\n        balances[addressFundTeam] = balances[addressFundTeam].add(fundTeam);\r\n        balances[addressFundAirdropPreIco] = balances[addressFundAirdropPreIco].add(fundAirdropPreIco);\r\n        balances[addressFundAirdropIco] = balances[addressFundAirdropIco].add(fundAirdropIco);\r\n        balances[addressFundBounty] = balances[addressFundBounty].add(fundBounty);\r\n        balances[addressFundAdvisor] = balances[addressFundAdvisor].add(fundAdvisor);\r\n        balances[addressFundReferal] = balances[addressFundReferal].add(fundReferal);\r\n\r\n        result = true;\r\n    }\r\n\r\n    function getDeposited(address _investor) public view returns (uint256){\r\n        return deposited[_investor];\r\n    }\r\n\r\n    function validPurchaseTokens(uint256 _weiAmount) public returns (uint256) {\r\n        uint256 addTokens = getTotalAmountOfTokens(_weiAmount);\r\n        if (_weiAmount < weiMin) {\r\n            emit MinWeiLimitReached(msg.sender, _weiAmount);\r\n            return 0;\r\n        }\r\n        if (tokenAllocated.add(addTokens) > fundForSale) {\r\n            emit TokenLimitReached(msg.sender, tokenAllocated, addTokens);\r\n            return 0;\r\n        }\r\n        return addTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev owner burn Token.\r\n     * @param _value amount of burnt tokens\r\n     */\r\n    function ownerBurnToken(uint _value) public onlyOwner {\r\n        require(_value > 0);\r\n        require(_value <= balances[owner]);\r\n        require(_value <= totalSupply);\r\n        require(_value <= fundForSale);\r\n\r\n        balances[owner] = balances[owner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        fundForSale = fundForSale.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev owner change time for startTimePreIco\r\n     * @param _value new time value\r\n     */\r\n    function setStartTimePreIco(uint256 _value) public onlyOwner {\r\n        require(_value > 0);\r\n        uint256 _oldValue = startTimePreIco;\r\n        startTimePreIco = _value;\r\n        emit ChangeTime(msg.sender, _value, _oldValue);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev owner change time for endTimePreIco\r\n     * @param _value new time value\r\n     */\r\n    function setEndTimePreIco(uint256 _value) public onlyOwner {\r\n        require(_value > 0);\r\n        uint256 _oldValue = endTimePreIco;\r\n        endTimePreIco = _value;\r\n        emit ChangeTime(msg.sender, _value, _oldValue);\r\n    }\r\n\r\n    /**\r\n     * @dev owner change time for startTimeIco\r\n     * @param _value new time value\r\n     */\r\n    function setStartTimeIco(uint256 _value) public onlyOwner {\r\n        require(_value > 0);\r\n        uint256 _oldValue = startTimeIco;\r\n        startTimeIco = _value;\r\n        emit ChangeTime(msg.sender, _value, _oldValue);\r\n    }\r\n\r\n    /**\r\n     * @dev owner change time for endTimeIco\r\n     * @param _value new time value\r\n     */\r\n    function setEndTimeIco(uint256 _value) public onlyOwner {\r\n        require(_value > 0);\r\n        uint256 _oldValue = endTimeIco;\r\n        endTimeIco = _value;\r\n        emit ChangeTime(msg.sender, _value, _oldValue);\r\n    }\r\n\r\n    /**\r\n     * @dev owner change address for FundReferal\r\n     * @param _newAddress new value of address\r\n     */\r\n    function setAddressFundReferal(address _newAddress) public onlyOwner {\r\n        require(_newAddress != address(0));\r\n        address _oldAddress = addressFundReferal;\r\n        addressFundReferal = _newAddress;\r\n        emit ChangeAddressFund(msg.sender, _newAddress, _oldAddress);\r\n    }\r\n\r\n    function setWallet(address _newWallet) public onlyOwner {\r\n        require(_newWallet != address(0));\r\n        address _oldWallet = wallet;\r\n        wallet = _newWallet;\r\n        emit ChangeAddressFund(msg.sender, _newWallet, _oldWallet);\r\n    }\r\n\r\n    /**\r\n    * @dev Adds single address to whitelist.\r\n    * @param _payee Address to be added to the whitelist\r\n    */\r\n    function addToWhitelist(address _payee) public onlyOwner {\r\n        whitelistPayee[_payee] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes single address from whitelist.\r\n     * @param _payee Address to be removed to the whitelist\r\n     */\r\n    function removeFromWhitelist(address _payee) public onlyOwner {\r\n        whitelistPayee[_payee] = false;\r\n    }\r\n\r\n    function setTransferActive(bool _status) public onlyOwner {\r\n        transfersEnabled = _status;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setEndTimeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setEndTimePreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStartTimePreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setAddressFundReferal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentDate\",\"type\":\"uint256\"}],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStartTimeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setTransferActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerBurnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"checkTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistPayee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimePreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimePreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"validPurchaseTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchasedToken\",\"type\":\"uint256\"}],\"name\":\"TokenLimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"MinWeiLimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"CurrentPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"ChangeTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"ChangeAddressFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PHICrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006a108cf23b06b5349893ecde2203c7ce6dc745e0000000000000000000000000ab8936d04e69bf5cad660b3448458a8ed4a54935","Library":"","SwarmSource":"bzzr://f249884fbfe948064e2bb1b8ef27b71579a1f9cee0d148c59137ffc7d3fc1155"}]}