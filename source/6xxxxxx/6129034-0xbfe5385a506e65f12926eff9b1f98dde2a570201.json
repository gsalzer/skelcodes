{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Rivetz SPID Registration Contract\r\n *\r\n * @dev This is a Registrar-like contract\r\n *\r\n */\r\ncontract RivetzRegistrar is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct SPEntry {\r\n        // Ethereum Address of Registrant - may use a multi-sig wallet-contract and can assign an admin\r\n        address registrant;\r\n        // Ethereum address of Administrator - must be an address that can sign arbitrary messages for Registrar authentication\r\n        address admin;\r\n        // Hash of SPID public key that is stored in Registrar\r\n        uint256 pubKeyHash;\r\n        // Hash of Service Provider organization data, etc.\r\n        uint256 infoHash;\r\n        // Expiration date of subscription in UNIX epoch seconds\r\n        uint256  expiration;\r\n        // Flag indicating whether this SPID has been approved by Rivetz for operation (KYC/AML)\r\n        bool    valid;\r\n    }\r\n\r\n    // Add an event, so we an find all SPIDs via the log\r\n    event SPCreated(uint256 indexed spid);\r\n\r\n    mapping(uint256 => SPEntry) public spEntries;\r\n\r\n    // ERC-20 token that will be accepted for payment\r\n    ERC20 public rvt;\r\n    // Address of wallet to which received funds will be sent\r\n    address public paymentWalletAddress;\r\n    // Typed contract instance of the ERC20 token\r\n\r\n    // Seconds per year, used in subscription calculations\r\n    uint64 constant secPerYear = 365 days;  /* Sec/Year */\r\n\r\n    // Fee in ERC-20 that is charged to register a SPID\r\n    uint256 public registrationFee = 1000 ether;               /* Initial fee (in wei) -- includes 1 year */\r\n    // Annual subscription fee\r\n    uint256 constant defaultAnnualFee = 1000 ether;     /* wei/year */\r\n    // Annual fee as a per-second charge in \"wei\"\r\n    uint256 public feePerSec = defaultAnnualFee / secPerYear;  /* wei/sec = (wei/year) / (sec/year) */\r\n\r\n\r\n    /**\r\n      * Constructor\r\n      * @param paymentTokenAddress Address of ERC-20 token that will be accepted for payment\r\n      * @param paymentDestAddress Address wallet to which payments will be sent\r\n      */\r\n    constructor(address paymentTokenAddress, address paymentDestAddress) public {\r\n        rvt = ERC20(paymentTokenAddress);\r\n        paymentWalletAddress = paymentDestAddress;\r\n    }\r\n\r\n    /**\r\n     * Register a new SPID\r\n     * Sending address is initial registrant and administrator\r\n     */\r\n    function register(uint256 spid, uint256 pubKeyHash, uint256 infoHash) public {\r\n        require(rvt.transferFrom(msg.sender, paymentWalletAddress, registrationFee));\r\n        SPEntry storage spEntry = newEntry(spid);\r\n        spEntry.registrant = msg.sender;\r\n        spEntry.admin = msg.sender;\r\n        spEntry.pubKeyHash = pubKeyHash;\r\n        spEntry.infoHash = infoHash;\r\n        spEntry.valid = false;\r\n    }\r\n\r\n    /**\r\n     * Register a new SPID, sender must be Rivetz\r\n     */\r\n    function rivetzRegister(uint256 spid, uint256 pubKeyHash, uint256 infoHash, address spidRegistrant, address spidAdmin) onlyOwner public {\r\n        SPEntry storage spEntry = newEntry(spid);\r\n        spEntry.registrant = spidRegistrant;\r\n        spEntry.admin = spidAdmin;\r\n        spEntry.pubKeyHash = pubKeyHash;\r\n        spEntry.infoHash = infoHash;\r\n        spEntry.valid = true;\r\n    }\r\n\r\n    /**\r\n     * Create a new SP entry for further modification\r\n     */\r\n    function newEntry(uint256 spid) internal returns (SPEntry storage) {\r\n        SPEntry storage spEntry = spEntries[spid];\r\n        require(spEntry.registrant == 0);\r\n        spEntry.expiration = now + secPerYear;\r\n        emit SPCreated(spid);\r\n        return spEntry;\r\n    }\r\n\r\n    /**\r\n     * Change registrant, must be existing registrant or Rivetz\r\n     */\r\n    function setRegistrant(uint256 spid, address registrant) public {\r\n        SPEntry storage spEntry = spEntries[spid];\r\n        require(spEntry.registrant != 0 && spEntry.registrant != address(0x1) );\r\n        requireRegistrantOrGreater(spEntry);\r\n        spEntry.registrant = registrant;\r\n    }\r\n\r\n    /**\r\n     * Change admin, must be existing registrant or Rivetz\r\n     */\r\n    function setAdmin(uint256 spid, address admin) public {\r\n        SPEntry storage spEntry = spEntries[spid];\r\n        requireRegistrantOrGreater(spEntry);\r\n        spEntry.admin = admin;\r\n    }\r\n\r\n    /**\r\n     * Change pubKey, must be existing registrant or Rivetz\r\n     */\r\n    function setPubKey(uint256 spid, uint256 pubKeyHash) public {\r\n        SPEntry storage spEntry = spEntries[spid];\r\n        requireRegistrantOrGreater(spEntry);\r\n        spEntry.pubKeyHash = pubKeyHash;\r\n    }\r\n\r\n    /**\r\n     * Change info hash, must be admin, registrant or Rivetz\r\n     */\r\n    function setInfo(uint256 spid, uint256 infoHash) public {\r\n        SPEntry storage spEntry = spEntries[spid];\r\n        requireAdminOrGreater(spEntry);\r\n        spEntry.infoHash = infoHash;\r\n    }\r\n\r\n    /**\r\n     * Mark as approved, must be done by Rivetz\r\n     */\r\n    function setValid(uint256 spid, bool valid) onlyOwner public {\r\n        spEntries[spid].valid = valid;\r\n    }\r\n\r\n    /**\r\n     * Renew subscription -- can be done by anyone that pays\r\n     */\r\n    function renew(uint256 spid, uint256 payment) public returns (uint256 expiration) {\r\n        SPEntry storage spEntry = spEntries[spid];\r\n        require(rvt.transferFrom(msg.sender, paymentWalletAddress, payment));\r\n        uint256 periodStart = (spEntry.expiration > now) ? spEntry.expiration : now;\r\n        spEntry.expiration = periodStart.add(feeToSeconds(payment));\r\n        return spEntry.expiration;\r\n    }\r\n\r\n    /**\r\n     * Set subscription end date -- can only be done by Rivetz\r\n     */\r\n    function setExpiration(uint256 spid, uint256 expiration) onlyOwner public {\r\n        spEntries[spid].expiration = expiration;\r\n    }\r\n\r\n    /**\r\n     * Permanently deactivate SPID, must be registrant -- expires subscription, invalidates\r\n     */\r\n    function release(uint256 spid) public {\r\n        SPEntry storage spEntry = spEntries[spid];\r\n        requireRegistrantOrGreater(spEntry);\r\n        spEntry.expiration = 0;\r\n        spEntry.registrant = address(0x1);\r\n        spEntry.admin = address(0x1);\r\n        spEntry.valid = false;\r\n    }\r\n\r\n    /**\r\n     * Disable SPID, zeroes out everything -- must be Rivetz\r\n     */\r\n    function rivetzRelease(uint256 spid) onlyOwner public {\r\n        SPEntry storage spEntry = spEntries[spid];\r\n        spEntry.registrant = address(0x1);\r\n        spEntry.admin = address(0x1);\r\n        spEntry.pubKeyHash = 0;\r\n        spEntry.infoHash = 0;\r\n        spEntry.expiration = 0;\r\n        spEntry.valid = false;\r\n    }\r\n\r\n    /**\r\n     * Set new registration and annual fees -- must be Rivetz\r\n     */\r\n    function setFees(uint256 newRegistrationFee, uint256 newAnnualFee) onlyOwner public {\r\n        registrationFee = newRegistrationFee;\r\n        feePerSec = newAnnualFee / secPerYear;\r\n    }\r\n\r\n\r\n    /**\r\n     * RvT is upgradeable, make sure we can update Registrar to use upgraded RvT\r\n     */\r\n    function setToken(address erc20Address) onlyOwner public {\r\n        rvt = ERC20(erc20Address);\r\n    }\r\n\r\n    /**\r\n     * Change payment address -- must be Rivetz\r\n     */\r\n    function setPaymentAddress(address paymentAddress) onlyOwner public {\r\n        paymentWalletAddress = paymentAddress;\r\n    }\r\n\r\n    /**\r\n     * Permission check - admin or greater\r\n     * SP Registrant or Admin can't proceed if subscription expired\r\n     */\r\n    function requireAdminOrGreater(SPEntry spEntry) internal view {\r\n        require (msg.sender == spEntry.admin ||\r\n                 msg.sender == spEntry.registrant ||\r\n                 msg.sender == owner);\r\n        require (isSubscribed(spEntry) || msg.sender == owner);\r\n    }\r\n\r\n    /**\r\n     * Permission check - registrant or greater\r\n     * SP Registrant or Admin can't proceed if subscription expired\r\n     */\r\n    function requireRegistrantOrGreater(SPEntry spEntry) internal view  {\r\n        require (msg.sender == spEntry.registrant ||\r\n                 msg.sender == owner);\r\n        require (isSubscribed(spEntry) || msg.sender == owner);\r\n    }\r\n\r\n    /**\r\n     * Get annual fee in RvT\r\n     */\r\n    function getAnnualFee() public view returns (uint256) {\r\n        return feePerSec.mul(secPerYear);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the number of seconds feeAmount would add to expiration date\r\n     * @param feeAmount : Amount of RvT-wei to convert to seconds\r\n     * @return seconds :  Equivalent number of seconds purchased\r\n     */\r\n    function feeToSeconds(uint256 feeAmount) internal view returns (uint256 seconds_)\r\n    {\r\n        return feeAmount / feePerSec;                   /* secs = wei / ( wei/sec)  */\r\n    }\r\n\r\n    function isSubscribed(SPEntry spEntry) internal view returns (bool subscribed)\r\n    {\r\n        return now < spEntry.expiration;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"spid\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"setExpiration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRegistrationFee\",\"type\":\"uint256\"},{\"name\":\"newAnnualFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spid\",\"type\":\"uint256\"},{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20Address\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spid\",\"type\":\"uint256\"},{\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"setValid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spid\",\"type\":\"uint256\"}],\"name\":\"rivetzRelease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spid\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spid\",\"type\":\"uint256\"},{\"name\":\"pubKeyHash\",\"type\":\"uint256\"}],\"name\":\"setPubKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentAddress\",\"type\":\"address\"}],\"name\":\"setPaymentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"spEntries\",\"outputs\":[{\"name\":\"registrant\",\"type\":\"address\"},{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"pubKeyHash\",\"type\":\"uint256\"},{\"name\":\"infoHash\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spid\",\"type\":\"uint256\"},{\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"setRegistrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rvt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePerSec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spid\",\"type\":\"uint256\"},{\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[{\"name\":\"expiration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spid\",\"type\":\"uint256\"},{\"name\":\"pubKeyHash\",\"type\":\"uint256\"},{\"name\":\"infoHash\",\"type\":\"uint256\"},{\"name\":\"spidRegistrant\",\"type\":\"address\"},{\"name\":\"spidAdmin\",\"type\":\"address\"}],\"name\":\"rivetzRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAnnualFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spid\",\"type\":\"uint256\"},{\"name\":\"infoHash\",\"type\":\"uint256\"}],\"name\":\"setInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spid\",\"type\":\"uint256\"},{\"name\":\"pubKeyHash\",\"type\":\"uint256\"},{\"name\":\"infoHash\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"name\":\"paymentDestAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spid\",\"type\":\"uint256\"}],\"name\":\"SPCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RivetzRegistrar","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003d1ba9be9f66b8ee101911bc36d3fb562eac224400000000000000000000000009f0a428565fe932e7a06f72674cf00f4db9a572","Library":"","SwarmSource":"bzzr://0b529f001306c1aae6a05d2efee9c97b01f7207cd592a21e3b1b9d31659857f6"}]}