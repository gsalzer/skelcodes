{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable(address _owner) public {\r\n    owner = _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(tx.origin == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\npragma solidity ^0.4.19;\r\n\r\ncontract Stoppable is Ownable {\r\n  bool public halted;\r\n\r\n  event SaleStopped(address owner, uint256 datetime);\r\n\r\n  function Stoppable(address owner) public Ownable(owner) {}\r\n\r\n  modifier stopInEmergency {\r\n    require(!halted);\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    require(halted);\r\n    _;\r\n  }\r\n\r\n  function hasHalted() public view returns (bool isHalted) {\r\n  \treturn halted;\r\n  }\r\n\r\n   // called by the owner on emergency, triggers stopped state\r\n  function stopICO() external onlyOwner {\r\n    halted = true;\r\n    SaleStopped(msg.sender, now);\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/* SALE_mtf is the smart contract facilitating MetaFusions first public crowdsale. Created by Iconemy on 11/10/18\r\n * SALE_mtf allows the owner of the MetaFusion tokens to 'allow' the sale to sell a portion of tokens on his/her behalf, \r\n * this will then allow the owner to run further sales in the future by allowing to spend a further portion of tokens. \r\n * The sale is stoppable therefore, the owner can stop the sale in an emergency and allow the investors to withdraw their \r\n * investments. \r\n */\r\ncontract SALE_mtf is Stoppable {\r\n  using SafeMath for uint256;\r\n\r\n  bool private approval = false;\r\n\r\n  mtfToken public token;\r\n  uint256 public rate;\r\n\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  uint256 public weiRaised;\r\n  uint256 public tokensSent;\r\n\r\n  mapping(address => uint256) public balanceOf;\r\n  mapping(address => uint256) public tokenBalanceOf;\r\n\r\n  address public iconemy_wallet;\r\n  uint256 public commission; \r\n\r\n  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount, uint256 datetime);\r\n  event BeneficiaryWithdrawal(address beneficiary, uint256 amount, uint256 datetime);\r\n  event CommissionCollected(address beneficiary, uint256 amount, uint256 datetime);\r\n\r\n  // CONSTRUCTOR\r\n  function SALE_mtf(address _token, uint256 _rate, uint256 _startTime, uint256 _endTime, address _iconemy, address _owner) public Stoppable(_owner) {\r\n    require(_startTime > now);\r\n    require(_startTime < _endTime);\r\n\r\n    token = mtfToken(_token);\r\n\r\n    rate = _rate;\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    iconemy_wallet = _iconemy;\r\n  }\r\n\r\n  // Recieve approval is used in the sales interface on the MetaFusion ERC-20 token, allowing the owner to use approveAndCall\r\n  // When this function is called, we check the allowance of the sale the tokens interface and store 1% of that as a maximum commission\r\n  // We do this to reserve 1% of tokens in the case that the sale sells out, Iconemy will collect the full 1%. \r\n  function receiveApproval() onlyOwner external {\r\n    approval = true;\r\n    uint256 allowance = allowanceOf();\r\n\r\n    // Reserved for Iconemy commission\r\n    commission = allowance / 100;\r\n  }\r\n\r\n  // Uses the token interface to check how many tokens the sale is allowed to sell\r\n  function allowanceOf() public view returns(uint256) {\r\n    return token.allowanceOf(owner, this);\r\n  }\r\n\r\n  // Shows that the sale has been given approval to sell tokens by the token owner\r\n  function hasApproval() public view returns(bool) {\r\n    return approval;\r\n  }\r\n\r\n  function getPrice() public view returns(uint256) {\r\n    return rate;\r\n  }\r\n\r\n  /*\r\n   * This method has taken from Pickeringware ltd\r\n   * We have split this method down into overidable functions which may affect how users purchase tokens\r\n  */ \r\n  function buyTokens() public stopInEmergency payable {\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = tokensToRecieve(weiAmount);\r\n\r\n    validPurchase(tokens);\r\n\r\n    finalizeSale(msg.sender, weiAmount, tokens);\r\n\r\n    TokenPurchase(msg.sender, msg.value, tokens, now);\r\n  }\r\n\r\n  //Check that the amount of tokens requested is less than or equal to the ammount of tokens allowed to send\r\n  function checkAllowance(uint256 _tokens) public view {\r\n    uint256 allowance = allowanceOf();\r\n\r\n    allowance = allowance - commission;\r\n\r\n    require(allowance >= _tokens);\r\n  }\r\n\r\n  // If the transfer function works using the token interface, mark the balances of the buyer\r\n  function finalizeSale(address from, uint256 _weiAmount, uint256 _tokens) internal {\r\n    require(token.transferFrom(owner, from, _tokens));\r\n\r\n    balanceOf[from] = balanceOf[from].add(_weiAmount);\r\n    tokenBalanceOf[from] = tokenBalanceOf[from].add(_tokens);\r\n\r\n    weiRaised = weiRaised.add(_weiAmount);\r\n    tokensSent = tokensSent.add(_tokens);\r\n  }\r\n\r\n  // Calculate amount of tokens due for the amount of ETH sent\r\n  function tokensToRecieve(uint256 _wei) internal view returns (uint256 tokens) {\r\n    return _wei.div(rate);\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime || halted;\r\n  }\r\n\r\n  // Checks if the purchase is valid\r\n  function validPurchase(uint256 _tokens) internal view returns (bool) {\r\n    require(!hasEnded());\r\n\r\n    checkAllowance(_tokens);\r\n\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n\r\n    bool nonZeroPurchase = msg.value != 0;\r\n\r\n    require(withinPeriod && nonZeroPurchase);\r\n  }\r\n\r\n  // Allows someone to check if they are valid for a refund\r\n  // This can be used front-end to show/hide the collect refund function \r\n  function refundAvailable() public view returns(bool) {\r\n    return balanceOf[msg.sender] > 0 && hasHalted();\r\n  }\r\n\r\n  // Allows an investor to collect their investment if the sale was stopped prematurely\r\n  function collectRefund() public onlyInEmergency {\r\n    uint256 balance = balanceOf[msg.sender];\r\n\r\n    require(balance > 0);\r\n\r\n    balanceOf[msg.sender] = 0;\r\n\r\n    msg.sender.transfer(balance);\r\n  }\r\n\r\n  // Allows the owner to collect the eth raised in the sale\r\n  function collectInvestment() public onlyOwner stopInEmergency returns(bool) {\r\n    require(hasEnded());\r\n\r\n    owner.transfer(weiRaised);\r\n    BeneficiaryWithdrawal(owner, weiRaised, now);\r\n  }\r\n\r\n  // Allows Iconemy to collect 1% of the tokens sold in the crowdsale\r\n  function collectCommission() public stopInEmergency returns(bool) {\r\n    require(msg.sender == iconemy_wallet);\r\n    require(hasEnded());\r\n\r\n    uint256 one_percent = tokensSent / 100;\r\n\r\n    finalizeSale(iconemy_wallet, 0, one_percent);\r\n\r\n    CommissionCollected(iconemy_wallet, one_percent, now);\r\n  }\r\n}  \r\n\r\n// Token interface used for interacting with the MetaFusion ERC-20 contract\r\ncontract mtfToken { \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success); \r\n  function allowanceOf(address _owner, address _spender) public constant returns (uint256 remaining);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasHalted\",\"outputs\":[{\"name\":\"isHalted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"checkAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iconemy_wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_iconemy\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"CommissionCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"SaleStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SALE_mtf","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ed13e4ed23d1dc5b8da4e306680896294affa94c00000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000000000000000000000000000000000005c1e2740000000000000000000000000000000000000000000000000000000005c52e340000000000000000000000000ccaafb81a643f636d6df882c1ea5f7f964efb7ff0000000000000000000000004a240ccde15da49dd49578848dc62aaedf7f364e","Library":"","SwarmSource":"bzzr://d8116bfc91c1524b851560e39edbc0a15295bfd2b21dbdb5c4bf83f7c6ae943b"}]}