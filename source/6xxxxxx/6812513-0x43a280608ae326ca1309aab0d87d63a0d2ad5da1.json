{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n    function exp(uint a, uint b) internal pure returns (uint c) {\r\n        require(b >= 0 && a >= 0);\r\n        c = a ** b;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract TokenCore is ERC20Interface {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\ncontract SmartsToken is TokenCore, Owned {\r\n    // MultiDecimal tokens\r\n    bool public stop;\r\n    uint public feeRate;\r\n    address public feeAccount;\r\n    \r\n    struct UnderlyingToken {\r\n        address tokenAddress;\r\n        uint ratioMultiplier;\r\n        uint truncateDivision;\r\n        mapping(address => uint) reservedBalances;\r\n    }\r\n    \r\n    uint public numbersOfReservedTokens = 2;\r\n    UnderlyingToken[2] public tokens;\r\n    \r\n    event DepositToken(uint tokenId, address token, address indexed from, uint amount);\r\n    event WithdrawReservedToken(uint tokenId, address token, address indexed to, uint amount);\r\n    event SmartsTokenCreation(address indexed creator, uint tokens);\r\n    event SmartsTokenDestroyed(address indexed withdrawer, uint tokens);\r\n    event WithdrawStatusChange(bool stop);\r\n    event FeeAccountTransfered(address feeAccount);\r\n    event TokenValueTruncation(uint tokenId, address token, address indexed from, uint value);\r\n    event FeeRateChanged(uint rate);\r\n    \r\n    constructor (\r\n        address[2] addressesOfTokens,\r\n        uint[2] combinedRatios,\r\n        uint[2] tokenDecimals,\r\n        uint fee,\r\n        address receiveFee\r\n    ) public {\r\n        /**\r\n         * Ratio is list of integers\r\n         * For 1:2:4 token relations, ratio is [1, 2, 4]\r\n         * Fee is in terms of division, for example 1000 means 0.1%\r\n         */ \r\n\r\n        // Smarts token paramters\r\nsymbol = 'XYONCASH'; name = 'SMARTS XYONCASH TestToken'; decimals = 18;\r\n        _totalSupply = 0;\r\n        stop = false;\r\n        \r\n        uint multiplier = 10;\r\n        for (uint i = 0; i < numbersOfReservedTokens; i++) {\r\n          tokens[i] = UnderlyingToken(addressesOfTokens[i], combinedRatios[i], multiplier.exp(tokenDecimals[i].sub(decimals)));\r\n        }\r\n\r\n        feeRate = fee;\r\n        feeAccount = receiveFee;\r\n    }\r\n        \r\n      function depositToken(uint tokenId, uint amount) public returns (bool success) {\r\n        //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n        //It will truncate whatever after this token decimal and place it to the fee Account\r\n        //check if address valid\r\n        require (0 <= tokenId && tokenId < numbersOfReservedTokens);\r\n        UnderlyingToken storage token = tokens[tokenId];\r\n        require (ERC20Interface(token.tokenAddress).transferFrom(msg.sender, this, amount));\r\n        \r\n        uint balanceValue = amount;\r\n        if (token.truncateDivision != 1) {\r\n            balanceValue = balanceValue.div(token.truncateDivision).mul(token.truncateDivision);\r\n            uint truncatedValue = amount.sub(balanceValue);\r\n            if (truncatedValue != 0) {\r\n                token.reservedBalances[feeAccount] = token.reservedBalances[feeAccount].add(truncatedValue);\r\n                emit TokenValueTruncation(tokenId, token.tokenAddress, msg.sender, truncatedValue);                \r\n            }\r\n        }\r\n        \r\n        token.reservedBalances[msg.sender] = token.reservedBalances[msg.sender].add(balanceValue);\r\n        emit DepositToken(tokenId, token.tokenAddress, msg.sender, balanceValue);\r\n        return true;\r\n      }\r\n\r\n    function withdrawReservedToken(uint tokenId, uint amount) public returns (bool success) {\r\n        require (!stop);\r\n        require (0 <= tokenId && tokenId < numbersOfReservedTokens);\r\n        UnderlyingToken storage token = tokens[tokenId];\r\n        require (token.reservedBalances[msg.sender] >= amount);\r\n        token.reservedBalances[msg.sender] = token.reservedBalances[msg.sender].sub(amount);\r\n        ERC20Interface(token.tokenAddress).transfer(msg.sender, amount);\r\n        emit WithdrawReservedToken(tokenId, token.tokenAddress, msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function tokenReservedBalanceOf(uint tokenId, address tokenOwner) public constant returns (uint balance) {\r\n        require (0 <= tokenId && tokenId < numbersOfReservedTokens);\r\n        UnderlyingToken storage token = tokens[tokenId];\r\n        return token.reservedBalances[tokenOwner];\r\n    }\r\n    \r\n    function convertToSmarts(uint amount) public returns (bool success) {\r\n        for (uint i = 0; i < numbersOfReservedTokens; i++) {\r\n          UnderlyingToken storage token = tokens[i];\r\n          require (token.reservedBalances[msg.sender] >= amount.mul(token.ratioMultiplier).mul(token.truncateDivision));\r\n        }\r\n\r\n        for (i = 0; i < numbersOfReservedTokens; i++) {\r\n          token = tokens[i];\r\n          token.reservedBalances[msg.sender] = token.reservedBalances[msg.sender].sub(amount.mul(token.ratioMultiplier).mul(token.truncateDivision));\r\n        }\r\n        \r\n        _totalSupply = _totalSupply.add(amount);\r\n        uint fee = amount.div(feeRate);\r\n        uint afterfee = amount.sub(fee);\r\n        balances[msg.sender] = balances[msg.sender].add(afterfee);\r\n        balances[feeAccount] = balances[feeAccount].add(fee);\r\n        \r\n        emit SmartsTokenCreation(msg.sender, amount);\r\n        emit Transfer(address(0), msg.sender, afterfee);\r\n        emit Transfer(msg.sender, feeAccount, fee);            \r\n        return true;\r\n    }\r\n    \r\n    \r\n    function withdrawTokens(uint amount) public returns (bool success) {\r\n        require (!stop);\r\n        require (balances[msg.sender] >= amount);\r\n\r\n        uint receive;\r\n        // Fee taken except the feeAccount\r\n        if (msg.sender == feeAccount) {\r\n            receive = amount;\r\n        } else {\r\n            uint fee = amount.div(feeRate);\r\n            uint afterfee = amount.sub(fee);\r\n            receive = afterfee;\r\n            balances[feeAccount] = balances[feeAccount].add(fee);\r\n            emit Transfer(msg.sender, feeAccount, fee);            \r\n        }\r\n        \r\n        for (uint i = 0; i < numbersOfReservedTokens; i++) {\r\n            UnderlyingToken storage token = tokens[i];\r\n            ERC20Interface(token.tokenAddress).transfer(msg.sender, receive.mul(token.ratioMultiplier).mul(token.truncateDivision));\r\n        }\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n            \r\n        _totalSupply = _totalSupply.sub(receive);\r\n        emit SmartsTokenDestroyed(msg.sender, receive);\r\n        emit Transfer(msg.sender, address(0), receive);        \r\n        return true;\r\n     }\r\n    \r\n    function changeFeeRate(uint rate) public onlyOwner returns (bool success) {\r\n        feeRate = rate;\r\n        emit FeeRateChanged(rate);\r\n        return true;\r\n    }\r\n    \r\n    function changeFeeAccount(address newFeeAccount) public onlyOwner returns (bool success) {\r\n        feeAccount = newFeeAccount;\r\n        emit FeeAccountTransfered(newFeeAccount);\r\n        return true;\r\n    }\r\n    \r\n    function toggleWithdrawStatus() public onlyOwner returns (bool success) {\r\n        if (stop) {\r\n            stop = false;\r\n            emit WithdrawStatusChange(false);            \r\n        } else {\r\n            stop = true;\r\n            emit WithdrawStatusChange(true);\r\n        }\r\n        return true;\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReservedToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"tokenReservedBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"ratioMultiplier\",\"type\":\"uint256\"},{\"name\":\"truncateDivision\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeAccount\",\"type\":\"address\"}],\"name\":\"changeFeeAccount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numbersOfReservedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleWithdrawStatus\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"changeFeeRate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertToSmarts\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addressesOfTokens\",\"type\":\"address[2]\"},{\"name\":\"combinedRatios\",\"type\":\"uint256[2]\"},{\"name\":\"tokenDecimals\",\"type\":\"uint256[2]\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"receiveFee\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawReservedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"SmartsTokenCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"SmartsTokenDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"WithdrawStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"FeeAccountTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenValueTruncation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"FeeRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SmartsToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000055296f69f40ea6d20e478533c15a6b08b654e758000000000000000000000000809826cceab68c387726af962713b64cb5cb3cca000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000003e80000000000000000000000006a582521fdbc18eecd3289711e40147769e6e95d","Library":"","SwarmSource":"bzzr://0cc9d5d12c89e2e8cc5241d9b7c1e1cce9c07cd3d9a51670b17b4c609928258a"}]}