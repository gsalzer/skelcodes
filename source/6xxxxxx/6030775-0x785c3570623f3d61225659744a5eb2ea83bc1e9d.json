{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/libs/ERC223Receiver_Interface.sol\r\n\r\n/**\r\n * @title ERC223-compliant contract interface.\r\n */\r\ncontract ERC223Receiver {\r\n    constructor() internal {}\r\n\r\n    /**\r\n     * @dev Standard ERC223 function that will handle incoming token transfers.\r\n     *\r\n     * @param _from Token sender address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data Transaction metadata.\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/libs/ERC223Token.sol\r\n\r\n/**\r\n * @title Implementation of the ERC223 standard token.\r\n * @dev See https://github.com/Dexaran/ERC223-token-standard\r\n */\r\ncontract ERC223Token is StandardToken {\r\n    using SafeMath for uint;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n\r\n    modifier enoughBalance(uint _value) {\r\n        require (_value <= balanceOf(msg.sender));\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data Transaction metadata.\r\n     * @return Success.\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n        require(_to != address(0));\r\n\r\n        return isContract(_to) ?\r\n            transferToContract(_to, _value, _data) :\r\n            transferToAddress(_to, _value, _data)\r\n        ;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @return Success.\r\n     */\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        bytes memory empty;\r\n\r\n        return transfer(_to, _value, empty);\r\n    }\r\n\r\n    /**\r\n     * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n     * @return If the target is a contract.\r\n     */\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address; this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n\r\n        return (length > 0);\r\n    }\r\n    \r\n    /**\r\n     * @dev Helper function that transfers to address.\r\n     * @return Success.\r\n     */\r\n    function transferToAddress(address _to, uint _value, bytes _data) private enoughBalance(_value) returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Helper function that transfers to contract.\r\n     * @return Success.\r\n     */\r\n    function transferToContract(address _to, uint _value, bytes _data) private enoughBalance(_value) returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);\r\n\r\n        ERC223Receiver receiver = ERC223Receiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol\r\n\r\n/**\r\n * @title Standard Burnable Token\r\n * @dev Adds burnFrom method to ERC20 implementations\r\n */\r\ncontract StandardBurnableToken is BurnableToken, StandardToken {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    _burn(_from, _value);\r\n  }\r\n}\r\n\r\n// File: contracts/libs/BaseToken.sol\r\n\r\n/**\r\n * @title Base token contract for oracle.\r\n */\r\ncontract BaseToken is ERC223Token, StandardBurnableToken {\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/ShintakuToken.sol\r\n\r\n/**\r\n * @title Shintaku token contract\r\n * @dev Burnable ERC223 token with set emission curve.\r\n */\r\ncontract ShintakuToken is BaseToken, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    string public constant symbol = \"SHN\";\r\n    string public constant name = \"Shintaku\";\r\n    uint8 public constant demicals = 18;\r\n\r\n    // Unit of tokens\r\n    uint public constant TOKEN_UNIT = (10 ** uint(demicals));\r\n\r\n    // Parameters\r\n\r\n    // Number of blocks for each period (100000 = ~2-3 weeks)\r\n    uint public PERIOD_BLOCKS;\r\n    // Number of blocks to lock owner balance (50x = ~2 years)\r\n    uint public OWNER_LOCK_BLOCKS;\r\n    // Number of blocks to lock user remaining balances (25x = ~1 year)\r\n    uint public USER_LOCK_BLOCKS;\r\n    // Number of tokens per period during tail emission\r\n    uint public constant TAIL_EMISSION = 400 * (10 ** 3) * TOKEN_UNIT;\r\n    // Number of tokens to emit initially: tail emission is 4% of this\r\n    uint public constant INITIAL_EMISSION_FACTOR = 25;\r\n    // Absolute cap on funds received per period\r\n    // Note: this should be obscenely large to prevent larger ether holders\r\n    //  from monopolizing tokens at low cost. This cap should never be hit in\r\n    //  practice.\r\n    uint public constant MAX_RECEIVED_PER_PERIOD = 10000 ether;\r\n\r\n    /**\r\n     * @dev Store relevant data for a period.\r\n     */\r\n    struct Period {\r\n        // Block this period has started at\r\n        uint started;\r\n\r\n        // Total funds received this period\r\n        uint totalReceived;\r\n        // Locked owner balance, will unlock after a long time\r\n        uint ownerLockedBalance;\r\n        // Number of tokens to mint this period\r\n        uint minting;\r\n\r\n        // Sealed purchases for each account\r\n        mapping (address => bytes32) sealedPurchaseOrders;\r\n        // Balance received from each account\r\n        mapping (address => uint) receivedBalances;\r\n        // Locked balance for each account\r\n        mapping (address => uint) lockedBalances;\r\n\r\n        // When withdrawing, withdraw to an alias address (e.g. cold storage)\r\n        mapping (address => address) aliases;\r\n    }\r\n\r\n    // Modifiers\r\n\r\n    modifier validPeriod(uint _period) {\r\n        require(_period <= currentPeriodIndex());\r\n        _;\r\n    }\r\n\r\n    // Contract state\r\n\r\n    // List of periods\r\n    Period[] internal periods;\r\n\r\n    // Address the owner can withdraw funds to (e.g. cold storage)\r\n    address public ownerAlias;\r\n\r\n    // Events\r\n\r\n    event NextPeriod(uint indexed _period, uint indexed _block);\r\n    event SealedOrderPlaced(address indexed _from, uint indexed _period, uint _value);\r\n    event SealedOrderRevealed(address indexed _from, uint indexed _period, address indexed _alias, uint _value);\r\n    event OpenOrderPlaced(address indexed _from, uint indexed _period, address indexed _alias, uint _value);\r\n    event Claimed(address indexed _from, uint indexed _period, address indexed _alias, uint _value);\r\n\r\n    // Functions\r\n\r\n    constructor(address _alias, uint _periodBlocks, uint _ownerLockFactor, uint _userLockFactor) public {\r\n        require(_alias != address(0));\r\n        require(_periodBlocks >= 2);\r\n        require(_ownerLockFactor > 0);\r\n        require(_userLockFactor > 0);\r\n\r\n        periods.push(Period(block.number, 0, 0, calculateMinting(0)));\r\n        ownerAlias = _alias;\r\n\r\n        PERIOD_BLOCKS = _periodBlocks;\r\n        OWNER_LOCK_BLOCKS = _periodBlocks.mul(_ownerLockFactor);\r\n        USER_LOCK_BLOCKS = _periodBlocks.mul(_userLockFactor);\r\n    }\r\n\r\n    /**\r\n     * @dev Go to the next period, if sufficient time has passed.\r\n     */\r\n    function nextPeriod() public {\r\n        uint periodIndex = currentPeriodIndex();\r\n        uint periodIndexNext = periodIndex.add(1);\r\n        require(block.number.sub(periods[periodIndex].started) > PERIOD_BLOCKS);\r\n\r\n        periods.push(Period(block.number, 0, 0, calculateMinting(periodIndexNext)));\r\n\r\n        emit NextPeriod(periodIndexNext, block.number);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a sealed purchase order.\r\n     * @param _from Account that will purchase tokens.\r\n     * @param _period Period of purchase order.\r\n     * @param _value Purchase funds, in wei.\r\n     * @param _salt Random value to keep purchase secret.\r\n     * @return The sealed purchase order.\r\n     */\r\n    function createPurchaseOrder(address _from, uint _period, uint _value, bytes32 _salt) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_from, _period, _value, _salt));\r\n    }\r\n\r\n    /**\r\n     * @dev Submit a sealed purchase order. Wei sent can be different then sealed value.\r\n     * @param _sealedPurchaseOrder The sealed purchase order.\r\n     */\r\n    function placePurchaseOrder(bytes32 _sealedPurchaseOrder) public payable {\r\n        if (block.number.sub(periods[currentPeriodIndex()].started) > PERIOD_BLOCKS) {\r\n            nextPeriod();\r\n        }\r\n        // Note: current period index may update from above call\r\n        Period storage period = periods[currentPeriodIndex()];\r\n        // Each address can only make a single purchase per period\r\n        require(period.sealedPurchaseOrders[msg.sender] == bytes32(0));\r\n\r\n        period.sealedPurchaseOrders[msg.sender] = _sealedPurchaseOrder;\r\n        period.receivedBalances[msg.sender] = msg.value;\r\n\r\n        emit SealedOrderPlaced(msg.sender, currentPeriodIndex(), msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Reveal a sealed purchase order and commit to a purchase.\r\n     * @param _sealedPurchaseOrder The sealed purchase order.\r\n     * @param _period Period of purchase order.\r\n     * @param _value Purchase funds, in wei.\r\n     * @param _period Period for which to reveal purchase order.\r\n     * @param _salt Random value to keep purchase secret.\r\n     * @param _alias Address to withdraw tokens and excess funds to.\r\n     */\r\n    function revealPurchaseOrder(bytes32 _sealedPurchaseOrder, uint _period, uint _value, bytes32 _salt, address _alias) public {\r\n        // Sanity check to make sure user enters an alias\r\n        require(_alias != address(0));\r\n        // Can only reveal sealed orders in the next period\r\n        require(currentPeriodIndex() == _period.add(1));\r\n        Period storage period = periods[_period];\r\n        // Each address can only make a single purchase per period\r\n        require(period.aliases[msg.sender] == address(0));\r\n\r\n        // Note: don't *need* to advance period here\r\n\r\n        bytes32 h = createPurchaseOrder(msg.sender, _period, _value, _salt);\r\n        require(h == _sealedPurchaseOrder);\r\n\r\n        // The value revealed must not be greater than the value previously sent\r\n        require(_value <= period.receivedBalances[msg.sender]);\r\n\r\n        period.totalReceived = period.totalReceived.add(_value);\r\n        uint remainder = period.receivedBalances[msg.sender].sub(_value);\r\n        period.receivedBalances[msg.sender] = _value;\r\n        period.aliases[msg.sender] = _alias;\r\n\r\n        emit SealedOrderRevealed(msg.sender, _period, _alias, _value);\r\n\r\n        // Return any extra balance to the alias\r\n        _alias.transfer(remainder);\r\n    }\r\n\r\n    /**\r\n     * @dev Place an unsealed purchase order immediately.\r\n     * @param _alias Address to withdraw tokens to.\r\n     */\r\n    function placeOpenPurchaseOrder(address _alias) public payable {\r\n        // Sanity check to make sure user enters an alias\r\n        require(_alias != address(0));\r\n\r\n        if (block.number.sub(periods[currentPeriodIndex()].started) > PERIOD_BLOCKS) {\r\n            nextPeriod();\r\n        }\r\n        // Note: current period index may update from above call\r\n        Period storage period = periods[currentPeriodIndex()];\r\n        // Each address can only make a single purchase per period\r\n        require(period.aliases[msg.sender] == address(0));\r\n\r\n        period.totalReceived = period.totalReceived.add(msg.value);\r\n        period.receivedBalances[msg.sender] = msg.value;\r\n        period.aliases[msg.sender] = _alias;\r\n\r\n        emit OpenOrderPlaced(msg.sender, currentPeriodIndex(), _alias, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Claim previously purchased tokens for an account.\r\n     * @param _from Account to claim tokens for.\r\n     * @param _period Period for which to claim tokens.\r\n     */\r\n    function claim(address _from, uint _period) public {\r\n        // Claiming can only be done at least two periods after submitting sealed purchase order\r\n        require(currentPeriodIndex() > _period.add(1));\r\n        Period storage period = periods[_period];\r\n        require(period.receivedBalances[_from] > 0);\r\n\r\n        uint value = period.receivedBalances[_from];\r\n        delete period.receivedBalances[_from];\r\n\r\n        (uint emission, uint spent) = calculateEmission(_period, value);\r\n        uint remainder = value.sub(spent);\r\n\r\n        address alias = period.aliases[_from];\r\n        // Mint tokens based on spent funds\r\n        mint(alias, emission);\r\n\r\n        // Lock up remaining funds for account\r\n        period.lockedBalances[_from] = period.lockedBalances[_from].add(remainder);\r\n        // Lock up spent funds for owner\r\n        period.ownerLockedBalance = period.ownerLockedBalance.add(spent);\r\n\r\n        emit Claimed(_from, _period, alias, emission);\r\n    }\r\n\r\n    /*\r\n     * @dev Users can withdraw locked balances after the lock time has expired, for an account.\r\n     * @param _from Account to withdraw balance for.\r\n     * @param _period Period to withdraw funds for.\r\n     */\r\n    function withdraw(address _from, uint _period) public {\r\n        require(currentPeriodIndex() > _period);\r\n        Period storage period = periods[_period];\r\n        require(block.number.sub(period.started) > USER_LOCK_BLOCKS);\r\n\r\n        uint balance = period.lockedBalances[_from];\r\n        require(balance <= address(this).balance);\r\n        delete period.lockedBalances[_from];\r\n\r\n        address alias = period.aliases[_from];\r\n        // Don't delete this, as a user may have unclaimed tokens\r\n        //delete period.aliases[_from];\r\n        alias.transfer(balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Contract owner can withdraw unlocked owner funds.\r\n     * @param _period Period to withdraw funds for.\r\n     */\r\n    function withdrawOwner(uint _period) public onlyOwner {\r\n        require(currentPeriodIndex() > _period);\r\n        Period storage period = periods[_period];\r\n        require(block.number.sub(period.started) > OWNER_LOCK_BLOCKS);\r\n\r\n        uint balance = period.ownerLockedBalance;\r\n        require(balance <= address(this).balance);\r\n        delete period.ownerLockedBalance;\r\n\r\n        ownerAlias.transfer(balance);\r\n    }\r\n\r\n    /**\r\n     * @dev The owner can withdraw any unrevealed balances after the deadline.\r\n     * @param _period Period to withdraw funds for.\r\n     * @param _from Account to withdraw unrevealed funds against.\r\n     */\r\n    function withdrawOwnerUnrevealed(uint _period, address _from) public onlyOwner {\r\n        // Must be past the reveal deadline of one period\r\n        require(currentPeriodIndex() > _period.add(1));\r\n        Period storage period = periods[_period];\r\n        require(block.number.sub(period.started) > OWNER_LOCK_BLOCKS);\r\n\r\n        uint balance = period.receivedBalances[_from];\r\n        require(balance <= address(this).balance);\r\n        delete period.receivedBalances[_from];\r\n\r\n        ownerAlias.transfer(balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the number of tokens to mint during a period.\r\n     * @param _period The period.\r\n     * @return Number of tokens to mint.\r\n     */\r\n    function calculateMinting(uint _period) internal pure returns (uint) {\r\n        // Every period, decrease emission by 5% of initial, until tail emission\r\n        return\r\n            _period < INITIAL_EMISSION_FACTOR ?\r\n            TAIL_EMISSION.mul(INITIAL_EMISSION_FACTOR.sub(_period)) :\r\n            TAIL_EMISSION\r\n        ;\r\n    }\r\n\r\n    /**\r\n     * @dev Helper function to get current period index.\r\n     * @return The array index of the current period.\r\n     */\r\n    function currentPeriodIndex() public view returns (uint) {\r\n        assert(periods.length > 0);\r\n\r\n        return periods.length.sub(1);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate token emission.\r\n     * @param _period Period for which to calculate emission.\r\n     * @param _value Amount paid. Emissions is proportional to this.\r\n     * @return Number of tokens to emit.\r\n     * @return The spent balance.\r\n     */\r\n    function calculateEmission(uint _period, uint _value) internal view returns (uint, uint) {\r\n        Period storage currentPeriod = periods[_period];\r\n        uint minting = currentPeriod.minting;\r\n        uint totalReceived = currentPeriod.totalReceived;\r\n\r\n        uint scaledValue = _value;\r\n        if (totalReceived > MAX_RECEIVED_PER_PERIOD) {\r\n            // If the funds received this period exceed the maximum, scale\r\n            // emission to refund remaining\r\n            scaledValue = _value.mul(MAX_RECEIVED_PER_PERIOD).div(totalReceived);\r\n        }\r\n\r\n        uint emission = scaledValue.mul(minting).div(MAX_RECEIVED_PER_PERIOD);\r\n        return (emission, scaledValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints new tokens.\r\n     * @param _account Account that will receive new tokens.\r\n     * @param _value Number of tokens to mint.\r\n     */\r\n    function mint(address _account, uint _value) internal {\r\n        balances[_account] = balances[_account].add(_value);\r\n        totalSupply_ = totalSupply_.add(_value);\r\n    }\r\n\r\n    // Getters\r\n\r\n    function getPeriodStarted(uint _period) public view validPeriod(_period) returns (uint) {\r\n        return periods[_period].started;\r\n    }\r\n\r\n    function getPeriodTotalReceived(uint _period) public view validPeriod(_period) returns (uint) {\r\n        return periods[_period].totalReceived;\r\n    }\r\n\r\n    function getPeriodOwnerLockedBalance(uint _period) public view validPeriod(_period) returns (uint) {\r\n        return periods[_period].ownerLockedBalance;\r\n    }\r\n\r\n    function getPeriodMinting(uint _period) public view validPeriod(_period) returns (uint) {\r\n        return periods[_period].minting;\r\n    }\r\n\r\n    function getPeriodSealedPurchaseOrderFor(uint _period, address _account) public view validPeriod(_period) returns (bytes32) {\r\n        return periods[_period].sealedPurchaseOrders[_account];\r\n    }\r\n\r\n    function getPeriodReceivedBalanceFor(uint _period, address _account) public view validPeriod(_period) returns (uint) {\r\n        return periods[_period].receivedBalances[_account];\r\n    }\r\n\r\n    function getPeriodLockedBalanceFor(uint _period, address _account) public view validPeriod(_period) returns (uint) {\r\n        return periods[_period].lockedBalances[_account];\r\n    }\r\n\r\n    function getPeriodAliasFor(uint _period, address _account) public view validPeriod(_period) returns (address) {\r\n        return periods[_period].aliases[_account];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sealedPurchaseOrder\",\"type\":\"bytes32\"}],\"name\":\"placePurchaseOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPeriodAliasFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPeriodSealedPurchaseOrderFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_RECEIVED_PER_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"getPeriodMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USER_LOCK_BLOCKS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"withdrawOwnerUnrevealed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPeriodIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"demicals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"withdrawOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_LOCK_BLOCKS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"createPurchaseOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TAIL_EMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERIOD_BLOCKS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_alias\",\"type\":\"address\"}],\"name\":\"placeOpenPurchaseOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_EMISSION_FACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAlias\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPeriodReceivedBalanceFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPeriodLockedBalanceFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"getPeriodStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"getPeriodOwnerLockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sealedPurchaseOrder\",\"type\":\"bytes32\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"bytes32\"},{\"name\":\"_alias\",\"type\":\"address\"}],\"name\":\"revealPurchaseOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"getPeriodTotalReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_alias\",\"type\":\"address\"},{\"name\":\"_periodBlocks\",\"type\":\"uint256\"},{\"name\":\"_ownerLockFactor\",\"type\":\"uint256\"},{\"name\":\"_userLockFactor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_period\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"NextPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SealedOrderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_period\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_alias\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SealedOrderRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_period\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_alias\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"OpenOrderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_period\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_alias\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ShintakuToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000042c5992a1a9b17662d2c452a17e9e1a33ca9658900000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000019","Library":"","SwarmSource":"bzzr://a4d20920bef1aaae611eaf92fd659a14568cf3097476c9c7c5967bd7f881a9b9"}]}