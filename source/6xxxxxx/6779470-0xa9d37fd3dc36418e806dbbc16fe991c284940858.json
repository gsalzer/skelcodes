{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\npragma experimental ABIEncoderV2;\r\n// File: contracts/src/shared/interfaces/CollateralizerInterface.sol\r\n\r\n\r\n\r\n\r\ncontract CollateralizerInterface {\r\n\r\n\tfunction unpackCollateralParametersFromBytes(\r\n\t\tbytes32 parameters\r\n\t) public pure returns (uint, uint, uint);\r\n\r\n}\r\n\r\n// File: contracts/src/shared/interfaces/DebtKernelInterface.sol\r\n\r\n\r\n\r\ncontract DebtKernelInterface {\r\n\r\n\tenum Errors {\r\n\t\t// Debt has been already been issued\r\n\t\tDEBT_ISSUED,\r\n\t\t// Order has already expired\r\n\t\tORDER_EXPIRED,\r\n\t\t// Debt issuance associated with order has been cancelled\r\n\t\tISSUANCE_CANCELLED,\r\n\t\t// Order has been cancelled\r\n\t\tORDER_CANCELLED,\r\n\t\t// Order parameters specify amount of creditor / debtor fees\r\n\t\t// that is not equivalent to the amount of underwriter / relayer fees\r\n\t\tORDER_INVALID_INSUFFICIENT_OR_EXCESSIVE_FEES,\r\n\t\t// Order parameters specify insufficient principal amount for\r\n\t\t// debtor to at least be able to meet his fees\r\n\t\tORDER_INVALID_INSUFFICIENT_PRINCIPAL,\r\n\t\t// Order parameters specify non zero fee for an unspecified recipient\r\n\t\tORDER_INVALID_UNSPECIFIED_FEE_RECIPIENT,\r\n\t\t// Order signatures are mismatched / malformed\r\n\t\tORDER_INVALID_NON_CONSENSUAL,\r\n\t\t// Insufficient balance or allowance for principal token transfer\r\n\t\tCREDITOR_BALANCE_OR_ALLOWANCE_INSUFFICIENT\r\n\t}\r\n\r\n\t// solhint-disable-next-line var-name-mixedcase\r\n\taddress public TOKEN_TRANSFER_PROXY;\r\n\tbytes32 constant public NULL_ISSUANCE_HASH = bytes32(0);\r\n\r\n\t/* NOTE(kayvon): Currently, the `view` keyword does not actually enforce the\r\n\tstatic nature of the method; this will change in the future, but for now, in\r\n\torder to prevent reentrancy we'll need to arbitrarily set an upper bound on\r\n\tthe gas limit allotted for certain method calls. */\r\n\tuint16 constant public EXTERNAL_QUERY_GAS_LIMIT = 8000;\r\n\r\n\tmapping (bytes32 => bool) public issuanceCancelled;\r\n\tmapping (bytes32 => bool) public debtOrderCancelled;\r\n\r\n\tevent LogDebtOrderFilled(\r\n\t\tbytes32 indexed _agreementId,\r\n\t\tuint _principal,\r\n\t\taddress _principalToken,\r\n\t\taddress indexed _underwriter,\r\n\t\tuint _underwriterFee,\r\n\t\taddress indexed _relayer,\r\n\t\tuint _relayerFee\r\n\t);\r\n\r\n\tevent LogIssuanceCancelled(\r\n\t\tbytes32 indexed _agreementId,\r\n\t\taddress indexed _cancelledBy\r\n\t);\r\n\r\n\tevent LogDebtOrderCancelled(\r\n\t\tbytes32 indexed _debtOrderHash,\r\n\t\taddress indexed _cancelledBy\r\n\t);\r\n\r\n\tevent LogError(\r\n\t\tuint8 indexed _errorId,\r\n\t\tbytes32 indexed _orderHash\r\n\t);\r\n\r\n\tstruct Issuance {\r\n\t\taddress version;\r\n\t\taddress debtor;\r\n\t\taddress underwriter;\r\n\t\tuint underwriterRiskRating;\r\n\t\taddress termsContract;\r\n\t\tbytes32 termsContractParameters;\r\n\t\tuint salt;\r\n\t\tbytes32 agreementId;\r\n\t}\r\n\r\n\tstruct DebtOrder {\r\n\t\tIssuance issuance;\r\n\t\tuint underwriterFee;\r\n\t\tuint relayerFee;\r\n\t\tuint principalAmount;\r\n\t\taddress principalToken;\r\n\t\tuint creditorFee;\r\n\t\tuint debtorFee;\r\n\t\taddress relayer;\r\n\t\tuint expirationTimestampInSec;\r\n\t\tbytes32 debtOrderHash;\r\n\t}\r\n\r\n    function fillDebtOrder(\r\n        address creditor,\r\n        address[6] orderAddresses,\r\n        uint[8] orderValues,\r\n        bytes32[1] orderBytes32,\r\n        uint8[3] signaturesV,\r\n        bytes32[3] signaturesR,\r\n        bytes32[3] signaturesS\r\n    )\r\n        public\r\n        returns (bytes32 _agreementId);\r\n\r\n}\r\n\r\n// File: contracts/src/shared/interfaces/DebtTokenInterface.sol\r\n\r\n\r\n\r\ncontract DebtTokenInterface {\r\n\r\n    function transfer(address _to, uint _tokenId) public;\r\n\r\n    function exists(uint256 _tokenId) public view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/src/shared/interfaces/TokenTransferProxyInterface.sol\r\n\r\n\r\n\r\ncontract TokenTransferProxyInterface {}\r\n\r\n// File: contracts/src/shared/interfaces/ContractRegistryInterface.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ContractRegistryInterface {\r\n\r\n    CollateralizerInterface public collateralizer;\r\n    DebtKernelInterface public debtKernel;\r\n    DebtTokenInterface public debtToken;\r\n    TokenTransferProxyInterface public tokenTransferProxy;\r\n\r\n    function ContractRegistryInterface(\r\n        address _collateralizer,\r\n        address _debtKernel,\r\n        address _debtToken,\r\n        address _tokenTransferProxy\r\n    )\r\n        public\r\n    {\r\n        collateralizer = CollateralizerInterface(_collateralizer);\r\n        debtKernel = DebtKernelInterface(_debtKernel);\r\n        debtToken = DebtTokenInterface(_debtToken);\r\n        tokenTransferProxy = TokenTransferProxyInterface(_tokenTransferProxy);\r\n    }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/src/shared/libraries/SignaturesLibrary.sol\r\n\r\n\r\n\r\n\r\ncontract SignaturesLibrary {\r\n\tbytes constant internal PREFIX = \"\\x19Ethereum Signed Message:\\n32\";\r\n\r\n\tstruct ECDSASignature {\r\n\t\tuint8 v;\r\n\t\tbytes32 r;\r\n\t\tbytes32 s;\r\n\t}\r\n\r\n\tfunction isValidSignature(\r\n\t\taddress signer,\r\n\t\tbytes32 hash,\r\n\t\tECDSASignature signature\r\n\t)\r\n\t\tpublic\r\n\t\tpure\r\n\t\treturns (bool valid)\r\n\t{\r\n\t\tbytes32 prefixedHash = keccak256(PREFIX, hash);\r\n\t\treturn ecrecover(prefixedHash, signature.v, signature.r, signature.s) == signer;\r\n\t}\r\n}\r\n\r\n// File: contracts/src/shared/libraries/OrderLibrary.sol\r\n\r\n\r\n\r\n\r\ncontract OrderLibrary {\r\n\tstruct DebtOrder {\r\n\t\taddress kernelVersion;\r\n\t\taddress issuanceVersion;\r\n\t\tuint principalAmount;\r\n\t\taddress principalToken;\r\n\t\tuint collateralAmount;\r\n\t\taddress collateralToken;\r\n\t\taddress debtor;\r\n\t\tuint debtorFee;\r\n\t\taddress creditor;\r\n\t\tuint creditorFee;\r\n\t\taddress relayer;\r\n\t\tuint relayerFee;\r\n\t\taddress underwriter;\r\n\t\tuint underwriterFee;\r\n\t\tuint underwriterRiskRating;\r\n\t\taddress termsContract;\r\n\t\tbytes32 termsContractParameters;\r\n\t\tuint expirationTimestampInSec;\r\n\t\tuint salt;\r\n\t\tSignaturesLibrary.ECDSASignature debtorSignature;\r\n\t\tSignaturesLibrary.ECDSASignature creditorSignature;\r\n\t\tSignaturesLibrary.ECDSASignature underwriterSignature;\r\n\t}\r\n\r\n\tfunction unpackDebtOrder(DebtOrder memory order)\r\n\t\tpublic\r\n\t\tpure\r\n\t\treturns (\r\n\t        address[6] orderAddresses,\r\n\t        uint[8] orderValues,\r\n\t        bytes32[1] orderBytes32,\r\n\t        uint8[3] signaturesV,\r\n\t        bytes32[3] signaturesR,\r\n\t        bytes32[3] signaturesS\r\n\t\t)\r\n\t{\r\n\t\treturn (\r\n\t\t\t[order.issuanceVersion, order.debtor, order.underwriter, order.termsContract, order.principalToken, order.relayer],\r\n            [order.underwriterRiskRating, order.salt, order.principalAmount, order.underwriterFee, order.relayerFee, order.creditorFee, order.debtorFee, order.expirationTimestampInSec],\r\n\t\t\t[order.termsContractParameters],\r\n            [order.debtorSignature.v, order.creditorSignature.v, order.underwriterSignature.v],\r\n\t\t\t[order.debtorSignature.r, order.creditorSignature.r, order.underwriterSignature.r],\r\n\t\t\t[order.debtorSignature.s, order.creditorSignature.s, order.underwriterSignature.s]\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// File: contracts/src/CreditorDrivenLoans/DecisionEngines/libraries/LTVDecisionEngineTypes.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LTVDecisionEngineTypes\r\n{\r\n\t// The parameters used during the consent and decision evaluations.\r\n\tstruct Params {\r\n\t\taddress creditor;\r\n\t\t// The values and signature for the creditor commitment hash.\r\n\t\tCreditorCommitment creditorCommitment;\r\n\t\t// Price feed data.\r\n\t\tPrice principalPrice;\r\n\t\tPrice collateralPrice;\r\n\t\t// A DebtOrderData is required to confirm parity with the submitted order.\r\n\t\tOrderLibrary.DebtOrder order;\r\n\t}\r\n\r\n\tstruct Price {\r\n\t\tuint value;\r\n\t\tuint timestamp;\r\n\t\taddress tokenAddress;\r\n\t\tSignaturesLibrary.ECDSASignature signature;\r\n\t}\r\n\r\n\tstruct CreditorCommitment {\r\n\t\tCommitmentValues values;\r\n\t\tSignaturesLibrary.ECDSASignature signature;\r\n\t}\r\n\r\n\tstruct CommitmentValues {\r\n\t\tuint maxLTV;\r\n\t\taddress priceFeedOperator;\r\n\t}\r\n\r\n\tstruct SimpleInterestParameters {\r\n\t\tuint principalTokenIndex;\r\n\t\tuint principalAmount;\r\n        uint interestRate;\r\n        uint amortizationUnitType;\r\n        uint termLengthInAmortizationUnits;\r\n\t}\r\n\r\n\tstruct CollateralParameters {\r\n\t\tuint collateralTokenIndex;\r\n\t\tuint collateralAmount;\r\n\t\tuint gracePeriodInDays;\r\n\t}\r\n}\r\n\r\n// File: contracts/src/shared/interfaces/TermsContractInterface.sol\r\n\r\n\r\n\r\n\r\ncontract TermsContractInterface {\r\n\r\n\tfunction registerTermStart(\r\n        bytes32 agreementId,\r\n        address debtor\r\n    ) public returns (bool _success);\r\n\r\n\tfunction registerRepayment(\r\n        bytes32 agreementId,\r\n        address payer,\r\n        address beneficiary,\r\n        uint256 unitsOfRepayment,\r\n        address tokenAddress\r\n    ) public returns (bool _success);\r\n\r\n\tfunction getExpectedRepaymentValue(\r\n        bytes32 agreementId,\r\n        uint256 timestamp\r\n    ) public view returns (uint256);\r\n\r\n\tfunction getValueRepaidToDate(\r\n        bytes32 agreementId\r\n    ) public view returns (uint256);\r\n\r\n\tfunction getTermEndTimestamp(\r\n        bytes32 _agreementId\r\n    ) public view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/src/shared/interfaces/SimpleInterestTermsContractInterface.sol\r\n\r\n\r\n\r\n\r\ncontract SimpleInterestTermsContractInterface is TermsContractInterface {\r\n\r\n    function unpackParametersFromBytes(\r\n        bytes32 parameters\r\n    ) public pure returns (\r\n        uint _principalTokenIndex,\r\n        uint _principalAmount,\r\n        uint _interestRate,\r\n        uint _amortizationUnitType,\r\n        uint _termLengthInAmortizationUnits\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/src/CreditorDrivenLoans/DecisionEngines/LTVDecisionEngine.sol\r\n\r\n\r\n\r\n// External dependencies\r\n\r\n\r\n// Libraries\r\n\r\n\r\n\r\n\r\n// Interfaces\r\n\r\n\r\n\r\n\r\ncontract LTVDecisionEngine is LTVDecisionEngineTypes, SignaturesLibrary, OrderLibrary\r\n{\r\n\tusing SafeMath for uint;\r\n\r\n\tuint public constant PRECISION = 4;\r\n\r\n\tuint public constant MAX_PRICE_TTL_IN_SECONDS = 600;\r\n\r\n\tContractRegistryInterface public contractRegistry;\r\n\r\n\tfunction LTVDecisionEngine(address _contractRegistry) public {\r\n        contractRegistry = ContractRegistryInterface(_contractRegistry);\r\n    }\r\n\r\n\tfunction evaluateConsent(Params params, bytes32 commitmentHash)\r\n\t\tpublic view returns (bool)\r\n\t{\r\n\t\t// Checks that the given creditor values were signed by the creditor.\r\n\t\tif (!isValidSignature(\r\n\t\t\tparams.creditor,\r\n\t\t\tcommitmentHash,\r\n\t\t\tparams.creditorCommitment.signature\r\n\t\t)) {\r\n\t\t\t// We return early if the creditor values were not signed correctly.\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Checks that the given price feed data was signed by the price feed operator.\r\n\t\treturn (\r\n\t\t\tverifyPrices(\r\n\t\t\t\tparams.creditorCommitment.values.priceFeedOperator,\r\n\t\t\t\tparams.principalPrice,\r\n\t\t\t\tparams.collateralPrice\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t// Returns true if the creditor-initiated order has not expired, and the LTV is below the max.\r\n\tfunction evaluateDecision(Params memory params)\r\n\t\tpublic view returns (bool _success)\r\n\t{\r\n\t\tLTVDecisionEngineTypes.Price memory principalTokenPrice = params.principalPrice;\r\n\t\tLTVDecisionEngineTypes.Price memory collateralTokenPrice = params.collateralPrice;\r\n\r\n\t\tuint maxLTV = params.creditorCommitment.values.maxLTV;\r\n\t\tOrderLibrary.DebtOrder memory order = params.order;\r\n\r\n\t\tuint collateralValue = collateralTokenPrice.value;\r\n\r\n\t\tif (isExpired(order.expirationTimestampInSec)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (order.collateralAmount == 0 || collateralValue == 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tuint ltv = computeLTV(\r\n\t\t\tprincipalTokenPrice.value,\r\n\t\t\tcollateralTokenPrice.value,\r\n\t\t\torder.principalAmount,\r\n\t\t\torder.collateralAmount\r\n\t\t);\r\n\r\n\t\tuint maxLTVWithPrecision = maxLTV.mul(10 ** (PRECISION.sub(2)));\r\n\r\n\t\treturn ltv <= maxLTVWithPrecision;\r\n\t}\r\n\r\n\tfunction hashCreditorCommitmentForOrder(CommitmentValues commitmentValues, OrderLibrary.DebtOrder order)\r\n\tpublic view returns (bytes32)\r\n\t{\r\n\t\tbytes32 termsContractCommitmentHash =\r\n\t\t\tgetTermsContractCommitmentHash(order.termsContract, order.termsContractParameters);\r\n\r\n\t\treturn keccak256(\r\n\t\t\t// order values\r\n\t\t\torder.creditor,\r\n\t\t\torder.kernelVersion,\r\n\t\t\torder.issuanceVersion,\r\n\t\t\torder.termsContract,\r\n\t\t\torder.principalToken,\r\n\t\t\torder.salt,\r\n\t\t\torder.principalAmount,\r\n\t\t\torder.creditorFee,\r\n\t\t\torder.expirationTimestampInSec,\r\n\t\t\t// commitment values\r\n\t\t\tcommitmentValues.maxLTV,\r\n\t\t\tcommitmentValues.priceFeedOperator,\r\n\t\t\t// hashed terms contract commitments\r\n\t\t\ttermsContractCommitmentHash\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getTermsContractCommitmentHash(\r\n\t\taddress termsContract,\r\n\t\tbytes32 termsContractParameters\r\n\t) public view returns (bytes32) {\r\n\t\tSimpleInterestParameters memory simpleInterestParameters =\r\n\t\t\tunpackSimpleInterestParameters(termsContract, termsContractParameters);\r\n\r\n\t\tCollateralParameters memory collateralParameters =\r\n\t\t\tunpackCollateralParameters(termsContractParameters);\r\n\r\n\t\treturn keccak256(\r\n\t\t\t// unpacked termsContractParameters\r\n\t\t\tsimpleInterestParameters.principalTokenIndex,\r\n\t\t\tsimpleInterestParameters.principalAmount,\r\n\t\t\tsimpleInterestParameters.interestRate,\r\n\t\t\tsimpleInterestParameters.amortizationUnitType,\r\n\t\t\tsimpleInterestParameters.termLengthInAmortizationUnits,\r\n\t\t\tcollateralParameters.collateralTokenIndex,\r\n\t\t\tcollateralParameters.gracePeriodInDays\r\n\t\t);\r\n\t}\r\n\r\n\tfunction unpackSimpleInterestParameters(\r\n\t\taddress termsContract,\r\n\t\tbytes32 termsContractParameters\r\n\t)\r\n\t\tpublic pure returns (SimpleInterestParameters)\r\n\t{\r\n\t\t// use simple interest terms contract interface to unpack simple interest terms\r\n\t\tSimpleInterestTermsContractInterface simpleInterestTermsContract = SimpleInterestTermsContractInterface(termsContract);\r\n\r\n\t\tvar (principalTokenIndex, principalAmount, interestRate, amortizationUnitType, termLengthInAmortizationUnits) =\r\n\t\t\tsimpleInterestTermsContract.unpackParametersFromBytes(termsContractParameters);\r\n\r\n\t\treturn SimpleInterestParameters({\r\n\t\t\tprincipalTokenIndex: principalTokenIndex,\r\n\t\t\tprincipalAmount: principalAmount,\r\n\t\t\tinterestRate: interestRate,\r\n\t\t\tamortizationUnitType: amortizationUnitType,\r\n\t\t\ttermLengthInAmortizationUnits: termLengthInAmortizationUnits\r\n\t\t});\r\n\t}\r\n\r\n\tfunction unpackCollateralParameters(\r\n\t\tbytes32 termsContractParameters\r\n\t)\r\n\t\tpublic view returns (CollateralParameters)\r\n\t{\r\n\t\tCollateralizerInterface collateralizer = CollateralizerInterface(contractRegistry.collateralizer());\r\n\r\n\t\tvar (collateralTokenIndex, collateralAmount, gracePeriodInDays) =\r\n\t\t\tcollateralizer.unpackCollateralParametersFromBytes(termsContractParameters);\r\n\r\n\t\treturn CollateralParameters({\r\n\t\t\tcollateralTokenIndex: collateralTokenIndex,\r\n\t\t\tcollateralAmount: collateralAmount,\r\n\t\t\tgracePeriodInDays: gracePeriodInDays\r\n\t\t});\r\n\t}\r\n\r\n\tfunction verifyPrices(\r\n\t\taddress priceFeedOperator,\r\n\t\tLTVDecisionEngineTypes.Price principalPrice,\r\n\t\tLTVDecisionEngineTypes.Price collateralPrice\r\n\t)\r\n\t\tinternal view returns (bool)\r\n\t{\r\n\t\tuint minPriceTimestamp = block.timestamp - MAX_PRICE_TTL_IN_SECONDS;\r\n\r\n\t\tif (principalPrice.timestamp < minPriceTimestamp ||\r\n\t\t\tcollateralPrice.timestamp < minPriceTimestamp) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tbytes32 principalPriceHash = keccak256(\r\n\t\t\tprincipalPrice.value,\r\n\t\t\tprincipalPrice.tokenAddress,\r\n\t\t\tprincipalPrice.timestamp\r\n\t\t);\r\n\r\n\t\tbytes32 collateralPriceHash = keccak256(\r\n\t\t\tcollateralPrice.value,\r\n\t\t\tcollateralPrice.tokenAddress,\r\n\t\t\tcollateralPrice.timestamp\r\n\t\t);\r\n\r\n\t\tbool principalPriceValid = isValidSignature(\r\n\t\t\tpriceFeedOperator,\r\n\t\t\tprincipalPriceHash,\r\n\t\t\tprincipalPrice.signature\r\n\t\t);\r\n\r\n\t\t// We return early if the principal price information was not signed correctly.\r\n\t\tif (!principalPriceValid) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn isValidSignature(\r\n\t\t\tpriceFeedOperator,\r\n\t\t\tcollateralPriceHash,\r\n\t\t\tcollateralPrice.signature\r\n\t\t);\r\n\t}\r\n\r\n\tfunction computeLTV(\r\n\t\tuint principalTokenPrice,\r\n\t\tuint collateralTokenPrice,\r\n\t\tuint principalAmount,\r\n\t\tuint collateralAmount\r\n\t)\r\n\t\tinternal constant returns (uint)\r\n\t{\r\n\t\tuint principalValue = principalTokenPrice.mul(principalAmount).mul(10 ** PRECISION);\r\n\t\tuint collateralValue = collateralTokenPrice.mul(collateralAmount);\r\n\r\n\t\treturn principalValue.div(collateralValue);\r\n\t}\r\n\r\n\tfunction isExpired(uint expirationTimestampInSec)\r\n\t\tinternal view returns (bool expired)\r\n\t{\r\n\t\treturn expirationTimestampInSec < block.timestamp;\r\n\t}\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/src/CreditorDrivenLoans/libraries/CreditorProxyErrors.sol\r\n\r\ncontract CreditorProxyErrors {\r\n    enum Errors {\r\n            DEBT_OFFER_CANCELLED,\r\n            DEBT_OFFER_ALREADY_FILLED,\r\n            DEBT_OFFER_NON_CONSENSUAL,\r\n            CREDITOR_BALANCE_OR_ALLOWANCE_INSUFFICIENT,\r\n            DEBT_OFFER_CRITERIA_NOT_MET\r\n        }\r\n\r\n    event CreditorProxyError(\r\n        uint8 indexed _errorId,\r\n        address indexed _creditor,\r\n        bytes32 indexed _creditorCommitmentHash\r\n    );\r\n}\r\n\r\n// File: contracts/src/CreditorDrivenLoans/libraries/CreditorProxyEvents.sol\r\n\r\n\r\n\r\ncontract CreditorProxyEvents {\r\n\r\n    event DebtOfferCancelled(\r\n        address indexed _creditor,\r\n        bytes32 indexed _creditorCommitmentHash\r\n    );\r\n\r\n    event DebtOfferFilled(\r\n        address indexed _creditor,\r\n        bytes32 indexed _creditorCommitmentHash,\r\n        bytes32 indexed _agreementId\r\n    );\r\n}\r\n\r\n// File: contracts/src/CreditorDrivenLoans/interfaces/CreditorProxyCoreInterface.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CreditorProxyCoreInterface is CreditorProxyErrors, CreditorProxyEvents { }\r\n\r\n// File: contracts/src/CreditorDrivenLoans/CreditorProxyCore.sol\r\n\r\n\r\n\r\n// External libraries\r\n\r\n// Internal interfaces\r\n\r\n// Shared interfaces\r\n\r\n\r\n\r\ncontract CreditorProxyCore is CreditorProxyCoreInterface {\r\n\r\n\tuint16 constant public EXTERNAL_QUERY_GAS_LIMIT = 8000;\r\n\r\n\tContractRegistryInterface public contractRegistry;\r\n\r\n\t/**\r\n\t * Helper function for transferring a specified amount of tokens between two parties.\r\n\t */\r\n\tfunction transferTokensFrom(\r\n\t\taddress _token,\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint _amount\r\n\t)\r\n\t\tinternal\r\n\t\treturns (bool _success)\r\n\t{\r\n\t\treturn ERC20(_token).transferFrom(_from, _to, _amount);\r\n\t}\r\n\r\n\t/**\r\n     * Helper function for querying this contract's allowance for transferring the given token.\r\n     */\r\n\tfunction getAllowance(\r\n\t\taddress token,\r\n\t\taddress owner,\r\n\t\taddress granter\r\n\t)\r\n\t\tinternal\r\n\t\tview\r\n\treturns (uint _allowance)\r\n\t{\r\n\t\t// Limit gas to prevent reentrancy.\r\n\t\treturn ERC20(token).allowance.gas(EXTERNAL_QUERY_GAS_LIMIT)(\r\n\t\t\towner,\r\n\t\t\tgranter\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// File: contracts/src/CreditorDrivenLoans/LTVCreditorProxy.sol\r\n\r\n\r\n\r\n// Internal interfaces\r\n\r\n// Internal mixins\r\n\r\n\r\n\r\n\r\ncontract LTVCreditorProxy is CreditorProxyCore, LTVDecisionEngine {\r\n\r\n\tmapping (bytes32 => bool) public debtOfferCancelled;\r\n\tmapping (bytes32 => bool) public debtOfferFilled;\r\n\r\n\tbytes32 constant internal NULL_ISSUANCE_HASH = bytes32(0);\r\n\r\n\tfunction LTVCreditorProxy(address _contractRegistry) LTVDecisionEngine(_contractRegistry)\r\n\t\tpublic\r\n\t{\r\n\t\tcontractRegistry = ContractRegistryInterface(_contractRegistry);\r\n\t}\r\n\r\n\tfunction fillDebtOffer(LTVDecisionEngineTypes.Params params)\r\n\t\tpublic returns (bytes32 agreementId)\r\n\t{\r\n\t\tOrderLibrary.DebtOrder memory order = params.order;\r\n\t\tCommitmentValues memory commitmentValues = params.creditorCommitment.values;\r\n\r\n\t\tbytes32 creditorCommitmentHash = hashCreditorCommitmentForOrder(commitmentValues, order);\r\n\r\n\t\tif (!evaluateConsent(params, creditorCommitmentHash)) {\r\n\t\t\temit CreditorProxyError(uint8(Errors.DEBT_OFFER_NON_CONSENSUAL), order.creditor, creditorCommitmentHash);\r\n\t\t\treturn NULL_ISSUANCE_HASH;\r\n\t\t}\r\n\r\n\t\tif (debtOfferFilled[creditorCommitmentHash]) {\r\n\t\t\temit CreditorProxyError(uint8(Errors.DEBT_OFFER_ALREADY_FILLED), order.creditor, creditorCommitmentHash);\r\n\t\t\treturn NULL_ISSUANCE_HASH;\r\n\t\t}\r\n\r\n\t\tif (debtOfferCancelled[creditorCommitmentHash]) {\r\n\t\t\temit CreditorProxyError(uint8(Errors.DEBT_OFFER_CANCELLED), order.creditor, creditorCommitmentHash);\r\n\t\t\treturn NULL_ISSUANCE_HASH;\r\n\t\t}\r\n\r\n\t\tif (!evaluateDecision(params)) {\r\n\t\t\temit CreditorProxyError(\r\n\t\t\t\tuint8(Errors.DEBT_OFFER_CRITERIA_NOT_MET),\r\n\t\t\t\torder.creditor,\r\n\t\t\t\tcreditorCommitmentHash\r\n\t\t\t);\r\n\t\t\treturn NULL_ISSUANCE_HASH;\r\n\t\t}\r\n\r\n\t\taddress principalToken = order.principalToken;\r\n\r\n\t\t// The allowance that the token transfer proxy has for this contract's tokens.\r\n\t\tuint tokenTransferAllowance = getAllowance(\r\n\t\t\tprincipalToken,\r\n\t\t\taddress(this),\r\n\t\t\tcontractRegistry.tokenTransferProxy()\r\n\t\t);\r\n\r\n\t\tuint totalCreditorPayment = order.principalAmount.add(order.creditorFee);\r\n\r\n\t\t// Ensure the token transfer proxy can transfer tokens from the creditor proxy\r\n\t\tif (tokenTransferAllowance < totalCreditorPayment) {\r\n\t\t\trequire(setTokenTransferAllowance(principalToken, totalCreditorPayment));\r\n\t\t}\r\n\r\n\t\t// Transfer principal from creditor to CreditorProxy\r\n\t\tif (totalCreditorPayment > 0) {\r\n\t\t\trequire(\r\n\t\t\t\ttransferTokensFrom(\r\n\t\t\t\t\tprincipalToken,\r\n\t\t\t\t\torder.creditor,\r\n\t\t\t\t\taddress(this),\r\n\t\t\t\t\ttotalCreditorPayment\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tagreementId = sendOrderToKernel(order);\r\n\r\n\t\trequire(agreementId != NULL_ISSUANCE_HASH);\r\n\r\n\t\tdebtOfferFilled[creditorCommitmentHash] = true;\r\n\r\n\t\tcontractRegistry.debtToken().transfer(order.creditor, uint256(agreementId));\r\n\r\n\t\temit DebtOfferFilled(order.creditor, creditorCommitmentHash, agreementId);\r\n\r\n\t\treturn agreementId;\r\n\t}\r\n\r\n\tfunction sendOrderToKernel(DebtOrder memory order) internal returns (bytes32 id)\r\n\t{\r\n\t\taddress[6] memory orderAddresses;\r\n\t\tuint[8] memory orderValues;\r\n\t\tbytes32[1] memory orderBytes32;\r\n\t\tuint8[3] memory signaturesV;\r\n\t\tbytes32[3] memory signaturesR;\r\n\t\tbytes32[3] memory signaturesS;\r\n\r\n\t\t(orderAddresses, orderValues, orderBytes32, signaturesV, signaturesR, signaturesS) = unpackDebtOrder(order);\r\n\r\n\t\treturn contractRegistry.debtKernel().fillDebtOrder(\r\n\t\t\taddress(this),\r\n\t\t\torderAddresses,\r\n\t\t\torderValues,\r\n\t\t\torderBytes32,\r\n\t\t\tsignaturesV,\r\n\t\t\tsignaturesR,\r\n\t\t\tsignaturesS\r\n\t\t);\r\n\t}\r\n\r\n\tfunction cancelDebtOffer(LTVDecisionEngineTypes.Params params) public returns (bool) {\r\n\t\tLTVDecisionEngineTypes.CommitmentValues memory commitmentValues = params.creditorCommitment.values;\r\n\t\tOrderLibrary.DebtOrder memory order = params.order;\r\n\r\n\t\t// sender must be the creditor.\r\n\t\trequire(msg.sender == order.creditor);\r\n\r\n\t\tbytes32 creditorCommitmentHash = hashCreditorCommitmentForOrder(commitmentValues, order);\r\n\r\n\t\t// debt offer must not already be filled.\r\n\t\trequire(!debtOfferFilled[creditorCommitmentHash]);\r\n\r\n\t\tdebtOfferCancelled[creditorCommitmentHash] = true;\r\n\r\n\t\temit DebtOfferCancelled(order.creditor, creditorCommitmentHash);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n     * Helper function for approving this address' allowance to Dharma's token transfer proxy.\r\n     */\r\n\tfunction setTokenTransferAllowance(\r\n\t\taddress token,\r\n\t\tuint amount\r\n\t)\r\n\t\tinternal\r\n\t\treturns (bool _success)\r\n\t{\r\n\t\treturn ERC20(token).approve(\r\n\t\t\taddress(contractRegistry.tokenTransferProxy()),\r\n\t\t\tamount\r\n\t\t);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"}],\"name\":\"getTermsContractCommitmentHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"creditor\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"name\":\"maxLTV\",\"type\":\"uint256\"},{\"name\":\"priceFeedOperator\",\"type\":\"address\"}],\"name\":\"values\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"creditorCommitment\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"principalPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"collateralPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"kernelVersion\",\"type\":\"address\"},{\"name\":\"issuanceVersion\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"debtorFee\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"creditorFee\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"underwriterFee\",\"type\":\"uint256\"},{\"name\":\"underwriterRiskRating\",\"type\":\"uint256\"},{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"},{\"name\":\"expirationTimestampInSec\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"debtorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"creditorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"underwriterSignature\",\"type\":\"tuple\"}],\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"params\",\"type\":\"tuple\"},{\"name\":\"commitmentHash\",\"type\":\"bytes32\"}],\"name\":\"evaluateConsent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"creditor\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"name\":\"maxLTV\",\"type\":\"uint256\"},{\"name\":\"priceFeedOperator\",\"type\":\"address\"}],\"name\":\"values\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"creditorCommitment\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"principalPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"collateralPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"kernelVersion\",\"type\":\"address\"},{\"name\":\"issuanceVersion\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"debtorFee\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"creditorFee\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"underwriterFee\",\"type\":\"uint256\"},{\"name\":\"underwriterRiskRating\",\"type\":\"uint256\"},{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"},{\"name\":\"expirationTimestampInSec\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"debtorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"creditorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"underwriterSignature\",\"type\":\"tuple\"}],\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"cancelDebtOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"creditor\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"name\":\"maxLTV\",\"type\":\"uint256\"},{\"name\":\"priceFeedOperator\",\"type\":\"address\"}],\"name\":\"values\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"creditorCommitment\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"principalPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"collateralPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"kernelVersion\",\"type\":\"address\"},{\"name\":\"issuanceVersion\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"debtorFee\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"creditorFee\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"underwriterFee\",\"type\":\"uint256\"},{\"name\":\"underwriterRiskRating\",\"type\":\"uint256\"},{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"},{\"name\":\"expirationTimestampInSec\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"debtorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"creditorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"underwriterSignature\",\"type\":\"tuple\"}],\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"evaluateDecision\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PRICE_TTL_IN_SECONDS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"debtOfferCancelled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"creditor\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"name\":\"maxLTV\",\"type\":\"uint256\"},{\"name\":\"priceFeedOperator\",\"type\":\"address\"}],\"name\":\"values\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"creditorCommitment\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"principalPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"collateralPrice\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"kernelVersion\",\"type\":\"address\"},{\"name\":\"issuanceVersion\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"debtorFee\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"creditorFee\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"underwriterFee\",\"type\":\"uint256\"},{\"name\":\"underwriterRiskRating\",\"type\":\"uint256\"},{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"},{\"name\":\"expirationTimestampInSec\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"debtorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"creditorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"underwriterSignature\",\"type\":\"tuple\"}],\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"fillDebtOffer\",\"outputs\":[{\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"debtOfferFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"}],\"name\":\"unpackCollateralParameters\",\"outputs\":[{\"components\":[{\"name\":\"collateralTokenIndex\",\"type\":\"uint256\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"gracePeriodInDays\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"maxLTV\",\"type\":\"uint256\"},{\"name\":\"priceFeedOperator\",\"type\":\"address\"}],\"name\":\"commitmentValues\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"kernelVersion\",\"type\":\"address\"},{\"name\":\"issuanceVersion\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"debtorFee\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"creditorFee\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"underwriterFee\",\"type\":\"uint256\"},{\"name\":\"underwriterRiskRating\",\"type\":\"uint256\"},{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"},{\"name\":\"expirationTimestampInSec\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"debtorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"creditorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"underwriterSignature\",\"type\":\"tuple\"}],\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashCreditorCommitmentForOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"kernelVersion\",\"type\":\"address\"},{\"name\":\"issuanceVersion\",\"type\":\"address\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"principalToken\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"debtorFee\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"creditorFee\",\"type\":\"uint256\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"underwriter\",\"type\":\"address\"},{\"name\":\"underwriterFee\",\"type\":\"uint256\"},{\"name\":\"underwriterRiskRating\",\"type\":\"uint256\"},{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"},{\"name\":\"expirationTimestampInSec\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"debtorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"creditorSignature\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"underwriterSignature\",\"type\":\"tuple\"}],\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"unpackDebtOrder\",\"outputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[6]\"},{\"name\":\"orderValues\",\"type\":\"uint256[8]\"},{\"name\":\"orderBytes32\",\"type\":\"bytes32[1]\"},{\"name\":\"signaturesV\",\"type\":\"uint8[3]\"},{\"name\":\"signaturesR\",\"type\":\"bytes32[3]\"},{\"name\":\"signaturesS\",\"type\":\"bytes32[3]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"termsContract\",\"type\":\"address\"},{\"name\":\"termsContractParameters\",\"type\":\"bytes32\"}],\"name\":\"unpackSimpleInterestParameters\",\"outputs\":[{\"components\":[{\"name\":\"principalTokenIndex\",\"type\":\"uint256\"},{\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"name\":\"interestRate\",\"type\":\"uint256\"},{\"name\":\"amortizationUnitType\",\"type\":\"uint256\"},{\"name\":\"termLengthInAmortizationUnits\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXTERNAL_QUERY_GAS_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creditor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_creditorCommitmentHash\",\"type\":\"bytes32\"}],\"name\":\"DebtOfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creditor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_creditorCommitmentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_agreementId\",\"type\":\"bytes32\"}],\"name\":\"DebtOfferFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_errorId\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"_creditor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_creditorCommitmentHash\",\"type\":\"bytes32\"}],\"name\":\"CreditorProxyError\",\"type\":\"event\"}]","ContractName":"LTVCreditorProxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000010512440113cb6cb613be403135876d2e0a42c0b","Library":"","SwarmSource":"bzzr://4bccc1d4e6e28081e149b6bb35c6a047cbc7c2b40b4af83b259de6dfd44f24a2"}]}