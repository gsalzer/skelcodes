{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// --> http://lucky9.io <-- Ethereum Lottery.\r\n//\r\n// - 1 of 3 chance to win half of the JACKPOT! And every 999th ticket grabs 80% of the JACKPOT!\r\n//\r\n// - The house edge is 1% of the ticket price, 1% reserved for transactions.\r\n//\r\n// - The winnings are distributed by the Smart Contract automatically.\r\n//\r\n// - Smart Contract address: 0x53c2C4Ee7E625d0E415288d6e4E3F38a1BCB2038\r\n// - More details at: https://etherscan.io/address/0x53c2C4Ee7E625d0E415288d6e4E3F38a1BCB2038\r\n//\r\n// - NOTE: Ensure sufficient gas limit for transaction to succeed. Gas limit 150000 should be sufficient.\r\n//\r\n// --- GOOD LUCK! ---\r\n//\r\n\r\ncontract lucky9io {\r\n    // Public variables\r\n    uint public house_edge = 0;\r\n    uint public jackpot = 0;\r\n    address public last_winner;\r\n    uint public last_win_wei = 0;\r\n    uint public total_wins_wei = 0;\r\n    uint public total_wins_count = 0;\r\n\r\n    // Internal variables\r\n    bool private game_alive = true;\r\n    address private owner = 0x5Bf066c70C2B5e02F1C6723E72e82478Fec41201;\r\n    uint private entry_number = 0;\r\n    uint private value = 0;\r\n\r\n    modifier onlyOwner() {\r\n     require(msg.sender == owner, \"Sender not authorized.\");\r\n     _;\r\n    }\r\n\r\n    function () public payable {\r\n        // Only accept ticket purchases if the game is ON\r\n        require(game_alive == true);\r\n\r\n        // Price of the ticket is 0.009 ETH\r\n        require(msg.value / 1000000000000000 == 9);\r\n\r\n        // House edge + Jackpot (1% is reserved for transactions)\r\n        jackpot = jackpot + (msg.value * 98 / 100);\r\n        house_edge = house_edge + (msg.value / 100);\r\n\r\n        // Owner does not participate in the play, only adds up to the JACKPOT\r\n        if(msg.sender == owner) return;\r\n\r\n        // Increasing the ticket number\r\n        entry_number = entry_number + 1;\r\n\r\n        // Let's see if the ticket is the 999th...\r\n        if(entry_number % 999 == 0) {\r\n            // We have a WINNER !!!\r\n\r\n            // Calculate the prize money\r\n            uint win_amount_999 = jackpot * 80 / 100;\r\n            jackpot = jackpot - win_amount_999;\r\n\r\n            // Set the statistics\r\n            last_winner = msg.sender;\r\n            last_win_wei = win_amount;\r\n            total_wins_count = total_wins_count + 1;\r\n            total_wins_wei = total_wins_wei + win_amount_999;\r\n\r\n            // Pay the winning\r\n            msg.sender.transfer(win_amount_999);\r\n            return;\r\n        } else {\r\n            // Get the lucky number\r\n            uint lucky_number = uint(keccak256(abi.encodePacked((entry_number+block.number), blockhash(block.number))));\r\n\r\n            if(lucky_number % 3 == 0) {\r\n                // We have a WINNER !!!\r\n\r\n                // Calculate the prize money\r\n                uint win_amount = jackpot * 50 / 100;\r\n                if(address(this).balance - house_edge < win_amount) {\r\n                    win_amount = (address(this).balance-house_edge) * 50 / 100;\r\n                }\r\n\r\n                jackpot = jackpot - win_amount;\r\n\r\n                // Set the statistics\r\n                last_winner = msg.sender;\r\n                last_win_wei = win_amount;\r\n                total_wins_count = total_wins_count + 1;\r\n                total_wins_wei = total_wins_wei + win_amount;\r\n\r\n                // Pay the winning\r\n                msg.sender.transfer(win_amount);\r\n            }\r\n\r\n            return;\r\n        }\r\n    }\r\n\r\n    function getBalance() constant public returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getTotalTickets() constant public returns (uint256) {\r\n        return entry_number;\r\n    }\r\n\r\n    function getLastWin() constant public returns (uint256) {\r\n        return last_win_wei;\r\n    }\r\n\r\n    function getLastWinner() constant public returns (address) {\r\n        return last_winner;\r\n    }\r\n\r\n    function getTotalWins() constant public returns (uint256) {\r\n        return total_wins_wei;\r\n    }\r\n\r\n    function getTotalWinsCount() constant public returns (uint256) {\r\n        return total_wins_count;\r\n    }\r\n\r\n    // Owner functions\r\n    function stopGame() public onlyOwner {\r\n        game_alive = false;\r\n        return;\r\n    }\r\n\r\n    function startGame() public onlyOwner {\r\n        game_alive = true;\r\n        return;\r\n    }\r\n\r\n    function transferHouseEdge(uint amount) public onlyOwner payable {\r\n        require(amount <= house_edge);\r\n        require((address(this).balance - amount) > 0);\r\n\r\n        owner.transfer(amount);\r\n        house_edge = house_edge - amount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTotalTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"house_edge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalWinsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_wins_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_wins_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferHouseEdge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalWins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_win_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"lucky9io","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e3fba3e4c05ca060ba3dccfff7bdb779dcbcf6916c9b7eda35e73ba3da5545bf"}]}