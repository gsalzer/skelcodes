{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract EscrowManagement {\r\n\r\n    // CONTRACT VARIABLES ###########################################################################################\r\n\r\n    uint public numberOfSuccessfullExecutions;\r\n\r\n    // Escrow Order Template\r\n    struct Escrow {\r\n        address creator;          // address of the creator of the order\r\n        uint amountTokenSell;     // amount of sell units creator is selling\r\n        address tokenAddressSell; // address of the sell unit\r\n        uint amountTokenBuy;      // amount of buy units creator is buying\r\n        address tokenAddressBuy;  // address of the buy unit\r\n    }\r\n\r\n    mapping (address => mapping (address => Escrow[])) allOrders; // Stores all the escrows trading with said sell and by tokens\r\n\r\n    enum EscrowState{\r\n        Created,       // State representing that escrow order has been created by the seller\r\n        Accepted,      // State representing that escrow order has been accepted by the buyer\r\n        Completed,     // State representing that escrow order has been fulfilled and the exchange of tokens completed\r\n        Died           // State representing that escrow order has been removed and deleted from the order book\r\n    }\r\n\r\n    // ##############################################################################################################\r\n\r\n\r\n    // EVENTS #######################################################################################################\r\n\r\n    event EscrowManagerInitialized();               // Escrow Manager Contract has been deployed and ready for usage\r\n    event EscrowCreated(EscrowState escrowState);   // Escrow order has been created by the seller\r\n    event EscrowAccepted(EscrowState escrowState);  // Escrow order has been accepted by the buyer\r\n    event EscrowCompleted(EscrowState escrowState); // Escrow order has been fulfilled and the exchange of tokens completed\r\n    event EscrowDied(EscrowState escrowState);      // Escrow order has been removed and deleted from the order book\r\n\r\n    // ##############################################################################################################\r\n\r\n\r\n    // MODIFIERS ####################################################################################################\r\n\r\n    // Asserts that the escrow order chosen is valid\r\n    // inputs:\r\n    //     address _tokenAddressSell : contract address of the sell unit\r\n    //      address _tokenAddressBuy : contract address of the buy unit\r\n    //                 uint escrowId : position id of the escrow order in the order book\r\n    modifier onlyValidEscrowId(address _tokenAddressSell, address _tokenAddressBuy, uint escrowId){\r\n        require(\r\n            allOrders[_tokenAddressSell][_tokenAddressBuy].length > escrowId, // Ensure that escrowId is less than the length of the escrow order list being referred to\r\n            \"Invalid Escrow Order!\"                                           // Message to send if the condition above has failed, revert transaction\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Asserts that the escrow order chosen is valid\r\n    // inputs:\r\n    //     uint sellTokenAmount : amount of sell tokens\r\n    //      uint buyTokenAmount : amount of buy tokens\r\n    modifier onlyNonZeroAmts(uint sellTokenAmount, uint buyTokenAmount){\r\n        require(\r\n            sellTokenAmount > 0 && buyTokenAmount > 0, // Ensure that the amounts entered into the creation of an escrow order are non-zero and positive\r\n            \"Escrow order amounts are 0!\"              // Message to send if the condition above has failed, revert transaction\r\n        );\r\n        _;\r\n    }\r\n\r\n    // ##############################################################################################################\r\n\r\n\r\n    // MAIN CONTRACT METHODS ########################################################################################\r\n\r\n    // Constructor function for EscrowManager contract deployment\r\n    function EscrowManager() {\r\n        numberOfSuccessfullExecutions = 0;\r\n        EscrowManagerInitialized();\r\n    }\r\n\r\n    // Creates the escrow order and stores the order in the escrow manager\r\n    // inputs:\r\n    //     address _tokenAddressSell: contract address of the sell unit\r\n    //         uint _amountTokenSell: amount of sell units to sell\r\n    //      address _tokenAddressBuy: contract address of buy unit\r\n    //          uint _amountTokenBuy: amount of buy units to buy\r\n    // events:\r\n    //     EscrowCreated(EscrowState.Created): Escrow order has been created and is added to the orderbook\r\n    function createEscrow(address _tokenAddressSell, uint _amountTokenSell,\r\n                          address _tokenAddressBuy, uint _amountTokenBuy)\r\n        payable\r\n        onlyNonZeroAmts(_amountTokenSell, _amountTokenBuy)\r\n    {\r\n\r\n        Escrow memory newEscrow = Escrow({       // Create escrow order based on the 'Escrow' template\r\n            creator: msg.sender,                 // Assign the sender of the transaction to be the creator of the escrow order\r\n            amountTokenSell: _amountTokenSell,   // Creator's specified sell amount\r\n            tokenAddressSell: _tokenAddressSell, // Creator's specified sell unit\r\n            amountTokenBuy: _amountTokenBuy,     // Creator's specified buy amount\r\n            tokenAddressBuy: _tokenAddressBuy    // Creator's specified buy unit\r\n        });\r\n\r\n        ERC20Interface(_tokenAddressSell).transferFrom(msg.sender, this, _amountTokenSell); // EscrowManager transfers the amount of sell units from Creator to itself\r\n        allOrders[_tokenAddressSell][_tokenAddressBuy].push(newEscrow);                     // Adds the new escrow order to the end of the order list in allOrders\r\n        EscrowCreated(EscrowState.Created);                                                 // Event thrown to indicate that escrow order has been created\r\n    }\r\n\r\n    // Escrow order is chosen and fulfilled\r\n    // inputs:\r\n    //     address _tokenAddressSell: contract address of the sell unit\r\n    //      address _tokenAddressBuy: contract address of buy unit\r\n    //                 uint escrowId: position of the escrow order in allOrders based on the sell and buy contract address\r\n    // events:\r\n    //     EscrowAccepted(EscrowState.Accepted): Escrow order has been accepted by the sender of the transaction\r\n    function acceptEscrow(address _tokenAddressSell, address _tokenAddressBuy, uint escrowId)\r\n        payable\r\n        onlyValidEscrowId(_tokenAddressSell, _tokenAddressBuy, escrowId)\r\n    {\r\n        Escrow memory chosenEscrow = allOrders[_tokenAddressSell][_tokenAddressBuy][escrowId];                    // Extract the chosen escrow order from allOrders based on escrowId\r\n        ERC20Interface(chosenEscrow.tokenAddressBuy).transferFrom(msg.sender, this, chosenEscrow.amountTokenBuy); // EscrowManager transfers the amount of buy units from transaction sender to itself\r\n        EscrowAccepted(EscrowState.Accepted);                                                                     // Escrow order amounts have been transfered to EscrowManager and thus order is accepted by transaction sender\r\n        executeEscrow(chosenEscrow, msg.sender);                                                                  // EscrowManager to respective token amounts to seller and buyer\r\n        escrowDeletion(_tokenAddressSell, _tokenAddressBuy, escrowId);                                            // EscrowManager to remove the fulfilled escrow order from allOrders\r\n    }\r\n\r\n    // EscrowManager transfers the respective tokens amounts to the seller and the buyer\r\n    // inputs:\r\n    //      Escrow escrow: Chosen escrow order to execute the exchange of tokens\r\n    //      address buyer: Address of the buyer that accepted the escrow order\r\n    // events:\r\n    //     EscrowCompleted(EscrowState.Completed): Escrow order has been executed and exchange of tokens is completed\r\n    function executeEscrow(Escrow escrow, address buyer)\r\n        private\r\n    {\r\n        ERC20Interface(escrow.tokenAddressBuy).transfer(escrow.creator, escrow.amountTokenBuy); // EscrowManager transfers buy token amount to escrow creator (seller)\r\n        ERC20Interface(escrow.tokenAddressSell).transfer(buyer, escrow.amountTokenSell);        // EscrowManager transfers sell token amount to buyer\r\n        numberOfSuccessfullExecutions++;                                                        // Increment the number of successful executions of the escrow orders\r\n        EscrowCompleted(EscrowState.Completed);                                                 // Escrow order execution of the exchange of tokens is completed\r\n    }\r\n\r\n    // EscrowManager removes the fulfilled escrow from allOrders\r\n    // inputs:\r\n    //     address _tokenAddressSell: contract address of the sell unit\r\n    //      address _tokenAddressBuy: contract address of buy unit\r\n    //                 uint escrowId: position of the escrow order in allOrders based on the sell and buy contract address\r\n    // events:\r\n    //     EscrowDied(EscrowState.Died): Escrow order is removed from allOrders\r\n    function escrowDeletion(address _tokenAddressSell, address _tokenAddressBuy, uint escrowId)\r\n        private\r\n    {\r\n        for(uint i=escrowId; i<allOrders[_tokenAddressSell][_tokenAddressBuy].length-1; i++){                        // Iterate through list of orders in allOrders starting from the current escrow order's position\r\n            allOrders[_tokenAddressSell][_tokenAddressBuy][i] = allOrders[_tokenAddressSell][_tokenAddressBuy][i+1]; // Shift the all the orders in the list 1 position to the left\r\n        }\r\n        allOrders[_tokenAddressSell][_tokenAddressBuy].length--;                                                     // Decrement the total length of the list of orders to account for the removal of 1 escrow order\r\n        EscrowDied(EscrowState.Died);                                                                                // Escrow order has been removed from allOrders\r\n    }\r\n\r\n    // ##############################################################################################################\r\n\r\n\r\n    // GETTERS ######################################################################################################\r\n\r\n    // Retrieves all the escrow orders based on the sell unit and the buy unit\r\n    // inputs:\r\n    //     address _tokenAddressSell: contract address of the sell unit\r\n    //      address _tokenAddressBuy: contract address of the buy unit\r\n    // outputs:\r\n    //     uint[] sellAmount: list of the all the amounts in terms sell units in the list of escrow orders\r\n    //     uint[] buyAmount: list of the all the amounts in terms buy units in the list of escrow orders\r\n    function getOrderBook(address _tokenAddressSell, address _tokenAddressBuy)\r\n        constant returns (uint[] sellAmount, uint[] buyAmount)\r\n    {\r\n        Escrow[] memory escrows = allOrders[_tokenAddressSell][_tokenAddressBuy]; // Extract the list of escrow orders from allOrders\r\n        uint numEscrows = escrows.length;                                         // Length of the list of escrow orders\r\n        uint[] memory sellAmounts = new uint[](numEscrows);                       // Initiate list of sell amounts\r\n        uint[] memory buyAmounts = new uint[](numEscrows);                        // Initiate list of buy amounts\r\n        for(uint i = 0; i < numEscrows; i++){                                     // Iterate through list of escrow orders from position 0 to the end of the list of escrow orders\r\n            sellAmounts[i] = escrows[i].amountTokenSell;                          // Assign the position of the sell amount in the escrow order list to the same position in the sell amounts list\r\n            buyAmounts[i] = escrows[i].amountTokenBuy;                            // Assign the position of the buy amount in the escrow order list to the same position in the buy amounts list\r\n        }\r\n        return (sellAmounts, buyAmounts);                                         // Returns the sell and buy amounts lists\r\n    }\r\n\r\n    // ##############################################################################################################\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddressSell\",\"type\":\"address\"},{\"name\":\"_tokenAddressBuy\",\"type\":\"address\"}],\"name\":\"getOrderBook\",\"outputs\":[{\"name\":\"sellAmount\",\"type\":\"uint256[]\"},{\"name\":\"buyAmount\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"EscrowManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfSuccessfullExecutions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddressSell\",\"type\":\"address\"},{\"name\":\"_amountTokenSell\",\"type\":\"uint256\"},{\"name\":\"_tokenAddressBuy\",\"type\":\"address\"},{\"name\":\"_amountTokenBuy\",\"type\":\"uint256\"}],\"name\":\"createEscrow\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddressSell\",\"type\":\"address\"},{\"name\":\"_tokenAddressBuy\",\"type\":\"address\"},{\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"acceptEscrow\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EscrowManagerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"escrowState\",\"type\":\"uint8\"}],\"name\":\"EscrowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"escrowState\",\"type\":\"uint8\"}],\"name\":\"EscrowAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"escrowState\",\"type\":\"uint8\"}],\"name\":\"EscrowCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"escrowState\",\"type\":\"uint8\"}],\"name\":\"EscrowDied\",\"type\":\"event\"}]","ContractName":"EscrowManagement","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e67dcb1975b40c905ba6fa0d905db2f56a3838c3101a39b7771cd53a59acd4d3"}]}