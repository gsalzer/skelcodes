{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract MultiOwnable{\r\n\r\n  mapping(address => bool) public owners;\r\n  uint internal ownersLength_;\r\n\r\n  modifier onlyOwner() {\r\n    require(owners[msg.sender]);\r\n    _;\r\n  }\r\n  \r\n  event AddOwner(address indexed sender, address indexed owner);\r\n  event RemoveOwner(address indexed sender, address indexed owner);\r\n\r\n  function addOwner_(address _for) internal returns(bool) {\r\n    if(!owners[_for]) {\r\n      ownersLength_ += 1;\r\n      owners[_for] = true;\r\n      emit AddOwner(msg.sender, _for);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function addOwner(address _for) onlyOwner external returns(bool) {\r\n    return addOwner_(_for);\r\n  }\r\n\r\n  function removeOwner_(address _for) internal returns(bool) {\r\n    if((owners[_for]) && (ownersLength_ > 1)){\r\n      ownersLength_ -= 1;\r\n      owners[_for] = false;\r\n      emit RemoveOwner(msg.sender, _for);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function removeOwner(address _for) onlyOwner external returns(bool) {\r\n    return removeOwner_(_for);\r\n  }\r\n\r\n}\r\n\r\ncontract IERC20{\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address who) external view returns (uint);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20{\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) internal balances;\r\n  mapping (address => mapping (address => uint)) internal allowed;\r\n\r\n  uint internal totalSupply_;\r\n\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() external view returns (uint) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value The amount of tokens to be transferred\r\n   */\r\n  function transfer_(address _from, address _to, uint _value) internal returns (bool) {\r\n    if(_from != _to) {\r\n      uint _bfrom = balances[_from];\r\n      uint _bto = balances[_to];\r\n      require(_to != address(0));\r\n      require(_value <= _bfrom);\r\n      balances[_from] = _bfrom.sub(_value);\r\n      balances[_to] = _bto.add(_value);\r\n    }\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) external returns (bool) {\r\n    return transfer_(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) external returns (bool) {\r\n    uint _allowed = allowed[_from][msg.sender];\r\n    require(_value <= _allowed);\r\n    allowed[_from][msg.sender] = _allowed.sub(_value);\r\n    return transfer_(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) external view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) external returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) external view returns (uint) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) external returns (bool) {\r\n    uint _allowed = allowed[msg.sender][_spender];\r\n    _allowed = _allowed.add(_addedValue);\r\n    allowed[msg.sender][_spender] = _allowed;\r\n    emit Approval(msg.sender, _spender, _allowed);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool) {\r\n    uint _allowed = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > _allowed) {\r\n      _allowed = 0;\r\n    } else {\r\n      _allowed = _allowed.sub(_subtractedValue);\r\n    }\r\n    allowed[msg.sender][_spender] = _allowed;\r\n    emit Approval(msg.sender, _spender, _allowed);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Mediatoken is ERC20, MultiOwnable {\r\n  using SafeMath for uint;\r\n  uint constant DECIMAL_MULTIPLIER = 10 ** 18;\r\n  string public name = \"Aitanasecret insta mediatoken utility token\";\r\n  string public symbol = \"@Aitanasecret_mediatoken\";\r\n  uint8 public decimals = 18;\r\n\r\n  uint mintSupply_;\r\n\r\n  \r\n  function mint_(address _for, uint _value) internal returns(bool) {\r\n    require (mintSupply_ >= _value);\r\n    mintSupply_ = mintSupply_.sub(_value);\r\n    balances[_for] = balances[_for].add(_value);\r\n    totalSupply_ = totalSupply_.add(_value);\r\n    emit Transfer(address(0), _for, _value);\r\n    return true;\r\n  }\r\n\r\n  function mint(address _for, uint _value) external onlyOwner returns(bool) {\r\n    return mint_(_for, _value);\r\n  }\r\n  \r\n  \r\n  function mintSupply() external view returns(uint) {\r\n    return mintSupply_;\r\n  }\r\n\r\n  constructor() public {\r\n    mintSupply_ = 2000 * DECIMAL_MULTIPLIER;\r\n    addOwner_(0x47FC2e245b983A92EB3359F06E31F34B107B6EF6);\r\n    addOwner_(msg.sender);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemoveOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Mediatoken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d7b9bade30f5e62531f8b82f00d2b2ce84b2991d8f75ce08f6dd4cb381d6d1ab"}]}