{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract CryptoFishing {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address lastBonusPlayer;\r\n    uint256 lastBonusAmount;\r\n    \r\n    address owner;\r\n    \r\n    event finishFishing(address player, uint256 awardAmount, uint awardType);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function getLastBonus() public view returns (address, uint256) {\r\n        return (lastBonusPlayer, lastBonusAmount);\r\n    }\r\n    \r\n    function randomBonus(uint256 a, uint256 b, uint256 fee) private view returns (uint256) {\r\n        uint256 bonus = randomRange(a, b) * fee / 10;\r\n        return bonus;\r\n    }\r\n    \r\n    function calcBonus(uint poolType, uint256 fee) private view returns (uint256, uint) {\r\n        uint256 rn = random() % 1000000;\r\n        \r\n        uint256 bonus = 0;\r\n        uint fishId = 0;\r\n        \r\n        if(rn <= 100) {\r\n            uint256 total = address(this).balance;\r\n            bonus = total.div(2);\r\n            fishId = 90001;\r\n        } else if(poolType == 1) {\r\n            if(rn < 200000) {\r\n                bonus = 0;\r\n                fishId = 0;\r\n            } else if(rn < 400000) {\r\n                bonus = randomBonus(1, 5, fee);\r\n                fishId = 10001;\r\n            } else if(rn < 550000) {\r\n                bonus = randomBonus(6, 10, fee);\r\n                fishId = 10002;\r\n            } else if(rn < 750000) {\r\n                bonus = randomBonus(11, 11, fee);\r\n                fishId = 10003;\r\n            } else if(rn < 878000) {\r\n                bonus = randomBonus(12, 12, fee);\r\n                fishId = 10004;\r\n            } else if(rn < 928000) {\r\n                bonus = randomBonus(13, 13, fee);\r\n                fishId = 10005;\r\n            } else if(rn < 948000) {\r\n                bonus = randomBonus(14, 14, fee);\r\n                fishId = 10006;\r\n            } else if(rn < 958000) {\r\n                bonus = randomBonus(15, 15, fee);\r\n                fishId = 10007;\r\n            } else if(rn < 961000) {\r\n                bonus = randomBonus(16, 20, fee);\r\n                fishId = 10008;\r\n            } else if(rn < 971000) {\r\n                bonus = randomBonus(21, 30, fee);\r\n                fishId = 10009;\r\n            } else if(rn < 981000) {\r\n                bonus = randomBonus(31, 40, fee);\r\n                fishId = 10010;\r\n            } else if(rn < 986000) {\r\n                bonus = randomBonus(41, 50, fee);\r\n                fishId = 10011;\r\n            } else if(rn < 990000) {\r\n                bonus = randomBonus(51, 60, fee);\r\n                fishId = 10012; \r\n            } else if(rn < 994000) {\r\n                bonus = randomBonus(61, 70, fee);\r\n                fishId = 10013; \r\n            } else if(rn < 997000) {\r\n                bonus = randomBonus(71, 80, fee);\r\n                fishId = 10014; \r\n            } else if(rn < 999000) {\r\n                bonus = randomBonus(81, 90, fee);\r\n                fishId = 10015; \r\n            } else if(rn < 1000000) {\r\n                bonus = randomBonus(91, 100, fee);\r\n                fishId = 10016; \r\n            }\r\n        } else if(poolType == 2) {   \r\n            if(rn < 100000) {\r\n                bonus = 0;\r\n                fishId = 0;\r\n            } else if(rn < 300000) {\r\n                bonus = randomBonus(1, 5, fee);\r\n                fishId = 20001;\r\n            } else if(rn < 543000) {\r\n                bonus = randomBonus(6, 10, fee);\r\n                fishId = 20002;\r\n            } else if(rn < 743000) {\r\n                bonus = randomBonus(11, 11, fee);\r\n                fishId = 20003;\r\n            } else if(rn < 893000) {\r\n                bonus = randomBonus(12, 12, fee);\r\n                fishId = 20004;\r\n            } else if(rn < 963000) {\r\n                bonus = randomBonus(13, 13, fee);\r\n                fishId = 20005;\r\n            } else if(rn < 983000) {\r\n                bonus = randomBonus(14, 14, fee);\r\n                fishId = 20006;\r\n            } else if(rn < 993000) {\r\n                bonus = randomBonus(15, 15, fee);\r\n                fishId = 20007;\r\n            } else if(rn < 996000) {\r\n                bonus = randomBonus(16, 20, fee);\r\n                fishId = 20008;\r\n            } else if(rn < 997000) {\r\n                bonus = randomBonus(21, 50, fee);\r\n                fishId = 20009;\r\n            } else if(rn < 998000) {\r\n                bonus = randomBonus(51, 100, fee);\r\n                fishId = 20010;\r\n            } else if(rn < 998800) {\r\n                bonus = randomBonus(101, 150, fee);\r\n                fishId = 20011;\r\n            } else if(rn < 999100) {\r\n                bonus = randomBonus(151, 200, fee);\r\n                fishId = 20012;\r\n            } else if(rn < 999300) {\r\n                bonus = randomBonus(201, 250, fee);\r\n                fishId = 20013;\r\n            } else if(rn < 999500) {\r\n                bonus = randomBonus(251, 300, fee);\r\n                fishId = 20014;\r\n            } else if(rn < 999700) {\r\n                bonus = randomBonus(301, 350, fee);\r\n                fishId = 20015;\r\n            } else if(rn < 999800) {\r\n                bonus = randomBonus(351, 400, fee);\r\n                fishId = 20016;\r\n            } else if(rn < 999900) {\r\n                bonus = randomBonus(401, 450, fee);\r\n                fishId = 20017;\r\n            } else if(rn < 1000000) {\r\n                bonus = randomBonus(451, 500, fee);\r\n                fishId = 20018;\r\n            } \r\n        } else if(poolType == 3) {     \r\n            if(rn < 300000) {\r\n                bonus = randomBonus(1, 5, fee);\r\n                fishId = 30001;\r\n            } else if(rn < 600000) {\r\n                bonus = randomBonus(6, 10, fee);\r\n                fishId = 30002;\r\n            } else if(rn < 800000) {\r\n                bonus = randomBonus(11, 11, fee);\r\n                fishId = 30003;\r\n            } else if(rn < 917900) {\r\n                bonus = randomBonus(12, 12, fee);\r\n                fishId = 30004;\r\n            } else if(rn < 967900) {\r\n                bonus = randomBonus(13, 13, fee);\r\n                fishId = 30005;\r\n            } else if(rn < 982900) {\r\n                bonus = randomBonus(14, 14, fee);\r\n                fishId = 30006;\r\n            } else if(rn < 989900) {\r\n                bonus = randomBonus(15, 15, fee);\r\n                fishId = 30007;\r\n            } else if(rn < 993900) {\r\n                bonus = randomBonus(16, 20, fee);\r\n                fishId = 30008;\r\n            } else if(rn < 995900) {\r\n                bonus = randomBonus(21, 50, fee);\r\n                fishId = 30009;\r\n            } else if(rn < 997900) {\r\n                bonus = randomBonus(51, 100, fee);\r\n                fishId = 30010;\r\n            } else if(rn < 998200) {\r\n                bonus = randomBonus(101, 150, fee);\r\n                fishId = 30011;\r\n            } else if(rn < 998500) {\r\n                bonus = randomBonus(151, 200, fee);\r\n                fishId = 30012;\r\n            } else if(rn < 998700) {\r\n                bonus = randomBonus(201, 250, fee);\r\n                fishId = 30013;\r\n            } else if(rn < 998900) {\r\n                bonus = randomBonus(251, 300, fee);\r\n                fishId = 30014;\r\n            } else if(rn < 999100) {\r\n                bonus = randomBonus(301, 350, fee);\r\n                fishId = 30015;\r\n            } else if(rn < 999200) {\r\n                bonus = randomBonus(351, 400, fee);\r\n                fishId = 30016;\r\n            } else if(rn < 999300) {\r\n                bonus = randomBonus(401, 450, fee);\r\n                fishId = 30017;\r\n            } else if(rn < 999400) {\r\n                bonus = randomBonus(451, 500, fee);\r\n                fishId = 30018;\r\n            } else if(rn < 999500) {\r\n                bonus = randomBonus(501, 550, fee);\r\n                fishId = 30019;\r\n            } else if(rn < 999600) {\r\n                bonus = randomBonus(551, 600, fee);\r\n                fishId = 30020;\r\n            } else if(rn < 999650) {\r\n                bonus = randomBonus(601, 650, fee);\r\n                fishId = 30021;\r\n            } else if(rn < 999700) {\r\n                bonus = randomBonus(651, 700, fee);\r\n                fishId = 30022;\r\n            } else if(rn < 999750) {\r\n                bonus = randomBonus(701, 750, fee);\r\n                fishId = 30023;\r\n            } else if(rn < 999800) {\r\n                bonus = randomBonus(751, 800, fee);\r\n                fishId = 30024;\r\n            } else if(rn < 999850) {\r\n                bonus = randomBonus(801, 850, fee);\r\n                fishId = 30025;\r\n            } else if(rn < 999900) {\r\n                bonus = randomBonus(851, 900, fee);\r\n                fishId = 30026;\r\n            } else if(rn < 999950) {\r\n                bonus = randomBonus(901, 950, fee);\r\n                fishId = 30027;\r\n            } else if(rn < 1000000) {\r\n                bonus = randomBonus(951, 1000, fee);\r\n                fishId = 30028;\r\n            }\r\n        }\r\n        \r\n        return (bonus, fishId);\r\n    }\r\n        \r\n    function doFishing(uint poolType) public payable {\r\n        uint256 fee = msg.value;\r\n        \r\n        require( (poolType == 1 && fee == 0.05 ether)\r\n                  || (poolType == 2 && fee == 0.25 ether)\r\n                  || (poolType == 3 && fee == 0.5 ether)\r\n                  , 'error eth amount');\r\n        \r\n        uint256 reserveFee = fee.div(20);\r\n        owner.transfer(reserveFee);\r\n        \r\n        uint256 bonus;\r\n        uint fishId;\r\n        \r\n        (bonus,fishId) = calcBonus(poolType, fee);\r\n        \r\n        uint256 nowBalance = address(this).balance;\r\n        \r\n        uint256 minRemain = uint256(0.1 ether);\r\n\r\n        if(bonus + minRemain > nowBalance) {\r\n            if(nowBalance > minRemain) {\r\n                bonus = nowBalance - minRemain;\r\n            } else {\r\n                bonus = 0;\r\n            }\r\n        }\r\n        \r\n        if(bonus > 0) {\r\n            lastBonusPlayer = msg.sender;\r\n            lastBonusAmount = bonus;\r\n            msg.sender.transfer(bonus);\r\n        }\r\n        \r\n        emit finishFishing(msg.sender, bonus, fishId);\r\n    }\r\n    \r\n    function charge() public payable {\r\n    }\r\n    \r\n    function randomRange(uint256 a, uint256 b) private view returns (uint256) {\r\n        assert(a <= b);\r\n        uint256 rn = random();\r\n        return a + rn % (b - a + 1);\r\n    } \r\n    \r\n    function random() private view returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, lastBonusPlayer, lastBonusAmount)));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"poolType\",\"type\":\"uint256\"}],\"name\":\"doFishing\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"charge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"awardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"awardType\",\"type\":\"uint256\"}],\"name\":\"finishFishing\",\"type\":\"event\"}]","ContractName":"CryptoFishing","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://977728de945be6f2934f46faac23d2b26ebe567e4452aad5a0bc4aaefce04a7e"}]}