{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * RatesProvider.sol\r\n * Provides rates, conversion methods and tools for ETH and CHF currencies.\r\n\r\n * The unflattened code is available through this github tag:\r\n * https://github.com/MtPelerin/MtPelerin-protocol/tree/etherscan-verify-batch-1\r\n\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n\r\n * @notice All matters regarding the intellectual property of this code \r\n * @notice or software are subject to Swiss Law without reference to its \r\n * @notice conflicts of law rules.\r\n\r\n * @notice License for each contract is available in the respective file\r\n * @notice or in the LICENSE.md file.\r\n * @notice https://github.com/MtPelerin/\r\n\r\n * @notice Code by OpenZeppelin is copyrighted and licensed on their repository:\r\n * @notice https://github.com/OpenZeppelin/openzeppelin-solidity\r\n */\r\n\r\n\r\npragma solidity ^0.4.24;\r\n\r\n// File: contracts/zeppelin/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/interface/IRatesProvider.sol\r\n\r\n/**\r\n * @title IRatesProvider\r\n * @dev IRatesProvider interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n *\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice Please refer to the top of this file for the license.\r\n */\r\ncontract IRatesProvider {\r\n  function rateWEIPerCHFCent() public view returns (uint256);\r\n  function convertWEIToCHFCent(uint256 _amountWEI)\r\n    public view returns (uint256);\r\n\r\n  function convertCHFCentToWEI(uint256 _amountCHFCent)\r\n    public view returns (uint256);\r\n}\r\n\r\n// File: contracts/zeppelin/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Authority.sol\r\n\r\n/**\r\n * @title Authority\r\n * @dev The Authority contract has an authority address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * Authority means to represent a legal entity that is entitled to specific rights\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n *\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice Please refer to the top of this file for the license.\r\n *\r\n * Error messages\r\n * AU01: Message sender must be an authority\r\n */\r\ncontract Authority is Ownable {\r\n\r\n  address authority;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the authority.\r\n   */\r\n  modifier onlyAuthority {\r\n    require(msg.sender == authority, \"AU01\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev return the address associated to the authority\r\n   */\r\n  function authorityAddress() public view returns (address) {\r\n    return authority;\r\n  }\r\n\r\n  /**\r\n   * @dev rdefines an authority\r\n   * @param _name the authority name\r\n   * @param _address the authority address.\r\n   */\r\n  function defineAuthority(string _name, address _address) public onlyOwner {\r\n    emit AuthorityDefined(_name, _address);\r\n    authority = _address;\r\n  }\r\n\r\n  event AuthorityDefined(\r\n    string name,\r\n    address _address\r\n  );\r\n}\r\n\r\n// File: contracts/RatesProvider.sol\r\n\r\n/**\r\n * @title RatesProvider\r\n * @dev RatesProvider interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n *\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice Please refer to the top of this file for the license.\r\n *\r\n * Error messages\r\n */\r\ncontract RatesProvider is IRatesProvider, Authority {\r\n  using SafeMath for uint256;\r\n\r\n  // WEICHF rate is in ETH_wei/CHF_cents with no fractional parts\r\n  uint256 public rateWEIPerCHFCent;\r\n\r\n  /**\r\n   * @dev constructor\r\n   */\r\n  constructor() public {\r\n  }\r\n\r\n  /**\r\n   * @dev convert rate from ETHCHF to WEICents\r\n   */\r\n  function convertRateFromETHCHF(\r\n    uint256 _rateETHCHF,\r\n    uint256 _rateETHCHFDecimal)\r\n    public pure returns (uint256)\r\n  {\r\n    if (_rateETHCHF == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return uint256(\r\n      10**(_rateETHCHFDecimal.add(18 - 2))\r\n    ).div(_rateETHCHF);\r\n  }\r\n\r\n  /**\r\n   * @dev convert rate from WEICents to ETHCHF\r\n   */\r\n  function convertRateToETHCHF(\r\n    uint256 _rateWEIPerCHFCent,\r\n    uint256 _rateETHCHFDecimal)\r\n    public pure returns (uint256)\r\n  {\r\n    if (_rateWEIPerCHFCent == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return uint256(\r\n      10**(_rateETHCHFDecimal.add(18 - 2))\r\n    ).div(_rateWEIPerCHFCent);\r\n  }\r\n\r\n  /**\r\n   * @dev convert CHF to ETH\r\n   */\r\n  function convertCHFCentToWEI(uint256 _amountCHFCent)\r\n    public view returns (uint256)\r\n  {\r\n    return _amountCHFCent.mul(rateWEIPerCHFCent);\r\n  }\r\n\r\n  /**\r\n   * @dev convert ETH to CHF\r\n   */\r\n  function convertWEIToCHFCent(uint256 _amountETH)\r\n    public view returns (uint256)\r\n  {\r\n    if (rateWEIPerCHFCent == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return _amountETH.div(rateWEIPerCHFCent);\r\n  }\r\n\r\n  /* Current ETHCHF rates */\r\n  function rateWEIPerCHFCent() public view returns (uint256) {\r\n    return rateWEIPerCHFCent;\r\n  }\r\n  \r\n  /**\r\n   * @dev rate ETHCHF\r\n   */\r\n  function rateETHCHF(uint256 _rateETHCHFDecimal)\r\n    public view returns (uint256)\r\n  {\r\n    return convertRateToETHCHF(rateWEIPerCHFCent, _rateETHCHFDecimal);\r\n  }\r\n\r\n  /**\r\n   * @dev define rate\r\n   */\r\n  function defineRate(uint256 _rateWEIPerCHFCent)\r\n    public onlyAuthority\r\n  {\r\n    rateWEIPerCHFCent = _rateWEIPerCHFCent;\r\n    emit Rate(currentTime(), _rateWEIPerCHFCent);\r\n  }\r\n\r\n  /**\r\n   * @dev define rate with decimals\r\n   */\r\n  function defineETHCHFRate(uint256 _rateETHCHF, uint256 _rateETHCHFDecimal)\r\n    public onlyAuthority\r\n  {\r\n    // The rate is inverted to maximize the decimals stored\r\n    defineRate(convertRateFromETHCHF(_rateETHCHF, _rateETHCHFDecimal));\r\n  }\r\n\r\n  /**\r\n   * @dev current time\r\n   */\r\n  function currentTime() private view returns (uint256) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return now;\r\n  }\r\n\r\n  event Rate(uint256 at, uint256 rateWEIPerCHFCent);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rateWEIPerCHFCent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateETHCHF\",\"type\":\"uint256\"},{\"name\":\"_rateETHCHFDecimal\",\"type\":\"uint256\"}],\"name\":\"defineETHCHFRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rateETHCHF\",\"type\":\"uint256\"},{\"name\":\"_rateETHCHFDecimal\",\"type\":\"uint256\"}],\"name\":\"convertRateFromETHCHF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"name\":\"convertWEIToCHFCent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rateWEIPerCHFCent\",\"type\":\"uint256\"},{\"name\":\"_rateETHCHFDecimal\",\"type\":\"uint256\"}],\"name\":\"convertRateToETHCHF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rateETHCHFDecimal\",\"type\":\"uint256\"}],\"name\":\"rateETHCHF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateWEIPerCHFCent\",\"type\":\"uint256\"}],\"name\":\"defineRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amountCHFCent\",\"type\":\"uint256\"}],\"name\":\"convertCHFCentToWEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"defineAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"at\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rateWEIPerCHFCent\",\"type\":\"uint256\"}],\"name\":\"Rate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AuthorityDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RatesProvider","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2c645df1f05a0e18423a145179b6a6b805195f867047265b38560ae6083d228a"}]}