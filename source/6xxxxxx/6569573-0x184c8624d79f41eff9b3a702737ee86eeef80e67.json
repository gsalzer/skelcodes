{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract EthMonsters {\r\n\r\n\taddress public owner;\r\n\r\n\r\n    event BuyMonsterEvent(\r\n        uint price\r\n    );\r\n\r\n\tuint public typesNumber = 0;\r\n\tuint public monstersNumber = 0;\r\n\tmapping (address => uint) public userMonstersCount;\r\n\tmapping (address => uint) goodContracts; \r\n    monster[] public monsters;\r\n   \tmapping (uint => address) public monsterToOwner;\r\n   \tmapping (address => uint) public userBalance;\r\n   \tmapping (address => uint[]) public userToMonsters;\r\n   \tuint public contractFees = 0;\r\n\t\r\n\tmonsterType[] public types;\r\n\r\n\tconstructor() public {\r\n      \towner = msg.sender;\r\n   \t}\r\n    \r\n\tmodifier onlyOwner { \r\n    \trequire(msg.sender == owner);\r\n    \t_;\r\n  \t}\r\n  \t\r\n  \tmodifier allowedContract { \r\n  \t    address contractAddress = msg.sender;\r\n  \t\trequire(goodContracts[contractAddress] == 1);\r\n  \t\t_;\r\n  \t}\r\n\r\n  \tstruct monsterType {\r\n  \t\tstring name;\r\n  \t\tuint currentPrice;\r\n  \t\tuint basePrice;\r\n  \t\tuint sales;\r\n  \t\tuint id;\r\n  \t\tuint maxPower;\r\n   \t}\r\n   \t\r\n   \tstruct monster {\r\n  \t\tstring name;\r\n  \t\tuint purchasePrice;\r\n  \t\tuint earnings;\r\n  \t\tuint monsterType;\r\n  \t\tuint id;\r\n  \t\tuint power;\r\n  \t\tuint exp;\r\n  \t\tuint eggs;\r\n  \t\tuint gen;\r\n  \t\taddress creator;\r\n  \t\taddress owner;\r\n  \t\tuint isEgg;\r\n   \t}\r\n\r\n    function random(uint min, uint max) private view returns (uint) {\r\n        return uint8(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty)))%(max-min+1))+min;\r\n    }\r\n    \r\n    function addGoodContract(address _con) public onlyOwner { //add address of a contract to be whitelisted\r\n\t\tgoodContracts[_con] = 1;\r\n\t}\r\n\r\n\tfunction removeGoodContract(address _con) public onlyOwner { //remove address of a contract from whitelist\r\n\t\tgoodContracts[_con] = 0;\r\n\t}\r\n\t\r\n\tfunction addExpToMonster(uint _id, uint amount) public allowedContract {\r\n\t    monsters[_id].exp += amount;\r\n\t}\r\n\t\r\n\tfunction transferMonster(uint _id, address newOwner) public allowedContract {\r\n\t    address oldOwner = monsterToOwner[_id];\r\n\t    uint[] memory oldUserMonsters = userToMonsters[oldOwner];\r\n\t    for(uint i=0; i<userMonstersCount[oldOwner]; i++) {\r\n\t        if(oldUserMonsters[i] == _id) {\r\n\t            oldUserMonsters[i] = oldUserMonsters[oldUserMonsters.length-1];\r\n\t            delete oldUserMonsters[oldUserMonsters.length-1];\r\n\t            userToMonsters[oldOwner] = oldUserMonsters;\r\n\t            userToMonsters[oldOwner].length--;\r\n\t            userToMonsters[newOwner].push(_id);\r\n\t            break;\r\n\t        }\r\n\t    }\r\n\t    userMonstersCount[oldOwner]--;\r\n\t    userMonstersCount[newOwner]++;\r\n\t    monsters[_id].owner = newOwner;\r\n\t    monsterToOwner[_id] = newOwner;\r\n\t}\r\n\t\r\n\tfunction hatchEgg(uint _id, uint _newPower) public allowedContract {\r\n\t    require(monsters[_id].isEgg == 1);\r\n\t    monsters[_id].isEgg = 0;\r\n\t    monsters[_id].power = _newPower;\r\n\t}\r\n\t\r\n\tfunction changeMonsterName(string _newName, uint _id) public allowedContract {\r\n\t    monsters[_id].name = _newName;\r\n\t}\r\n\r\n\t\r\n    function buyMonster(string _name, uint _type) public payable { //starts with 0; public function to buy a monsters \r\n\t\trequire(_type < typesNumber);\r\n\t\trequire(_type >= 0);\r\n\t\tif(msg.value < types[_type].currentPrice) { //if sent amount < the monster's price, the amount is added to the address's balance\r\n\t\t\tuserBalance[msg.sender] += msg.value;\r\n\t\t\temit BuyMonsterEvent(0);\r\n\t\t} else { //if the sent amount >= the kind's price, \r\n\t\t\tuserBalance[msg.sender] += (msg.value - types[_type].currentPrice);\r\n\t\t\tsendEarnings(_type);\r\n\t\t\tuint numberOfEggs = random(1, 3);\r\n\t\t\tfor(uint _i=0; _i<numberOfEggs; _i++)\r\n\t\t\t    createMonster(_name, _type, 1, msg.sender, 100, 0, 1);\r\n\t\t\tcreateMonster(_name, _type, 0, msg.sender, types[_type].maxPower, types[_type].currentPrice, 0);\r\n\t\t\temit BuyMonsterEvent(types[_type].currentPrice);\r\n\t\t\ttypes[_type].currentPrice += types[_type].basePrice;\r\n\t\t}\r\n\t\ttypes[_type].sales++;\r\n\t}\r\n\t\r\n\tfunction sendEarnings(uint _type) private { \r\n\t\trequire(_type < typesNumber);\r\n\t\trequire(_type >= 0);\r\n\t\tcontractFees += types[_type].basePrice;\r\n\t\tfor(uint _id=0; _id<monsters.length; _id++)\r\n \t\t\tif(monsters[_id].monsterType == _type && monsters[_id].gen == 0) {\r\n \t\t\t\tuserBalance[monsterToOwner[_id]] += types[_type].basePrice;\r\n \t\t\t\tmonsters[_id].earnings += types[_type].basePrice;\r\n \t\t\t}\r\n\t}\r\n\t\r\n\tfunction withdrawFees() public onlyOwner payable {\r\n\t    require(contractFees > 0);\r\n\t    uint amount = contractFees;\r\n\t    contractFees = 0;\r\n\t    msg.sender.transfer(amount);\r\n\t}\r\n\t\r\n\tfunction withdraw() public payable{\r\n\t    require(userBalance[msg.sender] > 0);\r\n\t    uint amount = userBalance[msg.sender];\r\n\t    userBalance[msg.sender] = 0;\r\n\t    msg.sender.transfer(amount);\r\n\t}\r\n\t\r\n    function createMonster(string _name, uint _type, uint _gen, address _owner, uint _power, uint _purchasePrice, uint _isEgg) private { \r\n\t\tmonsters.push(monster(_name, _purchasePrice, 0, _type, monstersNumber, _power, 0, 0 ,_gen ,_owner, _owner, _isEgg));\r\n\t\tmonsterToOwner[monstersNumber] = _owner;\r\n\t\tuserToMonsters[_owner].push(monstersNumber);\r\n\t\tmonstersNumber++;\r\n\t\tuserMonstersCount[_owner]++;\r\n\t}\r\n\t\r\n\tfunction getUserMonstersCount(address _address) public view returns(uint) {\r\n\t    return userMonstersCount[_address];\r\n\t}\r\n\t\r\n\tfunction getUserMonster(uint id, address _owner) public view returns (string, uint, uint, uint, uint, uint, uint, address, address) {\r\n\t    monster memory mon = monsters[userToMonsters[_owner][id]];\r\n\t\treturn (mon.name, mon.purchasePrice, mon.earnings, mon.gen, mon.monsterType, mon.power, mon.isEgg, mon.creator, mon.owner);\r\n\t}\r\n\t\r\n\tfunction getMonster(uint id) public view returns (string, uint, uint, uint, uint, uint, uint, address, address) {\r\n\t    monster memory mon = monsters[id];\r\n\t\treturn (mon.name, mon.purchasePrice, mon.earnings, mon.gen, mon.monsterType, mon.power, mon.isEgg, mon.creator, mon.owner);\r\n\t} \r\n\t\r\n   \tfunction addNewType(string _name, uint _basePrice, uint _maxPower) public onlyOwner { //add new kind\r\n\t\trequire(_maxPower > 0);\r\n\t\ttypes.push(monsterType(_name, _basePrice, _basePrice, 0, typesNumber, _maxPower));\r\n\t\ttypesNumber++;\r\n\t}\r\n\r\n\tfunction getType(uint id) public view returns (string, uint, uint, uint, uint, uint) {\r\n\t\treturn (types[id].name, types[id].currentPrice, types[id].basePrice, types[id].sales, types[id].id, types[id].maxPower);\r\n\t} \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferMonster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addExpToMonster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserMonstersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMonster\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_newPower\",\"type\":\"uint256\"}],\"name\":\"hatchEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_con\",\"type\":\"address\"}],\"name\":\"addGoodContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserMonster\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMonstersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"buyMonster\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monstersNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monsters\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"name\":\"earnings\",\"type\":\"uint256\"},{\"name\":\"monsterType\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"power\",\"type\":\"uint256\"},{\"name\":\"exp\",\"type\":\"uint256\"},{\"name\":\"eggs\",\"type\":\"uint256\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"isEgg\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monsterToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"types\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"sales\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"maxPower\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"typesNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_basePrice\",\"type\":\"uint256\"},{\"name\":\"_maxPower\",\"type\":\"uint256\"}],\"name\":\"addNewType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newName\",\"type\":\"string\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"changeMonsterName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_con\",\"type\":\"address\"}],\"name\":\"removeGoodContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToMonsters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BuyMonsterEvent\",\"type\":\"event\"}]","ContractName":"EthMonsters","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6cc9fca793fa63e8fafb1d028c6c8785c808574f770a3e66c3ca154f335fc422"}]}