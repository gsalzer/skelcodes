{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract SNPToken {\r\n\r\n  address admin;\r\n  address admin2=0xa4e81224fC73a9E095809e34f5324aa18fA2a412;\r\n\r\n  address saleContractICO=address(0);\r\n  string public name=\"skynavpro [SNP]\";\r\n  string public symbol=\"SNP\";\r\n  uint256 public totalSupply;\r\n  uint endOfICO = 1555323000; //April 15th 2019, 10:10 UTC\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 _value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _spender,\r\n    uint256 _value\r\n  );\r\n\r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => mapping(address => uint256)) public allowance;\r\n\r\n  constructor (uint256 _initialSupply) public {\r\n    admin=msg.sender;\r\n    balanceOf[msg.sender]=_initialSupply;\r\n    totalSupply = _initialSupply;\r\n    saleContractICO=address(0);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns(bool success){\r\n    require(balanceOf[msg.sender]>=_value, \"The balance of the sender is not high enough.\");\r\n\r\n    require((msg.sender == admin) || (msg.sender==admin2) || isTransferAllowedForEverybody()==true, \"Tokens can not be traded until the ICO is over.\");\r\n\r\n    balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], _value);\r\n    balanceOf[_to]=SafeMath.add(balanceOf[_to], _value);\r\n\r\n    emit Transfer(msg.sender, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns(bool success) {\r\n\r\n    allowance[msg.sender][_spender]=_value;\r\n\r\n    emit Approval(msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns(bool success){\r\n\r\n    require((msg.sender == admin) || (msg.sender==admin2) || isTransferAllowedForEverybody()==true, \"Tokens can not be traded until the ICO is over.\");\r\n\r\n    require(balanceOf[_from]>=_value, \"The balance of the sender is not high enough.\");\r\n    require(allowance[_from][msg.sender]>=_value, \"The allowance is not big enough.\");\r\n\r\n    allowance[_from][msg.sender]=SafeMath.sub(allowance[_from][msg.sender],_value);\r\n    balanceOf[_from]=SafeMath.sub(balanceOf[_from], _value);\r\n    balanceOf[_to]=SafeMath.add(balanceOf[_to],_value);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function isTransferAllowedForEverybody() private view returns (bool isAllowed) {\r\n\r\n    bool isICORunning;\r\n\r\n    if (now<endOfICO) { //end of ICO\r\n      isICORunning=true;\r\n    }\r\n    else {\r\n      isICORunning=false;\r\n    }\r\n\r\n    if (msg.sender==saleContractICO) {\r\n      return true;\r\n    }\r\n    else {\r\n      if (isICORunning==true) {\r\n        return false;\r\n      }\r\n      else {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  function burnSaleContractTokens(uint256 _value) public {\r\n\r\n    require((msg.sender == admin) || (msg.sender==admin2), \"Only admins can run this function.\");\r\n    require(_value <= balanceOf[saleContractICO], \"You can not burn more tokens than the available amount.\");\r\n\r\n    balanceOf[saleContractICO] = SafeMath.sub(balanceOf[saleContractICO],_value);\r\n    totalSupply = SafeMath.sub(totalSupply, _value);\r\n    emit Transfer(saleContractICO, address(0), _value);\r\n  }\r\n\r\n  function setSaleContractICOAddress(address _newSaleContractICO) public {\r\n    require((msg.sender == admin) || (msg.sender==admin2));\r\n    saleContractICO = _newSaleContractICO;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSaleContractICO\",\"type\":\"address\"}],\"name\":\"setSaleContractICOAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnSaleContractTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SNPToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000017d78400","Library":"","LicenseType":"None","SwarmSource":"bzzr://ebb5b033a5232f9514de1de0bb4dc4f7c4408fe468178a20a178646ee8f54608"}]}