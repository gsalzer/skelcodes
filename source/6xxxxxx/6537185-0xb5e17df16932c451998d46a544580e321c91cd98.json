{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: kuende-token/contracts/KuendeCoinToken.sol\r\n\r\n/**\r\n * @title KuendeCoinToken\r\n * @author https://bit-sentinel.com\r\n */\r\ncontract KuendeCoinToken is StandardToken, Ownable {\r\n  /**\r\n   * @dev event for logging enablement of transfers\r\n   */\r\n  event EnabledTransfers();\r\n\r\n  /**\r\n   * @dev event for logging crowdsale address set\r\n   * @param crowdsale address Address of the crowdsale\r\n   */\r\n  event SetCrowdsaleAddress(address indexed crowdsale);\r\n\r\n  // Address of the crowdsale.\r\n  address public crowdsale;\r\n\r\n  // Public variables of the Token.\r\n  string public name = \"KuendeCoin\"; \r\n  uint8 public decimals = 18;\r\n  string public symbol = \"KNC\";\r\n\r\n  // If the token is transferable or not.\r\n  bool public transferable = false;\r\n\r\n  /**\r\n   * @dev Initialize the KuendeCoinToken and transfer the initialBalance to the\r\n   *      contract creator. \r\n   */\r\n  constructor(address initialAccount, uint256 initialBalance) public {\r\n    totalSupply_ = initialBalance;\r\n    balances[initialAccount] = initialBalance;\r\n    emit Transfer(0x0, initialAccount, initialBalance);\r\n  }\r\n\r\n  /**\r\n   * @dev Ensure the transfer is valid.\r\n   */\r\n  modifier canTransfer() {\r\n    require(transferable || (crowdsale != address(0) && crowdsale == msg.sender));\r\n    _; \r\n  }\r\n\r\n  /**\r\n   * @dev Enable the transfers of this token. Can only be called once.\r\n   */\r\n  function enableTransfers() external onlyOwner {\r\n    require(!transferable);\r\n    transferable = true;\r\n    emit EnabledTransfers();\r\n  }\r\n\r\n  /**\r\n   * @dev Set the crowdsale address.\r\n   * @param _addr address\r\n   */\r\n  function setCrowdsaleAddress(address _addr) external onlyOwner {\r\n    require(_addr != address(0));\r\n    crowdsale = _addr;\r\n    emit SetCrowdsaleAddress(_addr);\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public canTransfer returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n}\r\n\r\n// File: contracts/KuendeCrowdsale.sol\r\n\r\n/**\r\n * @title KuendeCrowdsale\r\n * @author https://bit-sentinel.com\r\n * @dev Inspired by: https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts/crowdsale\r\n */\r\ncontract KuendeCrowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * @dev event for change wallet address logging\r\n   * @param newWallet address that got set\r\n   * @param oldWallet address that was changed from\r\n   */\r\n  event ChangedWalletAddress(address indexed newWallet, address indexed oldWallet);\r\n  \r\n  /**\r\n   * @dev event for token purchase logging\r\n   * @param investor who purchased tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed investor, uint256 value, uint256 amount);\r\n\r\n  // definition of an Investor\r\n  struct Investor {\r\n    uint256 weiBalance;    // Amount of invested wei (0 for PreInvestors)\r\n    uint256 tokenBalance;  // Amount of owned tokens\r\n    bool whitelisted;      // Flag for marking an investor as whitelisted\r\n    bool purchasing;       // Lock flag\r\n  }\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address that can whitelist new investors\r\n  address public registrar;\r\n\r\n  // wei to token exchange rate\r\n  uint256 public exchangeRate;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // token contract\r\n  KuendeCoinToken public token;\r\n\r\n  // crowdsale sale cap\r\n  uint256 public cap;\r\n\r\n  // crowdsale investor cap\r\n  uint256 public investorCap;\r\n\r\n  // minimum investment\r\n  uint256 public constant minInvestment = 100 finney;\r\n\r\n  // gas price limit. 100 gwei.\r\n  uint256 public constant gasPriceLimit = 1e11 wei;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  // storage for the investors repository\r\n  uint256 public numInvestors;\r\n  mapping (address => Investor) public investors;\r\n\r\n  /**\r\n   * @dev Create a new instance of the KuendeCrowdsale contract\r\n   * @param _startTime     uint256 Crowdsale start time timestamp in unix format.\r\n   * @param _endTime       uint256 Crowdsale end time timestamp in unix format.\r\n   * @param _cap           uint256 Hard cap in wei.\r\n   * @param _exchangeRate  uint256 1 token value in wei.\r\n   * @param _registrar     address Address that can whitelist investors.\r\n   * @param _wallet        address Address of the wallet that will collect the funds.\r\n   * @param _token         address Token smart contract address.\r\n   */\r\n  constructor (\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    uint256 _cap,\r\n    uint256 _exchangeRate,\r\n    address _registrar,\r\n    address _wallet,\r\n    address _token\r\n  )\r\n    public\r\n  {\r\n    // validate parameters\r\n    require(_startTime > now);\r\n    require(_endTime > _startTime);\r\n    require(_cap > 0);\r\n    require(_exchangeRate > 0);\r\n    require(_registrar != address(0));\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    // update storage\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    cap = _cap;\r\n    exchangeRate = _exchangeRate;\r\n    registrar = _registrar;\r\n    wallet = _wallet;\r\n    token = KuendeCoinToken(_token);\r\n  }\r\n\r\n  /**\r\n   * @dev Ensure the crowdsale is not started\r\n   */\r\n  modifier notStarted() { \r\n    require(now < startTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Ensure the crowdsale is not notEnded\r\n   */\r\n  modifier notEnded() { \r\n    require(now <= endTime);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Fallback function can be used to buy tokens\r\n   */\r\n  function () external payable {\r\n    buyTokens();\r\n  }\r\n\r\n  /**\r\n   * @dev Change the wallet address\r\n   * @param _wallet address\r\n   */\r\n  function changeWalletAddress(address _wallet) external notStarted onlyOwner {\r\n    // validate call against the rules\r\n    require(_wallet != address(0));\r\n    require(_wallet != wallet);\r\n\r\n    // update storage\r\n    address _oldWallet = wallet;\r\n    wallet = _wallet;\r\n\r\n    // trigger event\r\n    emit ChangedWalletAddress(_wallet, _oldWallet);\r\n  }\r\n\r\n  /**\r\n   * @dev Whitelist multiple investors at once\r\n   * @param addrs address[]\r\n   */\r\n  function whitelistInvestors(address[] addrs) external {\r\n    require(addrs.length > 0 && addrs.length <= 30);\r\n    for (uint i = 0; i < addrs.length; i++) {\r\n      whitelistInvestor(addrs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Whitelist a new investor\r\n   * @param addr address\r\n   */\r\n  function whitelistInvestor(address addr) public notEnded {\r\n    require((msg.sender == registrar || msg.sender == owner) && !limited());\r\n    if (!investors[addr].whitelisted && addr != address(0)) {\r\n      investors[addr].whitelisted = true;\r\n      numInvestors++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Low level token purchase function\r\n   */\r\n  function buyTokens() public payable {\r\n    // update investor cap.\r\n    updateInvestorCap();\r\n\r\n    address investor = msg.sender;\r\n\r\n    // validate purchase    \r\n    validPurchase();\r\n\r\n    // lock investor account\r\n    investors[investor].purchasing = true;\r\n\r\n    // get the msg wei amount\r\n    uint256 weiAmount = msg.value.sub(refundExcess());\r\n\r\n    // value after refunds should be greater or equal to minimum investment\r\n    require(weiAmount >= minInvestment);\r\n\r\n    // calculate token amount to be sold\r\n    uint256 tokens = weiAmount.mul(1 ether).div(exchangeRate);\r\n\r\n    // update storage\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    investors[investor].weiBalance = investors[investor].weiBalance.add(weiAmount);\r\n    investors[investor].tokenBalance = investors[investor].tokenBalance.add(tokens);\r\n\r\n    // transfer tokens\r\n    require(transfer(investor, tokens));\r\n\r\n    // trigger event\r\n    emit TokenPurchase(msg.sender, weiAmount, tokens);\r\n\r\n    // forward funds\r\n    wallet.transfer(weiAmount);\r\n\r\n    // unlock investor account\r\n    investors[investor].purchasing = false;\r\n  }\r\n\r\n  /**\r\n  * @dev Update the investor cap.\r\n  */\r\n  function updateInvestorCap() internal {\r\n    require(now >= startTime);\r\n\r\n    if (investorCap == 0) {\r\n      investorCap = cap.div(numInvestors);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Wrapper over token's transferFrom function. Ensures the call is valid.\r\n   * @param  to    address\r\n   * @param  value uint256\r\n   * @return bool\r\n   */\r\n  function transfer(address to, uint256 value) internal returns (bool) {\r\n    if (!(\r\n      token.allowance(owner, address(this)) >= value &&\r\n      token.balanceOf(owner) >= value &&\r\n      token.crowdsale() == address(this)\r\n    )) {\r\n      return false;\r\n    }\r\n    return token.transferFrom(owner, to, value);\r\n  }\r\n  \r\n  /**\r\n   * @dev Refund the excess weiAmount back to the investor so the caps aren't reached\r\n   * @return uint256 the weiAmount after refund\r\n   */\r\n  function refundExcess() internal returns (uint256 excess) {\r\n    uint256 weiAmount = msg.value;\r\n    address investor = msg.sender;\r\n\r\n    // calculate excess for investorCap\r\n    if (limited() && !withinInvestorCap(investor, weiAmount)) {\r\n      excess = investors[investor].weiBalance.add(weiAmount).sub(investorCap);\r\n      weiAmount = msg.value.sub(excess);\r\n    }\r\n\r\n    // calculate excess for crowdsale cap\r\n    if (!withinCap(weiAmount)) {\r\n      excess = excess.add(weiRaised.add(weiAmount).sub(cap));\r\n    }\r\n    \r\n    // refund and update weiAmount\r\n    if (excess > 0) {\r\n      investor.transfer(excess);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Validate the purchase. Reverts if purchase is invalid\r\n   */\r\n  function validPurchase() internal view {\r\n    require (msg.sender != address(0));           // valid investor address\r\n    require (tx.gasprice <= gasPriceLimit);       // tx gas price doesn't exceed limit\r\n    require (!investors[msg.sender].purchasing);  // investor not already purchasing\r\n    require (startTime <= now && now <= endTime); // within crowdsale period\r\n    require (investorCap != 0);                   // investor cap initialized\r\n    require (msg.value >= minInvestment);         // value should exceed or be equal to minimum investment\r\n    require (whitelisted(msg.sender));            // check if investor is whitelisted\r\n    require (withinCap(0));                       // check if purchase is within cap\r\n    require (withinInvestorCap(msg.sender, 0));   // check if purchase is within investor cap\r\n  }\r\n\r\n  /**\r\n   * @dev Check if by adding the provided _weiAmomunt the cap is not exceeded\r\n   * @param weiAmount uint256\r\n   * @return bool\r\n   */\r\n  function withinCap(uint256 weiAmount) internal view returns (bool) {\r\n    return weiRaised.add(weiAmount) <= cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Check if by adding the provided weiAmount to investor's account the investor\r\n   *      cap is not excedeed\r\n   * @param investor  address\r\n   * @param weiAmount uint256\r\n   * @return bool\r\n   */\r\n  function withinInvestorCap(address investor, uint256 weiAmount) internal view returns (bool) {\r\n    return limited() ? investors[investor].weiBalance.add(weiAmount) <= investorCap : true;\r\n  }\r\n\r\n  /**\r\n   * @dev Check if the given address is whitelisted for token purchases\r\n   * @param investor address\r\n   * @return bool\r\n   */\r\n  function whitelisted(address investor) internal view returns (bool) {\r\n    return investors[investor].whitelisted;\r\n  }\r\n\r\n  /**\r\n   * @dev Check if the crowdsale is limited\r\n   * @return bool\r\n   */\r\n  function limited() internal view returns (bool) {\r\n    return  startTime <= now && now < startTime.add(3 days);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"whitelistInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"weiBalance\",\"type\":\"uint256\"},{\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"name\":\"whitelisted\",\"type\":\"bool\"},{\"name\":\"purchasing\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPriceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"whitelistInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"name\":\"_registrar\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"ChangedWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"KuendeCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005bc91e80000000000000000000000000000000000000000000000000000000005bef59ff00000000000000000000000000000000000000000000040eaa6a15f824600000000000000000000000000000000000000000000000000000000012309ce540000000000000000000000000009c415d665008a3fdc028f67d6c0f543136eb6d5d0000000000000000000000009bdcd89d503db28a739df59030639433329ba79e000000000000000000000000df1338fbafe7af1789151627b886781ba556ef9a","Library":"","SwarmSource":"bzzr://a6a832400bd7b7e176bc5ba5885cbda060e0af9915434b1d52bdc20a1c289b41"}]}