{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Olympus {\r\n    using SafeMath for uint;\r\n    \r\n    address private constant supportAddress = 0x0bD47808d4A09aD155b00C39dBb101Fb71e1C0f0;\r\n    uint private constant supportPercent = 1;\r\n    \r\n    mapping(address => uint) private shares;\r\n    uint private totalShares;\r\n    uint private totalPersons;\r\n    \r\n    function getBalance(address _account) public constant returns (uint) {\r\n        if (totalShares == 0)\r\n            return 0;\r\n        uint contractBalance = address(this).balance;\r\n        uint profitPercent = calculateProfitPercent(contractBalance, totalPersons);\r\n        return contractBalance.mul(shares[_account]).mul(profitPercent).div(totalShares).div(100);\r\n    }\r\n    \r\n    function() public payable {\r\n        address sender = msg.sender;\r\n        uint amount = msg.value;\r\n        if (amount > 0) {\r\n            if (totalPersons > 10)\r\n                supportAddress.transfer(calculateSupportPercent(amount));\r\n            if (totalShares > 0)\r\n                amount = amount.mul(totalShares).div(address(this).balance.sub(amount));\r\n            if (shares[sender] == 0)\r\n                totalPersons++;\r\n            shares[sender] = shares[sender].add(amount);\r\n            totalShares = totalShares.add(amount);\r\n        } else {\r\n            amount = getBalance(sender);\r\n            totalShares = totalShares.sub(shares[sender]);\r\n            shares[sender] = 0;\r\n            totalPersons--;\r\n            uint percent = calculateSupportPercent(amount);\r\n            supportAddress.transfer(percent);\r\n            sender.transfer(amount - percent);\r\n            if (totalPersons == 0)\r\n                supportAddress.transfer(address(this).balance);\r\n        }\r\n    }\r\n    \r\n    function calculateProfitPercent(uint _balance, uint _totalPersons) private pure returns (uint) {\r\n        if (_balance >= 8e20 || _totalPersons == 1) // 800 ETH\r\n            return 95;\r\n        else if (_balance >= 4e20) // 400 ETH\r\n            return 94;\r\n        else if (_balance >= 2e20) // 200 ETH\r\n            return 93;\r\n        else if (_balance >= 1e20) // 100 ETH\r\n            return 92;\r\n        else if (_balance >= 5e19) // 50 ETH\r\n            return 91;\r\n        else\r\n            return 90;\r\n    }\r\n    \r\n    function calculateSupportPercent(uint _amount) private pure returns (uint) {\r\n        return _amount * supportPercent / 100;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Olympus","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5ed2602cee43741160ac2453ddc963a44466c6e82cdea05c261b02772cb4a0d1"}]}