{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract CrabData {\r\n  modifier crabDataLength(uint256[] memory _crabData) {\r\n    require(_crabData.length == 8);\r\n    _;\r\n  }\r\n\r\n  struct CrabPartData {\r\n    uint256 hp;\r\n    uint256 dps;\r\n    uint256 blockRate;\r\n    uint256 resistanceBonus;\r\n    uint256 hpBonus;\r\n    uint256 dpsBonus;\r\n    uint256 blockBonus;\r\n    uint256 mutiplierBonus;\r\n  }\r\n\r\n  function arrayToCrabPartData(\r\n    uint256[] _partData\r\n  ) \r\n    internal \r\n    pure \r\n    crabDataLength(_partData) \r\n    returns (CrabPartData memory _parsedData) \r\n  {\r\n    _parsedData = CrabPartData(\r\n      _partData[0],   // hp\r\n      _partData[1],   // dps\r\n      _partData[2],   // block rate\r\n      _partData[3],   // resistance bonus\r\n      _partData[4],   // hp bonus\r\n      _partData[5],   // dps bonus\r\n      _partData[6],   // block bonus\r\n      _partData[7]);  // multiplier bonus\r\n  }\r\n\r\n  function crabPartDataToArray(CrabPartData _crabPartData) internal pure returns (uint256[] memory _resultData) {\r\n    _resultData = new uint256[](8);\r\n    _resultData[0] = _crabPartData.hp;\r\n    _resultData[1] = _crabPartData.dps;\r\n    _resultData[2] = _crabPartData.blockRate;\r\n    _resultData[3] = _crabPartData.resistanceBonus;\r\n    _resultData[4] = _crabPartData.hpBonus;\r\n    _resultData[5] = _crabPartData.dpsBonus;\r\n    _resultData[6] = _crabPartData.blockBonus;\r\n    _resultData[7] = _crabPartData.mutiplierBonus;\r\n  }\r\n}\r\n\r\ncontract GeneSurgeon {\r\n  //0 - filler, 1 - body, 2 - leg, 3 - left claw, 4 - right claw\r\n  uint256[] internal crabPartMultiplier = [0, 10**9, 10**6, 10**3, 1];\r\n\r\n  function extractElementsFromGene(uint256 _gene) internal view returns (uint256[] memory _elements) {\r\n    _elements = new uint256[](4);\r\n    _elements[0] = _gene / crabPartMultiplier[1] / 100 % 10;\r\n    _elements[1] = _gene / crabPartMultiplier[2] / 100 % 10;\r\n    _elements[2] = _gene / crabPartMultiplier[3] / 100 % 10;\r\n    _elements[3] = _gene / crabPartMultiplier[4] / 100 % 10;\r\n  }\r\n\r\n  function extractPartsFromGene(uint256 _gene) internal view returns (uint256[] memory _parts) {\r\n    _parts = new uint256[](4);\r\n    _parts[0] = _gene / crabPartMultiplier[1] % 100;\r\n    _parts[1] = _gene / crabPartMultiplier[2] % 100;\r\n    _parts[2] = _gene / crabPartMultiplier[3] % 100;\r\n    _parts[3] = _gene / crabPartMultiplier[4] % 100;\r\n  }\r\n}\r\n\r\ninterface GenesisCrabInterface {\r\n  function generateCrabGene(bool isPresale, bool hasLegendaryPart) external returns (uint256 _gene, uint256 _skin, uint256 _heartValue, uint256 _growthValue);\r\n  function mutateCrabPart(uint256 _part, uint256 _existingPartGene, uint256 _legendaryPercentage) external view returns (uint256);\r\n  function generateCrabHeart() external view returns (uint256, uint256);\r\n}\r\n\r\ncontract Randomable {\r\n  // Generates a random number base on last block hash\r\n  function _generateRandom(bytes32 seed) view internal returns (bytes32) {\r\n    return keccak256(abi.encodePacked(blockhash(block.number-1), seed));\r\n  }\r\n\r\n  function _generateRandomNumber(bytes32 seed, uint256 max) view internal returns (uint256) {\r\n    return uint256(_generateRandom(seed)) % max;\r\n  }\r\n}\r\n\r\ncontract CryptantCrabStoreInterface {\r\n  function createAddress(bytes32 key, address value) external returns (bool);\r\n  function createAddresses(bytes32[] keys, address[] values) external returns (bool);\r\n  function updateAddress(bytes32 key, address value) external returns (bool);\r\n  function updateAddresses(bytes32[] keys, address[] values) external returns (bool);\r\n  function removeAddress(bytes32 key) external returns (bool);\r\n  function removeAddresses(bytes32[] keys) external returns (bool);\r\n  function readAddress(bytes32 key) external view returns (address);\r\n  function readAddresses(bytes32[] keys) external view returns (address[]);\r\n  // Bool related functions\r\n  function createBool(bytes32 key, bool value) external returns (bool);\r\n  function createBools(bytes32[] keys, bool[] values) external returns (bool);\r\n  function updateBool(bytes32 key, bool value) external returns (bool);\r\n  function updateBools(bytes32[] keys, bool[] values) external returns (bool);\r\n  function removeBool(bytes32 key) external returns (bool);\r\n  function removeBools(bytes32[] keys) external returns (bool);\r\n  function readBool(bytes32 key) external view returns (bool);\r\n  function readBools(bytes32[] keys) external view returns (bool[]);\r\n  // Bytes32 related functions\r\n  function createBytes32(bytes32 key, bytes32 value) external returns (bool);\r\n  function createBytes32s(bytes32[] keys, bytes32[] values) external returns (bool);\r\n  function updateBytes32(bytes32 key, bytes32 value) external returns (bool);\r\n  function updateBytes32s(bytes32[] keys, bytes32[] values) external returns (bool);\r\n  function removeBytes32(bytes32 key) external returns (bool);\r\n  function removeBytes32s(bytes32[] keys) external returns (bool);\r\n  function readBytes32(bytes32 key) external view returns (bytes32);\r\n  function readBytes32s(bytes32[] keys) external view returns (bytes32[]);\r\n  // uint256 related functions\r\n  function createUint256(bytes32 key, uint256 value) external returns (bool);\r\n  function createUint256s(bytes32[] keys, uint256[] values) external returns (bool);\r\n  function updateUint256(bytes32 key, uint256 value) external returns (bool);\r\n  function updateUint256s(bytes32[] keys, uint256[] values) external returns (bool);\r\n  function removeUint256(bytes32 key) external returns (bool);\r\n  function removeUint256s(bytes32[] keys) external returns (bool);\r\n  function readUint256(bytes32 key) external view returns (uint256);\r\n  function readUint256s(bytes32[] keys) external view returns (uint256[]);\r\n  // int256 related functions\r\n  function createInt256(bytes32 key, int256 value) external returns (bool);\r\n  function createInt256s(bytes32[] keys, int256[] values) external returns (bool);\r\n  function updateInt256(bytes32 key, int256 value) external returns (bool);\r\n  function updateInt256s(bytes32[] keys, int256[] values) external returns (bool);\r\n  function removeInt256(bytes32 key) external returns (bool);\r\n  function removeInt256s(bytes32[] keys) external returns (bool);\r\n  function readInt256(bytes32 key) external view returns (int256);\r\n  function readInt256s(bytes32[] keys) external view returns (int256[]);\r\n  // internal functions\r\n  function parseKey(bytes32 key) internal pure returns (bytes32);\r\n  function parseKeys(bytes32[] _keys) internal pure returns (bytes32[]);\r\n}\r\n\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract CryptantCrabBase is Ownable {\r\n  GenesisCrabInterface public genesisCrab;\r\n  CryptantCrabNFT public cryptantCrabToken;\r\n  CryptantCrabStoreInterface public cryptantCrabStorage;\r\n\r\n  constructor(address _genesisCrabAddress, address _cryptantCrabTokenAddress, address _cryptantCrabStorageAddress) public {\r\n    // constructor\r\n    \r\n    _setAddresses(_genesisCrabAddress, _cryptantCrabTokenAddress, _cryptantCrabStorageAddress);\r\n  }\r\n\r\n  function setAddresses(\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress\r\n  ) \r\n  external onlyOwner {\r\n    _setAddresses(_genesisCrabAddress, _cryptantCrabTokenAddress, _cryptantCrabStorageAddress);\r\n  }\r\n\r\n  function _setAddresses(\r\n    address _genesisCrabAddress,\r\n    address _cryptantCrabTokenAddress,\r\n    address _cryptantCrabStorageAddress\r\n  )\r\n  internal \r\n  {\r\n    if(_genesisCrabAddress != address(0)) {\r\n      GenesisCrabInterface genesisCrabContract = GenesisCrabInterface(_genesisCrabAddress);\r\n      genesisCrab = genesisCrabContract;\r\n    }\r\n    \r\n    if(_cryptantCrabTokenAddress != address(0)) {\r\n      CryptantCrabNFT cryptantCrabTokenContract = CryptantCrabNFT(_cryptantCrabTokenAddress);\r\n      cryptantCrabToken = cryptantCrabTokenContract;\r\n    }\r\n    \r\n    if(_cryptantCrabStorageAddress != address(0)) {\r\n      CryptantCrabStoreInterface cryptantCrabStorageContract = CryptantCrabStoreInterface(_cryptantCrabStorageAddress);\r\n      cryptantCrabStorage = cryptantCrabStorageContract;\r\n    }\r\n  }\r\n}\r\n\r\ncontract CryptantCrabInformant is CryptantCrabBase{\r\n  constructor\r\n  (\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress\r\n  ) \r\n  public \r\n  CryptantCrabBase\r\n  (\r\n    _genesisCrabAddress, \r\n    _cryptantCrabTokenAddress, \r\n    _cryptantCrabStorageAddress\r\n  ) {\r\n    // constructor\r\n\r\n  }\r\n\r\n  function _getCrabData(uint256 _tokenId) internal view returns \r\n  (\r\n    uint256 _gene, \r\n    uint256 _level, \r\n    uint256 _exp, \r\n    uint256 _mutationCount,\r\n    uint256 _trophyCount,\r\n    uint256 _heartValue,\r\n    uint256 _growthValue\r\n  ) {\r\n    require(cryptantCrabStorage != address(0));\r\n\r\n    bytes32[] memory keys = new bytes32[](7);\r\n    uint256[] memory values;\r\n\r\n    keys[0] = keccak256(abi.encodePacked(_tokenId, \"gene\"));\r\n    keys[1] = keccak256(abi.encodePacked(_tokenId, \"level\"));\r\n    keys[2] = keccak256(abi.encodePacked(_tokenId, \"exp\"));\r\n    keys[3] = keccak256(abi.encodePacked(_tokenId, \"mutationCount\"));\r\n    keys[4] = keccak256(abi.encodePacked(_tokenId, \"trophyCount\"));\r\n    keys[5] = keccak256(abi.encodePacked(_tokenId, \"heartValue\"));\r\n    keys[6] = keccak256(abi.encodePacked(_tokenId, \"growthValue\"));\r\n\r\n    values = cryptantCrabStorage.readUint256s(keys);\r\n\r\n    // process heart value\r\n    uint256 _processedHeartValue;\r\n    for(uint256 i = 1 ; i <= 1000 ; i *= 10) {\r\n      if(uint256(values[5]) / i % 10 > 0) {\r\n        _processedHeartValue += i;\r\n      }\r\n    }\r\n\r\n    _gene = values[0];\r\n    _level = values[1];\r\n    _exp = values[2];\r\n    _mutationCount = values[3];\r\n    _trophyCount = values[4];\r\n    _heartValue = _processedHeartValue;\r\n    _growthValue = values[6];\r\n  }\r\n\r\n  function _geneOfCrab(uint256 _tokenId) internal view returns (uint256 _gene) {\r\n    require(cryptantCrabStorage != address(0));\r\n\r\n    _gene = cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_tokenId, \"gene\")));\r\n  }\r\n}\r\n\r\ncontract CryptantCrabPurchasable is CryptantCrabInformant {\r\n  using SafeMath for uint256;\r\n\r\n  event CrabHatched(address indexed owner, uint256 tokenId, uint256 gene, uint256 specialSkin, uint256 crabPrice, uint256 growthValue);\r\n  event CryptantFragmentsAdded(address indexed cryptantOwner, uint256 amount, uint256 newBalance);\r\n  event CryptantFragmentsRemoved(address indexed cryptantOwner, uint256 amount, uint256 newBalance);\r\n  event Refund(address indexed refundReceiver, uint256 reqAmt, uint256 paid, uint256 refundAmt);\r\n\r\n  constructor\r\n  (\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress\r\n  ) \r\n  public \r\n  CryptantCrabInformant\r\n  (\r\n    _genesisCrabAddress, \r\n    _cryptantCrabTokenAddress, \r\n    _cryptantCrabStorageAddress\r\n  ) {\r\n    // constructor\r\n\r\n  }\r\n\r\n  function getCryptantFragments(address _sender) public view returns (uint256) {\r\n    return cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_sender, \"cryptant\")));\r\n  }\r\n\r\n  function createCrab(uint256 _customTokenId, uint256 _crabPrice, uint256 _customGene, uint256 _customSkin, uint256 _customHeart, bool _hasLegendary) external onlyOwner {\r\n    return _createCrab(false, _customTokenId, _crabPrice, _customGene, _customSkin, _customHeart, _hasLegendary);\r\n  }\r\n\r\n  function _addCryptantFragments(address _cryptantOwner, uint256 _amount) internal returns (uint256 _newBalance) {\r\n    _newBalance = getCryptantFragments(_cryptantOwner).add(_amount);\r\n    cryptantCrabStorage.updateUint256(keccak256(abi.encodePacked(_cryptantOwner, \"cryptant\")), _newBalance);\r\n    emit CryptantFragmentsAdded(_cryptantOwner, _amount, _newBalance);\r\n  }\r\n\r\n  function _removeCryptantFragments(address _cryptantOwner, uint256 _amount) internal returns (uint256 _newBalance) {\r\n    _newBalance = getCryptantFragments(_cryptantOwner).sub(_amount);\r\n    cryptantCrabStorage.updateUint256(keccak256(abi.encodePacked(_cryptantOwner, \"cryptant\")), _newBalance);\r\n    emit CryptantFragmentsRemoved(_cryptantOwner, _amount, _newBalance);\r\n  }\r\n\r\n  function _createCrab(bool _isPresale, uint256 _tokenId, uint256 _crabPrice, uint256 _customGene, uint256 _customSkin, uint256 _customHeart, bool _hasLegendary) internal {\r\n    uint256[] memory _values = new uint256[](4);\r\n    bytes32[] memory _keys = new bytes32[](4);\r\n\r\n    uint256 _gene;\r\n    uint256 _specialSkin;\r\n    uint256 _heartValue;\r\n    uint256 _growthValue;\r\n    if(_customGene == 0) {\r\n      (_gene, _specialSkin, _heartValue, _growthValue) = genesisCrab.generateCrabGene(_isPresale, _hasLegendary);\r\n    } else {\r\n      _gene = _customGene;\r\n    }\r\n\r\n    if(_customSkin != 0) {\r\n      _specialSkin = _customSkin;\r\n    }\r\n\r\n    if(_customHeart != 0) {\r\n      _heartValue = _customHeart;\r\n    } else if (_heartValue == 0) {\r\n      (_heartValue, _growthValue) = genesisCrab.generateCrabHeart();\r\n    }\r\n    \r\n    cryptantCrabToken.mintToken(msg.sender, _tokenId, _specialSkin);\r\n\r\n    // Gene pair\r\n    _keys[0] = keccak256(abi.encodePacked(_tokenId, \"gene\"));\r\n    _values[0] = _gene;\r\n\r\n    // Level pair\r\n    _keys[1] = keccak256(abi.encodePacked(_tokenId, \"level\"));\r\n    _values[1] = 1;\r\n\r\n    // Heart Value pair\r\n    _keys[2] = keccak256(abi.encodePacked(_tokenId, \"heartValue\"));\r\n    _values[2] = _heartValue;\r\n\r\n    // Growth Value pair\r\n    _keys[3] = keccak256(abi.encodePacked(_tokenId, \"growthValue\"));\r\n    _values[3] = _growthValue;\r\n\r\n    require(cryptantCrabStorage.createUint256s(_keys, _values));\r\n\r\n    emit CrabHatched(msg.sender, _tokenId, _gene, _specialSkin, _crabPrice, _growthValue);\r\n  }\r\n\r\n  function _refundExceededValue(uint256 _senderValue, uint256 _requiredValue) internal {\r\n    uint256 _exceededValue = _senderValue.sub(_requiredValue);\r\n\r\n    if(_exceededValue > 0) {\r\n      msg.sender.transfer(_exceededValue);\r\n\r\n      emit Refund(msg.sender, _requiredValue, _senderValue, _exceededValue);\r\n    } \r\n  }\r\n}\r\n\r\ncontract Withdrawable is Ownable {\r\n  address public withdrawer;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the withdrawer.\r\n   */\r\n  modifier onlyWithdrawer() {\r\n    require(msg.sender == withdrawer);\r\n    _;\r\n  }\r\n\r\n  function setWithdrawer(address _newWithdrawer) external onlyOwner {\r\n    withdrawer = _newWithdrawer;\r\n  }\r\n\r\n  /**\r\n   * @dev withdraw the specified amount of ether from contract.\r\n   * @param _amount the amount of ether to withdraw. Units in wei.\r\n   */\r\n  function withdraw(uint256 _amount) external onlyWithdrawer returns(bool) {\r\n    require(_amount <= address(this).balance);\r\n    withdrawer.transfer(_amount);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  constructor() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n}\r\n\r\ncontract CryptantCrabPresale is CryptantCrabPurchasable, HasNoEther, Withdrawable, Randomable {\r\n  event PresalePurchased(address indexed owner, uint256 amount, uint256 cryptant, uint256 refund);\r\n  event ReferralPurchase(address indexed referral, uint256 rewardAmount, address buyer);\r\n\r\n  uint256 constant public PRESALE_LIMIT = 5000;\r\n\r\n  /**\r\n   * @dev Currently is set to 26/12/2018 00:00:00\r\n   */\r\n  uint256 public presaleEndTime = 1545782400;\r\n\r\n  /**\r\n   * @dev Initial presale price is 0.25 ether\r\n   */\r\n  uint256 public currentPresalePrice = 250 finney;\r\n\r\n  /** \r\n   * @dev tracks the current token id, starts from 1004\r\n   */\r\n  uint256 public currentTokenId = 1004;\r\n\r\n  /** \r\n   * @dev tracks the current giveaway token id, starts from 5102\r\n   */\r\n  uint256 public giveawayTokenId = 5102;\r\n\r\n  /**\r\n   * @dev The percentage of referral cut\r\n   */\r\n  uint256 public referralCut = 10;\r\n\r\n  constructor\r\n  (\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress\r\n  ) \r\n  public \r\n  CryptantCrabPurchasable\r\n  (\r\n    _genesisCrabAddress, \r\n    _cryptantCrabTokenAddress, \r\n    _cryptantCrabStorageAddress\r\n  ) {\r\n    // constructor\r\n\r\n  }\r\n\r\n  function setCurrentTokenId(uint256 _newTokenId) external onlyOwner {\r\n    currentTokenId = _newTokenId;\r\n  }\r\n\r\n  function setPresaleEndtime(uint256 _newEndTime) external onlyOwner {\r\n    presaleEndTime = _newEndTime;\r\n  }\r\n\r\n  function setReferralCut(uint256 _newReferralCut) external onlyOwner {\r\n    referralCut = _newReferralCut;\r\n  }\r\n\r\n  function getPresalePrice() public view returns (uint256) {\r\n    return currentPresalePrice;\r\n  }\r\n\r\n  function purchase(uint256 _amount) external payable {\r\n    purchaseWithReferral(_amount, address(0));\r\n  }\r\n\r\n  function purchaseWithReferral(uint256 _amount, address _referral) public payable {\r\n    require(genesisCrab != address(0));\r\n    require(cryptantCrabToken != address(0));\r\n    require(cryptantCrabStorage != address(0));\r\n    require(msg.sender != _referral);\r\n    require(_amount > 0 && _amount <= 10);\r\n    require(isPresale());\r\n    require(PRESALE_LIMIT >= currentTokenId + _amount);\r\n\r\n    uint256 _value = msg.value;\r\n    uint256 _currentPresalePrice = getPresalePrice();\r\n    uint256 _totalRequiredAmount = _currentPresalePrice * _amount;\r\n\r\n    require(_value >= _totalRequiredAmount);\r\n\r\n    // Purchase 10 crabs will have 1 crab with legendary part\r\n    // Default value for _crabWithLegendaryPart is just a unreacable number\r\n    uint256 _crabWithLegendaryPart = 100;\r\n    if(_amount == 10) {\r\n      // decide which crab will have the legendary part\r\n      _crabWithLegendaryPart = _generateRandomNumber(bytes32(currentTokenId), 10);\r\n    }\r\n\r\n    for(uint256 i = 0 ; i < _amount ; i++) {\r\n      currentTokenId++;\r\n      _createCrab(true, currentTokenId, _currentPresalePrice, 0, 0, 0, _crabWithLegendaryPart == i);\r\n    }\r\n\r\n    // Presale crab will get free cryptant fragments\r\n    _addCryptantFragments(msg.sender, (i * 3000));\r\n\r\n    // Refund exceeded value\r\n    _refundExceededValue(_value, _totalRequiredAmount);\r\n\r\n    // If there's referral, will transfer the referral reward to the referral\r\n    if(_referral != address(0)) {\r\n      uint256 _referralReward = _totalRequiredAmount * referralCut / 100;\r\n      _referral.transfer(_referralReward);\r\n      emit ReferralPurchase(_referral, _referralReward, msg.sender);\r\n    }\r\n\r\n    emit PresalePurchased(msg.sender, _amount, i * 3000, _value - _totalRequiredAmount);\r\n  }\r\n\r\n  function createCrab(uint256 _customTokenId, uint256 _crabPrice, uint256 _customGene, uint256 _customSkin, uint256 _customHeart, bool _hasLegendary) external onlyOwner {\r\n    return _createCrab(true, _customTokenId, _crabPrice, _customGene, _customSkin, _customHeart, _hasLegendary);\r\n  }\r\n\r\n  function generateGiveawayCrabs(uint256 _amount) external onlyOwner {\r\n    for(uint256 i = 0 ; i < _amount ; i++) {\r\n      _createCrab(false, giveawayTokenId++, 120 finney, 0, 0, 0, false);\r\n    }\r\n  }\r\n\r\n  function isPresale() internal view returns (bool) {\r\n    return now < presaleEndTime;\r\n  }\r\n}\r\n\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    view\r\n    public\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\ncontract Whitelist is Ownable, RBAC {\r\n  string public constant ROLE_WHITELISTED = \"whitelist\";\r\n\r\n  /**\r\n   * @dev Throws if operator is not whitelisted.\r\n   * @param _operator address\r\n   */\r\n  modifier onlyIfWhitelisted(address _operator) {\r\n    checkRole(_operator, ROLE_WHITELISTED);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n  function addAddressToWhitelist(address _operator)\r\n    onlyOwner\r\n    public\r\n  {\r\n    addRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address is in whitelist\r\n   */\r\n  function whitelist(address _operator)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was added to the whitelist,\r\n   * false if all addresses were already in the whitelist\r\n   */\r\n  function addAddressesToWhitelist(address[] _operators)\r\n    onlyOwner\r\n    public\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      addAddressToWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was removed from the whitelist,\r\n   * false if the address wasn't in the whitelist in the first place\r\n   */\r\n  function removeAddressFromWhitelist(address _operator)\r\n    onlyOwner\r\n    public\r\n  {\r\n    removeRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was removed from the whitelist,\r\n   * false if all addresses weren't in the whitelist in the first place\r\n   */\r\n  function removeAddressesFromWhitelist(address[] _operators)\r\n    onlyOwner\r\n    public\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      removeAddressFromWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\ncontract ERC721Basic is ERC165 {\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the \r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\ncontract CryptantCrabNFT is ERC721Token, Whitelist, CrabData, GeneSurgeon {\r\n  event CrabPartAdded(uint256 hp, uint256 dps, uint256 blockAmount);\r\n  event GiftTransfered(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n  event DefaultMetadataURIChanged(string newUri);\r\n\r\n  /**\r\n   * @dev Pre-generated keys to save gas\r\n   * keys are generated with:\r\n   * CRAB_BODY       = bytes4(keccak256(\"crab_body\"))       = 0xc398430e\r\n   * CRAB_LEG        = bytes4(keccak256(\"crab_leg\"))        = 0x889063b1\r\n   * CRAB_LEFT_CLAW  = bytes4(keccak256(\"crab_left_claw\"))  = 0xdb6290a2\r\n   * CRAB_RIGHT_CLAW = bytes4(keccak256(\"crab_right_claw\")) = 0x13453f89\r\n   */\r\n  bytes4 internal constant CRAB_BODY = 0xc398430e;\r\n  bytes4 internal constant CRAB_LEG = 0x889063b1;\r\n  bytes4 internal constant CRAB_LEFT_CLAW = 0xdb6290a2;\r\n  bytes4 internal constant CRAB_RIGHT_CLAW = 0x13453f89;\r\n\r\n  /**\r\n   * @dev Stores all the crab data\r\n   */\r\n  mapping(bytes4 => mapping(uint256 => CrabPartData[])) internal crabPartData;\r\n\r\n  /**\r\n   * @dev Mapping from tokenId to its corresponding special skin\r\n   * tokenId with default skin will not be stored. \r\n   */\r\n  mapping(uint256 => uint256) internal crabSpecialSkins;\r\n\r\n  /**\r\n   * @dev default MetadataURI\r\n   */\r\n  string public defaultMetadataURI = \"https://www.cryptantcrab.io/md/\";\r\n\r\n  constructor(string _name, string _symbol) public ERC721Token(_name, _symbol) {\r\n    // constructor\r\n    initiateCrabPartData();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist.\r\n   * Will return the token's metadata URL if it has one, \r\n   * otherwise will just return base on the default metadata URI\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n\r\n    string memory _uri = tokenURIs[_tokenId];\r\n\r\n    if(bytes(_uri).length == 0) {\r\n      _uri = getMetadataURL(bytes(defaultMetadataURI), _tokenId);\r\n    }\r\n\r\n    return _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the data of a specific parts\r\n   * @param _partIndex the part to retrieve. 1 = Body, 2 = Legs, 3 = Left Claw, 4 = Right Claw\r\n   * @param _element the element of part to retrieve. 1 = Fire, 2 = Earth, 3 = Metal, 4 = Spirit, 5 = Water\r\n   * @param _setIndex the set index of for the specified part. This will starts from 1.\r\n   */\r\n  function dataOfPart(uint256 _partIndex, uint256 _element, uint256 _setIndex) public view returns (uint256[] memory _resultData) {\r\n    bytes4 _key;\r\n    if(_partIndex == 1) {\r\n      _key = CRAB_BODY;\r\n    } else if(_partIndex == 2) {\r\n      _key = CRAB_LEG;\r\n    } else if(_partIndex == 3) {\r\n      _key = CRAB_LEFT_CLAW;\r\n    } else if(_partIndex == 4) {\r\n      _key = CRAB_RIGHT_CLAW;\r\n    } else {\r\n      revert();\r\n    }\r\n\r\n    CrabPartData storage _crabPartData = crabPartData[_key][_element][_setIndex];\r\n\r\n    _resultData = crabPartDataToArray(_crabPartData);\r\n  }\r\n\r\n  /**\r\n   * @dev Gift(Transfer) a token to another address. Caller must be token owner\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function giftToken(address _from, address _to, uint256 _tokenId) external {\r\n    safeTransferFrom(_from, _to, _tokenId);\r\n\r\n    emit GiftTransfered(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev External function to mint a new token, for whitelisted address only.\r\n   * Reverts if the given token ID already exists\r\n   * @param _tokenOwner address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   * @param _skinId the skin ID to be applied for all the token minted\r\n   */\r\n  function mintToken(address _tokenOwner, uint256 _tokenId, uint256 _skinId) external onlyIfWhitelisted(msg.sender) {\r\n    super._mint(_tokenOwner, _tokenId);\r\n\r\n    if(_skinId > 0) {\r\n      crabSpecialSkins[_tokenId] = _skinId;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns crab data base on the gene provided\r\n   * @param _gene the gene info where crab data will be retrieved base on it\r\n   * @return 4 uint arrays:\r\n   * 1st Array = Body's Data\r\n   * 2nd Array = Leg's Data\r\n   * 3rd Array = Left Claw's Data\r\n   * 4th Array = Right Claw's Data\r\n   */\r\n  function crabPartDataFromGene(uint256 _gene) external view returns (\r\n    uint256[] _bodyData,\r\n    uint256[] _legData,\r\n    uint256[] _leftClawData,\r\n    uint256[] _rightClawData\r\n  ) {\r\n    uint256[] memory _parts = extractPartsFromGene(_gene);\r\n    uint256[] memory _elements = extractElementsFromGene(_gene);\r\n\r\n    _bodyData = dataOfPart(1, _elements[0], _parts[0]);\r\n    _legData = dataOfPart(2, _elements[1], _parts[1]);\r\n    _leftClawData = dataOfPart(3, _elements[2], _parts[2]);\r\n    _rightClawData = dataOfPart(4, _elements[3], _parts[3]);\r\n  }\r\n\r\n  /**\r\n   * @dev For developer to add new parts, notice that this is the only method to add crab data\r\n   * so that developer can add extra content. there's no other method for developer to modify\r\n   * the data. This is to assure token owner actually owns their data.\r\n   * @param _partIndex the part to add. 1 = Body, 2 = Legs, 3 = Left Claw, 4 = Right Claw\r\n   * @param _element the element of part to add. 1 = Fire, 2 = Earth, 3 = Metal, 4 = Spirit, 5 = Water\r\n   * @param _partDataArray data of the parts.\r\n   */\r\n  function setPartData(uint256 _partIndex, uint256 _element, uint256[] _partDataArray) external onlyOwner {\r\n    CrabPartData memory _partData = arrayToCrabPartData(_partDataArray);\r\n\r\n    bytes4 _key;\r\n    if(_partIndex == 1) {\r\n      _key = CRAB_BODY;\r\n    } else if(_partIndex == 2) {\r\n      _key = CRAB_LEG;\r\n    } else if(_partIndex == 3) {\r\n      _key = CRAB_LEFT_CLAW;\r\n    } else if(_partIndex == 4) {\r\n      _key = CRAB_RIGHT_CLAW;\r\n    }\r\n\r\n    // if index 1 is empty will fill at index 1\r\n    if(crabPartData[_key][_element][1].hp == 0 && crabPartData[_key][_element][1].dps == 0) {\r\n      crabPartData[_key][_element][1] = _partData;\r\n    } else {\r\n      crabPartData[_key][_element].push(_partData);\r\n    }\r\n\r\n    emit CrabPartAdded(_partDataArray[0], _partDataArray[1], _partDataArray[2]);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the default metadata URI\r\n   * @param _defaultUri the new metadata URI\r\n   */\r\n  function setDefaultMetadataURI(string _defaultUri) external onlyOwner {\r\n    defaultMetadataURI = _defaultUri;\r\n\r\n    emit DefaultMetadataURIChanged(_defaultUri);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the metadata URI for existing token\r\n   * @param _tokenId the tokenID that metadata URI to be changed\r\n   * @param _uri the new metadata URI for the specified token\r\n   */\r\n  function setTokenURI(uint256 _tokenId, string _uri) external onlyIfWhitelisted(msg.sender) {\r\n    _setTokenURI(_tokenId, _uri);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the special skin of the provided tokenId\r\n   * @param _tokenId cryptant crab's tokenId\r\n   * @return Special skin belongs to the _tokenId provided. \r\n   * 0 will be returned if no special skin found.\r\n   */\r\n  function specialSkinOfTokenId(uint256 _tokenId) external view returns (uint256) {\r\n    return crabSpecialSkins[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev This functions will adjust the length of crabPartData\r\n   * so that when adding data the index can start with 1.\r\n   * Reason of doing this is because gene cannot have parts with index 0.\r\n   */\r\n  function initiateCrabPartData() internal {\r\n    require(crabPartData[CRAB_BODY][1].length == 0);\r\n\r\n    for(uint256 i = 1 ; i <= 5 ; i++) {\r\n      crabPartData[CRAB_BODY][i].length = 2;\r\n      crabPartData[CRAB_LEG][i].length = 2;\r\n      crabPartData[CRAB_LEFT_CLAW][i].length = 2;\r\n      crabPartData[CRAB_RIGHT_CLAW][i].length = 2;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token, \r\n   *  or has been whitelisted by contract owner\r\n   */\r\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender) || whitelist(_spender);\r\n  }\r\n\r\n  /**\r\n   * @dev Will merge the uri and tokenId together. \r\n   * @param _uri URI to be merge. This will be the first part of the result URL.\r\n   * @param _tokenId tokenID to be merge. This will be the last part of the result URL.\r\n   * @return the merged urL\r\n   */\r\n  function getMetadataURL(bytes _uri, uint256 _tokenId) internal pure returns (string) {\r\n    uint256 _tmpTokenId = _tokenId;\r\n    uint256 _tokenLength;\r\n\r\n    // Getting the length(number of digits) of token ID\r\n    do {\r\n      _tokenLength++;\r\n      _tmpTokenId /= 10;\r\n    } while (_tmpTokenId > 0);\r\n\r\n    // creating a byte array with the length of URL + token digits\r\n    bytes memory _result = new bytes(_uri.length + _tokenLength);\r\n\r\n    // cloning the uri bytes into the result bytes\r\n    for(uint256 i = 0 ; i < _uri.length ; i ++) {\r\n      _result[i] = _uri[i];\r\n    }\r\n\r\n    // appending the tokenId to the end of the result bytes\r\n    uint256 lastIndex = _result.length - 1;\r\n    for(_tmpTokenId = _tokenId ; _tmpTokenId > 0 ; _tmpTokenId /= 10) {\r\n      _result[lastIndex--] = byte(48 + _tmpTokenId % 10);\r\n    }\r\n\r\n    return string(_result);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWithdrawer\",\"type\":\"address\"}],\"name\":\"setWithdrawer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genesisCrabAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabTokenAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabStorageAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"setPresaleEndtime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customTokenId\",\"type\":\"uint256\"},{\"name\":\"_crabPrice\",\"type\":\"uint256\"},{\"name\":\"_customGene\",\"type\":\"uint256\"},{\"name\":\"_customSkin\",\"type\":\"uint256\"},{\"name\":\"_customHeart\",\"type\":\"uint256\"},{\"name\":\"_hasLegendary\",\"type\":\"bool\"}],\"name\":\"createCrab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPresalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newReferralCut\",\"type\":\"uint256\"}],\"name\":\"setReferralCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesisCrab\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenId\",\"type\":\"uint256\"}],\"name\":\"setCurrentTokenId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getCryptantFragments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"giveawayTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptantCrabStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptantCrabToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"purchaseWithReferral\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateGiveawayCrabs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPresalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_genesisCrabAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabTokenAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabStorageAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cryptant\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"PresalePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"ReferralPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gene\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"specialSkin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"crabPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"growthValue\",\"type\":\"uint256\"}],\"name\":\"CrabHatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cryptantOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"CryptantFragmentsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cryptantOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"CryptantFragmentsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refundReceiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reqAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refundAmt\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptantCrabPresale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003aeef44884383a170363d0053524712db80d4af00000000000000000000000002d00c17edbc2757ca33b76cc2465fa65b591a36700000000000000000000000030491d19a0a912a928c7e04cb8627e361d5cd434","Library":"","SwarmSource":"bzzr://dfb883742b88055db5fcceb3ac53f8b54b2922601dfcd9c501cf3f30107679f3"}]}