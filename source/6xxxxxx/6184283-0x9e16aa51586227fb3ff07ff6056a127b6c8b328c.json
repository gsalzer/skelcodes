{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}   \r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/** \r\n * @title Based on the 'final' ERC20 token standard as specified at:\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md \r\n */\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title TestToken\r\n * @dev The TestToken contract provides the token functionality of the IPT Global token\r\n * and allows the admin to distribute frozen tokens which requires defrosting to become transferable.\r\n */\r\ncontract IPTGlobal is ERC20Interface, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    //Name of the token.\r\n    string  internal constant NAME = \"IPT Global\";\r\n    \r\n    //Symbol of the token.\r\n    string  internal constant SYMBOL = \"IPT\";     \r\n    \r\n    //Granularity of the token.\r\n    uint8   internal constant DECIMALS = 8;        \r\n    \r\n    //Factor for numerical calculations.\r\n    uint256 internal constant DECIMALFACTOR = 10 ** uint(DECIMALS); \r\n    \r\n    //Total supply of IPT Global tokens.\r\n    uint256 internal constant TOTAL_SUPPLY = 300000000 * uint256(DECIMALFACTOR);  \r\n    \r\n    //Base unlocking value used to calculate fractional percentage of 0.2 %\r\n    uint8   internal constant unlockingValue = 2;\r\n    \r\n    //Base unlocking numerator used to calculate fractional percentage of 0.2 %\r\n    uint8   internal constant unlockingNumerator = 10;\r\n    \r\n    //Allows admin to call a getter which tracks latest/daily unlocked tokens\r\n    uint256 private unlockedTokensDaily;\r\n    //Allows admin to call a getter which tracks total unlocked tokens\r\n    uint256 private unlockedTokensTotal;\r\n    \r\n    address[] uniqueLockedTokenReceivers; \r\n    \r\n    //Stores uniqueness of all locked token recipients.\r\n    mapping(address => bool)    internal uniqueLockedTokenReceiver;\r\n    \r\n    //Stores all locked IPT Global token holders.\r\n    mapping(address => bool)    internal isHoldingLockedTokens;\r\n    \r\n    //Stores excluded recipients who will not be effected by token unlocking.\r\n    mapping(address => bool)    internal excludedFromTokenUnlock;\r\n    \r\n    //Stores and tracks locked IPT Global token balances.\r\n    mapping(address => uint256) internal lockedTokenBalance;\r\n    \r\n    //Stores the balance of IPT Global holders (complies with ERC-Standard).\r\n    mapping(address => uint256) internal balances; \r\n    \r\n    //Stores any allowances given to other IPT Global holders.\r\n    mapping(address => mapping(address => uint256)) internal allowed; \r\n    \r\n    \r\n    event HoldingLockedTokens(\r\n        address recipient, \r\n        uint256 lockedTokenBalance,\r\n        bool    isHoldingLockedTokens);\r\n    \r\n    event LockedTokensTransferred(\r\n        address recipient, \r\n        uint256 lockedTokens,\r\n        uint256 lockedTokenBalance);\r\n        \r\n    event TokensUnlocked(\r\n        address recipient,\r\n        uint256 unlockedTokens,\r\n        uint256 lockedTokenBalance);\r\n        \r\n    event LockedTokenBalanceChanged(\r\n        address recipient, \r\n        uint256 unlockedTokens,\r\n        uint256 lockedTokenBalance);\r\n        \r\n    event ExcludedFromTokenUnlocks(\r\n        address recipient,\r\n        bool    excludedFromTokenUnlocks);\r\n    \r\n    event CompleteTokenBalanceUnlocked(\r\n        address recipient,\r\n        uint256 lockedTokenBalance,\r\n        bool    isHoldingLockedTokens,\r\n        bool    completeTokenBalanceUnlocked);\r\n    \r\n    \r\n    /**\r\n     * @dev constructor sets initialises and configurates the smart contract.\r\n     * More specifically, it grants the smart contract owner the total supply\r\n     * of IPT Global tokens.\r\n     */\r\n    constructor() public {\r\n        balances[msg.sender] = TOTAL_SUPPLY;\r\n    }\r\n\r\n    /**\r\n     * @dev allows owner to transfer tokens which are locked by default.\r\n     * @param _recipient is the addresses which will receive locked tokens.\r\n     * @param _lockedTokens is the amount of locked tokens to distribute.\r\n     * and therefore requires unlocking to be transferable.\r\n     */\r\n    function lockedTokenTransfer(address[] _recipient, uint256[] _lockedTokens) external onlyOwner {\r\n       \r\n        for (uint256 i = 0; i < _recipient.length; i++) {\r\n            if (!uniqueLockedTokenReceiver[_recipient[i]]) {\r\n                uniqueLockedTokenReceiver[_recipient[i]] = true;\r\n                uniqueLockedTokenReceivers.push(_recipient[i]);\r\n                }\r\n                \r\n            isHoldingLockedTokens[_recipient[i]] = true;\r\n            \r\n            lockedTokenBalance[_recipient[i]] = lockedTokenBalance[_recipient[i]].add(_lockedTokens[i]);\r\n            \r\n            transfer(_recipient[i], _lockedTokens[i]);\r\n            \r\n            emit HoldingLockedTokens(_recipient[i], _lockedTokens[i], isHoldingLockedTokens[_recipient[i]]);\r\n            emit LockedTokensTransferred(_recipient[i], _lockedTokens[i], lockedTokenBalance[_recipient[i]]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev allows owner to change the locked balance of a recipient manually.\r\n     * @param _owner is the address of the locked token balance to unlock.\r\n     * @param _unlockedTokens is the amount of locked tokens to unlock.\r\n     */\r\n    function changeLockedBalanceManually(address _owner, uint256 _unlockedTokens) external onlyOwner {\r\n        require(_owner != address(0));\r\n        require(_unlockedTokens <= lockedTokenBalance[_owner]);\r\n        require(isHoldingLockedTokens[_owner]);\r\n        require(!excludedFromTokenUnlock[_owner]);\r\n        \r\n        lockedTokenBalance[_owner] = lockedTokenBalance[_owner].sub(_unlockedTokens);\r\n        emit LockedTokenBalanceChanged(_owner, _unlockedTokens, lockedTokenBalance[_owner]);\r\n        \r\n        unlockedTokensDaily  = unlockedTokensDaily.add(_unlockedTokens);\r\n        unlockedTokensTotal  = unlockedTokensTotal.add(_unlockedTokens);\r\n        \r\n        if (lockedTokenBalance[_owner] == 0) {\r\n           isHoldingLockedTokens[_owner] = false;\r\n           emit CompleteTokenBalanceUnlocked(_owner, lockedTokenBalance[_owner], isHoldingLockedTokens[_owner], true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev allows owner to unlock 0.2% of locked token balances, be careful with implementation of \r\n     * loops over large arrays, could result in block limit issues.\r\n     * should be called once a day as per specifications.\r\n     */\r\n    function unlockTokens() external onlyOwner {\r\n\r\n        for (uint256 i = 0; i < uniqueLockedTokenReceivers.length; i++) {\r\n            if (isHoldingLockedTokens[uniqueLockedTokenReceivers[i]] && \r\n                !excludedFromTokenUnlock[uniqueLockedTokenReceivers[i]]) {\r\n                \r\n                uint256 unlockedTokens = (lockedTokenBalance[uniqueLockedTokenReceivers[i]].mul(unlockingValue).div(unlockingNumerator)).div(100);\r\n                lockedTokenBalance[uniqueLockedTokenReceivers[i]] = lockedTokenBalance[uniqueLockedTokenReceivers[i]].sub(unlockedTokens);\r\n                uint256 unlockedTokensToday = unlockedTokensToday.add(unlockedTokens);\r\n                \r\n                emit TokensUnlocked(uniqueLockedTokenReceivers[i], unlockedTokens, lockedTokenBalance[uniqueLockedTokenReceivers[i]]);\r\n            }\r\n            if (lockedTokenBalance[uniqueLockedTokenReceivers[i]] == 0) {\r\n                isHoldingLockedTokens[uniqueLockedTokenReceivers[i]] = false;\r\n                \r\n                emit CompleteTokenBalanceUnlocked(uniqueLockedTokenReceivers[i], lockedTokenBalance[uniqueLockedTokenReceivers[i]], isHoldingLockedTokens[uniqueLockedTokenReceivers[i]], true);\r\n            }  \r\n        }    \r\n        unlockedTokensDaily  = unlockedTokensToday;\r\n        unlockedTokensTotal  = unlockedTokensTotal.add(unlockedTokensDaily);\r\n    }\r\n    \r\n    /**\r\n     * @dev allows owner to exclude certain recipients from having their locked token balance unlocked.\r\n     * @param _excludedRecipients is the addresses to add token unlock exclusion for.\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function addExclusionFromTokenUnlocks(address[] _excludedRecipients) external onlyOwner returns (bool) {\r\n        for (uint256 i = 0; i < _excludedRecipients.length; i++) {\r\n            excludedFromTokenUnlock[_excludedRecipients[i]] = true;\r\n            emit ExcludedFromTokenUnlocks(_excludedRecipients[i], excludedFromTokenUnlock[_excludedRecipients[i]]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev allows owner to remove any exclusion from certain recipients, allowing their locked token balance to be unlockable again.\r\n     * @param _excludedRecipients is the addresses to remove unlock token exclusion from.\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function removeExclusionFromTokenUnlocks(address[] _excludedRecipients) external onlyOwner returns (bool) {\r\n        for (uint256 i = 0; i < _excludedRecipients.length; i++) {\r\n            excludedFromTokenUnlock[_excludedRecipients[i]] = false;\r\n            emit ExcludedFromTokenUnlocks(_excludedRecipients[i], excludedFromTokenUnlock[_excludedRecipients[i]]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev allows anyone to check the unlocked and locked token balance of a recipient. \r\n     * @param _owner is the address of the locked token balance to check.\r\n     * @return a uint256 representing the locked and unlocked token balances.\r\n     */\r\n    function checkTokenBalanceState(address _owner) external view returns(uint256 unlockedBalance, uint256 lockedBalance) {\r\n    return (balanceOf(_owner).sub(lockedTokenBalance[_owner]), lockedTokenBalance[_owner]);\r\n    }\r\n    \r\n    /**\r\n     * @dev allows anyone to check the a list of all locked token recipients. \r\n     * @return an address array representing the list of recipients.\r\n     */\r\n    function checkUniqueLockedTokenReceivers() external view returns (address[]) {\r\n        return uniqueLockedTokenReceivers;\r\n    }\r\n    \r\n     /**\r\n     * @dev allows checking of the daily and total amount of unlocked tokens. \r\n     * @return an uint representing the daily and total unlocked value.\r\n     */\r\n    function checkUnlockedTokensData() external view returns (uint256 unlockedDaily, uint256 unlockedTotal) {\r\n        return (unlockedTokensDaily, unlockedTokensTotal);\r\n    }\r\n\r\n    /**\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        if (isHoldingLockedTokens[msg.sender]) {\r\n            require(_value <= balances[msg.sender].sub(lockedTokenBalance[msg.sender]));\r\n        }\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n         \r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        \r\n        if (isHoldingLockedTokens[_from]) {\r\n            require(_value <= balances[_from].sub(lockedTokenBalance[_from]));\r\n            require(_value <= allowed[_from][msg.sender]);\r\n        }\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev balanceOf function gets the balance of the specified address.\r\n     * @param _owner The address to query the balance of.\r\n     * @return An uint256 representing the token balance of the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n        \r\n    /**\r\n     * @dev allowance function checks the amount of tokens allowed by an owner for a spender to spend.\r\n     * @param _owner address is the address which owns the spendable funds.\r\n     * @param _spender address is the address which will spend the owned funds.\r\n     * @return A uint256 specifying the amount of tokens which are still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n     * @dev totalSupply function returns the total supply of tokens.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n    \r\n    /** \r\n     * @dev decimals function returns the decimal units of the token. \r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n            \r\n    /** \r\n     * @dev symbol function returns the symbol ticker of the token. \r\n     */\r\n    function symbol() public view returns (string) {\r\n        return SYMBOL;\r\n    }\r\n    \r\n    /** \r\n     * @dev name function returns the name of the token. \r\n     */\r\n    function name() public view returns (string) {\r\n        return NAME;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_unlockedTokens\",\"type\":\"uint256\"}],\"name\":\"changeLockedBalanceManually\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"checkTokenBalanceState\",\"outputs\":[{\"name\":\"unlockedBalance\",\"type\":\"uint256\"},{\"name\":\"lockedBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkUniqueLockedTokenReceivers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_excludedRecipients\",\"type\":\"address[]\"}],\"name\":\"addExclusionFromTokenUnlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_excludedRecipients\",\"type\":\"address[]\"}],\"name\":\"removeExclusionFromTokenUnlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkUnlockedTokensData\",\"outputs\":[{\"name\":\"unlockedDaily\",\"type\":\"uint256\"},{\"name\":\"unlockedTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address[]\"},{\"name\":\"_lockedTokens\",\"type\":\"uint256[]\"}],\"name\":\"lockedTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockedTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isHoldingLockedTokens\",\"type\":\"bool\"}],\"name\":\"HoldingLockedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockedTokenBalance\",\"type\":\"uint256\"}],\"name\":\"LockedTokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"unlockedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockedTokenBalance\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"unlockedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockedTokenBalance\",\"type\":\"uint256\"}],\"name\":\"LockedTokenBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"excludedFromTokenUnlocks\",\"type\":\"bool\"}],\"name\":\"ExcludedFromTokenUnlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockedTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isHoldingLockedTokens\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"completeTokenBalanceUnlocked\",\"type\":\"bool\"}],\"name\":\"CompleteTokenBalanceUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"IPTGlobal","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2163b4c081f729bbdb5abcbf299d24c125e2ca81b4374dbc69fead95659a2ae3"}]}