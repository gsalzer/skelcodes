{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n     /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else{\r\n            uint256 z = x;\r\n            for (uint256 i = 1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface shareProfit {\r\n    function increaseProfit() external payable returns(bool);\r\n}\r\n\r\ncontract RobTheBank{\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public constant BASE_PRICE = 0.003 ether;\r\n    address public owner;\r\n    address public service;\r\n    struct Big {\r\n        uint256 totalKey;\r\n        uint256 jackpotBalance;\r\n        uint256 KeyProfit;\r\n        mapping (address=>uint256) received;\r\n        address winner;\r\n        uint256 winnerProfit;\r\n    }\r\n    struct Small {\r\n        uint256 totalKey;\r\n        address winner;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 winKey;\r\n        uint256 winnerProfit;\r\n    }\r\n    struct KeyPurchases {\r\n        KeyPurchase[] keysBought;\r\n        uint256 numPurchases;\r\n    }\r\n    struct KeyPurchase {\r\n        uint256 startId;\r\n        uint256 endId;\r\n    }\r\n    mapping (uint256=>Big) public bigRound;\r\n    mapping (uint256=>mapping (uint256=>Small)) public smallRound;\r\n    shareProfit public RTB1;\r\n    shareProfit public RTB2;\r\n    mapping (uint256=>mapping (uint256=>mapping (address=>uint256))) public userSmallRoundkey;\r\n    mapping (uint256=>mapping (address=>uint256)) public userBigRoundKey;\r\n    mapping (uint256=>mapping (uint256=>mapping (address=>KeyPurchases))) public userXkeyPurchases;\r\n    uint256 keysBought;\r\n    mapping (address=>uint256) public recommender;\r\n    mapping (address=>bool) public recommenderAllow;\r\n    uint256 public allowPrice;\r\n    uint256 devFee;\r\n    uint256 public smallId;\r\n    uint256 public bigId;\r\n    bool public isPaused = false;\r\n    \r\n    event buyEvent(address indexed _buyer, uint256 _amount, uint256 _total, uint256 _bigRound, uint256 _smallRound, uint256 _startId, uint256 _endId, uint256 _index);\r\n    event lotteryEvent(address indexed _winner, uint256 _bigRound, uint256 _smallRound, uint256 _money, uint256 _type);\r\n    event withdrawEvent(address indexed _winner, uint256 _amount, uint256 _round);\r\n    event RecommenderAllow(address indexed _user, bool _status);\r\n    event createKey(uint256 _winkey, uint256 _bigRound, uint256 _smallRound);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyService() {\r\n        require(msg.sender == service, \"only service\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!isPaused, \"is Paused\");\r\n        _;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    constructor (address _rtb1, address _rtb2) public {\r\n        owner = msg.sender;\r\n        service = msg.sender;\r\n        bigId = 1;\r\n        smallId = 1;\r\n        allowPrice = 0.01 ether;\r\n        RTB1 = shareProfit(_rtb1);\r\n        RTB2 = shareProfit(_rtb2);\r\n    }\r\n\r\n    function() external payable{\r\n        require(msg.value > 0);\r\n        bigRound[bigId].jackpotBalance = bigRound[bigId].jackpotBalance.add(msg.value);\r\n    }\r\n    \r\n    ///@dev Start new game\r\n    function startGame() public onlyOwner{\r\n        uint256 time = block.timestamp;\r\n        smallRound[bigId][smallId].startTime = time;\r\n        smallRound[bigId][smallId].endTime = time + 41400;\r\n    }\r\n    \r\n    ///@dev Buy key\r\n    function buy(uint256 _amount, address _invite) public isHuman whenNotPaused payable{\r\n        require(smallRound[bigId][smallId].startTime < block.timestamp, \"The game has not started yet\");\r\n        require(smallRound[bigId][smallId].endTime > block.timestamp, \"The game is over\");\r\n        uint256 _money = _amount.mul(getPrice());\r\n        require(_amount > 0 && _money > 0);\r\n        require(_money == msg.value, \"The amount is incorrect\");\r\n\r\n        if (_invite != address(0) && _invite != msg.sender && recommenderAllow[_invite] == true){\r\n            recommender[_invite] = _money.mul(10).div(100).add(recommender[_invite]);\r\n            _money = _money.mul(90).div(100);\r\n        }\r\n\r\n        _buy(_amount, _money);\r\n    }\r\n    \r\n    ///@dev Use vault\r\n    function buyAgain(uint256 _amount) public isHuman whenNotPaused {\r\n        require(smallRound[bigId][smallId].startTime < block.timestamp, \"The game has not started yet\");\r\n        require(smallRound[bigId][smallId].endTime > block.timestamp, \"The game is over\");\r\n        uint256 _money = _amount.mul(getPrice());\r\n        uint256 profit = getMyProfit(bigId);\r\n        require(_amount > 0 && _money > 0);\r\n        require(profit >= _money);\r\n        bigRound[bigId].received[msg.sender] = _money.add(bigRound[bigId].received[msg.sender]);\r\n        _buy(_amount, _money);\r\n    }\r\n    \r\n    function _buy(uint256 _amount, uint256 _money) internal whenNotPaused{\r\n        //Number of record keys\r\n        userBigRoundKey[bigId][msg.sender] = userBigRoundKey[bigId][msg.sender].add(_amount);\r\n        userSmallRoundkey[bigId][smallId][msg.sender] = userSmallRoundkey[bigId][smallId][msg.sender].add(_amount);\r\n        \r\n        //Record player's key\r\n        KeyPurchases storage purchases = userXkeyPurchases[bigId][smallId][msg.sender];\r\n        if (purchases.numPurchases == purchases.keysBought.length) {\r\n            purchases.keysBought.length += 1;\r\n        }\r\n        purchases.keysBought[purchases.numPurchases] = KeyPurchase(keysBought, keysBought + (_amount - 1)); // (eg: buy 10, get id's 0-9)\r\n        purchases.numPurchases++;\r\n        emit buyEvent(msg.sender, _amount, msg.value, bigId, smallId, keysBought, keysBought + (_amount - 1), purchases.numPurchases);\r\n        keysBought = keysBought.add(_amount);\r\n\r\n        //40% for all players\r\n        uint256 _playerFee = _money.mul(40).div(100);\r\n        if(bigRound[bigId].totalKey > 0){\r\n            bigRound[bigId].KeyProfit = _playerFee.div(bigRound[bigId].totalKey).add(bigRound[bigId].KeyProfit);\r\n            bigRound[bigId].received[msg.sender] = bigRound[bigId].KeyProfit.mul(_amount).add(bigRound[bigId].received[msg.sender]);\r\n        }else{\r\n            devFee = devFee.add(_playerFee);\r\n        }\r\n\r\n        //35% for jackpot\r\n        bigRound[bigId].jackpotBalance = _money.mul(35).div(100).add(bigRound[bigId].jackpotBalance);\r\n        \r\n        //15% for RTB1 and RTB2\r\n        uint256 _shareFee = _money.mul(15).div(100);\r\n        RTB1.increaseProfit.value(_shareFee.mul(3).div(10))(); // 300/1000 = 30%\r\n        RTB2.increaseProfit.value(_shareFee.mul(7).div(10))(); // 700/1000 = 70%\r\n        \r\n        //10% for winner\r\n        smallRound[bigId][smallId].winnerProfit = _money.mul(10).div(100).add(smallRound[bigId][smallId].winnerProfit);\r\n\r\n        bigRound[bigId].totalKey = bigRound[bigId].totalKey.add(_amount);\r\n        smallRound[bigId][smallId].totalKey = smallRound[bigId][smallId].totalKey.add(_amount);\r\n    }\r\n    \r\n    ///@dev Create a winner\r\n    function createWinner() public onlyService whenNotPaused{\r\n        require(smallRound[bigId][smallId].endTime < block.timestamp);\r\n        require(smallRound[bigId][smallId].winKey == 0);\r\n        uint256 seed = _random();\r\n        smallRound[bigId][smallId].winKey = addmod(uint256(blockhash(block.number-1)), seed, smallRound[bigId][smallId].totalKey);\r\n        emit createKey(smallRound[bigId][smallId].winKey, bigId, smallId);\r\n    }\r\n\r\n    ///@dev Lottery\r\n    function lottery(address _winner, uint256 _checkIndex) external onlyService whenNotPaused{\r\n        require(_winner != address(0));\r\n        require(address(this).balance > smallRound[bigId][smallId].winnerProfit);\r\n        \r\n        KeyPurchases storage keys = userXkeyPurchases[bigId][smallId][_winner];\r\n        if(keys.numPurchases > 0 && _checkIndex < keys.numPurchases){\r\n            KeyPurchase storage checkKeys = keys.keysBought[_checkIndex];\r\n            if(smallRound[bigId][smallId].winKey >= checkKeys.startId && smallRound[bigId][smallId].winKey <= checkKeys.endId){\r\n                smallRound[bigId][smallId].winner = _winner;\r\n                _winner.transfer(smallRound[bigId][smallId].winnerProfit);\r\n                emit lotteryEvent(_winner, bigId, smallId, smallRound[bigId][smallId].winnerProfit, 1);\r\n                \r\n                _bigLottery(_winner);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _bigLottery(address _winner) internal whenNotPaused{\r\n        uint256 seed = _random();\r\n        uint256 mod;\r\n        if(smallId < 50){\r\n            mod = (51 - smallId) * 3 - 4;\r\n        }else{\r\n            mod = 1;\r\n        }\r\n        uint256 number =  addmod(uint256(blockhash(block.number-1)), seed, mod);\r\n        if(number == 0){\r\n            //Congratulations, win the grand prize\r\n            require(address(this).balance >= bigRound[bigId].jackpotBalance);\r\n\r\n            //10% for all player\r\n            uint256 _playerFee = bigRound[bigId].jackpotBalance.mul(10).div(100);\r\n            bigRound[bigId].KeyProfit = _playerFee.div(bigRound[bigId].totalKey).add(bigRound[bigId].KeyProfit);\r\n            \r\n            //10% for next jackpot\r\n            uint256 _jackpotFee = bigRound[bigId].jackpotBalance.mul(10).div(100);\r\n            \r\n            //10% for RTB1 and RTB2\r\n            uint256 _shareFee =  bigRound[bigId].jackpotBalance.mul(10).div(100);\r\n            RTB1.increaseProfit.value(_shareFee.mul(3).div(10))(); // 300/1000 = 30%\r\n            RTB2.increaseProfit.value(_shareFee.mul(7).div(10))(); // 700/1000 = 70%\r\n            \r\n            //8% for dev\r\n            devFee = bigRound[bigId].jackpotBalance.mul(8).div(100).add(devFee);\r\n            \r\n            //62% for winner\r\n            uint256 _winnerProfit = bigRound[bigId].jackpotBalance.mul(62).div(100);\r\n            _winner.transfer(_winnerProfit);\r\n            emit lotteryEvent(_winner, bigId, smallId, _winnerProfit, 2);\r\n            bigRound[bigId].winnerProfit = _winnerProfit;\r\n            \r\n            //Start a new round\r\n            bigId++;\r\n            smallId = 1;\r\n            bigRound[bigId].jackpotBalance = _jackpotFee;\r\n        }else{\r\n            //You didn't win the grand prize\r\n            //Start new round\r\n            smallId++;\r\n        }\r\n        keysBought = 0;\r\n    }\r\n\r\n    function withdraw(uint256 _round) public whenNotPaused{\r\n        uint profit = getMyProfit(_round);\r\n        uint256 money = recommender[msg.sender].add(profit);\r\n        require(money > 0);\r\n        recommender[msg.sender] = 0;\r\n        bigRound[_round].received[msg.sender] = bigRound[_round].received[msg.sender].add(profit);\r\n        msg.sender.transfer(money);\r\n        emit withdrawEvent(msg.sender, money, _round);\r\n    }\r\n    \r\n    function devWithdraw() public onlyOwner{\r\n        owner.transfer(devFee);\r\n        emit withdrawEvent(owner, devFee, 0);\r\n        devFee = 0;\r\n    }\r\n    \r\n    function getMyProfit(uint256 _round) public view returns(uint256){\r\n        return bigRound[_round].KeyProfit.mul(userBigRoundKey[_round][msg.sender]).sub(bigRound[_round].received[msg.sender]);\r\n    }\r\n\r\n    function getPrice() public view returns(uint256) {\r\n        require(smallId >= 1 && smallId <= 50);\r\n        uint256 _round = smallId.sub(1);\r\n        return _round.mul(_round).mul(1200000000000000).div(25).add(BASE_PRICE);\r\n    }\r\n\r\n     //random\r\n    function _random() internal view returns(uint256){\r\n        uint256 seed = uint256(keccak256( (\r\n            (block.timestamp).add\r\n            (block.difficulty).add\r\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\r\n            (block.gaslimit).add\r\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\r\n            (block.number)\r\n        )));\r\n\r\n        return seed;\r\n    }\r\n    \r\n    function setAllowPrice(uint256 _price) public onlyOwner{\r\n        allowPrice = _price;\r\n    }\r\n    \r\n    function setRecommenderAllow() public payable{\r\n        require(msg.value == allowPrice);\r\n        require(recommenderAllow[msg.sender] == false);\r\n        devFee = devFee.add(msg.value);\r\n        emit RecommenderAllow(msg.sender, true);\r\n        recommenderAllow[msg.sender] = true;\r\n    }\r\n    \r\n    function setGame(bool _bool) public onlyOwner{\r\n        isPaused = _bool;\r\n    }\r\n\r\n    function setService(address _addr) public onlyOwner{\r\n        service = _addr;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bigId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smallId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyAgain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"smallRound\",\"outputs\":[{\"name\":\"totalKey\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"winKey\",\"type\":\"uint256\"},{\"name\":\"winnerProfit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_invite\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bigRound\",\"outputs\":[{\"name\":\"totalKey\",\"type\":\"uint256\"},{\"name\":\"jackpotBalance\",\"type\":\"uint256\"},{\"name\":\"KeyProfit\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"winnerProfit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"recommender\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RTB1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winner\",\"type\":\"address\"},{\"name\":\"_checkIndex\",\"type\":\"uint256\"}],\"name\":\"lottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"devWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getMyProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userSmallRoundkey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBigRoundKey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setAllowPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"service\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RTB2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"recommenderAllow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setRecommenderAllow\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userXkeyPurchases\",\"outputs\":[{\"name\":\"numPurchases\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rtb1\",\"type\":\"address\"},{\"name\":\"_rtb2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bigRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_smallRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"buyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_bigRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_smallRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"lotteryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"withdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"RecommenderAllow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_winkey\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bigRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_smallRound\",\"type\":\"uint256\"}],\"name\":\"createKey\",\"type\":\"event\"}]","ContractName":"RobTheBank","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d0955bd45d5eef5bedce84a3471c825288a14b01000000000000000000000000b9dad061b4ada5825abc2c9914e89181c0cdc56c","Library":"","SwarmSource":"bzzr://6ca4a3b565d22a80f8d51ab51ac95271049875e57c81f055d378a5ab146741c2"}]}