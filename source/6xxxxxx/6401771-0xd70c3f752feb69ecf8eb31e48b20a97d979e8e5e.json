{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n*\r\n* complied with .4.25+commit.59dbf8f1.Emscripten.clang\r\n* 2018-09-07\r\n* With Optimization disabled\r\n*\r\n* Contacts: support (at) bankofeth.app\r\n*           https://twitter.com/bankofeth\r\n*           https://discord.gg/d5c7pfn\r\n*           http://t.me/bankofeth\r\n*           http://reddit.com/r/bankofeth\r\n*\r\n* PLAY NOW: https:://bankofeth.app\r\n*  \r\n* --- BANK OF ETH --------------------------------------------------------------\r\n*\r\n* Provably fair Banking Game -> Invest your $ETH and gain daily returns on all \r\n* profits made!\r\n*\r\n* -- No false promises like many other (Unmentioned!!) dApps...\r\n* -- Real, sustainable returns because we know business, we know banking, we \r\n*    know gaming!\r\n* -- Returns based on INPUTS into the contract - not false promises or false \r\n*    gaurantees\r\n* -- Gain a return when people play the game, not a false gauranteed endless \r\n*    profit with an exitscam at the end!\r\n* -- Contract verified and open from day 1 so you know we can't \"exitscam\" you!\r\n* -- Set to become the BIGGEST home of $ETH gaming where you can take OWNERSHIP \r\n*    and PROFIT\r\n*\r\n* --- GAMEPLAY -----------------------------------------------------------------\r\n*\r\n*   Every day 5% of ALL profits are put into the \"Investor Pot\":\r\n*\r\n*          profitDays[currentProfitDay].dailyProfit\r\n*\r\n*   This pot is then split up amongst EVERY investor in the game, proportional to the amount \r\n*   they have invested.  \r\n*\r\n*   EXAMPLE:\r\n*\r\n*   Daily Investments: 20 $ETH\r\n*   Current Players  : 50 - All even investors with 1 $ETH in the pot\r\n*\r\n*   So the dailyProfit for the day would be 5% of 20 $ETH = 1 $ETH \r\n*   Split evenly in this case amongst the 50 players = \r\n*   1000000000000000000 wei / 50 = 0.02 $ETH profit for that day each!\r\n*\r\n*   EXAMPLE 2:\r\n*\r\n*   A more realistic example is a bigger profit per day and different \r\n*   distribtion of the pot, e.g.\r\n*\r\n*   Daily Investments: 100 $ETH\r\n*   Current Players  : 200 - But our example player has 10% of the total amount \r\n*   invested\r\n*\r\n*   dailyProfit for this day is 5% of the 100 $ETH = 5 $ETH \r\n*   (5000000000000000000 wei)\r\n* \r\n*   And our example player would receive 10% of that = 0.5 $ETH for the day\r\n*   Not a bad return for having your $ETH just sitting there!\r\n*\r\n*   Remember you get a return EVERY DAY that people play any of our games \r\n*   or invest!\r\n*\r\n* -- INVESTMENT RULES --\r\n*\r\n*   The investment rules are simple:\r\n*\r\n*   When you invest into the game there is a minimum investment of 0.01 $ETH\r\n*\r\n*   Of that it is split as follows:\r\n*\r\n*      80% Goes directly into your personal investment fund\r\n*      5%  Goes into the daily profit fund for that day\r\n*      15% Goes into the marketing, development and admin fund\r\n*\r\n*   Simple as that!\r\n*\r\n*   By sitcking to these simple rules the games becomes self-sufficient!\r\n*\r\n*   The fees enable regular daily payments to all players.\r\n*\r\n*   When you choose to withdraw your investment the same fees apply (80/5/15) \r\n*   - this is again to ensure that the game is self-sufficient and sustainable!\r\n* \r\n* \r\n* --- REFERRALS ----------------------------------------------------------------\r\n*                                                                                        \r\n*   Referrals allow you to earn a bonus 3% on every person you refer to \r\n*   BankOfEth!\r\n*\r\n* - All future games launched will feed into the Profit Share Mechanism \r\n*   (See receiveProfits() method)\r\n*\r\n* - PLAY NOW: https://BankOfEth.app\r\n*\r\n*\r\n* --- COPYRIGHT ----------------------------------------------------------------\r\n* \r\n*   This source code is provided for verification and audit purposes only and \r\n*   no license of re-use is granted.\r\n*   \r\n*   (C) Copyright 2018 BankOfEth.app\r\n*   \r\n*   \r\n*   Sub-license, white-label, solidity or Ethereum development enquiries please \r\n*   contact support (at) bankofeth.app\r\n*   \r\n*   \r\n* PLAY NOW: https:://bankofeth.app\r\n* \r\n*/\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Zero {\r\n  function requireNotZero(uint a) internal pure {\r\n    require(a != 0, \"require not zero\");\r\n  }\r\n\r\n  function requireNotZero(address addr) internal pure {\r\n    require(addr != address(0), \"require not zero address\");\r\n  }\r\n\r\n  function notZero(address addr) internal pure returns(bool) {\r\n    return !(addr == address(0));\r\n  }\r\n\r\n  function isZero(address addr) internal pure returns(bool) {\r\n    return addr == address(0);\r\n  }\r\n}\r\n\r\nlibrary Percent {\r\n\r\n  struct percent {\r\n    uint num;\r\n    uint den;\r\n  }\r\n  function mul(percent storage p, uint a) internal view returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    return a*p.num/p.den;\r\n  }\r\n\r\n  function div(percent storage p, uint a) internal view returns (uint) {\r\n    return a/p.num*p.den;\r\n  }\r\n\r\n  function sub(percent storage p, uint a) internal view returns (uint) {\r\n    uint b = mul(p, a);\r\n    if (b >= a) return 0;\r\n    return a - b;\r\n  }\r\n\r\n  function add(percent storage p, uint a) internal view returns (uint) {\r\n    return a + mul(p, a);\r\n  }\r\n}\r\n\r\nlibrary ToAddress {\r\n  function toAddr(uint source) internal pure returns(address) {\r\n    return address(source);\r\n  }\r\n\r\n  function toAddr(bytes source) internal pure returns(address addr) {\r\n    assembly { addr := mload(add(source,0x14)) }\r\n    return addr;\r\n  }\r\n}\r\n\r\ncontract BankOfEth {\r\n    \r\n    using SafeMath for uint256;\r\n    using Percent for Percent.percent;\r\n    using Zero for *;\r\n    using ToAddress for *;\r\n\r\n    // Events    \r\n    event LogPayDividendsOutOfFunds(address sender, uint256 total_value, uint256 total_refBonus, uint256 timestamp);\r\n    event LogPayDividendsSuccess(address sender, uint256 total_value, uint256 total_refBonus, uint256 timestamp);\r\n    event LogInvestmentWithdrawn(address sender, uint256 total_value, uint256 timestamp);\r\n    event LogReceiveExternalProfits(address sender, uint256 total_value, uint256 timestamp);\r\n    event LogInsertInvestor(address sender, uint256 keyIndex, uint256 init_value, uint256 timestamp);\r\n    event LogInvestment(address sender, uint256 total_value, uint256 value_after, uint16 profitDay, address referer, uint256 timestamp);\r\n    event LogPayDividendsReInvested(address sender, uint256 total_value, uint256 total_refBonus, uint256 timestamp);\r\n    \r\n    \r\n    address owner;\r\n    address devAddress;\r\n    \r\n    // settings\r\n    Percent.percent private m_devPercent = Percent.percent(15, 100); // 15/100*100% = 15%\r\n    Percent.percent private m_investorFundPercent = Percent.percent(5, 100); // 5/100*100% = 5%\r\n    Percent.percent private m_refPercent = Percent.percent(3, 100); // 3/100*100% = 3%\r\n    Percent.percent private m_devPercent_out = Percent.percent(15, 100); // 15/100*100% = 15%\r\n    Percent.percent private m_investorFundPercent_out = Percent.percent(5, 100); // 5/100*100% = 5%\r\n    \r\n    uint256 public minInvestment = 10 finney; // 0.1 eth\r\n    uint256 public maxInvestment = 2000 ether; \r\n    uint256 public gameDuration = (24 hours);\r\n    bool public gamePaused = false;\r\n    \r\n    // Investor details\r\n    struct investor {\r\n        uint256 keyIndex;\r\n        uint256 value;\r\n        uint256 refBonus;\r\n        uint16 startDay;\r\n        uint16 lastDividendDay;\r\n        uint16 investmentsMade;\r\n    }\r\n    struct iteratorMap {\r\n        mapping(address => investor) data;\r\n        address[] keys;\r\n    }\r\n    iteratorMap private investorMapping;\r\n    \r\n    mapping(address => bool) private m_referrals; // we only pay out on the first set of referrals\r\n    \r\n    // profit days\r\n    struct profitDay {\r\n        uint256 dailyProfit;\r\n        uint256 dailyInvestments; // number of investments\r\n        uint256 dayStartTs;\r\n        uint16 day;\r\n    }\r\n    \r\n    // Game vars\r\n    profitDay[] public profitDays;\r\n    uint16 public currentProfitDay;\r\n\r\n    uint256 public dailyInvestments;\r\n    uint256 public totalInvestments;\r\n    uint256 public totalInvestmentFund;\r\n    uint256 public totalProfits;\r\n    uint256 public latestKeyIndex;\r\n    \r\n    // modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier notOnPause() {\r\n        require(gamePaused == false, \"Game Paused\");\r\n        _;\r\n    }\r\n    \r\n    modifier checkDayRollover() {\r\n        \r\n        if(now.sub(profitDays[currentProfitDay].dayStartTs).div(gameDuration) > 0) {\r\n            currentProfitDay++;\r\n            dailyInvestments = 0;\r\n            profitDays.push(profitDay(0,0,now,currentProfitDay));\r\n        }\r\n        _;\r\n    }\r\n\r\n    \r\n    constructor() public {\r\n\r\n        owner = msg.sender;\r\n        devAddress = msg.sender;\r\n        investorMapping.keys.length++;\r\n        profitDays.push(profitDay(0,0,now,0));\r\n        currentProfitDay = 0;\r\n        dailyInvestments = 0;\r\n        totalInvestments = 0;\r\n        totalInvestmentFund = 0;\r\n        totalProfits = 0;\r\n        latestKeyIndex = 1;\r\n    }\r\n    \r\n    function() public payable {\r\n\r\n        if (msg.value == 0)\r\n            withdrawDividends();\r\n        else \r\n        {\r\n            address a = msg.data.toAddr();\r\n            address refs;\r\n            if (a.notZero()) {\r\n                refs = a;\r\n                invest(refs); \r\n            } else {\r\n                invest(refs);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function reinvestDividends() public {\r\n        require(investor_contains(msg.sender));\r\n\r\n        uint total_value;\r\n        uint total_refBonus;\r\n        \r\n        (total_value, total_refBonus) = getDividends(false, msg.sender);\r\n        \r\n        require(total_value+total_refBonus > 0, \"No Dividends available yet!\");\r\n        \r\n        investorMapping.data[msg.sender].value = investorMapping.data[msg.sender].value.add(total_value + total_refBonus);\r\n        \r\n        \r\n        \r\n        investorMapping.data[msg.sender].lastDividendDay = currentProfitDay;\r\n        investor_clearRefBonus(msg.sender);\r\n        emit LogPayDividendsReInvested(msg.sender, total_value, total_refBonus, now);\r\n        \r\n    }\r\n    \r\n    \r\n    function withdrawDividends() public {\r\n        require(investor_contains(msg.sender));\r\n\r\n        uint total_value;\r\n        uint total_refBonus;\r\n        \r\n        (total_value, total_refBonus) = getDividends(false, msg.sender);\r\n        \r\n        require(total_value+total_refBonus > 0, \"No Dividends available yet!\");\r\n        \r\n        uint16 _origLastDividendDay = investorMapping.data[msg.sender].lastDividendDay;\r\n        \r\n        investorMapping.data[msg.sender].lastDividendDay = currentProfitDay;\r\n        investor_clearRefBonus(msg.sender);\r\n        \r\n        if(total_refBonus > 0) {\r\n            investorMapping.data[msg.sender].refBonus = 0;\r\n            if (msg.sender.send(total_value+total_refBonus)) {\r\n                emit LogPayDividendsSuccess(msg.sender, total_value, total_refBonus, now);\r\n            } else {\r\n                investorMapping.data[msg.sender].lastDividendDay = _origLastDividendDay;\r\n                investor_addRefBonus(msg.sender, total_refBonus);\r\n            }\r\n        } else {\r\n            if (msg.sender.send(total_value)) {\r\n                emit LogPayDividendsSuccess(msg.sender, total_value, 0, now);\r\n            } else {\r\n                investorMapping.data[msg.sender].lastDividendDay = _origLastDividendDay;\r\n                investor_addRefBonus(msg.sender, total_refBonus);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function showLiveDividends() public view returns(uint256 total_value, uint256 total_refBonus) {\r\n        require(investor_contains(msg.sender));\r\n        return getDividends(true, msg.sender);\r\n    }\r\n    \r\n    function showDividendsAvailable() public view returns(uint256 total_value, uint256 total_refBonus) {\r\n        require(investor_contains(msg.sender));\r\n        return getDividends(false, msg.sender);\r\n    }\r\n\r\n\r\n    function invest(address _referer) public payable notOnPause checkDayRollover {\r\n        require(msg.value >= minInvestment);\r\n        require(msg.value <= maxInvestment);\r\n        \r\n        uint256 devAmount = m_devPercent.mul(msg.value);\r\n        \r\n        \r\n        // calc referalBonus....\r\n        // We pay any referal bonuses out of our devAmount = marketing spend\r\n        // Could result in us not having much dev fund for heavy referrals\r\n\r\n        // only pay referrals for the first investment of each player\r\n        if(!m_referrals[msg.sender]) {\r\n            if(notZeroAndNotSender(_referer) && investor_contains(_referer)) {\r\n                // this user was directly refered by _referer\r\n                // pay _referer commission...\r\n                uint256 _reward = m_refPercent.mul(msg.value);\r\n                devAmount.sub(_reward);\r\n                assert(investor_addRefBonus(_referer, _reward));\r\n                m_referrals[msg.sender] = true;\r\n\r\n                \r\n            }\r\n        }\r\n        \r\n        // end referalBonus\r\n        \r\n        devAddress.transfer(devAmount);\r\n        uint256 _profit = m_investorFundPercent.mul(msg.value);\r\n        profitDays[currentProfitDay].dailyProfit = profitDays[currentProfitDay].dailyProfit.add(_profit);\r\n        \r\n        totalProfits = totalProfits.add(_profit);\r\n\r\n        uint256 _investorVal = msg.value;\r\n        _investorVal = _investorVal.sub(m_devPercent.mul(msg.value));\r\n        _investorVal = _investorVal.sub(m_investorFundPercent.mul(msg.value));\r\n        \r\n        if(investor_contains(msg.sender)) {\r\n            investorMapping.data[msg.sender].value += _investorVal;\r\n            investorMapping.data[msg.sender].investmentsMade ++;\r\n        } else {\r\n            assert(investor_insert(msg.sender, _investorVal));\r\n        }\r\n        totalInvestmentFund = totalInvestmentFund.add(_investorVal);\r\n        profitDays[currentProfitDay].dailyInvestments = profitDays[currentProfitDay].dailyInvestments.add(_investorVal);\r\n        \r\n        dailyInvestments++;\r\n        totalInvestments++;\r\n        \r\n        emit LogInvestment(msg.sender, msg.value, _investorVal, currentProfitDay, _referer, now);\r\n        \r\n    }\r\n    \r\n    // tested - needs confirming send completed\r\n    function withdrawInvestment() public {\r\n        require(investor_contains(msg.sender));\r\n        require(investorMapping.data[msg.sender].value > 0);\r\n        \r\n        uint256 _origValue = investorMapping.data[msg.sender].value;\r\n        investorMapping.data[msg.sender].value = 0;\r\n        \r\n        // There is a tax on the way out too...\r\n        uint256 _amountToSend = _origValue.sub(m_devPercent_out.mul(_origValue));\r\n        uint256 _profit = m_investorFundPercent_out.mul(_origValue);\r\n        _amountToSend = _amountToSend.sub(m_investorFundPercent_out.mul(_profit));\r\n        \r\n        \r\n        totalInvestmentFund = totalInvestmentFund.sub(_origValue);\r\n        \r\n        if(!msg.sender.send(_amountToSend)) {\r\n            investorMapping.data[msg.sender].value = _origValue;\r\n            totalInvestmentFund = totalInvestmentFund.add(_origValue);\r\n        } else {\r\n            \r\n            devAddress.transfer(m_devPercent_out.mul(_origValue));\r\n            profitDays[currentProfitDay].dailyProfit = profitDays[currentProfitDay].dailyProfit.add(_profit);\r\n            totalProfits = totalProfits.add(_profit);\r\n            \r\n            emit LogInvestmentWithdrawn(msg.sender, _origValue, now);\r\n        }\r\n    }\r\n    \r\n    \r\n    // receive % of profits from other games\r\n    function receiveExternalProfits() public payable checkDayRollover {\r\n        // No checks on who is sending... if someone wants to send us free ETH let them!\r\n        \r\n        profitDays[currentProfitDay].dailyProfit = profitDays[currentProfitDay].dailyProfit.add(msg.value);\r\n        profitDays[currentProfitDay].dailyInvestments = profitDays[currentProfitDay].dailyInvestments.add(msg.value);\r\n        emit LogReceiveExternalProfits(msg.sender, msg.value, now);\r\n    }\r\n    \r\n    \r\n\r\n    // investor management\r\n    \r\n    function investor_insert(address addr, uint value) internal returns (bool) {\r\n        uint keyIndex = investorMapping.data[addr].keyIndex;\r\n        if (keyIndex != 0) return false; // already exists\r\n        investorMapping.data[addr].value = value;\r\n        keyIndex = investorMapping.keys.length++;\r\n        investorMapping.data[addr].keyIndex = keyIndex;\r\n        investorMapping.data[addr].startDay = currentProfitDay;\r\n        investorMapping.data[addr].lastDividendDay = currentProfitDay;\r\n        investorMapping.data[addr].investmentsMade = 1;\r\n        investorMapping.keys[keyIndex] = addr;\r\n        emit LogInsertInvestor(addr, keyIndex, value, now);\r\n        return true;\r\n    }\r\n    function investor_addRefBonus(address addr, uint refBonus) internal returns (bool) {\r\n        if (investorMapping.data[addr].keyIndex == 0) return false;\r\n        investorMapping.data[addr].refBonus += refBonus;\r\n        return true;\r\n    }\r\n    function investor_clearRefBonus(address addr) internal returns (bool) {\r\n        if (investorMapping.data[addr].keyIndex == 0) return false;\r\n        investorMapping.data[addr].refBonus = 0;\r\n        return true;\r\n    }\r\n    function investor_contains(address addr) public view returns (bool) {\r\n        return investorMapping.data[addr].keyIndex > 0;\r\n    }\r\n    function investor_getShortInfo(address addr) public view returns(uint, uint) {\r\n        return (\r\n          investorMapping.data[addr].value,\r\n          investorMapping.data[addr].refBonus\r\n        );\r\n    }\r\n    function investor_getMediumInfo(address addr) public view returns(uint, uint, uint16) {\r\n        return (\r\n          investorMapping.data[addr].value,\r\n          investorMapping.data[addr].refBonus,\r\n          investorMapping.data[addr].investmentsMade\r\n        );\r\n    }\r\n    \r\n    // Owner only functions    \r\n    \r\n\r\n    \r\n\r\n    function p_setOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n    function p_setDevAddress(address _devAddress) public onlyOwner {\r\n        devAddress = _devAddress;\r\n    }\r\n    function p_setDevPercent(uint num, uint dem) public onlyOwner {\r\n        m_devPercent = Percent.percent(num, dem);\r\n    }\r\n    function p_setInvestorFundPercent(uint num, uint dem) public onlyOwner {\r\n        m_investorFundPercent = Percent.percent(num, dem);\r\n    }\r\n    function p_setDevPercent_out(uint num, uint dem) public onlyOwner {\r\n        m_devPercent_out = Percent.percent(num, dem);\r\n    }\r\n    function p_setInvestorFundPercent_out(uint num, uint dem) public onlyOwner {\r\n        m_investorFundPercent_out = Percent.percent(num, dem);\r\n    }\r\n    function p_setRefPercent(uint num, uint dem) public onlyOwner {\r\n        m_refPercent = Percent.percent(num, dem);\r\n    }\r\n    function p_setMinInvestment(uint _minInvestment) public onlyOwner {\r\n        minInvestment = _minInvestment;\r\n    }\r\n    function p_setMaxInvestment(uint _maxInvestment) public onlyOwner {\r\n        maxInvestment = _maxInvestment;\r\n    }\r\n    function p_setGamePaused(bool _gamePaused) public onlyOwner {\r\n        gamePaused = _gamePaused;\r\n    }\r\n    function p_setGameDuration(uint256 _gameDuration) public onlyOwner {\r\n        gameDuration = _gameDuration;\r\n    }\r\n\r\n    // Util functions\r\n    function notZeroAndNotSender(address addr) internal view returns(bool) {\r\n        return addr.notZero() && addr != msg.sender;\r\n    }\r\n    \r\n    \r\n    function getDividends(bool _includeCurrentDay, address _investor) internal view returns(uint256, uint256) {\r\n        require(investor_contains(_investor));\r\n        uint16 i = investorMapping.data[_investor].lastDividendDay;\r\n        uint total_value;\r\n        uint total_refBonus;\r\n        total_value = 0;\r\n        total_refBonus = 0;\r\n        \r\n        uint16 _option = 0;\r\n        if(_includeCurrentDay)\r\n            _option++;\r\n\r\n        uint _value;\r\n        (_value, total_refBonus) = investor_getShortInfo(_investor);\r\n\r\n        uint256 _profitPercentageEminus7Multi = (_value*10000000 / totalInvestmentFund * 10000000) / 10000000;\r\n\r\n        for(i; i< currentProfitDay+_option; i++) {\r\n\r\n            if(profitDays[i].dailyProfit > 0){\r\n                total_value = total_value.add(\r\n                        (profitDays[i].dailyProfit / 10000000 * _profitPercentageEminus7Multi)\r\n                    );\r\n            }\r\n        \r\n        }\r\n            \r\n        return (total_value, total_refBonus);\r\n    }\r\n    uint256 a=0;\r\n    function gameOp() public {\r\n        a++;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"investor_getShortInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"dem\",\"type\":\"uint256\"}],\"name\":\"p_setInvestorFundPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestmentFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minInvestment\",\"type\":\"uint256\"}],\"name\":\"p_setMinInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"p_setDevAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"p_setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"dem\",\"type\":\"uint256\"}],\"name\":\"p_setInvestorFundPercent_out\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profitDays\",\"outputs\":[{\"name\":\"dailyProfit\",\"type\":\"uint256\"},{\"name\":\"dailyInvestments\",\"type\":\"uint256\"},{\"name\":\"dayStartTs\",\"type\":\"uint256\"},{\"name\":\"day\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxInvestment\",\"type\":\"uint256\"}],\"name\":\"p_setMaxInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gameOp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestKeyIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentProfitDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showLiveDividends\",\"outputs\":[{\"name\":\"total_value\",\"type\":\"uint256\"},{\"name\":\"total_refBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showDividendsAvailable\",\"outputs\":[{\"name\":\"total_value\",\"type\":\"uint256\"},{\"name\":\"total_refBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"investor_getMediumInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gamePaused\",\"type\":\"bool\"}],\"name\":\"p_setGamePaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveExternalProfits\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalProfits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"investor_contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"dem\",\"type\":\"uint256\"}],\"name\":\"p_setRefPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameDuration\",\"type\":\"uint256\"}],\"name\":\"p_setGameDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"dem\",\"type\":\"uint256\"}],\"name\":\"p_setDevPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"dem\",\"type\":\"uint256\"}],\"name\":\"p_setDevPercent_out\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total_refBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogPayDividendsOutOfFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total_refBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogPayDividendsSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogInvestmentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogReceiveExternalProfits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"keyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"init_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogInsertInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value_after\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"profitDay\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"referer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total_refBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogPayDividendsReInvested\",\"type\":\"event\"}]","ContractName":"BankOfEth","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://547e356ce982a0e89351a7822402238829aa5bd2eba5feb40a6ad4923d975ba6"}]}