{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/*\r\nDRIVER ETHEREUM CRYPTO-BANK THE FIRST EDITION\r\nETHDRIVER.COM THE NEW WORLD ECONOMY PROJECT\r\nCREATED 2018-09-26 DAO DRIVER ETHEREUM (c)\r\n0x476371DD2bB73e800631F5Acfea5b5c0178aA605\r\n*/\r\ncontract OWN \r\n{\r\n    address public owner;\r\n    address internal newOwner;\r\n    \r\n    constructor() \r\n    public\r\n    payable\r\n    {\r\n    owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner \r\n    {\r\n    require(owner == msg.sender);\r\n    _;\r\n    }\r\n    \r\n    function changeOwner(address _owner)\r\n    onlyOwner \r\n    public\r\n    {\r\n    require(_owner != 0);\r\n    newOwner = _owner;\r\n    }\r\n    \r\n    function confirmOwner()\r\n    public \r\n    { \r\n    require(newOwner == msg.sender);\r\n    owner = newOwner;\r\n    delete newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n    return 0;\r\n    }\r\n    uint256 c = a*b;\r\n    assert(c/a == b);\r\n    return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a/b;\r\n    return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n    }\r\n}\r\n\r\ncontract ERC20\r\n{\r\n    string public constant name     = \"FIRST DRIVER\";\r\n    string public constant symbol   = \"DRIVER\";\r\n    uint8  public constant decimals =  6;\r\n    uint256 public totalSupply;\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    mapping (address => mapping(address => uint256)) public allowance;\r\n    mapping (address => uint256) public balanceOf;\r\n    \r\n    function balanceOf(address who)\r\n    public constant\r\n    returns (uint)\r\n    {\r\n    return balanceOf[who];\r\n    }\r\n    \r\n    function approve(address _spender, uint _value)\r\n    public\r\n    {\r\n    allowance[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) \r\n    public constant \r\n    returns (uint remaining) \r\n    {\r\n    return allowance[_owner][_spender];\r\n    }\r\n    \r\n    modifier onlyPayloadSize(uint size) \r\n    {\r\n    require(msg.data.length >= size + 4);\r\n    _;\r\n    }\r\n}\r\n\r\ncontract DRIVER_ETHEREUM is OWN, ERC20\r\n{\r\n    using SafeMath for uint256;\r\n    uint256 internal Bank = 0;\r\n    uint256 public Price = 800000000;\r\n    uint256 internal constant Minn = 10000000000000000;\r\n    uint256 internal constant Maxx = 10000000000000000000;\r\n    address internal constant ethdriver = 0x476371DD2bB73e800631F5Acfea5b5c0178aA605;\r\n    \r\n    function() \r\n    payable \r\n    public\r\n        {\r\n        require(msg.value>0);\r\n        require(msg.value >= Minn);\r\n        require(msg.value <= Maxx);\r\n        mintTokens(msg.sender, msg.value);\r\n        }\r\n        \r\n    function mintTokens(address _who, uint256 _value) \r\n    internal \r\n        {\r\n        uint256 tokens = _value / (Price*10/8); //sale\r\n        require(tokens > 0); \r\n        require(balanceOf[_who] + tokens > balanceOf[_who]);\r\n        totalSupply += tokens; //mint\r\n        balanceOf[_who] += tokens; //sale\r\n        uint256 perc = _value.div(100);\r\n        Bank += perc.mul(85);  //reserve\r\n        Price = Bank.div(totalSupply); //pump\r\n        uint256 minus = _value % (Price*10/8); //change\r\n        require(minus > 0);\r\n        emit Transfer(this, _who, tokens);\r\n        _value=0; tokens=0;\r\n        owner.transfer(perc.mul(5)); //owners\r\n        ethdriver.transfer(perc.mul(5)); //systems\r\n        _who.transfer(minus); minus=0;\r\n        }\r\n        \r\n    function transfer (address _to, uint _value) \r\n    public onlyPayloadSize(2 * 32) \r\n    returns (bool success)\r\n        {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        \r\n        if(_to != address(this)) //standart\r\n        {\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        }\r\n        else //tokens to contract\r\n        {\r\n        balanceOf[msg.sender] -= _value;\r\n        uint256 change = _value.mul(Price);\r\n        require(address(this).balance >= change);\r\n\t\t\r\n\t\tif(totalSupply > _value)\r\n\t\t{\r\n        uint256 plus = (address(this).balance - Bank).div(totalSupply);    \r\n        Bank -= change; totalSupply -= _value;\r\n        Bank += (plus.mul(_value));  //reserve\r\n        Price = Bank.div(totalSupply); //pump\r\n        emit Transfer(msg.sender, _to, _value);\r\n        }\r\n        \r\n        if(totalSupply == _value)\r\n        {\r\n        Price = address(this).balance/totalSupply;\r\n        Price = (Price.mul(101)).div(100); //pump\r\n        totalSupply=0; Bank=0;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        owner.transfer(address(this).balance - change);\r\n        }\r\n        msg.sender.transfer(change);\r\n        }\r\n        return true;\r\n        }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) \r\n    public onlyPayloadSize(3 * 32)\r\n    returns (bool success)\r\n        {\r\n        require(balanceOf[_from] >= _value);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n        \r\n        if(_to != address(this)) //standart\r\n        {\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        }\r\n        else //sale\r\n        {\r\n        balanceOf[_from] -= _value;\r\n        uint256 change = _value.mul(Price);\r\n        require(address(this).balance >= change);\r\n        \r\n        if(totalSupply > _value)\r\n        {\r\n        uint256 plus = (address(this).balance - Bank).div(totalSupply);   \r\n        Bank -= change;\r\n        totalSupply -= _value;\r\n        Bank += (plus.mul(_value)); //reserve\r\n        Price = Bank.div(totalSupply); //pump\r\n        emit Transfer(_from, _to, _value);\r\n        allowance[_from][msg.sender] -= _value;\r\n        }\r\n        if(totalSupply == _value)\r\n        {\r\n        Price = address(this).balance/totalSupply;\r\n        Price = (Price.mul(101)).div(100); //pump\r\n        totalSupply=0; Bank=0; \r\n        emit Transfer(_from, _to, _value);\r\n        allowance[_from][msg.sender] -= _value;\r\n        owner.transfer(address(this).balance - change);\r\n        }\r\n        _from.transfer(change);\r\n        }\r\n        return true;\r\n        }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DRIVER_ETHEREUM","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://442f2c995b1cb14729a028535ec4ed63120d6c7cd7af879aa7373f36d00ff3fd"}]}