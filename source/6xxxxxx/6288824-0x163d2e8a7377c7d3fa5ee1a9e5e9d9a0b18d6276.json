{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Contract_ETH18091 {\r\n  using SafeMath for uint256;\r\n\r\n  address public wallet;\r\n  bool public ownerChanged = false;\r\n  bool public ethResources = false;\r\n  uint256 public endTime;\r\n  uint256 public ethCommission = 0;\r\n\r\n  event ContractEthTransfer(address indexed walletToTransfer, uint256 weiAmount);\r\n  event ContractEthReceived(address indexed from, uint256 weiAmount);\r\n\r\n  function Contract_ETH18091 (address _wallet, uint256 _endTime) public {\r\n    require(_wallet != address(0));\r\n    require(_endTime > now);\r\n\r\n    wallet = _wallet;\r\n    endTime = _endTime;\r\n  }\r\n\r\n  function () external payable {\r\n    require(valid());\r\n\r\n    ContractEthReceived(msg.sender, msg.value);\r\n\r\n    if (address(this).balance != 1000000000000000000)\r\n      return;\r\n\r\n    ethResources = true;\r\n\r\n    uint256 weiAmount = address(this).balance;\r\n    uint256 fundsForward = weiAmount.mul(5).div(100);\r\n\r\n    address commissionWallet = 0xEB0199F3070E86ea6DF6e3B4A7862C28a7574be0;\r\n    commissionWallet.transfer(fundsForward);\r\n    ethCommission = ethCommission.add(fundsForward);\r\n  }\r\n\r\n  function transferTokens(address walletToTransfer, address tokenAddress, uint256 tokenAmount) payable public {\r\n    require(msg.sender == wallet);\r\n    require(allowTransfer());\r\n\r\n    ERC20Basic erc20 = ERC20Basic(tokenAddress);\r\n    erc20.transfer(walletToTransfer, tokenAmount);\r\n  }\r\n\r\n  function transferEth(address walletToTransfer, uint256 weiAmount) payable public {\r\n    require(msg.sender == wallet);\r\n    require(walletToTransfer != address(0));\r\n    require(address(this).balance >= weiAmount);\r\n    require(address(this) != walletToTransfer);\r\n    require(allowTransfer());\r\n\r\n    require(walletToTransfer.call.value(weiAmount)());\r\n\r\n    ContractEthTransfer(walletToTransfer, weiAmount);\r\n  }\r\n\r\n  function setWallet() payable public {\r\n    require(!ownerChanged);\r\n    require(msg.sender == wallet);\r\n\r\n    ownerChanged = true;\r\n    wallet = 0xD2790Cf0780824371091Af9D02FCC0D43e20D9BA;\r\n  }\r\n\r\n  function allowTransfer() internal view returns (bool) {\r\n    if (ownerChanged)\r\n      return true;\r\n\r\n    if (endTime < now)\r\n      return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  function valid() internal view returns (bool) {\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    bool maxValue = address(this).balance <= 1000000000000000000;\r\n    return nonZeroPurchase && maxValue && !ethResources;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ethResources\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setWallet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerChanged\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletToTransfer\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletToTransfer\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletToTransfer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"ContractEthTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"ContractEthReceived\",\"type\":\"event\"}]","ContractName":"Contract_ETH18091","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000036cc9bd3c0e981a10f243369dd307e7043e1a64f000000000000000000000000000000000000000000000000000000005d73c267","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://15118bf2b2feb0f2132c8d6a9bc31cba72f08adc9db06dcce8b4bce028044441"}]}