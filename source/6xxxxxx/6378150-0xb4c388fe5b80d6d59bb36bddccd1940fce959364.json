{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Contactable token\r\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\r\n * contact information.\r\n */\r\ncontract Contactable is Ownable {\r\n\r\n  string public contactInformation;\r\n\r\n  /**\r\n    * @dev Allows the owner to set a string with their contact information.\r\n    * @param _info The contact information to attach to the contract.\r\n    */\r\n  function setContactInformation(string _info) public onlyOwner {\r\n    contactInformation = _info;\r\n  }\r\n}\r\n\r\n\r\ncontract IERC223Basic {\r\n  function balanceOf(address _owner) public constant returns (uint);\r\n  function transfer(address _to, uint _value) public;\r\n  function transfer(address _to, uint _value, bytes _data) public;\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint value,\r\n    bytes data\r\n  );\r\n}\r\n\r\n\r\ncontract IERC223 is IERC223Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint);\r\n\r\n  function transferFrom(address _from, address _to, uint _value, bytes _data)\r\n    public;\r\n\r\n  function approve(address _spender, uint _value) public;\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract IERC223BasicReceiver {\r\n  function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n\r\ncontract IERC223Receiver is IERC223BasicReceiver {\r\n  function receiveApproval(address _owner, uint _value) public;\r\n}\r\n\r\n\r\n/**\r\n * @title Basic contract that will hold ERC223 tokens\r\n */\r\ncontract ERC223BasicReceiver is IERC223BasicReceiver {\r\n  event TokensReceived(address sender, address origin, uint value, bytes data);\r\n\r\n  /**\r\n   * @dev Standard ERC223 function that will handle incoming token transfers\r\n   * @param _from address the tokens owner\r\n   * @param _value uint the sent tokens amount\r\n   * @param _data bytes metadata\r\n   */\r\n  function tokenFallback(address _from, uint _value, bytes _data) public {\r\n    require(_from != address(0));\r\n    emit TokensReceived(msg.sender, _from, _value, _data);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Contract that will hold ERC223 tokens\r\n */\r\ncontract ERC223Receiver is ERC223BasicReceiver, IERC223Receiver {\r\n  event ApprovalReceived(address sender, address owner, uint value);\r\n\r\n  /**\r\n   * @dev Function that will handle incoming token approvals\r\n   * @param _owner address the tokens owner\r\n   * @param _value uint the approved tokens amount\r\n   */\r\n  function receiveApproval(address _owner, uint _value) public {\r\n    require(_owner != address(0));\r\n    emit ApprovalReceived(msg.sender, _owner, _value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Contract that can hold and transfer ERC-223 tokens\r\n */\r\ncontract Fund is ERC223Receiver, Contactable {\r\n  IERC223 public token;\r\n  string public fundName;\r\n\r\n  /**\r\n   * @dev Constructor that sets the initial contract parameters\r\n   * @param _token ERC223 address of the ERC-223 token\r\n   * @param _fundName string the fund name\r\n   */\r\n  constructor(IERC223 _token, string _fundName) public {\r\n    require(address(_token) != address(0));\r\n    token = _token;\r\n    fundName = _fundName;\r\n  }\r\n\r\n  /**\r\n   * @dev ERC-20 compatible function to transfer tokens\r\n   * @param _to address the tokens recepient\r\n   * @param _value uint amount of the tokens to be transferred\r\n   */\r\n  function transfer(address _to, uint _value) public onlyOwner {\r\n    token.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to transfer tokens\r\n   * @param _to address the tokens recepient\r\n   * @param _value uint amount of the tokens to be transferred\r\n   * @param _data bytes metadata\r\n   */\r\n  function transfer(address _to, uint _value, bytes _data) public onlyOwner {\r\n    token.transfer(_to, _value, _data);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to transfer tokens from the approved `msg.sender` account\r\n   * @param _from address the tokens owner\r\n   * @param _to address the tokens recepient\r\n   * @param _value uint amount of the tokens to be transferred\r\n   * @param _data bytes metadata\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint _value,\r\n    bytes _data\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    token.transferFrom(_from, _to, _value, _data);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to approve account to spend owned tokens\r\n   * @param _spender address the tokens spender\r\n   * @param _value uint amount of the tokens to be approved\r\n   */\r\n  function approve(address _spender, uint _value) public onlyOwner {\r\n    token.approve(_spender, _value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title HEdpAY\r\n */\r\ncontract Hedpay is IERC223, Contactable {\r\n  using AddressUtils for address;\r\n  using SafeMath for uint;\r\n\r\n  string public constant name = \"HEdpAY\";\r\n  string public constant symbol = \"Hdp.Ñ„\";\r\n  uint8 public constant decimals = 4;\r\n  uint8 public constant secondPhaseBonus = 33;\r\n  uint8[3] public thirdPhaseBonus = [10, 15, 20];\r\n  uint public constant totalSupply = 10000000000000;\r\n  uint public constant secondPhaseStartTime = 1537401600; //20.09.2018\r\n  uint public constant secondPhaseEndTime = 1540943999; //30.10.2018\r\n  uint public constant thirdPhaseStartTime = 1540944000;//31.10.2018\r\n  uint public constant thirdPhaseEndTime = 1543622399;//30.11.2018\r\n  uint public constant cap = 200000 ether;\r\n  uint public constant goal = 25000 ether;\r\n  uint public constant rate = 100;\r\n  uint public constant minimumWeiAmount = 100 finney;\r\n  uint public constant salePercent = 14;\r\n  uint public constant bonusPercent = 1;\r\n  uint public constant teamPercent = 2;\r\n  uint public constant preSalePercent = 3;\r\n\r\n  uint public creationTime;\r\n  uint public weiRaised;\r\n  uint public tokensSold;\r\n  uint public buyersCount;\r\n  uint public saleAmount;\r\n  uint public bonusAmount;\r\n  uint public teamAmount;\r\n  uint public preSaleAmount;\r\n  uint public unsoldTokens;\r\n\r\n  address public teamAddress = 0x7d4E738477B6e8BaF03c4CB4944446dA690f76B5;\r\n  \r\n  Fund public reservedFund;\r\n\r\n  mapping (address => uint) internal balances;\r\n  mapping (address => mapping (address => uint)) internal allowed;\r\n  mapping (address => uint) internal bonuses;\r\n\r\n  /**\r\n   * @dev Constructor that sets initial contract parameters\r\n   */\r\n  constructor() public {\r\n    balances[owner] = totalSupply;\r\n    creationTime = block.timestamp;\r\n    saleAmount = totalSupply.div(100).mul(salePercent).mul(\r\n      10 ** uint(decimals)\r\n    );\r\n    bonusAmount = totalSupply.div(100).mul(bonusPercent).mul(\r\n      10 ** uint(decimals)\r\n    );\r\n    teamAmount = totalSupply.div(100).mul(teamPercent).mul(\r\n      10 ** uint(decimals)\r\n    );\r\n    preSaleAmount = totalSupply.div(100).mul(preSalePercent).mul(\r\n      10 ** uint(decimals)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Gets an account tokens balance\r\n   * @param _owner address the tokens owner\r\n   * @return uint the specified address owned tokens amount\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint) {\r\n    require(_owner != address(0));\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the specified accounts approval value\r\n   * @param _owner address the tokens owner\r\n   * @param _spender address the tokens spender\r\n   * @return uint the specified accounts spending tokens amount\r\n   */\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint)\r\n  {\r\n    require(_owner != address(0));\r\n    require(_spender != address(0));\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the ICO has started\r\n   * @return bool true if the crowdsale began\r\n   */\r\n  function hasStarted() public view returns (bool) {\r\n    return block.timestamp >= secondPhaseStartTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the ICO has ended\r\n   * @return bool `true` if the crowdsale is over\r\n   */\r\n  function hasEnded() public view returns (bool) {\r\n    return block.timestamp > thirdPhaseEndTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the cap has reached\r\n   * @return bool `true` if the cap has reached\r\n   */\r\n  function capReached() public view returns (bool) {\r\n    return weiRaised >= cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the current tokens amount can be purchased for the specified\r\n   * @dev wei amount\r\n   * @param _weiAmount uint wei amount\r\n   * @return uint tokens amount\r\n   */\r\n  function getTokenAmount(uint _weiAmount) public pure returns (uint) {\r\n    return _weiAmount.mul(rate).div((18 - uint(decimals)) ** 10);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the current tokens amount can be purchased for the specified\r\n   * @dev wei amount (including bonuses)\r\n   * @param _weiAmount uint wei amount\r\n   * @return uint tokens amount\r\n   */\r\n  function getTokenAmountBonus(uint _weiAmount)\r\n    public view returns (uint)\r\n  {\r\n    if (hasStarted() && secondPhaseEndTime >= block.timestamp) {\r\n      return(\r\n        getTokenAmount(_weiAmount).\r\n        add(\r\n          getTokenAmount(_weiAmount).\r\n          div(100).\r\n          mul(uint(secondPhaseBonus))\r\n        )\r\n      );\r\n    } else if (thirdPhaseStartTime <= block.timestamp && !hasEnded()) {\r\n      if (_weiAmount > 0 && _weiAmount < 2500 finney) {\r\n        return(\r\n          getTokenAmount(_weiAmount).\r\n          add(\r\n            getTokenAmount(_weiAmount).\r\n            div(100).\r\n            mul(uint(thirdPhaseBonus[0]))\r\n          )\r\n        );\r\n      } else if (_weiAmount >= 2510 finney && _weiAmount < 10000 finney) {\r\n        return(\r\n          getTokenAmount(_weiAmount).\r\n          add(\r\n            getTokenAmount(_weiAmount).\r\n            div(100).\r\n            mul(uint(thirdPhaseBonus[1]))\r\n          )\r\n        );\r\n      } else if (_weiAmount >= 10000 finney) {\r\n        return(\r\n          getTokenAmount(_weiAmount).\r\n          add(\r\n            getTokenAmount(_weiAmount).\r\n            div(100).\r\n            mul(uint(thirdPhaseBonus[2]))\r\n          )\r\n        );\r\n      }\r\n    } else {\r\n      return getTokenAmount(_weiAmount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Gets an account tokens bonus\r\n   * @param _owner address the tokens owner\r\n   * @return uint owned tokens bonus\r\n   */\r\n  function bonusOf(address _owner) public view returns (uint) {\r\n    require(_owner != address(0));\r\n    return bonuses[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets an account tokens balance without freezed part of the bonuses\r\n   * @param _owner address the tokens owner\r\n   * @return uint owned tokens amount without freezed bonuses\r\n   */\r\n  function balanceWithoutFreezedBonus(address _owner)\r\n    public view returns (uint)\r\n  {\r\n    require(_owner != address(0));\r\n    if (block.timestamp >= thirdPhaseEndTime.add(90 days)) {\r\n      if (bonusOf(_owner) < 10000) {\r\n        return balanceOf(_owner);\r\n      } else {\r\n        return balanceOf(_owner).sub(bonuses[_owner].div(2));\r\n      }\r\n    } else if (block.timestamp >= thirdPhaseEndTime.add(180 days)) {\r\n      return balanceOf(_owner);\r\n    } else {\r\n      return balanceOf(_owner).sub(bonuses[_owner]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev ERC-20 compatible function to transfer tokens\r\n   * @param _to address the tokens recepient\r\n   * @param _value uint amount of the tokens to be transferred\r\n   */\r\n  function transfer(address _to, uint _value) public {\r\n    transfer(_to, _value, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Function to transfer tokens\r\n   * @param _to address the tokens recepient\r\n   * @param _value uint amount of the tokens to be transferred\r\n   * @param _data bytes metadata\r\n   */\r\n  function transfer(address _to, uint _value, bytes _data) public {\r\n    require(_value <= balanceWithoutFreezedBonus(msg.sender));\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    _safeTransfer(msg.sender, _to, _value, _data);\r\n\r\n    emit Transfer(msg.sender, _to, _value, _data);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to transfer tokens from the approved `msg.sender` account\r\n   * @param _from address the tokens owner\r\n   * @param _to address the tokens recepient\r\n   * @param _value uint amount of the tokens to be transferred\r\n   * @param _data bytes metadata\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint _value,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n    require(_value <= allowance(_from, msg.sender));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    _safeTransfer(_from, _to, _value, _data);\r\n\r\n    emit Transfer(_from, _to, _value, _data);\r\n    emit Approval(_from, msg.sender, allowance(_from, msg.sender));\r\n  }\r\n\r\n  /**\r\n   * @dev Function to approve account to spend owned tokens\r\n   * @param _spender address the tokens spender\r\n   * @param _value uint amount of the tokens to be approved\r\n   */\r\n  function approve(address _spender, uint _value) public {\r\n    require(_spender != address(0));\r\n    require(_value <= balanceWithoutFreezedBonus(msg.sender));\r\n    allowed[msg.sender][_spender] = _value;\r\n    _safeApprove(_spender, _value);\r\n    emit Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to increase spending tokens amount\r\n   * @param _spender address the tokens spender\r\n   * @param _value uint increase tokens amount\r\n   */\r\n  function increaseApproval(address _spender, uint _value) public {\r\n    require(_spender != address(0));\r\n    require(\r\n      allowance(msg.sender, _spender).add(_value) <=\r\n      balanceWithoutFreezedBonus(msg.sender)\r\n    );\r\n\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_value);\r\n    _safeApprove(_spender, allowance(msg.sender, _spender));\r\n    emit Approval(msg.sender, _spender, allowance(msg.sender, _spender));\r\n  }\r\n\r\n  /**\r\n   * @dev Function to decrease spending tokens amount\r\n   * @param _spender address the tokens spender\r\n   * @param _value uint decrease tokens amount\r\n   */\r\n  function decreaseApproval(address _spender, uint _value) public {\r\n    require(_spender != address(0));\r\n    require(_value <= allowance(msg.sender, _spender));\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_value);\r\n    _safeApprove(_spender, allowance(msg.sender, _spender));\r\n    emit Approval(msg.sender, _spender, allowance(msg.sender, _spender));\r\n  }\r\n\r\n  /**\r\n   * @dev Function to set an account bonus\r\n   * @param _owner address the tokens owner\r\n   * @param _value uint bonus tokens amount\r\n   */\r\n  function setBonus(address _owner, uint _value, bool preSale)\r\n    public onlyOwner\r\n  {\r\n    require(_owner != address(0));\r\n    require(_value <= balanceOf(_owner));\r\n    require(bonusAmount > 0);\r\n    require(_value <= bonusAmount);\r\n\r\n    bonuses[_owner] = _value;\r\n    if (preSale) {\r\n      preSaleAmount = preSaleAmount.sub(_value);\r\n      transfer(_owner, _value, abi.encode(\"transfer the bonus\"));\r\n    } else {\r\n      if (_value <= bonusAmount) {\r\n        bonusAmount = bonusAmount.sub(_value);\r\n        transfer(_owner, _value, abi.encode(\"transfer the bonus\"));\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * @dev Function to refill balance of the specified account\r\n   * @param _to address the tokens recepient\r\n   * @param _weiAmount uint amount of the tokens to be transferred\r\n   */\r\n  function refill(address _to, uint _weiAmount) public onlyOwner {\r\n    require(_preValidateRefill(_to, _weiAmount));\r\n    setBonus(\r\n      _to,\r\n      getTokenAmountBonus(_weiAmount).sub(\r\n        getTokenAmount(_weiAmount)\r\n      ),\r\n      false\r\n    );\r\n    buyersCount = buyersCount.add(1);\r\n    saleAmount = saleAmount.sub(getTokenAmount(_weiAmount));\r\n    transfer(_to, getTokenAmount(_weiAmount), abi.encode(\"refill\"));\r\n  }\r\n\r\n  /**\r\n   * @dev Function to refill balances of the specified accounts\r\n   * @param _to address[] the tokens recepients\r\n   * @param _weiAmount uint[] amounts of the tokens to be transferred\r\n   */\r\n  function refillArray(address[] _to, uint[] _weiAmount) public onlyOwner {\r\n    require(_to.length == _weiAmount.length);\r\n    for (uint i = 0; i < _to.length; i++) {\r\n      refill(_to[i], _weiAmount[i]);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @dev Function that transfers tokens to team address\r\n   */\r\n  function setTeamFund() public onlyOwner{\r\n    transfer(\r\n      teamAddress,\r\n      teamAmount,\r\n      abi.encode(\"transfer reserved for team tokens to the team fund\")\r\n      );\r\n    teamAmount = 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to finalize the sale and define reservedFund\r\n   * @param _reservedFund fund that holds unsold tokens \r\n   */\r\n  function finalize(Fund _reservedFund) public onlyOwner {\r\n    require(saleAmount > 0);\r\n    transfer(\r\n      address(_reservedFund),\r\n      saleAmount,\r\n      abi.encode(\"transfer reserved for team tokens to the team fund\")\r\n    );\r\n    saleAmount = 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to call the `tokenFallback` if the tokens\r\n   * @dev recepient is the smart-contract. If the contract doesn't implement\r\n   * @dev this function transaction fails\r\n   * @param _from address the tokens owner\r\n   * @param _to address the tokens recepient (perhaps the contract)\r\n   * @param _value uint amount of the tokens to be transferred\r\n   * @param _data bytes metadata\r\n   */\r\n  function _safeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint _value,\r\n    bytes _data\r\n  )\r\n    internal\r\n  {\r\n    if (_to.isContract()) {\r\n      IERC223BasicReceiver receiver = IERC223BasicReceiver(_to);\r\n      receiver.tokenFallback(_from, _value, _data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to call the `receiveApproval` if the tokens\r\n   * @dev recepient is the smart-contract. If the contract doesn't implement\r\n   * @dev this function transaction fails\r\n   * @param _spender address the tokens recepient (perhaps the contract)\r\n   * @param _value uint amount of the tokens to be approved\r\n   */\r\n  function _safeApprove(address _spender, uint _value) internal {\r\n    if (_spender.isContract()) {\r\n      IERC223Receiver receiver = IERC223Receiver(_spender);\r\n      receiver.receiveApproval(msg.sender, _value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to prevalidate refill before execution\r\n   * @param _to address the tokens recepient\r\n   * @param _weiAmount uint amount of the tokens to be transferred\r\n   * @return bool `true` if the refill can be executed\r\n   */\r\n  function _preValidateRefill(address _to, uint _weiAmount)\r\n    internal view returns (bool)\r\n  {\r\n    return(\r\n      hasStarted() && _weiAmount > 0 &&  weiRaised.add(_weiAmount) <= cap\r\n      && _to != address(0) && _weiAmount >= minimumWeiAmount &&\r\n      getTokenAmount(_weiAmount) <= saleAmount\r\n    );\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"refill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceWithoutFreezedBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"bonusOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumWeiAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contactInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdPhaseStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPhaseStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reservedFund\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_weiAmount\",\"type\":\"uint256[]\"}],\"name\":\"refillArray\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"preSale\",\"type\":\"bool\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"thirdPhaseBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdPhaseEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPhaseEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_info\",\"type\":\"string\"}],\"name\":\"setContactInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSalePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTeamFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"salePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPhaseBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Hedpay","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://16b0dac7be90df7c669208d344f50bbf3257950f399283fb5e6992afbc5b4970"}]}