{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\ncontract ERC20BasicInterface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function decimals() public view returns (uint8);\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function totalSupply() public view returns (uint256 supply);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract ERC20Interface is ERC20BasicInterface {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n}\r\n\r\n/**\r\n * @title ERC20Pocket\r\n *\r\n * This contract keeps particular token for the single owner.\r\n *\r\n * Original purpose is to be able to separate your tokens into different pockets for dedicated purposes.\r\n * Whenever a withdrawal happen, it will be transparent that tokens were taken from a particular pocket.\r\n *\r\n * Contract emits purely informational events when transfers happen, for better visualization on explorers.\r\n */\r\ncontract ERC20Pocket is ERC20BasicInterface {\r\n    ERC20Interface public constant TOKEN = ERC20Interface(0x0b34a04b77Aa9bd2C07Ef365C05f7D0234C95630);\r\n    address public constant OWNER = 0xCba6eE74b7Ca65Bd0506cf21d62bDd7c71F86AD8;\r\n    string constant NAME = 'Optherium Team Tokens';\r\n    string constant SYMBOL = 'OPEXteam';\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == OWNER, 'Access denied');\r\n        _;\r\n    }\r\n\r\n    function deposit(uint _value) public onlyOwner() returns(bool) {\r\n        require(TOKEN.transferFrom(OWNER, address(this), _value), 'Deposit failed');\r\n        emit Transfer(0x0, OWNER, _value);\r\n        return true;\r\n    }\r\n\r\n    function withdraw(address _to, uint _value) public onlyOwner() returns(bool) {\r\n        require(TOKEN.transfer(_to, _value), 'Withdrawal failed');\r\n        emit Transfer(OWNER, 0x0, _value);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view returns(uint) {\r\n        return TOKEN.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOf(address _holder) public view returns(uint) {\r\n        if (_holder == OWNER) {\r\n            return totalSupply();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function decimals() public view returns(uint8) {\r\n        return TOKEN.decimals();\r\n    }\r\n\r\n    function name() public view returns(string) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() public view returns(string) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns(bool) {\r\n        if (_to == address(this)) {\r\n            deposit(_value);\r\n        } else {\r\n            withdraw(_to, _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function recoverTokens(ERC20BasicInterface _token, address _to, uint _value) public onlyOwner() returns(bool) {\r\n        require(address(_token) != address(TOKEN), 'Can not recover this token');\r\n        return _token.transfer(_to, _value);\r\n    }\r\n}\r\n\r\ncontract OPEXInterface {\r\n    function transferWithLock(address _to, uint _value, uint _unlockDate) public returns(bool);\r\n}\r\n\r\n/**\r\n * @title OPEXteam\r\n *\r\n * This contract keeps OPEX tokens locked for the Optherium team.\r\n *\r\n * Unlock date can be extended by OPEX team, but not decreased.\r\n */\r\ncontract OPEXteam is ERC20Pocket {\r\n    uint constant JANUARY_1ST_2020_00_00_00 = 1577836800;\r\n    uint constant JANUARY_1ST_2030_00_00_00 = 1893456000;\r\n    uint public unlockDate = JANUARY_1ST_2020_00_00_00;\r\n\r\n    event UnlockDateExtended(uint newUnlockDate);\r\n\r\n    function withdraw(address _to, uint _value) public returns(bool) {\r\n        require(currentDate() > unlockDate, 'Tokens are still locked.');\r\n        return super.withdraw(_to, _value);\r\n    }\r\n\r\n    function extendUnlockDate(uint _newUnlockDate) public onlyOwner() returns(bool) {\r\n        require(_newUnlockDate > unlockDate, 'New unlock date must be further into the future.');\r\n        require(_newUnlockDate <= JANUARY_1ST_2030_00_00_00, 'New unlock date must be before 1st January 2025.');\r\n        unlockDate = _newUnlockDate;\r\n        emit UnlockDateExtended(_newUnlockDate);\r\n        return true;\r\n    }\r\n\r\n    function currentDate() internal view returns(uint) {\r\n        return now;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUnlockDate\",\"type\":\"uint256\"}],\"name\":\"extendUnlockDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newUnlockDate\",\"type\":\"uint256\"}],\"name\":\"UnlockDateExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OPEXteam","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://539729ddf2922779f5b27ab2163b4c036db8faf4feb920704501fd91e1979e4d"}]}