{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n///////////////////////////////////////////////////////////\r\n//\r\n// The Train That Never Stops\r\n//\r\n// https://thetrainthatneverstops.blogspot.com/\r\n//\r\n// Catch the train now and become a passenger for ever!\r\n//\r\n// This train size: S\r\n// Seat cost: 0.1 ether\r\n// Jackpots: 0.1, 1 and 10 ether\r\n//\r\n// Send EXACTLY 0.1 ether to the contract address (other amounts are rejected)\r\n// Set gas limit to 300'000\r\n//\r\n// 20% (.02 ether) goes immediately to a random selected passenger\r\n// 20% (.02 ether) goes to Jackpot 1\r\n// 20% (.02 ether) goes to Jackpot 2\r\n// 20% (.02 ether) goes to Jackpot 3\r\n// 20% (.02 ether) goes to the train driver (reinvested in marketing)\r\n//\r\n// Every 5 passenger Jackpot 1 (0.1 ether) goes to a random selected passenger\r\n// Every 50 passenger Jackpot 2 (1 ether) goes to a random selected passenger\r\n// Every 500 passenger Jackpot 3 (10 ether) goes to a random selected passenger\r\n// \r\n// ==> Invite others to join! The more passengers, the more you win! <==\r\n//\r\n//////////////////////////////////////////////////////////\r\n\r\ncontract TheTrainS {\r\n    // Creator of the contract\r\n    address traindriver;                   \r\n    // The actual number of passengers\r\n    uint256 public numbofpassengers = 0;    \r\n    // Winnig seat and (pseudo)random used to select the winning passengers\r\n    uint256 winseat = 0;\r\n    uint256 randomhash;\r\n    // The amount of the 3 Jackpots\r\n    uint256 public jackpot1 = 0;\r\n    uint256 public jackpot2 = 0;\r\n    uint256 public jackpot3 = 0;\r\n    // Modulo is used to detect when Jackpots are to be paid\r\n    uint256 modulo = 0;\r\n    // The exact cost to become a passenger\r\n    uint256 seatprice = 0.1 ether; // Seat price for Small train\r\n    // The percentage to distribute (20%)\r\n    uint256 percent = seatprice / 10 * 2;\r\n    \r\n    // Recording passenger address and it's gain\r\n    struct Passenger{\r\n        address passengeraddress;\r\n        uint gain;\r\n    }\r\n    \r\n    // The list of all passengers\r\n    Passenger[] passengers;\r\n    \r\n    // Contract constructor\r\n    constructor() public {\r\n        traindriver = msg.sender; // Train driver is the contract creator\r\n    }\r\n    \r\n    function() external payable{\r\n        \r\n        if (msg.value != seatprice) revert(); // Exact seat price or stop\r\n        \r\n        // Add passenger to the list\r\n        passengers.push(Passenger({\r\n            passengeraddress: msg.sender, // Record passenger address\r\n            gain: 0\r\n        }));\r\n        \r\n        numbofpassengers++; // One more passenger welcome\r\n        \r\n        // send part to train driver\r\n        traindriver.transfer(percent);\r\n        \r\n        // take random number to select a winning passenger\r\n        randomhash = uint256(blockhash(block.number -1)) + numbofpassengers;\r\n        winseat = randomhash % numbofpassengers; // can be any seat\r\n        \r\n        // send part to winning passenger\r\n        passengers[winseat].passengeraddress.transfer(percent);\r\n         \r\n        // Jackpot 1\r\n        jackpot1 += percent; // Add value to Jackpot 1\r\n        modulo = numbofpassengers % 5; // Every 5 passenger\r\n        if (modulo == 0) // It's time to pay Jackpot 1\r\n        {\r\n            randomhash = uint256(blockhash(block.number -2));\r\n            winseat = randomhash % numbofpassengers; // can be any seat\r\n            passengers[winseat].passengeraddress.transfer(jackpot1);\r\n            jackpot1 = 0; // reset Jackpot\r\n        }\r\n        \r\n        // Jackpot 2\r\n        jackpot2 += percent;\r\n        modulo = numbofpassengers % 50; // Every 50 passenger\r\n        if (modulo == 0) // It's time to pay Jackpot 2\r\n        {\r\n            randomhash = uint256(blockhash(block.number -3));\r\n            winseat = randomhash % numbofpassengers; // can be any seat\r\n            passengers[winseat].passengeraddress.transfer(jackpot2);\r\n            jackpot2 = 0; // reset Jackpot\r\n        }\r\n        \r\n        // Jackpot 3\r\n        jackpot3 += percent;\r\n        modulo = numbofpassengers % 500; // Every 500 passenger\r\n        if (modulo == 0) // It's time to pay Jackpot 3\r\n        {\r\n            randomhash = uint256(blockhash(block.number -4));\r\n            winseat = randomhash % numbofpassengers; // can be any seat\r\n            passengers[winseat].passengeraddress.transfer(jackpot3);\r\n            jackpot3 = 0; // reset Jackpot\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numbofpassengers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TheTrainS","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8638a566395c42411ff2d9136d4497d6f76625eef74fabf178da0642b210e54d"}]}