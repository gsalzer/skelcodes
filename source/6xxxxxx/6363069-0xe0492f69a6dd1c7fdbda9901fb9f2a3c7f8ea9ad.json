{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ContractOwner\r\n * @dev The ContractOwner contract serves the role of interactng with the functions of Ownable contracts,\r\n * this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract HasContracts is Ownable {\r\n\r\n  /**\r\n   * @dev Relinquish control of the owned _contract.\r\n   */\r\n  function renounceOwnedOwnership(address _contract) public onlyOwner {\r\n    Ownable(_contract).renounceOwnership();\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer control of the owned _contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnedOwnership(address _contract, address _newOwner) public onlyOwner {\r\n    Ownable(_contract).transferOwnership(_newOwner);\r\n  }\r\n}\r\n\r\ncontract IOwnable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  function renounceOwnership() public;\r\n  function transferOwnership(address _newOwner) public;\r\n}\r\n\r\ncontract ITokenDistributor is IOwnable {\r\n\r\n    address public targetToken;\r\n    address[] public stakeHolders;\r\n    uint256 public maxStakeHolders;\r\n    event InsufficientTokenBalance( address indexed _token, uint256 _time );\r\n    event TokensDistributed( address indexed _token, uint256 _total, uint256 _time );\r\n\r\n    function isDistributionDue (address _token) public view returns (bool);\r\n    function isDistributionDue () public view returns (bool);\r\n    function countStakeHolders () public view returns (uint256);\r\n    function getTokenBalance(address _token) public view returns (uint256);\r\n    function getPortion (uint256 _total) public view returns (uint256);\r\n    function setTargetToken (address _targetToken) public returns (bool);\r\n    function distribute (address _token) public returns (bool);\r\n    function distribute () public returns (bool);\r\n}\r\n\r\n/**\r\n* A secondary contract which can interact directly with tokenDistributor\r\n* and can ultimately be made Owner to acheieve full `Code is Law` state\r\n*/\r\ncontract HasDistributorHandler is Ownable {\r\n    /**\r\n    *   Allows distributing of tokens from tokenDistributor contracts\r\n    *   supports only 2 versions at present\r\n    *   Version1 : distribute()\r\n    *   version2 : distribute(address token) ( fallback() ) : for backward compatibility\r\n    *\r\n    *   version type has to be passed in to complete the release, default is version1.\r\n    *  0 => version1\r\n    *  1 => version2\r\n    *\r\n    */\r\n\r\n    enum distributorContractVersion { v1, v2 }\r\n\r\n    address public tokenDistributor;\r\n    distributorContractVersion public distributorVersion;\r\n\r\n    constructor (distributorContractVersion _distributorVersion, address _tokenDistributor) public Ownable() {\r\n        setTokenDistributor(_distributorVersion, _tokenDistributor);\r\n    }\r\n\r\n    function setTokenDistributor (distributorContractVersion _distributorVersion, address _tokenDistributor) public onlyOwner returns (bool) {\r\n      require(tokenDistributor == 0x0, 'Token Distributor already set');\r\n      distributorVersion = _distributorVersion;\r\n      tokenDistributor = _tokenDistributor;\r\n      return true;\r\n    }\r\n\r\n    function distribute () public returns (bool) {\r\n        require(tokenDistributor != 0x0, 'Token Distributor not set');\r\n\r\n        if (distributorVersion == distributorContractVersion.v2) {\r\n          /* TODO Check functionaliy and optimize  */\r\n            return tokenDistributor.call(0x0);\r\n        } else {\r\n          return ITokenDistributor(tokenDistributor).distribute();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function () public {\r\n      distribute();\r\n    }\r\n}\r\n\r\npragma solidity^0.4.24;\r\n\r\ncontract IVestingContract {\r\n  function release() public;\r\n  function release(address token) public;\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract TokenHandler is Ownable {\r\n\r\n    address public targetToken;\r\n\r\n    constructor ( address _targetToken) public Ownable() {\r\n        setTargetToken(_targetToken);\r\n    }\r\n\r\n    function getTokenBalance(address _token) public view returns (uint256) {\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function setTargetToken (address _targetToken) public onlyOwner returns (bool) {\r\n      require(targetToken == 0x0, 'Target token already set');\r\n      targetToken = _targetToken;\r\n      return true;\r\n    }\r\n\r\n    function _transfer (address _token, address _recipient, uint256 _value) internal {\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        token.transfer(_recipient, _value);\r\n    }\r\n}\r\n\r\n/*\r\nSupports default zeppelin vesting contract\r\nhttps://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/TokenVesting.sol\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract VestingHandler is TokenHandler {\r\n\r\n    /**\r\n    *   Allows releasing of tokens from vesting contracts\r\n    *   supports only 2 versions at present\r\n    *   Version1 : release()\r\n    *   version2 : release(address token)\r\n    *\r\n    *   version type has to be passed in to complete the release, default is version1.\r\n    *  0 => version1\r\n    *  1 => version2\r\n    */\r\n\r\n    enum vestingContractVersion { v1, v2 }\r\n\r\n    address public vestingContract;\r\n    vestingContractVersion public targetVersion;\r\n\r\n    constructor ( vestingContractVersion _targetVersion, address _vestingContract, address _targetToken) public\r\n    TokenHandler(_targetToken){\r\n        setVestingContract(_targetVersion, _vestingContract);\r\n    }\r\n\r\n    function setVestingContract (vestingContractVersion _version, address _vestingContract) public onlyOwner returns (bool) {\r\n        require(vestingContract == 0x0, 'Vesting Contract already set');\r\n        vestingContract = _vestingContract;\r\n        targetVersion = _version;\r\n        return true;\r\n    }\r\n\r\n    function _releaseVesting (vestingContractVersion _version, address _vestingContract, address _targetToken) internal returns (bool) {\r\n        require(_targetToken != 0x0, 'Target token not set');\r\n        if (_version == vestingContractVersion.v1) {\r\n            return _releaseVesting (_version, _vestingContract);\r\n        } else if (_version == vestingContractVersion.v2){\r\n            IVestingContract(_vestingContract).release(_targetToken);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _releaseVesting (vestingContractVersion _version, address _vestingContract) internal returns (bool) {\r\n        if (_version != vestingContractVersion.v1) {\r\n            revert('You need to pass in the additional argument(s)');\r\n        }\r\n        IVestingContract(_vestingContract).release();\r\n        return true;\r\n    }\r\n\r\n    function releaseVesting (vestingContractVersion _version, address _vestingContract, address _targetToken) public onlyOwner returns (bool) {\r\n        return _releaseVesting(_version, _vestingContract, _targetToken);\r\n    }\r\n\r\n    function releaseVesting (vestingContractVersion _version, address _vestingContract) public onlyOwner returns (bool) {\r\n        return _releaseVesting(_version, _vestingContract);\r\n    }\r\n\r\n    function release () public returns (bool){\r\n        require(vestingContract != 0x0, 'Vesting Contract not set');\r\n        return _releaseVesting(targetVersion, vestingContract, targetToken);\r\n    }\r\n\r\n    function () public {\r\n      release();\r\n    }\r\n}\r\n\r\n/**\r\n* Allows using one call to both release and Distribute tokens from\r\n* Handler and distributor in cases where separate contracts\r\n* Presently does not support re-use\r\n*/\r\ncontract VestingHasDistributorHandler is VestingHandler, HasDistributorHandler {\r\n\r\n    constructor (distributorContractVersion _distributorVersion, address _tokenDistributor, vestingContractVersion _targetVersion, address _vestingContract, address _targetToken) public\r\n    VestingHandler( _targetVersion, _vestingContract, _targetToken )\r\n    HasDistributorHandler(_distributorVersion, _tokenDistributor)\r\n    {\r\n    }\r\n\r\n    function releaseAndDistribute () public {\r\n        release();\r\n        distribute();\r\n    }\r\n\r\n    function () {\r\n      releaseAndDistribute();\r\n    }\r\n}\r\n\r\ncontract VestingHasDistributorHandlerHasContracts is VestingHasDistributorHandler, HasContracts {\r\n\r\n    constructor (distributorContractVersion _distributorVersion, address _tokenDistributor, vestingContractVersion _targetVersion, address _vestingContract, address _targetToken) public\r\n    VestingHasDistributorHandler( _distributorVersion, _tokenDistributor, _targetVersion, _vestingContract, _targetToken )\r\n    HasContracts()\r\n    {\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"renounceOwnedOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDistributor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetToken\",\"type\":\"address\"}],\"name\":\"setTargetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseAndDistribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"uint8\"},{\"name\":\"_vestingContract\",\"type\":\"address\"},{\"name\":\"_targetToken\",\"type\":\"address\"}],\"name\":\"releaseVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"uint8\"},{\"name\":\"_vestingContract\",\"type\":\"address\"}],\"name\":\"releaseVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"uint8\"},{\"name\":\"_vestingContract\",\"type\":\"address\"}],\"name\":\"setVestingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnedOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_distributorVersion\",\"type\":\"uint8\"},{\"name\":\"_tokenDistributor\",\"type\":\"address\"}],\"name\":\"setTokenDistributor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributorVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_distributorVersion\",\"type\":\"uint8\"},{\"name\":\"_tokenDistributor\",\"type\":\"address\"},{\"name\":\"_targetVersion\",\"type\":\"uint8\"},{\"name\":\"_vestingContract\",\"type\":\"address\"},{\"name\":\"_targetToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VestingHasDistributorHandlerHasContracts","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000009db4cad25a2b548fd7cadc31933f5ec71e598354000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e3d6e2a1fc2c65210a799502af92873ab42f720000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://99b3350bd397fac5de9e94e79fb1d2fa0b7b841f6b5aac86051df17f4e4a54e5"}]}