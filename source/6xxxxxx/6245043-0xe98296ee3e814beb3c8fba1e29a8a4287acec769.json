{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract TokenDestructible is Ownable {\r\n\r\n  constructor() public payable { }\r\n\r\n  /**\r\n   * @notice Terminate contract and refund to owner\r\n   * @param _tokens List of addresses of ERC20 or ERC20Basic token contracts to\r\n   refund.\r\n   * @notice The called token contracts could try to re-enter this contract. Only\r\n   supply token contracts you trust.\r\n   */\r\n  function destroy(address[] _tokens) public onlyOwner {\r\n\r\n    // Transfer tokens to owner\r\n    for (uint256 i = 0; i < _tokens.length; i++) {\r\n      ERC20Basic token = ERC20Basic(_tokens[i]);\r\n      uint256 balance = token.balanceOf(this);\r\n      token.transfer(owner, balance);\r\n    }\r\n\r\n    // Transfer Eth to owner and terminate contract\r\n    selfdestruct(owner);\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract IndividualLockableToken is PausableToken{\r\n\r\n  using SafeMath for uint256;\r\n\r\n\r\n\r\n  event LockTimeSetted(address indexed holder, uint256 old_release_time, uint256 new_release_time);\r\n\r\n  event Locked(address indexed holder, uint256 locked_balance_change, uint256 total_locked_balance, uint256 release_time);\r\n\r\n\r\n\r\n  struct lockState {\r\n\r\n    uint256 locked_balance;\r\n\r\n    uint256 release_time;\r\n\r\n  }\r\n\r\n\r\n\r\n  // default lock period\r\n\r\n  uint256 public lock_period = 24 weeks;\r\n\r\n\r\n\r\n  mapping(address => lockState) internal userLock;\r\n\r\n\r\n\r\n  // Specify the time that a particular person's lock will be released\r\n\r\n  function setReleaseTime(address _holder, uint256 _release_time)\r\n\r\n    public\r\n\r\n    onlyOwner\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(_holder != address(0));\r\n\r\n\trequire(_release_time >= block.timestamp);\r\n\r\n\r\n\r\n\tuint256 old_release_time = userLock[_holder].release_time;\r\n\r\n\r\n\r\n\tuserLock[_holder].release_time = _release_time;\r\n\r\n\temit LockTimeSetted(_holder, old_release_time, userLock[_holder].release_time);\r\n\r\n\treturn true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Returns the point at which token holder's lock is released\r\n\r\n  function getReleaseTime(address _holder)\r\n\r\n    public\r\n\r\n    view\r\n\r\n    returns (uint256)\r\n\r\n  {\r\n\r\n    require(_holder != address(0));\r\n\r\n\r\n\r\n\treturn userLock[_holder].release_time;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Unlock a specific person. Free trading even with a lock balance\r\n\r\n  function clearReleaseTime(address _holder)\r\n\r\n    public\r\n\r\n    onlyOwner\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(_holder != address(0));\r\n\r\n    require(userLock[_holder].release_time > 0);\r\n\r\n\r\n\r\n\tuint256 old_release_time = userLock[_holder].release_time;\r\n\r\n\r\n\r\n\tuserLock[_holder].release_time = 0;\r\n\r\n\temit LockTimeSetted(_holder, old_release_time, userLock[_holder].release_time);\r\n\r\n\treturn true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Increase the lock balance of a specific person.\r\n\r\n  // If you only want to increase the balance, the release_time must be specified in advance.\r\n\r\n  function increaseLockBalance(address _holder, uint256 _value)\r\n\r\n    public\r\n\r\n    onlyOwner\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n\trequire(_holder != address(0));\r\n\r\n\trequire(_value > 0);\r\n\r\n\trequire(balances[_holder] >= _value);\r\n\r\n\r\n\r\n\tif (userLock[_holder].release_time == 0) {\r\n\r\n\t\tuserLock[_holder].release_time = block.timestamp + lock_period;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tuserLock[_holder].locked_balance = (userLock[_holder].locked_balance).add(_value);\r\n\r\n\temit Locked(_holder, _value, userLock[_holder].locked_balance, userLock[_holder].release_time);\r\n\r\n\treturn true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Decrease the lock balance of a specific person.\r\n\r\n  function decreaseLockBalance(address _holder, uint256 _value)\r\n\r\n    public\r\n\r\n    onlyOwner\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n\trequire(_holder != address(0));\r\n\r\n\trequire(_value > 0);\r\n\r\n\trequire(userLock[_holder].locked_balance >= _value);\r\n\r\n\r\n\r\n\tuserLock[_holder].locked_balance = (userLock[_holder].locked_balance).sub(_value);\r\n\r\n\temit Locked(_holder, _value, userLock[_holder].locked_balance, userLock[_holder].release_time);\r\n\r\n\treturn true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Clear the lock.\r\n\r\n  function clearLock(address _holder)\r\n\r\n    public\r\n\r\n    onlyOwner\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n\trequire(_holder != address(0));\r\n\r\n\trequire(userLock[_holder].release_time > 0);\r\n\r\n\r\n\r\n\tuserLock[_holder].locked_balance = 0;\r\n\r\n\tuserLock[_holder].release_time = 0;\r\n\r\n\temit Locked(_holder, 0, userLock[_holder].locked_balance, userLock[_holder].release_time);\r\n\r\n\treturn true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Check the amount of the lock\r\n\r\n  function getLockedBalance(address _holder)\r\n\r\n    public\r\n\r\n    view\r\n\r\n    returns (uint256)\r\n\r\n  {\r\n\r\n    if(block.timestamp >= userLock[_holder].release_time) return uint256(0);\r\n\r\n    return userLock[_holder].locked_balance;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Check your remaining balance\r\n\r\n  function getFreeBalance(address _holder)\r\n\r\n    public\r\n\r\n    view\r\n\r\n    returns (uint256)\r\n\r\n  {\r\n\r\n    if(block.timestamp >= userLock[_holder].release_time) return balances[_holder];\r\n\r\n    return balances[_holder].sub(userLock[_holder].locked_balance);\r\n\r\n  }\r\n\r\n\r\n\r\n  // transfer overrride\r\n\r\n  function transfer(\r\n\r\n    address _to,\r\n\r\n    uint256 _value\r\n\r\n  )\r\n\r\n    public\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(getFreeBalance(msg.sender) >= _value);\r\n\r\n    return super.transfer(_to, _value);\r\n\r\n  }\r\n\r\n\r\n\r\n  // transferFrom overrride\r\n\r\n  function transferFrom(\r\n\r\n    address _from,\r\n\r\n    address _to,\r\n\r\n    uint256 _value\r\n\r\n  )\r\n\r\n    public\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(getFreeBalance(_from) >= _value);\r\n\r\n    return super.transferFrom(_from, _to, _value);\r\n\r\n  }\r\n\r\n\r\n\r\n  // approve overrride\r\n\r\n  function approve(\r\n\r\n    address _spender,\r\n\r\n    uint256 _value\r\n\r\n  )\r\n\r\n    public\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(getFreeBalance(msg.sender) >= _value);\r\n\r\n    return super.approve(_spender, _value);\r\n\r\n  }\r\n\r\n\r\n\r\n  // increaseApproval overrride\r\n\r\n  function increaseApproval(\r\n\r\n    address _spender,\r\n\r\n    uint _addedValue\r\n\r\n  )\r\n\r\n    public\r\n\r\n    returns (bool success)\r\n\r\n  {\r\n\r\n    require(getFreeBalance(msg.sender) >= allowed[msg.sender][_spender].add(_addedValue));\r\n\r\n    return super.increaseApproval(_spender, _addedValue);\r\n\r\n  }\r\n\r\n\r\n\r\n  // decreaseApproval overrride\r\n\r\n  function decreaseApproval(\r\n\r\n    address _spender,\r\n\r\n    uint _subtractedValue\r\n\r\n  )\r\n\r\n    public\r\n\r\n    returns (bool success)\r\n\r\n  {\r\n\r\n\tuint256 oldValue = allowed[msg.sender][_spender];\r\n\r\n\r\n\r\n    if (_subtractedValue < oldValue) {\r\n\r\n      require(getFreeBalance(msg.sender) >= oldValue.sub(_subtractedValue));\r\n\r\n    }\r\n\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract VictorToken is IndividualLockableToken, TokenDestructible {\r\n\r\n  using SafeMath for uint256;\r\n\r\n\r\n\r\n  string public constant name = \"VictorToken\";\r\n\r\n  string public constant symbol = \"VIC\";\r\n\r\n  uint8  public constant decimals = 18;\r\n\r\n\r\n\r\n  // 10,000,000,000 10 billion\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\r\n\r\n\r\n\r\n  constructor()\r\n\r\n    public\r\n\r\n  {\r\n\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n\r\n    balances[msg.sender] = totalSupply_;\r\n\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_release_time\",\"type\":\"uint256\"}],\"name\":\"setReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseLockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getFreeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"clearLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"clearReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseLockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lock_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"old_release_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_release_time\",\"type\":\"uint256\"}],\"name\":\"LockTimeSetted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked_balance_change\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total_locked_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"release_time\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"VictorToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d3d3175a94356ceaf357815a01bd8f3e7191efe9d74c6851cf4d098720c924d9"}]}