{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by requiring a state.\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\n\r\ncontract Haltable is Ownable {\r\n  bool public halted = false;\r\n\r\n  modifier inNormalState {\r\n    require(!halted);\r\n    _;\r\n  }\r\n\r\n  modifier inEmergencyState {\r\n    require(halted);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner inNormalState {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner inEmergencyState {\r\n    halted = false;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\n\r\ncontract StandardToken is DetailedERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract ZEON is StandardToken { //!\r\n\r\n  constructor() public DetailedERC20(\"ZEON\", \"ZEON\", 18) { //!\r\n    totalSupply_ = 50000000000000000000000000000;\r\n    balances[msg.sender] = totalSupply_;\r\n    emit Transfer(address(0), msg.sender, totalSupply_);\r\n  }\r\n}\r\n\r\ncontract InvestorWhiteList is Ownable {\r\n  mapping (address => bool) public investorWhiteList;\r\n\r\n  mapping (address => address) public referralList;\r\n\r\n  function InvestorWhiteList() {\r\n\r\n  }\r\n\r\n  function addInvestorToWhiteList(address investor) external onlyOwner {\r\n    require(investor != 0x0 && !investorWhiteList[investor]);\r\n    investorWhiteList[investor] = true;\r\n  }\r\n\r\n  function removeInvestorFromWhiteList(address investor) external onlyOwner {\r\n    require(investor != 0x0 && investorWhiteList[investor]);\r\n    investorWhiteList[investor] = false;\r\n  }\r\n\r\n  //when new user will contribute ICO contract will automatically send bonus to referral\r\n  function addReferralOf(address investor, address referral) external onlyOwner {\r\n    require(investor != 0x0 && referral != 0x0 && referralList[investor] == 0x0 && investor != referral);\r\n    referralList[investor] = referral;\r\n  }\r\n\r\n  function isAllowed(address investor) constant external returns (bool result) {\r\n    return investorWhiteList[investor];\r\n  }\r\n\r\n  function getReferralOf(address investor) constant external returns (address result) {\r\n    return referralList[investor];\r\n  }\r\n}\r\n\r\ncontract PriceReceiver {\r\n  address public ethPriceProvider;\r\n\r\n  modifier onlyEthPriceProvider() {\r\n    require(msg.sender == ethPriceProvider);\r\n    _;\r\n  }\r\n\r\n  function receiveEthPrice(uint ethUsdPrice) external;\r\n\r\n  function setEthPriceProvider(address provider) external;\r\n\r\n}\r\n\r\n// Sale of unsold tokens [smart-contract]\r\n\r\ncontract ZEONPrivateSale is Haltable, PriceReceiver {\r\n\r\n  using SafeMath for uint;\r\n\r\n  string public constant name = \"ZEONPrivateSale\";\r\n\r\n  ZEON public token;\r\n\r\n  address public beneficiary;\r\n\r\n  InvestorWhiteList public investorWhiteList;\r\n\r\n  uint public constant TokenUsdRate = 50; //0.5 cents for one token\r\n  uint public constant MonthsInSeconds = 2629746;\r\n\r\n  uint public ethUsdRate;\r\n\r\n  uint public collected = 0;\r\n\r\n  uint public tokensSold = 0;\r\n\r\n  uint public startTime; \r\n\r\n  uint public endTime;\r\n\r\n  bool public crowdsaleFinished = false;\r\n\r\n  mapping (address => uint) public deposited;\r\n\r\n  event NewContribution(address indexed holder, uint tokenAmount, uint etherAmount);\r\n\r\n  event NewReferralTransfer(address indexed investor, address indexed referral, uint tokenAmount);\r\n\r\n  modifier icoActive() {\r\n    require(now >= startTime && now < endTime);\r\n    _;\r\n  }\r\n\r\n  modifier icoEnded() {\r\n    require(now >= endTime);\r\n    _;\r\n  }\r\n\r\n  function ZEONPrivateSale(\r\n    address _token,\r\n    address _beneficiary,\r\n    address _investorWhiteList,\r\n    uint _baseEthUsdPrice,\r\n\r\n    uint _startTime\r\n  ) {\r\n    token = ZEON (_token); //token's smart name\r\n    beneficiary = _beneficiary;\r\n    investorWhiteList = InvestorWhiteList(_investorWhiteList);\r\n\r\n    startTime = _startTime;\r\n    endTime = startTime.add(MonthsInSeconds.mul(12));\r\n\r\n    ethUsdRate = _baseEthUsdPrice;\r\n  }\r\n\r\n  function() payable {\r\n    doPurchase();\r\n  }\r\n\r\n  function withdraw() external onlyOwner {\r\n    token.transfer(beneficiary, token.balanceOf(this));\r\n  }\r\n\r\n  function calculateTokens(uint ethReceived) internal view returns (uint) {\r\n    uint actualTokenUsdRate = TokenUsdRate.add(TokenUsdRate.mul((now - startTime).mul(1000).div(MonthsInSeconds).div(100).mul(10)).div(1000));\r\n    \r\n    return ethReceived.mul(ethUsdRate.mul(100)).div(actualTokenUsdRate);\r\n  }\r\n\r\n  function calculateReferralBonus(uint amountTokens) internal view returns (uint) {\r\n    return amountTokens.mul(8).div(100);\r\n  }\r\n\r\n  function receiveEthPrice(uint ethUsdPrice) external onlyEthPriceProvider {\r\n    require(ethUsdPrice > 0);\r\n    ethUsdRate = ethUsdPrice;\r\n  }\r\n\r\n  function setEthPriceProvider(address provider) external onlyOwner {\r\n    require(provider != 0x0);\r\n    ethPriceProvider = provider;\r\n  }\r\n\r\n  function setNewWhiteList(address newWhiteList) external onlyOwner {\r\n    require(newWhiteList != 0x0);\r\n    investorWhiteList = InvestorWhiteList(newWhiteList);\r\n  }\r\n\r\n  function doPurchase() private icoActive inNormalState {\r\n    require(!crowdsaleFinished);\r\n\r\n    uint tokens = calculateTokens(msg.value); \r\n\r\n    uint newTokensSold = tokensSold.add(tokens);\r\n\r\n    uint referralBonus = 0;\r\n    referralBonus = calculateReferralBonus(tokens);\r\n\r\n    address referral = investorWhiteList.getReferralOf(msg.sender);\r\n\r\n    if (referralBonus > 0 && referral != 0x0) {\r\n      newTokensSold = newTokensSold.add(referralBonus);\r\n    }\r\n\r\n    collected = collected.add(msg.value);\r\n\r\n    tokensSold = newTokensSold;\r\n\r\n    deposited[msg.sender] = deposited[msg.sender].add(msg.value);\r\n\r\n    token.transfer(msg.sender, tokens);\r\n    NewContribution(msg.sender, tokens, msg.value);\r\n\r\n    if (referralBonus > 0 && referral != 0x0) {\r\n      token.transfer(referral, referralBonus);\r\n      NewReferralTransfer(msg.sender, referral, referralBonus);\r\n    }\r\n    \r\n    beneficiary.transfer(msg.value);\r\n  }\r\n\r\n\r\n  function transferOwnership(address newOwner) onlyOwner icoEnded {\r\n    super.transferOwnership(newOwner);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"addInvestorToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getReferralOf\",\"outputs\":[{\"name\":\"result\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"removeInvestorFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"addReferralOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"InvestorWhiteList","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4eb845211de8889fd71b41aa4483ddbc15040865a3d6fc6bf9aa7a0fef340048"}]}