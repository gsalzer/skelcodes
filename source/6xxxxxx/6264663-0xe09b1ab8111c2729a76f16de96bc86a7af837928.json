{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/* This is fiftyflip \r\na simple yet elegant game contract \r\nthat is connected to Proof of Community \r\ncontract(0x1739e311ddBf1efdFbc39b74526Fd8b600755ADa).\r\n\r\nGreed serves no-one but the one, \r\nBut charity is kind, suffereth not and envieth not. \r\nCharity is to give of oneself in the service of his fellow beings. \r\n\r\nPlay on Players. and Remember fifty feeds the multiudes and gives to the PoC community\r\nForever and ever. \r\n\r\n\r\n*/\r\n\r\n\r\ncontract FiftyFlip {\r\n    uint constant DONATING_X = 20; // 2% kujira\r\n\r\n    // Need to be discussed\r\n    uint constant JACKPOT_FEE = 10; // 1% jackpot\r\n    uint constant JACKPOT_MODULO = 1000; // 0.1% jackpotwin\r\n    uint constant DEV_FEE = 20; // 2% devfee\r\n    uint constant WIN_X = 1900; // 1.9x\r\n\r\n    // There is minimum and maximum bets.\r\n    uint constant MIN_BET = 0.01 ether;\r\n    uint constant MAX_BET = 1 ether;\r\n\r\n    uint constant BET_EXPIRATION_BLOCKS = 250;\r\n\r\n    // owner and PoC contract address\r\n    address public owner;\r\n    address public autoPlayBot;\r\n    address public secretSigner;\r\n    address private whale;\r\n\r\n    // Accumulated jackpot fund.\r\n    uint256 public jackpotSize;\r\n    uint256 public devFeeSize;\r\n\r\n    // Funds that are locked in potentially winning bets.\r\n    uint256 public lockedInBets;\r\n    uint256 public totalAmountToWhale;\r\n\r\n\r\n    struct Bet {\r\n        // Wager amount in wei.\r\n        uint amount;\r\n        // Block number of placeBet tx.\r\n        uint256 blockNumber;\r\n        // Bit mask representing winning bet outcomes (see MAX_MASK_MODULO comment).\r\n        bool betMask;\r\n        // Address of a player, used to pay out winning bets.\r\n        address player;\r\n    }\r\n\r\n    mapping (uint => Bet) bets;\r\n    mapping (address => uint) donateAmount;\r\n\r\n    // events\r\n    event Wager(uint ticketID, uint betAmount, uint256 betBlockNumber, bool betMask, address betPlayer);\r\n    event Win(address winner, uint amount, uint ticketID, bool maskRes, uint jackpotRes);\r\n    event Lose(address loser, uint amount, uint ticketID, bool maskRes, uint jackpotRes);\r\n    event Refund(uint ticketID, uint256 amount, address requester);\r\n    event Donate(uint256 amount, address donator);\r\n    event FailedPayment(address paidUser, uint amount);\r\n    event Payment(address noPaidUser, uint amount);\r\n    event JackpotPayment(address player, uint ticketID, uint jackpotWin);\r\n\r\n    // constructor\r\n    constructor (address whaleAddress, address autoPlayBotAddress, address secretSignerAddress) public {\r\n        owner = msg.sender;\r\n        autoPlayBot = autoPlayBotAddress;\r\n        whale = whaleAddress;\r\n        secretSigner = secretSignerAddress;\r\n        jackpotSize = 0;\r\n        devFeeSize = 0;\r\n        lockedInBets = 0;\r\n        totalAmountToWhale = 0;\r\n    }\r\n\r\n    // modifiers\r\n    modifier onlyOwner() {\r\n        require (msg.sender == owner, \"You are not the owner of this contract!\");\r\n        _;\r\n    }    \r\n\r\n    modifier onlyBot() {\r\n        require (msg.sender == autoPlayBot, \"You are not the bot of this contract!\");\r\n        _;\r\n    }\r\n    \r\n    modifier checkContractHealth() {\r\n        require (address(this).balance >= lockedInBets + jackpotSize + devFeeSize, \"This contract doesn't have enough balance, it is stopped till someone donate to this game!\");\r\n        _;\r\n    }\r\n\r\n    // betMast:\r\n    // false is front, true is back\r\n\r\n    function() public payable { }\r\n\r\n\r\n    function setBotAddress(address autoPlayBotAddress)\r\n    onlyOwner() \r\n    external \r\n    {\r\n        autoPlayBot = autoPlayBotAddress;\r\n    }\r\n\r\n    function setSecretSigner(address _secretSigner)\r\n    onlyOwner()  \r\n    external\r\n    {\r\n        secretSigner = _secretSigner;\r\n    }\r\n\r\n    // wager function\r\n    function wager(bool bMask, uint ticketID, uint ticketLastBlock, uint8 v, bytes32 r, bytes32 s)  \r\n    checkContractHealth()\r\n    external\r\n    payable { \r\n        Bet storage bet = bets[ticketID];\r\n        uint amount = msg.value;\r\n        address player = msg.sender;\r\n        require (bet.player == address(0), \"Ticket is not new one!\");\r\n        require (amount >= MIN_BET, \"Your bet is lower than minimum bet amount\");\r\n        require (amount <= MAX_BET, \"Your bet is higher than maximum bet amount\");\r\n        require (getCollateralBalance() >= 2 * amount, \"If we accept this, this contract will be in danger!\");\r\n\r\n        require (block.number <= ticketLastBlock, \"Ticket has expired.\");\r\n        bytes32 signatureHash = keccak256(abi.encodePacked('\\x19Ethereum Signed Message:\\n37', uint40(ticketLastBlock), ticketID));\r\n        require (secretSigner == ecrecover(signatureHash, v, r, s), \"web3 vrs signature is not valid.\");\r\n\r\n        jackpotSize += amount * JACKPOT_FEE / 1000;\r\n        devFeeSize += amount * DEV_FEE / 1000;\r\n        lockedInBets += amount * WIN_X / 1000;\r\n\r\n        uint donate_amount = amount * DONATING_X / 1000;\r\n        whale.call.value(donate_amount)(bytes4(keccak256(\"donate()\")));\r\n        totalAmountToWhale += donate_amount;\r\n\r\n        bet.amount = amount;\r\n        bet.blockNumber = block.number;\r\n        bet.betMask = bMask;\r\n        bet.player = player;\r\n\r\n        emit Wager(ticketID, bet.amount, bet.blockNumber, bet.betMask, bet.player);\r\n    }\r\n\r\n    // method to determine winners and losers\r\n    function play(uint ticketReveal)\r\n    checkContractHealth()\r\n    external\r\n    {\r\n        uint ticketID = uint(keccak256(abi.encodePacked(ticketReveal)));\r\n        Bet storage bet = bets[ticketID];\r\n        require (bet.player != address(0), \"TicketID is not correct!\");\r\n        require (bet.amount != 0, \"Ticket is already used one!\");\r\n        uint256 blockNumber = bet.blockNumber;\r\n        if(blockNumber < block.number && blockNumber >= block.number - BET_EXPIRATION_BLOCKS)\r\n        {\r\n            uint256 random = uint256(keccak256(abi.encodePacked(blockhash(blockNumber),  ticketReveal)));\r\n            bool maskRes = (random % 2) !=0;\r\n            uint jackpotRes = random % JACKPOT_MODULO;\r\n    \r\n            uint tossWinAmount = bet.amount * WIN_X / 1000;\r\n\r\n            uint tossWin = 0;\r\n            uint jackpotWin = 0;\r\n            \r\n            if(bet.betMask == maskRes) {\r\n                tossWin = tossWinAmount;\r\n            }\r\n            if(jackpotRes == 0) {\r\n                jackpotWin = jackpotSize;\r\n                jackpotSize = 0;\r\n            }\r\n            if (jackpotWin > 0) {\r\n                emit JackpotPayment(bet.player, ticketID, jackpotWin);\r\n            }\r\n            if(tossWin + jackpotWin > 0)\r\n            {\r\n                payout(bet.player, tossWin + jackpotWin, ticketID, maskRes, jackpotRes);\r\n            }\r\n            else \r\n            {\r\n                loseWager(bet.player, bet.amount, ticketID, maskRes, jackpotRes);\r\n            }\r\n            lockedInBets -= tossWinAmount;\r\n            bet.amount = 0;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function donateForContractHealth()\r\n    external \r\n    payable\r\n    {\r\n        donateAmount[msg.sender] += msg.value;\r\n        emit Donate(msg.value, msg.sender);\r\n    }\r\n\r\n    function withdrawDonation(uint amount)\r\n    external \r\n    {\r\n        require(donateAmount[msg.sender] >= amount, \"You are going to withdraw more than you donated!\");\r\n        \r\n        if (sendFunds(msg.sender, amount)){\r\n            donateAmount[msg.sender] -= amount;\r\n        }\r\n    }\r\n\r\n    // method to refund\r\n    function refund(uint ticketID)\r\n    checkContractHealth()\r\n    external {\r\n        Bet storage bet = bets[ticketID];\r\n        \r\n        require (bet.amount != 0, \"this ticket has no balance\");\r\n        require (block.number > bet.blockNumber + BET_EXPIRATION_BLOCKS, \"this ticket is expired.\");\r\n        sendRefund(ticketID);\r\n    }\r\n\r\n    // Funds withdrawl\r\n    function withdrawDevFee(address withdrawAddress, uint withdrawAmount)\r\n    onlyOwner()\r\n    checkContractHealth() \r\n    external {\r\n        require (devFeeSize >= withdrawAmount, \"You are trying to withdraw more amount than developer fee.\");\r\n        require (withdrawAmount <= address(this).balance, \"Contract balance is lower than withdrawAmount\");\r\n        require (devFeeSize <= address(this).balance, \"Not enough funds to withdraw.\");\r\n        if (sendFunds(withdrawAddress, withdrawAmount)){\r\n            devFeeSize -= withdrawAmount;\r\n        }\r\n    }\r\n\r\n    // Funds withdrawl\r\n    function withdrawBotFee(uint withdrawAmount)\r\n    onlyBot()\r\n    checkContractHealth() \r\n    external {\r\n        require (devFeeSize >= withdrawAmount, \"You are trying to withdraw more amount than developer fee.\");\r\n        require (withdrawAmount <= address(this).balance, \"Contract balance is lower than withdrawAmount\");\r\n        require (devFeeSize <= address(this).balance, \"Not enough funds to withdraw.\");\r\n        if (sendFunds(autoPlayBot, withdrawAmount)){\r\n            devFeeSize -= withdrawAmount;\r\n        }\r\n    }\r\n\r\n    // Get Bet Info from id\r\n    function getBetInfo(uint ticketID) \r\n    constant\r\n    external \r\n    returns (uint, uint256, bool, address){\r\n        Bet storage bet = bets[ticketID];\r\n        return (bet.amount, bet.blockNumber, bet.betMask, bet.player);\r\n    }\r\n\r\n    // Get Bet Info from id\r\n    function getContractBalance() \r\n    constant\r\n    external \r\n    returns (uint){\r\n        return address(this).balance;\r\n    }\r\n\r\n    // Get Collateral for Bet\r\n    function getCollateralBalance() \r\n    constant\r\n    public \r\n    returns (uint){\r\n        if (address(this).balance > lockedInBets + jackpotSize + devFeeSize)\r\n            return address(this).balance - lockedInBets - jackpotSize - devFeeSize;\r\n        return 0;\r\n    }\r\n\r\n    // Contract may be destroyed only when there are no ongoing bets,\r\n    // either settled or refunded. All funds are transferred to contract owner.\r\n    function kill() external onlyOwner() {\r\n        require (lockedInBets == 0, \"All bets should be processed (settled or refunded) before self-destruct.\");\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    // Payout ETH to winner\r\n    function payout(address winner, uint ethToTransfer, uint ticketID, bool maskRes, uint jackpotRes) \r\n    internal \r\n    {        \r\n        winner.transfer(ethToTransfer);\r\n        emit Win(winner, ethToTransfer, ticketID, maskRes, jackpotRes);\r\n    }\r\n\r\n    // sendRefund to requester\r\n    function sendRefund(uint ticketID) \r\n    internal \r\n    {\r\n        Bet storage bet = bets[ticketID];\r\n        address requester = bet.player;\r\n        uint256 ethToTransfer = bet.amount;        \r\n        requester.transfer(ethToTransfer);\r\n\r\n        uint tossWinAmount = bet.amount * WIN_X / 1000;\r\n        lockedInBets -= tossWinAmount;\r\n\r\n        bet.amount = 0;\r\n        emit Refund(ticketID, ethToTransfer, requester);\r\n    }\r\n\r\n    // Helper routine to process the payment.\r\n    function sendFunds(address paidUser, uint amount) private returns (bool){\r\n        bool success = paidUser.send(amount);\r\n        if (success) {\r\n            emit Payment(paidUser, amount);\r\n        } else {\r\n            emit FailedPayment(paidUser, amount);\r\n        }\r\n        return success;\r\n    }\r\n    // Payout ETH to whale when player loses\r\n    function loseWager(address player, uint amount, uint ticketID, bool maskRes, uint jackpotRes) \r\n    internal \r\n    {\r\n        emit Lose(player, amount, ticketID, maskRes, jackpotRes);\r\n    }\r\n\r\n    // bulk clean the storage.\r\n    function clearStorage(uint[] toCleanTicketIDs) external {\r\n        uint length = toCleanTicketIDs.length;\r\n\r\n        for (uint i = 0; i < length; i++) {\r\n            clearProcessedBet(toCleanTicketIDs[i]);\r\n        }\r\n    }\r\n\r\n    // Helper routine to move 'processed' bets into 'clean' state.\r\n    function clearProcessedBet(uint ticketID) private {\r\n        Bet storage bet = bets[ticketID];\r\n\r\n        // Do not overwrite active bets with zeros; additionally prevent cleanup of bets\r\n        // for which ticketID signatures may have not expired yet (see whitepaper for details).\r\n        if (bet.amount != 0 || block.number <= bet.blockNumber + BET_EXPIRATION_BLOCKS) {\r\n            return;\r\n        }\r\n\r\n        bet.blockNumber = 0;\r\n        bet.betMask = false;\r\n        bet.player = address(0);\r\n    }\r\n\r\n    // A trap door for when someone sends tokens other than the intended ones so the overseers can decide where to send them.\r\n    function transferAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens) \r\n    public \r\n    onlyOwner() \r\n    returns (bool success) \r\n    {\r\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\r\n    }\r\n}\r\n\r\n//Define ERC20Interface.transfer, so PoCWHALE can transfer tokens accidently sent to it.\r\ncontract ERC20Interface \r\n{\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"bMask\",\"type\":\"bool\"},{\"name\":\"ticketID\",\"type\":\"uint256\"},{\"name\":\"ticketLastBlock\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"wager\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCollateralBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFeeSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticketID\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"autoPlayBotAddress\",\"type\":\"address\"}],\"name\":\"setBotAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticketReveal\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountToWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donateForContractHealth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticketID\",\"type\":\"uint256\"}],\"name\":\"getBetInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawDevFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDonation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoPlayBot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawBotFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secretSigner\",\"type\":\"address\"}],\"name\":\"setSecretSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedInBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toCleanTicketIDs\",\"type\":\"uint256[]\"}],\"name\":\"clearStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"whaleAddress\",\"type\":\"address\"},{\"name\":\"autoPlayBotAddress\",\"type\":\"address\"},{\"name\":\"secretSignerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ticketID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betMask\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"betPlayer\",\"type\":\"address\"}],\"name\":\"Wager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maskRes\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"jackpotRes\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"loser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maskRes\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"jackpotRes\",\"type\":\"uint256\"}],\"name\":\"Lose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ticketID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"donator\",\"type\":\"address\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paidUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"noPaidUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticketID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotWin\",\"type\":\"uint256\"}],\"name\":\"JackpotPayment\",\"type\":\"event\"}]","ContractName":"FiftyFlip","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002fa59e2c57a80631c4cd029dc343febb89bb4e1400000000000000000000000042d42f53c20f2a1e745fdc1e2c350941a755976f00000000000000000000000042d42f53c20f2a1e745fdc1e2c350941a755976f","Library":"","SwarmSource":"bzzr://451dcfc3e2d6e306663bd1d7944db8a30839716580ed6af07544c7a71c46a1bb"}]}