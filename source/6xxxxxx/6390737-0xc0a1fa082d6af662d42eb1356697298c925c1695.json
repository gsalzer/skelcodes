{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  \t/**\r\n  \t * @dev Multiplies two numbers, throws on overflow.\r\n  \t*/\r\n  \tfunction mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    \t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    \t// benefit is lost if 'b' is also tested.\r\n    \t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    \tif (_a == 0) {\r\n      \t\treturn 0;\r\n    \t}\r\n\r\n    \tuint256 c = _a * _b;\r\n    \tassert(c / _a == _b);\r\n\r\n    \treturn c;\r\n  \t}\r\n\r\n  \t/**\r\n  \t * @dev Integer division of two numbers, truncating the quotient.\r\n  \t */\r\n  \tfunction div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    \t// assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    \tuint256 c = _a / _b;\r\n    \t// assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    \treturn c;\r\n  \t}\r\n\r\n  \t/**\r\n  \t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  \t */\r\n  \tfunction sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    \tassert(_b <= _a);\r\n    \tuint256 c = _a - _b;\r\n\r\n    \treturn c;\r\n  \t}\r\n\r\n  \t/**\r\n  \t * @dev Adds two numbers, throws on overflow.\r\n  \t */\r\n  \tfunction add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    \tuint256 c = _a + _b;\r\n    \tassert(c >= _a);\r\n\r\n    \treturn c;\r\n  \t}\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"\"user permissions\"\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    address internal newOwner;\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n\r\n  \t/**\r\n   \t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   \t * account.\r\n   \t */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        newOwner = address(0);\r\n    }\r\n\r\n  \t/**\r\n   \t * @dev Throws if called by any account other than the owner.\r\n   \t */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @dev Change the owner.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /*\r\n     * @dev Accept the ownership.\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        \r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  \tevent Pause();\r\n  \tevent Unpause();\r\n\r\n  \tbool public paused = false;\r\n\r\n\r\n  \t/**\r\n   \t * @dev Modifier to make a function callable only when the contract is not paused.\r\n   \t */\r\n  \tmodifier whenNotPaused() {\r\n    \trequire(!paused);\r\n    \t_;\r\n  \t}\r\n\r\n  \t/**\r\n   \t * @dev Modifier to make a function callable only when the contract is paused.\r\n   \t */\r\n  \tmodifier whenPaused() {\r\n    \trequire(paused);\r\n    \t_;\r\n  \t}\r\n\r\n  \t/**\r\n   \t * @dev called by the owner to pause, triggers stopped state\r\n   \t */\r\n  \tfunction pause() public onlyOwner whenNotPaused {\r\n    \tpaused = true;\r\n    \temit Pause();\r\n  \t}\r\n\r\n  \t/**\r\n   \t * @dev called by the owner to unpause, returns to normal state\r\n   \t */\r\n  \tfunction unpause() public onlyOwner whenPaused {\r\n    \tpaused = false;\r\n    \temit Unpause();\r\n  \t}\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  \tfunction totalSupply() public view returns (uint256);\r\n\r\n  \tfunction balanceOf(address _who) public view returns (uint256);\r\n\r\n  \tfunction allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n  \tfunction transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  \tfunction approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n  \tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  \tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is ERC20, Pausable {\r\n\t\r\n    using SafeMath for uint256;\r\n    \r\n    mapping(address => uint256) balances;\r\n    \r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n    \r\n    uint256 totalSupply_;\r\n    \r\n  \t/**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n  \tfunction totalSupply() public view returns (uint256) {\r\n    \treturn totalSupply_;\r\n  \t}    \r\n    \r\n  \t/**\r\n  \t * @dev Gets the balance of the specified address.\r\n  \t * @param _owner The address to query the the balance of.\r\n  \t * @return An uint256 representing the amount owned by the passed address.\r\n  \t */    \r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n  \t/**\r\n   \t * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   \t * @param _owner address The address which owns the funds.\r\n   \t * @param _spender address The address which will spend the funds.\r\n   \t * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   \t */    \r\n    function allowance(address _owner, address _spender) public view whenNotPaused returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n  \t/**\r\n  \t * @dev Transfer token for a specified address\r\n  \t * @param _to The address to transfer to.\r\n  \t * @param _value The amount to be transferred.\r\n  \t */    \r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    \trequire(_value <= balances[msg.sender]);\r\n    \trequire(_to != address(0));\r\n    \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  \t/**\r\n   \t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   \t * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   \t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   \t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   \t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   \t * @param _spender The address which will spend the funds.\r\n   \t * @param _value The amount of tokens to be spent.\r\n   \t */\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n  \t/**\r\n   \t * @dev Transfer tokens from one address to another\r\n   \t * @param _from address The address which you want to send tokens from\r\n   \t * @param _to address The address which you want to transfer to\r\n   \t * @param _value uint256 the amount of tokens to be transferred\r\n   \t */\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n\t    require(_value <= balances[_from]);\r\n\t    require(_value <= allowed[_from][msg.sender]);\r\n\t    require(_to != address(0));    \t\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\t/**\r\n   \t * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   \t * approve should be called when allowed[_spender] == 0. To increment\r\n   \t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   \t * the first transaction is mined)\r\n   \t * From MonolithDAO Token.sol\r\n   \t * @param _spender The address which will spend the funds.\r\n   \t * @param _addedValue The amount of tokens to increase the allowance by.\r\n   \t */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n  \t/**\r\n   \t * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   \t * approve should be called when allowed[_spender] == 0. To decrement\r\n   \t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   \t * the first transaction is mined)\r\n   \t * From MonolithDAO Token.sol\r\n   \t * @param _spender The address which will spend the funds.\r\n   \t * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   \t */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool) {\r\n    \tuint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n  \t/**\r\n   \t * @dev Decrease the amount of tokens that an owner allowed to a spender by spender self.\r\n   \t * approve should be called when allowed[msg.sender] == 0. To decrement\r\n   \t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   \t * the first transaction is mined)\r\n   \t * From MonolithDAO Token.sol\r\n   \t * @param _from The address which will transfer the funds from.\r\n   \t * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   \t */\r\n    function spenderDecreaseApproval(address _from, uint256 _subtractedValue) public whenNotPaused returns (bool) {\r\n    \tuint256 oldValue = allowed[_from][msg.sender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[_from][msg.sender] = 0;\r\n        } else {\r\n            allowed[_from][msg.sender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        emit Approval(_from, msg.sender, allowed[_from][msg.sender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title BCL token.\r\n * @dev Issued by blockchainlock.io\r\n */\r\ncontract BCLToken is StandardToken {\r\n    string public name = \"Blockchainlock Token\";\r\n    string public symbol = \"BCL\";\r\n    uint8 public decimals = 18;\r\n\r\n  \t/**\r\n   \t * @dev The BCLToken constructor\r\n   \t */\r\n    constructor() public {\r\n        totalSupply_ = 360 * (10**26);\t\t\t// 36 billions\r\n        balances[msg.sender] = totalSupply_; \t// Give the creator all initial tokens\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"spenderDecreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BCLToken","CompilerVersion":"v0.4.24-nightly.2018.4.23+commit.c7ee2ca0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6953aa6a32cd9746680a58df65c184318b6cd1b6b42a3c6b009b24aa669a4651"}]}