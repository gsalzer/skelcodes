{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    //emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  \r\n    /**\r\n    * @dev prevents contracts from interacting with others\r\n    */\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n    \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract LottoPIEvents{\r\n\r\n    event investEvt(\r\n        address indexed addr,\r\n        uint refCode,\r\n        uint amount\r\n        );\r\n    \r\n    event dividedEvt(\r\n        address indexed addr,\r\n        uint rewardAmount\r\n        );\r\n    event referralEvt(\r\n        address indexed addr,\r\n        uint refCode,\r\n        uint rewardAmount\r\n        );\r\n    event dailyLottoEvt(\r\n        address indexed addr,\r\n        uint lottodAmount\r\n        );\r\n}\r\n\r\n/*\r\n\r\n                                                                    \r\n██╗      ██████╗ ████████╗████████╗ ██████╗ ██████╗ ██╗\r\n██║     ██╔═══██╗╚══██╔══╝╚══██╔══╝██╔═══██╗██╔══██╗██║\r\n██║     ██║   ██║   ██║      ██║   ██║   ██║██████╔╝██║\r\n██║     ██║   ██║   ██║      ██║   ██║   ██║██╔═══╝ ██║\r\n███████╗╚██████╔╝   ██║      ██║   ╚██████╔╝██║     ██║\r\n╚══════╝ ╚═════╝    ╚═╝      ╚═╝    ╚═════╝ ╚═╝     ╚═╝\r\n                                                      \r\n                                                                    \r\n                                                                           \r\n\r\nBy EtherRich 2018\r\n*/\r\n\r\ncontract LottoPI is Ownable,LottoPIEvents{\r\n    using SafeMath for uint;\r\n    //using utils for uint[];\r\n    //using utils for address[];\r\n\r\n    address private w1;\r\n\r\n    uint public curRefNumber= 0;\r\n    bool public gameOpened=false;\r\n    uint public ttlPlayers=0;\r\n    uint public ttlInvestCount=0;\r\n    uint public ttlInvestAmount=0;\r\n    \r\n    uint public roundId=1;\r\n    uint public roundInterval=2 * 24 *60 *60;\r\n    uint public startTime=0;\r\n    bool public gameCollapse=false;\r\n\r\n    mapping(uint=>mapping(address=>uint)) dsInvtRefCode;    //roundId=> address=> refCode;\r\n    mapping(uint=>mapping(uint=>address)) dsInvtRefxAddr;   //refCode=>address;\r\n    mapping(uint=>mapping(address=>uint)) dsParentRefCode;\r\n    mapping(uint=>mapping(address=>uint)) dsInvtDeposit;   // Player Deposit\r\n    mapping(uint=>mapping(address=>uint)) dsInvtLevel;   // Player address => Level\r\n    mapping(uint=>mapping(address=>uint)) dsInvtBalances;\r\n    mapping(uint=>mapping(address=>uint)) dsReferees;\r\n    \r\n    uint dividedT=10 ether;\r\n\r\n    /* level condition */\r\n    uint level1=0.001 ether;\r\n    uint level2=0.01 ether;\r\n    uint level3=0.1 ether;\r\n\r\n    struct invRate{\r\n        uint divided;\r\n        uint refBonus;\r\n    }\r\n    mapping(uint=>invRate) dsSysInvtRates;\r\n    \r\n    /* final lottery*/\r\n    //uint public avblBalance=0;     \r\n    uint public totalDivided=0;     \r\n    uint public balDailyLotto=0;\r\n    \r\n    //daily lotto\r\n    uint ticketPrice=0.001 ether;\r\n    uint ttlTicketSold=0;\r\n    uint ttlLottoAmount=0;\r\n    uint public lastLottoTime=0;\r\n\r\n    address[] invtByOrder;\r\n    address[] dailyLottoPlayers;\r\n    address[] dailyWinners;\r\n    uint[] dailyPrizes;\r\n    \r\n    constructor()public {\r\n        w1=msg.sender;\r\n        \r\n        // investor daily divided and referral bonus\r\n        invRate memory L1;\r\n        L1.divided=1 ether;\r\n        L1.refBonus=2 ether;\r\n        dsSysInvtRates[1]=L1;\r\n        \r\n        invRate memory L2;\r\n        L2.divided=3 ether;\r\n        L2.refBonus=6 ether;\r\n        dsSysInvtRates[2]=L2;\r\n        \r\n        \r\n        invRate memory L3;\r\n        L3.divided=6 ether;\r\n        L3.refBonus=10 ether;\r\n        dsSysInvtRates[3]=L3;\r\n        \r\n        gameOpened=true;\r\n    }\r\n    \r\n    function invest(uint refCode) isHuman payable public returns(uint){\r\n        require(gameOpened && !gameCollapse);\r\n        require(now>startTime,\"Game is not start\");\r\n        require(msg.value >= level1,\"Minima amoun:0.0001 ether\");\r\n        \r\n        uint myRefCode=0;\r\n        ttlInvestCount+=1;\r\n        ttlInvestAmount+=msg.value;\r\n\r\n        /* Generate refCode on first invest */\r\n        if(dsInvtRefCode[roundId][msg.sender]==0){\r\n            curRefNumber+=1;\r\n            myRefCode=curRefNumber;\r\n            dsInvtRefCode[roundId][msg.sender]=myRefCode;\r\n            dsInvtRefxAddr[roundId][myRefCode]=msg.sender;\r\n            \r\n            ttlPlayers+=1;\r\n        }else{\r\n            myRefCode=dsInvtRefCode[roundId][msg.sender];\r\n        }\r\n        \r\n        \r\n        // setting up-refCode\r\n        if(dsParentRefCode[roundId][msg.sender]!=0){\r\n            //if exists, get up-refCode\r\n            refCode=dsParentRefCode[roundId][msg.sender];\r\n        }else{\r\n            if(refCode!=0 && dsInvtRefxAddr[roundId][refCode] != 0x0){\r\n                dsParentRefCode[roundId][msg.sender]=refCode;\r\n            }else{\r\n                refCode=0;\r\n            }\r\n        }\r\n\r\n        \r\n        // sum deposit amount\r\n        dsInvtDeposit[roundId][msg.sender]+=msg.value;\r\n        \r\n        \r\n        //setting level and rate\r\n        uint level=1;\r\n        if(dsInvtDeposit[roundId][msg.sender]>=level2 && dsInvtDeposit[roundId][msg.sender]<level3){\r\n            dsInvtLevel[roundId][msg.sender]=2;\r\n            level=2;\r\n        }else if(dsInvtDeposit[roundId][msg.sender]>=level3){\r\n            dsInvtLevel[roundId][msg.sender]=3;\r\n            level=3;\r\n        }else{\r\n            dsInvtLevel[roundId][msg.sender]=1;\r\n            level=1;\r\n        }\r\n        \r\n        //calc refferal rewards\r\n        if(dsInvtRefxAddr[roundId][refCode]!=0x0){\r\n            address upAddr = dsInvtRefxAddr[roundId][refCode];\r\n            uint upLevel=dsInvtLevel[roundId][upAddr];\r\n            \r\n            dsInvtBalances[roundId][upAddr] += (msg.value * dsSysInvtRates[upLevel].refBonus) / 100 ether;\r\n            //avblBalance -= (msg.value * dsSysInvtRates[upLevel].refBonus) / 100 ether;\r\n            \r\n            dsReferees[roundId][upAddr]+=1;\r\n            \r\n            emit referralEvt(msg.sender,refCode,(msg.value * dsSysInvtRates[upLevel].refBonus) / 100 ether);\r\n        }\r\n        w1.transfer((msg.value * dividedT)/ 100 ether);\r\n        \r\n        //daily lotto balance\r\n        balDailyLotto += (msg.value * 15 ether) / 100 ether;\r\n\r\n        //\r\n        //avblBalance += msg.value - (msg.value * dividedT)/100 ether;\r\n        \r\n        //for getting last 3 investor\r\n        invtByOrder.push(msg.sender);\r\n        \r\n\r\n        emit investEvt(msg.sender,refCode,msg.value);\r\n\r\n    }\r\n    \r\n    function buyTicket(uint num) isHuman payable public returns(uint){\r\n        require(gameOpened && !gameCollapse,\"Game is not open\");\r\n        require(dsInvtLevel[roundId][msg.sender] >= 2,\"Level too low\");\r\n        require(msg.value >= num.mul(ticketPrice),\"payments under ticket price \");\r\n        \r\n        w1.transfer(msg.value);\r\n        for(uint i=0;i<num;i++){\r\n            dailyLottoPlayers.push(msg.sender);\r\n        }\r\n        \r\n        ttlTicketSold+=num;\r\n        \r\n    }\r\n    \r\n/*\r\n\r\n                                                                    \r\n██╗      ██████╗ ████████╗████████╗ ██████╗ ██████╗ ██╗\r\n██║     ██╔═══██╗╚══██╔══╝╚══██╔══╝██╔═══██╗██╔══██╗██║\r\n██║     ██║   ██║   ██║      ██║   ██║   ██║██████╔╝██║\r\n██║     ██║   ██║   ██║      ██║   ██║   ██║██╔═══╝ ██║\r\n███████╗╚██████╔╝   ██║      ██║   ╚██████╔╝██║     ██║\r\n╚══════╝ ╚═════╝    ╚═╝      ╚═╝    ╚═════╝ ╚═╝     ╚═╝\r\n                                                      \r\n                                                                    \r\n                                                                    \r\n\r\n*/\r\n    \r\n\r\n    function dailyLottery() onlyOwner public{\r\n        require(!gameCollapse,\"game is Collapse!\");\r\n        uint i;\r\n        uint _divided=0;\r\n        uint _todayDivided=0;  //today divided\r\n        \r\n        //summary daily divided\r\n        uint _level;\r\n        uint _ttlInvtBalance=0;\r\n        address _addr;\r\n        for(i=1;i<=curRefNumber;i++){\r\n            _addr=dsInvtRefxAddr[roundId][i];\r\n            _level=dsInvtLevel[roundId][_addr];\r\n            \r\n            _todayDivided += (dsInvtDeposit[roundId][_addr] * dsSysInvtRates[_level].divided )/100 ether;   //daily divided\r\n            _ttlInvtBalance +=dsInvtBalances[roundId][_addr];\r\n        }\r\n        \r\n        \r\n        //if enough to distribute then distribute or DO FINAL LOTTERY\r\n        if(address(this).balance > _todayDivided + _ttlInvtBalance && !gameCollapse){\r\n            totalDivided+=_todayDivided;\r\n            //avblBalance-=todayDivided;\r\n            \r\n            //sum daily divided\r\n            for(i=1;i<=curRefNumber;i++){\r\n                _addr=dsInvtRefxAddr[roundId][i];\r\n                _level=dsInvtLevel[roundId][_addr];\r\n                \r\n                _divided=(dsInvtDeposit[roundId][_addr] * dsSysInvtRates[_level].divided )/100 ether;\r\n                dsInvtBalances[roundId][_addr]+=_divided;\r\n            }\r\n            \r\n            //daily Lottery Winner\r\n            \r\n            if(dailyLottoPlayers.length>0 && balDailyLotto>0){\r\n                uint winnerNo=getRnd(now,1,dailyLottoPlayers.length);\r\n                address winnerAddr=dailyLottoPlayers[winnerNo-1];\r\n                dsInvtBalances[roundId][winnerAddr] += balDailyLotto;\r\n                \r\n                dailyWinners.push(winnerAddr);\r\n                dailyPrizes.push(balDailyLotto);\r\n                \r\n                ttlLottoAmount+=balDailyLotto;\r\n                lastLottoTime=now;\r\n                //avblBalance-=balDailyLotto;\r\n                \r\n                //reset daily Lotto\r\n                balDailyLotto=0;\r\n                dailyLottoPlayers.length=0;\r\n            }\r\n            \r\n        }else{\r\n            //if insufficient, big lottery!\r\n            uint _count=invtByOrder.length;\r\n            uint prize=(address(this).balance - _ttlInvtBalance) / 3;\r\n            address winner1=0x0;\r\n            address winner2=0x0;\r\n            address winner3=0x0;\r\n            \r\n            if(_count>=1) winner1 = invtByOrder[_count-1];\r\n            if(_count>=2) winner2 = invtByOrder[_count-2];\r\n            if(_count>=3) winner3 = invtByOrder[_count-3];\r\n            \r\n            if(winner1!=0x0){dsInvtBalances[roundId][winner1] += prize;}\r\n            if(winner2!=0x0){dsInvtBalances[roundId][winner2] += prize;}\r\n            if(winner3!=0x0){dsInvtBalances[roundId][winner3] += prize;}\r\n\r\n            //reset daily Lotto\r\n            balDailyLotto=0;\r\n            dailyLottoPlayers.length=0;\r\n        \r\n            //avblBalance=0;\r\n            \r\n            startTime=now + roundInterval;\r\n            gameCollapse=true;\r\n            \r\n            emit dailyLottoEvt(winner1,prize);\r\n            if(winner2!=0x0) emit dailyLottoEvt(winner2,prize);\r\n            if(winner3!=0x0) emit dailyLottoEvt(winner3,prize);\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    function getDailyPlayers() public view returns(address[]){\r\n        return (dailyLottoPlayers);\r\n    }\r\n    \r\n    function getDailyWinners() public view returns(address[],uint[]){\r\n        return (dailyWinners,dailyPrizes);\r\n    }\r\n    \r\n    function getLastInvestors() public view returns(address[]){\r\n        uint _count=invtByOrder.length;\r\n        uint _num = (_count>=10?10:_count);\r\n        address[] memory _invts=new address[](_num);\r\n        \r\n        for(uint i=_count;i>_count-_num;i--){\r\n            _invts[_count-i]=invtByOrder[i-1];\r\n        }\r\n        return (_invts);\r\n    }\r\n    \r\n    function newGame() public onlyOwner{\r\n        curRefNumber=0;\r\n        \r\n        ttlInvestAmount=0;\r\n        ttlInvestCount=0;\r\n        ttlPlayers=0;\r\n        \r\n        //avblBalance=0;\r\n        totalDivided=0;\r\n        balDailyLotto=0;\r\n    \r\n        ttlTicketSold=0;\r\n        ttlLottoAmount=0;\r\n\r\n        dailyLottoPlayers.length=0;\r\n        dailyWinners.length=0;\r\n        invtByOrder.length=0;\r\n        \r\n        gameOpened=true;\r\n        gameCollapse=false;\r\n        roundId+=1;        \r\n    }\r\n    \r\n    function setGameStatus(bool _opened) public onlyOwner{\r\n        gameOpened=_opened;\r\n    }\r\n    \r\n    function withdraw() public{\r\n        require(dsInvtBalances[roundId][msg.sender]>=0.01 ether,\"Balance is not enough\");\r\n        \r\n        w1.transfer(0.001 ether); //game fee\r\n        msg.sender.transfer(dsInvtBalances[roundId][msg.sender] - 0.001 ether);\r\n        \r\n        dsInvtBalances[roundId][msg.sender]=0;\r\n    }\r\n    \r\n    function withdrawTo(address _addr,uint _val) onlyOwner public{\r\n        address(_addr).transfer(_val);\r\n    }\r\n    \r\n    function myData() public view returns(uint,uint,uint,uint,uint,uint){\r\n        /*return refCode,level,referees,invest amount,balance,myTickets  */\r\n        \r\n        uint refCode=dsInvtRefCode[roundId][msg.sender];\r\n        uint myTickets=0;\r\n        for(uint i=0;i<dailyLottoPlayers.length;i++){\r\n            if(dailyLottoPlayers[i]==msg.sender){\r\n             myTickets+=1;\r\n            }\r\n        }\r\n        \r\n        return (refCode,dsInvtLevel[roundId][msg.sender],dsReferees[roundId][msg.sender],dsInvtDeposit[roundId][msg.sender],dsInvtBalances[roundId][msg.sender],myTickets);\r\n    }\r\n    \r\n    function stats() public view returns(uint,uint,uint,uint,uint,uint,uint,uint){\r\n        /*return available balance,total invest amount,total invest count,total players,today prize,today tickets,ttlLottoAmount,totalDivided */\r\n        uint i;\r\n        uint _level;\r\n        uint _ttlInvtBalance=0;\r\n        address _addr;\r\n        \r\n        if(gameCollapse){\r\n            avblBalance=0;\r\n        }else{\r\n            for(i=1;i<=curRefNumber;i++){\r\n                _level=dsInvtLevel[roundId][dsInvtRefxAddr[roundId][i]];\r\n                _addr=dsInvtRefxAddr[roundId][i];\r\n                _ttlInvtBalance +=dsInvtBalances[roundId][_addr];\r\n            }\r\n            \r\n            uint avblBalance=address(this).balance - _ttlInvtBalance;\r\n            if(avblBalance<0) avblBalance=0;\r\n        }\r\n        \r\n        \r\n        return (avblBalance,ttlInvestAmount,ttlInvestCount,ttlPlayers,balDailyLotto,ttlLottoAmount,dailyLottoPlayers.length,totalDivided);\r\n    }\r\n\r\n    function getRnd(uint _seed,uint _min,uint _max) public view returns(uint){\r\n        uint rndSeed=0;\r\n        rndSeed = uint(keccak256(abi.encodePacked(msg.sender,block.number,block.timestamp, block.difficulty,block.gaslimit,_seed))) % _max + _min;\r\n        \r\n        return rndSeed;\r\n    }\r\n}\r\n\r\n\r\n\r\n/*\r\n=====================================================\r\nLibrary\r\n=====================================================\r\n*/\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalDivided\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refCode\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ttlInvestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ttlPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDailyWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dailyLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOpened\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_seed\",\"type\":\"uint256\"},{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getRnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ttlInvestAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curRefNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameCollapse\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balDailyLotto\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_opened\",\"type\":\"bool\"}],\"name\":\"setGameStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastLottoTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDailyPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"refCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"investEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"dividedEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"refCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"referralEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lottodAmount\",\"type\":\"uint256\"}],\"name\":\"dailyLottoEvt\",\"type\":\"event\"}]","ContractName":"LottoPI","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://518edac40e32cabb0ff2810a42091dc9a93e5153f3482b1b6f62e316c0d5eb7c"}]}