{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n\r\n    function transfer(address to, uint value) public returns (bool ok);\r\n    function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n    function approve(address spender, uint value) public returns (bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Authority {\r\n    function isValidAuthority(address authorityAddress, uint blockNumber) public view returns (bool);\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeSub(uint a, uint b) pure internal returns (uint) {\r\n        sAssert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) pure internal returns (uint) {\r\n        uint c = a + b;\r\n        sAssert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function sAssert(bool assertion) pure internal {\r\n        if (!assertion) {\r\n            revert();\r\n        }\r\n    }\r\n}\r\n\r\ncontract SingleSourceIdentity is SafeMath {\r\n    // Events\r\n    event IdentityApproval(address indexed authority, address indexed walletAddress, uint verifiedAttributes);\r\n    event IdentityRevoke(address indexed authority, address indexed walletAddress);\r\n\r\n    // Struct and enum\r\n    struct KYC {\r\n        bool verified;\r\n        address verifiedBy;\r\n        uint verifiedAt;\r\n        uint verifiedAttributes;\r\n    }\r\n\r\n    // Instance variables\r\n    uint public verificationFee;\r\n    mapping(address => uint) public verificationFeeBalances;\r\n\r\n    address public owner;\r\n    address public authorityContractAddress;\r\n    address public paymentContractAddress;\r\n    mapping(address => KYC) public records;\r\n\r\n    // Modifier\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAuthority(address authorityAddress) {\r\n        if (!isValidAuthority(authorityAddress)) {\r\n            revert();\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthoritativeAuthority(address authorityAddress, address userAddress) {\r\n        // Verifier verification\r\n        KYC storage kycRecord = records[userAddress];\r\n        if (kycRecord.verifiedBy != 0x0 && kycRecord.verifiedBy != authorityAddress) {\r\n            if (isValidAuthority(kycRecord.verifiedBy)) {\r\n                revert();\r\n            }\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    // Internal\r\n    function isValidAuthority(address authorityAddress)\r\n      private\r\n      view\r\n      returns (bool)\r\n    {\r\n        Authority authority = Authority(authorityContractAddress);\r\n        return authority.isValidAuthority(authorityAddress, block.number);\r\n    }\r\n\r\n    function chargeVerificationFee(address userAddress, address authorityAddress)\r\n      private\r\n      returns (bool)\r\n    {\r\n        if (!ERC20(paymentContractAddress).transferFrom(userAddress, this, verificationFee)) {\r\n            return false;\r\n        }\r\n        uint currentBalance = verificationFeeBalances[authorityAddress];\r\n        verificationFeeBalances[authorityAddress] = safeAdd(currentBalance, verificationFee);\r\n        return true;\r\n    }\r\n\r\n    // Init\r\n    function SingleSourceIdentity()\r\n      public\r\n    {\r\n        owner = msg.sender;\r\n        verificationFee = 0 ether;\r\n    }\r\n\r\n    // Admin\r\n    function setAuthorityContractAddress(address contractAddress)\r\n      public\r\n      onlyOwner()\r\n    {\r\n        authorityContractAddress = contractAddress;\r\n    }\r\n\r\n    function setPaymentContractAddress(address contractAddress)\r\n      public\r\n      onlyOwner()\r\n    {\r\n        paymentContractAddress = contractAddress;\r\n    }\r\n\r\n    function setFee(uint fee)\r\n      public\r\n      onlyOwner()\r\n    {\r\n        verificationFee = fee;\r\n    }\r\n\r\n    function changeOwner(address newOwner)\r\n      public\r\n      onlyOwner()\r\n    {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function withdrawFee()\r\n      public\r\n      onlyValidAuthority(msg.sender)\r\n    {\r\n        require(paymentContractAddress != 0x0);\r\n\r\n        uint balance = verificationFeeBalances[msg.sender];\r\n        require(balance > 0);\r\n\r\n        verificationFeeBalances[msg.sender] = 0;\r\n        if (!ERC20(paymentContractAddress).transfer(msg.sender, balance)) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    // Functions\r\n    function hasValidProfile(address userAddress)\r\n      public\r\n      view\r\n      returns (bool)\r\n    {\r\n        KYC storage kyc = records[userAddress];\r\n        if (kyc.verified) {\r\n            Authority authority = Authority(authorityContractAddress);\r\n            if (!authority.isValidAuthority(kyc.verifiedBy, kyc.verifiedAt)) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function hasVerifiedAttributeIndex(address userAddress, uint attributeIndex)\r\n      public\r\n      view\r\n      returns (bool)\r\n    {\r\n        if (!this.hasValidProfile(userAddress)) {\r\n            return false;\r\n        } else {\r\n            KYC storage kyc = records[userAddress];\r\n            uint attributeValue = 2 ** attributeIndex;\r\n            return ((kyc.verifiedAttributes & attributeValue) == attributeValue);\r\n        }\r\n    }\r\n\r\n    function hasVerifiedAttributeValue(address userAddress, uint attributeValue)\r\n      public\r\n      view\r\n      returns (bool)\r\n    {\r\n        if (!this.hasValidProfile(userAddress)) {\r\n            return false;\r\n        } else {\r\n            KYC storage kyc = records[userAddress];\r\n            return ((kyc.verifiedAttributes & attributeValue) == attributeValue);\r\n        }\r\n    }\r\n\r\n\r\n    function verifiedAttributes(address userAddress)\r\n      public\r\n      view\r\n      returns (uint)\r\n    {\r\n        if (!this.hasValidProfile(userAddress)) {\r\n            return 0;\r\n        } else {\r\n            KYC storage kyc = records[userAddress];\r\n            return kyc.verifiedAttributes;\r\n        }\r\n    }\r\n\r\n\r\n    function claim(address verifier, uint verifiedAttributes, uint expires, uint8 v, bytes32 r, bytes32 s)\r\n      public\r\n      onlyValidAuthority(verifier)\r\n      onlyAuthoritativeAuthority(verifier, msg.sender)\r\n    {\r\n        // Payment\r\n        if (verificationFee > 0) {\r\n            if(!chargeVerificationFee(msg.sender, verifier)) {\r\n                revert();\r\n            }\r\n        }\r\n\r\n        // Signature verification\r\n        bytes32 hash = sha256(this, msg.sender, verifiedAttributes, expires);\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        bytes32 prefixedHash = keccak256(prefix, hash);\r\n\r\n        if (!((ecrecover(prefixedHash, v, r, s) == verifier) && block.number <= expires)) {\r\n            revert();\r\n        }\r\n\r\n        // Record\r\n\r\n        KYC memory kyc = KYC({\r\n            verified: true,\r\n            verifiedBy: verifier,\r\n            verifiedAt: block.number,\r\n            verifiedAttributes: verifiedAttributes\r\n        });\r\n\r\n        records[msg.sender] = kyc;\r\n\r\n        emit IdentityApproval(verifier, msg.sender, verifiedAttributes);\r\n    }\r\n\r\n    function approve(address userAddress, uint verifiedAttributes)\r\n      public\r\n      onlyValidAuthority(msg.sender)\r\n      onlyAuthoritativeAuthority(msg.sender, userAddress)\r\n    {\r\n        // Record\r\n        KYC memory kyc = KYC({\r\n            verified: true,\r\n            verifiedBy: msg.sender,\r\n            verifiedAt: block.number,\r\n            verifiedAttributes: verifiedAttributes\r\n        });\r\n\r\n        records[userAddress] = kyc;\r\n\r\n        emit IdentityApproval(msg.sender, userAddress, verifiedAttributes);\r\n    }\r\n\r\n    function revoke(address userAddress)\r\n      public\r\n      onlyValidAuthority(msg.sender)\r\n      onlyAuthoritativeAuthority(msg.sender, userAddress)\r\n    {\r\n        // Revoke\r\n        KYC memory kyc = KYC({\r\n            verified: false,\r\n            verifiedBy: msg.sender,\r\n            verifiedAt: block.number,\r\n            verifiedAttributes: 0\r\n        });\r\n\r\n        records[userAddress] = kyc;\r\n\r\n        emit IdentityRevoke(msg.sender, userAddress);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"verifiedAttributes\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"verifier\",\"type\":\"address\"},{\"name\":\"verifiedAttributes\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"attributeValue\",\"type\":\"uint256\"}],\"name\":\"hasVerifiedAttributeValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setPaymentContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"records\",\"outputs\":[{\"name\":\"verified\",\"type\":\"bool\"},{\"name\":\"verifiedBy\",\"type\":\"address\"},{\"name\":\"verifiedAt\",\"type\":\"uint256\"},{\"name\":\"verifiedAttributes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"verifiedAttributes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setAuthorityContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"verificationFeeBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"verificationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"attributeIndex\",\"type\":\"uint256\"}],\"name\":\"hasVerifiedAttributeIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"hasValidProfile\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorityContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"verifiedAttributes\",\"type\":\"uint256\"}],\"name\":\"IdentityApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"IdentityRevoke\",\"type\":\"event\"}]","ContractName":"SingleSourceIdentity","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8cfb03eabc088346fc815f0970d95f145b3bc597d7348fa68a1489c8d1213a7b"}]}