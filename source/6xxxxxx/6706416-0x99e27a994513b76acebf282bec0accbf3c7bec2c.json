{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Events {\r\n    event onGiveKeys(\r\n        address addr,\r\n        uint256 keys\r\n    );\r\n\r\n    event onShareOut(\r\n        uint256 dividend\r\n    );\r\n}\r\n\r\ncontract Referral is Events {\r\n    using SafeMath for *;\r\n\r\n//==============================================================================\r\n//   modifier\r\n//==============================================================================\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender; \r\n        require(administrators[keccak256(_customerAddress)]);\r\n        _;\r\n    }\r\n//==============================================================================\r\n//   config\r\n//==============================================================================\r\n    string public name = \"PTReferral\";\r\n    string public symbol = \"PT7DÎ±\";\r\n    uint256 constant internal magnitude = 1e18;\r\n//==============================================================================\r\n//   dataset\r\n//==============================================================================\r\n    uint256 public pID_ = 0;\r\n    uint256 public keySupply_ = 0;\r\n\r\n    mapping(address => uint256) public pIDxAddr_;\r\n    mapping(uint256 => address) public AddrxPID_;\r\n    mapping(bytes32 => bool) public administrators;\r\n    mapping(address => uint256) public keyBalanceLedger_;\r\n//==============================================================================\r\n//   public functions\r\n//==============================================================================\r\n    constructor()\r\n        public\r\n    {\r\n        administrators[0x14c319c3c982350b442e4074ec4736b3ac376ebdca548bdda0097040223e7bd6] = true;\r\n    }\r\n//==============================================================================\r\n//   private functions\r\n//==============================================================================\r\n    function getPlayerID(address addr)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        uint256 _pID = pIDxAddr_[addr];\r\n        if (_pID == 0)\r\n        {\r\n            pID_++;\r\n            _pID = pID_;\r\n            pIDxAddr_[addr] = _pID;\r\n            AddrxPID_[_pID] = addr;\r\n        } \r\n        return (_pID);\r\n    }\r\n//==============================================================================\r\n//   external functions\r\n//==============================================================================\r\n    // profits from other contracts\r\n    function outerDividend()\r\n        external\r\n        payable\r\n    {\r\n    }\r\n//==============================================================================\r\n//   administrator only functions\r\n//==============================================================================\r\n    function setAdministrator(bytes32 _identifier, bool _status)\r\n        public\r\n        onlyAdministrator()\r\n    {\r\n        administrators[_identifier] = _status;\r\n    }\r\n    \r\n    function setName(string _name)\r\n        public\r\n        onlyAdministrator()\r\n    {\r\n        name = _name;\r\n    }\r\n\r\n    function setSymbol(string _symbol)\r\n        public\r\n        onlyAdministrator()\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function giveKeys(address _toAddress, uint256 _amountOfkeys)\r\n        public\r\n        onlyAdministrator()\r\n        returns(bool)\r\n    {\r\n        getPlayerID(_toAddress);\r\n\r\n        keySupply_ = keySupply_.add(_amountOfkeys);\r\n        keyBalanceLedger_[_toAddress] = keyBalanceLedger_[_toAddress].add(_amountOfkeys);\r\n\r\n        emit onGiveKeys(_toAddress, _amountOfkeys);\r\n        return true;\r\n    }\r\n\r\n    function shareOut(uint256 _dividend)\r\n        public\r\n        onlyAdministrator()\r\n    {\r\n        require(_dividend <= this.balance,\"exceeded the maximum\");\r\n\r\n        if (keySupply_ > 0)\r\n        {\r\n            for (uint256 i = 1; i <= pID_; i++)\r\n            {\r\n                address _addr = AddrxPID_[i];\r\n                _addr.transfer(keyBalanceLedger_[_addr].mul(_dividend).div(keySupply_));\r\n            }\r\n            emit onShareOut(_dividend);\r\n        }\r\n    }\r\n\r\n//==============================================================================\r\n//   view only functions\r\n//==============================================================================\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return this.balance;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividend\",\"type\":\"uint256\"}],\"name\":\"shareOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfkeys\",\"type\":\"uint256\"}],\"name\":\"giveKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keySupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"bytes32\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"keyBalanceLedger_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"outerDividend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AddrxPID_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"keys\",\"type\":\"uint256\"}],\"name\":\"onGiveKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"onShareOut\",\"type\":\"event\"}]","ContractName":"Referral","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1d1851130b96f17db541d50ca62e16a391233cdb3fd01578a793099b5011f4d3"}]}