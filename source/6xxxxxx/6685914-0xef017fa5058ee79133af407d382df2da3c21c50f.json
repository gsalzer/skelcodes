{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n* Smart-contract 155percents\r\n* You can invest ETH to the 155percents and take 4% per day, also you can send 0.001 ETH to contract and\r\n* your percent will be increase on 0.04% per day while you hold your profit, after you withdraw percent will returns to 4%\r\n*\r\n* - To invest you can send at least 0.01 ETH to contract\r\n* - To withdraw your profit you can send 0 ETH to contract\r\n* - To turn on increasing percent you can send 0.001 ETH to contract\r\n*/\r\ncontract OneHundredFiftyFive {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Investor {\r\n        uint256 deposit;\r\n        uint256 paymentTime;\r\n        uint256 withdrawals;\r\n        bool hold;\r\n    }\r\n\r\n    mapping (address => Investor) public investors;\r\n\r\n    uint256 public countOfInvestors;\r\n    uint256 public startTime;\r\n\r\n    address public ownerAddress = 0xC24ddFFaaCEB94f48D2771FE47B85b49818204Be;\r\n\r\n    /**\r\n    * @dev Constructor function which set starting time\r\n    */\r\n    constructor() public {\r\n        startTime = now;\r\n    }\r\n\r\n    /**\r\n    * @dev  Evaluate user current percent.\r\n    * @param _address Investor's address\r\n    * @return Amount of profit depends on HOLD mode\r\n    */\r\n    function getUserProfit(address _address) view public returns (uint256) {\r\n        Investor storage investor = investors[_address];\r\n\r\n        uint256 passedMinutes = now.sub(investor.paymentTime).div(1 minutes);\r\n\r\n        if (investor.hold) {\r\n            uint firstDay = 0;\r\n\r\n            if (passedMinutes >= 1440) {\r\n                firstDay = 1440;\r\n            }\r\n\r\n            //Evaluate profit to according increasing profit percent on 0.04% daily\r\n            //deposit * ( 400 +Â  4 * (passedMinutes-1440)/1440) * (passedMinutes)/14400\r\n            return investor.deposit.mul(400 + 4 * (passedMinutes.sub(firstDay)).div(1440)).mul(passedMinutes).div(14400000);\r\n        } else {\r\n            //Evaluate profit on 4% per day\r\n            //deposit*4/100*(passedMinutes)/1440\r\n            uint256 differentPercent = investor.deposit.mul(4).div(100);\r\n            return differentPercent.mul(passedMinutes).div(1440);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Return current Ethereum time\r\n    */\r\n    function getCurrentTime() view public returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraw profit from contract. Investor will be deleted if he will try withdraw after received 155%\r\n    * @param _address Investor's address\r\n    */\r\n    function withdraw(address _address) private {\r\n        Investor storage investor = investors[_address];\r\n        uint256 balance = getUserProfit(_address);\r\n\r\n        if (investor.deposit > 0 && balance > 0) {\r\n            if (address(this).balance < balance) {\r\n                balance = address(this).balance;\r\n            }\r\n\r\n            investor.withdrawals = investor.withdrawals.add(balance);\r\n            investor.paymentTime = now;\r\n\r\n            if (investor.withdrawals >= investor.deposit.mul(155).div(100)) {\r\n                investor.deposit = 0;\r\n                investor.paymentTime = 0;\r\n                investor.withdrawals = 0;\r\n                investor.hold = false;\r\n                countOfInvestors--;\r\n            }\r\n\r\n            msg.sender.transfer(balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev  You able:\r\n    * - To invest you can send at least 0.01 ETH to contract\r\n    * - To withdraw your profit you can send 0 ETH to contract\r\n    * - To turn on increasing percent you can send 0.001 ETH to contract\r\n    */\r\n    function () external payable {\r\n        Investor storage investor = investors[msg.sender];\r\n\r\n        if (msg.value >= 0.01 ether) {\r\n\r\n            ownerAddress.transfer(msg.value.mul(10).div(100));\r\n\r\n            if (investor.deposit == 0) {\r\n                countOfInvestors++;\r\n            }\r\n\r\n            withdraw(msg.sender);\r\n\r\n            investor.deposit = investor.deposit.add(msg.value);\r\n            investor.paymentTime = now;\r\n        } else if (msg.value == 0.001 ether) {\r\n            withdraw(msg.sender);\r\n            investor.hold = true;\r\n        } else {\r\n            withdraw(msg.sender);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"paymentTime\",\"type\":\"uint256\"},{\"name\":\"withdrawals\",\"type\":\"uint256\"},{\"name\":\"hold\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"OneHundredFiftyFive","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://03e15824efbf4304f8ab122e9796d73f32a7330964528bf24ac011046e16f107"}]}