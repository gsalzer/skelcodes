{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract CoblicAccessControl {\r\n\t/**\r\n\t *\t\t- The Admin: The admin can reassign other roles and change the addresses of Coblic's smart contracts.\r\n\t *\t\t\tIt is also the only role that can unpause the smart contract, and is initially set to the address\r\n\t *\t\t\tthat created the smart contract in the CoblicToken constructor.\r\n\t *\r\n\t *\t\t- The System: The System can call burn function\r\n\t *\r\n\t */\r\n\r\n\t// The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n\taddress public adminAddress;\r\n\taddress public systemAddress;\r\n\taddress public ceoAddress;\r\n\r\n\t/// @dev Access modifier for Admin-only functionality\r\n\tmodifier onlyAdmin() {\r\n\t\trequire(msg.sender == adminAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\t// @dev Access modifier for CEO-only functionality\r\n\tmodifier onlyCEO() {\r\n\t\trequire(msg.sender == ceoAddress || msg.sender == adminAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\t/// @dev Access modifier for System-only functionality\r\n\tmodifier onlySystem() {\r\n\t\trequire(msg.sender == systemAddress || msg.sender == adminAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\t/// @dev Assigns a new address to act as the Admin. Only available to the current Admin.\r\n\t/// @param _newAdminAddress The address of the new Admin\r\n\tfunction setAdmin(address _newAdminAddress) public onlyAdmin {\r\n\t\trequire(_newAdminAddress != address(0));\r\n\r\n\t\tadminAddress = _newAdminAddress;\r\n\t}\r\n\r\n\t/// @dev Assigns a new address to act as the System. Only available to the current Admin.\r\n\t/// @param _newSystemAddress The address of the new System\r\n\tfunction setSystem(address _newSystemAddress) public onlySystem {\r\n\t\trequire(_newSystemAddress != address(0));\r\n\r\n\t\tsystemAddress = _newSystemAddress;\r\n\t}\r\n\r\n\t/// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n\t/// @param _newCEOAddress The address of the new CEO\r\n\tfunction setCEO(address _newCEOAddress) public onlyCEO {\r\n\t\trequire(_newCEOAddress != address(0));\r\n\r\n\t\tceoAddress = _newCEOAddress;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC1132 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/1132\r\n */\r\n\r\ncontract ERC1132 {\r\n\t/**\r\n\t * @dev Reasons why a user's tokens have been locked\r\n\t */\r\n\tmapping(address => bytes32[]) public lockReason;\r\n\r\n\t/**\r\n\t * @dev locked token structure\r\n\t */\r\n\tstruct lockToken {\r\n\t\tuint256 amount;\r\n\t\tuint256 validity;\r\n\t\tbool claimed;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Holds number & validity of tokens locked for a given reason for\r\n\t *      a specified address\r\n\t */\r\n\tmapping(address => mapping(bytes32 => lockToken)) public locked;\r\n\r\n\t/**\r\n\t * @dev Records data of all the tokens Locked\r\n\t */\r\n\tevent Locked(\r\n\t\t\taddress indexed _of,\r\n\t\t\tbytes32 indexed _reason,\r\n\t\t\tuint256 _amount,\r\n\t\t\tuint256 _validity\r\n\t\t\t);\r\n\r\n\t/**\r\n\t * @dev Records data of all the tokens unlocked\r\n\t */\r\n\tevent Unlocked(\r\n\t\t\taddress indexed _of,\r\n\t\t\tbytes32 indexed _reason,\r\n\t\t\tuint256 _amount\r\n\t\t\t);\r\n\r\n\t/**\r\n\t * @dev Locks a specified amount of tokens against an address,\r\n\t *      for a specified reason and time\r\n\t * @param _reason The reason to lock tokens\r\n\t * @param _amount Number of tokens to be locked\r\n\t * @param _time Lock time in seconds\r\n\t * @param _of address to be locked\r\n\t */\r\n\tfunction lock(bytes32 _reason, uint256 _amount, uint256 _time, address _of)\r\n\t\tpublic returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns tokens locked for a specified address for a\r\n\t *      specified reason\r\n\t *\r\n\t * @param _of The address whose tokens are locked\r\n\t * @param _reason The reason to query the lock tokens for\r\n\t */\r\n\tfunction tokensLocked(address _of, bytes32 _reason)\r\n\t\tpublic view returns (uint256 amount);\r\n\r\n\t/**\r\n\t * @dev Returns tokens locked for a specified address for a\r\n\t *      specified reason at a specific time\r\n\t *\r\n\t * @param _of The address whose tokens are locked\r\n\t * @param _reason The reason to query the lock tokens for\r\n\t * @param _time The timestamp to query the lock tokens for\r\n\t */\r\n\tfunction tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\r\n\t\tpublic view returns (uint256 amount);\r\n\r\n\t/**\r\n\t * @dev Returns total tokens held by an address (locked + transferable)\r\n\t * @param _of The address to query the total balance of\r\n\t */\r\n\tfunction totalBalanceOf(address _of)\r\n\t\tpublic view returns (uint256 amount);\r\n\r\n\t/**\r\n\t * @dev Extends lock for a specified reason and time\r\n\t * @param _reason The reason to lock tokens\r\n\t * @param _time Lock extension time in seconds\r\n\t */\r\n\tfunction extendLock(bytes32 _reason, uint256 _time)\r\n\t\tpublic returns (bool);\r\n\r\n\t/**\r\n\t * @dev Increase number of tokens locked for a specified reason\r\n\t * @param _reason The reason to lock tokens\r\n\t * @param _amount Number of tokens to be increased\r\n\t */\r\n\tfunction increaseLockAmount(bytes32 _reason, uint256 _amount)\r\n\t\tpublic returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns unlockable tokens for a specified address for a specified reason\r\n\t * @param _of The address to query the the unlockable token count of\r\n\t * @param _reason The reason to query the unlockable tokens for\r\n\t */\r\n\tfunction tokensUnlockable(address _of, bytes32 _reason)\r\n\t\tpublic view returns (uint256 amount);\r\n\r\n\t/**\r\n\t * @dev Unlocks the unlockable tokens of a specified address\r\n\t * @param _of Address of user, claiming back unlockable tokens\r\n\t */\r\n\tfunction unlock(address _of)\r\n\t\tpublic returns (uint256 unlockableTokens);\r\n\r\n\t/**\r\n\t * @dev Gets the unlockable tokens of a specified address\r\n\t * @param _of The address to query the the unlockable token count of\r\n\t */\r\n\tfunction getUnlockableTokens(address _of)\r\n\t\tpublic view returns (uint256 unlockableTokens);\r\n\r\n}\r\n\r\ncontract CoblicToken is StandardToken, CoblicAccessControl, ERC1132 {\r\n\t// Define constants\r\n\tstring public constant name = \"Coblic Token\";\r\n\tstring public constant symbol = \"CT\";\r\n\tuint256 public constant decimals = 18;\r\n\tuint256 public constant INITIAL_SUPPLY = 20000000000 * (10 ** decimals);\r\n\r\n\tevent Mint(address minter, uint256 value);\r\n\tevent Burn(address burner, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Error messages for require statements\r\n\t */\r\n\tstring internal constant INVALID_TOKEN_VALUES = 'Invalid token values';\r\n\tstring internal constant NOT_ENOUGH_TOKENS = 'Not enough tokens';\r\n\tstring internal constant ALREADY_LOCKED = 'Tokens already locked';\r\n\tstring internal constant NOT_LOCKED = 'No tokens locked';\r\n\tstring internal constant AMOUNT_ZERO = 'Amount can not be 0';\r\n\r\n\tconstructor(address _adminAddress, address _systemAddress, address _ceoAddress) public {\r\n\t\tadminAddress = _adminAddress;\r\n\t\tsystemAddress = _systemAddress;\r\n\t\tceoAddress = _ceoAddress;\r\n\t\ttotalSupply_ = INITIAL_SUPPLY;\r\n\t\tbalances[adminAddress] = INITIAL_SUPPLY;\r\n\t}\r\n\r\n\t/**\r\n\t * admin or system can call burn function to burn tokens in 0x0 address\r\n\t */\r\n\r\n\t/**\r\n\t * @dev Mint a specified amount of tokens to the Admin address. Only available to the Admin.\r\n\t * @param _to address to mint\r\n\t * @param _amount an amount value to be minted\r\n\t */\r\n\tfunction mint(address _to, uint256 _amount) public onlyAdmin {\r\n\t\trequire(_amount > 0, INVALID_TOKEN_VALUES);\r\n\t\tbalances[_to] = balances[_to].add(_amount);\r\n\t\ttotalSupply_ = totalSupply_.add(_amount);\r\n\t\temit Mint(_to, _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burn a specified amount of tokens in msg.sender. Only available to the Admin and System.\r\n\t * @param _of address to burn\r\n\t * @param _amount an amount value to be burned\r\n\t */\r\n\tfunction burn(address _of, uint256 _amount) public onlySystem {\r\n\t\trequire(_amount > 0, INVALID_TOKEN_VALUES);\r\n\t\trequire(_amount <= balances[_of], NOT_ENOUGH_TOKENS);\r\n\t\tbalances[_of] = balances[_of].sub(_amount);\r\n\t\ttotalSupply_ = totalSupply_.sub(_amount);\r\n\t\temit Burn(_of, _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Locks a specified amount of tokens against an address,\r\n\t *      for a specified reason and time\r\n\t * @param _reason The reason to lock tokens\r\n\t * @param _amount Number of tokens to be locked\r\n\t * @param _time Lock time in seconds\r\n\t * @param _of address to be locked\r\n\t */\r\n\tfunction lock(bytes32 _reason, uint256 _amount, uint256 _time, address _of) public onlyAdmin returns (bool) {\r\n\t\tuint256 validUntil = now.add(_time); //solhint-disable-line\r\n\r\n\t\t// If tokens are already locked, then functions extendLock or\r\n\t\t// increaseLockAmount should be used to make any changes\r\n\t\trequire(_amount <= balances[_of], NOT_ENOUGH_TOKENS);\r\n\t\trequire(tokensLocked(_of, _reason) == 0, ALREADY_LOCKED);\r\n\t\trequire(_amount != 0, AMOUNT_ZERO);\r\n\r\n\t\tif (locked[_of][_reason].amount == 0)\r\n\t\t\tlockReason[_of].push(_reason);\r\n\r\n\t\tbalances[address(this)] = balances[address(this)].add(_amount);\r\n\t\tbalances[_of] = balances[_of].sub(_amount);\r\n\r\n\t\tlocked[_of][_reason] = lockToken(_amount, validUntil, false);\r\n\r\n\t\temit Transfer(_of, address(this), _amount);\r\n\t\temit Locked(_of, _reason, _amount, validUntil);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers and Locks a specified amount of tokens,\r\n\t *      for a specified reason and time\r\n\t * @param _to adress to which tokens are to be transfered\r\n\t * @param _reason The reason to lock tokens\r\n\t * @param _amount Number of tokens to be transfered and locked\r\n\t * @param _time Lock time in seconds\r\n\t */\r\n\tfunction transferWithLock(address _to, bytes32 _reason, uint256 _amount, uint256 _time) public returns (bool) {\r\n\t\tuint256 validUntil = now.add(_time); //solhint-disable-line\r\n\r\n\t\trequire(tokensLocked(_to, _reason) == 0, ALREADY_LOCKED);\r\n\t\trequire(_amount != 0, AMOUNT_ZERO);\r\n\r\n\t\tif (locked[_to][_reason].amount == 0)\r\n\t\t\tlockReason[_to].push(_reason);\r\n\r\n\t\ttransfer(address(this), _amount);\r\n\r\n\t\tlocked[_to][_reason] = lockToken(_amount, validUntil, false);\r\n\r\n\t\temit Locked(_to, _reason, _amount, validUntil);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns tokens locked for a specified address for a\r\n\t *      specified reason\r\n\t *\r\n\t * @param _of The address whose tokens are locked\r\n\t * @param _reason The reason to query the lock tokens for\r\n\t */\r\n\tfunction tokensLocked(address _of, bytes32 _reason) public view returns (uint256 amount) {\r\n\t\tif (!locked[_of][_reason].claimed)\r\n\t\t\tamount = locked[_of][_reason].amount;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns tokens locked for a specified address for a\r\n\t *      specified reason at a specific time\r\n\t *\r\n\t * @param _of The address whose tokens are locked\r\n\t * @param _reason The reason to query the lock tokens for\r\n\t * @param _time The timestamp to query the lock tokens for\r\n\t */\r\n\tfunction tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time) public view returns (uint256 amount) {\r\n\t\tif (locked[_of][_reason].validity > _time)\r\n\t\t\tamount = locked[_of][_reason].amount;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns total tokens held by an address (locked + transferable)\r\n\t * @param _of The address to query the total balance of\r\n\t */\r\n\tfunction totalBalanceOf(address _of) public view returns (uint256 amount) {\r\n\t\tamount = balanceOf(_of);\r\n\r\n\t\tfor (uint256 i = 0; i < lockReason[_of].length; i++) {\r\n\t\t\tamount = amount.add(tokensLocked(_of, lockReason[_of][i]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Extends lock for a specified reason and time\r\n\t * @param _reason The reason to lock tokens\r\n\t * @param _time Lock extension time in seconds\r\n\t */\r\n\tfunction extendLock(bytes32 _reason, uint256 _time) public returns (bool) {\r\n\t\trequire(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\r\n\r\n\t\tlocked[msg.sender][_reason].validity = locked[msg.sender][_reason].validity.add(_time);\r\n\r\n\t\temit Locked(msg.sender, _reason, locked[msg.sender][_reason].amount, locked[msg.sender][_reason].validity);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Increase number of tokens locked for a specified reason\r\n\t * @param _reason The reason to lock tokens\r\n\t * @param _amount Number of tokens to be increased\r\n\t */\r\n\tfunction increaseLockAmount(bytes32 _reason, uint256 _amount) public returns (bool) {\r\n\t\trequire(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\r\n\t\ttransfer(address(this), _amount);\r\n\r\n\t\tlocked[msg.sender][_reason].amount = locked[msg.sender][_reason].amount.add(_amount);\r\n\r\n\t\temit Locked(msg.sender, _reason, locked[msg.sender][_reason].amount, locked[msg.sender][_reason].validity);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns unlockable tokens for a specified address for a specified reason\r\n\t * @param _of The address to query the the unlockable token count of\r\n\t * @param _reason The reason to query the unlockable tokens for\r\n\t */\r\n\tfunction tokensUnlockable(address _of, bytes32 _reason) public view returns (uint256 amount) {\r\n\t\tif (locked[_of][_reason].validity <= now && !locked[_of][_reason].claimed) //solhint-disable-line\r\n\t\t\tamount = locked[_of][_reason].amount;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Unlocks the unlockable tokens of a specified address\r\n\t * @param _of Address of user, claiming back unlockable tokens\r\n\t */\r\n\tfunction unlock(address _of) public returns (uint256 unlockableTokens) {\r\n\t\tuint256 lockedTokens;\r\n\r\n\t\tfor (uint256 i = 0; i < lockReason[_of].length; i++) {\r\n\t\t\tlockedTokens = tokensUnlockable(_of, lockReason[_of][i]);\r\n\t\t\tif (lockedTokens > 0) {\r\n\t\t\t\tunlockableTokens = unlockableTokens.add(lockedTokens);\r\n\t\t\t\tlocked[_of][lockReason[_of][i]].claimed = true;\r\n\t\t\t\temit Unlocked(_of, lockReason[_of][i], lockedTokens);\r\n\t\t\t}\r\n\t\t}  \r\n\r\n\t\tif (unlockableTokens > 0)\r\n\t\t\tthis.transfer(_of, unlockableTokens);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Gets the unlockable tokens of a specified address\r\n\t * @param _of The address to query the the unlockable token count of\r\n\t */\r\n\tfunction getUnlockableTokens(address _of) public view returns (uint256 unlockableTokens) {\r\n\t\tfor (uint256 i = 0; i < lockReason[_of].length; i++) {\r\n\t\t\tunlockableTokens = unlockableTokens.add(tokensUnlockable(_of, lockReason[_of][i]));\r\n\t\t}  \r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"tokensLockedAtTime\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEOAddress\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"unlockableTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"transferWithLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"tokensUnlockable\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSystemAddress\",\"type\":\"address\"}],\"name\":\"setSystem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"tokensLocked\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdminAddress\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockReason\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"extendLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getUnlockableTokens\",\"outputs\":[{\"name\":\"unlockableTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"systemAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"validity\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"},{\"name\":\"_systemAddress\",\"type\":\"address\"},{\"name\":\"_ceoAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_validity\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CoblicToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000063e871cefe1b456c068c19d7ab5e22c302152550000000000000000000000000d9f4e62bba20a25b29e4ec10647786c7bc9ab174000000000000000000000000766749ca5dd8fe6a1c97fa90465144103cc9cf42","Library":"","SwarmSource":"bzzr://1509146146041af804f6c125fa2fa1cf75bbbabf8b2f98b75a098e6fcc85432e"}]}