{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n    This contract represents a sort of time-limited challenge,\r\n    where users can vote for some candidates.\r\n    After the deadline comes the contract will define a winner and vote holders can get their reward.\r\n**/\r\ncontract VotingChallenge {\r\n    uint public challengeDuration;\r\n    uint public challengePrize;\r\n    uint public creatorPrize;\r\n    uint public cryptoVersusPrize;\r\n    uint public challengeStarted;\r\n    uint public candidatesNumber;\r\n    address public creator;\r\n    uint16 public creatorFee;       // measured in in tenths of a percent\r\n    address public cryptoVersusWallet;\r\n    uint16 public cryptoVersusFee;  // measured in in tenths of a percent\r\n    uint public winner;\r\n    bool public isVotingPeriod;\r\n    bool public beforeVoting;\r\n    uint[] public votes;\r\n    mapping( address => mapping (uint => uint)) public userVotesDistribution;\r\n    uint private lastPayment;\r\n\r\n    // Modifiers\r\n    modifier inVotingPeriod() {\r\n        require(isVotingPeriod);\r\n        _;\r\n    }\r\n\r\n    modifier afterVotingPeriod() {\r\n        require(!isVotingPeriod);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCreator() {\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event ChallengeBegins(address _creator, uint16 _creatorFee, uint _candidatesNumber, uint _challengeDuration);\r\n    event NewVotesFor(address _participant, uint _candidate, uint _votes);\r\n    event TransferVotes(address _from, address _to, uint _candidateIndex, uint _votes);\r\n    event EndOfChallenge(uint _winner, uint _winnerVotes, uint _challengePrize);\r\n    event RewardWasPaid(address _participant, uint _amount);\r\n    event CreatorRewardWasPaid(address _creator, uint _amount);\r\n    event CryptoVersusRewardWasPaid(address _cryptoVersusWallet, uint _amount);\r\n\r\n    // Constructor\r\n    constructor(uint _challengeDuration, uint _candidatesNumber, uint16 _creatorFee) public {\r\n        challengeDuration = _challengeDuration;\r\n        candidatesNumber = _candidatesNumber;\r\n        votes.length = candidatesNumber + 1; // we will never use the first elements of array (with zero index)\r\n        creator = msg.sender;\r\n        cryptoVersusWallet = 0xa0bedE75cfeEF0266f8A31b47074F5f9fBE1df80;\r\n        creatorFee = _creatorFee;\r\n        cryptoVersusFee = 25;\r\n        beforeVoting = true;\r\n\r\n        // Check that creatorFee and cryptoVersusFee are less than 1000\r\n        if(creatorFee > 1000) {\r\n            creatorFee = 1000;\r\n            cryptoVersusFee = 0;\r\n            return;\r\n        }\r\n        if(cryptoVersusFee > 1000) {\r\n            cryptoVersusFee = 1000;\r\n            creatorFee = 0;\r\n            return;\r\n        }\r\n        if(creatorFee + cryptoVersusFee > 1000) {\r\n            cryptoVersusFee = 1000 - creatorFee;\r\n        }\r\n    }\r\n\r\n    // Last block timestamp getter\r\n    function getTime() public view returns (uint) {\r\n        return now;\r\n    }\r\n\r\n    function getAllVotes() public view returns (uint[]) {\r\n        return votes;\r\n    }\r\n\r\n    // Start challenge\r\n    function startChallenge() public onlyCreator {\r\n        require(beforeVoting);\r\n        isVotingPeriod = true;\r\n        beforeVoting = false;\r\n        challengeStarted = now;\r\n\r\n        emit ChallengeBegins(creator, creatorFee, candidatesNumber, challengeDuration);\r\n    }\r\n\r\n    // Change creator address\r\n    function changeCreator(address newCreator) public onlyCreator {\r\n        creator = newCreator;\r\n    }\r\n\r\n    // Change Crypto Versus wallet address\r\n    function changeWallet(address newWallet) public {\r\n        require(msg.sender == cryptoVersusWallet);\r\n        cryptoVersusWallet = newWallet;\r\n    }\r\n\r\n    // Vote for candidate\r\n    function voteForCandidate(uint candidate) public payable inVotingPeriod {\r\n        require(candidate <= candidatesNumber);\r\n        require(candidate > 0);\r\n        require(msg.value > 0);\r\n\r\n        lastPayment = msg.value;\r\n        if(checkEndOfChallenge()) {\r\n            msg.sender.transfer(lastPayment);\r\n            return;\r\n        }\r\n        lastPayment = 0;\r\n\r\n        // Add new votes for community\r\n        votes[candidate] += msg.value;\r\n\r\n        // Change the votes distribution\r\n        userVotesDistribution[msg.sender][candidate] += msg.value;\r\n\r\n        // Fire the event\r\n        emit NewVotesFor(msg.sender, candidate, msg.value);\r\n    }\r\n\r\n    // Transfer votes to anybody\r\n    function transferVotes (address to, uint candidate) public inVotingPeriod {\r\n        require(userVotesDistribution[msg.sender][candidate] > 0);\r\n        uint votesToTransfer = userVotesDistribution[msg.sender][candidate];\r\n        userVotesDistribution[msg.sender][candidate] = 0;\r\n        userVotesDistribution[to][candidate] += votesToTransfer;\r\n\r\n        // Fire the event\r\n        emit TransferVotes(msg.sender, to, candidate, votesToTransfer);\r\n    }\r\n\r\n    // Check the deadline\r\n    // If success then define a winner and close the challenge\r\n    function checkEndOfChallenge() public inVotingPeriod returns (bool) {\r\n        if (challengeStarted + challengeDuration > now)\r\n            return false;\r\n        uint theWinner;\r\n        uint winnerVotes;\r\n        uint actualBalance = address(this).balance - lastPayment;\r\n\r\n        for (uint i = 1; i <= candidatesNumber; i++) {\r\n            if (votes[i] > winnerVotes) {\r\n                winnerVotes = votes[i];\r\n                theWinner = i;\r\n            }\r\n        }\r\n        winner = theWinner;\r\n        creatorPrize = (actualBalance * creatorFee) / 1000;\r\n        cryptoVersusPrize = (actualBalance * cryptoVersusFee) / 1000;\r\n        challengePrize = actualBalance - creatorPrize - cryptoVersusPrize;\r\n        isVotingPeriod = false;\r\n\r\n        // Fire the event\r\n        emit EndOfChallenge(winner, winnerVotes, challengePrize);\r\n        return true;\r\n    }\r\n\r\n    // Send a reward if user voted for a winner\r\n    function getReward() public afterVotingPeriod {\r\n        require(userVotesDistribution[msg.sender][winner] > 0);\r\n\r\n        // Compute a vote ratio and send the reward\r\n        uint userVotesForWinner = userVotesDistribution[msg.sender][winner];\r\n        userVotesDistribution[msg.sender][winner] = 0;\r\n        uint reward = (challengePrize * userVotesForWinner) / votes[winner];\r\n        msg.sender.transfer(reward);\r\n\r\n        // Fire the event\r\n        emit RewardWasPaid(msg.sender, reward);\r\n    }\r\n\r\n    // Send a reward if user voted for a winner\r\n    function sendReward(address to) public afterVotingPeriod {\r\n        require(userVotesDistribution[to][winner] > 0);\r\n\r\n        // Compute a vote ratio and send the reward\r\n        uint userVotesForWinner = userVotesDistribution[to][winner];\r\n        userVotesDistribution[to][winner] = 0;\r\n        uint reward = (challengePrize * userVotesForWinner) / votes[winner];\r\n        to.transfer(reward);\r\n\r\n        // Fire the event\r\n        emit RewardWasPaid(to, reward);\r\n    }\r\n\r\n    // Send a reward to challenge creator\r\n    function sendCreatorReward() public afterVotingPeriod {\r\n        require(creatorPrize > 0);\r\n        uint creatorReward = creatorPrize;\r\n        creatorPrize = 0;\r\n        creator.transfer(creatorReward);\r\n\r\n        // Fire the event\r\n        emit CreatorRewardWasPaid(creator, creatorReward);\r\n    }\r\n\r\n    // Send a reward to cryptoVersusWallet\r\n    function sendCryptoVersusReward() public afterVotingPeriod {\r\n        require(cryptoVersusPrize > 0);\r\n        uint cryptoVersusReward = cryptoVersusPrize;\r\n        cryptoVersusPrize = 0;\r\n        cryptoVersusWallet.transfer(cryptoVersusReward);\r\n\r\n        // Fire the event\r\n        emit CryptoVersusRewardWasPaid(cryptoVersusWallet, cryptoVersusReward);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendCreatorReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"uint256\"}],\"name\":\"voteForCandidate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoVersusPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkEndOfChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoVersusWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beforeVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"candidate\",\"type\":\"uint256\"}],\"name\":\"transferVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candidatesNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"changeCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoVersusFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendCryptoVersusReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVotesDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVotingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_challengeDuration\",\"type\":\"uint256\"},{\"name\":\"_candidatesNumber\",\"type\":\"uint256\"},{\"name\":\"_creatorFee\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_creatorFee\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"_candidatesNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_challengeDuration\",\"type\":\"uint256\"}],\"name\":\"ChallengeBegins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_candidate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_votes\",\"type\":\"uint256\"}],\"name\":\"NewVotesFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_candidateIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_votes\",\"type\":\"uint256\"}],\"name\":\"TransferVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_winner\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winnerVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_challengePrize\",\"type\":\"uint256\"}],\"name\":\"EndOfChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardWasPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreatorRewardWasPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cryptoVersusWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CryptoVersusRewardWasPaid\",\"type\":\"event\"}]","ContractName":"VotingChallenge","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000025800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002","Library":"","SwarmSource":"bzzr://b049ad5614a3041289f914f5d436f3ac1637107858f237fb4c73b1736f4eb731"}]}