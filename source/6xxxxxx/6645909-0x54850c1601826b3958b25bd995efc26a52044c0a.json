{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ERC20 {\r\n    function totalSupply() constant public returns (uint supply);\r\n    function balanceOf( address who ) constant public returns (uint value);\r\n    function allowance( address owner, address spender ) constant public returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint              wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) constant public returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public\r\n        auth\r\n    {\r\n        require(owner_ != address(0));\r\n        \r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        assert(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    modifier authorized(bytes4 sig) {\r\n        assert(isAuthorized(msg.sender, sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) view internal returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSStop is DSAuth, DSNote {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n    \r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n    \r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\ncontract DSMath {\r\n    \r\n    /*\r\n    standard uint256 functions\r\n     */\r\n\r\n    function add(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    \r\n    function max(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    \r\n\r\n    /*\r\n    uint128 functions (h is for half)\r\n     */\r\n\r\n    function hadd(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function hsub(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function hmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function hdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function hmin(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    \r\n    function hmax(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n\r\n    /*\r\n    int256 functions\r\n     */\r\n\r\n    function imin(int256 x, int256 y) pure internal returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    \r\n    function imax(int256 x, int256 y) pure internal returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    WAD math\r\n     */\r\n\r\n    uint128 constant WAD = 10 ** 18;\r\n\r\n    function wadd(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function wsub(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function wmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = cast((uint256(x) * y + WAD / 2) / WAD);\r\n    }\r\n\r\n    function wdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = cast((uint256(x) * WAD + y / 2) / y);\r\n    }\r\n\r\n    function wmin(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    \r\n    function wmax(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    /*\r\n    RAY math\r\n     */\r\n\r\n    uint128 constant RAY = 10 ** 27;\r\n\r\n    function radd(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function rsub(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function rmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = cast((uint256(x) * y + RAY / 2) / RAY);\r\n    }\r\n\r\n    function rdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = cast((uint256(x) * RAY + y / 2) / y);\r\n    }\r\n\r\n    function rpow(uint128 x, uint64 n) pure internal returns (uint128 z) {\r\n        // This famous algorithm is called \"exponentiation by squaring\"\r\n        // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n        //\r\n        // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n        //\r\n        // These facts are why it works:\r\n        //\r\n        //  If n is even, then x^n = (x^2)^(n/2).\r\n        //  If n is odd,  then x^n = x * x^(n-1),\r\n        //   and applying the equation for even x gives\r\n        //    x^n = x * (x^2)^((n-1) / 2).\r\n        //\r\n        //  Also, EVM division is flooring and\r\n        //    floor[(n-1) / 2] = floor[n / 2].\r\n\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rmin(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    \r\n    function rmax(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    function cast(uint256 x) pure internal returns (uint128 z) {\r\n        assert((z = uint128(x)) == x);\r\n    }\r\n\r\n}\r\n\r\ncontract DSTokenBase is ERC20, DSMath {\r\n    uint256                                            _supply;\r\n    mapping (address => uint256)                       _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n    \r\n    \r\n    constructor(uint256 supply) public {\r\n        _balances[msg.sender] = supply;\r\n        _supply = supply;\r\n    }\r\n    \r\n    function totalSupply() public constant returns (uint256) {\r\n        return _supply;\r\n    }\r\n    \r\n    function balanceOf(address src) public constant returns (uint256) {\r\n        return _balances[src];\r\n    }\r\n    \r\n    function allowance(address src, address guy) public constant returns (uint256) {\r\n        return _approvals[src][guy];\r\n    }\r\n    \r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        assert(_balances[msg.sender] >= wad);\r\n        \r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n        \r\n        emit Transfer(msg.sender, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address src, address dst, uint wad) public returns (bool) {\r\n        assert(_balances[src] >= wad);\r\n        assert(_approvals[src][msg.sender] >= wad);\r\n        \r\n        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n        \r\n        emit Transfer(src, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address guy, uint256 wad) public returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n        \r\n        emit Approval(msg.sender, guy, wad);\r\n        \r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DSToken is DSTokenBase(0), DSStop {\r\n\r\n    string public name = \"ERC20 CES\";\r\n    string public symbol = \"CES\"; // token name\r\n    uint8  public decimals = 0;   // standard token precision\r\n\r\n    function transfer(address dst, uint wad) public stoppable note returns (bool) {\r\n        return super.transfer(dst, wad);\r\n    }\r\n    \r\n    function transferFrom(address src, address dst, uint wad) \r\n        public stoppable note returns (bool) {\r\n        return super.transferFrom(src, dst, wad);\r\n    }\r\n    \r\n    function approve(address guy, uint wad) public stoppable note returns (bool) {\r\n        return super.approve(guy, wad);\r\n    }\r\n\r\n    function push(address dst, uint128 wad) public returns (bool) {\r\n        return transfer(dst, wad);\r\n    }\r\n    \r\n    function pull(address src, uint128 wad) public returns (bool) {\r\n        return transferFrom(src, msg.sender, wad);\r\n    }\r\n\r\n    function mint(uint128 wad) public auth stoppable note {\r\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\r\n        _supply = add(_supply, wad);\r\n    }\r\n\r\n    function burn(uint128 wad) public auth stoppable note {\r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _supply = sub(_supply, wad);\r\n    }\r\n    \r\n    /*\r\n    function setName(string name_, string symbol_) public auth {\r\n        name = name_;\r\n        symbol = symbol_;\r\n    }\r\n    */\r\n}\r\n\r\n\r\ncontract CESVendue is DSAuth, DSMath {\r\n    \r\n    DSToken public CES;\r\n    \r\n    uint public totalETH;      // total ETH was got by vendue\r\n    uint public price;         // vendue Reserve price\r\n    \r\n    uint32 public iaSupply;    // total initialize account for vendue\r\n    uint32 public iaLeft;      // how many initialize account was left\r\n    \r\n    struct accountInfo {\r\n        // vendue ETH\r\n        uint ethVendue;\r\n        \r\n        // The account name used at CES block chain ecocsystem\r\n        string accountName;\r\n        // The public key used for your account\r\n        string publicKey;\r\n        // The pinblock used for your account calc by your password\r\n        string pinblock;\r\n    }\r\n    \r\n    struct elfInfo {\r\n        // whether get the elf\r\n        bool bGetElf;\r\n        \r\n        // The elf sex\r\n        uint8 elfSex;\r\n        // The elf type\r\n        uint16 elfType;\r\n    }\r\n    \r\n    mapping (address => elfInfo)     public elfInfos;\r\n    mapping (address => accountInfo) public initAccInfos; //   init account\r\n    mapping (address => string)      public commonAccs;   // common account\r\n    \r\n    address public godOwner;// the owner who got the god after vendue was closed\r\n    uint16  public godID;   // god owner select his god\r\n    \r\n    bool public vendueClose = false;\r\n    bool public tokenFreeze = false;\r\n    \r\n    address[] public addrLists;\r\n    \r\n    uint startLine;\r\n    \r\n    \r\n    event LogFund(address backer, uint amount, bool isContribution, uint gift);\r\n    event LogFreeze();\r\n    event LogElf(address user, uint8 elfSex, uint16 elfType);\r\n    event LogGod(address owner, uint16 godID);\r\n    event LogInitAcc(address user, string account, string key, string pin);\r\n    event LogRegister(address user, string key, uint token);\r\n    \r\n\r\n    constructor() public {\r\n        iaSupply = 20000;\r\n        iaLeft = iaSupply;\r\n        startLine = now;\r\n        price = 5 ether;\r\n    }\r\n    \r\n    function initialize(DSToken tokenReward) public auth {\r\n        assert(address(CES) == address(0));\r\n        assert(tokenReward.owner() == address(this));\r\n        assert(tokenReward.authority() == DSAuthority(0));\r\n        assert(tokenReward.totalSupply() == 0);\r\n        \r\n        uint128 totalIssue     = 1000000000; //   1 billion coin total issue\r\n        uint128 coinDisable    =  600000000; // 0.6 billion coin for disable\r\n        uint128 coinContribute =  200000000; // 0.2 billion coin for contribute\r\n      //uint128 coinGiftA      =  100000000; // 0.1 billion coin gift for vendue\r\n        uint128 coinGiftB      =  100000000; // 0.1 billion coin for chain, APP, airdrops\r\n                                             \r\n        startLine = now;\r\n        \r\n        CES = tokenReward;\r\n        CES.mint(totalIssue);\r\n        CES.push(0x00, hadd(coinDisable, coinContribute));\r\n        CES.push(msg.sender, coinGiftB);\r\n    }\r\n    \r\n    function setPrice(uint price_) external auth {\r\n        require(!vendueClose);\r\n        \r\n        price = price_;\r\n    }\r\n    \r\n    function balanceToken() public view returns (uint256) {\r\n        assert(address(CES) != address(0));\r\n        \r\n        return CES.balanceOf(this);\r\n    }\r\n    \r\n    function todayDays() public view returns (uint) {\r\n        return (div(sub(now, startLine), 1 days) + 1);\r\n    }\r\n\r\n    function () public payable {\r\n        require(!vendueClose);\r\n        require(iaLeft > 0);\r\n        require(msg.value >= price);\r\n        require(initAccInfos[msg.sender].ethVendue == 0);\r\n        \r\n        uint money = msg.value;\r\n        initAccInfos[msg.sender].ethVendue = money;\r\n        totalETH = add(totalETH, money);\r\n        \r\n        iaLeft--;\r\n        \r\n        // release period is 7 day \r\n        // elf gift at first month\r\n        uint dayNow = todayDays();\r\n        if(dayNow <= (30 + 7)) {\r\n            elfInfos[msg.sender].bGetElf = true;\r\n        }\r\n        \r\n        uint coinNeed;\r\n        uint giftLeft = balanceToken();\r\n        \r\n        // coin gift by initialize account\r\n        if(dayNow <= (90 + 7)) {\r\n            if(giftLeft >= 3500) {\r\n                coinNeed = 3500;\r\n            }\r\n        }\r\n        else {\r\n            if(giftLeft >= 2000) {\r\n                coinNeed = 2000;\r\n            }\r\n        }\r\n        \r\n        // coin gift by overflow ETH\r\n        if(money > price) {\r\n            uint multiple = div(sub(money, price), 1 ether);\r\n            uint moreGift = mul(multiple, 800);\r\n\r\n            if(moreGift > 0 && (sub(giftLeft, coinNeed) >= moreGift)) {\r\n                coinNeed = add(coinNeed, moreGift);\r\n            }\r\n        }\r\n\r\n        if(coinNeed > 0) {\r\n            CES.transfer(msg.sender, coinNeed);\r\n        }\r\n        \r\n        pushAddr(msg.sender);\r\n        \r\n        emit LogFund(msg.sender, money, true, coinNeed);\r\n    }\r\n    \r\n    function withdrawal() external auth {\r\n        \r\n        uint takeNow = sub(address(this).balance, 1 finney);\r\n        \r\n        if(takeNow > 0) {\r\n            if (msg.sender.send(takeNow)) {\r\n                emit LogFund(msg.sender, takeNow, false, 0);\r\n            }\r\n        } \r\n    }\r\n    \r\n    function vendueClosed() external auth {\r\n        vendueClose = true;\r\n        distillGodOwner();\r\n    }\r\n    \r\n    function freezeToken() external auth {\r\n        require(vendueClose);\r\n\r\n        tokenFreeze = true;\r\n        CES.stop();\r\n        \r\n        emit LogFreeze();\r\n    }\r\n    \r\n    function distillGodOwner() public auth {\r\n        require(vendueClose);\r\n\r\n        uint ethHighest = 0;\r\n        address addrHighest = address(0);\r\n        \r\n        address addr;\r\n        for(uint i = 0; i < addrLists.length; i++) {\r\n            addr = addrLists[i];\r\n            \r\n            if(address(addr) == address(0)) {\r\n                continue;\r\n            }\r\n            \r\n            if(initAccInfos[addr].ethVendue > ethHighest) {\r\n                ethHighest  = initAccInfos[addr].ethVendue;\r\n                addrHighest = addr;\r\n            }\r\n        }\r\n        \r\n        godOwner = addrHighest;\r\n    }\r\n    \r\n    function pushAddr(address dst) internal {\r\n\r\n        bool bExist = false;\r\n        address addr;\r\n        for(uint i = 0; i < addrLists.length; i++) {\r\n            addr = addrLists[i];\r\n            \r\n            if(address(addr) == address(dst)) {\r\n                bExist = true;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if(!bExist)\r\n        {\r\n            addrLists.push(dst);\r\n        }\r\n    }\r\n    \r\n    // Do this after we provide elf type to you select\r\n    function selectElf(uint8 elfSex, uint16 elfType) external {\r\n        require(elfInfos[msg.sender].bGetElf);\r\n\r\n        elfInfos[msg.sender].elfSex = elfSex;\r\n        elfInfos[msg.sender].elfType = elfType;\r\n    \r\n        emit LogElf(msg.sender, elfSex, elfType);\r\n    }\r\n    \r\n    // Do this after we provide god to you select\r\n    function selectGod(uint16 godID_) external {\r\n        require(vendueClose);\r\n        require(msg.sender == godOwner);\r\n\r\n        godID = godID_;\r\n        \r\n        emit LogGod(godOwner, godID);\r\n    }\r\n    \r\n    // Do this after we provide tool to produce public key and encrypt your password\r\n    function regInitAccount(string account, string publicKey, string pinblock) external {\r\n        require(initAccInfos[msg.sender].ethVendue > 0);\r\n\r\n        assert(bytes(account).length <= 10 && bytes(account).length >= 2);\r\n        assert(bytes(publicKey).length <= 128); //maybe public key is 64 bytes\r\n        assert(bytes(pinblock).length == 16 || bytes(pinblock).length == 32);\r\n\r\n        initAccInfos[msg.sender].accountName = account;\r\n        initAccInfos[msg.sender].publicKey = publicKey;\r\n        initAccInfos[msg.sender].pinblock = pinblock;\r\n    \r\n        emit LogInitAcc(msg.sender, account, publicKey, pinblock);\r\n    }\r\n    \r\n    // register your account then tell me your public key for transform token to coin\r\n    // init account don't need to do this\r\n    function register(string publicKey) external {\r\n        require(tokenFreeze);\r\n\r\n        assert(bytes(publicKey).length <= 128); //maybe public key is 64 bytes\r\n\r\n        commonAccs[msg.sender] = publicKey;\r\n        \r\n        uint token = CES.balanceOf(msg.sender);\r\n        emit LogRegister(msg.sender, publicKey, token);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"iaSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"elfSex\",\"type\":\"uint8\"},{\"name\":\"elfType\",\"type\":\"uint16\"}],\"name\":\"selectElf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vendueClose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"godOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addrLists\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"todayDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"elfInfos\",\"outputs\":[{\"name\":\"bGetElf\",\"type\":\"bool\"},{\"name\":\"elfSex\",\"type\":\"uint8\"},{\"name\":\"elfType\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CES\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distillGodOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"vendueClosed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"commonAccs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"godID_\",\"type\":\"uint16\"}],\"name\":\"selectGod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"publicKey\",\"type\":\"string\"},{\"name\":\"pinblock\",\"type\":\"string\"}],\"name\":\"regInitAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"godID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenReward\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initAccInfos\",\"outputs\":[{\"name\":\"ethVendue\",\"type\":\"uint256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"publicKey\",\"type\":\"string\"},{\"name\":\"pinblock\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"publicKey\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iaLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"gift\",\"type\":\"uint256\"}],\"name\":\"LogFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"elfSex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"elfType\",\"type\":\"uint16\"}],\"name\":\"LogElf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"godID\",\"type\":\"uint16\"}],\"name\":\"LogGod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pin\",\"type\":\"string\"}],\"name\":\"LogInitAcc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"LogRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"CESVendue","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://24fc9152ff05a3594928fcdb7cd9493a60afa3c818df1006bcb35dbd9b134305"}]}