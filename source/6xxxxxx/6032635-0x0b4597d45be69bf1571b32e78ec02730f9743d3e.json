{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// Use the dAppBridge service to generate random numbers\r\n// Powerful Data Oracle Service with easy to use methods, see: https://dAppBridge.com\r\n//\r\ninterface dAppBridge_I {\r\n    function getOwner() external returns(address);\r\n    function getMinReward(string requestType) external returns(uint256);\r\n    function getMinGas() external returns(uint256);    \r\n    // Only import the functions we use...\r\n    function callURL(string callback_method, string external_url, string external_params, string json_extract_element) external payable returns(bytes32);\r\n}\r\ncontract DappBridgeLocator_I {\r\n    function currentLocation() public returns(address);\r\n}\r\n\r\ncontract clientOfdAppBridge {\r\n    address internal _dAppBridgeLocator_Prod_addr = 0x5b63e582645227F1773bcFaE790Ea603dB948c6A;\r\n    \r\n    DappBridgeLocator_I internal dAppBridgeLocator;\r\n    dAppBridge_I internal dAppBridge; \r\n    uint256 internal current_gas = 0;\r\n    uint256 internal user_callback_gas = 0;\r\n    \r\n    function initBridge() internal {\r\n        //} != _dAppBridgeLocator_addr){\r\n        if(address(dAppBridgeLocator) != _dAppBridgeLocator_Prod_addr){ \r\n            dAppBridgeLocator = DappBridgeLocator_I(_dAppBridgeLocator_Prod_addr);\r\n        }\r\n        \r\n        if(address(dAppBridge) != dAppBridgeLocator.currentLocation()){\r\n            dAppBridge = dAppBridge_I(dAppBridgeLocator.currentLocation());\r\n        }\r\n        if(current_gas == 0) {\r\n            current_gas = dAppBridge.getMinGas();\r\n        }\r\n    }\r\n\r\n    modifier dAppBridgeClient {\r\n        initBridge();\r\n\r\n        _;\r\n    }\r\n    \r\n\r\n    event event_senderAddress(\r\n        address senderAddress\r\n    );\r\n    \r\n    event evnt_dAdppBridge_location(\r\n        address theLocation\r\n    );\r\n    \r\n    event only_dAppBridgeCheck(\r\n        address senderAddress,\r\n        address checkAddress\r\n    );\r\n    \r\n    modifier only_dAppBridge_ {\r\n        initBridge();\r\n        \r\n        //emit event_senderAddress(msg.sender);\r\n        //emit evnt_dAdppBridge_location(address(dAppBridge));\r\n        emit only_dAppBridgeCheck(msg.sender, address(dAppBridge));\r\n        require(msg.sender == address(dAppBridge));\r\n        _;\r\n    }\r\n\r\n    // Ensures that only the dAppBridge system can call the function\r\n    modifier only_dAppBridge {\r\n        initBridge();\r\n        address _dAppBridgeOwner = dAppBridge.getOwner();\r\n        require(msg.sender == _dAppBridgeOwner);\r\n\r\n        _;\r\n    }\r\n    \r\n\r\n    \r\n    function setGas(uint256 new_gas) internal {\r\n        require(new_gas > 0);\r\n        current_gas = new_gas;\r\n    }\r\n\r\n    function setCallbackGas(uint256 new_callback_gas) internal {\r\n        require(new_callback_gas > 0);\r\n        user_callback_gas = new_callback_gas;\r\n    }\r\n\r\n    \r\n\r\n    function callURL(string callback_method, string external_url, string external_params) internal dAppBridgeClient returns(bytes32) {\r\n        uint256 _reward = dAppBridge.getMinReward('callURL')+user_callback_gas;\r\n        return dAppBridge.callURL.value(_reward).gas(current_gas)(callback_method, external_url, external_params, \"\");\r\n    }\r\n    function callURL(string callback_method, string external_url, string external_params, string json_extract_elemen) internal dAppBridgeClient returns(bytes32) {\r\n        uint256 _reward = dAppBridge.getMinReward('callURL')+user_callback_gas;\r\n        return dAppBridge.callURL.value(_reward).gas(current_gas)(callback_method, external_url, external_params, json_extract_elemen);\r\n    }\r\n\r\n\r\n    // Helper internal functions\r\n    function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n\r\n    function char(byte b) internal pure returns (byte c) {\r\n        if (b < 10) return byte(uint8(b) + 0x30);\r\n        else return byte(uint8(b) + 0x57);\r\n    }\r\n    \r\n    function bytes32string(bytes32 b32) internal pure returns (string out) {\r\n        bytes memory s = new bytes(64);\r\n        for (uint8 i = 0; i < 32; i++) {\r\n            byte b = byte(b32[i]);\r\n            byte hi = byte(uint8(b) / 16);\r\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\r\n            s[i*2] = char(hi);\r\n            s[i*2+1] = char(lo);            \r\n        }\r\n        out = string(s);\r\n    }\r\n\r\n    function compareStrings (string a, string b) internal pure returns (bool){\r\n        return keccak256(a) == keccak256(b);\r\n    }\r\n    \r\n    function concatStrings(string _a, string _b) internal pure returns (string){\r\n        bytes memory bytes_a = bytes(_a);\r\n        bytes memory bytes_b = bytes(_b);\r\n        string memory length_ab = new string(bytes_a.length + bytes_b.length);\r\n        bytes memory bytes_c = bytes(length_ab);\r\n        uint k = 0;\r\n        for (uint i = 0; i < bytes_a.length; i++) bytes_c[k++] = bytes_a[i];\r\n        for (i = 0; i < bytes_b.length; i++) bytes_c[k++] = bytes_b[i];\r\n        return string(bytes_c);\r\n    }\r\n}\r\n\r\n// SafeMath to protect overflows\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n//\r\n//\r\n// Main DiceRoll.app contract\r\n//\r\n//\r\n\r\ncontract DiceRoll is clientOfdAppBridge {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    \r\n    string public randomAPI_url;\r\n    string internal randomAPI_key;\r\n    string internal randomAPI_extract;\r\n    \r\n    struct playerDiceRoll {\r\n        bytes32     betID;\r\n        address     playerAddr;\r\n        uint256     rollUnder;\r\n        uint256     stake;\r\n        uint256     profit;\r\n        uint256     win;\r\n        bool        paid;\r\n        uint256     result;\r\n        uint256     timestamp;\r\n    }\r\n    \r\n\r\n    mapping (bytes32 => playerDiceRoll) public playerRolls;\r\n    mapping (address => uint256) playerPendingWithdrawals;\r\n\r\n    address public owner;\r\n    uint256 public contractBalance;\r\n    bool public game_paused;\r\n    uint256 minRoll;\r\n    uint256 maxRoll;\r\n    uint256 minBet;\r\n    uint256 maxBet;\r\n    uint256 public minRollUnder;\r\n    uint256 public houseEdge; // 98 = 2%\r\n    uint256 public totalUserProfit;\r\n    uint256 public totalWins; \r\n    uint256 public totalLosses;\r\n    uint256 public totalWinAmount;\r\n    uint256 public totalLossAmount;\r\n    uint256 public totalFails;\r\n    uint256 internal totalProfit;\r\n    uint256 public maxMultiRolls;\r\n    uint256 public gameNumber;\r\n    \r\n    uint256 public oracleFee;\r\n    \r\n    \r\n    mapping(uint256 => bool) public permittedRolls;\r\n    \r\n    uint public maxPendingPayouts; // Max potential payments\r\n\r\n    function private_getGameState() public view returns(uint256 _contractBalance,\r\n        bool _game_paused,\r\n        uint256 _minRoll,\r\n        uint256 _maxRoll,\r\n        uint256 _minBet,\r\n        uint256 _maxBet,\r\n        uint256 _houseEdge,\r\n        uint256 _totalUserProfit,\r\n        uint256 _totalWins,\r\n        uint256 _totalLosses,\r\n        uint256 _totalWinAmount,\r\n        uint256 _totalLossAmount,\r\n        uint256 _liveMaxBet,\r\n        uint256 _totalFails) {\r\n        _contractBalance = contractBalance;\r\n        _game_paused = game_paused;\r\n        _minRoll = minRoll;\r\n        _maxRoll = maxRoll;\r\n        _minBet = minBet;\r\n        _maxBet = maxBet;\r\n        _houseEdge = houseEdge;\r\n        _totalUserProfit = totalUserProfit;\r\n        _totalWins = totalWins;\r\n        _totalLosses = totalLosses;\r\n        _totalWinAmount = totalWinAmount;\r\n        _totalLossAmount = totalLossAmount;\r\n        _liveMaxBet = getLiveMaxBet();\r\n        _totalFails = totalFails;\r\n    \r\n    }\r\n    modifier onlyOwner() {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier gameActive() {\r\n        require (game_paused == false);\r\n        _;\r\n    }\r\n    modifier validBet(uint256 betSize, uint256 rollUnder) {\r\n        require(rollUnder > minRoll);\r\n        require(rollUnder < maxRoll);\r\n        require(betSize <= maxBet);\r\n        require(betSize >= minBet);\r\n        require(permittedRolls[rollUnder] == true);\r\n        \r\n        uint256 potential_profit = (msg.value * (houseEdge / rollUnder)) - msg.value;\r\n        require(maxPendingPayouts.add(potential_profit) <= address(this).balance);\r\n        \r\n        _;\r\n    }\r\n    \r\n    modifier validBetMulti(uint256 betSize, uint256 rollUnder, uint256 number_of_rolls) {\r\n        require(rollUnder > minRoll);\r\n        require(rollUnder < maxRoll);\r\n        require(betSize <= maxBet);\r\n        require(betSize >= minBet);\r\n        require(number_of_rolls <= maxMultiRolls);\r\n        require(permittedRolls[rollUnder] == true);\r\n        \r\n        uint256 potential_profit = (msg.value * (houseEdge / rollUnder)) - msg.value;\r\n        require(maxPendingPayouts.add(potential_profit) <= address(this).balance);\r\n        \r\n        _;\r\n    }\r\n\r\n\r\n\r\n    function getLiveMaxBet() public view returns(uint256) {\r\n        uint256 currentAvailBankRoll = address(this).balance.sub(maxPendingPayouts);\r\n        uint256 divisor = houseEdge.div(minRollUnder); // will be 4\r\n        uint256 liveMaxBet = currentAvailBankRoll.div(divisor); // 0.627852\r\n        if(liveMaxBet > maxBet)\r\n            liveMaxBet = maxBet;\r\n        return liveMaxBet;\r\n    }\r\n\r\n    function getBet(bytes32 _betID) public view returns(bytes32 betID,\r\n        address     playerAddr,\r\n        uint256     rollUnder,\r\n        uint256     stake,\r\n        uint256     profit,\r\n        uint256     win,\r\n        bool        paid,\r\n        uint256     result,\r\n        uint256     timestamp){\r\n        playerDiceRoll memory _playerDiceRoll = playerRolls[_betID];\r\n        betID = _betID;\r\n        playerAddr = _playerDiceRoll.playerAddr;\r\n        rollUnder = _playerDiceRoll.rollUnder;\r\n        stake = _playerDiceRoll.stake;\r\n        profit = _playerDiceRoll.profit;\r\n        win = _playerDiceRoll.win;\r\n        paid = _playerDiceRoll.paid;\r\n        result = _playerDiceRoll.result;\r\n        timestamp = _playerDiceRoll.timestamp;\r\n        \r\n    }\r\n\r\n    function getOwner() external view returns(address){\r\n        return owner;\r\n    }\r\n\r\n    function getBalance() external view returns(uint256){\r\n        address myAddress = this;\r\n        return myAddress.balance;\r\n    }\r\n    \r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n        houseEdge = 96; // 4% commission to us on wins\r\n        contractBalance = msg.value;\r\n        totalUserProfit = 0;\r\n        totalWins = 0;\r\n        totalLosses = 0;\r\n        minRoll = 1;\r\n        maxRoll = 100;\r\n        minBet = 15000000000000000; //200000000000000;\r\n        maxBet = 300000000000000000; //200000000000000000;\r\n        randomAPI_url = \"https://api.random.org/json-rpc/1/invoke\";\r\n        randomAPI_key = \"7d4ab655-e778-4d9f-815a-98fd518908bd\";\r\n        randomAPI_extract = \"result.random.data\";\r\n        //permittedRolls[10] = true;\r\n        permittedRolls[20] = true;\r\n        permittedRolls[30] = true;\r\n        permittedRolls[40] = true;\r\n        permittedRolls[50] = true;\r\n        permittedRolls[60] = true;\r\n        //permittedRolls[70] = true;\r\n        minRollUnder = 20;\r\n        totalProfit = 0;\r\n        totalWinAmount = 0;\r\n        totalLossAmount = 0;\r\n        totalFails = 0;\r\n        maxMultiRolls = 5;\r\n        gameNumber = 0;\r\n        oracleFee = 80000000000000; \r\n    }\r\n    \r\n    event DiceRollResult_failedSend(\r\n            bytes32 indexed betID,\r\n            address indexed playerAddress,\r\n            uint256 rollUnder,\r\n            uint256 result,\r\n            uint256 amountToSend\r\n        );\r\n        \r\n\r\n    // totalUserProfit : Includes the original stake\r\n    // totalWinAmount : Is just the win amount (Does not include orig stake)\r\n    event DiceRollResult(\r\n            bytes32 indexed betID, \r\n            address indexed playerAddress, \r\n            uint256 rollUnder, \r\n            uint256 result,\r\n            uint256 stake,\r\n            uint256 profit,\r\n            uint256 win,\r\n            bool paid,\r\n            uint256 timestamp);\r\n    \r\n    // This is called from dAppBridge.com with the random number with secure proof\r\n    function callback(bytes32 key, string callbackData) external payable only_dAppBridge {\r\n        require(playerRolls[key].playerAddr != address(0x0));\r\n        require(playerRolls[key].win == 2); // we've already process it if so!\r\n\r\n        playerRolls[key].result = parseInt(callbackData);\r\n        \r\n        uint256 _totalWin = playerRolls[key].stake.add(playerRolls[key].profit); // total we send back to playerRolls\r\n        \r\n        \r\n        if(maxPendingPayouts < playerRolls[key].profit){\r\n            //force refund as game failed...\r\n            playerRolls[key].result == 0;\r\n            \r\n        } else {\r\n            maxPendingPayouts = maxPendingPayouts.sub(playerRolls[key].profit); // take it out of the pending payouts now\r\n        }\r\n        \r\n        \r\n        \r\n        if(playerRolls[key].result == 0){\r\n\r\n            totalFails = totalFails.add(1);\r\n\r\n\r\n            if(!playerRolls[key].playerAddr.send(playerRolls[key].stake)){\r\n                //playerRolls[key].paid = false;\r\n                \r\n                \r\n                \r\n                emit DiceRollResult(key, playerRolls[key].playerAddr, playerRolls[key].rollUnder, playerRolls[key].result,\r\n                    playerRolls[key].stake, 0, 0, false, now);\r\n                \r\n                emit DiceRollResult_failedSend(\r\n                    key, playerRolls[key].playerAddr, playerRolls[key].rollUnder, playerRolls[key].result, playerRolls[key].stake );\r\n                    \r\n               playerPendingWithdrawals[playerRolls[key].playerAddr] = playerPendingWithdrawals[playerRolls[key].playerAddr].add(playerRolls[key].stake);\r\n               \r\n               delete playerRolls[key];\r\n            } else {\r\n                \r\n                emit DiceRollResult(key, playerRolls[key].playerAddr, playerRolls[key].rollUnder, playerRolls[key].result,\r\n                    playerRolls[key].stake, 0, 0, true, now);\r\n                \r\n                delete playerRolls[key];\r\n            }\r\n\r\n            return;\r\n            \r\n        } else {\r\n        \r\n            if(playerRolls[key].result < playerRolls[key].rollUnder) {\r\n\r\n                contractBalance = contractBalance.sub(playerRolls[key].profit.add(oracleFee)); // how much we have won/lost\r\n                totalUserProfit = totalUserProfit.add(_totalWin); // game stats\r\n                totalWins = totalWins.add(1);\r\n                totalWinAmount = totalWinAmount.add(playerRolls[key].profit);\r\n                \r\n\r\n        \r\n                uint256 _player_profit_1percent = playerRolls[key].profit.div(houseEdge);\r\n                uint256 _our_cut = _player_profit_1percent.mul(100-houseEdge); // we get 4%\r\n                totalProfit = totalProfit.add(_our_cut); // Only add when its a win!\r\n\r\n                if(!playerRolls[key].playerAddr.send(_totalWin)){\r\n                    // failed to send - need to retry so add to playerPendingWithdrawals\r\n                    \r\n                    emit DiceRollResult(key, playerRolls[key].playerAddr, playerRolls[key].rollUnder, playerRolls[key].result,\r\n                        playerRolls[key].stake, playerRolls[key].profit, 1, false, now);\r\n                    \r\n                    emit DiceRollResult_failedSend(\r\n                        key, playerRolls[key].playerAddr, playerRolls[key].rollUnder, playerRolls[key].result, _totalWin );\r\n    \r\n                    playerPendingWithdrawals[playerRolls[key].playerAddr] = playerPendingWithdrawals[playerRolls[key].playerAddr].add(_totalWin);\r\n                    \r\n                    delete playerRolls[key];\r\n                    \r\n                } else {\r\n                    \r\n                    emit DiceRollResult(key, playerRolls[key].playerAddr, playerRolls[key].rollUnder, playerRolls[key].result,\r\n                        playerRolls[key].stake, playerRolls[key].profit, 1, true, now);\r\n                        \r\n                    delete playerRolls[key];\r\n                        \r\n                }\r\n                \r\n                return;\r\n                \r\n            } else {\r\n                //playerRolls[key].win=0;\r\n                totalLosses = totalLosses.add(1);\r\n                totalLossAmount = totalLossAmount.add(playerRolls[key].stake);\r\n                contractBalance = contractBalance.add(playerRolls[key].stake.sub(oracleFee)); // how much we have won\r\n                \r\n                emit DiceRollResult(key, playerRolls[key].playerAddr, playerRolls[key].rollUnder, playerRolls[key].result,\r\n                    playerRolls[key].stake, playerRolls[key].profit, 0, true, now);\r\n                delete playerRolls[key];\r\n\r\n    \r\n                return;\r\n            }\r\n        }\r\n\r\n        \r\n\r\n    }\r\n    \r\n    \r\n    function rollDice(uint rollUnder) public payable gameActive validBet(msg.value, rollUnder) returns (bytes32) {\r\n\r\n        // This is the actual call to dAppBridge - using their callURL function to easily access an external API\r\n        // such as random.org        \r\n        bytes32 betID = callURL(\"callback\", randomAPI_url, \r\n        constructAPIParam(), \r\n        randomAPI_extract);\r\n\r\n        gameNumber = gameNumber.add(1);\r\n\r\n        \r\n        uint256 _fullTotal = (msg.value * getBetDivisor(rollUnder)   ); // 0.0002 * 250 = 0.0005\r\n        _fullTotal = _fullTotal.div(100);\r\n        _fullTotal = _fullTotal.sub(msg.value);\r\n        \r\n        uint256 _fullTotal_1percent = _fullTotal.div(100); // e.g = 1\r\n        \r\n        uint256 _player_profit = _fullTotal_1percent.mul(houseEdge); // player gets 96%\r\n        \r\n        \r\n        playerRolls[betID] = playerDiceRoll(betID, msg.sender, rollUnder, msg.value, _player_profit, 2, false, 0, now);\r\n\r\n        maxPendingPayouts = maxPendingPayouts.add(_player_profit); // don't add it to contractBalance yet until its a loss\r\n\r\n        emit DiceRollResult(betID, msg.sender, rollUnder, 0,\r\n            msg.value, _player_profit, 2, false, now);\r\n            \r\n        return betID;\r\n    }\r\n    \r\n    function rollDice(uint rollUnder, uint number_of_rolls) public payable gameActive validBetMulti(msg.value, rollUnder, number_of_rolls) returns (bytes32) {\r\n\r\n        uint c = 0;\r\n        for(c; c< number_of_rolls; c++) {\r\n            rollDice(rollUnder);\r\n        }\r\n\r\n    }\r\n    \r\n    function getBetDivisor(uint256 rollUnder) public pure returns (uint256) {\r\n        if(rollUnder==5)\r\n            return 20 * 100;\r\n        if(rollUnder==10)\r\n            return 10 * 100;\r\n        if(rollUnder==20)\r\n            return 5 * 100;\r\n        if(rollUnder==30)\r\n            return 3.3 * 100;\r\n        if(rollUnder==40)\r\n            return 2.5 * 100;\r\n        if(rollUnder==50)\r\n            return 2 * 100;\r\n        if(rollUnder==60)\r\n            return 1.66 * 100;\r\n        if(rollUnder==70)\r\n            return 1.42 * 100;\r\n        if(rollUnder==80)\r\n            return 1.25 * 100;\r\n        if(rollUnder==90)\r\n            return 1.11 * 100;\r\n        \r\n        return (100/rollUnder) * 10;\r\n    }\r\n    \r\n    function constructAPIParam() internal view returns(string){\r\n        return strConcat(\r\n            strConcat(\"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"generateIntegers\\\",\\\"params\\\":{\\\"apiKey\\\":\\\"\",\r\n        randomAPI_key, \"\\\",\\\"n\\\":1,\\\"min\\\":\", uint2str(minRoll), \",\\\"max\\\":\", uint2str(maxRoll), \",\\\"replacement\\\":true,\\\"base\\\":10},\\\"id\\\":\"),\r\n        uint2str(gameNumber), \"}\" \r\n        ); // Add in gameNumber to the params to avoid clashes\r\n    }\r\n    \r\n    // need to process any playerPendingWithdrawals\r\n    \r\n    // Allow a user to withdraw any pending amount (That may of failed previously)\r\n    function player_withdrawPendingTransactions() public\r\n        returns (bool)\r\n     {\r\n        uint withdrawAmount = playerPendingWithdrawals[msg.sender];\r\n        playerPendingWithdrawals[msg.sender] = 0;\r\n\r\n        if (msg.sender.call.value(withdrawAmount)()) {\r\n            return true;\r\n        } else {\r\n            /* if send failed revert playerPendingWithdrawals[msg.sender] = 0; */\r\n            /* player can try to withdraw again later */\r\n            playerPendingWithdrawals[msg.sender] = withdrawAmount;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // shows if a player has any pending withdrawels due (returns the amount)\r\n    function player_getPendingTxByAddress(address addressToCheck) public constant returns (uint256) {\r\n        return playerPendingWithdrawals[addressToCheck];\r\n    }\r\n\r\n    \r\n    // need to auto calc max bet\r\n    \r\n\r\n    // private functions\r\n    function private_addPermittedRoll(uint256 _rollUnder) public onlyOwner {\r\n        permittedRolls[_rollUnder] = true;\r\n    }\r\n    function private_delPermittedRoll(uint256 _rollUnder) public onlyOwner {\r\n        delete permittedRolls[_rollUnder];\r\n    }\r\n    function private_setRandomAPIURL(string newRandomAPI_url) public onlyOwner {\r\n        randomAPI_url = newRandomAPI_url;\r\n    }\r\n    function private_setRandomAPIKey(string newRandomAPI_key) public onlyOwner {\r\n        randomAPI_key = newRandomAPI_key;\r\n    }\r\n    function private_setRandomAPI_extract(string newRandomAPI_extract) public onlyOwner {\r\n        randomAPI_extract = newRandomAPI_extract;\r\n    }\r\n    function private_setminRoll(uint256 newMinRoll) public onlyOwner {\r\n        require(newMinRoll>0);\r\n        require(newMinRoll<maxRoll);\r\n        minRoll = newMinRoll;\r\n    }\r\n    function private_setmaxRoll(uint256 newMaxRoll) public onlyOwner {\r\n        require(newMaxRoll>0);\r\n        require(newMaxRoll>minRoll);\r\n        maxRoll = newMaxRoll;\r\n    }\r\n    function private_setminBet(uint256 newMinBet) public onlyOwner {\r\n        require(newMinBet > 0);\r\n        require(newMinBet < maxBet);\r\n        minBet = newMinBet;\r\n    }\r\n    function private_setmaxBet(uint256 newMaxBet) public onlyOwner {\r\n        require(newMaxBet > 0);\r\n        require(newMaxBet > minBet);\r\n        maxBet = newMaxBet;\r\n    }\r\n    function private_setPauseState(bool newState) public onlyOwner {\r\n        game_paused = newState;\r\n    }\r\n    function private_setHouseEdge(uint256 newHouseEdge) public onlyOwner {\r\n        houseEdge = newHouseEdge;\r\n    }\r\n    function private_kill() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n    function private_withdrawAll(address send_to) external onlyOwner returns(bool) {\r\n        address myAddress = this;\r\n        return send_to.send(myAddress.balance);\r\n    }\r\n    function private_withdraw(uint256 amount, address send_to) external onlyOwner returns(bool) {\r\n        address myAddress = this;\r\n        require(amount <= myAddress.balance);\r\n        require(amount >0);\r\n        return send_to.send(amount);\r\n    }\r\n    // show how much profit has been made (houseEdge)\r\n    function private_profits() public view onlyOwner returns(uint256) {\r\n        return totalProfit;\r\n    }\r\n    function private_setMinRollUnder(uint256 _minRollUnder) public onlyOwner {\r\n        minRollUnder = _minRollUnder;\r\n    }\r\n    function private_setMaxMultiRolls(uint256 _maxMultiRolls) public onlyOwner {\r\n        maxMultiRolls = _maxMultiRolls;\r\n    }\r\n    function private_setOracleFee(uint256 _oracleFee) public onlyOwner {\r\n        oracleFee = _oracleFee;\r\n    }\r\n    function deposit() public payable onlyOwner {\r\n        contractBalance = contractBalance.add(msg.value);\r\n    }\r\n    // end private functions\r\n\r\n\r\n    // Internal functions\r\n    function parseInt(string _a) internal pure returns (uint256) {\r\n        return parseInt(_a, 0);\r\n    }\r\n    function parseInt(string _a, uint _b) internal pure returns (uint256) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint256 mint = 0;\r\n        bool decimals = false;\r\n        for (uint256 i=0; i<bresult.length; i++){\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n                if (decimals){\r\n                    if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint256(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10**_b;\r\n        return mint;\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d, string _e, string _f, string _g) internal pure returns (string) {\r\n        string memory abcdef = strConcat(_a,_b,_c,_d,_e,_f);\r\n        return strConcat(abcdef, _g);\r\n    }\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e, string _f) internal pure returns (string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n\r\n        string memory abc = new string(_ba.length + _bb.length + _bc.length);\r\n        bytes memory babc = bytes(abc);\r\n        uint256 k = 0;\r\n        for (uint256 i = 0; i < _ba.length; i++) babc[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babc[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babc[k++] = _bc[i];\r\n\r\n        return strConcat(string(babc), strConcat(_d, _e, _f));\r\n    }\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n    function strConcat(string _a, string _b) internal pure returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint i) internal pure returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0){\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"send_to\",\"type\":\"address\"}],\"name\":\"private_withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxMultiRolls\",\"type\":\"uint256\"}],\"name\":\"private_setMaxMultiRolls\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rollUnder\",\"type\":\"uint256\"}],\"name\":\"private_delPermittedRoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMultiRolls\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addressToCheck\",\"type\":\"address\"}],\"name\":\"player_getPendingTxByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinRoll\",\"type\":\"uint256\"}],\"name\":\"private_setminRoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"game_paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRollUnder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rollUnder\",\"type\":\"uint256\"},{\"name\":\"number_of_rolls\",\"type\":\"uint256\"}],\"name\":\"rollDice\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"private_profits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_betID\",\"type\":\"bytes32\"}],\"name\":\"getBet\",\"outputs\":[{\"name\":\"betID\",\"type\":\"bytes32\"},{\"name\":\"playerAddr\",\"type\":\"address\"},{\"name\":\"rollUnder\",\"type\":\"uint256\"},{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"paid\",\"type\":\"bool\"},{\"name\":\"result\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"private_getGameState\",\"outputs\":[{\"name\":\"_contractBalance\",\"type\":\"uint256\"},{\"name\":\"_game_paused\",\"type\":\"bool\"},{\"name\":\"_minRoll\",\"type\":\"uint256\"},{\"name\":\"_maxRoll\",\"type\":\"uint256\"},{\"name\":\"_minBet\",\"type\":\"uint256\"},{\"name\":\"_maxBet\",\"type\":\"uint256\"},{\"name\":\"_houseEdge\",\"type\":\"uint256\"},{\"name\":\"_totalUserProfit\",\"type\":\"uint256\"},{\"name\":\"_totalWins\",\"type\":\"uint256\"},{\"name\":\"_totalLosses\",\"type\":\"uint256\"},{\"name\":\"_totalWinAmount\",\"type\":\"uint256\"},{\"name\":\"_totalLossAmount\",\"type\":\"uint256\"},{\"name\":\"_liveMaxBet\",\"type\":\"uint256\"},{\"name\":\"_totalFails\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"callbackData\",\"type\":\"string\"}],\"name\":\"callback\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRandomAPI_extract\",\"type\":\"string\"}],\"name\":\"private_setRandomAPI_extract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLossAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"playerRolls\",\"outputs\":[{\"name\":\"betID\",\"type\":\"bytes32\"},{\"name\":\"playerAddr\",\"type\":\"address\"},{\"name\":\"rollUnder\",\"type\":\"uint256\"},{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"paid\",\"type\":\"bool\"},{\"name\":\"result\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRandomAPI_key\",\"type\":\"string\"}],\"name\":\"private_setRandomAPIKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRandomAPI_url\",\"type\":\"string\"}],\"name\":\"private_setRandomAPIURL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"player_withdrawPendingTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rollUnder\",\"type\":\"uint256\"}],\"name\":\"getBetDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rollUnder\",\"type\":\"uint256\"}],\"name\":\"private_addPermittedRoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLiveMaxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxRoll\",\"type\":\"uint256\"}],\"name\":\"private_setmaxRoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minRollUnder\",\"type\":\"uint256\"}],\"name\":\"private_setMinRollUnder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rollUnder\",\"type\":\"uint256\"}],\"name\":\"rollDice\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"private_kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracleFee\",\"type\":\"uint256\"}],\"name\":\"private_setOracleFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUserProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"private_setPauseState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLosses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomAPI_url\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permittedRolls\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseEdge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinBet\",\"type\":\"uint256\"}],\"name\":\"private_setminBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"send_to\",\"type\":\"address\"}],\"name\":\"private_withdrawAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPendingPayouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHouseEdge\",\"type\":\"uint256\"}],\"name\":\"private_setHouseEdge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWinAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxBet\",\"type\":\"uint256\"}],\"name\":\"private_setmaxBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"betID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rollUnder\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountToSend\",\"type\":\"uint256\"}],\"name\":\"DiceRollResult_failedSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"betID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rollUnder\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"win\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paid\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DiceRollResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"senderAddress\",\"type\":\"address\"}],\"name\":\"event_senderAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"theLocation\",\"type\":\"address\"}],\"name\":\"evnt_dAdppBridge_location\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"checkAddress\",\"type\":\"address\"}],\"name\":\"only_dAppBridgeCheck\",\"type\":\"event\"}]","ContractName":"DiceRoll","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a341629e57c56fd20da6c4266d20589b2af6f85d30171fe6601c487ace40526c"}]}