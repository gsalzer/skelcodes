{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n \r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n \r\n}\r\n\r\n\r\nlibrary Address {\r\n    function toAddress(bytes source) internal pure returns(address addr) {\r\n        assembly { addr := mload(add(source,0x14)) }\r\n        return addr;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n*/\r\ncontract SInv {\r\n    //use of library of safe mathematical operations    \r\n    using SafeMath for uint;\r\n    using Address for *;\r\n\r\n    // array containing information about beneficiaries\r\n    mapping(address => uint) public userDeposit;\r\n    //Mapping for how much the User got from Refs\r\n    mapping(address=>uint) public RefBonus;\r\n    //How much the user earned to date\r\n    mapping(address=>uint) public UserEarnings;\r\n    //array containing information about the time of payment\r\n    mapping(address => uint) public userTime;\r\n    //array containing information on interest paid\r\n    mapping(address => uint) public persentWithdraw;\r\n    //fund fo transfer percent\r\n    address public projectFund =  0xB3cE9796aCDC1855bd6Cec85a3403f13C918f1F2;\r\n    //percentage deducted to the advertising fund\r\n    uint projectPercent = 5; // 0,5%\r\n    //time through which you can take dividends\r\n    uint public chargingTime = 24 hours;\r\n    uint public startPercent = 250*10;\r\n    uint public countOfInvestors;\r\n    uint public daysOnline;\r\n    uint public dividendsPaid;\r\n\r\n    constructor() public {\r\n        daysOnline = block.timestamp;\r\n    }    \r\n    \r\n    modifier isIssetUser() {\r\n        require(userDeposit[msg.sender] > 0, \"Deposit not found\");\r\n        _;\r\n    }\r\n \r\n    modifier timePayment() {\r\n        require(now >= userTime[msg.sender].add(chargingTime), \"Too fast payout request\");\r\n        _;\r\n    }\r\n    \r\n    function() external payable {\r\n        if (msg.value > 0) {\r\n            //makeDeposit(MyPersonalRefName[msg.data.toAddress()]);\r\n            makeDepositA(msg.data.toAddress());\r\n        }\r\n        else {\r\n            collectPercent();\r\n        }\r\n    }\r\n\r\n    //return of interest on the deposit\r\n    function collectPercent() isIssetUser timePayment public {\r\n            uint payout;\r\n            uint multipl;\r\n            (payout,multipl) = payoutAmount(msg.sender);\r\n            userTime[msg.sender] += multipl*chargingTime;\r\n            persentWithdraw[msg.sender] += payout;\r\n            msg.sender.transfer(payout);\r\n            UserEarnings[msg.sender]+=payout;\r\n            dividendsPaid += payout;\r\n            uint UserInitDeposit=userDeposit[msg.sender];\r\n            projectFund.transfer(UserInitDeposit.mul(projectPercent).div(1000));\r\n    }\r\n\r\n    //When User decides to reinvest instead of paying out (to get more dividends per day)\r\n    function Reinvest() isIssetUser timePayment external {\r\n        uint payout;\r\n        uint multipl;\r\n        (payout,multipl) = payoutAmount(msg.sender);\r\n        userTime[msg.sender] += multipl*chargingTime;\r\n        userDeposit[msg.sender]+=payout;\r\n        UserEarnings[msg.sender]+=payout;\r\n        uint UserInitDeposit=userDeposit[msg.sender];\r\n        projectFund.transfer(UserInitDeposit.mul(projectPercent).div(1000));\r\n    }\r\n \r\n    //make a contribution to the system\r\n    function makeDeposit(bytes32 referrer) public payable {\r\n        if (msg.value > 0) {\r\n            if (userDeposit[msg.sender] == 0) {\r\n                countOfInvestors += 1;\r\n\r\n                //only give ref bonus if the customer gave a valid ref information\r\n                if((RefNameToAddress[referrer] != address(0x0) && referrer > 0 && TheGuyWhoReffedMe[msg.sender] == address(0x0) && RefNameToAddress[referrer] != msg.sender)) {\r\n                    //get the Address of the guy who reffed mit through his _Ref String and save it in the mapping\r\n                    TheGuyWhoReffedMe[msg.sender] = RefNameToAddress[referrer];\r\n                    newRegistrationwithRef();\r\n                }\r\n            }\r\n            if (userDeposit[msg.sender] > 0 && now > userTime[msg.sender].add(chargingTime)) {\r\n                collectPercent();\r\n            }\r\n\r\n            userDeposit[msg.sender] = userDeposit[msg.sender].add(msg.value);\r\n            userTime[msg.sender] = now;\r\n\r\n        } else {\r\n            collectPercent();\r\n        }\r\n    }\r\n    \r\n    //function call for fallback\r\n    function makeDepositA(address referrer) public payable {\r\n        if (msg.value > 0) {\r\n            if (userDeposit[msg.sender] == 0) {\r\n                countOfInvestors += 1;\r\n                //only give ref bonus if the customer gave a valid ref information //or has already a ref\r\n                if((referrer != address(0x0) && referrer > 0 && TheGuyWhoReffedMe[msg.sender] == address(0x0) && referrer != msg.sender)) {\r\n                    //get the Address of the guy who reffed mit through his _Ref String and save it in the mapping\r\n                    TheGuyWhoReffedMe[msg.sender] = referrer;\r\n                    newRegistrationwithRef();\r\n                }\r\n            }\r\n            if (userDeposit[msg.sender] > 0 && now > userTime[msg.sender].add(chargingTime)) {\r\n                collectPercent();\r\n            }\r\n            userDeposit[msg.sender] = userDeposit[msg.sender].add(msg.value);\r\n            userTime[msg.sender] = now;\r\n\r\n        } else {\r\n            collectPercent();\r\n        }\r\n    }\r\n     \r\n    function getUserEarnings(address addr) public view returns(uint)\r\n    {\r\n        return UserEarnings[addr];\r\n    }\r\n \r\n    //calculation of the current interest rate on the deposit\r\n    function persentRate() public view returns(uint) {\r\n        return(startPercent);\r\n \r\n    }\r\n \r\n    // Withdraw of your referral earnings\r\n    function PayOutRefBonus() external\r\n    {       \r\n        //Check if User has Bonus\r\n        require(RefBonus[msg.sender]>0,\"You didn't earn any bonus\");\r\n        uint payout = RefBonus[msg.sender];\r\n        //payout the Refbonus\r\n        msg.sender.transfer(payout);\r\n        //Set to 0 since its payed out\r\n        RefBonus[msg.sender]=0;\r\n    }\r\n \r\n \r\n    //refund of the amount available for withdrawal on deposit\r\n    function payoutAmount(address addr) public view returns(uint,uint) {\r\n        uint rate = userDeposit[addr].mul(startPercent).div(100000);\r\n        uint interestRate = now.sub(userTime[addr]).div(chargingTime);\r\n        uint withdrawalAmount = rate.mul(interestRate);\r\n        return (withdrawalAmount, interestRate);\r\n    }\r\n\r\n \r\n    mapping (address=>address) public TheGuyWhoReffedMe;\r\n \r\n    mapping (address=>bytes32) public MyPersonalRefName;\r\n    //for bidirectional search\r\n    mapping (bytes32=>address) public RefNameToAddress;\r\n    \r\n    // referral counter\r\n    mapping (address=>uint256) public referralCounter;\r\n    // referral earnings counter\r\n    mapping (address=>uint256) public referralEarningsCounter;\r\n\r\n    //public function to register your ref\r\n    function createMyPersonalRefName(bytes32 _RefName) external payable\r\n    {  \r\n        //ref name shouldn't be 0\r\n        require(_RefName > 0);\r\n\r\n        //Check if RefName is already registered\r\n        require(RefNameToAddress[_RefName]==0, \"Somebody else owns this Refname\");\r\n \r\n        //check if User already has a ref Name\r\n        require(MyPersonalRefName[msg.sender] == 0, \"You already registered a Ref\");  \r\n \r\n        //If not registered\r\n        MyPersonalRefName[msg.sender]= _RefName;\r\n\r\n        RefNameToAddress[_RefName]=msg.sender;\r\n\r\n    }\r\n \r\n    function newRegistrationwithRef() private\r\n    {\r\n        //Give Bonus to refs\r\n        CheckFirstGradeRefAdress();\r\n        CheckSecondGradeRefAdress();\r\n        CheckThirdGradeRefAdress();\r\n    }\r\n \r\n    //first grade ref gets 1% extra\r\n    function CheckFirstGradeRefAdress() private\r\n    {  \r\n        //   3 <-- This one\r\n        //  /\r\n        // 4\r\n \r\n        //Check if Exist\r\n        if(TheGuyWhoReffedMe[msg.sender]>0) {\r\n        //Send the Ref his 1%\r\n            RefBonus[TheGuyWhoReffedMe[msg.sender]] += msg.value * 2/100;\r\n            referralEarningsCounter[TheGuyWhoReffedMe[msg.sender]] += msg.value * 2/100;\r\n            referralCounter[TheGuyWhoReffedMe[msg.sender]]++;\r\n        }\r\n    }\r\n \r\n    //second grade ref gets 0,5% extra\r\n    function CheckSecondGradeRefAdress() private\r\n    {\r\n        //     2 <-- This one\r\n        //    /\r\n        //   3\r\n        //  /\r\n        // 4\r\n        //Check if Exist\r\n        if(TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]>0) {\r\n        //Send the Ref his 0,5%\r\n            RefBonus[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]] += msg.value * 2/200;\r\n            referralEarningsCounter[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]] += msg.value * 2/200;\r\n            referralCounter[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]]++;\r\n        }\r\n    }\r\n \r\n    //third grade ref gets 0,25% extra\r\n    function CheckThirdGradeRefAdress() private\r\n    {\r\n        //       1 <-- This one\r\n        //      /\r\n        //     2\r\n        //    /\r\n        //   3\r\n        //  /\r\n        // 4\r\n        //Check if Exist\r\n        if (TheGuyWhoReffedMe[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]]>0) {\r\n\r\n            RefBonus[TheGuyWhoReffedMe[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]]] += msg.value * 2/400;\r\n            referralEarningsCounter[TheGuyWhoReffedMe[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]]] += msg.value * 2/400;\r\n            referralCounter[TheGuyWhoReffedMe[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]]]++;\r\n        }\r\n    }\r\n    \r\n    //Returns your personal RefName, when it is registered\r\n    function getMyRefName(address addr) public view returns(bytes32)\r\n    {\r\n        return (MyPersonalRefName[addr]);\r\n    }\r\n\r\n    function getMyRefNameAsString(address addr) public view returns(string) {\r\n        return bytes32ToString(MyPersonalRefName[addr]);\r\n    }\r\n\r\n    function bytes32ToString(bytes32 x) internal pure returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"collectPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"RefNameToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"bytes32\"}],\"name\":\"makeDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"RefBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMyRefNameAsString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"MyPersonalRefName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chargingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PayOutRefBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daysOnline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"persentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMyRefName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TheGuyWhoReffedMe\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_RefName\",\"type\":\"bytes32\"}],\"name\":\"createMyPersonalRefName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"persentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralEarningsCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"makeDepositA\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"SInv","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cdb9435f9446f156075e0a08753c6bc966242db2f0a57deff02455cd5c20f54a"}]}