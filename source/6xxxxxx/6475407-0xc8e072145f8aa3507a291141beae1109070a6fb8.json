{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/GodMode.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title God Mode\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev This contract provides a basic interface for God\r\n///  in a contract as well as the ability for God to pause\r\n///  the contract\r\ncontract GodMode {\r\n    /// @dev Is the contract paused?\r\n    bool public isPaused;\r\n\r\n    /// @dev God's address\r\n    address public god;\r\n\r\n    /// @dev Only God can run this function\r\n    modifier onlyGod()\r\n    {\r\n        require(god == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev This function can only be run while the contract\r\n    ///  is not paused\r\n    modifier notPaused()\r\n    {\r\n        require(!isPaused);\r\n        _;\r\n    }\r\n\r\n    /// @dev This event is fired when the contract is paused\r\n    event GodPaused();\r\n\r\n    /// @dev This event is fired when the contract is unpaused\r\n    event GodUnpaused();\r\n\r\n    constructor() public\r\n    {\r\n        // Make the creator of the contract God\r\n        god = msg.sender;\r\n    }\r\n\r\n    /// @dev God can change the address of God\r\n    /// @param _newGod The new address for God\r\n    function godChangeGod(address _newGod) public onlyGod\r\n    {\r\n        god = _newGod;\r\n    }\r\n\r\n    /// @dev God can pause the game\r\n    function godPause() public onlyGod\r\n    {\r\n        isPaused = true;\r\n\r\n        emit GodPaused();\r\n    }\r\n\r\n    /// @dev God can unpause the game\r\n    function godUnpause() public onlyGod\r\n    {\r\n        isPaused = false;\r\n\r\n        emit GodUnpaused();\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthAbstractInterface.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title King of Eth Abstract Interface\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Abstract interface contract for titles and taxes\r\ncontract KingOfEthAbstractInterface {\r\n    /// @dev The address of the current King\r\n    address public king;\r\n\r\n    /// @dev The address of the current Wayfarer\r\n    address public wayfarer;\r\n\r\n    /// @dev Anyone can pay taxes\r\n    function payTaxes() public payable;\r\n}\r\n\r\n// File: contracts/KingOfEthBlindAuctionsReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Blind Auctions Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev This contract provides a reference to the blind auctions contract\r\ncontract KingOfEthBlindAuctionsReferencer is GodMode {\r\n    /// @dev The address of the blind auctions contract\r\n    address public blindAuctionsContract;\r\n\r\n    /// @dev Only the blind auctions contract can run this\r\n    modifier onlyBlindAuctionsContract()\r\n    {\r\n        require(blindAuctionsContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set a new blind auctions contract\r\n    /// @param _blindAuctionsContract the address of the blind auctions\r\n    ///  contract\r\n    function godSetBlindAuctionsContract(address _blindAuctionsContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        blindAuctionsContract = _blindAuctionsContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthOpenAuctionsReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Open Auctions Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev This contract provides a reference to the open auctions contract\r\ncontract KingOfEthOpenAuctionsReferencer is GodMode {\r\n    /// @dev The address of the auctions contract\r\n    address public openAuctionsContract;\r\n\r\n    /// @dev Only the open auctions contract can run this\r\n    modifier onlyOpenAuctionsContract()\r\n    {\r\n        require(openAuctionsContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set a new auctions contract\r\n    function godSetOpenAuctionsContract(address _openAuctionsContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        openAuctionsContract = _openAuctionsContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthAuctionsReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/// @title King of Eth: Auctions Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev This contract provides a reference to the auctions contracts\r\ncontract KingOfEthAuctionsReferencer is\r\n      KingOfEthBlindAuctionsReferencer\r\n    , KingOfEthOpenAuctionsReferencer\r\n{\r\n    /// @dev Only an auctions contract can run this\r\n    modifier onlyAuctionsContract()\r\n    {\r\n        require(blindAuctionsContract == msg.sender\r\n             || openAuctionsContract == msg.sender);\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Functionality to allow contracts to reference the king contract\r\ncontract KingOfEthReferencer is GodMode {\r\n    /// @dev The address of the king contract\r\n    address public kingOfEthContract;\r\n\r\n    /// @dev Only the king contract can run this\r\n    modifier onlyKingOfEthContract()\r\n    {\r\n        require(kingOfEthContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can change the king contract\r\n    /// @param _kingOfEthContract The new address\r\n    function godSetKingOfEthContract(address _kingOfEthContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        kingOfEthContract = _kingOfEthContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthBoard.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n/// @title King of Eth: Board\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Contract for board\r\ncontract KingOfEthBoard is\r\n      GodMode\r\n    , KingOfEthAuctionsReferencer\r\n    , KingOfEthReferencer\r\n{\r\n    /// @dev x coordinate of the top left corner of the boundary\r\n    uint public boundX1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\r\n\r\n    /// @dev y coordinate of the top left corner of the boundary\r\n    uint public boundY1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\r\n\r\n    /// @dev x coordinate of the bottom right corner of the boundary\r\n    uint public boundX2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\r\n\r\n    /// @dev y coordinate of the bottom right corner of the boundary\r\n    uint public boundY2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\r\n\r\n    /// @dev Number used to divide the total number of house locations\r\n    /// after any expansion to yield the number of auctions that  will be\r\n    /// available to start for the expansion's duration\r\n    uint public constant auctionsAvailableDivisor = 10;\r\n\r\n    /// @dev Amount of time the King must wait between increasing the board\r\n    uint public constant kingTimeBetweenIncrease = 2 weeks;\r\n\r\n    /// @dev Amount of time the Wayfarer must wait between increasing the board\r\n    uint public constant wayfarerTimeBetweenIncrease = 3 weeks;\r\n\r\n    /// @dev Amount of time that anyone but the King or Wayfarer must wait\r\n    ///  before increasing the board\r\n    uint public constant plebTimeBetweenIncrease = 4 weeks;\r\n\r\n    /// @dev The last time the board was increased in size\r\n    uint public lastIncreaseTime;\r\n\r\n    /// @dev The direction of the next increase\r\n    uint8 public nextIncreaseDirection;\r\n\r\n    /// @dev The number of auctions that players may choose to start\r\n    ///  for this expansion\r\n    uint public auctionsRemaining;\r\n\r\n    constructor() public\r\n    {\r\n        // Game is paused as God must start it\r\n        isPaused = true;\r\n\r\n        // Set the auctions remaining\r\n        setAuctionsAvailableForBounds();\r\n    }\r\n\r\n    /// @dev Fired when the board is increased in size\r\n    event BoardSizeIncreased(\r\n          address initiator\r\n        , uint newBoundX1\r\n        , uint newBoundY1\r\n        , uint newBoundX2\r\n        , uint newBoundY2\r\n        , uint lastIncreaseTime\r\n        , uint nextIncreaseDirection\r\n        , uint auctionsRemaining\r\n    );\r\n\r\n    /// @dev Only the King can run this\r\n    modifier onlyKing()\r\n    {\r\n        require(KingOfEthAbstractInterface(kingOfEthContract).king() == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev Only the Wayfarer can run this\r\n    modifier onlyWayfarer()\r\n    {\r\n        require(KingOfEthAbstractInterface(kingOfEthContract).wayfarer() == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev Set the total auctions available\r\n    function setAuctionsAvailableForBounds() private\r\n    {\r\n        uint boundDiffX = boundX2 - boundX1;\r\n        uint boundDiffY = boundY2 - boundY1;\r\n\r\n        auctionsRemaining = boundDiffX * boundDiffY / 2 / auctionsAvailableDivisor;\r\n    }\r\n\r\n    /// @dev Increase the board's size making sure to keep steady at\r\n    ///  the maximum outer bounds\r\n    function increaseBoard() private\r\n    {\r\n        // The length of increase\r\n        uint _increaseLength;\r\n\r\n        // If this increase direction is right\r\n        if(0 == nextIncreaseDirection)\r\n        {\r\n            _increaseLength = boundX2 - boundX1;\r\n            uint _updatedX2 = boundX2 + _increaseLength;\r\n\r\n            // Stay within bounds\r\n            if(_updatedX2 <= boundX2 || _updatedX2 <= _increaseLength)\r\n            {\r\n                boundX2 = ~uint(0);\r\n            }\r\n            else\r\n            {\r\n                boundX2 = _updatedX2;\r\n            }\r\n        }\r\n        // If this increase direction is down\r\n        else if(1 == nextIncreaseDirection)\r\n        {\r\n            _increaseLength = boundY2 - boundY1;\r\n            uint _updatedY2 = boundY2 + _increaseLength;\r\n\r\n            // Stay within bounds\r\n            if(_updatedY2 <= boundY2 || _updatedY2 <= _increaseLength)\r\n            {\r\n                boundY2 = ~uint(0);\r\n            }\r\n            else\r\n            {\r\n                boundY2 = _updatedY2;\r\n            }\r\n        }\r\n        // If this increase direction is left\r\n        else if(2 == nextIncreaseDirection)\r\n        {\r\n            _increaseLength = boundX2 - boundX1;\r\n\r\n            // Stay within bounds\r\n            if(boundX1 <= _increaseLength)\r\n            {\r\n                boundX1 = 0;\r\n            }\r\n            else\r\n            {\r\n                boundX1 -= _increaseLength;\r\n            }\r\n        }\r\n        // If this increase direction is up\r\n        else if(3 == nextIncreaseDirection)\r\n        {\r\n            _increaseLength = boundY2 - boundY1;\r\n\r\n            // Stay within bounds\r\n            if(boundY1 <= _increaseLength)\r\n            {\r\n                boundY1 = 0;\r\n            }\r\n            else\r\n            {\r\n                boundY1 -= _increaseLength;\r\n            }\r\n        }\r\n\r\n        // The last increase time is now\r\n        lastIncreaseTime = now;\r\n\r\n        // Set the next increase direction\r\n        nextIncreaseDirection = (nextIncreaseDirection + 1) % 4;\r\n\r\n        // Reset the auctions available\r\n        setAuctionsAvailableForBounds();\r\n\r\n        emit BoardSizeIncreased(\r\n              msg.sender\r\n            , boundX1\r\n            , boundY1\r\n            , boundX2\r\n            , boundY2\r\n            , now\r\n            , nextIncreaseDirection\r\n            , auctionsRemaining\r\n        );\r\n    }\r\n\r\n    /// @dev God can start the game\r\n    function godStartGame() public onlyGod\r\n    {\r\n        // Reset increase times\r\n        lastIncreaseTime = now;\r\n\r\n        // Unpause the game\r\n        godUnpause();\r\n    }\r\n\r\n    /// @dev The auctions contracts can decrement the number\r\n    ///  of auctions that are available to be started\r\n    function auctionsDecrementAuctionsRemaining()\r\n        public\r\n        onlyAuctionsContract\r\n    {\r\n        auctionsRemaining -= 1;\r\n    }\r\n\r\n    /// @dev The auctions contracts can increment the number\r\n    ///  of auctions that are available to be started when\r\n    ///  an auction ends wihout a winner\r\n    function auctionsIncrementAuctionsRemaining()\r\n        public\r\n        onlyAuctionsContract\r\n    {\r\n        auctionsRemaining += 1;\r\n    }\r\n\r\n    /// @dev The King can increase the board much faster than the plebs\r\n    function kingIncreaseBoard()\r\n        public\r\n        onlyKing\r\n    {\r\n        // Require enough time has passed since the last increase\r\n        require(lastIncreaseTime + kingTimeBetweenIncrease < now);\r\n\r\n        increaseBoard();\r\n    }\r\n\r\n    /// @dev The Wayfarer can increase the board faster than the plebs\r\n    function wayfarerIncreaseBoard()\r\n        public\r\n        onlyWayfarer\r\n    {\r\n        // Require enough time has passed since the last increase\r\n        require(lastIncreaseTime + wayfarerTimeBetweenIncrease < now);\r\n\r\n        increaseBoard();\r\n    }\r\n\r\n    /// @dev Any old pleb can increase the board\r\n    function plebIncreaseBoard() public\r\n    {\r\n        // Require enough time has passed since the last increase\r\n        require(lastIncreaseTime + plebTimeBetweenIncrease < now);\r\n\r\n        increaseBoard();\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthBoardReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Board Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Functionality to allow contracts to reference the board contract\r\ncontract KingOfEthBoardReferencer is GodMode {\r\n    /// @dev The address of the board contract\r\n    address public boardContract;\r\n\r\n    /// @dev Only the board contract can run this\r\n    modifier onlyBoardContract()\r\n    {\r\n        require(boardContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can change the board contract\r\n    /// @param _boardContract The new address\r\n    function godSetBoardContract(address _boardContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        boardContract = _boardContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthHousesAbstractInterface.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title King of Eth: Houses Abstract Interface\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Abstract interface contract for houses\r\ncontract KingOfEthHousesAbstractInterface {\r\n    /// @dev Get the owner of the house at some location\r\n    /// @param _x The x coordinate of the house\r\n    /// @param _y The y coordinate of the house\r\n    /// @return The address of the owner\r\n    function ownerOf(uint _x, uint _y) public view returns(address);\r\n\r\n    /// @dev Get the level of the house at some location\r\n    /// @param _x The x coordinate of the house\r\n    /// @param _y The y coordinate of the house\r\n    /// @return The level of the house\r\n    function level(uint _x, uint _y) public view returns(uint8);\r\n\r\n    /// @dev The auctions contracts can set the owner of a house after an auction\r\n    /// @param _x The x coordinate of the house\r\n    /// @param _y The y coordinate of the house\r\n    /// @param _owner The new owner of the house\r\n    function auctionsSetOwner(uint _x, uint _y, address _owner) public;\r\n\r\n    /// @dev The house realty contract can transfer house ownership\r\n    /// @param _x The x coordinate of the house\r\n    /// @param _y The y coordinate of the house\r\n    /// @param _from The previous owner of house\r\n    /// @param _to The new owner of house\r\n    function houseRealtyTransferOwnership(\r\n          uint _x\r\n        , uint _y\r\n        , address _from\r\n        , address _to\r\n    ) public;\r\n}\r\n\r\n// File: contracts/KingOfEthHousesReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Houses Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to reference the houses contract\r\ncontract KingOfEthHousesReferencer is GodMode {\r\n    /// @dev The houses contract's address\r\n    address public housesContract;\r\n\r\n    /// @dev Only the houses contract can run this function\r\n    modifier onlyHousesContract()\r\n    {\r\n        require(housesContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set the realty contract\r\n    /// @param _housesContract The new address\r\n    function godSetHousesContract(address _housesContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        housesContract = _housesContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthEthExchangeReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Resource-to-ETH Exchange Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to interface with the\r\n///  ETH exchange contract\r\ncontract KingOfEthEthExchangeReferencer is GodMode {\r\n    /// @dev Address of the ETH exchange contract\r\n    address public ethExchangeContract;\r\n\r\n    /// @dev Only the ETH exchange contract may run this function\r\n    modifier onlyEthExchangeContract()\r\n    {\r\n        require(ethExchangeContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God may set the ETH exchange contract's address\r\n    /// @dev _ethExchangeContract The new address\r\n    function godSetEthExchangeContract(address _ethExchangeContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        ethExchangeContract = _ethExchangeContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthResourceExchangeReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Resource-to-Resource Exchange Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to interface with the\r\n///  resource-to-resource contract\r\ncontract KingOfEthResourceExchangeReferencer is GodMode {\r\n    /// @dev Address of the resource-to-resource contract\r\n    address public resourceExchangeContract;\r\n\r\n    /// @dev Only the resource-to-resource contract may run this function\r\n    modifier onlyResourceExchangeContract()\r\n    {\r\n        require(resourceExchangeContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God may set the resource-to-resource contract's address\r\n    /// @dev _resourceExchangeContract The new address\r\n    function godSetResourceExchangeContract(address _resourceExchangeContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        resourceExchangeContract = _resourceExchangeContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthExchangeReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/// @title King of Eth: Exchange Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to interface with the exchange contract\r\ncontract KingOfEthExchangeReferencer is\r\n      GodMode\r\n    , KingOfEthEthExchangeReferencer\r\n    , KingOfEthResourceExchangeReferencer\r\n{\r\n    /// @dev Only one of the exchange contracts may\r\n    ///  run this function\r\n    modifier onlyExchangeContract()\r\n    {\r\n        require(\r\n               ethExchangeContract == msg.sender\r\n            || resourceExchangeContract == msg.sender\r\n        );\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthResourcesInterfaceReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Resources Interface Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to reference the resource interface contract\r\ncontract KingOfEthResourcesInterfaceReferencer is GodMode {\r\n    /// @dev The interface contract's address\r\n    address public interfaceContract;\r\n\r\n    /// @dev Only the interface contract can run this function\r\n    modifier onlyInterfaceContract()\r\n    {\r\n        require(interfaceContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set the realty contract\r\n    /// @param _interfaceContract The new address\r\n    function godSetInterfaceContract(address _interfaceContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        interfaceContract = _interfaceContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthResource.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/// @title ERC20Interface\r\n/// @dev ERC20 token interface contract\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns(uint);\r\n    function balanceOf(address _tokenOwner) public constant returns(uint balance);\r\n    function allowance(address _tokenOwner, address _spender) public constant returns(uint remaining);\r\n    function transfer(address _to, uint _tokens) public returns(bool success);\r\n    function approve(address _spender, uint _tokens) public returns(bool success);\r\n    function transferFrom(address _from, address _to, uint _tokens) public returns(bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n/// @title King of Eth: Resource\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Common contract implementation for resources\r\ncontract KingOfEthResource is\r\n      ERC20Interface\r\n    , GodMode\r\n    , KingOfEthResourcesInterfaceReferencer\r\n{\r\n    /// @dev Current resource supply\r\n    uint public resourceSupply;\r\n\r\n    /// @dev ERC20 token's decimals\r\n    uint8 public constant decimals = 0;\r\n\r\n    /// @dev mapping of addresses to holdings\r\n    mapping (address => uint) holdings;\r\n\r\n    /// @dev mapping of addresses to amount of tokens frozen\r\n    mapping (address => uint) frozenHoldings;\r\n\r\n    /// @dev mapping of addresses to mapping of allowances for an address\r\n    mapping (address => mapping (address => uint)) allowances;\r\n\r\n    /// @dev ERC20 total supply\r\n    /// @return The current total supply of the resource\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns(uint)\r\n    {\r\n        return resourceSupply;\r\n    }\r\n\r\n    /// @dev ERC20 balance of address\r\n    /// @param _tokenOwner The address to look up\r\n    /// @return The balance of the address\r\n    function balanceOf(address _tokenOwner)\r\n        public\r\n        constant\r\n        returns(uint balance)\r\n    {\r\n        return holdings[_tokenOwner];\r\n    }\r\n\r\n    /// @dev Total resources frozen for an address\r\n    /// @param _tokenOwner The address to look up\r\n    /// @return The frozen balance of the address\r\n    function frozenTokens(address _tokenOwner)\r\n        public\r\n        constant\r\n        returns(uint balance)\r\n    {\r\n        return frozenHoldings[_tokenOwner];\r\n    }\r\n\r\n    /// @dev The allowance for a spender on an account\r\n    /// @param _tokenOwner The account that allows withdrawels\r\n    /// @param _spender The account that is allowed to withdraw\r\n    /// @return The amount remaining in the allowance\r\n    function allowance(address _tokenOwner, address _spender)\r\n        public\r\n        constant\r\n        returns(uint remaining)\r\n    {\r\n        return allowances[_tokenOwner][_spender];\r\n    }\r\n\r\n    /// @dev Only run if player has at least some amount of tokens\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens required\r\n    modifier hasAvailableTokens(address _owner, uint _tokens)\r\n    {\r\n        require(holdings[_owner] - frozenHoldings[_owner] >= _tokens);\r\n        _;\r\n    }\r\n\r\n    /// @dev Only run if player has at least some amount of tokens frozen\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of frozen tokens required\r\n    modifier hasFrozenTokens(address _owner, uint _tokens)\r\n    {\r\n        require(frozenHoldings[_owner] >= _tokens);\r\n        _;\r\n    }\r\n\r\n    /// @dev Set up the exact same state in each resource\r\n    constructor() public\r\n    {\r\n        // God gets 200 to put on exchange\r\n        holdings[msg.sender] = 200;\r\n\r\n        resourceSupply = 200;\r\n    }\r\n\r\n    /// @dev The resources interface can burn tokens for building\r\n    ///  roads or houses\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to burn\r\n    function interfaceBurnTokens(address _owner, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n        hasAvailableTokens(_owner, _tokens)\r\n    {\r\n        holdings[_owner] -= _tokens;\r\n\r\n        resourceSupply -= _tokens;\r\n\r\n        // Pretend the tokens were sent to 0x0\r\n        emit Transfer(_owner, 0x0, _tokens);\r\n    }\r\n\r\n    /// @dev The resources interface contract can mint tokens for houses\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to burn\r\n    function interfaceMintTokens(address _owner, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n    {\r\n        holdings[_owner] += _tokens;\r\n\r\n        resourceSupply += _tokens;\r\n\r\n        // Pretend the tokens were sent from the interface contract\r\n        emit Transfer(interfaceContract, _owner, _tokens);\r\n    }\r\n\r\n    /// @dev The interface can freeze tokens\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to freeze\r\n    function interfaceFreezeTokens(address _owner, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n        hasAvailableTokens(_owner, _tokens)\r\n    {\r\n        frozenHoldings[_owner] += _tokens;\r\n    }\r\n\r\n    /// @dev The interface can thaw tokens\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to thaw\r\n    function interfaceThawTokens(address _owner, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n        hasFrozenTokens(_owner, _tokens)\r\n    {\r\n        frozenHoldings[_owner] -= _tokens;\r\n    }\r\n\r\n    /// @dev The interface can transfer tokens\r\n    /// @param _from The owner of the tokens\r\n    /// @param _to The new owner of the tokens\r\n    /// @param _tokens The amount of tokens to transfer\r\n    function interfaceTransfer(address _from, address _to, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n    {\r\n        assert(holdings[_from] >= _tokens);\r\n\r\n        holdings[_from] -= _tokens;\r\n        holdings[_to]   += _tokens;\r\n\r\n        emit Transfer(_from, _to, _tokens);\r\n    }\r\n\r\n    /// @dev The interface can transfer frozend tokens\r\n    /// @param _from The owner of the tokens\r\n    /// @param _to The new owner of the tokens\r\n    /// @param _tokens The amount of frozen tokens to transfer\r\n    function interfaceFrozenTransfer(address _from, address _to, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n        hasFrozenTokens(_from, _tokens)\r\n    {\r\n        // Make sure to deduct the tokens from both the total and frozen amounts\r\n        holdings[_from]       -= _tokens;\r\n        frozenHoldings[_from] -= _tokens;\r\n        holdings[_to]         += _tokens;\r\n\r\n        emit Transfer(_from, _to, _tokens);\r\n    }\r\n\r\n    /// @dev ERC20 transfer\r\n    /// @param _to The address to transfer to\r\n    /// @param _tokens The amount of tokens to transfer\r\n    function transfer(address _to, uint _tokens)\r\n        public\r\n        hasAvailableTokens(msg.sender, _tokens)\r\n        returns(bool success)\r\n    {\r\n        holdings[_to]        += _tokens;\r\n        holdings[msg.sender] -= _tokens;\r\n\r\n        emit Transfer(msg.sender, _to, _tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev ERC20 approve\r\n    /// @param _spender The address to approve\r\n    /// @param _tokens The amount of tokens to approve\r\n    function approve(address _spender, uint _tokens)\r\n        public\r\n        returns(bool success)\r\n    {\r\n        allowances[msg.sender][_spender] = _tokens;\r\n\r\n        emit Approval(msg.sender, _spender, _tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev ERC20 transfer from\r\n    /// @param _from The address providing the allowance\r\n    /// @param _to The address using the allowance\r\n    /// @param _tokens The amount of tokens to transfer\r\n    function transferFrom(address _from, address _to, uint _tokens)\r\n        public\r\n        hasAvailableTokens(_from, _tokens)\r\n        returns(bool success)\r\n    {\r\n        require(allowances[_from][_to] >= _tokens);\r\n\r\n        holdings[_to]          += _tokens;\r\n        holdings[_from]        -= _tokens;\r\n        allowances[_from][_to] -= _tokens;\r\n\r\n        emit Transfer(_from, _to, _tokens);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthResourceType.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title King of Eth: Resource Type\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides enum to choose resource types\r\ncontract KingOfEthResourceType {\r\n    /// @dev Enum describing a choice of a resource\r\n    enum ResourceType {\r\n          ETH\r\n        , BRONZE\r\n        , CORN\r\n        , GOLD\r\n        , OIL\r\n        , ORE\r\n        , STEEL\r\n        , URANIUM\r\n        , WOOD\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthRoadsReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Roads Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to reference the roads contract\r\ncontract KingOfEthRoadsReferencer is GodMode {\r\n    /// @dev The roads contract's address\r\n    address public roadsContract;\r\n\r\n    /// @dev Only the roads contract can run this function\r\n    modifier onlyRoadsContract()\r\n    {\r\n        require(roadsContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set the realty contract\r\n    /// @param _roadsContract The new address\r\n    function godSetRoadsContract(address _roadsContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        roadsContract = _roadsContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthResourcesInterface.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title King of Eth: Resources Interface\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Contract for interacting with resources\r\ncontract KingOfEthResourcesInterface is\r\n      GodMode\r\n    , KingOfEthExchangeReferencer\r\n    , KingOfEthHousesReferencer\r\n    , KingOfEthResourceType\r\n    , KingOfEthRoadsReferencer\r\n{\r\n    /// @dev Amount of resources a user gets for building a house\r\n    uint public constant resourcesPerHouse = 3;\r\n\r\n    /// @dev Address for the bronze contract\r\n    address public bronzeContract;\r\n\r\n    /// @dev Address for the corn contract\r\n    address public cornContract;\r\n\r\n    /// @dev Address for the gold contract\r\n    address public goldContract;\r\n\r\n    /// @dev Address for the oil contract\r\n    address public oilContract;\r\n\r\n    /// @dev Address for the ore contract\r\n    address public oreContract;\r\n\r\n    /// @dev Address for the steel contract\r\n    address public steelContract;\r\n\r\n    /// @dev Address for the uranium contract\r\n    address public uraniumContract;\r\n\r\n    /// @dev Address for the wood contract\r\n    address public woodContract;\r\n\r\n    /// @param _bronzeContract The address of the bronze contract\r\n    /// @param _cornContract The address of the corn contract\r\n    /// @param _goldContract The address of the gold contract\r\n    /// @param _oilContract The address of the oil contract\r\n    /// @param _oreContract The address of the ore contract\r\n    /// @param _steelContract The address of the steel contract\r\n    /// @param _uraniumContract The address of the uranium contract\r\n    /// @param _woodContract The address of the wood contract\r\n    constructor(\r\n          address _bronzeContract\r\n        , address _cornContract\r\n        , address _goldContract\r\n        , address _oilContract\r\n        , address _oreContract\r\n        , address _steelContract\r\n        , address _uraniumContract\r\n        , address _woodContract\r\n    )\r\n        public\r\n    {\r\n        bronzeContract  = _bronzeContract;\r\n        cornContract    = _cornContract;\r\n        goldContract    = _goldContract;\r\n        oilContract     = _oilContract;\r\n        oreContract     = _oreContract;\r\n        steelContract   = _steelContract;\r\n        uraniumContract = _uraniumContract;\r\n        woodContract    = _woodContract;\r\n    }\r\n\r\n    /// @dev Return the particular address for a certain resource type\r\n    /// @param _type The resource type\r\n    /// @return The address for that resource\r\n    function contractFor(ResourceType _type)\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        // ETH does not have a contract\r\n        require(ResourceType.ETH != _type);\r\n\r\n        if(ResourceType.BRONZE == _type)\r\n        {\r\n            return bronzeContract;\r\n        }\r\n        else if(ResourceType.CORN == _type)\r\n        {\r\n            return cornContract;\r\n        }\r\n        else if(ResourceType.GOLD == _type)\r\n        {\r\n            return goldContract;\r\n        }\r\n        else if(ResourceType.OIL == _type)\r\n        {\r\n            return oilContract;\r\n        }\r\n        else if(ResourceType.ORE == _type)\r\n        {\r\n            return oreContract;\r\n        }\r\n        else if(ResourceType.STEEL == _type)\r\n        {\r\n            return steelContract;\r\n        }\r\n        else if(ResourceType.URANIUM == _type)\r\n        {\r\n            return uraniumContract;\r\n        }\r\n        else if(ResourceType.WOOD == _type)\r\n        {\r\n            return woodContract;\r\n        }\r\n    }\r\n\r\n    /// @dev Determine the resource type of a tile\r\n    /// @param _x The x coordinate of the top left corner of the tile\r\n    /// @param _y The y coordinate of the top left corner of the tile\r\n    function resourceType(uint _x, uint _y)\r\n        public\r\n        pure\r\n        returns(ResourceType resource)\r\n    {\r\n        uint _seed = (_x + 7777777) ^  _y;\r\n\r\n        if(0 == _seed % 97)\r\n        {\r\n          return ResourceType.URANIUM;\r\n        }\r\n        else if(0 == _seed % 29)\r\n        {\r\n          return ResourceType.OIL;\r\n        }\r\n        else if(0 == _seed % 23)\r\n        {\r\n          return ResourceType.STEEL;\r\n        }\r\n        else if(0 == _seed % 17)\r\n        {\r\n          return ResourceType.GOLD;\r\n        }\r\n        else if(0 == _seed % 11)\r\n        {\r\n          return ResourceType.BRONZE;\r\n        }\r\n        else if(0 == _seed % 5)\r\n        {\r\n          return ResourceType.WOOD;\r\n        }\r\n        else if(0 == _seed % 2)\r\n        {\r\n          return ResourceType.CORN;\r\n        }\r\n        else\r\n        {\r\n          return ResourceType.ORE;\r\n        }\r\n    }\r\n\r\n    /// @dev Lookup the number of resource points for a certain\r\n    ///  player\r\n    /// @param _player The player in question\r\n    function lookupResourcePoints(address _player)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        uint result = 0;\r\n\r\n        result += KingOfEthResource(bronzeContract).balanceOf(_player);\r\n        result += KingOfEthResource(goldContract).balanceOf(_player)    * 3;\r\n        result += KingOfEthResource(steelContract).balanceOf(_player)   * 6;\r\n        result += KingOfEthResource(oilContract).balanceOf(_player)     * 10;\r\n        result += KingOfEthResource(uraniumContract).balanceOf(_player) * 44;\r\n\r\n        return result;\r\n    }\r\n\r\n    /// @dev Burn the resources necessary to build a house\r\n    /// @param _count the number of houses being built\r\n    /// @param _player The player who is building the house\r\n    function burnHouseCosts(uint _count, address _player)\r\n        public\r\n        onlyHousesContract\r\n    {\r\n        // Costs 2 corn per house\r\n        KingOfEthResource(contractFor(ResourceType.CORN)).interfaceBurnTokens(\r\n              _player\r\n            , 2 * _count\r\n        );\r\n\r\n        // Costs 2 ore per house\r\n        KingOfEthResource(contractFor(ResourceType.ORE)).interfaceBurnTokens(\r\n              _player\r\n            , 2 * _count\r\n        );\r\n\r\n        // Costs 1 wood per house\r\n        KingOfEthResource(contractFor(ResourceType.WOOD)).interfaceBurnTokens(\r\n              _player\r\n            , _count\r\n        );\r\n    }\r\n\r\n    /// @dev Burn the costs of upgrading a house\r\n    /// @param _currentLevel The level of the house before the upgrade\r\n    /// @param _player The player who is upgrading the house\r\n    function burnUpgradeCosts(uint8 _currentLevel, address _player)\r\n        public\r\n        onlyHousesContract\r\n    {\r\n        // Do not allow upgrades after level 4\r\n        require(5 > _currentLevel);\r\n\r\n        // Burn the base house cost\r\n        burnHouseCosts(1, _player);\r\n\r\n        if(0 == _currentLevel)\r\n        {\r\n            // Level 1 costs bronze\r\n            KingOfEthResource(contractFor(ResourceType.BRONZE)).interfaceBurnTokens(\r\n                  _player\r\n                , 1\r\n            );\r\n        }\r\n        else if(1 == _currentLevel)\r\n        {\r\n            // Level 2 costs gold\r\n            KingOfEthResource(contractFor(ResourceType.GOLD)).interfaceBurnTokens(\r\n                  _player\r\n                , 1\r\n            );\r\n        }\r\n        else if(2 == _currentLevel)\r\n        {\r\n            // Level 3 costs steel\r\n            KingOfEthResource(contractFor(ResourceType.STEEL)).interfaceBurnTokens(\r\n                  _player\r\n                , 1\r\n            );\r\n        }\r\n        else if(3 == _currentLevel)\r\n        {\r\n            // Level 4 costs oil\r\n            KingOfEthResource(contractFor(ResourceType.OIL)).interfaceBurnTokens(\r\n                  _player\r\n                , 1\r\n            );\r\n        }\r\n        else if(4 == _currentLevel)\r\n        {\r\n            // Level 5 costs uranium\r\n            KingOfEthResource(contractFor(ResourceType.URANIUM)).interfaceBurnTokens(\r\n                  _player\r\n                , 1\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev Mint resources for a house and distribute all to its owner\r\n    /// @param _owner The owner of the house\r\n    /// @param _x The x coordinate of the house\r\n    /// @param _y The y coordinate of the house\r\n    /// @param _y The y coordinate of the house\r\n    /// @param _level The new level of the house\r\n    function distributeResources(address _owner, uint _x, uint _y, uint8 _level)\r\n        public\r\n        onlyHousesContract\r\n    {\r\n        // Calculate the count of resources for this level\r\n        uint _count = resourcesPerHouse * uint(_level + 1);\r\n\r\n        // Distribute the top left resource\r\n        KingOfEthResource(contractFor(resourceType(_x - 1, _y - 1))).interfaceMintTokens(\r\n            _owner\r\n          , _count\r\n        );\r\n\r\n        // Distribute the top right resource\r\n        KingOfEthResource(contractFor(resourceType(_x, _y - 1))).interfaceMintTokens(\r\n            _owner\r\n          , _count\r\n        );\r\n\r\n        // Distribute the bottom right resource\r\n        KingOfEthResource(contractFor(resourceType(_x, _y))).interfaceMintTokens(\r\n            _owner\r\n          , _count\r\n        );\r\n\r\n        // Distribute the bottom left resource\r\n        KingOfEthResource(contractFor(resourceType(_x - 1, _y))).interfaceMintTokens(\r\n            _owner\r\n          , _count\r\n        );\r\n    }\r\n\r\n    /// @dev Burn the costs necessary to build a road\r\n    /// @param _length The length of the road\r\n    /// @param _player The player who is building the house\r\n    function burnRoadCosts(uint _length, address _player)\r\n        public\r\n        onlyRoadsContract\r\n    {\r\n        // Burn corn\r\n        KingOfEthResource(cornContract).interfaceBurnTokens(\r\n              _player\r\n            , _length\r\n        );\r\n\r\n        // Burn ore\r\n        KingOfEthResource(oreContract).interfaceBurnTokens(\r\n              _player\r\n            , _length\r\n        );\r\n    }\r\n\r\n    /// @dev The exchange can freeze tokens\r\n    /// @param _type The type of resource\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to freeze\r\n    function exchangeFreezeTokens(ResourceType _type, address _owner, uint _tokens)\r\n        public\r\n        onlyExchangeContract\r\n    {\r\n        KingOfEthResource(contractFor(_type)).interfaceFreezeTokens(_owner, _tokens);\r\n    }\r\n\r\n    /// @dev The exchange can thaw tokens\r\n    /// @param _type The type of resource\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to thaw\r\n    function exchangeThawTokens(ResourceType _type, address _owner, uint _tokens)\r\n        public\r\n        onlyExchangeContract\r\n    {\r\n        KingOfEthResource(contractFor(_type)).interfaceThawTokens(_owner, _tokens);\r\n    }\r\n\r\n    /// @dev The exchange can transfer tokens\r\n    /// @param _type The type of resource\r\n    /// @param _from The owner of the tokens\r\n    /// @param _to The new owner of the tokens\r\n    /// @param _tokens The amount of tokens to transfer\r\n    function exchangeTransfer(ResourceType _type, address _from, address _to, uint _tokens)\r\n        public\r\n        onlyExchangeContract\r\n    {\r\n        KingOfEthResource(contractFor(_type)).interfaceTransfer(_from, _to, _tokens);\r\n    }\r\n\r\n    /// @dev The exchange can transfer frozend tokens\r\n    /// @param _type The type of resource\r\n    /// @param _from The owner of the tokens\r\n    /// @param _to The new owner of the tokens\r\n    /// @param _tokens The amount of frozen tokens to transfer\r\n    function exchangeFrozenTransfer(ResourceType _type, address _from, address _to, uint _tokens)\r\n        public\r\n        onlyExchangeContract\r\n    {\r\n        KingOfEthResource(contractFor(_type)).interfaceFrozenTransfer(_from, _to, _tokens);\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthRoadsAbstractInterface.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title King of Eth: Roads Abstract Interface\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Abstract interface contract for roads\r\ncontract KingOfEthRoadsAbstractInterface {\r\n    /// @dev Get the owner of the road at some location\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road (either\r\n    ///  0 for right or 1 for down)\r\n    /// @return The address of the owner\r\n    function ownerOf(uint _x, uint _y, uint8 _direction) public view returns(address);\r\n\r\n    /// @dev The road realty contract can transfer road ownership\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road\r\n    /// @param _from The previous owner of road\r\n    /// @param _to The new owner of road\r\n    function roadRealtyTransferOwnership(\r\n          uint _x\r\n        , uint _y\r\n        , uint8 _direction\r\n        , address _from\r\n        , address _to\r\n    ) public;\r\n}\r\n\r\n// File: contracts/KingOfEthRoadRealty.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title King of Eth: Road Realty\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Contract for controlling sales of roads\r\ncontract KingOfEthRoadRealty is\r\n      GodMode\r\n    , KingOfEthReferencer\r\n    , KingOfEthRoadsReferencer\r\n{\r\n    /// @dev The number that divides the amount payed for any sale to produce\r\n    ///  the amount payed in taxes\r\n    uint public constant taxDivisor = 25;\r\n\r\n    /// @dev Mapping from the x, y coordinates and the direction (0 for right and\r\n    ///  1 for down) of a road to the  current sale price (0 if there is no sale)\r\n    mapping (uint => mapping (uint => uint[2])) roadPrices;\r\n\r\n    /// @dev Fired when there is a new road for sale\r\n    event RoadForSale(\r\n          uint x\r\n        , uint y\r\n        , uint8 direction\r\n        , address owner\r\n        , uint amount\r\n    );\r\n\r\n    /// @dev Fired when the owner changes the price of a road\r\n    event RoadPriceChanged(\r\n          uint x\r\n        , uint y\r\n        , uint8 direction\r\n        , uint amount\r\n    );\r\n\r\n    /// @dev Fired when a road is sold\r\n    event RoadSold(\r\n          uint x\r\n        , uint y\r\n        , uint8 direction\r\n        , address from\r\n        , address to\r\n        , uint amount\r\n    );\r\n\r\n    /// @dev Fired when the sale for a road is cancelled by the owner\r\n    event RoadSaleCancelled(\r\n          uint x\r\n        , uint y\r\n        , uint8 direction\r\n        , address owner\r\n    );\r\n\r\n    /// @dev Only the owner of the road at a location can run this\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road\r\n    modifier onlyRoadOwner(uint _x, uint _y, uint8 _direction)\r\n    {\r\n        require(KingOfEthRoadsAbstractInterface(roadsContract).ownerOf(_x, _y, _direction) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev This can only be run if there is *not* an existing sale for a road\r\n    ///  at a location\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road\r\n    modifier noExistingRoadSale(uint _x, uint _y, uint8 _direction)\r\n    {\r\n        require(0 == roadPrices[_x][_y][_direction]);\r\n        _;\r\n    }\r\n\r\n    /// @dev This can only be run if there is an existing sale for a house\r\n    ///  at a location\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road\r\n    modifier existingRoadSale(uint _x, uint _y, uint8 _direction)\r\n    {\r\n        require(0 != roadPrices[_x][_y][_direction]);\r\n        _;\r\n    }\r\n\r\n    /// @param _kingOfEthContract The address of the king contract\r\n    constructor(address _kingOfEthContract) public\r\n    {\r\n        kingOfEthContract = _kingOfEthContract;\r\n    }\r\n\r\n    /// @dev The roads contract can cancel a sale when a road is transfered\r\n    ///  to another player\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road\r\n    function roadsCancelRoadSale(uint _x, uint _y, uint8 _direction)\r\n        public\r\n        onlyRoadsContract\r\n    {\r\n        // If there is indeed a sale\r\n        if(0 != roadPrices[_x][_y][_direction])\r\n        {\r\n            // Cancel the sale\r\n            roadPrices[_x][_y][_direction] = 0;\r\n\r\n            emit RoadSaleCancelled(_x, _y, _direction, msg.sender);\r\n        }\r\n    }\r\n\r\n    /// @dev The owner of a road can start a sale\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road\r\n    /// @param _askingPrice The price that must be payed by another player\r\n    ///  to purchase the road\r\n    function startRoadSale(\r\n          uint _x\r\n        , uint _y\r\n        , uint8 _direction\r\n        , uint _askingPrice\r\n    )\r\n        public\r\n        notPaused\r\n        onlyRoadOwner(_x, _y, _direction)\r\n        noExistingRoadSale(_x, _y, _direction)\r\n    {\r\n        // Require that the price is at least 0\r\n        require(0 != _askingPrice);\r\n\r\n        // Record the price\r\n        roadPrices[_x][_y][_direction] = _askingPrice;\r\n\r\n        emit RoadForSale(_x, _y, _direction, msg.sender, _askingPrice);\r\n    }\r\n\r\n    /// @dev The owner of a road can change the price of a sale\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road\r\n    /// @param _askingPrice The new price that must be payed by another\r\n    ///  player to purchase the road\r\n    function changeRoadPrice(\r\n          uint _x\r\n        , uint _y\r\n        , uint8 _direction\r\n        , uint _askingPrice\r\n    )\r\n        public\r\n        notPaused\r\n        onlyRoadOwner(_x, _y, _direction)\r\n        existingRoadSale(_x, _y, _direction)\r\n    {\r\n        // Require that the price is at least 0\r\n        require(0 != _askingPrice);\r\n\r\n        // Record the price\r\n        roadPrices[_x][_y][_direction] = _askingPrice;\r\n\r\n        emit RoadPriceChanged(_x, _y, _direction, _askingPrice);\r\n    }\r\n\r\n    /// @dev Anyone can purchase a road as long as the sale exists\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road\r\n    function purchaseRoad(uint _x, uint _y, uint8 _direction)\r\n        public\r\n        payable\r\n        notPaused\r\n        existingRoadSale(_x, _y, _direction)\r\n    {\r\n        // Require that the exact price was paid\r\n        require(roadPrices[_x][_y][_direction] == msg.value);\r\n\r\n        // End the sale\r\n        roadPrices[_x][_y][_direction] = 0;\r\n\r\n        // Calculate the taxes to be paid\r\n        uint taxCut = msg.value / taxDivisor;\r\n\r\n        // Pay the taxes\r\n        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(taxCut)();\r\n\r\n        KingOfEthRoadsAbstractInterface _roadsContract = KingOfEthRoadsAbstractInterface(roadsContract);\r\n\r\n        // Determine the previous owner\r\n        address _oldOwner = _roadsContract.ownerOf(_x, _y, _direction);\r\n\r\n        // Send the buyer the house\r\n        _roadsContract.roadRealtyTransferOwnership(\r\n              _x\r\n            , _y\r\n            , _direction\r\n            , _oldOwner\r\n            , msg.sender\r\n        );\r\n\r\n        // Send the previous owner his share\r\n        _oldOwner.transfer(msg.value - taxCut);\r\n\r\n        emit RoadSold(\r\n              _x\r\n            , _y\r\n            , _direction\r\n            , _oldOwner\r\n            , msg.sender\r\n            , msg.value\r\n        );\r\n    }\r\n\r\n    /// @dev The owner of a road can cancel a sale\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road\r\n    function cancelRoadSale(uint _x, uint _y, uint8 _direction)\r\n        public\r\n        notPaused\r\n        onlyRoadOwner(_x, _y, _direction)\r\n        existingRoadSale(_x, _y, _direction)\r\n    {\r\n        // Cancel the sale\r\n        roadPrices[_x][_y][_direction] = 0;\r\n\r\n        emit RoadSaleCancelled(_x, _y, _direction, msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthRoadRealtyReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Road Realty Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to reference the road realty contract\r\ncontract KingOfEthRoadRealtyReferencer is GodMode {\r\n    /// @dev The realty contract's address\r\n    address public roadRealtyContract;\r\n\r\n    /// @dev Only the road realty contract can run this function\r\n    modifier onlyRoadRealtyContract()\r\n    {\r\n        require(roadRealtyContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set the road realty contract\r\n    /// @param _roadRealtyContract The new address\r\n    function godSetRoadRealtyContract(address _roadRealtyContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        roadRealtyContract = _roadRealtyContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthRoads.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title King of Eth: Roads\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Contract for roads\r\ncontract KingOfEthRoads is\r\n      GodMode\r\n    , KingOfEthBoardReferencer\r\n    , KingOfEthHousesReferencer\r\n    , KingOfEthReferencer\r\n    , KingOfEthResourcesInterfaceReferencer\r\n    , KingOfEthRoadRealtyReferencer\r\n    , KingOfEthRoadsAbstractInterface\r\n{\r\n    /// @dev ETH cost to build a road\r\n    uint public roadCost = 0.0002 ether;\r\n\r\n    /// @dev Mapping from the x, y, direction coordinate of the location to its owner\r\n    mapping (uint => mapping (uint => address[2])) owners;\r\n\r\n    /// @dev Mapping from a players address to his road counts\r\n    mapping (address => uint) roadCounts;\r\n\r\n    /// @param _boardContract The address of the board contract\r\n    /// @param _roadRealtyContract The address of the road realty contract\r\n    /// @param _kingOfEthContract The address of the king contract\r\n    /// @param _interfaceContract The address of the resources\r\n    ///  interface contract\r\n    constructor(\r\n          address _boardContract\r\n        , address _roadRealtyContract\r\n        , address _kingOfEthContract\r\n        , address _interfaceContract\r\n    )\r\n        public\r\n    {\r\n        boardContract      = _boardContract;\r\n        roadRealtyContract = _roadRealtyContract;\r\n        kingOfEthContract  = _kingOfEthContract;\r\n        interfaceContract  = _interfaceContract;\r\n    }\r\n\r\n    /// @dev Fired when new roads are built\r\n    event NewRoads(\r\n          address owner\r\n        , uint x\r\n        , uint y\r\n        , uint8 direction\r\n        , uint length\r\n    );\r\n\r\n    /// @dev Fired when a road is sent from one player to another\r\n    event SentRoad(\r\n          uint x\r\n        , uint y\r\n        , uint direction\r\n        , address from\r\n        , address to\r\n    );\r\n\r\n    /// @dev Get the owner of the road at some location\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road (either\r\n    ///  0 for right or 1 for down)\r\n    /// @return The address of the owner\r\n    function ownerOf(uint _x, uint _y, uint8 _direction)\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        // Only 0 or 1 is a valid direction\r\n        require(2 > _direction);\r\n\r\n        return owners[_x][_y][_direction];\r\n    }\r\n\r\n    /// @dev Get the number of roads owned by a player\r\n    /// @param _player The player's address\r\n    /// @return The number of roads\r\n    function numberOfRoads(address _player) public view returns(uint)\r\n    {\r\n        return roadCounts[_player];\r\n    }\r\n\r\n    /// @dev Only the owner of a road can run this\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road\r\n    modifier onlyRoadOwner(uint _x, uint _y, uint8 _direction)\r\n    {\r\n        require(owners[_x][_y][_direction] == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev Build houses to the right\r\n    /// @param _x The x coordinate of the starting point of the first road\r\n    /// @param _y The y coordinate of the starting point of the first road\r\n    /// @param _length The length to build\r\n    function buildRight(uint _x, uint _y, uint _length) private\r\n    {\r\n        // Require that nobody currently owns the road\r\n        require(0x0 == owners[_x][_y][0]);\r\n\r\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\r\n\r\n        // Require that either the player owns the house at the\r\n        // starting location, the road below it, the road to the\r\n        // left of it, or the road above it\r\n        address _houseOwner = _housesContract.ownerOf(_x, _y);\r\n        require(_houseOwner == msg.sender || (0x0 == _houseOwner && (\r\n               owners[_x][_y][1] == msg.sender\r\n            || owners[_x - 1][_y][0] == msg.sender\r\n            || owners[_x][_y - 1][1] == msg.sender\r\n        )));\r\n\r\n        // Set the new owner\r\n        owners[_x][_y][0] = msg.sender;\r\n\r\n        for(uint _i = 1; _i < _length; ++_i)\r\n        {\r\n            // Require that nobody currently owns the road\r\n            require(0x0 == owners[_x + _i][_y][0]);\r\n\r\n            // Require that either the house location is empty or\r\n            // that it is owned by the player\r\n            require(\r\n                   _housesContract.ownerOf(_x + _i, _y) == 0x0\r\n                || _housesContract.ownerOf(_x + _i, _y) == msg.sender\r\n            );\r\n\r\n            // Set the new owner\r\n            owners[_x + _i][_y][0] = msg.sender;\r\n        }\r\n    }\r\n\r\n    /// @dev Build houses downwards\r\n    /// @param _x The x coordinate of the starting point of the first road\r\n    /// @param _y The y coordinate of the starting point of the first road\r\n    /// @param _length The length to build\r\n    function buildDown(uint _x, uint _y, uint _length) private\r\n    {\r\n        // Require that nobody currently owns the road\r\n        require(0x0 == owners[_x][_y][1]);\r\n\r\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\r\n\r\n        // Require that either the player owns the house at the\r\n        // starting location, the road to the right of it, the road to\r\n        // the left of it, or the road above it\r\n        address _houseOwner = _housesContract.ownerOf(_x, _y);\r\n        require(_houseOwner == msg.sender || (0x0 == _houseOwner && (\r\n               owners[_x][_y][0] == msg.sender\r\n            || owners[_x - 1][_y][0] == msg.sender\r\n            || owners[_x][_y - 1][1] == msg.sender\r\n        )));\r\n\r\n        // Set the new owner\r\n        owners[_x][_y][1] = msg.sender;\r\n\r\n        for(uint _i = 1; _i < _length; ++_i)\r\n        {\r\n            // Require that nobody currently owns the road\r\n            require(0x0 == owners[_x][_y + _i][1]);\r\n\r\n            // Require that either the house location is empty or\r\n            // that it is owned by the player\r\n            require(\r\n                   _housesContract.ownerOf(_x, _y + _i) == 0x0\r\n                || _housesContract.ownerOf(_x, _y + _i) == msg.sender\r\n            );\r\n\r\n            // Set the new owner\r\n            owners[_x][_y + _i][1] = msg.sender;\r\n        }\r\n    }\r\n\r\n    /// @dev Build houses to the left\r\n    /// @param _x The x coordinate of the starting point of the first road\r\n    /// @param _y The y coordinate of the starting point of the first road\r\n    /// @param _length The length to build\r\n    function buildLeft(uint _x, uint _y, uint _length) private\r\n    {\r\n        // Require that nobody currently owns the road\r\n        require(0x0 == owners[_x - 1][_y][0]);\r\n\r\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\r\n\r\n        // Require that either the player owns the house at the\r\n        // starting location, the road to the right of it, the road\r\n        // below it, or the road above it\r\n        address _houseOwner = _housesContract.ownerOf(_x, _y);\r\n        require(_houseOwner == msg.sender || (0x0 == _houseOwner && (\r\n               owners[_x][_y][0] == msg.sender\r\n            || owners[_x][_y][1] == msg.sender\r\n            || owners[_x][_y - 1][1] == msg.sender\r\n        )));\r\n\r\n        // Set the new owner\r\n        owners[_x - 1][_y][0] = msg.sender;\r\n\r\n        for(uint _i = 1; _i < _length; ++_i)\r\n        {\r\n            // Require that nobody currently owns the road\r\n            require(0x0 == owners[_x - _i - 1][_y][0]);\r\n\r\n            // Require that either the house location is empty or\r\n            // that it is owned by the player\r\n            require(\r\n                   _housesContract.ownerOf(_x - _i, _y) == 0x0\r\n                || _housesContract.ownerOf(_x - _i, _y) == msg.sender\r\n            );\r\n\r\n            // Set the new owner\r\n            owners[_x - _i - 1][_y][0] = msg.sender;\r\n        }\r\n    }\r\n\r\n    /// @dev Build houses upwards\r\n    /// @param _x The x coordinate of the starting point of the first road\r\n    /// @param _y The y coordinate of the starting point of the first road\r\n    /// @param _length The length to build\r\n    function buildUp(uint _x, uint _y, uint _length) private\r\n    {\r\n        // Require that nobody currently owns the road\r\n        require(0x0 == owners[_x][_y - 1][1]);\r\n\r\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\r\n\r\n        // Require that either the player owns the house at the\r\n        // starting location, the road to the right of it, the road\r\n        // below it, or the road to the left of it\r\n        address _houseOwner = _housesContract.ownerOf(_x, _y);\r\n        require(_houseOwner == msg.sender || (0x0 == _houseOwner && (\r\n               owners[_x][_y][0] == msg.sender\r\n            || owners[_x][_y][1] == msg.sender\r\n            || owners[_x - 1][_y][0] == msg.sender\r\n        )));\r\n\r\n        // Set the new owner\r\n        owners[_x][_y - 1][1] = msg.sender;\r\n\r\n        for(uint _i = 1; _i < _length; ++_i)\r\n        {\r\n            // Require that nobody currently owns the road\r\n            require(0x0 == owners[_x][_y - _i - 1][1]);\r\n\r\n            // Require that either the house location is empty or\r\n            // that it is owned by the player\r\n            require(\r\n                   _housesContract.ownerOf(_x, _y - _i) == 0x0\r\n                || _housesContract.ownerOf(_x, _y - _i) == msg.sender\r\n            );\r\n\r\n            // Set the new owner\r\n            owners[_x][_y - _i - 1][1] = msg.sender;\r\n        }\r\n    }\r\n\r\n    /// @dev God can change the road cost\r\n    /// @param _newRoadCost The new cost of a road\r\n    function godChangeRoadCost(uint _newRoadCost)\r\n        public\r\n        onlyGod\r\n    {\r\n        roadCost = _newRoadCost;\r\n    }\r\n\r\n    /// @dev The road realty contract can transfer road ownership\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road\r\n    /// @param _from The previous owner of road\r\n    /// @param _to The new owner of road\r\n    function roadRealtyTransferOwnership(\r\n          uint _x\r\n        , uint _y\r\n        , uint8 _direction\r\n        , address _from\r\n        , address _to\r\n    )\r\n        public\r\n        onlyRoadRealtyContract\r\n    {\r\n        // Assert that the previous owner still has the road\r\n        assert(owners[_x][_y][_direction] == _from);\r\n\r\n        // Set the new owner\r\n        owners[_x][_y][_direction] = _to;\r\n\r\n        // Update the road counts\r\n        --roadCounts[_from];\r\n        ++roadCounts[_to];\r\n    }\r\n\r\n    /// @dev Build a road in a direction from a location\r\n    /// @param _x The x coordinate of the starting location\r\n    /// @param _y The y coordinate of the starting location\r\n    /// @param _direction The direction to build (right is 0, down is 1,\r\n    ///  2 is left, and 3 is up)\r\n    /// @param _length The number of roads to build\r\n    function buildRoads(\r\n          uint _x\r\n        , uint _y\r\n        , uint8 _direction\r\n        , uint _length\r\n    )\r\n        public\r\n        payable\r\n    {\r\n        // Require at least one road to be built\r\n        require(0 < _length);\r\n\r\n        // Require that the cost for each road was payed\r\n        require(roadCost * _length == msg.value);\r\n\r\n        KingOfEthBoard _boardContract = KingOfEthBoard(boardContract);\r\n\r\n        // Require that the start is within bounds\r\n        require(_boardContract.boundX1() <= _x);\r\n        require(_boardContract.boundY1() <= _y);\r\n        require(_boardContract.boundX2() > _x);\r\n        require(_boardContract.boundY2() > _y);\r\n\r\n        // Burn the resource costs for each road\r\n        KingOfEthResourcesInterface(interfaceContract).burnRoadCosts(\r\n              _length\r\n            , msg.sender\r\n        );\r\n\r\n        // If the direction is right\r\n        if(0 == _direction)\r\n        {\r\n            // Require that the roads will be in bounds\r\n            require(_boardContract.boundX2() > _x + _length);\r\n\r\n            buildRight(_x, _y, _length);\r\n        }\r\n        // If the direction is down\r\n        else if(1 == _direction)\r\n        {\r\n            // Require that the roads will be in bounds\r\n            require(_boardContract.boundY2() > _y + _length);\r\n\r\n            buildDown(_x, _y, _length);\r\n        }\r\n        // If the direction is left\r\n        else if(2 == _direction)\r\n        {\r\n            // Require that the roads will be in bounds\r\n            require(_boardContract.boundX1() < _x - _length - 1);\r\n\r\n            buildLeft(_x, _y, _length);\r\n        }\r\n        // If the direction is up\r\n        else if(3 == _direction)\r\n        {\r\n            // Require that the roads will be in bounds\r\n            require(_boardContract.boundY1() < _y - _length - 1);\r\n\r\n            buildUp(_x, _y, _length);\r\n        }\r\n        else\r\n        {\r\n            // Revert if the direction is invalid\r\n            revert();\r\n        }\r\n\r\n        // Update the number of roads of the player\r\n        roadCounts[msg.sender] += _length;\r\n\r\n        // Pay taxes\r\n        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(msg.value)();\r\n\r\n        emit NewRoads(msg.sender, _x, _y, _direction, _length);\r\n    }\r\n\r\n    /// @dev Send a road to another player\r\n    /// @param _x The x coordinate of the road\r\n    /// @param _y The y coordinate of the road\r\n    /// @param _direction The direction of the road\r\n    /// @param _to The recipient of the road\r\n    function sendRoad(uint _x, uint _y, uint8 _direction, address _to)\r\n        public\r\n        onlyRoadOwner(_x, _y, _direction)\r\n    {\r\n        // Set the new owner\r\n        owners[_x][_y][_direction] = _to;\r\n\r\n        // Update road counts\r\n        --roadCounts[msg.sender];\r\n        ++roadCounts[_to];\r\n\r\n        // Cancel any sales that exist\r\n        KingOfEthRoadRealty(roadRealtyContract).roadsCancelRoadSale(\r\n              _x\r\n            , _y\r\n            , _direction\r\n        );\r\n\r\n        emit SentRoad(_x, _y, _direction, msg.sender, _to);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_direction\",\"type\":\"uint8\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sendRoad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boardContract\",\"type\":\"address\"}],\"name\":\"godSetBoardContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roadRealtyContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"godPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roadRealtyContract\",\"type\":\"address\"}],\"name\":\"godSetRoadRealtyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"numberOfRoads\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_direction\",\"type\":\"uint8\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"roadRealtyTransferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boardContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGod\",\"type\":\"address\"}],\"name\":\"godChangeGod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_interfaceContract\",\"type\":\"address\"}],\"name\":\"godSetInterfaceContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kingOfEthContract\",\"type\":\"address\"}],\"name\":\"godSetKingOfEthContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interfaceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"godUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRoadCost\",\"type\":\"uint256\"}],\"name\":\"godChangeRoadCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"god\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_direction\",\"type\":\"uint8\"},{\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"buildRoads\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roadCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_housesContract\",\"type\":\"address\"}],\"name\":\"godSetHousesContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"housesContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_direction\",\"type\":\"uint8\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kingOfEthContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_boardContract\",\"type\":\"address\"},{\"name\":\"_roadRealtyContract\",\"type\":\"address\"},{\"name\":\"_kingOfEthContract\",\"type\":\"address\"},{\"name\":\"_interfaceContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"direction\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"NewRoads\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"direction\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SentRoad\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GodPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GodUnpaused\",\"type\":\"event\"}]","ContractName":"KingOfEthRoads","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005ff1e4c124b6b0c9a41cf41d261b3cb9fd84c80d000000000000000000000000107464baae9d59725623b3252528f420b5bdb70500000000000000000000000004bba664ea822924ff435ce1b3fad3e8dcc694810000000000000000000000008183703e9df90ed76bec0b0b8fad33f2c024be59","Library":"","SwarmSource":"bzzr://edffae1b1c2f2c0d3170ccea3e269e14293729dec8d9ba073ab92b1970432c62"}]}