{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\ncontract ErrorReporter {\r\n\r\n    /**\r\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\r\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\r\n      **/\r\n    event Failure(uint error, uint info, uint detail);\r\n\r\n    enum Error {\r\n        NO_ERROR,\r\n        OPAQUE_ERROR, // To be used when reporting errors from upgradeable contracts; the opaque code should be given as `detail` in the `Failure` event\r\n        UNAUTHORIZED,\r\n        INTEGER_OVERFLOW,\r\n        INTEGER_UNDERFLOW,\r\n        DIVISION_BY_ZERO,\r\n        BAD_INPUT,\r\n        TOKEN_INSUFFICIENT_ALLOWANCE,\r\n        TOKEN_INSUFFICIENT_BALANCE,\r\n        TOKEN_TRANSFER_FAILED,\r\n        MARKET_NOT_SUPPORTED,\r\n        SUPPLY_RATE_CALCULATION_FAILED,\r\n        BORROW_RATE_CALCULATION_FAILED,\r\n        TOKEN_INSUFFICIENT_CASH,\r\n        TOKEN_TRANSFER_OUT_FAILED,\r\n        INSUFFICIENT_LIQUIDITY,\r\n        INSUFFICIENT_BALANCE,\r\n        INVALID_COLLATERAL_RATIO,\r\n        MISSING_ASSET_PRICE,\r\n        EQUITY_INSUFFICIENT_BALANCE,\r\n        INVALID_CLOSE_AMOUNT_REQUESTED,\r\n        ASSET_NOT_PRICED,\r\n        INVALID_LIQUIDATION_DISCOUNT,\r\n        INVALID_COMBINED_RISK_PARAMETERS,\r\n        ZERO_ORACLE_ADDRESS,\r\n        CONTRACT_PAUSED\r\n    }\r\n\r\n    /*\r\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\r\n     *       This is because FailureInfo grows significantly faster, and\r\n     *       the order of Error has some meaning, while the order of FailureInfo\r\n     *       is entirely arbitrary.\r\n     */\r\n    enum FailureInfo {\r\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\r\n        BORROW_ACCOUNT_LIQUIDITY_CALCULATION_FAILED,\r\n        BORROW_ACCOUNT_SHORTFALL_PRESENT,\r\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\r\n        BORROW_AMOUNT_LIQUIDITY_SHORTFALL,\r\n        BORROW_AMOUNT_VALUE_CALCULATION_FAILED,\r\n        BORROW_CONTRACT_PAUSED,\r\n        BORROW_MARKET_NOT_SUPPORTED,\r\n        BORROW_NEW_BORROW_INDEX_CALCULATION_FAILED,\r\n        BORROW_NEW_BORROW_RATE_CALCULATION_FAILED,\r\n        BORROW_NEW_SUPPLY_INDEX_CALCULATION_FAILED,\r\n        BORROW_NEW_SUPPLY_RATE_CALCULATION_FAILED,\r\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\r\n        BORROW_NEW_TOTAL_BORROW_CALCULATION_FAILED,\r\n        BORROW_NEW_TOTAL_CASH_CALCULATION_FAILED,\r\n        BORROW_ORIGINATION_FEE_CALCULATION_FAILED,\r\n        BORROW_TRANSFER_OUT_FAILED,\r\n        EQUITY_WITHDRAWAL_AMOUNT_VALIDATION,\r\n        EQUITY_WITHDRAWAL_CALCULATE_EQUITY,\r\n        EQUITY_WITHDRAWAL_MODEL_OWNER_CHECK,\r\n        EQUITY_WITHDRAWAL_TRANSFER_OUT_FAILED,\r\n        LIQUIDATE_ACCUMULATED_BORROW_BALANCE_CALCULATION_FAILED,\r\n        LIQUIDATE_ACCUMULATED_SUPPLY_BALANCE_CALCULATION_FAILED_BORROWER_COLLATERAL_ASSET,\r\n        LIQUIDATE_ACCUMULATED_SUPPLY_BALANCE_CALCULATION_FAILED_LIQUIDATOR_COLLATERAL_ASSET,\r\n        LIQUIDATE_AMOUNT_SEIZE_CALCULATION_FAILED,\r\n        LIQUIDATE_BORROW_DENOMINATED_COLLATERAL_CALCULATION_FAILED,\r\n        LIQUIDATE_CLOSE_AMOUNT_TOO_HIGH,\r\n        LIQUIDATE_CONTRACT_PAUSED,\r\n        LIQUIDATE_DISCOUNTED_REPAY_TO_EVEN_AMOUNT_CALCULATION_FAILED,\r\n        LIQUIDATE_NEW_BORROW_INDEX_CALCULATION_FAILED_BORROWED_ASSET,\r\n        LIQUIDATE_NEW_BORROW_INDEX_CALCULATION_FAILED_COLLATERAL_ASSET,\r\n        LIQUIDATE_NEW_BORROW_RATE_CALCULATION_FAILED_BORROWED_ASSET,\r\n        LIQUIDATE_NEW_SUPPLY_INDEX_CALCULATION_FAILED_BORROWED_ASSET,\r\n        LIQUIDATE_NEW_SUPPLY_INDEX_CALCULATION_FAILED_COLLATERAL_ASSET,\r\n        LIQUIDATE_NEW_SUPPLY_RATE_CALCULATION_FAILED_BORROWED_ASSET,\r\n        LIQUIDATE_NEW_TOTAL_BORROW_CALCULATION_FAILED_BORROWED_ASSET,\r\n        LIQUIDATE_NEW_TOTAL_CASH_CALCULATION_FAILED_BORROWED_ASSET,\r\n        LIQUIDATE_NEW_TOTAL_SUPPLY_BALANCE_CALCULATION_FAILED_BORROWER_COLLATERAL_ASSET,\r\n        LIQUIDATE_NEW_TOTAL_SUPPLY_BALANCE_CALCULATION_FAILED_LIQUIDATOR_COLLATERAL_ASSET,\r\n        LIQUIDATE_FETCH_ASSET_PRICE_FAILED,\r\n        LIQUIDATE_TRANSFER_IN_FAILED,\r\n        LIQUIDATE_TRANSFER_IN_NOT_POSSIBLE,\r\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\r\n        REPAY_BORROW_CONTRACT_PAUSED,\r\n        REPAY_BORROW_NEW_BORROW_INDEX_CALCULATION_FAILED,\r\n        REPAY_BORROW_NEW_BORROW_RATE_CALCULATION_FAILED,\r\n        REPAY_BORROW_NEW_SUPPLY_INDEX_CALCULATION_FAILED,\r\n        REPAY_BORROW_NEW_SUPPLY_RATE_CALCULATION_FAILED,\r\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\r\n        REPAY_BORROW_NEW_TOTAL_BORROW_CALCULATION_FAILED,\r\n        REPAY_BORROW_NEW_TOTAL_CASH_CALCULATION_FAILED,\r\n        REPAY_BORROW_TRANSFER_IN_FAILED,\r\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\r\n        SET_ASSET_PRICE_CHECK_ORACLE,\r\n        SET_MARKET_INTEREST_RATE_MODEL_OWNER_CHECK,\r\n        SET_ORACLE_OWNER_CHECK,\r\n        SET_ORIGINATION_FEE_OWNER_CHECK,\r\n        SET_PAUSED_OWNER_CHECK,\r\n        SET_PENDING_ADMIN_OWNER_CHECK,\r\n        SET_RISK_PARAMETERS_OWNER_CHECK,\r\n        SET_RISK_PARAMETERS_VALIDATION,\r\n        SUPPLY_ACCUMULATED_BALANCE_CALCULATION_FAILED,\r\n        SUPPLY_CONTRACT_PAUSED,\r\n        SUPPLY_MARKET_NOT_SUPPORTED,\r\n        SUPPLY_NEW_BORROW_INDEX_CALCULATION_FAILED,\r\n        SUPPLY_NEW_BORROW_RATE_CALCULATION_FAILED,\r\n        SUPPLY_NEW_SUPPLY_INDEX_CALCULATION_FAILED,\r\n        SUPPLY_NEW_SUPPLY_RATE_CALCULATION_FAILED,\r\n        SUPPLY_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\r\n        SUPPLY_NEW_TOTAL_CASH_CALCULATION_FAILED,\r\n        SUPPLY_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\r\n        SUPPLY_TRANSFER_IN_FAILED,\r\n        SUPPLY_TRANSFER_IN_NOT_POSSIBLE,\r\n        SUPPORT_MARKET_FETCH_PRICE_FAILED,\r\n        SUPPORT_MARKET_OWNER_CHECK,\r\n        SUPPORT_MARKET_PRICE_CHECK,\r\n        SUSPEND_MARKET_OWNER_CHECK,\r\n        WITHDRAW_ACCOUNT_LIQUIDITY_CALCULATION_FAILED,\r\n        WITHDRAW_ACCOUNT_SHORTFALL_PRESENT,\r\n        WITHDRAW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\r\n        WITHDRAW_AMOUNT_LIQUIDITY_SHORTFALL,\r\n        WITHDRAW_AMOUNT_VALUE_CALCULATION_FAILED,\r\n        WITHDRAW_CAPACITY_CALCULATION_FAILED,\r\n        WITHDRAW_CONTRACT_PAUSED,\r\n        WITHDRAW_NEW_BORROW_INDEX_CALCULATION_FAILED,\r\n        WITHDRAW_NEW_BORROW_RATE_CALCULATION_FAILED,\r\n        WITHDRAW_NEW_SUPPLY_INDEX_CALCULATION_FAILED,\r\n        WITHDRAW_NEW_SUPPLY_RATE_CALCULATION_FAILED,\r\n        WITHDRAW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\r\n        WITHDRAW_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\r\n        WITHDRAW_TRANSFER_OUT_FAILED,\r\n        WITHDRAW_TRANSFER_OUT_NOT_POSSIBLE\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\r\n      */\r\n    function fail(Error err, FailureInfo info) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), 0);\r\n\r\n        return uint(err);\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\r\n      */\r\n    function failOpaque(FailureInfo info, uint opaqueError) internal returns (uint) {\r\n        emit Failure(uint(Error.OPAQUE_ERROR), uint(info), opaqueError);\r\n\r\n        return uint(Error.OPAQUE_ERROR);\r\n    }\r\n\r\n}\r\ncontract InterestRateModel {\r\n\r\n    /**\r\n      * @notice Gets the current supply interest rate based on the given asset, total cash and total borrows\r\n      * @dev The return value should be scaled by 1e18, thus a return value of\r\n      *      `(true, 1000000000000)` implies an interest rate of 0.000001 or 0.0001% *per block*.\r\n      * @param asset The asset to get the interest rate of\r\n      * @param cash The total cash of the asset in the market\r\n      * @param borrows The total borrows of the asset in the market\r\n      * @return Success or failure and the supply interest rate per block scaled by 10e18\r\n      */\r\n    function getSupplyRate(address asset, uint cash, uint borrows) public view returns (uint, uint);\r\n\r\n    /**\r\n      * @notice Gets the current borrow interest rate based on the given asset, total cash and total borrows\r\n      * @dev The return value should be scaled by 1e18, thus a return value of\r\n      *      `(true, 1000000000000)` implies an interest rate of 0.000001 or 0.0001% *per block*.\r\n      * @param asset The asset to get the interest rate of\r\n      * @param cash The total cash of the asset in the market\r\n      * @param borrows The total borrows of the asset in the market\r\n      * @return Success or failure and the borrow interest rate per block scaled by 10e18\r\n      */\r\n    function getBorrowRate(address asset, uint cash, uint borrows) public view returns (uint, uint);\r\n}\r\ncontract CarefulMath is ErrorReporter {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, returns an error on overflow.\r\n    */\r\n    function mul(uint a, uint b) internal pure returns (Error, uint) {\r\n        if (a == 0) {\r\n            return (Error.NO_ERROR, 0);\r\n        }\r\n\r\n        uint c = a * b;\r\n\r\n        if (c / a != b) {\r\n            return (Error.INTEGER_OVERFLOW, 0);\r\n        } else {\r\n            return (Error.NO_ERROR, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint a, uint b) internal pure returns (Error, uint) {\r\n        if (b == 0) {\r\n            return (Error.DIVISION_BY_ZERO, 0);\r\n        }\r\n\r\n        return (Error.NO_ERROR, a / b);\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint a, uint b) internal pure returns (Error, uint) {\r\n        if (b <= a) {\r\n            return (Error.NO_ERROR, a - b);\r\n        } else {\r\n            return (Error.INTEGER_UNDERFLOW, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, returns an error on overflow.\r\n    */\r\n    function add(uint a, uint b) internal pure returns (Error, uint) {\r\n        uint c = a + b;\r\n\r\n        if (c >= a) {\r\n            return (Error.NO_ERROR, c);\r\n        } else {\r\n            return (Error.INTEGER_OVERFLOW, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev add a and b and then subtract c\r\n    */\r\n    function addThenSub(uint a, uint b, uint c) internal pure returns (Error, uint) {\r\n        (Error err0, uint sum) = add(a, b);\r\n\r\n        if (err0 != Error.NO_ERROR) {\r\n            return (err0, 0);\r\n        }\r\n\r\n        return sub(sum, c);\r\n    }\r\n}\r\ncontract Exponential is ErrorReporter, CarefulMath {\r\n\r\n    // TODO: We may wish to put the result of 10**18 here instead of the expression.\r\n    // Per https://solidity.readthedocs.io/en/latest/contracts.html#constant-state-variables\r\n    // the optimizer MAY replace the expression 10**18 with its calculated value.\r\n    uint constant expScale = 10**18;\r\n\r\n    // See TODO on expScale\r\n    uint constant halfExpScale = expScale/2;\r\n\r\n    struct Exp {\r\n        uint mantissa;\r\n    }\r\n\r\n    uint constant mantissaOne = 10**18;\r\n    uint constant mantissaOneTenth = 10**17;\r\n\r\n    /**\r\n    * @dev Creates an exponential from numerator and denominator values.\r\n    *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\r\n    *            or if `denom` is zero.\r\n    */\r\n    function getExp(uint num, uint denom) pure internal returns (Error, Exp memory) {\r\n        (Error err0, uint scaledNumerator) = mul(num, expScale);\r\n        if (err0 != Error.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (Error err1, uint rational) = div(scaledNumerator, denom);\r\n        if (err1 != Error.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (Error.NO_ERROR, Exp({mantissa: rational}));\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two exponentials, returning a new exponential.\r\n    */\r\n    function addExp(Exp memory a, Exp memory b) pure internal returns (Error, Exp memory) {\r\n        (Error error, uint result) = add(a.mantissa, b.mantissa);\r\n\r\n        return (error, Exp({mantissa: result}));\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two exponentials, returning a new exponential.\r\n    */\r\n    function subExp(Exp memory a, Exp memory b) pure internal returns (Error, Exp memory) {\r\n        (Error error, uint result) = sub(a.mantissa, b.mantissa);\r\n\r\n        return (error, Exp({mantissa: result}));\r\n    }\r\n\r\n    /**\r\n    * @dev Multiply an Exp by a scalar, returning a new Exp.\r\n    */\r\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (Error, Exp memory) {\r\n        (Error err0, uint scaledMantissa) = mul(a.mantissa, scalar);\r\n        if (err0 != Error.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (Error.NO_ERROR, Exp({mantissa: scaledMantissa}));\r\n    }\r\n\r\n    /**\r\n    * @dev Divide an Exp by a scalar, returning a new Exp.\r\n    */\r\n    function divScalar(Exp memory a, uint scalar) pure internal returns (Error, Exp memory) {\r\n        (Error err0, uint descaledMantissa) = div(a.mantissa, scalar);\r\n        if (err0 != Error.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (Error.NO_ERROR, Exp({mantissa: descaledMantissa}));\r\n    }\r\n\r\n    /**\r\n    * @dev Divide a scalar by an Exp, returning a new Exp.\r\n    */\r\n    function divScalarByExp(uint scalar, Exp divisor) pure internal returns (Error, Exp memory) {\r\n        /*\r\n            We are doing this as:\r\n            getExp(mul(expScale, scalar), divisor.mantissa)\r\n\r\n            How it works:\r\n            Exp = a / b;\r\n            Scalar = s;\r\n            `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\r\n        */\r\n        (Error err0, uint numerator) = mul(expScale, scalar);\r\n        if (err0 != Error.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n        return getExp(numerator, divisor.mantissa);\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two exponentials, returning a new exponential.\r\n    */\r\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (Error, Exp memory) {\r\n\r\n        (Error err0, uint doubleScaledProduct) = mul(a.mantissa, b.mantissa);\r\n        if (err0 != Error.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        // We add half the scale before dividing so that we get rounding instead of truncation.\r\n        //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\r\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\r\n        (Error err1, uint doubleScaledProductWithHalfScale) = add(halfExpScale, doubleScaledProduct);\r\n        if (err1 != Error.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (Error err2, uint product) = div(doubleScaledProductWithHalfScale, expScale);\r\n        // The only error `div` can return is Error.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\r\n        assert(err2 == Error.NO_ERROR);\r\n\r\n        return (Error.NO_ERROR, Exp({mantissa: product}));\r\n    }\r\n\r\n    /**\r\n      * @dev Divides two exponentials, returning a new exponential.\r\n      *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\r\n      *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\r\n      */\r\n    function divExp(Exp memory a, Exp memory b) pure internal returns (Error, Exp memory) {\r\n        return getExp(a.mantissa, b.mantissa);\r\n    }\r\n\r\n    /**\r\n      * @dev Truncates the given exp to a whole number value.\r\n      *      For example, truncate(Exp{mantissa: 15 * (10**18)}) = 15\r\n      */\r\n    function truncate(Exp memory exp) pure internal returns (uint) {\r\n        // Note: We are not using careful math here as we're performing a division that cannot fail\r\n        return exp.mantissa / 10**18;\r\n    }\r\n\r\n    /**\r\n      * @dev Checks if first Exp is less than second Exp.\r\n      */\r\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa < right.mantissa; //TODO: Add some simple tests and this in another PR yo.\r\n    }\r\n\r\n    /**\r\n      * @dev Checks if left Exp <= right Exp.\r\n      */\r\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa <= right.mantissa;\r\n    }\r\n\r\n    /**\r\n      * @dev returns true if Exp is exactly zero\r\n      */\r\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\r\n        return value.mantissa == 0;\r\n    }\r\n}\r\n\r\ncontract StableCoinInterestRateModel is Exponential {\r\n\r\n    uint constant oneMinusSpreadBasisPoints = 8500;\r\n    uint constant blocksPerYear = 2102400;\r\n    uint constant mantissaTwoPointFivePercent = 25 * 10**15;\r\n    uint constant mantissaZeroPointFivePercent = 5 * 10**15;\r\n\r\n    enum IRError {\r\n        NO_ERROR,\r\n        FAILED_TO_ADD_CASH_PLUS_BORROWS,\r\n        FAILED_TO_GET_EXP,\r\n        FAILED_TO_MUL_PRODUCT_TIMES_BORROW_RATE\r\n    }\r\n\r\n    /*\r\n     * @dev Calculates the utilization rate (borrows / (cash + borrows)) as an Exp\r\n     */\r\n    function getUtilizationRate(uint cash, uint borrows) pure internal returns (IRError, Exp memory) {\r\n        if (borrows == 0) {\r\n            // Utilization rate is zero when there's no borrows\r\n            return (IRError.NO_ERROR, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (Error err0, uint cashPlusBorrows) = add(cash, borrows);\r\n        if (err0 != Error.NO_ERROR) {\r\n            return (IRError.FAILED_TO_ADD_CASH_PLUS_BORROWS, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (Error err1, Exp memory utilizationRate) = getExp(borrows, cashPlusBorrows);\r\n        if (err1 != Error.NO_ERROR) {\r\n            return (IRError.FAILED_TO_GET_EXP, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (IRError.NO_ERROR, utilizationRate);\r\n    }\r\n\r\n    /*\r\n     * @dev Calculates the utilization and borrow rates for use by get{Supply,Borrow}Rate functions\r\n     */\r\n    function getUtilizationAndAnnualBorrowRate(uint cash, uint borrows) pure internal returns (IRError, Exp memory, Exp memory) {\r\n        (IRError err0, Exp memory utilizationRate) = getUtilizationRate(cash, borrows);\r\n        if (err0 != IRError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}), Exp({mantissa: 0}));\r\n        }\r\n\r\n        // Borrow Rate is 2.5% + UtilizationRate * 20%\r\n        // 20% of utilizationRate, is `rate * 2 / 10`\r\n        (Error err1, Exp memory utilizationRateMuled) = mulScalar(utilizationRate, 2);\r\n        // `mulScalar` only overflows when the product is >= 2^256.\r\n        // utilizationRate is a real number on the interval [0,1], which means that\r\n        // utilizationRate.mantissa is in the interval [0e18,1e18], which means that 2 times\r\n        // that is in the interval [0e18,2e18]. That interval has no intersection with 2^256, and therefore\r\n        // this can never overflow. As such, we assert.\r\n        assert(err1 == Error.NO_ERROR);\r\n\r\n        (Error err2, Exp memory utilizationRateScaled) = divScalar(utilizationRateMuled, 10);\r\n        // 10 is a constant, and therefore cannot be zero, which is the only error case of divScalar.\r\n        assert(err2 == Error.NO_ERROR);\r\n\r\n        // Add the 2.5% for (2.5% + 20% * Ua)\r\n        (Error err3, Exp memory annualBorrowRate) = addExp(utilizationRateScaled, Exp({mantissa: mantissaTwoPointFivePercent}));\r\n        // `addExp` only fails when the addition of mantissas overflow.\r\n        // As per above, utilizationRateMuled is capped at 2e18,\r\n        // and utilizationRateScaled is capped at 2e17.\r\n        // and the rate constant 2.5% is capped at 0.25e17\r\n        // therefore, addition is capped at 2.25e17, which is less than 2^256.\r\n        assert(err3 == Error.NO_ERROR);\r\n\r\n        return (IRError.NO_ERROR, utilizationRate, annualBorrowRate);\r\n    }\r\n\r\n    /**\r\n      * @notice Gets the current supply interest rate based on the given asset, total cash and total borrows\r\n      * @dev The return value should be scaled by 1e18, thus a return value of\r\n      *      `(true, 1000000000000)` implies an interest rate of 0.000001 or 0.0001% *per block*.\r\n      * @param _asset The asset to get the interest rate of\r\n      * @param cash The total cash of the asset in the market\r\n      * @param borrows The total borrows of the asset in the market\r\n      * @return Success or failure and the supply interest rate per block scaled by 10e18\r\n      */\r\n    function getSupplyRate(address _asset, uint cash, uint borrows) public view returns (uint, uint) {\r\n        _asset; // pragma ignore unused argument\r\n\r\n        (IRError err0, Exp memory utilizationRate0, Exp memory annualBorrowRate) = getUtilizationAndAnnualBorrowRate(cash, borrows);\r\n        if (err0 != IRError.NO_ERROR) {\r\n            return (uint(err0), 0);\r\n        }\r\n\r\n        // We're going to multiply the utilization rate by the spread's numerator\r\n        (Error err1, Exp memory utilizationRate1) = mulScalar(utilizationRate0, oneMinusSpreadBasisPoints);\r\n        // mulScalar only overflows when product is greater than or equal to 2^256.\r\n        // utilization rate's mantissa is a number between [0e18,1e18]. That means that\r\n        // utilizationRate1 is a value between [0e18,8.5e21]. This is strictly less than 2^256.\r\n        assert(err1 == Error.NO_ERROR);\r\n\r\n        // Next multiply this product times the borrow rate\r\n        (Error err2, Exp memory supplyRate0) = mulExp(utilizationRate1, annualBorrowRate);\r\n        // If the product of the mantissas for mulExp are both less than 2^256,\r\n        // then this operation will never fail. TODO: Verify.\r\n        // We know that borrow rate is in the interval [0, 2.25e17] from above.\r\n        // We know that utilizationRate1 is in the interval [0, 9e21] from directly above.\r\n        // As such, the multiplication is in the interval of [0, 2.025e39]. This is strictly\r\n        // less than 2^256 (which is about 10e77).\r\n        assert(err2 == Error.NO_ERROR);\r\n\r\n        // And then divide down by the spread's denominator (basis points divisor)\r\n        // as well as by blocks per year.\r\n        (Error err3, Exp memory supplyRate1) = divScalar(supplyRate0, 10000 * blocksPerYear); // basis points * blocks per year\r\n        // divScalar only fails when divisor is zero. This is clearly not the case.\r\n        assert(err3 == Error.NO_ERROR);\r\n\r\n        (Error err4, Exp memory floorSupplyRate) = divScalar(Exp({mantissa: mantissaZeroPointFivePercent}), blocksPerYear);\r\n        // 0.5% APR / blocksPerYear. divScalar only fails when divisor is zero. This is clearly not the case.\r\n        assert(err4 == Error.NO_ERROR);\r\n\r\n        if (lessThanExp(supplyRate1, floorSupplyRate)) {\r\n          return (uint(IRError.NO_ERROR), floorSupplyRate.mantissa);\r\n        } else {\r\n          return (uint(IRError.NO_ERROR), supplyRate1.mantissa);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @notice Gets the current borrow interest rate based on the given asset, total cash and total borrows\r\n      * @dev The return value should be scaled by 1e18, thus a return value of\r\n      *      `(true, 1000000000000)` implies an interest rate of 0.000001 or 0.0001% *per block*.\r\n      * @param _asset The asset to get the interest rate of\r\n      * @param cash The total cash of the asset in the market\r\n      * @param borrows The total borrows of the asset in the market\r\n      * @return Success or failure and the borrow interest rate per block scaled by 10e18\r\n      */\r\n    function getBorrowRate(address _asset, uint cash, uint borrows) public view returns (uint, uint) {\r\n        _asset; // pragma ignore unused argument\r\n\r\n        (IRError err0, Exp memory _utilizationRate, Exp memory annualBorrowRate) = getUtilizationAndAnnualBorrowRate(cash, borrows);\r\n        if (err0 != IRError.NO_ERROR) {\r\n            return (uint(err0), 0);\r\n        }\r\n\r\n        // And then divide down by blocks per year.\r\n        (Error err1, Exp memory borrowRate) = divScalar(annualBorrowRate, blocksPerYear); // basis points * blocks per year\r\n        // divScalar only fails when divisor is zero. This is clearly not the case.\r\n        assert(err1 == Error.NO_ERROR);\r\n\r\n        _utilizationRate; // pragma ignore unused variable\r\n\r\n        // Note: mantissa is the rate scaled 1e18, which matches the expected result\r\n        return (uint(IRError.NO_ERROR), borrowRate.mantissa);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"cash\",\"type\":\"uint256\"},{\"name\":\"borrows\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"cash\",\"type\":\"uint256\"},{\"name\":\"borrows\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"}]","ContractName":"StableCoinInterestRateModel","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e2b0110f55e29e34dc6acdd848498d0a2d7d253d1cb966e540008c27d2281fa6"}]}