{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n * ETH SMART GAME DISTRIBUTION PROJECT\r\n * Web:                     https://efirica.io\r\n * Telegram_channel:        https://t.me/efirica_io\r\n * EN Telegram_chat:        https://t.me/efirica_chat\r\n * RU Telegram_chat:        https://t.me/efirica_chat_ru\r\n * Telegram Support:        @efirica\r\n * \r\n * - GAIN 0.5-5% per 24 HOURS lifetime income without invitations\r\n * - Life-long payments\r\n * - New technologies on blockchain\r\n * - Unique code (without admin, automatic % health for lifelong game, not fork !!! )\r\n * - Minimal contribution 0.01 eth\r\n * - Currency and payment - ETH\r\n * - Contribution allocation schemes:\r\n *    -- 99% payments (In some cases, the included 10% marketing to players when specifying a referral link)\r\n *    -- 1% technical support\r\n * \r\n * --- About the Project\r\n * EFIRICA - smart game contract, new technologies on blockchain ETH, have opened code allowing\r\n *           to work autonomously without admin for as long as possible with honest smart code.\r\n */\r\n \r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Efirica.sol\r\n\r\ncontract Efirica {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public ONE_HUNDRED_PERCENTS = 10000;\r\n    uint256 constant public LOWEST_DIVIDEND_PERCENTS = 50; // 0.50%\r\n    uint256 constant public HIGHEST_DIVIDEND_PERCENTS = 500; // 5.00%\r\n    uint256[] /*constant*/ public referralPercents = [500, 300, 200]; // 5%, 3%, 2%\r\n\r\n    address public admin = msg.sender;\r\n    uint256 public totalDeposits = 0;\r\n    uint256 public currentPercents = 500; // 5%\r\n    mapping(address => uint256) public deposits;\r\n    mapping(address => uint256) public joinedAt;\r\n    mapping(address => uint256) public updatedAt;\r\n    mapping(address => address) public referrers;\r\n\r\n    event InvestorAdded(address investor);\r\n    event ReferrerAdded(address investor, address referrer);\r\n    event DepositAdded(address investor, uint256 deposit, uint256 amount);\r\n    event DividendPayed(address investor, uint256 dividend);\r\n    event ReferrerPayed(address investor, address referrer, uint256 amount);\r\n    event AdminFeePayed(address investor, uint256 amount);\r\n    event TotalDepositsChanged(uint256 totalDeposits);\r\n    event BalanceChanged(uint256 balance);\r\n    \r\n    function() public payable {\r\n        // Dividends\r\n        uint256 dividends = dividendsForUser(msg.sender);\r\n        if (dividends > 0) {\r\n            if (dividends > address(this).balance) {\r\n                dividends = address(this).balance;\r\n            }\r\n            msg.sender.transfer(dividends);\r\n            updatedAt[msg.sender] = now; // solium-disable-line security/no-block-members\r\n            currentPercents = generalPercents();\r\n            emit DividendPayed(msg.sender, dividends);\r\n        }\r\n\r\n        // Deposit\r\n        if (msg.value > 0) {\r\n            if (deposits[msg.sender] == 0) {\r\n                joinedAt[msg.sender] = now; // solium-disable-line security/no-block-members\r\n                emit InvestorAdded(msg.sender);\r\n            }\r\n            updatedAt[msg.sender] = now; // solium-disable-line security/no-block-members\r\n            deposits[msg.sender] = deposits[msg.sender].add(msg.value);\r\n            emit DepositAdded(msg.sender, deposits[msg.sender], msg.value);\r\n\r\n            totalDeposits = totalDeposits.add(msg.value);\r\n            emit TotalDepositsChanged(totalDeposits);\r\n\r\n            // Add referral if possible\r\n            if (referrers[msg.sender] == address(0) && msg.data.length == 20) {\r\n                address referrer = bytesToAddress(msg.data);\r\n                if (referrer != address(0) && deposits[referrer] > 0 && now >= joinedAt[referrer].add(1 days)) { // solium-disable-line security/no-block-members\r\n                    referrers[msg.sender] = referrer;\r\n                    emit ReferrerAdded(msg.sender, referrer);\r\n                }\r\n            }\r\n\r\n            // Referrers fees\r\n            referrer = referrers[msg.sender];\r\n            for (uint i = 0; referrer != address(0) && i < referralPercents.length; i++) {\r\n                uint256 refAmount = msg.value.mul(referralPercents[i]).div(ONE_HUNDRED_PERCENTS);\r\n                referrer.send(refAmount); // solium-disable-line security/no-send\r\n                emit ReferrerPayed(msg.sender, referrer, refAmount);\r\n                referrer = referrers[referrer];\r\n            }\r\n\r\n            // Admin fee 1%\r\n            uint256 adminFee = msg.value.div(100);\r\n            admin.send(adminFee); // solium-disable-line security/no-send\r\n            emit AdminFeePayed(msg.sender, adminFee);\r\n        }\r\n\r\n        emit BalanceChanged(address(this).balance);\r\n    }\r\n\r\n    function dividendsForUser(address user) public view returns(uint256) {\r\n        return dividendsForPercents(user, percentsForUser(user));\r\n    }\r\n\r\n    function dividendsForPercents(address user, uint256 percents) public view returns(uint256) {\r\n        return deposits[user]\r\n            .mul(percents).div(ONE_HUNDRED_PERCENTS)\r\n            .mul(now.sub(updatedAt[user])).div(1 days); // solium-disable-line security/no-block-members\r\n    }\r\n\r\n    function percentsForUser(address user) public view returns(uint256) {\r\n        uint256 percents = generalPercents();\r\n\r\n        // Referrals should have increased percents (+10%)\r\n        if (referrers[user] != address(0)) {\r\n            percents = percents.mul(110).div(100);\r\n        }\r\n\r\n        return percents;\r\n    }\r\n\r\n    function generalPercents() public view returns(uint256) {\r\n        // From 5% to 0.5% with 0.1% step (45 steps) while health drops from 100% to 0% \r\n        uint256 percents = LOWEST_DIVIDEND_PERCENTS.add(\r\n            HIGHEST_DIVIDEND_PERCENTS.sub(LOWEST_DIVIDEND_PERCENTS)\r\n                .mul(healthPercents().mul(45).div(ONE_HUNDRED_PERCENTS)).div(45)\r\n        );\r\n\r\n        // Percents should never increase\r\n        if (percents > currentPercents) {\r\n            percents = currentPercents;\r\n        }\r\n\r\n        return percents;\r\n    }\r\n\r\n    function healthPercents() public view returns(uint256) {\r\n        if (totalDeposits == 0) {\r\n            return ONE_HUNDRED_PERCENTS;\r\n        }\r\n\r\n        return address(this).balance\r\n            .mul(ONE_HUNDRED_PERCENTS).div(totalDeposits);\r\n    }\r\n\r\n    function bytesToAddress(bytes data) internal pure returns(address addr) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            addr := mload(add(data, 0x14)) \r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"generalPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"percents\",\"type\":\"uint256\"}],\"name\":\"dividendsForPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"healthPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HIGHEST_DIVIDEND_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"dividendsForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"joinedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"updatedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"percentsForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOWEST_DIVIDEND_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"DividendPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferrerPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminFeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalDeposits\",\"type\":\"uint256\"}],\"name\":\"TotalDepositsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceChanged\",\"type\":\"event\"}]","ContractName":"Efirica","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://56992385156ac68898b196712fb3a683c6f6798f7615b92e9a2212ee4592d498"}]}