{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n     /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract RotoToken is StandardToken {\r\n\r\n    string public constant name = \"Roto\"; // token name\r\n    string public constant symbol = \"ROTO\"; // token symbol\r\n    uint8 public constant decimals = 18; // token decimal\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 21000000 * (10 ** uint256(decimals));\r\n    address owner;\r\n    address roto = this;\r\n    address manager;\r\n\r\n    // keeps track of the ROTO currently staked in a tournament\r\n    // the format is user address -> the tournament they staked in -> how much they staked\r\n    mapping (address => mapping (bytes32 => uint256)) stakes;\r\n    uint256 owner_transfer = 2000000 * (10** uint256(decimals));\r\n  /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.\r\n   */\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender==owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager {\r\n      require(msg.sender==manager);\r\n      _;\r\n    }\r\n\r\n    event ManagerChanged(address _contract);\r\n    event RotoStaked(address _user, uint256 stake);\r\n    event RotoReleased(address _user, uint256 stake);\r\n    event RotoDestroyed(address _user, uint256 stake);\r\n    event RotoRewarded(address _contract, address _user, uint256 reward);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[roto] = INITIAL_SUPPLY;\r\n        emit Transfer(0x0, roto, INITIAL_SUPPLY);\r\n    }\r\n\r\n    \r\n    /**\r\n     *  @dev A function that can only be called by RotoHive, transfers Roto Tokens out of the contract.\r\n        @param _to address, the address that the ROTO will be transferred to\r\n        @param _value ROTO, amount to transfer\r\n        @return - whether the Roto was transferred succesfully\r\n     */\r\n    function transferFromContract(address _to, uint256 _value) public onlyOwner returns(bool) {\r\n        require(_to!=address(0));\r\n        require(_value<=balances[roto]);\r\n        require(owner_transfer > 0);\r\n\r\n        owner_transfer = owner_transfer.sub(_value);\r\n        \r\n        balances[roto] = balances[roto].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(roto, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev updates the helper contract(which will manage the tournament) with the new version\r\n        @param _contract address, the address of the manager contract\r\n        @return - whether the contract was successfully set\r\n    */\r\n    function setManagerContract(address _contract) external onlyOwner returns(bool) {\r\n      //checks that the address sent isn't the 0 address, the owner or the token contract\r\n      require(_contract!=address(0)&&_contract!=roto);\r\n\r\n      // requires that the address sent be a contract\r\n      uint size;\r\n      assembly { size := extcodesize(_contract) }\r\n      require(size > 0);\r\n\r\n      manager = _contract;\r\n\r\n      emit ManagerChanged(_contract);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n        @dev - called by the manager contract to add back to the user their roto in the event that their submission was successful\r\n        @param  _user address, the address of the user who submitted the rankings\r\n        @param _tournamentID identifier\r\n        @return boolean value, whether the roto were successfully released\r\n    */\r\n    function releaseRoto(address _user, bytes32 _tournamentID) external onlyManager returns(bool) {\r\n        require(_user!=address(0));\r\n        uint256 value = stakes[_user][_tournamentID];\r\n        require(value > 0);\r\n\r\n        stakes[_user][_tournamentID] = 0;\r\n        balances[_user] = balances[_user].add(value);\r\n\r\n        emit RotoReleased(_user, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev - function called by manager contract to process the accounting aspects of the destroyRoto function\r\n        @param  _user address, the address of the user who's stake will be destroyed\r\n        @param _tournamentID identifier\r\n        @return - a boolean value that reflects whether the roto were successfully destroyed\r\n    */\r\n    function destroyRoto(address _user, bytes32 _tournamentID) external onlyManager returns(bool) {\r\n        require(_user!=address(0));\r\n        uint256 value = stakes[_user][_tournamentID];\r\n        require(value > 0);\r\n\r\n        stakes[_user][_tournamentID] = 0;\r\n        balances[roto] = balances[roto].add(value);\r\n\r\n        emit RotoDestroyed(_user, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev - called by the manager contract, runs the accounting portions of the staking process\r\n        @param  _user address, the address of the user staking ROTO\r\n        @param _tournamentID identifier\r\n        @param _value ROTO, the amount the user is staking\r\n        @return - whether the staking process went successfully\r\n    */\r\n    function stakeRoto(address _user, bytes32 _tournamentID, uint256 _value) external onlyManager returns(bool) {\r\n        require(_user!=address(0));\r\n        require(_value<=balances[_user]);\r\n        require(stakes[_user][_tournamentID] == 0);\r\n\r\n        balances[_user] = balances[_user].sub(_value);\r\n        stakes[_user][_tournamentID] = _value;\r\n\r\n        emit RotoStaked(_user, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n      @dev - called by the manager contract, used to reward non-staked submissions by users\r\n      @param _user address, the address that will receive the rewarded ROTO\r\n      @param _value ROTO, the amount of ROTO that they'll be rewarded\r\n     */\r\n    function rewardRoto(address _user, uint256 _value) external onlyManager returns(bool successful) {\r\n      require(_user!=address(0));\r\n      require(_value<=balances[roto]);\r\n\r\n      balances[_user] = balances[_user].add(_value);\r\n      balances[roto] = balances[roto].sub(_value);\r\n\r\n      emit Transfer(roto, _user, _value);\r\n      return true;\r\n    }\r\n    /**\r\n        @dev - to be called by the manager contract to check if a given user has enough roto to\r\n            stake the given amount\r\n        @param  _user address, the address of the user who's attempting to stake ROTO\r\n        @param _value ROTO, the amount they are attempting to stake\r\n        @return - whether the user has enough balance to stake the received amount\r\n    */\r\n    function canStake(address _user, uint256 _value) public view onlyManager returns(bool) {\r\n      require(_user!=address(0));\r\n      require(_value<=balances[_user]);\r\n\r\n      return true;\r\n    }\r\n\r\n    /**\r\n      @dev Getter function for manager\r\n     */\r\n    function getManager() public view returns (address _manager) {\r\n      return manager;\r\n    }\r\n\r\n    /**\r\n      @dev - sets the owner address to a new one\r\n      @param  _newOwner address\r\n      @return - true if the address was changed successful\r\n     */\r\n    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\r\n      owner = _newOwner;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"canStake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tournamentID\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"stakeRoto\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tournamentID\",\"type\":\"bytes32\"}],\"name\":\"destroyRoto\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setManagerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"rewardRoto\",\"outputs\":[{\"name\":\"successful\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tournamentID\",\"type\":\"bytes32\"}],\"name\":\"releaseRoto\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"RotoStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"RotoReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"RotoDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RotoRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"RotoToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://de79243863c3a3c1d93f8c3b1de03718f1eab83a78a361ee2aac25fc6c6fe04f"}]}