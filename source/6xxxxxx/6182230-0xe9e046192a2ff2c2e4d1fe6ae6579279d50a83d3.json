{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface ERC20 {\r\n\t\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\t\r\n\tfunction name() external view returns (string);\r\n\tfunction symbol() external view returns (string);\r\n\tfunction decimals() external view returns (uint8);\r\n\t\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address _owner) external view returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) external payable returns (bool success);\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) external payable returns (bool success);\r\n\tfunction approve(address _spender, uint256 _value) external payable returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n}\r\n\r\n// 숫자 계산 시 오버플로우 문제를 방지하기 위한 라이브러리\r\nlibrary SafeMath {\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) pure internal returns (uint256 c) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) pure internal returns (uint256 c) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) pure internal returns (uint256 c) {\r\n\t\treturn a / b;\r\n\t}\r\n}\r\n\r\n// ERC20 토큰을 이더로 거래합니다.\r\ncontract ERC20Sale {\r\n\tusing SafeMath for uint256;\r\n\t\r\n\t// 이벤트들\r\n\tevent Bid(uint256 bidId);\r\n\tevent ChangeBidId(uint256 indexed originBidId, uint256 newBidId);\r\n\tevent RemoveBid(uint256 indexed bidId);\r\n\tevent CancelBid(uint256 indexed bidId);\r\n\tevent Sell(uint256 indexed bidId, uint256 amount);\r\n\t\r\n\tevent Offer(uint256 offerId);\r\n\tevent ChangeOfferId(uint256 indexed originOfferId, uint256 newOfferId);\r\n\tevent RemoveOffer(uint256 indexed offerId);\r\n\tevent CancelOffer(uint256 indexed offerId);\r\n\tevent Buy(uint256 indexed offerId, uint256 amount);\r\n\t\r\n\t// 구매 정보\r\n\tstruct BidInfo {\r\n\t\taddress bidder;\r\n\t\taddress token;\r\n\t\tuint256 amount;\r\n\t\tuint256 price;\r\n\t}\r\n\t\r\n\t// 판매 정보\r\n\tstruct OfferInfo {\r\n\t\taddress offeror;\r\n\t\taddress token;\r\n\t\tuint256 amount;\r\n\t\tuint256 price;\r\n\t}\r\n\t\r\n\t// 정보 저장소\r\n\tBidInfo[] public bidInfos;\r\n\tOfferInfo[] public offerInfos;\r\n\t\r\n\tfunction getBidCount() view public returns (uint256) {\r\n\t\treturn bidInfos.length;\r\n\t}\r\n\t\r\n\tfunction getOfferCount() view public returns (uint256) {\r\n\t\treturn offerInfos.length;\r\n\t}\r\n\t\r\n\t// 토큰 구매 정보를 거래소에 등록합니다.\r\n\tfunction bid(address token, uint256 amount) payable public {\r\n\t\t\r\n\t\t// 구매 정보 생성\r\n\t\tuint256 bidId = bidInfos.push(BidInfo({\r\n\t\t\tbidder : msg.sender,\r\n\t\t\ttoken : token,\r\n\t\t\tamount : amount,\r\n\t\t\tprice : msg.value\r\n\t\t})).sub(1);\r\n\t\t\r\n\t\temit Bid(bidId);\r\n\t}\r\n\t\r\n\t// 토큰 구매 정보를 삭제합니다.\r\n\tfunction removeBid(uint256 bidId) internal {\r\n\t\t\r\n\t\tfor (uint256 i = bidId; i < bidInfos.length - 1; i += 1) {\r\n\t\t\tbidInfos[i] = bidInfos[i + 1];\r\n\t\t\t\r\n\t\t\temit ChangeBidId(i + 1, i);\r\n\t\t}\r\n\t\t\r\n\t\tdelete bidInfos[bidInfos.length - 1];\r\n\t\tbidInfos.length -= 1;\r\n\t\t\r\n\t\temit RemoveBid(bidId);\r\n\t}\r\n\t\r\n\t// 토큰 구매를 취소합니다.\r\n\tfunction cancelBid(uint256 bidId) public {\r\n\t\t\r\n\t\tBidInfo memory bidInfo = bidInfos[bidId];\r\n\t\t\r\n\t\t// 구매자인지 확인합니다.\r\n\t\trequire(bidInfo.bidder == msg.sender);\r\n\t\t\r\n\t\t// 구매 정보 삭제\r\n\t\tremoveBid(bidId);\r\n\t\t\r\n\t\t// 이더를 환불합니다.\r\n\t\tbidInfo.bidder.transfer(bidInfo.price);\r\n\t\t\r\n\t\temit CancelBid(bidId);\r\n\t}\r\n\t\r\n\t// 구매 등록된 토큰을 판매합니다.\r\n\tfunction sell(uint256 bidId, uint256 amount) public {\r\n\t\t\r\n\t\tBidInfo storage bidInfo = bidInfos[bidId];\r\n\t\tERC20 erc20 = ERC20(bidInfo.token);\r\n\t\t\r\n\t\t// 판매자가 가진 토큰의 양이 판매할 양보다 많아야 합니다.\r\n\t\trequire(erc20.balanceOf(msg.sender) >= amount);\r\n\t\t\r\n\t\t// 거래소에 인출을 허락한 토큰의 양이 판매할 양보다 많아야 합니다.\r\n\t\trequire(erc20.allowance(msg.sender, this) >= amount);\r\n\t\t\r\n\t\t// 구매하는 토큰의 양이 판매할 양보다 많아야 합니다.\r\n\t\trequire(bidInfo.amount >= amount);\r\n\t\t\r\n\t\tuint256 realPrice = amount.mul(bidInfo.price).div(bidInfo.amount);\r\n\t\t\r\n\t\t// 가격 계산에 문제가 없어야 합니다.\r\n\t\trequire(realPrice.mul(bidInfo.amount) == amount.mul(bidInfo.price));\r\n\t\t\r\n\t\t// 토큰 구매자에게 토큰을 지급합니다.\r\n\t\terc20.transferFrom(msg.sender, bidInfo.bidder, amount);\r\n\t\t\r\n\t\t// 가격을 내립니다.\r\n\t\tbidInfo.price = bidInfo.price.sub(realPrice);\r\n\t\t\r\n\t\t// 구매할 토큰의 양을 줄입니다.\r\n\t\tbidInfo.amount = bidInfo.amount.sub(amount);\r\n\t\t\r\n\t\t// 토큰을 모두 구매하였으면 구매 정보 삭제\r\n\t\tif (bidInfo.amount == 0) {\r\n\t\t\tremoveBid(bidId);\r\n\t\t}\r\n\t\t\r\n\t\t// 판매자에게 이더를 지급합니다.\r\n\t\tmsg.sender.transfer(realPrice);\r\n\t\t\r\n\t\temit Sell(bidId, amount);\r\n\t}\r\n\t\r\n\t// 주어진 토큰에 해당하는 구매 정보 개수를 반환합니다.\r\n\tfunction getBidCountByToken(address token) view public returns (uint256) {\r\n\t\t\r\n\t\tuint256 bidCount = 0;\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < bidInfos.length; i += 1) {\r\n\t\t\tif (bidInfos[i].token == token) {\r\n\t\t\t\tbidCount += 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn bidCount;\r\n\t}\r\n\t\r\n\t// 주어진 토큰에 해당하는 구매 정보 ID 목록을 반환합니다.\r\n\tfunction getBidIdsByToken(address token) view public returns (uint256[]) {\r\n\t\t\r\n\t\tuint256[] memory bidIds = new uint256[](getBidCountByToken(token));\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < bidInfos.length; i += 1) {\r\n\t\t\tif (bidInfos[i].token == token) {\r\n\t\t\t\tbidIds[bidIds.length - 1] = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn bidIds;\r\n\t}\r\n\r\n\t// 토큰 판매 정보를 거래소에 등록합니다.\r\n\tfunction offer(address token, uint256 amount, uint256 price) public {\r\n\t\tERC20 erc20 = ERC20(token);\r\n\t\t\r\n\t\t// 판매자가 가진 토큰의 양이 판매할 양보다 많아야 합니다.\r\n\t\trequire(erc20.balanceOf(msg.sender) >= amount);\r\n\t\t\r\n\t\t// 거래소에 인출을 허락한 토큰의 양이 판매할 양보다 많아야 합니다.\r\n\t\trequire(erc20.allowance(msg.sender, this) >= amount);\r\n\t\t\r\n\t\t// 판매 정보 생성\r\n\t\tuint256 offerId = offerInfos.push(OfferInfo({\r\n\t\t\tofferor : msg.sender,\r\n\t\t\ttoken : token,\r\n\t\t\tamount : amount,\r\n\t\t\tprice : price\r\n\t\t})).sub(1);\r\n\t\t\r\n\t\temit Offer(offerId);\r\n\t}\r\n\t\r\n\t// 토큰 판매 정보를 삭제합니다.\r\n\tfunction removeOffer(uint256 offerId) internal {\r\n\t\t\r\n\t\tfor (uint256 i = offerId; i < offerInfos.length - 1; i += 1) {\r\n\t\t\tofferInfos[i] = offerInfos[i + 1];\r\n\t\t\t\r\n\t\t\temit ChangeOfferId(i + 1, i);\r\n\t\t}\r\n\t\t\r\n\t\tdelete offerInfos[offerInfos.length - 1];\r\n\t\tofferInfos.length -= 1;\r\n\t\t\r\n\t\temit RemoveOffer(offerId);\r\n\t}\r\n\t\r\n\t// 토큰 판매를 취소합니다.\r\n\tfunction cancelOffer(uint256 offerId) public {\r\n\t\t\r\n\t\t// 판매자인지 확인합니다.\r\n\t\trequire(offerInfos[offerId].offeror == msg.sender);\r\n\t\t\r\n\t\t// 판매 정보 삭제\r\n\t\tremoveOffer(offerId);\r\n\t\t\r\n\t\temit CancelOffer(offerId);\r\n\t}\r\n\t\r\n\t// 판매 등록된 토큰을 구매합니다.\r\n\tfunction buy(uint256 offerId, uint256 amount) payable public {\r\n\t\t\r\n\t\tOfferInfo storage offerInfo = offerInfos[offerId];\r\n\t\tERC20 erc20 = ERC20(offerInfo.token);\r\n\t\t\r\n\t\t// 판매자가 가진 토큰의 양이 판매할 양보다 많아야 합니다.\r\n\t\trequire(erc20.balanceOf(offerInfo.offeror) >= amount);\r\n\t\t\r\n\t\t// 거래소에 인출을 허락한 토큰의 양이 판매할 양보다 많아야 합니다.\r\n\t\trequire(erc20.allowance(offerInfo.offeror, this) >= amount);\r\n\t\t\r\n\t\t// 판매하는 토큰의 양이 구매할 양보다 많아야 합니다.\r\n\t\trequire(offerInfo.amount >= amount);\r\n\t\t\r\n\t\t// 토큰 가격이 제시한 가격과 동일해야합니다.\r\n\t\trequire(offerInfo.price.mul(amount) == msg.value.mul(offerInfo.amount));\r\n\t\t\r\n\t\t// 토큰 구매자에게 토큰을 지급합니다.\r\n\t\terc20.transferFrom(offerInfo.offeror, msg.sender, amount);\r\n\t\t\r\n\t\t// 가격을 내립니다.\r\n\t\tofferInfo.price = offerInfo.price.sub(msg.value);\r\n\t\t\r\n\t\t// 판매 토큰의 양을 줄입니다.\r\n\t\tofferInfo.amount = offerInfo.amount.sub(amount);\r\n\t\t\r\n\t\t// 토큰이 모두 팔렸으면 판매 정보 삭제\r\n\t\tif (offerInfo.amount == 0) {\r\n\t\t\tremoveOffer(offerId);\r\n\t\t}\r\n\t\t\r\n\t\t// 판매자에게 이더를 지급합니다.\r\n\t\tofferInfo.offeror.transfer(msg.value);\r\n\t\t\r\n\t\temit Buy(offerId, amount);\r\n\t}\r\n\t\r\n\t// 주어진 토큰에 해당하는 판매 정보 개수를 반환합니다.\r\n\tfunction getOfferCountByToken(address token) view public returns (uint256) {\r\n\t\t\r\n\t\tuint256 offerCount = 0;\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < offerInfos.length; i += 1) {\r\n\t\t\tif (offerInfos[i].token == token) {\r\n\t\t\t\tofferCount += 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn offerCount;\r\n\t}\r\n\t\r\n\t// 주어진 토큰에 해당하는 판매 정보 ID 목록을 반환합니다.\r\n\tfunction getOfferIdsByToken(address token) view public returns (uint256[]) {\r\n\t\t\r\n\t\tuint256[] memory offerIds = new uint256[](getOfferCountByToken(token));\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < offerInfos.length; i += 1) {\r\n\t\t\tif (offerInfos[i].token == token) {\r\n\t\t\t\tofferIds[offerIds.length - 1] = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn offerIds;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getOfferCountByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getOfferIdsByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBidCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBidCountByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerInfos\",\"outputs\":[{\"name\":\"offeror\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOfferCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offerId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bidId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidInfos\",\"outputs\":[{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBidIdsByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"originBidId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBidId\",\"type\":\"uint256\"}],\"name\":\"ChangeBidId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"RemoveBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"CancelBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"Offer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"originOfferId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newOfferId\",\"type\":\"uint256\"}],\"name\":\"ChangeOfferId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"RemoveOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"CancelOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"}]","ContractName":"ERC20Sale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://776ca42d57c7a1240dd64a5b0a4b29f247115581ef923e49ca66ece41b0ee70b"}]}