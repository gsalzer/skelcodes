{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/***********************************************************\r\n * Easy Investment UP Contract\r\n *  - GAIN 4.5% PER 24 HOURS (every 5900 blocks) 60 days  \r\n *  - GAIN 5% PER 24 HOURS (every 5900 blocks) 40 days  \r\n *  - GAIN 5.3% PER 24 HOURS (every 5900 blocks) 30 days  \r\n *  - GAIN 6.5% PER 24 HOURS (every 5900 blocks) 20 days     \r\n *  - GAIN 9.3% PER 24 HOURS (every 5900 blocks) 12 days    \r\n *  \r\n  * How to use:\r\n *  1. Send any amount of ether to make an investment (The Data input 1~5 investment category, the default is 1.)\r\n *  2. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're spending too much on GAS)\r\n *\r\n * RECOMMENDED GAS LIMIT: 500000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n * \r\n * \r\n *  https://www.easyinvestup.com\r\n *  https://t.me/easyinvestup\r\n ***********************************************************/\r\n\r\ncontract EasyInvestUP {\r\n    using SafeMath              for *;\r\n\r\n    address public promoAddr_ = address(0xfCFbaFfD975B107B2Bcd58BF71DC78fBeBB6215D);\r\n\r\n    uint256 ruleSum_ = 5;\r\n\r\n    uint256 public G_NowUserId = 1000; //first user\r\n    uint256 public G_AllEth = 0;\r\n    uint256 G_DayBlocks = 5900;\r\n    \r\n    mapping (address => uint256) public pIDxAddr_;  \r\n    mapping (uint256 => EUDatasets.Player) public player_; \r\n    mapping (uint256 => EUDatasets.Plan) private plan_;   \r\n\t\r\n\tfunction GetIdByAddr(address addr) public \r\n\t    view returns(uint256)\r\n\t{\r\n\t    return pIDxAddr_[addr];\r\n\t}\r\n\t\r\n\r\n\tfunction GetPlayerByUid(uint256 uid) public \r\n\t    view returns(uint256)\r\n\t{\r\n\t    EUDatasets.Player storage player = player_[uid];\r\n\r\n\t    return\r\n\t    (\r\n\t        player.planCount\r\n\t    );\r\n\t}\r\n\t\r\n    function GetPlanByUid(uint256 uid) public \r\n\t    view returns(uint256[],uint256[],uint256[],uint256[],uint256[],bool[])\r\n\t{\r\n\t    uint256[] memory planIds = new  uint256[] (player_[uid].planCount);\r\n\t    uint256[] memory startBlocks = new  uint256[] (player_[uid].planCount);\r\n\t    uint256[] memory investeds = new  uint256[] (player_[uid].planCount);\r\n\t    uint256[] memory atBlocks = new  uint256[] (player_[uid].planCount);\r\n\t    uint256[] memory payEths = new  uint256[] (player_[uid].planCount);\r\n\t    bool[] memory isCloses = new  bool[] (player_[uid].planCount);\r\n\t    \r\n        for(uint i = 0; i < player_[uid].planCount; i++) {\r\n\t        planIds[i] = player_[uid].plans[i].planId;\r\n\t        startBlocks[i] = player_[uid].plans[i].startBlock;\r\n\t        investeds[i] = player_[uid].plans[i].invested;\r\n\t        atBlocks[i] = player_[uid].plans[i].atBlock;\r\n\t        payEths[i] = player_[uid].plans[i].payEth;\r\n\t        isCloses[i] = player_[uid].plans[i].isClose;\r\n\t    }\r\n\t    \r\n\t    return\r\n\t    (\r\n\t        planIds,\r\n\t        startBlocks,\r\n\t        investeds,\r\n\t        atBlocks,\r\n\t        payEths,\r\n\t        isCloses\r\n\t    );\r\n\t}\r\n\t\r\nfunction GetPlanTimeByUid(uint256 uid) public \r\n\t    view returns(uint256[])\r\n\t{\r\n\t    uint256[] memory startTimes = new  uint256[] (player_[uid].planCount);\r\n\r\n        for(uint i = 0; i < player_[uid].planCount; i++) {\r\n\t        startTimes[i] = player_[uid].plans[i].startTime;\r\n\t    }\r\n\t    \r\n\t    return\r\n\t    (\r\n\t        startTimes\r\n\t    );\r\n\t}\t\r\n\r\n    constructor() public {\r\n        plan_[1] = EUDatasets.Plan(450,60);\r\n        plan_[2] = EUDatasets.Plan(500,40);\r\n        plan_[3] = EUDatasets.Plan(530,30);\r\n        plan_[4] = EUDatasets.Plan(650,20);\r\n        plan_[5] = EUDatasets.Plan(930,12);\r\n\r\n    }\r\n\t\r\n\tfunction register_(address addr) private{\r\n        G_NowUserId = G_NowUserId.add(1);\r\n        \r\n        address _addr = addr;\r\n        \r\n        pIDxAddr_[_addr] = G_NowUserId;\r\n\r\n        player_[G_NowUserId].addr = _addr;\r\n        player_[G_NowUserId].planCount = 0;\r\n        \r\n\t}\r\n\t\r\n    \r\n    // this function called every time anyone sends a transaction to this contract\r\n    function () external payable {\r\n        if (msg.value == 0) {\r\n            withdraw();\r\n        } else {\r\n            invest();\r\n        }\r\n    } \t\r\n    \r\n    function invest() private {\r\n\t    uint256 _planId = bytesToUint(msg.data);\r\n\t    \r\n\t    if (_planId<1 || _planId > ruleSum_) {\r\n\t        _planId = 1;\r\n\t    }\r\n        \r\n\t\t//get uid\r\n\t\tuint256 uid = pIDxAddr_[msg.sender];\r\n\t\t\r\n\t\t//first\r\n\t\tif (uid == 0) {\r\n\t\t    register_(msg.sender);\r\n\t\t\tuid = G_NowUserId;\r\n\t\t}\r\n\t\t\r\n        // record block number and invested amount (msg.value) of this transaction\r\n        uint256 planCount = player_[uid].planCount;\r\n        player_[uid].plans[planCount].planId = _planId;\r\n        player_[uid].plans[planCount].startTime = now;\r\n        player_[uid].plans[planCount].startBlock = block.number;\r\n        player_[uid].plans[planCount].atBlock = block.number;\r\n        player_[uid].plans[planCount].invested = msg.value;\r\n        player_[uid].plans[planCount].payEth = 0;\r\n        player_[uid].plans[planCount].isClose = false;\r\n        \r\n        player_[uid].planCount = player_[uid].planCount.add(1);\r\n\r\n        G_AllEth = G_AllEth.add(msg.value);\r\n        \r\n        if (msg.value > 1000000000) {\r\n\r\n            uint256 promoFee = (msg.value.mul(5)).div(100);\r\n            promoAddr_.transfer(promoFee);\r\n            \r\n        } \r\n        \r\n    }\r\n   \r\n\t\r\n\tfunction withdraw() private {\r\n\t    require(msg.value == 0, \"withdraw fee is 0 ether, please set the exact amount\");\r\n\t    \r\n\t    uint256 uid = pIDxAddr_[msg.sender];\r\n\t    require(uid != 0, \"no invest\");\r\n\r\n        for(uint i = 0; i < player_[uid].planCount; i++) {\r\n\t        if (player_[uid].plans[i].isClose) {\r\n\t            continue;\r\n\t        }\r\n\r\n            EUDatasets.Plan plan = plan_[player_[uid].plans[i].planId];\r\n            \r\n            uint256 blockNumber = block.number;\r\n            bool bClose = false;\r\n            if (plan.dayRange > 0) {\r\n                \r\n                uint256 endBlockNumber = player_[uid].plans[i].startBlock.add(plan.dayRange*G_DayBlocks);\r\n                if (blockNumber > endBlockNumber){\r\n                    blockNumber = endBlockNumber;\r\n                    bClose = true;\r\n                }\r\n            }\r\n            \r\n            uint256 amount = player_[uid].plans[i].invested * plan.interest / 10000 * (blockNumber - player_[uid].plans[i].atBlock) / G_DayBlocks;\r\n\r\n            // send calculated amount of ether directly to sender (aka YOU)\r\n            address sender = msg.sender;\r\n            sender.transfer(amount);\r\n\r\n            // record block number and invested amount (msg.value) of this transaction\r\n            player_[uid].plans[i].atBlock = block.number;\r\n            player_[uid].plans[i].isClose = bClose;\r\n            player_[uid].plans[i].payEth += amount;\r\n        }\r\n\t}\r\n\t\r\n    function bytesToUint(bytes b) private returns (uint256){\r\n        uint256 number;\r\n        for(uint i=0;i<b.length;i++){\r\n            number = number + uint(b[i])*(2**(8*(b.length-(i+1))));\r\n        }\r\n        return number;\r\n    }\t\r\n}\r\n\r\n/***********************************************************\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n ***********************************************************/\r\n library SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\n/***********************************************************\r\n * EUDatasets library\r\n ***********************************************************/\r\nlibrary EUDatasets {\r\n    struct Player {\r\n        address addr;   // player address\r\n        uint256 planCount;\r\n        mapping(uint256=>PalyerPlan) plans;\r\n    }\r\n    \r\n    struct PalyerPlan {\r\n        uint256 planId;\r\n        uint256 startTime;\r\n        uint256 startBlock;\r\n        uint256 invested;    //\r\n        uint256 atBlock;    // \r\n        uint256 payEth;\r\n        bool isClose;\r\n    }\r\n\r\n    struct Plan {\r\n        uint256 interest;    // interest per day %%\r\n        uint256 dayRange;    // days, 0 means No time limit\r\n    }    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"promoAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GetIdByAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"G_NowUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"player_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"planCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"G_AllEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"GetPlayerByUid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"GetPlanTimeByUid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"GetPlanByUid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EasyInvestUP","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9b0b17a5200e23bbde5134e8f5f54f9c63b21e8aea31b645172e2e0827347d01"}]}