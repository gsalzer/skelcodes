{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * This smart contract code is Copyright 2018 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @dev Split ether between parties.\r\n * @author TokenMarket Ltd. /  Ville Sundell <ville at tokenmarket.net>\r\n *\r\n * Allows splitting payments between parties.\r\n * Ethers are split to parties, each party has slices they are entitled to.\r\n * Ethers of this smart contract are divided into slices upon split().\r\n */\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract Recoverable is Ownable {\r\n\r\n  /// @dev Empty constructor (for now)\r\n  constructor() public {\r\n  }\r\n\r\n  /// @dev This will be invoked by the owner, when owner wants to rescue tokens\r\n  /// @param token Token which will we rescue to the owner from the contract\r\n  function recoverTokens(ERC20Basic token) onlyOwner public {\r\n    token.transfer(owner, tokensToBeReturned(token));\r\n  }\r\n\r\n  /// @dev Interface function, can be overwritten by the superclass\r\n  /// @param token Token which balance we will check and return\r\n  /// @return The amount of tokens (in smallest denominator) the contract owns\r\n  function tokensToBeReturned(ERC20Basic token) public view returns (uint) {\r\n    return token.balanceOf(this);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract PaymentSplitter is Recoverable {\r\n  using SafeMath for uint256; // We use only uint256 for safety reasons (no boxing)\r\n\r\n  /// @dev Describes a party (address and amount of slices the party is entitled to)\r\n  struct Party {\r\n    address addr;\r\n    uint256 slices;\r\n  }\r\n\r\n  /// @dev This is just a failsafe, so we can't initialize a contract where\r\n  ///      splitting would not be succesful in the future (for example because\r\n  ///      of decreased block gas limit):\r\n  uint256 constant MAX_PARTIES = 100;\r\n  /// @dev How many slices there are in total:\r\n  uint256 public totalSlices;\r\n  /// @dev Array of \"Party\"s for each party's address and amount of slices:\r\n  Party[] public parties;\r\n\r\n  /// @dev This event is emitted when someone makes a payment:\r\n  ///      (Gnosis MultiSigWallet compatible event)\r\n  event Deposit(address indexed sender, uint256 value);\r\n  /// @dev This event is emitted when someone splits the ethers between parties:\r\n  ///      (emitted once per call)\r\n  event Split(address indexed who, uint256 value);\r\n  /// @dev This event is emitted for every party we send ethers to:\r\n  event SplitTo(address indexed to, uint256 value);\r\n\r\n  /// @dev Constructor: takes list of parties and their slices.\r\n  /// @param addresses List of addresses of the parties\r\n  /// @param slices Slices of the parties. Will be added to totalSlices.\r\n  constructor(address[] addresses, uint[] slices) public {\r\n    require(addresses.length == slices.length, \"addresses and slices must be equal length.\");\r\n    require(addresses.length > 0 && addresses.length < MAX_PARTIES, \"Amount of parties is either too many, or zero.\");\r\n\r\n    for(uint i=0; i<addresses.length; i++) {\r\n      parties.push(Party(addresses[i], slices[i]));\r\n      totalSlices = totalSlices.add(slices[i]);\r\n    }\r\n  }\r\n\r\n  /// @dev Split the ethers, and send to parties according to slices.\r\n  ///      This can be intentionally invoked by anyone: if some random person\r\n  ///      wants to pay for the gas, that's good for us.\r\n  function split() external {\r\n    uint256 totalBalance = address(this).balance;\r\n    uint256 slice = totalBalance.div(totalSlices);\r\n\r\n    for(uint i=0; i<parties.length; i++) {\r\n      uint256 amount = slice.mul(parties[i].slices);\r\n\r\n      parties[i].addr.transfer(amount);\r\n      emit SplitTo(parties[i].addr, amount);\r\n    }\r\n\r\n    emit Split(msg.sender, totalBalance);\r\n  }\r\n\r\n  /// @dev Fallback function, intentionally designed to fit to the gas stipend.\r\n  function() public payable {\r\n    emit Deposit(msg.sender, msg.value);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"parties\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"slices\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSlices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokensToBeReturned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"split\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"slices\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Split\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SplitTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PaymentSplitter","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000cb83f71ee483efc414f21563e2bb53f61b3e280000000000000000000000000426e425f3f32fe6d02e8c9cb304c69adda84a1a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000026f70000000000000000000000000000000000000000000000000000000000000019","Library":"","SwarmSource":"bzzr://f14d752bde484337a1e5970cfda819b4f6ea58554ba64c9513d974112deb1f9c"}]}