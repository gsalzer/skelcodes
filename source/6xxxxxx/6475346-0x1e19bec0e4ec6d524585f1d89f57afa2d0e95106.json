{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/GodMode.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title God Mode\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev This contract provides a basic interface for God\r\n///  in a contract as well as the ability for God to pause\r\n///  the contract\r\ncontract GodMode {\r\n    /// @dev Is the contract paused?\r\n    bool public isPaused;\r\n\r\n    /// @dev God's address\r\n    address public god;\r\n\r\n    /// @dev Only God can run this function\r\n    modifier onlyGod()\r\n    {\r\n        require(god == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev This function can only be run while the contract\r\n    ///  is not paused\r\n    modifier notPaused()\r\n    {\r\n        require(!isPaused);\r\n        _;\r\n    }\r\n\r\n    /// @dev This event is fired when the contract is paused\r\n    event GodPaused();\r\n\r\n    /// @dev This event is fired when the contract is unpaused\r\n    event GodUnpaused();\r\n\r\n    constructor() public\r\n    {\r\n        // Make the creator of the contract God\r\n        god = msg.sender;\r\n    }\r\n\r\n    /// @dev God can change the address of God\r\n    /// @param _newGod The new address for God\r\n    function godChangeGod(address _newGod) public onlyGod\r\n    {\r\n        god = _newGod;\r\n    }\r\n\r\n    /// @dev God can pause the game\r\n    function godPause() public onlyGod\r\n    {\r\n        isPaused = true;\r\n\r\n        emit GodPaused();\r\n    }\r\n\r\n    /// @dev God can unpause the game\r\n    function godUnpause() public onlyGod\r\n    {\r\n        isPaused = false;\r\n\r\n        emit GodUnpaused();\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthAbstractInterface.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title King of Eth Abstract Interface\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Abstract interface contract for titles and taxes\r\ncontract KingOfEthAbstractInterface {\r\n    /// @dev The address of the current King\r\n    address public king;\r\n\r\n    /// @dev The address of the current Wayfarer\r\n    address public wayfarer;\r\n\r\n    /// @dev Anyone can pay taxes\r\n    function payTaxes() public payable;\r\n}\r\n\r\n// File: contracts/KingOfEthAuctionsAbstractInterface.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title King of Eth: Auctions Abstract Interface\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Abstract interface contract for auctions of houses\r\ncontract KingOfEthAuctionsAbstractInterface {\r\n    /// @dev Determines if there is an auction at a particular location\r\n    /// @param _x The x coordinate of the auction\r\n    /// @param _y The y coordinate of the auction\r\n    /// @return true if there is an existing auction\r\n    function existingAuction(uint _x, uint _y) public view returns(bool);\r\n}\r\n\r\n// File: contracts/KingOfEthBlindAuctionsReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Blind Auctions Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev This contract provides a reference to the blind auctions contract\r\ncontract KingOfEthBlindAuctionsReferencer is GodMode {\r\n    /// @dev The address of the blind auctions contract\r\n    address public blindAuctionsContract;\r\n\r\n    /// @dev Only the blind auctions contract can run this\r\n    modifier onlyBlindAuctionsContract()\r\n    {\r\n        require(blindAuctionsContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set a new blind auctions contract\r\n    /// @param _blindAuctionsContract the address of the blind auctions\r\n    ///  contract\r\n    function godSetBlindAuctionsContract(address _blindAuctionsContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        blindAuctionsContract = _blindAuctionsContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthOpenAuctionsReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Open Auctions Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev This contract provides a reference to the open auctions contract\r\ncontract KingOfEthOpenAuctionsReferencer is GodMode {\r\n    /// @dev The address of the auctions contract\r\n    address public openAuctionsContract;\r\n\r\n    /// @dev Only the open auctions contract can run this\r\n    modifier onlyOpenAuctionsContract()\r\n    {\r\n        require(openAuctionsContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set a new auctions contract\r\n    function godSetOpenAuctionsContract(address _openAuctionsContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        openAuctionsContract = _openAuctionsContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthAuctionsReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/// @title King of Eth: Auctions Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev This contract provides a reference to the auctions contracts\r\ncontract KingOfEthAuctionsReferencer is\r\n      KingOfEthBlindAuctionsReferencer\r\n    , KingOfEthOpenAuctionsReferencer\r\n{\r\n    /// @dev Only an auctions contract can run this\r\n    modifier onlyAuctionsContract()\r\n    {\r\n        require(blindAuctionsContract == msg.sender\r\n             || openAuctionsContract == msg.sender);\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Functionality to allow contracts to reference the king contract\r\ncontract KingOfEthReferencer is GodMode {\r\n    /// @dev The address of the king contract\r\n    address public kingOfEthContract;\r\n\r\n    /// @dev Only the king contract can run this\r\n    modifier onlyKingOfEthContract()\r\n    {\r\n        require(kingOfEthContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can change the king contract\r\n    /// @param _kingOfEthContract The new address\r\n    function godSetKingOfEthContract(address _kingOfEthContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        kingOfEthContract = _kingOfEthContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthBoard.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n/// @title King of Eth: Board\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Contract for board\r\ncontract KingOfEthBoard is\r\n      GodMode\r\n    , KingOfEthAuctionsReferencer\r\n    , KingOfEthReferencer\r\n{\r\n    /// @dev x coordinate of the top left corner of the boundary\r\n    uint public boundX1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\r\n\r\n    /// @dev y coordinate of the top left corner of the boundary\r\n    uint public boundY1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\r\n\r\n    /// @dev x coordinate of the bottom right corner of the boundary\r\n    uint public boundX2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\r\n\r\n    /// @dev y coordinate of the bottom right corner of the boundary\r\n    uint public boundY2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\r\n\r\n    /// @dev Number used to divide the total number of house locations\r\n    /// after any expansion to yield the number of auctions that  will be\r\n    /// available to start for the expansion's duration\r\n    uint public constant auctionsAvailableDivisor = 10;\r\n\r\n    /// @dev Amount of time the King must wait between increasing the board\r\n    uint public constant kingTimeBetweenIncrease = 2 weeks;\r\n\r\n    /// @dev Amount of time the Wayfarer must wait between increasing the board\r\n    uint public constant wayfarerTimeBetweenIncrease = 3 weeks;\r\n\r\n    /// @dev Amount of time that anyone but the King or Wayfarer must wait\r\n    ///  before increasing the board\r\n    uint public constant plebTimeBetweenIncrease = 4 weeks;\r\n\r\n    /// @dev The last time the board was increased in size\r\n    uint public lastIncreaseTime;\r\n\r\n    /// @dev The direction of the next increase\r\n    uint8 public nextIncreaseDirection;\r\n\r\n    /// @dev The number of auctions that players may choose to start\r\n    ///  for this expansion\r\n    uint public auctionsRemaining;\r\n\r\n    constructor() public\r\n    {\r\n        // Game is paused as God must start it\r\n        isPaused = true;\r\n\r\n        // Set the auctions remaining\r\n        setAuctionsAvailableForBounds();\r\n    }\r\n\r\n    /// @dev Fired when the board is increased in size\r\n    event BoardSizeIncreased(\r\n          address initiator\r\n        , uint newBoundX1\r\n        , uint newBoundY1\r\n        , uint newBoundX2\r\n        , uint newBoundY2\r\n        , uint lastIncreaseTime\r\n        , uint nextIncreaseDirection\r\n        , uint auctionsRemaining\r\n    );\r\n\r\n    /// @dev Only the King can run this\r\n    modifier onlyKing()\r\n    {\r\n        require(KingOfEthAbstractInterface(kingOfEthContract).king() == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev Only the Wayfarer can run this\r\n    modifier onlyWayfarer()\r\n    {\r\n        require(KingOfEthAbstractInterface(kingOfEthContract).wayfarer() == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev Set the total auctions available\r\n    function setAuctionsAvailableForBounds() private\r\n    {\r\n        uint boundDiffX = boundX2 - boundX1;\r\n        uint boundDiffY = boundY2 - boundY1;\r\n\r\n        auctionsRemaining = boundDiffX * boundDiffY / 2 / auctionsAvailableDivisor;\r\n    }\r\n\r\n    /// @dev Increase the board's size making sure to keep steady at\r\n    ///  the maximum outer bounds\r\n    function increaseBoard() private\r\n    {\r\n        // The length of increase\r\n        uint _increaseLength;\r\n\r\n        // If this increase direction is right\r\n        if(0 == nextIncreaseDirection)\r\n        {\r\n            _increaseLength = boundX2 - boundX1;\r\n            uint _updatedX2 = boundX2 + _increaseLength;\r\n\r\n            // Stay within bounds\r\n            if(_updatedX2 <= boundX2 || _updatedX2 <= _increaseLength)\r\n            {\r\n                boundX2 = ~uint(0);\r\n            }\r\n            else\r\n            {\r\n                boundX2 = _updatedX2;\r\n            }\r\n        }\r\n        // If this increase direction is down\r\n        else if(1 == nextIncreaseDirection)\r\n        {\r\n            _increaseLength = boundY2 - boundY1;\r\n            uint _updatedY2 = boundY2 + _increaseLength;\r\n\r\n            // Stay within bounds\r\n            if(_updatedY2 <= boundY2 || _updatedY2 <= _increaseLength)\r\n            {\r\n                boundY2 = ~uint(0);\r\n            }\r\n            else\r\n            {\r\n                boundY2 = _updatedY2;\r\n            }\r\n        }\r\n        // If this increase direction is left\r\n        else if(2 == nextIncreaseDirection)\r\n        {\r\n            _increaseLength = boundX2 - boundX1;\r\n\r\n            // Stay within bounds\r\n            if(boundX1 <= _increaseLength)\r\n            {\r\n                boundX1 = 0;\r\n            }\r\n            else\r\n            {\r\n                boundX1 -= _increaseLength;\r\n            }\r\n        }\r\n        // If this increase direction is up\r\n        else if(3 == nextIncreaseDirection)\r\n        {\r\n            _increaseLength = boundY2 - boundY1;\r\n\r\n            // Stay within bounds\r\n            if(boundY1 <= _increaseLength)\r\n            {\r\n                boundY1 = 0;\r\n            }\r\n            else\r\n            {\r\n                boundY1 -= _increaseLength;\r\n            }\r\n        }\r\n\r\n        // The last increase time is now\r\n        lastIncreaseTime = now;\r\n\r\n        // Set the next increase direction\r\n        nextIncreaseDirection = (nextIncreaseDirection + 1) % 4;\r\n\r\n        // Reset the auctions available\r\n        setAuctionsAvailableForBounds();\r\n\r\n        emit BoardSizeIncreased(\r\n              msg.sender\r\n            , boundX1\r\n            , boundY1\r\n            , boundX2\r\n            , boundY2\r\n            , now\r\n            , nextIncreaseDirection\r\n            , auctionsRemaining\r\n        );\r\n    }\r\n\r\n    /// @dev God can start the game\r\n    function godStartGame() public onlyGod\r\n    {\r\n        // Reset increase times\r\n        lastIncreaseTime = now;\r\n\r\n        // Unpause the game\r\n        godUnpause();\r\n    }\r\n\r\n    /// @dev The auctions contracts can decrement the number\r\n    ///  of auctions that are available to be started\r\n    function auctionsDecrementAuctionsRemaining()\r\n        public\r\n        onlyAuctionsContract\r\n    {\r\n        auctionsRemaining -= 1;\r\n    }\r\n\r\n    /// @dev The auctions contracts can increment the number\r\n    ///  of auctions that are available to be started when\r\n    ///  an auction ends wihout a winner\r\n    function auctionsIncrementAuctionsRemaining()\r\n        public\r\n        onlyAuctionsContract\r\n    {\r\n        auctionsRemaining += 1;\r\n    }\r\n\r\n    /// @dev The King can increase the board much faster than the plebs\r\n    function kingIncreaseBoard()\r\n        public\r\n        onlyKing\r\n    {\r\n        // Require enough time has passed since the last increase\r\n        require(lastIncreaseTime + kingTimeBetweenIncrease < now);\r\n\r\n        increaseBoard();\r\n    }\r\n\r\n    /// @dev The Wayfarer can increase the board faster than the plebs\r\n    function wayfarerIncreaseBoard()\r\n        public\r\n        onlyWayfarer\r\n    {\r\n        // Require enough time has passed since the last increase\r\n        require(lastIncreaseTime + wayfarerTimeBetweenIncrease < now);\r\n\r\n        increaseBoard();\r\n    }\r\n\r\n    /// @dev Any old pleb can increase the board\r\n    function plebIncreaseBoard() public\r\n    {\r\n        // Require enough time has passed since the last increase\r\n        require(lastIncreaseTime + plebTimeBetweenIncrease < now);\r\n\r\n        increaseBoard();\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthBoardReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Board Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Functionality to allow contracts to reference the board contract\r\ncontract KingOfEthBoardReferencer is GodMode {\r\n    /// @dev The address of the board contract\r\n    address public boardContract;\r\n\r\n    /// @dev Only the board contract can run this\r\n    modifier onlyBoardContract()\r\n    {\r\n        require(boardContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can change the board contract\r\n    /// @param _boardContract The new address\r\n    function godSetBoardContract(address _boardContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        boardContract = _boardContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthHousesAbstractInterface.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title King of Eth: Houses Abstract Interface\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Abstract interface contract for houses\r\ncontract KingOfEthHousesAbstractInterface {\r\n    /// @dev Get the owner of the house at some location\r\n    /// @param _x The x coordinate of the house\r\n    /// @param _y The y coordinate of the house\r\n    /// @return The address of the owner\r\n    function ownerOf(uint _x, uint _y) public view returns(address);\r\n\r\n    /// @dev Get the level of the house at some location\r\n    /// @param _x The x coordinate of the house\r\n    /// @param _y The y coordinate of the house\r\n    /// @return The level of the house\r\n    function level(uint _x, uint _y) public view returns(uint8);\r\n\r\n    /// @dev The auctions contracts can set the owner of a house after an auction\r\n    /// @param _x The x coordinate of the house\r\n    /// @param _y The y coordinate of the house\r\n    /// @param _owner The new owner of the house\r\n    function auctionsSetOwner(uint _x, uint _y, address _owner) public;\r\n\r\n    /// @dev The house realty contract can transfer house ownership\r\n    /// @param _x The x coordinate of the house\r\n    /// @param _y The y coordinate of the house\r\n    /// @param _from The previous owner of house\r\n    /// @param _to The new owner of house\r\n    function houseRealtyTransferOwnership(\r\n          uint _x\r\n        , uint _y\r\n        , address _from\r\n        , address _to\r\n    ) public;\r\n}\r\n\r\n// File: contracts/KingOfEthHousesReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Houses Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to reference the houses contract\r\ncontract KingOfEthHousesReferencer is GodMode {\r\n    /// @dev The houses contract's address\r\n    address public housesContract;\r\n\r\n    /// @dev Only the houses contract can run this function\r\n    modifier onlyHousesContract()\r\n    {\r\n        require(housesContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set the realty contract\r\n    /// @param _housesContract The new address\r\n    function godSetHousesContract(address _housesContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        housesContract = _housesContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthBlindAuctions.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title King of Eth: Blind Auctions\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev This contracts provides the functionality for blind\r\n///  for houses auctions\r\ncontract KingOfEthBlindAuctions is\r\n      GodMode\r\n    , KingOfEthReferencer\r\n    , KingOfEthBoardReferencer\r\n    , KingOfEthHousesReferencer\r\n    , KingOfEthOpenAuctionsReferencer\r\n{\r\n    /// @dev A blinded bid\r\n    struct Bid {\r\n        /// @dev The hash value of the blinded bid\r\n        bytes32 blindedBid;\r\n\r\n        /// @dev The deposit that was made with the bid\r\n        uint deposit;\r\n    }\r\n\r\n    /// @dev Information about a particular auction\r\n    struct AuctionInfo {\r\n        /// @dev The auction's x coordinate\r\n        uint x;\r\n\r\n        /// @dev The auction's y coordinate\r\n        uint y;\r\n\r\n        /// @dev The auctions's starting time\r\n        uint startTime;\r\n\r\n        /// @dev The blinded bids that each address made on the auction\r\n        mapping (address => Bid[]) bids;\r\n\r\n        /// @dev The total amount of unrevealed deposits for the auction\r\n        uint unrevealedAmount;\r\n\r\n        /// @dev The address of placer of the top revealed bid\r\n        address topBidder;\r\n\r\n        /// @dev The value of the top revealed bid\r\n        uint topBid;\r\n\r\n        /// @dev Has the auction been closed?\r\n        bool closed;\r\n    }\r\n\r\n    /// @dev The span of time that players may bid on an auction\r\n    uint public constant bidSpan = 10 minutes;\r\n\r\n    /// @dev The span of time that players may reveal bids (after\r\n    ///  the bid span)\r\n    uint public constant revealSpan = 10 minutes;\r\n\r\n    /// @dev The id that will be used for the next auction.\r\n    ///  Note this is set to one so that checking a house without\r\n    ///  an auction id does not resolve to an auction.\r\n    ///  The contract will have to be replaced if all the ids are\r\n    ///  used.\r\n    uint public nextAuctionId = 1;\r\n\r\n    /// @dev A mapping from an x, y coordinate to the id of a corresponding auction\r\n    mapping (uint => mapping (uint => uint)) auctionIds;\r\n\r\n    /// @dev A mapping from the id of an auction to the info about the auction\r\n    mapping (uint => AuctionInfo) auctionInfo;\r\n\r\n    /// @param _kingOfEthContract The address for the king contract\r\n    /// @param _boardContract The address for the board contract\r\n    constructor(\r\n          address _kingOfEthContract\r\n        , address _boardContract\r\n    )\r\n        public\r\n    {\r\n        kingOfEthContract = _kingOfEthContract;\r\n        boardContract     = _boardContract;\r\n\r\n        // Auctions are not allowed before God has begun the game\r\n        isPaused = true;\r\n    }\r\n\r\n    /// @dev Fired when a new auction is started\r\n    event BlindAuctionStarted(\r\n          uint id\r\n        , uint x\r\n        , uint y\r\n        , address starter\r\n        , uint startTime\r\n    );\r\n\r\n    /// @dev Fired when a player places a new bid\r\n    event BlindBidPlaced(\r\n          uint id\r\n        , address bidder\r\n        , uint maxAmount\r\n    );\r\n\r\n    /// @dev Fired when a player reveals some bids\r\n    event BlindBidsRevealed(\r\n          uint id\r\n        , address revealer\r\n        , uint topBid\r\n    );\r\n\r\n    /// @dev Fired when a player closes an auction\r\n    event BlindAuctionClosed(\r\n          uint id\r\n        , uint x\r\n        , uint y\r\n        , address newOwner\r\n        , uint amount\r\n    );\r\n\r\n    /// @dev Create the hash of a blinded bid using keccak256\r\n    /// @param _bid The true bid amount\r\n    /// @param _isFake Is the bid fake?\r\n    /// @param _secret The secret seed\r\n    function blindedBid(uint _bid, bool _isFake, bytes32 _secret)\r\n        public\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(_bid, _isFake, _secret));\r\n    }\r\n\r\n    /// @dev Determines if there is an auction at a particular location\r\n    /// @param _x The x coordinate of the auction\r\n    /// @param _y The y coordinate of the auction\r\n    /// @return true if there is an existing auction\r\n    function existingAuction(uint _x, uint _y) public view returns(bool)\r\n    {\r\n        return 0 != auctionInfo[auctionIds[_x][_y]].startTime;\r\n    }\r\n\r\n    /// @dev Create an auction at a particular location\r\n    /// @param _x The x coordinate of the auction\r\n    /// @param _y The y coordinate of the auction\r\n    function createAuction(uint _x, uint _y) public notPaused\r\n    {\r\n        // Require that there is not already a started auction\r\n        // at that location\r\n        require(0 == auctionInfo[auctionIds[_x][_y]].startTime);\r\n\r\n        // Require that there is not currently an open auction at\r\n        // the location\r\n        require(!KingOfEthAuctionsAbstractInterface(openAuctionsContract).existingAuction(_x, _y));\r\n\r\n        KingOfEthBoard _board = KingOfEthBoard(boardContract);\r\n\r\n        // Require that there is at least one available auction remaining\r\n        require(0 < _board.auctionsRemaining());\r\n\r\n        // Require that the auction is within the current bounds of the board\r\n        require(_board.boundX1() < _x);\r\n        require(_board.boundY1() < _y);\r\n        require(_board.boundX2() > _x);\r\n        require(_board.boundY2() > _y);\r\n\r\n        // Require that nobody current owns the house\r\n        require(0x0 == KingOfEthHousesAbstractInterface(housesContract).ownerOf(_x, _y));\r\n\r\n        // Use up an available auction\r\n        _board.auctionsDecrementAuctionsRemaining();\r\n\r\n        // Claim the next auction id\r\n        uint _id = nextAuctionId++;\r\n\r\n        // Record the id of the auction\r\n        auctionIds[_x][_y] = _id;\r\n\r\n        AuctionInfo storage _auctionInfo = auctionInfo[_id];\r\n\r\n        // Setup the starting data for the auction\r\n        _auctionInfo.x         = _x;\r\n        _auctionInfo.y         = _y;\r\n        _auctionInfo.startTime = now;\r\n\r\n        emit BlindAuctionStarted(\r\n              _id\r\n            , _x\r\n            , _y\r\n            , msg.sender\r\n            , now\r\n        );\r\n    }\r\n\r\n    /// @dev Place a bid on an auction. This function accepts the\r\n    ///  deposit as msg.value\r\n    /// @param _id The id of the auction to bid on\r\n    /// @param _blindedBid The hash of the blinded bid\r\n    function placeBid(uint _id, bytes32 _blindedBid)\r\n        public\r\n        payable\r\n        notPaused\r\n    {\r\n        // Retrieve the info about the auction\r\n        AuctionInfo storage _auctionInfo = auctionInfo[_id];\r\n\r\n        // Require that an auction exists\r\n        require(0 != _auctionInfo.startTime);\r\n\r\n        // Require that it is still during the bid span\r\n        require(_auctionInfo.startTime + bidSpan > now);\r\n\r\n        // Add the amount deposited to the unrevealed amount\r\n        // for the auction\r\n        _auctionInfo.unrevealedAmount += msg.value;\r\n\r\n        // Add the bid to the auctions bids for that player\r\n        _auctionInfo.bids[msg.sender].push(Bid(\r\n              _blindedBid\r\n            , msg.value\r\n        ));\r\n\r\n        emit BlindBidPlaced(_id, msg.sender, msg.value);\r\n    }\r\n\r\n    /// @dev Reveal all of a player's bids\r\n    /// @param _id The id of the auction that the bids were placed on\r\n    /// @param _values The true values of the bids of each blinded bid\r\n    /// @param _isFakes Whether each individual blinded bid was fake\r\n    /// @param _secrets The secret seeds of each blinded bid\r\n    function revealBids(\r\n          uint _id\r\n        , uint[] _values\r\n        , bool[] _isFakes\r\n        , bytes32[] _secrets\r\n    )\r\n        public\r\n        notPaused\r\n    {\r\n        // Lookup the information about the auction\r\n        AuctionInfo storage _auctionInfo = auctionInfo[_id];\r\n\r\n        uint _biddersBidCount = _auctionInfo.bids[msg.sender].length;\r\n\r\n        // Require that the user has submitted reveals for all of his bids\r\n        require(_biddersBidCount == _values.length);\r\n        require(_biddersBidCount == _isFakes.length);\r\n        require(_biddersBidCount == _secrets.length);\r\n\r\n        // Require that it's after the bid span\r\n        require(_auctionInfo.startTime + bidSpan < now);\r\n\r\n        // Require it's before the end of the reveal span\r\n        require(_auctionInfo.startTime + bidSpan + revealSpan > now);\r\n\r\n        // The refund the player will receive\r\n        uint _refund;\r\n\r\n        // The maximum bid made by the player\r\n        uint _maxBid;\r\n\r\n        // For each of the user's bids...\r\n        for(uint _i = 0; _i < _biddersBidCount; ++_i)\r\n        {\r\n            Bid storage _bid = _auctionInfo.bids[msg.sender][_i];\r\n            uint _value      = _values[_i];\r\n\r\n            // If the blinded bid's hash does not equal the one the user\r\n            // submitted then the revealed values are incorrect incorrect\r\n            // and skipped. Note that the  user will not receive a refund\r\n            // for this individual reveal in this case\r\n            if(_bid.blindedBid != keccak256(abi.encodePacked(_value, _isFakes[_i], _secrets[_i])))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            // Add the successfully revealed bid deposit to the refund\r\n            _refund += _bid.deposit;\r\n\r\n            // If the bid was not fake, and it is greater than the current\r\n            // maximum bid, then it is the player's new maximum bid\r\n            if(!_isFakes[_i] && _bid.deposit >= _value && _maxBid < _value)\r\n            {\r\n                _maxBid = _value;\r\n            }\r\n\r\n            // Ensure that the succesfully revealed bid cannot be re-revealed\r\n            _bid.blindedBid = bytes32(0);\r\n        }\r\n\r\n        // Reduce the unrevealed amount for the auction by the refund amount\r\n        _auctionInfo.unrevealedAmount -= _refund;\r\n\r\n        // If the maximum bid is not 0\r\n        if(0 != _maxBid)\r\n        {\r\n            // If the top bid is currently 0, i.e. this is the first\r\n            // player to reveal non-zero bids\r\n            if(0 == _auctionInfo.topBid)\r\n            {\r\n                // Don't refund the player their max bid yet\r\n                _refund -= _maxBid;\r\n\r\n                // The player is the current winner\r\n                _auctionInfo.topBidder = msg.sender;\r\n                _auctionInfo.topBid    = _maxBid;\r\n            }\r\n            // If the user has made a higher bid than the current winner\r\n            else if(_auctionInfo.topBid < _maxBid)\r\n            {\r\n                // Refund the previous winner their bid\r\n                _auctionInfo.topBidder.transfer(_auctionInfo.topBid);\r\n\r\n                // Don't refund the player their max bid yet\r\n                _refund -= _maxBid;\r\n\r\n                // The player is the current winner\r\n                _auctionInfo.topBidder = msg.sender;\r\n                _auctionInfo.topBid    = _maxBid;\r\n            }\r\n        }\r\n\r\n        // Send the player his refund\r\n        msg.sender.transfer(_refund);\r\n\r\n        emit BlindBidsRevealed(_id, msg.sender, _maxBid);\r\n    }\r\n\r\n    /// @dev Close the auction and claim its unrevealed\r\n    ///  amount as taxes\r\n    /// @param _id The id of the auction to be closed\r\n    function closeAuction(uint _id) public notPaused\r\n    {\r\n        // Lookup the auction's info\r\n        AuctionInfo storage _auctionInfo = auctionInfo[_id];\r\n\r\n        // Require that an auction exists\r\n        require(0 != _auctionInfo.startTime);\r\n\r\n        // Require that the auction hasn't already been closed\r\n        require(!_auctionInfo.closed);\r\n\r\n        // Require that it is after the reveal span\r\n        require(_auctionInfo.startTime + bidSpan + revealSpan < now);\r\n\r\n        // Set the auction to closed\r\n        _auctionInfo.closed = true;\r\n\r\n        // If nobody won the auction\r\n        if(0x0 == _auctionInfo.topBidder)\r\n        {\r\n            // Mark that there is no current auction for this location\r\n            _auctionInfo.startTime = 0;\r\n\r\n            // Allow another auction to be created\r\n            KingOfEthBoard(boardContract).auctionsIncrementAuctionsRemaining();\r\n\r\n            // Pay the unrevelealed amount as taxes\r\n            KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(_auctionInfo.unrevealedAmount)();\r\n        }\r\n        // If a player won the auction\r\n        else\r\n        {\r\n            // Set the auction's winner as the owner of the house\r\n            KingOfEthHousesAbstractInterface(housesContract).auctionsSetOwner(\r\n                  _auctionInfo.x\r\n                , _auctionInfo.y\r\n                , _auctionInfo.topBidder\r\n            );\r\n\r\n            // The amount payed in taxes is the unrevealed amount plus\r\n            // the winning bid\r\n            uint _amount = _auctionInfo.unrevealedAmount + _auctionInfo.topBid;\r\n\r\n            // Pay the taxes\r\n            KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(_amount)();\r\n        }\r\n\r\n        emit BlindAuctionClosed(\r\n              _id\r\n            , _auctionInfo.x\r\n            , _auctionInfo.y\r\n            , _auctionInfo.topBidder\r\n            , _auctionInfo.topBid\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boardContract\",\"type\":\"address\"}],\"name\":\"godSetBoardContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"godPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"closeAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bidSpan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_isFakes\",\"type\":\"bool[]\"},{\"name\":\"_secrets\",\"type\":\"bytes32[]\"}],\"name\":\"revealBids\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"existingAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_blindedBid\",\"type\":\"bytes32\"}],\"name\":\"placeBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boardContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openAuctionsContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGod\",\"type\":\"address\"}],\"name\":\"godChangeGod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kingOfEthContract\",\"type\":\"address\"}],\"name\":\"godSetKingOfEthContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"godUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"god\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_openAuctionsContract\",\"type\":\"address\"}],\"name\":\"godSetOpenAuctionsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_housesContract\",\"type\":\"address\"}],\"name\":\"godSetHousesContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revealSpan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bid\",\"type\":\"uint256\"},{\"name\":\"_isFake\",\"type\":\"bool\"},{\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"blindedBid\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"housesContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kingOfEthContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextAuctionId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kingOfEthContract\",\"type\":\"address\"},{\"name\":\"_boardContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"starter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"BlindAuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"BlindBidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revealer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"topBid\",\"type\":\"uint256\"}],\"name\":\"BlindBidsRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BlindAuctionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GodPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GodUnpaused\",\"type\":\"event\"}]","ContractName":"KingOfEthBlindAuctions","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000004bba664ea822924ff435ce1b3fad3e8dcc694810000000000000000000000005ff1e4c124b6b0c9a41cf41d261b3cb9fd84c80d","Library":"","SwarmSource":"bzzr://e389a27821a1eae679580788d3bd5f7032ffa0ee5e7bda0fa76898a177f15a09"}]}