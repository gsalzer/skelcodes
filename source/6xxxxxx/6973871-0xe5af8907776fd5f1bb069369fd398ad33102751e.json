{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * \r\n *                                  ╔╗╔╗╔╗╔══╗╔╗──╔╗──╔══╗╔═══╗──╔╗──╔╗╔═══╗\r\n *                                  ║║║║║║║╔╗║║║──║║──╚╗╔╝║╔══╝──║║──║║║╔══╝\r\n *                                  ║║║║║║║╚╝║║║──║║───║║─║╚══╗──║╚╗╔╝║║╚══╗\r\n *                                  ║║║║║║║╔╗║║║──║║───║║─║╔══╝──║╔╗╔╗║║╔══╝\r\n *                                  ║╚╝╚╝║║║║║║╚═╗║╚═╗╔╝╚╗║╚══╗╔╗║║╚╝║║║╚══╗\r\n *                                  ╚═╝╚═╝╚╝╚╝╚══╝╚══╝╚══╝╚═══╝╚╝╚╝──╚╝╚═══╝\r\n *                                  ┌──────────────────────────────────────┐  \r\n *                                  │      Website:  http://wallie.me      │\r\n *                                  │                                      │  \r\n *                                  │  CN Telegram: https://t.me/WallieCH  │\r\n *                                  │  RU Telegram: https://t.me/wallieRU  |\r\n *                                  │  *  Telegram: https://t.me/WallieNews|\r\n *                                  |Twitter: https://twitter.com/Wallie_me|\r\n *                                  └──────────────────────────────────────┘ \r\n *                    | Youtube – https://www.youtube.com/channel/UC1q3sPOlXsaJGrT8k-BZuyw |\r\n *\r\n *                                     * WALLIE - distribution contract *\r\n * \r\n *  - Growth before 2000 ETH 1.1% and after 2000 ETH 1.2% in 24 hours\r\n * \r\n * Distribution: *\r\n * - 10% Advertising, promotion\r\n * - 5% for developers and technical support\r\n * \r\n * - Referral program:\r\n *   5% Level 1\r\n *   3% Level 2\r\n *   1% Level 3\r\n * \r\n * - 3% Cashback\r\n * \r\n *\r\n *\r\n * Usage rules *\r\n *  Holding:\r\n *   1. Send any amount of ether but not less than 0.01 ETH to make a contribution.\r\n *   2. Send 0 ETH at any time to get profit from the Deposit.\r\n *  \r\n *  - You can make a profit at any time. Consider your transaction costs (GAS).\r\n *  \r\n * Affiliate program *\r\n * - You have access to a multy-level referral system for additional profit (5%, 3%, 1% of the referral's contribution).\r\n * - Affiliate fees will come from each referral's Deposit as long as it doesn't change your wallet address Ethereum on the other.\r\n * \r\n *  \r\n * \r\n *\r\n * RECOMMENDED GAS LIMIT: 300000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n *\r\n * The contract has been tested for vulnerabilities!\r\n *\r\n */\r\n\r\ncontract Wallie\r\n{\r\n    //Investor\r\n\tmapping (address => Investor) public investors;\r\n\r\n\t//Event the new investor\r\n\tevent NewInvestor(address _addr, uint256 _amount);\r\n\r\n\t//Event of the accrual of cashback bonus\r\n\tevent CashbackBonus(address _addr, uint256 _amount, uint256 _revenue);\r\n\r\n\t//Referral bonus accrual event\r\n\tevent RefererBonus(address _from, address _to, uint256 _amount, uint256 _revenue, uint256 _level);\r\n\r\n\t//New contribution event\r\n\tevent NewInvestment(address _addr, uint256 _amount);\r\n\r\n\t//The event of the new withdrawal\r\n\tevent NewWithdraw(address _addr, uint256 _amount);\r\n\r\n\t//The event of changes in the balance of the smart contract\r\n\tevent ChangeBalance(uint256 _balance);\r\n\r\n\tstruct Investor {\r\n\t\t//Member address\r\n\t\taddress addr;\r\n\t\t//The address of the inviter\r\n\t\taddress referer;\r\n\t\t//Deposit amount\r\n\t\tuint256 investment;\r\n\t\t//The time of the last contribution\r\n\t\tuint256 investment_time;\r\n\t\t//The time of the first contribution to the daily limit\r\n\t\tuint256 investment_first_time_in_day;\r\n\t\t//Deposit amount per day\r\n\t\tuint256 investments_daily;\r\n\t\t//Deposit income\r\n\t\tuint256 investment_profit;\r\n\t\t//Referral income\r\n\t\tuint256 referals_profit;\r\n\t\t//Cashback income\r\n\t\tuint256 cashback_profit;\r\n\t\t//Available balance income contributions\r\n\t\tuint256 investment_profit_balance;\r\n\t\t//Available referral income balance\r\n\t\tuint256 referals_profit_balance;\r\n\t\t//Available cashback income balance\r\n\t\tuint256 cashback_profit_balance;\r\n\t}\r\n\r\n\t//Percentage of daily charges before reaching the balance of 2000 ETH\r\n\tuint256 private constant dividends_perc_before_2000eth = 11;        // 1.1%\r\n\t//Percentage of daily charges after reaching the balance of 2000 ETH\r\n\tuint256 private constant dividends_perc_after_2000eth = 12;         // 1.2%\r\n\t//The percentage of the referral bonus of the first line\r\n\tuint256 public constant ref_bonus_level_1 = 5;                      // 5%\r\n\t//Second line referral bonus percentage\r\n\tuint256 public constant ref_bonus_level_2 = 3;                      // 3%\r\n\t//The percentage of referral bonus is the third line\r\n\tuint256 public constant ref_bonus_level_3 = 1;                      // 1%\r\n\t//Cashback bonus percentage\r\n\tuint256 public constant cashback_bonus = 3;                         // 3%\r\n\t//Minimum payment\r\n\tuint256 public constant min_invesment = 10 finney;                  // 0.01 eth\r\n\t//Deduction for advertising\r\n\tuint256 public constant advertising_fees = 15;                      // 15%\r\n\t//Limit to receive funds on the same day\r\n\tuint256 public constant contract_daily_limit = 100 ether;\r\n\t//Lock entry tools\r\n\tbool public block_investments = true;\r\n\t//The mode of payment\r\n\tbool public compensation = true;\r\n\r\n\t//Address smart contract first draft Wallie\r\n\taddress first_project_addr = 0xC0B52b76055C392D67392622AE7737cdb6D42133;\r\n\r\n\t//Start time\r\n\tuint256 public start_time;\r\n\t//Current day\r\n\tuint256 current_day;\r\n\t//Launch day\r\n\tuint256 start_day;\r\n\t//Deposit amount per day\r\n\tuint256 daily_invest_to_contract;\r\n\t//The address of the owner\r\n\taddress private adm_addr;\r\n\t//Starting block\r\n\tuint256 public start_block;\r\n\t//Project started\r\n\tbool public is_started = false;\r\n\t\r\n\t//Statistics\r\n\t//All investors\r\n\tuint256 private all_invest_users_count = 0;\r\n\t//Just introduced to the fund\r\n\tuint256 private all_invest = 0;\r\n\t//Total withdrawn from the fund\r\n\tuint256 private all_payments = 0;\r\n\t//The last address of the depositor\r\n\taddress private last_invest_addr = 0;\r\n\t//The amount of the last contribution\r\n\tuint256 private last_invest_amount = 0;\r\n\r\n\tusing SafeMath for uint;\r\n    using ToAddress for *;\r\n    using Zero for *;\r\n\r\nconstructor() public {\r\n\t\tadm_addr = msg.sender;\r\n\t\tcurrent_day = 0;\r\n\t\tdaily_invest_to_contract = 0;\r\n\t}\r\n\r\n\t//Current time\r\n\tfunction getTime() public view returns (uint256) {\r\n\t\treturn (now);\r\n\t}\r\n\r\n\t//The creation of the account of the investor\r\n\tfunction createInvestor(address addr,address referer) private {\r\n\t\tinvestors[addr].addr = addr;\r\n\t\tif (investors[addr].referer.isZero()) {\r\n\t\t\tinvestors[addr].referer = referer;\r\n\t\t}\r\n\t\tall_invest_users_count++;\r\n\t\temit NewInvestor(addr, msg.value);\r\n\t}\r\n\r\n\t//Check if there is an investor account\r\n\tfunction checkInvestor(address addr) public view returns (bool) {\r\n\t\tif (investors[addr].addr.isZero()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t//Accrual of referral bonuses to the participant\r\n\tfunction setRefererBonus(address addr, uint256 amount, uint256 level_percent, uint256 level_num) private {\r\n\t\tif (addr.notZero()) {\r\n\t\t\tuint256 revenue = amount.mul(level_percent).div(100);\r\n\r\n\t\t\tif (!checkInvestor(addr)) {\r\n\t\t\t\tcreateInvestor(addr, address(0));\r\n\t\t\t}\r\n\r\n\t\t\tinvestors[addr].referals_profit = investors[addr].referals_profit.add(revenue);\r\n\t\t\tinvestors[addr].referals_profit_balance = investors[addr].referals_profit_balance.add(revenue);\r\n\t\t\temit RefererBonus(msg.sender, addr, amount, revenue, level_num);\r\n\t\t}\r\n\t}\r\n\r\n\t//Accrual of referral bonuses to participants\r\n\tfunction setAllRefererBonus(address addr, uint256 amount) private {\r\n\r\n\t\taddress ref_addr_level_1 = investors[addr].referer;\r\n\t\taddress ref_addr_level_2 = investors[ref_addr_level_1].referer;\r\n\t\taddress ref_addr_level_3 = investors[ref_addr_level_2].referer;\r\n\r\n\t\tsetRefererBonus (ref_addr_level_1, amount, ref_bonus_level_1, 1);\r\n\t\tsetRefererBonus (ref_addr_level_2, amount, ref_bonus_level_2, 2);\r\n\t\tsetRefererBonus (ref_addr_level_3, amount, ref_bonus_level_3, 3);\r\n\t}\r\n\r\n\t//Get the number of dividends\r\n\tfunction calcDivedents (address addr) public view returns (uint256) {\r\n\t\tuint256 current_perc = 0;\r\n\t\tif (address(this).balance < 2000 ether) {\r\n\t\t\tcurrent_perc = dividends_perc_before_2000eth;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcurrent_perc = dividends_perc_after_2000eth;\r\n\t\t}\r\n\r\n\t\treturn investors[addr].investment.mul(current_perc).div(1000).mul(now.sub(investors[addr].investment_time)).div(1 days);\r\n\t}\r\n\r\n\t//We transfer dividends to the participant's account\r\n\tfunction setDivedents(address addr) private returns (uint256) {\r\n\t\tinvestors[addr].investment_profit_balance = investors[addr].investment_profit_balance.add(calcDivedents(addr));\r\n\t}\r\n\r\n\t//We enroll the deposit\r\n\tfunction setAmount(address addr, uint256 amount) private {\r\n\t\tinvestors[addr].investment = investors[addr].investment.add(amount);\r\n\t\tinvestors[addr].investment_time = now;\r\n\t\tall_invest = all_invest.add(amount);\r\n\t\tlast_invest_addr = addr;\r\n\t\tlast_invest_amount = amount;\r\n\t\temit NewInvestment(addr,amount);\r\n\t}\r\n\r\n\t//Cashback enrollment\r\n\tfunction setCashBackBonus(address addr, uint256 amount) private {\r\n\t\tif (investors[addr].referer.notZero() && investors[addr].investment == 0) {\r\n\t\t\tinvestors[addr].cashback_profit_balance = amount.mul(cashback_bonus).div(100);\r\n\t\t\tinvestors[addr].cashback_profit = investors[addr].cashback_profit.add(investors[addr].cashback_profit_balance);\r\n\t\t\temit CashbackBonus(addr, amount, investors[addr].cashback_profit_balance);\r\n\t\t}\r\n\t}\r\n\r\n\t//Income payment\r\n\tfunction withdraw_revenue(address addr) private {\r\n\t\tuint256 withdraw_amount = calcDivedents(addr);\r\n\t\t\r\n\t\tif (check_x2_profit(addr,withdraw_amount) == true) {\r\n\t\t   withdraw_amount = 0; \r\n\t\t}\r\n\t\t\r\n\t\tif (withdraw_amount > 0) {\r\n\t\t   investors[addr].investment_profit = investors[addr].investment_profit.add(withdraw_amount); \r\n\t\t}\r\n\t\t\r\n\t\twithdraw_amount = withdraw_amount.add(investors[addr].investment_profit_balance).add(investors[addr].referals_profit_balance).add(investors[addr].cashback_profit_balance);\r\n\t\t\r\n\r\n\t\tif (withdraw_amount > 0) {\r\n\t\t\tclear_balance(addr);\r\n\t\t\tall_payments = all_payments.add(withdraw_amount);\r\n\t\t\temit NewWithdraw(addr, withdraw_amount);\r\n\t\t\temit ChangeBalance(address(this).balance.sub(withdraw_amount));\r\n\t\t\taddr.transfer(withdraw_amount);\r\n\t\t}\r\n\t}\r\n\r\n\t//Reset user balances\r\n\tfunction clear_balance(address addr) private {\r\n\t\tinvestors[addr].investment_profit_balance = 0;\r\n\t\tinvestors[addr].referals_profit_balance = 0;\r\n\t\tinvestors[addr].cashback_profit_balance = 0;\r\n\t\tinvestors[addr].investment_time = now;\r\n\t}\r\n\r\n\t//Checking the x2 profit\r\n\tfunction check_x2_profit(address addr, uint256 dividends) private returns(bool) {\r\n\t\tif (investors[addr].investment_profit.add(dividends) > investors[addr].investment.mul(2)) {\r\n\t\t    investors[addr].investment_profit_balance = investors[addr].investment.mul(2).sub(investors[addr].investment_profit);\r\n\t\t\tinvestors[addr].investment = 0;\r\n\t\t\tinvestors[addr].investment_profit = 0;\r\n\t\t\tinvestors[addr].investment_first_time_in_day = 0;\r\n\t\t\tinvestors[addr].investment_time = 0;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t    return false;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction() public payable\r\n\tisStarted\r\n\trerfererVerification\r\n\tisBlockInvestments\r\n\tminInvest\r\n\tallowInvestFirstThreeDays\r\n\tsetDailyInvestContract\r\n\tsetDailyInvest\r\n\tmaxInvestPerUser\r\n\tmaxDailyInvestPerContract\r\n\tsetAdvertisingComiss {\r\n\r\n\t\tif (msg.value == 0) {\r\n\t\t\t//Request available payment\r\n\t\t\twithdraw_revenue(msg.sender);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t//Contribution\r\n\t\t\taddress ref_addr = msg.data.toAddr();\r\n\r\n\t\t\t//Check if there is an account\r\n\t\t\tif (!checkInvestor(msg.sender)) {\r\n\t\t\t\t//Создаем аккаунт пользователя\r\n\t\t\t\tcreateInvestor(msg.sender,ref_addr);\r\n\t\t\t}\r\n\r\n\t\t\t//Transfer of dividends on Deposit\r\n\t\t\tsetDivedents(msg.sender);\r\n\r\n\t\t\t//Accrual of cashback\r\n\t\t\tsetCashBackBonus(msg.sender, msg.value);\r\n\r\n\t\t\t//Deposit enrollment\r\n\t\t\tsetAmount(msg.sender, msg.value);\r\n\r\n\t\t\t//Crediting bonuses to referrers\r\n\t\t\tsetAllRefererBonus(msg.sender, msg.value);\r\n\t\t}\r\n\t}\r\n\r\n\t//Current day\r\n\tfunction today() public view returns (uint256) {\r\n\t\treturn now.div(1 days);\r\n\t}\r\n\r\n\t//Prevent accepting deposits\r\n\tfunction BlockInvestments() public onlyOwner {\r\n\t\tblock_investments = true;\r\n\t}\r\n\r\n\t//To accept deposits\r\n\tfunction AllowInvestments() public onlyOwner {\r\n\t\tblock_investments = false;\r\n\t}\r\n\t\r\n\t//Disable compensation mode\r\n\tfunction DisableCompensation() public onlyOwner {\r\n\t\tcompensation = false;\r\n\t}\r\n\r\n\t//Run the project\r\n\tfunction StartProject() public onlyOwner {\r\n\t\trequire(is_started == false, \"Project is started\");\r\n\t\tblock_investments = false;\r\n\t\tstart_block = block.number;\r\n\t\tstart_time = now;\r\n\t\tstart_day = today();\r\n\t\tis_started = true;\r\n\t}\r\n\t\r\n\t//Investor account statistics\r\n\tfunction getInvestorInfo(address addr) public view returns (address, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\t\tInvestor memory investor_info = investors[addr];\r\n\t\treturn (investor_info.referer,\r\n\t\tinvestor_info.investment,\r\n\t\tinvestor_info.investment_time,\r\n\t\tinvestor_info.investment_first_time_in_day,\r\n\t\tinvestor_info.investments_daily,\r\n\t\tinvestor_info.investment_profit,\r\n\t\tinvestor_info.referals_profit,\r\n\t\tinvestor_info.cashback_profit,\r\n\t\tinvestor_info.investment_profit_balance,\r\n\t\tinvestor_info.referals_profit_balance,\r\n\t\tinvestor_info.cashback_profit_balance);\r\n\t}\r\n\t\r\n\t//The stats for the site\r\n    function getWebStats() public view returns (uint256,uint256,uint256,uint256,address,uint256){\r\n    return (all_invest_users_count,address(this).balance,all_invest,all_payments,last_invest_addr,last_invest_amount); \r\n    }\r\n\r\n\t//Check the start of the project\r\n\tmodifier isStarted() {\r\n\t\trequire(is_started == true, \"Project not started\");\r\n\t\t_;\r\n\t}\r\n\r\n\t//Checking deposit block\r\n\tmodifier isBlockInvestments()\r\n\t{\r\n\t\tif (msg.value > 0) {\r\n\t\t\trequire(block_investments == false, \"investments is blocked\");\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t//Counting the number of user deposits per day\r\n\tmodifier setDailyInvest() {\r\n\t\tif (now.sub(investors[msg.sender].investment_first_time_in_day) < 1 days) {\r\n\t\t\tinvestors[msg.sender].investments_daily = investors[msg.sender].investments_daily.add(msg.value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinvestors[msg.sender].investments_daily = msg.value;\r\n\t\t\tinvestors[msg.sender].investment_first_time_in_day = now;\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t//The maximum amount of contributions a user per day\r\n\tmodifier maxInvestPerUser() {\r\n\t\tif (now.sub(start_time) <= 30 days) {\r\n\t\t\trequire(investors[msg.sender].investments_daily <= 20 ether, \"max payment must be <= 20 ETH\");\r\n\t\t}\r\n\t\telse{\r\n\t\t\trequire(investors[msg.sender].investments_daily <= 50 ether, \"max payment must be <= 50 ETH\");\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t//Maximum amount of all deposits per day\r\n\tmodifier maxDailyInvestPerContract() {\r\n\t\tif (now.sub(start_time) <= 30 days) {\r\n\t\t\trequire(daily_invest_to_contract <= contract_daily_limit, \"all daily invest to contract must be <= 100 ETH\");\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t//Minimum deposit amount\r\n\tmodifier minInvest() {\r\n\t\trequire(msg.value == 0 || msg.value >= min_invesment, \"amount must be = 0 ETH or > 0.01 ETH\");\r\n\t\t_;\r\n\t}\r\n\r\n\t//Calculation of the total number of deposits per day\r\n\tmodifier setDailyInvestContract() {\r\n\t\tuint256 day = today();\r\n\t\tif (current_day == day) {\r\n\t\t\tdaily_invest_to_contract = daily_invest_to_contract.add(msg.value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdaily_invest_to_contract = msg.value;\r\n\t\t\tcurrent_day = day;\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t//Permission for users of the previous project whose payments were <= 30% to make a contribution in the first 3 days\r\n\tmodifier allowInvestFirstThreeDays() {\r\n\t\tif (now.sub(start_time) <= 3 days && compensation == true) {\r\n\t\t\tuint256 invested = WallieFirstProject(first_project_addr).invested(msg.sender);\r\n\r\n\t\t\trequire(invested > 0, \"invested first contract must be > 0\");\r\n\r\n\t\t\tuint256 payments = WallieFirstProject(first_project_addr).payments(msg.sender);\r\n\r\n\t\t\tuint256 payments_perc = payments.mul(100).div(invested);\r\n\r\n\t\t\trequire(payments_perc <= 30, \"payments first contract must be <= 30%\");\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t//Verify the date field\r\n\tmodifier rerfererVerification() {\r\n\t\taddress ref_addr = msg.data.toAddr();\r\n\t\tif (ref_addr.notZero()) {\r\n\t\t\trequire(msg.sender != ref_addr, \"referer must be != msg.sender\");\r\n\t\t\trequire(investors[ref_addr].referer != msg.sender, \"referer must be != msg.sender\");\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t//Only the owner\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == adm_addr,\"onlyOwner!\");\r\n\t\t_;\r\n\t}\r\n\r\n\t//Payment of remuneration for advertising\r\n\tmodifier setAdvertisingComiss() {\r\n\t\tif (msg.sender != adm_addr && msg.value > 0) {\r\n\t\t\tinvestors[adm_addr].referals_profit_balance = investors[adm_addr].referals_profit_balance.add(msg.value.mul(advertising_fees).div(100));\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n}\r\n\r\n//The interface of the first draft (the amount of deposits and amount of payments)\r\ncontract WallieFirstProject {\r\n\r\n\tmapping (address => uint256) public invested;\r\n\r\n\tmapping (address => uint256) public payments;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t  * @dev Multiplies two numbers, reverts on overflow.\r\n\t  */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); // Solidity only automatically asserts when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, reverts on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n\t* reverts when dividing by zero.\r\n\t*/\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b != 0);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\nlibrary ToAddress\r\n{\r\n\tfunction toAddr(uint source) internal pure returns(address) {\r\n\t\treturn address(source);\r\n\t}\r\n\r\n\tfunction toAddr(bytes source) internal pure returns(address addr) {\r\n\t\tassembly { addr := mload(add(source,0x14)) }\r\n\t\treturn addr;\r\n\t}\r\n}\r\n\r\nlibrary Zero\r\n{\r\n\tfunction requireNotZero(uint a) internal pure {\r\n\t\trequire(a != 0, \"require not zero\");\r\n\t}\r\n\r\n\tfunction requireNotZero(address addr) internal pure {\r\n\t\trequire(addr != address(0), \"require not zero address\");\r\n\t}\r\n\r\n\tfunction notZero(address addr) internal pure returns(bool) {\r\n\t\treturn !(addr == address(0));\r\n\t}\r\n\r\n\tfunction isZero(address addr) internal pure returns(bool) {\r\n\t\treturn addr == address(0);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInvestorInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DisableCompensation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AllowInvestments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compensation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashback_bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ref_bonus_level_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"calcDivedents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"referer\",\"type\":\"address\"},{\"name\":\"investment\",\"type\":\"uint256\"},{\"name\":\"investment_time\",\"type\":\"uint256\"},{\"name\":\"investment_first_time_in_day\",\"type\":\"uint256\"},{\"name\":\"investments_daily\",\"type\":\"uint256\"},{\"name\":\"investment_profit\",\"type\":\"uint256\"},{\"name\":\"referals_profit\",\"type\":\"uint256\"},{\"name\":\"cashback_profit\",\"type\":\"uint256\"},{\"name\":\"investment_profit_balance\",\"type\":\"uint256\"},{\"name\":\"referals_profit_balance\",\"type\":\"uint256\"},{\"name\":\"cashback_profit_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ref_bonus_level_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ref_bonus_level_3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BlockInvestments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_invesment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertising_fees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"block_investments\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWebStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_daily_limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"NewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_revenue\",\"type\":\"uint256\"}],\"name\":\"CashbackBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_revenue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"RefererBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"NewInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"NewWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"ChangeBalance\",\"type\":\"event\"}]","ContractName":"Wallie","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://64faac6a61d1d1ae2bcd6560e08c4be34b32248b36e05aec71ac5416ef5bcc92"}]}