{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20 _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n}\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address _who) public view returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract AddressesFilterFeature is Ownable {}\r\ncontract ERC20Basic {}\r\ncontract BasicToken is ERC20Basic {}\r\ncontract StandardToken is ERC20, BasicToken {}\r\ncontract MintableToken is AddressesFilterFeature, StandardToken {}\r\n\r\ncontract Token is MintableToken {\r\n      function mint(address, uint256) public returns (bool);\r\n}\r\n\r\ncontract CrowdsaleWithRoundsMAKEtoken is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // Address of tokens minter\r\n  Token public minterContract;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n  uint256 public rate;\r\n\r\n\r\n  // Bonus amount of tokens for current round \r\n  uint256 public bonus;\r\n\r\n  // Amount of tokens raised\r\n  uint256 public tokensRaised;\r\n\r\n  // Time ranges for current round\r\n  uint256 public openingTime;\r\n  uint256 public closingTime;\r\n\r\n  //Minimal value of investment\r\n  uint public minInvestmentValue;\r\n\r\n  //Amount of gas for internal transactions\r\n  uint256 public gasAmount;\r\n\r\n  //wallets for start bonus of invest\r\n  address constant bonus_wallet_1 = 0x4f89aacc3915132ece2e0fef02036c0f33879ea8;\r\n  address constant bonus_wallet_2 = 0x2CA7608fF0b552fCB66714D9F7587245b4a393eC;\r\n\r\n  //exchange rate BTC to ETH => 1 BTC = 32 ETH\r\n  uint exchRateBTCtoETH = 32;\r\n\r\n  //start bonus caps\r\n  uint256 firstStartBonusCap = 1 * exchRateBTCtoETH * 10**18;  //1 BTC\r\n  uint256 secondStartBonusCap = firstStartBonusCap + (1 * exchRateBTCtoETH)/2 * 10**18;  //1 BTC + 0.5 BTC\r\n\r\n  //all collected ETH\r\n  uint256 totalCollectedETH = 0;\r\n  \r\n\r\n  /**\r\n   * @dev Allows the owner to set the minter contract.\r\n   * @param _minterAddr the minter address\r\n   */\r\n  function setMinter(address _minterAddr) public onlyOwner {\r\n    minterContract = Token(_minterAddr);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n    );\r\n\r\n  /**\r\n   * Event for token transfer\r\n   * @param _from who paid for the tokens\r\n   * @param _to who got the tokens\r\n   * @param amount amount of tokens purchased\r\n   * @param isDone flag of success of transfer\r\n   */\r\n  event TokensTransfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 amount,\r\n    bool isDone\r\n    );\r\n\r\nconstructor () public {\r\n    rate = 23200; //when 1 ET = 1 USD\r\n    openingTime = 1535752800; //2018-09-01 00:00:00 first round start\r\n    closingTime = 1538344800; //2018-10-01 00:00:00 first round end\r\n\r\n    bonus = 40; // %\r\n    minInvestmentValue = 0.01 ether;\r\n        \r\n    gasAmount = 25000;\r\n  }\r\n\r\n   /**\r\n   * @dev Correction of current bonus.\r\n   */\r\n  function changeBonus(uint256 newBonus) public onlyOwner {\r\n    bonus = newBonus;\r\n  }\r\n\r\n   /**\r\n   * @dev Correction of current rate.\r\n   */\r\n  function changeRate(uint256 newRate) public onlyOwner {\r\n    rate = newRate;\r\n  }\r\n\r\n   /**\r\n   * @dev Close current round.\r\n   */\r\n  function closeRound() public onlyOwner {\r\n    closingTime = block.timestamp + 1;\r\n  }\r\n\r\n   /**\r\n   * @dev Set token address.\r\n   */\r\n  function setToken(ERC20 _token) public onlyOwner {\r\n    token = _token;\r\n  }\r\n\r\n   /**\r\n   * @dev Set address od deposit wallet.\r\n   */\r\n  function setWallet(address _wallet) public onlyOwner {\r\n    wallet = _wallet;\r\n  }\r\n\r\n   /**\r\n   * @dev Change minimal amount of investment.\r\n   */\r\n  function changeMinInvest(uint256 newMinValue) public onlyOwner {\r\n    minInvestmentValue = newMinValue;\r\n  }\r\n\r\n   /**\r\n   * @dev Set amount of gas for internal transactions.\r\n   */\r\n  function setGasAmount(uint256 _gasAmount) public onlyOwner {\r\n    gasAmount = _gasAmount;\r\n  }\r\n\r\n   /**\r\n   * @dev Start new crowdsale round if already not started.\r\n   */\r\n  function startNewRound(uint256 _rate, uint256 _bonus, address _wallet, ERC20 _token, uint256 _openingTime, uint256 _closingTime) payable public onlyOwner {\r\n    require(!hasOpened());\r\n    bonus = _bonus;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n\r\n    openingTime = _openingTime;\r\n    closingTime = _closingTime;\r\n    tokensRaised = 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp > closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open.\r\n   * @return Whether crowdsale period has opened\r\n   */\r\n  function hasOpened() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return (openingTime < block.timestamp && block.timestamp < closingTime);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () payable external {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) payable public{\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    tokensRaised = tokensRaised.add(tokens);\r\n\r\n    minterContract.mint(_beneficiary, tokens);\r\n    \r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _forwardFunds();\r\n  }\r\n\r\n  /**\r\n   * @dev Pre purchase validation.\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\r\n  internal\r\n  view\r\n  onlyWhileOpen\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0 && _weiAmount > minInvestmentValue);\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    token.safeTransfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n    uint256 mainPart = _weiAmount.mul(rate);\r\n    uint256 bonusPart = mainPart.mul(bonus.div(100));\r\n    return mainPart.add(bonusPart);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    bool isTransferDone = false;\r\n\r\n    if (totalCollectedETH < firstStartBonusCap) {\r\n      uint256 amountToTransfer = msg.value.div(2);\r\n      isTransferDone = bonus_wallet_1.call.value(amountToTransfer).gas(gasAmount)();\r\n      emit TokensTransfer (\r\n        msg.sender,\r\n        wallet,\r\n        msg.value,\r\n        isTransferDone\r\n        );\r\n\r\n      isTransferDone = false;\r\n\r\n      isTransferDone = bonus_wallet_2.call.value(amountToTransfer).gas(gasAmount)();\r\n      emit TokensTransfer (\r\n        msg.sender,\r\n        wallet,\r\n        msg.value,\r\n        isTransferDone\r\n        );\r\n\r\n      totalCollectedETH = totalCollectedETH.add(msg.value);\r\n\r\n    } else if (totalCollectedETH < secondStartBonusCap) {\r\n      isTransferDone = bonus_wallet_1.call.value(msg.value).gas(gasAmount)();\r\n      emit TokensTransfer (\r\n        msg.sender,\r\n        wallet,\r\n        msg.value,\r\n        isTransferDone\r\n        );\r\n      totalCollectedETH = totalCollectedETH.add(msg.value);\r\n\r\n    } else {\r\n      isTransferDone = wallet.call.value(msg.value).gas(gasAmount)();\r\n      emit TokensTransfer (\r\n          msg.sender,\r\n          wallet,\r\n          msg.value,\r\n          isTransferDone\r\n          );\r\n      totalCollectedETH = totalCollectedETH.add(msg.value);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_gasAmount\",\"type\":\"uint256\"}],\"name\":\"setGasAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinValue\",\"type\":\"uint256\"}],\"name\":\"changeMinInvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasOpened\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBonus\",\"type\":\"uint256\"}],\"name\":\"changeBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minterAddr\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestmentValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isDone\",\"type\":\"bool\"}],\"name\":\"TokensTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CrowdsaleWithRoundsMAKEtoken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7d3b05ebed6ca0ea94fc755a84ce8da20810c0889d7d1f1fdfbd2db6225a4575"}]}