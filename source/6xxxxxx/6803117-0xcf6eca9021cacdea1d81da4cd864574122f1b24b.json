{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/// @title ERC-20 interface\r\n/// @dev Full ERC-20 interface is described at https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md.\r\ninterface ERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n\r\n/// @title SafeMath\r\n/// @dev Math operations with safety checks that throw on error.\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/// @title SafeOwnable\r\n/// @dev The SafeOwnable contract has an owner address, and provides basic authorization control\r\n/// functions, this simplifies the implementation of \"user permissions\".\r\ncontract SafeOwnable {\r\n\r\n    // EVENTS\r\n\r\n    event OwnershipProposed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /// @dev The SafeOwnable constructor sets the original `owner` of the contract to the sender account.\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /// @dev Allows the current owner to propose control of the contract to a new owner.\r\n    /// @param newOwner The address to propose ownership to.\r\n    function proposeOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0) && newOwner != _owner);\r\n        _ownerCandidate = newOwner;\r\n        emit OwnershipProposed(_owner, _ownerCandidate);\r\n    }\r\n\r\n    /// @dev Allows the current owner candidate to accept proposed ownership and set actual owner of a contract.\r\n    function acceptOwnership() public onlyOwnerCandidate {\r\n        emit OwnershipTransferred(_owner, _ownerCandidate);\r\n        _owner = _ownerCandidate;\r\n        _ownerCandidate = address(0);\r\n    }\r\n\r\n    /// @dev Returns the address of the owner.\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /// @dev Returns the address of the owner candidate.\r\n    function ownerCandidate() public view returns (address) {\r\n        return _ownerCandidate;\r\n    }\r\n\r\n    // MODIFIERS\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the owner candidate.\r\n    modifier onlyOwnerCandidate() {\r\n        require(msg.sender == _ownerCandidate);\r\n        _;\r\n    }\r\n\r\n    // FIELDS\r\n\r\n    address internal _owner;\r\n    address internal _ownerCandidate;\r\n}\r\n\r\n\r\n/// @title TokenVesting\r\n/// @dev A token holder contract that can release its token balance gradually like a typical\r\n/// vesting scheme, with a cliff and vesting period. Optionally revocable by the owner.\r\ncontract TokenVesting is SafeOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    // EVENTS\r\n\r\n    event Released(uint256 amount);\r\n    event Revoked();\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /// @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n    /// _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n    /// of the balance will have vested.\r\n    /// @param _beneficiary The address of the beneficiary to whom vested tokens are transferred.\r\n    /// @param _cliff The duration in seconds of the cliff in which tokens will begin to vest.\r\n    /// @param _start The time (as Unix time) at which point vesting starts.\r\n    /// @param _duration The duration in seconds of the period in which the tokens will vest.\r\n    /// @param _revocable The flag indicating if the vesting is revocable or not.\r\n    constructor(\r\n        address _beneficiary,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        bool _revocable\r\n    )\r\n        public\r\n    {\r\n        require(_beneficiary != address(0));\r\n        require(_cliff <= _duration);\r\n        beneficiary = _beneficiary;\r\n        start = _start;\r\n        cliff = _start.add(_cliff);\r\n        duration = _duration;\r\n        revocable = _revocable;\r\n    }\r\n\r\n    /// @notice Transfers vested tokens to beneficiary.\r\n    /// @param _token The address of ERC20 token which is being vested.\r\n    function release(ERC20 _token) public {\r\n        uint256 unreleased = releasableAmount(_token);\r\n        require(unreleased > 0);\r\n        released[_token] = released[_token].add(unreleased);\r\n        require(_token.transfer(beneficiary, unreleased));\r\n        emit Released(unreleased);\r\n    }\r\n\r\n    /// @notice Allows the owner to revoke the vesting. Tokens already vested\r\n    /// remain in the contract, the rest are returned to the owner.\r\n    /// @param _token The address of ERC20 token which is being vested.\r\n    function revoke(ERC20 _token) public onlyOwner {\r\n        require(revocable);\r\n        require(!revoked[_token]);\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        uint256 unreleased = releasableAmount(_token);\r\n        uint256 refund = balance.sub(unreleased);\r\n        revoked[_token] = true;\r\n        require(_token.transfer(_owner, refund));\r\n        emit Revoked();\r\n    }\r\n\r\n    /// @dev Calculates the amount that has already vested but hasn't been released yet.\r\n    /// @param _token The address of ERC20 token which is being vested.\r\n    function releasableAmount(ERC20 _token) public view returns (uint256) {\r\n        return vestedAmount(_token).sub(released[_token]);\r\n    }\r\n\r\n    /// @dev Calculates the amount that has already vested.\r\n    /// @param _token The address of ERC20 token which is being vested.\r\n    function vestedAmount(ERC20 _token) public view returns (uint256) {\r\n        uint256 currentBalance = _token.balanceOf(address(this));\r\n        uint256 totalBalance = currentBalance.add(released[_token]);\r\n        if (block.timestamp < cliff) {\r\n            return 0;\r\n        } else if (block.timestamp >= start.add(duration) || revoked[_token]) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(block.timestamp.sub(start)).div(duration);\r\n        }\r\n    }\r\n\r\n    // FIELDS\r\n\r\n    address public beneficiary;\r\n\r\n    uint256 public start;\r\n    uint256 public cliff;\r\n    uint256 public duration;\r\n\r\n    bool public revocable;\r\n\r\n    mapping (address => uint256) public released;\r\n    mapping (address => bool) public revoked;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revocable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"revoked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_revocable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000074d182b9905695930d724f6d6d55d4f8e38ff7a8000000000000000000000000000000000000000000000000000000005c01cf000000000000000000000000000000000000000000000000000000000000f0ee200000000000000000000000000000000000000000000000000000000003c3b8800000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://4a45514ff33623511f7182f2fb6ad058ce752915a61390774d8080bf7560b5a7"}]}