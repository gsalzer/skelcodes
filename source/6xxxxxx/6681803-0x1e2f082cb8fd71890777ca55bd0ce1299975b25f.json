{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\ncontract Prosperity {\r\n\t/**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n\tfunction withdraw() public;\r\n\t\r\n\t/**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeReferralBonus` is 1/true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate. \r\n     */ \r\n    function myDividends(bool _includeReferralBonus) public view returns(uint256);\r\n}\r\n\r\n\r\ncontract Fund {\r\n    using SafeMath for *;\r\n    \r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // administrators can:\r\n    // -> change add or remove devs\r\n    // they CANNOT:\r\n    // -> change contract addresses\r\n    // -> change fees\r\n    // -> disable withdrawals\r\n    // -> kill the contract\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrator_ == _customerAddress);\r\n        _;\r\n    }\r\n    \r\n    \r\n    /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    address internal administrator_;\r\n    address internal lending_;\r\n    address internal freeFund_;\r\n    address[] public devs_;\r\n\t\r\n\t// token exchange contract\r\n\tProsperity public tokenContract_;\r\n    \r\n    // distribution percentages\r\n    uint8 internal lendingShare_ = 50;\r\n    uint8 internal freeFundShare_ = 20;\r\n    uint8 internal devsShare_ = 30;\r\n    \r\n    \r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS           =\r\n    =======================================*/\r\n    constructor()\r\n        public \r\n    {\r\n        // set addresses\r\n        administrator_ = 0x28436C7453EbA01c6EcbC8a9cAa975f0ADE6Fff1;\r\n        lending_ = 0x961FA070Ef41C2b68D1A50905Ea9198EF7Dbfbf8;\r\n        freeFund_ = 0x0cCA1e8Db144d2E4a8F2A80828E780a1DC9C5112;\r\n        \r\n        // Add devs\r\n        devs_.push(0x28436C7453EbA01c6EcbC8a9cAa975f0ADE6Fff1); // Tobi\r\n        devs_.push(0x92be79705F4Fab97894833448Def30377bc7267A); // Fabi\r\n        devs_.push(0x000929719742ec6E0bFD0107959384F7Acd8F883); // Lukas\r\n        devs_.push(0x5289f0f0E8417c7475Ba33E92b1944279e183B0C); // Julian\r\n    }\r\n\t\r\n\tfunction() payable external {\r\n\t\t// prevent invalid or unintentional calls\r\n\t\t//require(msg.data.length == 0);\r\n\t}\r\n    \r\n    /**\r\n     * Distribute ether to lending, freeFund and devs\r\n     */\r\n    function pushEther()\r\n        public\r\n    {\r\n\t\t// get dividends (mainly referral)\r\n\t\tif (myDividends(true) > 0) {\r\n\t\t\ttokenContract_.withdraw();\r\n\t\t}\r\n\t\t\r\n\t\t// current balance (after withdraw)\r\n        uint256 _balance = getTotalBalance();\r\n        \r\n\t\t// distributed reinvestments\r\n        if (_balance > 0) {\r\n            uint256 _ethDevs      = _balance.mul(devsShare_).div(100);          // total of 30%\r\n            uint256 _ethFreeFund  = _balance.mul(freeFundShare_).div(100);      // total of 20%\r\n            uint256 _ethLending   = _balance.sub(_ethDevs).sub(_ethFreeFund);   // approx. 50%\r\n            \r\n            lending_.transfer(_ethLending);\r\n            freeFund_.transfer(_ethFreeFund);\r\n            \r\n            uint256 _devsCount = devs_.length;\r\n            for (uint8 i = 0; i < _devsCount; i++) {\r\n                uint256 _ethDevPortion = _ethDevs.div(_devsCount);\r\n                address _dev = devs_[i];\r\n                _dev.transfer(_ethDevPortion);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Add a dev to the devs fund pool.\r\n     */\r\n    function addDev(address _dev)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        // address must not be dev before, we do not want duplicates\r\n        require(!isDev(_dev), \"address is already dev\");\r\n        \r\n        devs_.push(_dev);\r\n    }\r\n    \r\n    /**\r\n     * Remove a dev from the devs fund pool.\r\n     */\r\n    function removeDev(address _dev)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        // address must be dev before, we need a dev address to be able to remove him\r\n        require(isDev(_dev), \"address is not a dev\");\r\n        \r\n        // get index and delte dev\r\n        uint8 index = getDevIndex(_dev);\r\n        \r\n        // close gap in dev list\r\n        uint256 _devCount = getTotalDevs();\r\n        for (uint8 i = index; i < _devCount - 1; i++) {\r\n            devs_[i] = devs_[i+1];\r\n        }\r\n        delete devs_[devs_.length-1];\r\n        devs_.length--;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Check if given address is dev or not\r\n     */\r\n    function isDev(address _dealer) \r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        uint256 _devsCount = devs_.length;\r\n        \r\n        for (uint8 i = 0; i < _devsCount; i++) {\r\n            if (devs_[i] == _dealer) {\r\n                return true;\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    \r\n    // VIEW FUNCTIONS\r\n    function getTotalBalance() \r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function getTotalDevs()\r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        return devs_.length;\r\n    }\r\n\t\r\n\tfunction myDividends(bool _includeReferralBonus)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(uint256)\r\n\t{\r\n\t\treturn tokenContract_.myDividends(_includeReferralBonus);\r\n\t}\r\n    \r\n    \r\n    // INTERNAL FUNCTIONS\r\n    /**\r\n     * Check index of given address\r\n     */\r\n    function getDevIndex(address _dev)\r\n        internal\r\n        view\r\n        returns(uint8)\r\n    {\r\n        uint256 _devsCount = devs_.length;\r\n        \r\n        for (uint8 i = 0; i < _devsCount; i++) {\r\n            if (devs_[i] == _dev) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\t\r\n\t// SETTER\r\n\t/**\r\n\t * Set the token contract\r\n\t */\r\n\tfunction setTokenContract(address _tokenContract)\r\n\t\tonlyAdministrator()\r\n\t\tpublic\r\n\t{\r\n\t\ttokenContract_ = Prosperity(_tokenContract);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_dealer\",\"type\":\"address\"}],\"name\":\"isDev\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalDevs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"addDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"removeDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pushEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"devs_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Fund","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dd9f1ea078bb9a01d32106d800cf4d9b0896134defefba5f1501af696f97b87a"}]}