{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*** @title SafeMath*/\r\nlibrary SafeMath {\r\n\tfunction mul(uint a, uint b) internal returns (uint) {\r\n\t\tuint c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\tfunction div(uint a, uint b) internal returns (uint) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\tfunction sub(uint a, uint b) internal returns (uint) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\tfunction add(uint a, uint b) internal returns (uint) {\r\n\t\tuint c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\tfunction max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\tfunction min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\tfunction max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\tfunction min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\tfunction assert(bool assertion) internal {\r\n\t\tif (!assertion) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/*** @title ERC20 interface */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);  \r\n  function balanceOf(address _owner) public view returns (uint256);  \r\n  function transfer(address _to, uint256 _value) public returns (bool);  \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);  \r\n  function approve(address _spender, uint256 _value) public returns (bool);  \r\n  function allowance(address _owner, address _spender) public view returns (uint256);  \r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);  \r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/*** @title ERC223 interface */\r\ncontract ERC223ReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\ncontract ERC223 {\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public returns(bool);\r\n    function transfer(address to, uint value, bytes data) public returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint value); //ERC 20 style\r\n    //event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n/*** @title ERC223 token */\r\ncontract ERC223Token is ERC223{\r\n\tusing SafeMath for uint;\r\n\r\n\tmapping(address => uint256) balances;\r\n  \r\n\tfunction transfer(address _to, uint _value) public returns(bool){\r\n\t\tuint codeLength;\r\n\t\tbytes memory empty;\r\n\t\tassembly {\r\n\t\t\t// Retrieve the size of the code on target address, this needs assembly .\r\n\t\t\tcodeLength := extcodesize(_to)\r\n\t\t}\r\n\r\n\t\trequire(_value > 0);\r\n\t\trequire(balances[msg.sender] >= _value);\r\n\t\trequire(balances[_to]+_value > 0);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tif(codeLength>0) {\r\n\t\t\tERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n\t\t\treceiver.tokenFallback(msg.sender, _value, empty);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n  \r\n\tfunction transfer(address _to, uint _value, bytes _data) public returns(bool){\r\n\t\t// Standard function transfer similar to ERC20 transfer with no _data .\r\n\t\t// Added due to backwards compatibility reasons .\r\n\t\tuint codeLength;\r\n\t\tassembly {\r\n\t\t\t// Retrieve the size of the code on target address, this needs assembly .\r\n\t\t\tcodeLength := extcodesize(_to)\r\n\t\t}\r\n\r\n\t\trequire(_value > 0);\r\n\t\trequire(balances[msg.sender] >= _value);\r\n\t\trequire(balances[_to]+_value > 0);\r\n\t\t\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tif(codeLength>0) {\r\n\t\t\tERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n\t\t\treceiver.tokenFallback(msg.sender, _value, _data);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t} \r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256) {    \r\n\t\treturn balances[_owner];\r\n\t}\r\n  \r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////\r\n//////////////////////// [Ding token] MAIN ////////////////////////\r\n//////////////////////////////////////////////////////////////////////////\r\n/*** @title Owned */\r\ncontract Owned {\r\n\taddress public owner;\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\t//owner = 0x43Fb2e04aC5B382Fc6ff29Ac34D3Ca221cEE402E;\r\n\t}\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n}\r\n/*** @title Ding Token */\r\ncontract DING is ERC223Token, Owned{\r\n    \r\n    string public constant name = \"Ding Ding Token\";\r\n    string public constant symbol = \"DING\";\r\n    uint8  public constant decimals = 18;\r\n\r\n    uint256 public tokenRemained = 2 * (10 ** 9) * (10 ** 18); // 2 billion DING, decimals set to 18\r\n    uint256 public totalSupply   = 2 * (10 ** 9) * (10 ** 18);\r\n    \r\n\r\n    bool public pause=false;\r\n\r\n    mapping(address => bool) lockAddresses;\r\n    \r\n    // constructor\r\n    function DING(){    \r\n        //allocate to ______\r\n        balances[0xd8686d2aB1a65149FDd4ee36c60d161c274C41e0]= totalSupply;\r\n    \temit Transfer(0x0,0xd8686d2aB1a65149FDd4ee36c60d161c274C41e0,totalSupply);\r\n    }\r\n\r\n    // change the contract owner\r\n    event ChangeOwner(address indexed _from,address indexed _to);\r\n    function changeOwner(address _new) public onlyOwner{\r\n        emit ChangeOwner(owner,_new);\r\n        owner=_new;\r\n    }\r\n\r\n\r\n    \r\n\r\n    // pause all the transfer on the contract \r\n    event PauseContract();\r\n    function pauseContract() public onlyOwner{\r\n        pause = true;\r\n        emit PauseContract();\r\n    }\r\n    event ResumeContract();\r\n    function resumeContract() public onlyOwner{\r\n        pause = false;\r\n        emit ResumeContract();\r\n    }\r\n    function is_contract_paused() public view returns(bool){\r\n        return pause;\r\n    }\r\n    \r\n\r\n    // lock one's wallet\r\n    event Lock(address _addr);\r\n    function lock(address _addr) public onlyOwner{\r\n        lockAddresses[_addr] = true; \r\n        emit Lock(_addr);\r\n    }\r\n    event Unlock(address _addr);\r\n    function unlock(address _addr) public onlyOwner{\r\n        lockAddresses[_addr] = false;\r\n        emit Unlock(_addr); \r\n    }\r\n    function am_I_locked(address _addr) public view returns(bool){\r\n    \treturn lockAddresses[_addr];\r\n    }\r\n    \r\n  \r\n    // eth\r\n    \r\n  \t\r\n    function() payable {\r\n    \r\n    }\r\n    \r\n    function getETH(uint256 _amount) public onlyOwner{\r\n        msg.sender.transfer(_amount);\r\n    }\r\n     \r\n\r\n    /////////////////////////////////////////////////////////////////////\r\n    ///////////////// ERC223 Standard functions /////////////////////////\r\n    /////////////////////////////////////////////////////////////////////\r\n    modifier transferable(address _addr) {\r\n        require(!pause);\r\n    \trequire(!lockAddresses[_addr]);\r\n    \t_;\r\n    }\r\n    function transfer(address _to, uint _value, bytes _data) public transferable(msg.sender) returns (bool) {\r\n    \treturn super.transfer(_to, _value, _data);\r\n    }\r\n    function transfer(address _to, uint _value) public transferable(msg.sender) returns (bool) {\r\n\t\treturn super.transfer(_to, _value);\r\n    }\r\n\r\n\r\n    /////////////////////////////////////////////////////////////////////\r\n    ///////////////////  Rescue functions  //////////////////////////////\r\n    /////////////////////////////////////////////////////////////////////\r\n    function transferAnyERC20Token(address _tokenAddress, uint256 _value) public onlyOwner returns (bool) {\r\n    \treturn ERC20(_tokenAddress).transfer(owner, _value);\r\n  \t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRemained\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"am_I_locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_contract_paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ResumeContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DING","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://090141f816ddfe65e7232fb1563b7b1e4b55d87126fd5145de2d9477eb1af9c2"}]}