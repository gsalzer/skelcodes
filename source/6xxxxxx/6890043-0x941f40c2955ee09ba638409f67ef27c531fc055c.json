{"status":"1","message":"OK","result":[{"SourceCode":"# Contract multisend\r\n# This contract is meant to send ethereum\r\n# and ethereum tokens to several addresses\r\n# in at most two ethereum transactions\r\n\r\n# erc20 token abstract\r\nclass Token():\r\n    def transfer(_to: address, _value: uint256) -> bool: modifying\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool: modifying\r\n    def allowance(_owner: address, _spender: address) -> uint256: constant\r\n\r\n\r\n# Events\r\n\r\n\r\n\r\n# Variables\r\nowner: public(address)\r\nsendTokenFee: public(wei_value) # wei\r\nsendEthFee: public(wei_value) # wei\r\n\r\n\r\n# Functions\r\n\r\n# Set owner of the contract\r\n@public\r\n@payable\r\ndef __init__():\r\n    self.owner = msg.sender\r\n\r\n\r\n# MultisendEther\r\n# accepts lists of addresses and corresponding amounts to be sent to them\r\n# calculates the total amount and add fee\r\n# distribute ether if sent ether is suficient\r\n# return change back to the owner\r\n@public\r\n@payable\r\ndef multiSendEther(addresses: address[100], amounts: wei_value[100]) -> bool:\r\n    sender: address = msg.sender\r\n    total: wei_value = as_wei_value(0, \"wei\")\r\n    zero_wei: wei_value = total\r\n    value_sent: wei_value = msg.value\r\n    \r\n    # calculate total\r\n    for n in range(100):\r\n        if(amounts[n] <= zero_wei):\r\n            break\r\n        total += amounts[n]\r\n        \r\n    # required amount is amount plus fee\r\n    requiredAmount: wei_value = total + (self.sendEthFee)\r\n\r\n    # Check if sufficient eth amount was sent\r\n    assert value_sent >= requiredAmount\r\n\r\n    # Distribute ethereum\r\n    for n in range(100):\r\n        if(amounts[n] <= zero_wei):\r\n            break\r\n        send(addresses[n], as_wei_value(amounts[n], \"wei\"))\r\n\r\n    # Send back excess amount\r\n    if value_sent > requiredAmount:\r\n        change: wei_value = value_sent - requiredAmount\r\n        send(sender, as_wei_value(change, \"wei\"))\r\n\r\n    return True\r\n\r\n\r\n# Multisend tokens\r\n# accepts token address, lists of addresses and corresponding amounts to be sent to them\r\n# calculates the total amount and add fee\r\n# distribute ether if sent ether is suficient\r\n# return change back to the owner\r\n@public\r\n@payable\r\ndef multiSendToken(tokenAddress: address, addresses: address[100], amounts: uint256[100]) -> bool:\r\n    sender: address = msg.sender\r\n    total: int128 = 0\r\n    value_sent: wei_value = msg.value\r\n    for amount in amounts:\r\n        total += convert(amount, int128)\r\n\r\n    requiredWeiAmount: wei_value = self.sendTokenFee\r\n\r\n    # Check if the correct amount of ether was sent\r\n    assert value_sent >= requiredWeiAmount\r\n\r\n    # Check if this contract is allowed to transfer\r\n    # the required amount of token\r\n    assert Token(tokenAddress).allowance(sender, self) >= convert(total, uint256)\r\n\r\n    # Distribute the token\r\n    for n in range(100):\r\n        if amounts[n] <= 0:\r\n            break\r\n        assert Token(tokenAddress).transferFrom(sender, addresses[n], amounts[n])\r\n\r\n    # Send back excess amount\r\n    if value_sent > requiredWeiAmount:\r\n        change: wei_value = value_sent - requiredWeiAmount\r\n        send(sender, as_wei_value(change, \"wei\"))\r\n\r\n    return True\r\n\r\n\r\n# Other functions\r\n@public\r\n@constant\r\ndef getBalance(_address: address) -> wei_value:\r\n    return _address.balance\r\n\r\n\r\n@public\r\n@constant\r\ndef calc_total(numbs: wei_value[100]) -> wei_value:\r\n    total: wei_value = as_wei_value(0, \"wei\")\r\n    zero_wei: wei_value = total\r\n    for numb in numbs:\r\n        if(as_wei_value(numb, \"wei\") <= zero_wei):\r\n            break\r\n        total += as_wei_value(numb, \"wei\")\r\n    return total\r\n\r\n    \r\n@public\r\n@constant\r\ndef find(numbs: wei_value[100], n: int128) -> wei_value:\r\n    return numbs[n]\r\n\r\n@public\r\n@payable\r\ndef deposit() -> bool:\r\n    return True\r\n\r\n\r\n@public\r\ndef withdrawEther(_to: address, _value: uint256) -> bool:\r\n    assert msg.sender == self.owner\r\n    send(_to, as_wei_value(_value, \"wei\"))\r\n    return True\r\n\r\n@public\r\ndef withdrawToken(tokenAddress: address, _to: address, _value: uint256) -> bool:\r\n    assert msg.sender == self.owner\r\n    assert Token(tokenAddress).transfer(_to, _value)\r\n    return True\r\n\r\n\r\n@public\r\ndef setSendTokenFee(_sendTokenFee: uint256) -> bool:\r\n    assert msg.sender == self.owner\r\n    self.sendTokenFee = as_wei_value(_sendTokenFee, \"wei\")\r\n    return True\r\n\r\n\r\n@public\r\ndef setSendEthFee(_sendEthFee: wei_value) -> bool:\r\n    assert msg.sender == self.owner\r\n    self.sendEthFee = _sendEthFee\r\n    return True\r\n\r\n\r\n@public\r\ndef destroy(_to: address):\r\n    assert msg.sender == self.owner\r\n    selfdestruct(_to)","ABI":"[{\"name\":\"__init__\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":true,\"type\":\"constructor\"},{\"name\":\"multiSendEther\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address[100]\",\"name\":\"addresses\"},{\"type\":\"uint256[100]\",\"name\":\"amounts\"}],\"constant\":false,\"payable\":true,\"type\":\"function\",\"gas\":3602628},{\"name\":\"multiSendToken\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"tokenAddress\"},{\"type\":\"address[100]\",\"name\":\"addresses\"},{\"type\":\"uint256[100]\",\"name\":\"amounts\"}],\"constant\":false,\"payable\":true,\"type\":\"function\",\"gas\":296324},{\"name\":\"getBalance\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_address\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":803},{\"name\":\"calc_total\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256[100]\",\"name\":\"numbs\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":41676},{\"name\":\"find\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256[100]\",\"name\":\"numbs\"},{\"type\":\"int128\",\"name\":\"n\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1183},{\"name\":\"deposit\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[],\"constant\":false,\"payable\":true,\"type\":\"function\",\"gas\":343},{\"name\":\"withdrawEther\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_value\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":35639},{\"name\":\"withdrawToken\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"tokenAddress\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_value\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":2799},{\"name\":\"setSendTokenFee\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_sendTokenFee\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":35851},{\"name\":\"setSendEthFee\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_sendEthFee\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":35873},{\"name\":\"destroy\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_to\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":25924},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":813},{\"name\":\"sendTokenFee\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":843},{\"name\":\"sendEthFee\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":873}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.1.0b4","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":""}]}