{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// Random lottery\r\n// Smart contracts can't bet\r\n\r\n// Pay 0.001 to get a random number\r\n// If your random number is the highest so far you're in the lead\r\n// If no one beats you in 1 day you can claim your winnnings - half of the pot.\r\n\r\n// Three pots total - hour long, day long, and week long.\r\n// Successfully getting the highest value on one of them resets only that one.\r\n\r\n// When you bet, you bet for ALL THREE pots. (each is a different random number)\r\n\r\ncontract RandoLotto {\r\n    \r\n    bool activated;\r\n    address internal owner;\r\n    uint256 internal devFee;\r\n    uint256 internal seed;\r\n    \r\n    uint256 public totalBids;\r\n    \r\n    // Three pots\r\n    uint256 public hourPot;\r\n    uint256 public dayPot;\r\n    uint256 public weekPot;\r\n    \r\n    // Each put has a current winner\r\n    address public hourPotLeader;\r\n    address public dayPotLeader;\r\n    address public weekPotLeader;\r\n    \r\n    // Each pot has a current high score\r\n    uint256 public hourPotHighscore;\r\n    uint256 public dayPotHighscore;\r\n    uint256 public weekPotHighscore;\r\n    \r\n    // Each pot has an expiration - reset when someone else takes leader of that pot\r\n    uint256 public hourPotExpiration;\r\n    uint256 public dayPotExpiration;\r\n    uint256 public weekPotExpiration;\r\n    \r\n    struct threeUints {\r\n        uint256 a;\r\n        uint256 b; \r\n        uint256 c;\r\n    }\r\n    \r\n    mapping (address => threeUints) playerLastScores;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor () public {\r\n        owner = msg.sender;\r\n        \r\n        activated = false;\r\n        totalBids = 0;\r\n        \r\n        hourPotHighscore = 0;\r\n        dayPotHighscore = 0;\r\n        weekPotHighscore = 0;\r\n        \r\n        hourPotLeader = msg.sender;\r\n        dayPotLeader = msg.sender;\r\n        weekPotLeader = msg.sender;\r\n    }\r\n    \r\n    function activate() public payable onlyOwner {\r\n        require(!activated);\r\n        require(msg.value >= 0 ether);\r\n        \r\n        hourPotExpiration = now + 1 hours;\r\n        dayPotExpiration = now + 1 days;\r\n        weekPotExpiration = now + 1 weeks;\r\n        \r\n        hourPot = msg.value / 3;\r\n        dayPot = msg.value / 3;\r\n        weekPot = msg.value - hourPot - dayPot;\r\n        \r\n        activated = true;\r\n    }\r\n    \r\n    // Fallback function calls bid.\r\n    function () public payable {\r\n        bid();\r\n    }\r\n    \r\n    // Bid function.\r\n    function bid() public payable returns (uint256, uint256, uint256) {\r\n        // Humans only unlike F3D\r\n        require(msg.sender == tx.origin);\r\n        require(msg.value == 0.001 ether);\r\n\r\n        checkRoundEnd();\r\n\r\n        // Add monies to pot\r\n        devFee = devFee + (msg.value / 100);\r\n        uint256 toAdd = msg.value - devFee;\r\n        hourPot = hourPot + (toAdd / 3);\r\n        dayPot = dayPot + (toAdd / 3);\r\n        weekPot = weekPot + (toAdd - ((toAdd/3) + (toAdd/3)));\r\n\r\n        // Random number via blockhash    \r\n        seed = uint256(keccak256(blockhash(block.number - 1), seed, now));\r\n        uint256 seed1 = seed;\r\n        \r\n        if (seed > hourPotHighscore) {\r\n            hourPotLeader = msg.sender;\r\n            hourPotExpiration = now + 1 hours;\r\n            hourPotHighscore = seed;\r\n        }\r\n        \r\n        seed = uint256(keccak256(blockhash(block.number - 1), seed, now));\r\n        uint256 seed2 = seed;\r\n        \r\n        if (seed > dayPotHighscore) {\r\n            dayPotLeader = msg.sender;\r\n            dayPotExpiration = now + 1 days;\r\n            dayPotHighscore = seed;\r\n        }\r\n        \r\n        seed = uint256(keccak256(blockhash(block.number - 1), seed, now));\r\n        uint256 seed3 = seed;\r\n        \r\n        if (seed > weekPotHighscore) {\r\n            weekPotLeader = msg.sender;\r\n            weekPotExpiration = now + 1 weeks;\r\n            weekPotHighscore = seed;\r\n        }\r\n        \r\n        totalBids++;\r\n        \r\n        playerLastScores[msg.sender] = threeUints(seed1, seed2, seed3);\r\n        return (seed1, seed2, seed3);\r\n    }\r\n    \r\n    function checkRoundEnd() internal {\r\n        if (now > hourPotExpiration) {\r\n            uint256 hourToSend = hourPot / 2;\r\n            hourPot = hourPot - hourToSend;\r\n            hourPotLeader.transfer(hourToSend);\r\n            hourPotLeader = msg.sender;\r\n            hourPotHighscore = 0;\r\n            hourPotExpiration = now + 1 hours;\r\n        }\r\n        \r\n        if (now > dayPotExpiration) {\r\n            uint256 dayToSend = dayPot / 2;\r\n            dayPot = dayPot - dayToSend;\r\n            dayPotLeader.transfer(dayToSend);\r\n            dayPotLeader = msg.sender;\r\n            dayPotHighscore = 0;\r\n            dayPotExpiration = now + 1 days;\r\n        }\r\n        \r\n        if (now > weekPotExpiration) {\r\n            uint256 weekToSend = weekPot / 2;\r\n            weekPot = weekPot - weekToSend;\r\n            weekPotLeader.transfer(weekToSend);\r\n            weekPotLeader = msg.sender;\r\n            weekPotHighscore = 0;\r\n            weekPotExpiration = now + 1 weeks;\r\n        }\r\n    }\r\n    \r\n    function claimWinnings() public {\r\n        checkRoundEnd();\r\n    }\r\n    \r\n    function getMyLastScore() public view returns (uint256, uint256, uint256) {\r\n        return (playerLastScores[msg.sender].a, playerLastScores[msg.sender].b, playerLastScores[msg.sender].c);\r\n    }\r\n    \r\n    function devWithdraw() public onlyOwner {\r\n        uint256 toSend = devFee;\r\n        devFee = 0;\r\n        owner.transfer(toSend);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"dayPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hourPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayPotLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyLastScore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayPotHighscore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hourPotLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekPotExpiration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekPotHighscore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"devWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimWinnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hourPotHighscore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayPotExpiration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hourPotExpiration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekPotLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"RandoLotto","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://31ea800f327384cf2fea4d6fa3740e514062df1715b4149bef5765da16241a5d"}]}