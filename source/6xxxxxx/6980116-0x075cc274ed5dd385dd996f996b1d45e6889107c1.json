{"status":"1","message":"OK","result":[{"SourceCode":"contract PostboyRejectSetting {\r\n   \r\n    address public adminAddress;\r\n\r\n    uint256 public minTimeForReject;\r\n    bool public isRejectEnabled;\r\n\r\n    modifier isAdmin() {\r\n        require(msg.sender == adminAddress);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        adminAddress = msg.sender;\r\n        minTimeForReject = 0;\r\n        isRejectEnabled = false;\r\n    }\r\n\r\n    function changeRejectSetting(uint256 rejectTime, bool isEnabled) isAdmin public {\r\n        minTimeForReject = rejectTime;\r\n        isRejectEnabled = isEnabled;\r\n    }\r\n}\r\ncontract PostboyAccount {\r\n\r\n    struct Mail {\r\n        bytes16 mailText;\r\n        bytes16 responseText;\r\n        uint256 paySum;\r\n        bool isPublic;\r\n        bool isRead;\r\n        address sender;\r\n        bool hasLike;\r\n        bool isDislike;\r\n        bool isRejected;\r\n        uint256 createdTime;\r\n    }\r\n\r\n    Mail[] public mails;\r\n    uint256[] public withdraws;\r\n\r\n    address public owner;\r\n    address public donateWallet;\r\n    address public serviceWallet;\r\n    PostboyRejectSetting public rejectConfig;\r\n    address public adminWallet;\r\n    uint256 public servicePercent;\r\n    bytes16 public guid;\r\n\r\n    bool public isOwnerInitialized;\r\n\r\n    uint256 public minPay;\r\n    uint256 public donatePercent;\r\n    uint256 public frozenBalance;\r\n\r\n    modifier isOwner() {\r\n        require(isOwnerInitialized);\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isAdmin() {\r\n        require(msg.sender == adminWallet);\r\n        _;\r\n    }\r\n\r\n\r\n    constructor(uint256 _minPay, uint256 _donatePercent, uint256 _servicePercent, bytes16 _guid, address _donateWallet, address _serviceWallet, address _owner, address _admin, PostboyRejectSetting _rejectConfig) public {\r\n        require(_donatePercent < 50);\r\n        \r\n        donateWallet = _donateWallet;\r\n        serviceWallet = _serviceWallet;\r\n        servicePercent = _servicePercent;\r\n        guid = _guid;\r\n        donateWallet = _donateWallet;\r\n        donatePercent = _donatePercent;\r\n        frozenBalance = 0;\r\n        minPay = _minPay;\r\n        adminWallet = _admin;\r\n        rejectConfig = _rejectConfig;\r\n\r\n        if(_owner == address(0)) {\r\n            owner = address(0);\r\n            isOwnerInitialized = false;\r\n        } else {\r\n            owner = _owner;\r\n            isOwnerInitialized = true;\r\n        }\r\n    }\r\n\r\n    function initOwner(address _owner) isAdmin public {\r\n        require(isOwnerInitialized == false);\r\n\r\n        owner = _owner;\r\n        isOwnerInitialized = true;\r\n    }\r\n \r\n    function sendMail(bytes16 mailText, bool isPublic) payable public {\r\n        require(msg.value >= minPay);\r\n\r\n        uint256 serviceSum = (msg.value / 100)*servicePercent;\r\n        serviceWallet.transfer(serviceSum);\r\n\r\n        frozenBalance += msg.value - serviceSum;\r\n\r\n        mails.push(Mail(mailText, bytes16(0), (msg.value - serviceSum), isPublic, false, msg.sender, false, false, false, now));\r\n    }    \r\n    \r\n    function rejectMail(uint256 mailIndex) public {\r\n        require(mails[mailIndex].sender == msg.sender);\r\n        require(mails[mailIndex].isRead == false);\r\n        require(mails[mailIndex].isRejected == false);\r\n\r\n        require(rejectConfig.isRejectEnabled() == true);\r\n        require(mails[mailIndex].createdTime + rejectConfig.minTimeForReject() < now);\r\n\r\n        mails[mailIndex].isRejected = true;\r\n        frozenBalance -= mails[mailIndex].paySum;\r\n\r\n        msg.sender.transfer(mails[mailIndex].paySum);\r\n    }\r\n\r\n    function readMail(uint256 mailIndex, bytes16 responseText) isOwner public {\r\n        require(mails[mailIndex].isRead == false);\r\n\r\n        mails[mailIndex].responseText = responseText;\r\n        mails[mailIndex].isRead = true;\r\n        frozenBalance -= mails[mailIndex].paySum;\r\n\r\n        uint256 donateSum = (mails[mailIndex].paySum / 100)*donatePercent;\r\n        donateWallet.transfer(donateSum);\r\n    }\r\n\r\n    function readMailByAdmin(uint256 mailIndex, bytes16 responseText) isAdmin public {\r\n        require(mails[mailIndex].isRead == false);\r\n\r\n        mails[mailIndex].responseText = responseText;\r\n        mails[mailIndex].isRead = true;\r\n        frozenBalance -= mails[mailIndex].paySum;\r\n\r\n        uint256 donateSum = (mails[mailIndex].paySum / 100)*donatePercent;\r\n        donateWallet.transfer(donateSum);\r\n    }\r\n\r\n    function withdrawMoney(uint256 amount) isOwner public {\r\n        require(address(this).balance - frozenBalance >= amount);\r\n        \r\n        withdraws.push(amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function withdrawMoneyByAdmin(uint256 amount) isAdmin public {\r\n        require(address(this).balance - frozenBalance >= amount);\r\n\r\n        withdraws.push(amount);\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function updateConfig(uint256 _minPay, uint256 _donatePercent) isOwner public {\r\n        require(_donatePercent < 50);\r\n        \r\n        minPay = _minPay;\r\n        donatePercent = _donatePercent;\r\n    }\r\n\r\n    function addLike(uint256 mailIndex, bool isDislike) public {\r\n        require(mailIndex < mails.length);\r\n        require(mails[mailIndex].sender == msg.sender);\r\n        require(mails[mailIndex].isRead == true);\r\n        require(mails[mailIndex].hasLike == false);\r\n\r\n        mails[mailIndex].hasLike = true;\r\n        mails[mailIndex].isDislike = isDislike;\r\n    }\r\n \r\n    function countMails() constant public returns(uint256 length) {\r\n        return mails.length;\r\n    }\r\n\r\n    function countWithdraws() constant public returns(uint256 length) {\r\n        return withdraws.length;\r\n    }\r\n\r\n    function getAccountStatus() constant public returns(uint256 donatePercentVal, uint256 minPaySum, uint256 frozenBalanceSum, uint256 fullBalance, uint256 countMails, uint256 counWithdraws, bool ownerInitialized) {\r\n        return (donatePercent, minPay, frozenBalance, address(this).balance, mails.length, withdraws.length, isOwnerInitialized);\r\n    }\r\n}\r\ncontract PostboyFactory {\r\n    struct Account {\r\n        address contractAddress;\r\n        address ownerAddress;\r\n    }\r\n\r\n    Account[] public accounts;\r\n\r\n    address public adminAddress;\r\n    address public factoryAdminAddress;\r\n    address public donateWallet;\r\n    address public serviceWallet;\r\n    PostboyRejectSetting public rejectSettings;\r\n    uint256 public servicePercent;\r\n\r\n\r\n    modifier isFactoryAdmin() {\r\n        require(msg.sender == factoryAdminAddress);\r\n        _;\r\n    }\r\n\r\n    modifier isAdmin() {\r\n        require(msg.sender == adminAddress);\r\n        _;\r\n    }\r\n\r\n    constructor(address _donateWallet, address _serviceWallet, PostboyRejectSetting _rejectSettings, address _factoryAdminAddress) public {\r\n        donateWallet = _donateWallet;\r\n        serviceWallet = _serviceWallet;\r\n        adminAddress = msg.sender;\r\n        rejectSettings = _rejectSettings;\r\n        servicePercent = 10;\r\n        factoryAdminAddress = _factoryAdminAddress;\r\n    }\r\n \r\n    function createPostboyAccount(uint256 minPay, uint256 donatePercent, bytes16 guid) public {\r\n        address createdAccount = new PostboyAccount(\r\n                            minPay, \r\n                            donatePercent,\r\n                            servicePercent, \r\n                            guid,\r\n                            donateWallet,\r\n                            serviceWallet,\r\n                            msg.sender,\r\n                            address(this),\r\n                            rejectSettings\r\n        );\r\n        accounts.push(Account(createdAccount, msg.sender));\r\n    }\r\n\r\n    function createPostboyAccountForSomeone(uint256 minPay, uint256 donatePercent, bytes16 guid) isFactoryAdmin public {\r\n        address createdAccount = new PostboyAccount(\r\n                            minPay, \r\n                            donatePercent,\r\n                            servicePercent, \r\n                            guid,\r\n                            donateWallet,\r\n                            serviceWallet,\r\n                            address(0),\r\n                            address(this),\r\n                            rejectSettings\r\n        );\r\n        accounts.push(Account(createdAccount, address(0)));\r\n    }\r\n \r\n    function countAccounts() public constant returns(uint length) {\r\n        return accounts.length;\r\n    }\r\n\r\n    function changeServicePercent(uint256 newPercent) isAdmin public {\r\n        require(newPercent <= 10);\r\n        require(newPercent >= 0);\r\n\r\n        servicePercent = newPercent;\r\n    }\r\n\r\n    function changeFactoryAdmin(address _admin) isAdmin public {\r\n        factoryAdminAddress = _admin;\r\n    }\r\n\r\n    \r\n\r\n    function initOwner(address ownerAddress, address contractAddress) isFactoryAdmin public {\r\n        PostboyAccount(contractAddress).initOwner(ownerAddress);\r\n    }\r\n\r\n    function readMailByAdmin(uint256 mailIndex, bytes16 responseText, address contractAddress) isFactoryAdmin public {\r\n        PostboyAccount(contractAddress).readMailByAdmin(mailIndex, responseText);\r\n    }\r\n\r\n    function withdrawMoneyByAdmin(uint256 amount, address contractAddress) isFactoryAdmin public {\r\n        PostboyAccount(contractAddress).withdrawMoneyByAdmin(amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"factoryAdminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donateWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"changeServicePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minPay\",\"type\":\"uint256\"},{\"name\":\"donatePercent\",\"type\":\"uint256\"},{\"name\":\"guid\",\"type\":\"bytes16\"}],\"name\":\"createPostboyAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serviceWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rejectSettings\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minPay\",\"type\":\"uint256\"},{\"name\":\"donatePercent\",\"type\":\"uint256\"},{\"name\":\"guid\",\"type\":\"bytes16\"}],\"name\":\"createPostboyAccountForSomeone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mailIndex\",\"type\":\"uint256\"},{\"name\":\"responseText\",\"type\":\"bytes16\"},{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"readMailByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"withdrawMoneyByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"servicePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countAccounts\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeFactoryAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_donateWallet\",\"type\":\"address\"},{\"name\":\"_serviceWallet\",\"type\":\"address\"},{\"name\":\"_rejectSettings\",\"type\":\"address\"},{\"name\":\"_factoryAdminAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PostboyFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c241177e508a0a8d0d16ef6c2b0ce9613a159de30000000000000000000000006bf4ac662f183f3ba1960bd6d6691b7613589d23000000000000000000000000951d1df1182b637a2563694c9856b822df0be83d00000000000000000000000097e05840cf01f02895f038d4f027732c73d41673","Library":"","SwarmSource":"bzzr://8817bfe23d2bcd928a9e8414b596f07a4785fa3a2d815e155daf77c05889d53d"}]}