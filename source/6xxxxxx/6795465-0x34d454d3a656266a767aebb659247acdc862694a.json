{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * Телеграмм чат: https://t.me/EasyInvest_6\r\n * \r\n * Easy Investment Contract 6%\r\n * Старт проекта: 30 ноября 2018 по блоку 6801500 [приблизительно в 20:00:00 по МСК]\r\n *\r\n * - 6% в день от внесенной суммы на контракт;  \r\n * - Защита от быстрого роста баланса контракта (не более 30% от предыдущего общего объема инвестиций);\r\n * - Ограничение разового вклада инвестиций до 4 ETH;\r\n * - Ограничение лимита цены газа до 40 Gwei;\r\n * - Отсутствие комиссий, выплат владельцу, реферальной системы;\r\n * - Никто не контролирует контракт, нет владельца.\r\n *\r\n * Как инвестировать:\r\n * Отправьте свои ETH на адрес контракта\r\n * Отправлять только со свего кошелька!!! (с бирж отправлять НЕЛЬЗЯ, иначе потеряете свои ETH).\r\n * Как забрать дивиденды:\r\n * - Отправьте нулевую транзакцию (0 ETH) на адрес контракта в любое время\r\n * - Или отправьте транзакцию с суммой до 4 ETH, что бы добавить её к начальной сумме (реинвест) и одновременно заберете накопленные дивиденды\r\n *\r\n * RECOMMENDED GAS LIMIT: 100000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n * THR CURRENT BLOCK:\t  https://etherscan.io/\r\n *\r\n */\r\ncontract EasyInvest_6 {\r\n\r\n    // records amounts invested\r\n    mapping (address => uint) public invested;\r\n    // records timestamp at which investments were made\r\n    mapping (address => uint) public dates;\r\n\r\n    // records amount of all investments were made\r\n\tuint public totalInvested;\r\n\t// records the total allowable amount of investment. 50 ether to start\r\n    uint public canInvest = 50 ether;\r\n    \r\n\t// The maximum Deposit amount = 4 ether, so that everyone can participate and whales do not slow down and do not scare investors\r\n    uint constant public MAX_LIMIT = 4 ether;\r\n\t\r\n\t// time of the update of allowable amount of investment\r\n    uint public refreshTime = now + 24 hours;\r\n\t// maximum price for gas in gwei\r\n\tuint constant MAX_GAS = 40;\r\n\t//Start block\r\n\tuint constant public START_BLOCK = 6801500;\r\n\r\n    // this function called every time anyone sends a transaction to this contract\r\n    function () external payable {\r\n        //Start block\r\n\t\trequire(block.number >= START_BLOCK);\r\n\t\t// gas price check\r\n        require(tx.gasprice <= MAX_GAS * 1000000000);\r\n\t\t// Check the maximum Deposit amount\r\n        require(msg.value <= MAX_LIMIT);\r\n\t\t\r\n\t\t// if sender (aka YOU) is invested more than 0 ether\r\n        if (invested[msg.sender] != 0) {\r\n\r\n\t\t\t// calculate profit amount as such:\r\n            // amount = (amount invested) * 6% * (time since last transaction) / 24 hours\r\n            uint amount = invested[msg.sender] * 6 * (now - dates[msg.sender]) / 100 / 24 hours;\r\n\r\n            // if profit amount is not enough on contract balance, will be sent what is left\r\n            if (amount > address(this).balance) {\r\n                amount = address(this).balance;\r\n            }\r\n\r\n            // send calculated amount of ether directly to sender (aka YOU)\r\n            msg.sender.transfer(amount);\r\n        }\r\n\r\n        // record new timestamp\r\n        dates[msg.sender] = now;\r\n\r\n        // every day will be updated allowable amount of investment\r\n        if (refreshTime <= now) {\r\n            // investment amount is 30% of the total investment\r\n            canInvest += totalInvested * 30 / 100;\r\n            refreshTime += 24 hours;\r\n        }\r\n\r\n        if (msg.value > 0) {\r\n            // deposit cannot be more than the allowed amount\r\n            require(msg.value <= canInvest);\r\n            // record invested amount of this transaction\r\n            invested[msg.sender] += msg.value;\r\n            // update allowable amount of investment and total invested\r\n            canInvest -= msg.value;\r\n            totalInvested += msg.value;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_BLOCK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refreshTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EasyInvest_6","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://757940282457971c94813ff20da6c94e232d90f9d5d20f3c09ec37457a8fe558"}]}