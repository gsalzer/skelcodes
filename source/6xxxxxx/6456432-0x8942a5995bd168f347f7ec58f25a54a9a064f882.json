{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n'We are a gaming and entertainment network our blockChain launch product is HDX20 (http://hdx20.io)'\r\n\r\nHDX20 tokens can be bought & sold on our exchange and are distributed every time someone is playing a HDX20 POWERED GAME. \r\nWith 4% IN and 4% OUT fee only, price of the HDX20 can only go up by design, cannot be dumped on holders and is fueled\r\nby both the volume of transactions and HDX20 POWERED GAMES.\r\n\r\nThe 4 principles of the HDX20 are :\r\n\r\n1) Buy it, its price will increase.\r\n2) Sell it, its price will increase.\r\n3) Transfer it, its price will increase.\r\n4) Play our HDX20 powered games, its price will increase.\r\n\r\nOur Blockchain SmartContract IS the market and makes sure that the HDX20 Price never fall below its current selling price\r\nthus offering an unique CONTEXT where risk is known at all time and limited to the IN and OUT fees only.\r\n\r\nWe have designed a vault where your HDX20 value while still indexed on the Ethereum Price will appreciate automatically over time.\r\n\r\nThis product is copyrighted. Any unauthorized copy, modification, or use without express written consent from HyperDevbox is prohibited.\r\n\r\nCopyright 2018 HyperDevbox\r\n\r\nfees distribution:\r\n.1% for developer / 3% for HDX20 price appreciation during BUY and SELL\r\n.1% for developer / 1% for HDX20 price appreciation during token Transfer\r\n\r\n*/\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\ninterface HDX20Interface\r\n{\r\n   \r\n    function moveAccountIn( address _customerAddress ) payable external;\r\n  \r\n}\r\n\r\ncontract HDX20\r\n{\r\n     using SafeMath for uint256;\r\n     \r\n     //address of a future contract to move in, by default set to 0\r\n     HDX20Interface private NewHDX20Contract = HDX20Interface(0);\r\n     \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event OwnershipTransferred(\r\n         address indexed previousOwner,\r\n         address indexed nextOwner\r\n         );\r\n         \r\n   \r\n         \r\n         \r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n    \r\n  \r\n         \r\n    event onBuyEvent(\r\n        address from,\r\n        uint256 tokens\r\n    );\r\n   \r\n     event onSellEvent(\r\n        address from,\r\n        uint256 tokens\r\n    );\r\n    \r\n    \r\n         \r\n    event onAccountMovedOut(\r\n        address indexed from,\r\n        address to,\r\n        uint256 tokens,\r\n        uint256 eth\r\n    );\r\n    \r\n    event onAccountMovedIn(\r\n        address indexed from,\r\n        address to,\r\n        uint256 tokens,\r\n        uint256 eth\r\n    );\r\n    \r\n    event HDXcontractChanged(\r\n        \r\n         address previous,\r\n         address next,\r\n         uint256 timeStamp\r\n         );\r\n    \r\n    /*==============================\r\n    =            MODIFIERS         =\r\n    ==============================*/\r\n    modifier onlyOwner\r\n    {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyFromGameWhiteListed\r\n    {\r\n        require (gameWhiteListed[ msg.sender ] == true);\r\n        _;\r\n    }\r\n    \r\n  \r\n    \r\n    modifier onlyGameWhiteListed(address who)\r\n    {\r\n        require (gameWhiteListed[ who ] == true);\r\n        _;\r\n    }\r\n    \r\n    \r\n    modifier onlyTokenHolders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n    \r\n  \r\n \r\n  \r\n    address public owner;\r\n    \r\n     /// Contract governance.\r\n\r\n    constructor () public\r\n    {\r\n        owner = msg.sender;\r\n       \r\n        \r\n        if ( address(this).balance > 0)\r\n        {\r\n            owner.transfer( address(this).balance );\r\n        }\r\n    }\r\n\r\n  \r\n   \r\n\r\n    /*==============================\r\n    =       TOKEN VARIABLES        =\r\n    ==============================*/\r\n\r\n    string public name = \"HDX20 token\";\r\n    string public symbol = \"HDX20\";\r\n    uint8 constant public decimals = 18;\r\n    uint256 constant internal magnitude = 1e18;\r\n    \r\n    \r\n    \r\n    uint8 constant internal referrerFee = 50;    //that is 50% of the buyInFee fee \r\n    uint8 constant internal transferFee = 2;     //50% for the community 50% for developer\r\n    uint8 constant internal buyInFee = 3;        \r\n    uint8 constant internal sellOutFee = 3;      \r\n    uint8 constant internal devFee = 1;          //actually since dev is receiving fees in HDX20 exclusively, he is also taxed on the buyinfee so this not 1%\r\n    \r\n    \r\n    mapping(address => uint256) private tokenBalanceLedger;\r\n  \r\n    \r\n    uint256 private tokenSupply = 0;  \r\n    uint256 private contractValue = 0;\r\n    uint256 private tokenPrice = 0.001 ether;   //starting price\r\n  \r\n  \r\n   /*================================\r\n    =       HDX20 VARIABLES         =\r\n    ================================*/\r\n    \r\n    mapping(address => bool)   private gameWhiteListed;\r\n    mapping(address => uint8)  private superReferrerRate;\r\n   \r\n    \r\n    /*================================\r\n    =       PUBLIC FUNCTIONS         =\r\n    ================================*/\r\n    \r\n     /**\r\n     * Fallback function to process ethereum \r\n     */\r\n    function()\r\n        payable\r\n        public\r\n    {\r\n        buyToken(address(0));\r\n    }\r\n    \r\n    \r\n    \r\n    function changeOwner(address _nextOwner) public\r\n    onlyOwner\r\n    {\r\n        require (_nextOwner != owner);\r\n        require(_nextOwner != address(0));\r\n         \r\n        emit OwnershipTransferred(owner, _nextOwner);\r\n         \r\n        owner = _nextOwner;\r\n    }\r\n    \r\n    \r\n \r\n    \r\n    function changeName(string _name) public\r\n    onlyOwner\r\n    {\r\n        name = _name;\r\n    }\r\n    \r\n  \r\n    function changeSymbol(string _symbol) public\r\n    onlyOwner\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n \r\n    \r\n    function addGame(address _contractAddress ) public\r\n    onlyOwner\r\n    {\r\n        gameWhiteListed[ _contractAddress ] = true;\r\n    }\r\n    \r\n    function addSuperReferrer(address _contractAddress , uint8 extra_rate) public\r\n    onlyOwner\r\n    {\r\n       superReferrerRate[ _contractAddress ] = extra_rate;\r\n    }\r\n    \r\n    function removeGame(address _contractAddress ) public\r\n    onlyOwner\r\n    {\r\n        gameWhiteListed[ _contractAddress ] = false;\r\n    }\r\n    \r\n    function changeNewHDX20Contract(address _next) public\r\n    onlyOwner\r\n    {\r\n        require (_next != address( NewHDX20Contract ));\r\n        require( _next != address(0));\r\n         \r\n        emit HDXcontractChanged(address(NewHDX20Contract), _next , now);\r\n         \r\n        NewHDX20Contract  = HDX20Interface( _next);\r\n    }\r\n    \r\n    function buyTokenSub( uint256 _eth , address _customerAddress ) private\r\n    returns(uint256)\r\n    {\r\n        \r\n        uint256 _nb_token = (_eth.mul( magnitude)) / tokenPrice;\r\n        \r\n        \r\n        tokenBalanceLedger[ _customerAddress ] =  tokenBalanceLedger[ _customerAddress ].add( _nb_token);\r\n        tokenSupply = tokenSupply.add(_nb_token);\r\n        \r\n        emit onBuyEvent( _customerAddress , _nb_token);\r\n        \r\n        return( _nb_token );\r\n     \r\n    }\r\n    \r\n    function buyTokenFromGame( address _customerAddress , address _referrer_address ) public payable\r\n    onlyFromGameWhiteListed\r\n    returns(uint256)\r\n    {\r\n        uint256 _eth = msg.value;\r\n        \r\n        if (_eth==0) return(0);\r\n        \r\n        \r\n        uint256 _devfee = (_eth.mul( devFee )) / 100;\r\n        \r\n        uint256 _fee = (_eth.mul( buyInFee )) / 100;\r\n        \r\n        if (_referrer_address != address(0) && _referrer_address != _customerAddress )\r\n        {\r\n             uint256 _ethReferrer = (_fee.mul(referrerFee + superReferrerRate[_referrer_address])) / 100;\r\n\r\n             buyTokenSub( _ethReferrer , _referrer_address);\r\n             \r\n             //substract what is given to referrer\r\n             _fee = _fee.sub( _ethReferrer );\r\n             \r\n        }\r\n        \r\n        //for the developer as HDX20 token and also help to increase the price because taxed also on his own share like everybody else\r\n        \r\n        buyTokenSub( (_devfee.mul(100-buyInFee)) / 100 , owner );\r\n        \r\n        //finally buy for the buyer\r\n     \r\n        uint256 _nb_token = buyTokenSub( _eth - _fee -_devfee , _customerAddress);\r\n        \r\n        //add the value to the contract\r\n        contractValue = contractValue.add( _eth );\r\n        \r\n      \r\n        if (tokenSupply>magnitude)\r\n        {\r\n            tokenPrice = (contractValue.mul( magnitude)) / tokenSupply;\r\n        }\r\n       \r\n       \r\n        \r\n        return( _nb_token );\r\n        \r\n    }\r\n  \r\n  \r\n    function buyToken( address _referrer_address ) public payable\r\n    returns(uint256)\r\n    {\r\n        uint256 _eth = msg.value;\r\n        address _customerAddress = msg.sender;\r\n        \r\n        require( _eth>0);\r\n        \r\n        uint256 _devfee = (_eth.mul( devFee )) / 100;\r\n         \r\n        uint256 _fee = (_eth.mul( buyInFee )) / 100;\r\n        \r\n        if (_referrer_address != address(0) && _referrer_address != _customerAddress )\r\n        {\r\n             uint256 _ethReferrer = (_fee.mul(referrerFee + superReferrerRate[_referrer_address])) / 100;\r\n\r\n             buyTokenSub( _ethReferrer , _referrer_address);\r\n             \r\n            //substract what is given to referrer\r\n             _fee = _fee.sub( _ethReferrer );\r\n             \r\n        }\r\n\r\n        //for the developer as HDX20 token and also help to increase the price because taxed also on his own share like everybody else\r\n\r\n        buyTokenSub( (_devfee.mul(100-buyInFee)) / 100 , owner );\r\n        \r\n        //finally buy for the buyer\r\n      \r\n        uint256 _nb_token = buyTokenSub( _eth - _fee -_devfee , _customerAddress);\r\n        \r\n        //add the value to the contract\r\n        contractValue = contractValue.add( _eth );\r\n        \r\n     \r\n        if (tokenSupply>magnitude)\r\n        {\r\n            tokenPrice = (contractValue.mul( magnitude)) / tokenSupply;\r\n        }\r\n       \r\n        \r\n        return( _nb_token );\r\n        \r\n    }\r\n    \r\n    function sellToken( uint256 _amount ) public\r\n    onlyTokenHolders\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        \r\n        uint256 balance = tokenBalanceLedger[ _customerAddress ];\r\n        \r\n        require( _amount <= balance);\r\n        \r\n        uint256 _eth = (_amount.mul( tokenPrice )) / magnitude;\r\n        \r\n        uint256 _fee = (_eth.mul( sellOutFee)) / 100;\r\n        \r\n        uint256 _devfee = (_eth.mul( devFee)) / 100;\r\n        \r\n        tokenSupply = tokenSupply.sub( _amount );\r\n       \r\n     \r\n        balance = balance.sub( _amount );\r\n        \r\n        tokenBalanceLedger[ _customerAddress] = balance;\r\n        \r\n        //for the developer as HDX20 token and also help to increase the price because taxed also on his own share like everybody else\r\n        buyTokenSub(  (_devfee.mul(100-buyInFee)) / 100 , owner );\r\n        \r\n        \r\n        //calculate what is really leaving the contract, basically _eth - _fee -devfee\r\n        _eth = _eth - _fee - _devfee; \r\n        \r\n        contractValue = contractValue.sub( _eth );\r\n        \r\n       \r\n        if (tokenSupply>magnitude)\r\n        {\r\n            tokenPrice = (contractValue.mul( magnitude)) / tokenSupply;\r\n        }\r\n       \r\n        \r\n         emit onSellEvent( _customerAddress , _amount);\r\n        \r\n         //finally transfer the money\r\n        _customerAddress.transfer( _eth );\r\n        \r\n    }\r\n   \r\n    //there is no fee using token to play HDX20 powered games \r\n  \r\n    function payWithToken( uint256 _eth , address _player_address ) public\r\n    onlyFromGameWhiteListed\r\n    returns(uint256)\r\n    {\r\n        require( _eth>0 && _eth <= ethBalanceOfNoFee(_player_address ));\r\n        \r\n        address _game_contract = msg.sender;\r\n        \r\n        uint256 balance = tokenBalanceLedger[ _player_address ];\r\n        \r\n        uint256 _nb_token = (_eth.mul( magnitude) ) / tokenPrice;\r\n        \r\n        require( _nb_token <= balance);\r\n        \r\n        //confirm the ETH value\r\n        _eth = (_nb_token.mul( tokenPrice)) / magnitude;\r\n        \r\n        balance = balance.sub(_nb_token);\r\n        \r\n        tokenSupply = tokenSupply.sub( _nb_token);\r\n        \r\n        tokenBalanceLedger[ _player_address ] = balance;\r\n        \r\n        contractValue = contractValue.sub( _eth );\r\n        \r\n       \r\n        if (tokenSupply>magnitude)\r\n        {\r\n            tokenPrice = (contractValue.mul( magnitude)) / tokenSupply;\r\n        }\r\n       \r\n        \r\n        //send the money to the game contract   \r\n        _game_contract.transfer( _eth );\r\n      \r\n      \r\n        return( _eth );\r\n    }\r\n    \r\n    function moveAccountOut() public\r\n    onlyTokenHolders\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        \r\n        require( ethBalanceOfNoFee( _customerAddress )>0 && address(NewHDX20Contract) != address(0));\r\n    \r\n        uint256 balance = tokenBalanceLedger[ _customerAddress ];\r\n    \r\n        uint256 _eth = (balance.mul( tokenPrice )) / magnitude;\r\n        \r\n       \r\n        tokenSupply = tokenSupply.sub( balance );\r\n        \r\n        tokenBalanceLedger[ _customerAddress ] = 0;\r\n        \r\n        contractValue = contractValue.sub( _eth );\r\n        \r\n     \r\n        if (tokenSupply>magnitude)\r\n        {\r\n            tokenPrice = (contractValue.mul( magnitude)) / tokenSupply;\r\n        }\r\n       \r\n        \r\n        emit onAccountMovedOut( _customerAddress , address(NewHDX20Contract), balance , _eth );\r\n      \r\n        //send the money to the new HDX20 contract which will buy on customer behalf at no fee converting eth for eth\r\n        //notice this could give more or less HDX20 however the eth value should be preserved\r\n        NewHDX20Contract.moveAccountIn.value(_eth)(_customerAddress);\r\n      \r\n    }\r\n    \r\n    function moveAccountIn(address _customerAddress) public\r\n    payable\r\n    onlyFromGameWhiteListed\r\n    {\r\n        \r\n        \r\n        uint256 _eth = msg.value;\r\n      \r\n        //buy token at no fee\r\n        uint256 _nb_token = buyTokenSub( _eth , _customerAddress );\r\n        \r\n        contractValue = contractValue.add( _eth );\r\n    \r\n      \r\n        if (tokenSupply>magnitude)\r\n        {\r\n            tokenPrice = (contractValue.mul( magnitude)) / tokenSupply;\r\n        }\r\n       \r\n        \r\n        emit onAccountMovedIn( msg.sender, _customerAddress , _nb_token , _eth );\r\n     \r\n    }\r\n    \r\n    \r\n    function appreciateTokenPrice() public payable\r\n    onlyFromGameWhiteListed\r\n    {\r\n        uint256 _eth =  msg.value;\r\n       \r\n        contractValue = contractValue.add( _eth );\r\n            \r\n        //we need a minimum of 1 HDX20 before appreciation is activated    \r\n        if (tokenSupply>magnitude)\r\n        {\r\n                tokenPrice = (contractValue.mul( magnitude)) / tokenSupply;\r\n        }\r\n       \r\n        \r\n    }\r\n    \r\n  \r\n    \r\n    function transferSub(address _customerAddress, address _toAddress, uint256 _amountOfTokens)\r\n    private\r\n    returns(bool)\r\n    {\r\n       \r\n        require( _amountOfTokens <= tokenBalanceLedger[_customerAddress] );\r\n        \r\n        //actually a transfer of 0 token is valid in ERC20\r\n        if (_amountOfTokens>0)\r\n        {\r\n            \r\n           \r\n            {\r\n            \r\n                uint256 _token_fee =  (_amountOfTokens.mul( transferFee )) / 100;\r\n               \r\n                _token_fee /= 2;\r\n               \r\n                \r\n                //now proceed the transfer\r\n                tokenBalanceLedger[ _customerAddress] = tokenBalanceLedger[ _customerAddress].sub( _amountOfTokens );\r\n                tokenBalanceLedger[ _toAddress] = tokenBalanceLedger[ _toAddress].add( _amountOfTokens - (_token_fee*2) );\r\n              \r\n                //half fee in HDX20 directly credited to developer\r\n                tokenBalanceLedger[ owner ] += _token_fee;\r\n                \r\n                //burning the other half of token to drive the price up\r\n                tokenSupply = tokenSupply.sub( _token_fee );\r\n              \r\n             \r\n                if (tokenSupply>magnitude)\r\n                {\r\n                    tokenPrice = (contractValue.mul( magnitude)) / tokenSupply;\r\n                }\r\n               \r\n            }\r\n           \r\n           \r\n          \r\n        \r\n        }\r\n      \r\n      \r\n        // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n        \r\n        // ERC20\r\n        return true;\r\n       \r\n    }\r\n    \r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n    public\r\n    returns(bool)\r\n    {\r\n        \r\n        return( transferSub( msg.sender ,  _toAddress, _amountOfTokens));\r\n       \r\n    }\r\n    \r\n  \r\n    \r\n    \r\n    /*================================\r\n    =  VIEW AND HELPERS FUNCTIONS    =\r\n    ================================*/\r\n    \r\n  \r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function totalContractBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return contractValue;\r\n    }\r\n    \r\n  \r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenSupply;\r\n    }\r\n    \r\n  \r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n    \r\n   \r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger[_customerAddress];\r\n    }\r\n    \r\n    function sellingPrice( bool includeFees)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        uint256 _fee = 0;\r\n        uint256 _devfee=0;\r\n        \r\n        if (includeFees)\r\n        {\r\n            _fee = (tokenPrice.mul( sellOutFee ) ) / 100;\r\n            _devfee = (tokenPrice.mul( devFee ) ) / 100;\r\n        }\r\n        \r\n        return( tokenPrice - _fee - _devfee );\r\n        \r\n    }\r\n    \r\n    function buyingPrice( bool includeFees)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        uint256 _fee = 0;\r\n        uint256 _devfee=0;\r\n        \r\n        if (includeFees)\r\n        {\r\n            _fee = (tokenPrice.mul( buyInFee ) ) / 100;\r\n            _devfee = (tokenPrice.mul( devFee ) ) / 100;\r\n        }\r\n        \r\n        return( tokenPrice + _fee + _devfee );\r\n        \r\n    }\r\n    \r\n    function ethBalanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        \r\n        uint256 _price = sellingPrice( true );\r\n        \r\n        uint256 _balance = tokenBalanceLedger[ _customerAddress];\r\n        \r\n        uint256 _value = (_balance.mul( _price )) / magnitude;\r\n        \r\n        \r\n        return( _value );\r\n    }\r\n    \r\n  \r\n   \r\n    function myEthBalanceOf()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return ethBalanceOf(_customerAddress);\r\n    }\r\n   \r\n   \r\n    function ethBalanceOfNoFee(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        \r\n        uint256 _price = sellingPrice( false );\r\n        \r\n        uint256 _balance = tokenBalanceLedger[ _customerAddress];\r\n        \r\n        uint256 _value = (_balance.mul( _price )) / magnitude;\r\n        \r\n        \r\n        return( _value );\r\n    }\r\n    \r\n  \r\n   \r\n    function myEthBalanceOfNoFee()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return ethBalanceOfNoFee(_customerAddress);\r\n    }\r\n    \r\n    function checkGameListed(address _contract)\r\n        view\r\n        public\r\n        returns(bool)\r\n    {\r\n      \r\n      return( gameWhiteListed[ _contract]);\r\n    }\r\n    \r\n    function getSuperReferrerRate(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint8)\r\n    {\r\n      \r\n      return( referrerFee+superReferrerRate[ _customerAddress]);\r\n    }\r\n    \r\n  \r\n    \r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n   \r\n    \r\n  \r\n    \r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"includeFees\",\"type\":\"bool\"}],\"name\":\"sellingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"appreciateTokenPrice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"moveAccountOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_player_address\",\"type\":\"address\"}],\"name\":\"payWithToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"ethBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer_address\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"getSuperReferrerRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"extra_rate\",\"type\":\"uint8\"}],\"name\":\"addSuperReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"ethBalanceOfNoFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"moveAccountIn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_next\",\"type\":\"address\"}],\"name\":\"changeNewHDX20Contract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"removeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myEthBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"},{\"name\":\"_referrer_address\",\"type\":\"address\"}],\"name\":\"buyTokenFromGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"includeFees\",\"type\":\"bool\"}],\"name\":\"buyingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"addGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myEthBalanceOfNoFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"checkGameListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"nextOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onBuyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onSellEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"onAccountMovedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"onAccountMovedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"next\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"HDXcontractChanged\",\"type\":\"event\"}]","ContractName":"HDX20","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1403f28ad5fdbe28f1ccaa1a3a503a6c45920f0d2332635166dc622bedc492c7"}]}