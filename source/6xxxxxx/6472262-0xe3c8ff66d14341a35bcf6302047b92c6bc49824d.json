{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract ERC20 {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract MultiOwnable {\r\n\r\n    mapping (address => bool) public isOwner;\r\n    address[] public ownerHistory;\r\n\r\n    event OwnerAddedEvent(address indexed _newOwner);\r\n    event OwnerRemovedEvent(address indexed _oldOwner);\r\n\r\n    constructor() {\r\n        // Add default owner\r\n        address owner = msg.sender;\r\n        ownerHistory.push(owner);\r\n        isOwner[owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function ownerHistoryCount() public view returns (uint) {\r\n        return ownerHistory.length;\r\n    }\r\n\r\n    /** Add extra owner. */\r\n    function addOwner(address owner) onlyOwner public {\r\n        require(owner != address(0));\r\n        require(!isOwner[owner]);\r\n        ownerHistory.push(owner);\r\n        isOwner[owner] = true;\r\n        emit OwnerAddedEvent(owner);\r\n    }\r\n\r\n    /** Remove extra owner. */\r\n    function removeOwner(address owner) onlyOwner public {\r\n        require(isOwner[owner]);\r\n        isOwner[owner] = false;\r\n        emit OwnerRemovedEvent(owner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Pausable is MultiOwnable {\r\n\r\n    bool public paused;\r\n\r\n    modifier ifNotPaused {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier ifPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    // Called by the owner on emergency, triggers paused state\r\n    function pause() external onlyOwner ifNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    // Called by the owner on end of emergency, returns to normal state\r\n    function resume() external onlyOwner ifPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract StandardToken is ERC20 {\r\n\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract CommonToken is StandardToken, MultiOwnable {\r\n\r\n    string public constant name   = 'TMSY';\r\n    string public constant symbol = 'TMSY';\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public saleLimit;   // 85% of tokens for sale.\r\n    uint256 public teamTokens;  // 7% of tokens goes to the team and will be locked for 1 year.\r\n    uint256 public partnersTokens;\r\n    uint256 public advisorsTokens;\r\n    uint256 public reservaTokens;\r\n\r\n    // 7% of team tokens will be locked at this address for 1 year.\r\n    address public teamWallet; // Team address.\r\n    address public partnersWallet; // bountry address.\r\n    address public advisorsWallet; // Team address.\r\n    address public reservaWallet;\r\n\r\n    uint public unlockTeamTokensTime = now + 365 days;\r\n\r\n    // The main account that holds all tokens at the beginning and during tokensale.\r\n    address public seller; // Seller address (main holder of tokens)\r\n\r\n    uint256 public tokensSold; // (e18) Number of tokens sold through all tiers or tokensales.\r\n    uint256 public totalSales; // Total number of sales (including external sales) made through all tiers or tokensales.\r\n\r\n    // Lock the transfer functions during tokensales to prevent price speculations.\r\n    bool public locked = true;\r\n    mapping (address => bool) public walletsNotLocked;\r\n\r\n    event SellEvent(address indexed _seller, address indexed _buyer, uint256 _value);\r\n    event ChangeSellerEvent(address indexed _oldSeller, address indexed _newSeller);\r\n    event Burn(address indexed _burner, uint256 _value);\r\n    event Unlock();\r\n\r\n    constructor (\r\n        address _seller,\r\n        address _teamWallet,\r\n        address _partnersWallet,\r\n        address _advisorsWallet,\r\n        address _reservaWallet\r\n    ) MultiOwnable() public {\r\n\r\n        totalSupply    = 600000000 ether;\r\n        saleLimit      = 390000000 ether;\r\n        teamTokens     = 120000000 ether;\r\n        partnersTokens =  30000000 ether;\r\n        reservaTokens  =  30000000 ether;\r\n        advisorsTokens =  30000000 ether;\r\n\r\n        seller         = _seller;\r\n        teamWallet     = _teamWallet;\r\n        partnersWallet = _partnersWallet;\r\n        advisorsWallet = _advisorsWallet;\r\n        reservaWallet  = _reservaWallet;\r\n\r\n        uint sellerTokens = totalSupply - teamTokens - partnersTokens - advisorsTokens - reservaTokens;\r\n        balances[seller] = sellerTokens;\r\n        emit Transfer(0x0, seller, sellerTokens);\r\n\r\n        balances[teamWallet] = teamTokens;\r\n        emit Transfer(0x0, teamWallet, teamTokens);\r\n\r\n        balances[partnersWallet] = partnersTokens;\r\n        emit Transfer(0x0, partnersWallet, partnersTokens);\r\n\r\n        balances[reservaWallet] = reservaTokens;\r\n        emit Transfer(0x0, reservaWallet, reservaTokens);\r\n\r\n        balances[advisorsWallet] = advisorsTokens;\r\n        emit Transfer(0x0, advisorsWallet, advisorsTokens);\r\n    }\r\n\r\n    modifier ifUnlocked(address _from, address _to) {\r\n        //TODO: lockup excepto para direcciones concretas... pago de servicio, conversion fase 2\r\n        //TODO: Hacer funcion que aÃ±ada direcciones de excepcion\r\n        //TODO: Para el team hacer las exceptions\r\n        require(walletsNotLocked[_to]);\r\n\r\n        require(!locked);\r\n\r\n        // If requested a transfer from the team wallet:\r\n        // TODO: fecha cada 6 meses 25% de desbloqueo\r\n        /*if (_from == teamWallet) {\r\n            require(now >= unlockTeamTokensTime);\r\n        }*/\r\n        // Advisors: 25% cada 3 meses\r\n\r\n        // Reserva: 25% cada 6 meses\r\n\r\n        // Partners: El bloqueo de todos... no pueden hacer nada\r\n\r\n        _;\r\n    }\r\n\r\n    /** Can be called once by super owner. */\r\n    function unlock() onlyOwner public {\r\n        require(locked);\r\n        locked = false;\r\n        emit Unlock();\r\n    }\r\n\r\n    function walletLocked(address _wallet) onlyOwner public {\r\n      walletsNotLocked[_wallet] = false;\r\n    }\r\n\r\n    function walletNotLocked(address _wallet) onlyOwner public {\r\n      walletsNotLocked[_wallet] = true;\r\n    }\r\n\r\n    /**\r\n     * An address can become a new seller only in case it has no tokens.\r\n     * This is required to prevent stealing of tokens  from newSeller via\r\n     * 2 calls of this function.\r\n     */\r\n    function changeSeller(address newSeller) onlyOwner public returns (bool) {\r\n        require(newSeller != address(0));\r\n        require(seller != newSeller);\r\n\r\n        // To prevent stealing of tokens from newSeller via 2 calls of changeSeller:\r\n        require(balances[newSeller] == 0);\r\n\r\n        address oldSeller = seller;\r\n        uint256 unsoldTokens = balances[oldSeller];\r\n        balances[oldSeller] = 0;\r\n        balances[newSeller] = unsoldTokens;\r\n        emit Transfer(oldSeller, newSeller, unsoldTokens);\r\n\r\n        seller = newSeller;\r\n        emit ChangeSellerEvent(oldSeller, newSeller);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * User-friendly alternative to sell() function.\r\n     */\r\n    function sellNoDecimals(address _to, uint256 _value) public returns (bool) {\r\n        return sell(_to, _value * 1e18);\r\n    }\r\n\r\n    function sell(address _to, uint256 _value)  public returns (bool) {\r\n        // Check that we are not out of limit and still can sell tokens:\r\n        // Cambiar a hardcap en usd\r\n        //require(tokensSold.add(_value) <= saleLimit);\r\n        require(msg.sender == seller, \"User not authorized\");\r\n\r\n        require(_to != address(0), \"Not address authorized\");\r\n        require(_value > 0, \"Value is 0\");\r\n\r\n        require(_value <= balances[seller]);\r\n\r\n        balances[seller] = balances[seller].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(seller, _to, _value);\r\n\r\n        totalSales++;\r\n        tokensSold = tokensSold.add(_value);\r\n        emit SellEvent(seller, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Until all tokens are sold, tokens can be transfered to/from owner's accounts.\r\n     */\r\n    function transfer(address _to, uint256 _value) ifUnlocked(msg.sender, _to) public returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * Until all tokens are sold, tokens can be transfered to/from owner's accounts.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) ifUnlocked(_from, _to) public returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool) {\r\n        require(_value > 0, \"Value is zero\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Transfer(msg.sender, 0x0, _value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract CommonTokensale is MultiOwnable, Pausable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    address public beneficiary;\r\n    uint public refundDeadlineTime;\r\n\r\n    // Balances of beneficiaries:\r\n    uint public balance;\r\n    uint public balanceComision;\r\n    uint public balanceComisionHold;\r\n    uint public balanceComisionDone;\r\n\r\n    // Token contract reference.\r\n    CommonToken public token;\r\n\r\n    uint public minPaymentUSD = 250;\r\n\r\n    uint public minCapWei;\r\n    uint public maxCapWei;\r\n\r\n    uint public minCapUSD;\r\n    uint public maxCapUSD;\r\n\r\n    uint public startTime;\r\n    uint public endTime;\r\n\r\n    // Stats for current tokensale:\r\n\r\n    uint public totalTokensSold;  // Total amount of tokens sold during this tokensale.\r\n    uint public totalWeiReceived; // Total amount of wei received during this tokensale.\r\n    uint public totalUSDReceived; // Total amount of wei received during this tokensale.\r\n\r\n    // This mapping stores info on how many ETH (wei) have been sent to this tokensale from specific address.\r\n    mapping (address => uint256) public buyerToSentWei;\r\n    mapping (address => uint256) public sponsorToComisionDone;\r\n    mapping (address => uint256) public sponsorToComision;\r\n    mapping (address => uint256) public sponsorToComisionHold;\r\n    mapping (address => uint256) public sponsorToComisionFromInversor;\r\n    mapping (address => bool) public kicInversor;\r\n    mapping (address => bool) public validateKYC;\r\n    mapping (address => bool) public comisionInTokens;\r\n\r\n    address[] public sponsorToComisionList;\r\n\r\n    // TODO: realizar opcion de que el inversor quiera cobrar en ETH o TMSY\r\n\r\n    event ReceiveEthEvent(address indexed _buyer, uint256 _amountWei);\r\n    event NewInverstEvent(address indexed _child, address indexed _sponsor);\r\n    event ComisionEvent(address indexed _sponsor, address indexed _child, uint256 _value, uint256 _comision);\r\n    event ComisionPayEvent(address indexed _sponsor, uint256 _value, uint256 _comision);\r\n    event ComisionInversorInTokensEvent(address indexed _sponsor, bool status);\r\n    event ChangeEndTimeEvent(address _sender, uint endTime, uint _date);\r\n    event verifyKycEvent(address _sender, uint _date, bool _status);\r\n    event payComisionSponsorTMSY(address _sponsor, uint _date, uint _value);\r\n    event payComisionSponsorETH(address _sponsor, uint _date, uint _value);\r\n    event withdrawEvent(address _sender, address _to, uint value, uint _date);\r\n    event conversionToUSDEvent(uint _value, uint rateUsd, uint usds);\r\n    event newRatioEvent(uint _value, uint date);\r\n    event conversionETHToTMSYEvent(address _buyer, uint value, uint tokensE18SinBono, uint tokensE18Bono);\r\n    event createContractEvent(address _token, address _beneficiary, uint _startTime, uint _endTime);\r\n    // ratio USD-ETH\r\n    uint public rateUSDETH;\r\n\r\n    bool public isSoftCapComplete = false;\r\n\r\n    // Array para almacenar los inversores\r\n    mapping(address => bool) public inversors;\r\n    address[] public inversorsList;\r\n\r\n    // Array para almacenar los sponsors para hacer reparto de comisiones\r\n    mapping(address => address) public inversorToSponsor;\r\n\r\n    constructor (\r\n        address _token,\r\n        address _beneficiary,\r\n        uint _startTime,\r\n        uint _endTime\r\n    ) MultiOwnable() public {\r\n\r\n        require(_token != address(0));\r\n        token = CommonToken(_token);\r\n\r\n        emit createContractEvent(_token, _beneficiary, _startTime, _endTime);\r\n\r\n        beneficiary = _beneficiary;\r\n\r\n        startTime = now;\r\n        endTime   = 1544313600;\r\n\r\n\r\n        minCapUSD = 400000;\r\n        maxCapUSD = 4000000;\r\n    }\r\n\r\n    function setRatio(uint _rate) onlyOwner public returns (bool) {\r\n      rateUSDETH = _rate;\r\n      emit newRatioEvent(rateUSDETH, now);\r\n      return true;\r\n    }\r\n\r\n    //TODO: validateKYC\r\n    //En el momento que validan el KYC se les entregan los tokens\r\n\r\n    function burn(uint _value) onlyOwner public returns (bool) {\r\n      return token.burn(_value);\r\n    }\r\n\r\n    function newInversor(address _newInversor, address _sponsor) onlyOwner public returns (bool) {\r\n      inversors[_newInversor] = true;\r\n      inversorsList.push(_newInversor);\r\n      inversorToSponsor[_newInversor] = _sponsor;\r\n      emit NewInverstEvent(_newInversor,_sponsor);\r\n      return inversors[_newInversor];\r\n    }\r\n    function setComisionInvesorInTokens(address _inversor, bool _inTokens) onlyOwner public returns (bool) {\r\n      comisionInTokens[_inversor] = _inTokens;\r\n      emit ComisionInversorInTokensEvent(_inversor, _inTokens);\r\n      return true;\r\n    }\r\n    function setComisionInTokens() public returns (bool) {\r\n      comisionInTokens[msg.sender] = true;\r\n      emit ComisionInversorInTokensEvent(msg.sender, true);\r\n      return true;\r\n    }\r\n    function setComisionInETH() public returns (bool) {\r\n      comisionInTokens[msg.sender] = false;\r\n      emit ComisionInversorInTokensEvent(msg.sender, false);\r\n\r\n      return true;\r\n    }\r\n    function inversorIsKyc(address who) public returns (bool) {\r\n      return validateKYC[who];\r\n    }\r\n    function unVerifyKyc(address _inversor) onlyOwner public returns (bool) {\r\n      require(!isSoftCapComplete);\r\n\r\n      validateKYC[_inversor] = false;\r\n\r\n      address sponsor = inversorToSponsor[_inversor];\r\n      uint balanceHold = sponsorToComisionFromInversor[_inversor];\r\n\r\n      //Actualizamos contadores globales\r\n      balanceComision = balanceComision.sub(balanceHold);\r\n      balanceComisionHold = balanceComisionHold.add(balanceHold);\r\n\r\n      //Actualizamos contadores del sponsor\r\n      sponsorToComision[sponsor] = sponsorToComision[sponsor].sub(balanceHold);\r\n      sponsorToComisionHold[sponsor] = sponsorToComisionHold[sponsor].add(balanceHold);\r\n\r\n      //Actualizamos contador comision por inversor\r\n    //  sponsorToComisionFromInversor[_inversor] = sponsorToComisionFromInversor[_inversor].sub(balanceHold);\r\n      emit verifyKycEvent(_inversor, now, false);\r\n    }\r\n    function verifyKyc(address _inversor) onlyOwner public returns (bool) {\r\n      validateKYC[_inversor] = true;\r\n\r\n      address sponsor = inversorToSponsor[_inversor];\r\n      uint balanceHold = sponsorToComisionFromInversor[_inversor];\r\n\r\n      //Actualizamos contadores globales\r\n      balanceComision = balanceComision.add(balanceHold);\r\n      balanceComisionHold = balanceComisionHold.sub(balanceHold);\r\n\r\n      //Actualizamos contadores del sponsor\r\n      sponsorToComision[sponsor] = sponsorToComision[sponsor].add(balanceHold);\r\n      sponsorToComisionHold[sponsor] = sponsorToComisionHold[sponsor].sub(balanceHold);\r\n\r\n      //Actualizamos contador comision por inversor\r\n      //sponsorToComisionFromInversor[_inversor] = sponsorToComisionFromInversor[_inversor].sub(balanceHold);\r\n      emit verifyKycEvent(_inversor, now, true);\r\n      //Enviamos comisiones en caso de tener\r\n      /*uint256 value = sponsorToComision[_inversor];\r\n      sponsorToComision[_inversor] = sponsorToComision[_inversor].sub(value);\r\n      _inversor.transfer(value);*/\r\n      return true;\r\n    }\r\n    function buyerToSentWeiOf(address who) public view returns (uint256) {\r\n      return buyerToSentWei[who];\r\n    }\r\n    function balanceOf(address who) public view returns (uint256) {\r\n      return token.balanceOf(who);\r\n    }\r\n    function balanceOfComision(address who)  public view returns (uint256) {\r\n      return sponsorToComision[who];\r\n    }\r\n    function balanceOfComisionHold(address who)  public view returns (uint256) {\r\n      return sponsorToComisionHold[who];\r\n    }\r\n    function balanceOfComisionDone(address who)  public view returns (uint256) {\r\n      return sponsorToComisionDone[who];\r\n    }\r\n\r\n    function isInversor(address who) public view returns (bool) {\r\n      return inversors[who];\r\n    }\r\n    function payComisionSponsor(address _inversor) private {\r\n      //comprobamos que el inversor quiera cobrar en tokens...\r\n      //si es asÃ­ le pagamos directo y aÃ±adimos los tokens a su cuenta\r\n      if(comisionInTokens[_inversor]) {\r\n        uint256 val = 0;\r\n        uint256 valueHold = sponsorToComisionHold[_inversor];\r\n        uint256 valueReady = sponsorToComision[_inversor];\r\n\r\n        val = valueReady.add(valueHold);\r\n        //comprobamos que tenga comisiones a cobrar\r\n        if(val > 0) {\r\n          require(balanceComision >= valueReady);\r\n          require(balanceComisionHold >= valueHold);\r\n          uint256 comisionTokens = weiToTokens(val);\r\n\r\n          sponsorToComision[_inversor] = 0;\r\n          sponsorToComisionHold[_inversor] = 0;\r\n\r\n          balanceComision = balanceComision.sub(valueReady);\r\n          balanceComisionDone = balanceComisionDone.add(val);\r\n          balanceComisionHold = balanceComisionHold.sub(valueHold);\r\n\r\n          balance = balance.add(val);\r\n\r\n          token.sell(_inversor, comisionTokens);\r\n          emit payComisionSponsorTMSY(_inversor, now, val); //TYPO TMSY\r\n        }\r\n      } else {\r\n        uint256 value = sponsorToComision[_inversor];\r\n\r\n        //comprobamos que tenga comisiones a cobrar\r\n        if(value > 0) {\r\n          require(balanceComision >= value);\r\n\r\n          //Si lo quiere en ETH\r\n          //comprobamos que hayamos alcanzado el softCap\r\n          assert(isSoftCapComplete);\r\n\r\n          //Comprobamos que el KYC estÃ© validado\r\n          assert(validateKYC[_inversor]);\r\n\r\n          sponsorToComision[_inversor] = sponsorToComision[_inversor].sub(value);\r\n          balanceComision = balanceComision.sub(value);\r\n          balanceComisionDone = balanceComisionDone.add(value);\r\n\r\n          _inversor.transfer(value);\r\n          emit payComisionSponsorETH(_inversor, now, value); //TYPO TMSY\r\n\r\n        }\r\n\r\n      }\r\n    }\r\n    function payComision() public {\r\n      address _inversor = msg.sender;\r\n      payComisionSponsor(_inversor);\r\n    }\r\n    //Enviamos las comisiones que se han congelado o por no tener kyc o por ser en softcap\r\n    /*function sendHoldComisions() onlyOwner public returns (bool) {\r\n      //repartimos todas las comisiones congeladas hasta ahora\r\n      uint arrayLength = sponsorToComisionList.length;\r\n      for (uint i=0; i<arrayLength; i++) {\r\n        // do something\r\n        address sponsor = sponsorToComisionList[i];\r\n\r\n        if(validateKYC[sponsor]) {\r\n          uint256 value = sponsorToComision[sponsor];\r\n          sponsorToComision[sponsor] = sponsorToComision[sponsor].sub(value);\r\n          sponsor.transfer(value);\r\n        }\r\n      }\r\n      return true;\r\n    }*/\r\n    function isSoftCapCompleted() public view returns (bool) {\r\n      return isSoftCapComplete;\r\n    }\r\n    function softCapCompleted() public {\r\n      uint totalBalanceUSD = weiToUSD(balance.div(1e18));\r\n      if(totalBalanceUSD >= minCapUSD) isSoftCapComplete = true;\r\n    }\r\n\r\n    function balanceComisionOf(address who) public view returns (uint256) {\r\n      return sponsorToComision[who];\r\n    }\r\n    function getNow() public returns (uint) {\r\n      return now;\r\n    }\r\n    /** The fallback function corresponds to a donation in ETH. */\r\n    function() public payable {\r\n        //sellTokensForEth(msg.sender, msg.value);\r\n\r\n        uint256 _amountWei = msg.value;\r\n        address _buyer = msg.sender;\r\n        uint valueUSD = weiToUSD(_amountWei);\r\n\r\n        require(now <= endTime, 'endtime');\r\n        require(inversors[_buyer] != false, 'No invest');\r\n        require(valueUSD >= minPaymentUSD, 'Min in USD not allowed');\r\n        //require(totalUSDReceived.add(valueUSD) <= maxCapUSD);\r\n        emit ReceiveEthEvent(_buyer, _amountWei);\r\n\r\n        uint tokensE18SinBono = weiToTokens(msg.value);\r\n        uint tokensE18Bono = weiToTokensBono(msg.value);\r\n        emit conversionETHToTMSYEvent(_buyer, msg.value, tokensE18SinBono, tokensE18Bono);\r\n\r\n        uint tokensE18 = tokensE18SinBono.add(tokensE18Bono);\r\n\r\n        //Ejecutamos la transferencia de tokens y paramos si ha fallado\r\n        require(token.sell(_buyer, tokensE18SinBono), \"Falla la venta\");\r\n        if(tokensE18Bono > 0)\r\n          assert(token.sell(_buyer, tokensE18Bono));\r\n\r\n        //repartimos al sponsor su parte 10%\r\n        uint256 _amountSponsor = (_amountWei * 10) / 100;\r\n        uint256 _amountBeneficiary = (_amountWei * 90) / 100;\r\n\r\n        totalTokensSold = totalTokensSold.add(tokensE18);\r\n        totalWeiReceived = totalWeiReceived.add(_amountWei);\r\n        buyerToSentWei[_buyer] = buyerToSentWei[_buyer].add(_amountWei);\r\n\r\n        //por cada compra miramos cual es la cantidad actual de USD... si hemos llegado al softcap lo activamos\r\n        if(!isSoftCapComplete) {\r\n          uint256 totalBalanceUSD = weiToUSD(balance);\r\n          if(totalBalanceUSD >= minCapUSD) {\r\n            softCapCompleted();\r\n          }\r\n        }\r\n        address sponsor = inversorToSponsor[_buyer];\r\n        sponsorToComisionList.push(sponsor);\r\n\r\n        if(validateKYC[_buyer]) {\r\n          //AÃ±adimos el saldo al sponsor\r\n          balanceComision = balanceComision.add(_amountSponsor);\r\n          sponsorToComision[sponsor] = sponsorToComision[sponsor].add(_amountSponsor);\r\n\r\n        } else {\r\n          //AÃ±adimos el saldo al sponsor\r\n          balanceComisionHold = balanceComisionHold.add(_amountSponsor);\r\n          sponsorToComisionHold[sponsor] = sponsorToComisionHold[sponsor].add(_amountSponsor);\r\n          sponsorToComisionFromInversor[_buyer] = sponsorToComisionFromInversor[_buyer].add(_amountSponsor);\r\n        }\r\n\r\n\r\n        payComisionSponsor(sponsor);\r\n\r\n\r\n        balance = balance.add(_amountBeneficiary);\r\n    }\r\n\r\n    function weiToUSD(uint _amountWei) public view returns (uint256) {\r\n      uint256 ethers = _amountWei;\r\n\r\n      uint256 valueUSD = rateUSDETH.mul(_amountWei);\r\n\r\n      emit conversionToUSDEvent(_amountWei, rateUSDETH, valueUSD.div(1e18));\r\n      return valueUSD.div(1e18);\r\n    }\r\n\r\n    function weiToTokensBono(uint _amountWei) public view returns (uint256) {\r\n      uint bono = 0;\r\n\r\n      uint256 valueUSD = weiToUSD(_amountWei);\r\n\r\n      // Calculamos bono\r\n      //Tablas de bonos\r\n      if(valueUSD >= uint(500 * 10**18))   bono = 10;\r\n      if(valueUSD >= uint(1000 * 10**18))   bono = 20;\r\n      if(valueUSD >= uint(2500 * 10**18))   bono = 30;\r\n      if(valueUSD >= uint(5000 * 10**18))   bono = 40;\r\n      if(valueUSD >= uint(10000 * 10**18))   bono = 50;\r\n\r\n\r\n      uint256 bonoUsd = valueUSD.mul(bono).div(100);\r\n      uint256 tokens = bonoUsd.mul(tokensPerUSD());\r\n\r\n      return tokens;\r\n    }\r\n    /** Calc how much tokens you can buy at current time. */\r\n    function weiToTokens(uint _amountWei) public view returns (uint256) {\r\n\r\n        uint256 valueUSD = weiToUSD(_amountWei);\r\n\r\n        uint256 tokens = valueUSD.mul(tokensPerUSD());\r\n\r\n        return tokens;\r\n    }\r\n\r\n    function tokensPerUSD() public pure returns (uint256) {\r\n        return 65; // Default token price with no bonuses.\r\n    }\r\n\r\n    function canWithdraw() public view returns (bool);\r\n\r\n    function withdraw(address _to, uint value) public returns (uint) {\r\n        require(canWithdraw(), 'No es posible retirar');\r\n        require(msg.sender == beneficiary, 'SÃ³lo puede solicitar el beneficiario los fondos');\r\n        require(balance > 0, 'Sin fondos');\r\n        require(balance >= value, 'No hay suficientes fondos');\r\n        require(_to.call.value(value).gas(1)(), 'No se que es');\r\n\r\n        balance = balance.sub(value);\r\n        emit withdrawEvent(msg.sender, _to, value,now);\r\n        return balance;\r\n    }\r\n\r\n    //Manage timelimit. For exception\r\n    function changeEndTime(uint _date) onlyOwner public returns (bool) {\r\n     // require(endTime < _date);\r\n      endTime = _date;\r\n      refundDeadlineTime = endTime + 3 * 30 days;\r\n      emit ChangeEndTimeEvent(msg.sender,endTime,_date);\r\n      return true;\r\n    }\r\n}\r\n\r\n\r\ncontract Presale is CommonTokensale {\r\n\r\n    // In case min (soft) cap is not reached, token buyers will be able to\r\n    // refund their contributions during 3 months after presale is finished.\r\n\r\n    // Total amount of wei refunded if min (soft) cap is not reached.\r\n    uint public totalWeiRefunded;\r\n\r\n    event RefundEthEvent(address indexed _buyer, uint256 _amountWei);\r\n\r\n    constructor(\r\n        address _token,\r\n        address _beneficiary,\r\n        uint _startTime,\r\n        uint _endTime\r\n    ) CommonTokensale(\r\n        _token,\r\n        _beneficiary,\r\n        _startTime,\r\n        _endTime\r\n    ) public {\r\n      refundDeadlineTime = _endTime + 3 * 30 days;\r\n    }\r\n\r\n    /**\r\n     * During presale it will be possible to withdraw only in two cases:\r\n     * min cap reached OR refund period expired.\r\n     */\r\n    function canWithdraw() public view returns (bool) {\r\n        return isSoftCapComplete;\r\n    }\r\n\r\n    /**\r\n     * It will be possible to refund only if min (soft) cap is not reached and\r\n     * refund requested during 3 months after presale finished.\r\n     */\r\n    function canRefund() public view returns (bool) {\r\n        return !isSoftCapComplete && endTime < now && now <= refundDeadlineTime;\r\n    }\r\n\r\n    function refund() public {\r\n        require(canRefund());\r\n\r\n        address buyer = msg.sender;\r\n        uint amount = buyerToSentWei[buyer];\r\n        require(amount > 0);\r\n\r\n        // Redistribute left balance between three beneficiaries.\r\n        uint newBal = balance.sub(amount);\r\n        balance = newBal;\r\n\r\n        emit RefundEthEvent(buyer, amount);\r\n        buyerToSentWei[buyer] = 0;\r\n        totalWeiRefunded = totalWeiRefunded.add(amount);\r\n        buyer.transfer(amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundDeadlineTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setComisionInETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOfComision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isInversor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceComisionDone\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"changeEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inversor\",\"type\":\"address\"},{\"name\":\"_inTokens\",\"type\":\"bool\"}],\"name\":\"setComisionInvesorInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerHistoryCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceComision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"buyerToSentWeiOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"weiToTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inversor\",\"type\":\"address\"}],\"name\":\"verifyKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"validateKYC\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceComisionOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payComision\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsorToComisionDone\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inversor\",\"type\":\"address\"}],\"name\":\"unVerifyKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsorToComisionFromInversor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setComisionInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSoftCapCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsorToComisionHold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOfComisionHold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSoftCapComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsorToComision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sponsorToComisionList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"comisionInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"inversors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerToSentWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOfComisionDone\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"inversorIsKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"weiToUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCapUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCapUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"softCapCompleted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceComisionHold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCapWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUSDReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCapWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"weiToTokensBono\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateUSDETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPaymentUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inversorsList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"kicInversor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newInversor\",\"type\":\"address\"},{\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"newInversor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"inversorToSponsor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"RefundEthEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"ReceiveEthEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_child\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"NewInverstEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sponsor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_child\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_comision\",\"type\":\"uint256\"}],\"name\":\"ComisionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sponsor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_comision\",\"type\":\"uint256\"}],\"name\":\"ComisionPayEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sponsor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ComisionInversorInTokensEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"ChangeEndTimeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"verifyKycEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sponsor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payComisionSponsorTMSY\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sponsor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payComisionSponsorETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"withdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rateUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"usds\",\"type\":\"uint256\"}],\"name\":\"conversionToUSDEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"newRatioEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensE18SinBono\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensE18Bono\",\"type\":\"uint256\"}],\"name\":\"conversionETHToTMSYEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"createContractEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAddedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemovedEvent\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000692dccc0560f92a3dbf795156ab8cd9e4cfb9976000000000000000000000000f2c984258fdf4dfa5362a7552bb22f92ad5dcd76000000000000000000000000000000000000000000000000000001662cecac00000000000000000000000000000000000000000000000000000001677baa0800","Library":"","SwarmSource":"bzzr://7ee61b1748c4e3bf29a9887de754e2126d96628721481e5f32d74a6c14025f5e"}]}