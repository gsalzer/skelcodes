{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/commons/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/flavours/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". It has two-stage ownership transfer.\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to prepare transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/flavours/Lockable.sol\r\n\r\n/**\r\n * @title Lockable\r\n * @dev Base contract which allows children to\r\n *      implement main operations locking mechanism.\r\n */\r\ncontract Lockable is Ownable {\r\n    event Lock();\r\n    event Unlock();\r\n\r\n    bool public locked = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable\r\n    *       only when the contract is not locked.\r\n     */\r\n    modifier whenNotLocked() {\r\n        require(!locked);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable\r\n     *      only when the contract is locked.\r\n     */\r\n    modifier whenLocked() {\r\n        require(locked);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to locke, triggers locked state\r\n     */\r\n    function lock() public onlyOwner whenNotLocked {\r\n        locked = true;\r\n        emit Lock();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner\r\n     *      to unlock, returns to unlocked state\r\n     */\r\n    function unlock() public onlyOwner whenLocked {\r\n        locked = false;\r\n        emit Unlock();\r\n    }\r\n}\r\n\r\n// File: contracts/base/BaseFixedERC20Token.sol\r\n\r\ncontract BaseFixedERC20Token is Lockable {\r\n    using SafeMath for uint;\r\n\r\n    /// @dev ERC20 Total supply\r\n    uint public totalSupply;\r\n\r\n    mapping(address => uint) public balances;\r\n\r\n    mapping(address => mapping(address => uint)) private allowed;\r\n\r\n    /// @dev Fired if token is transferred according to ERC20 spec\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /// @dev Fired if token withdrawal is approved according to ERC20 spec\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param owner_ The address to query the the balance of\r\n     * @return An uint representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner_) public view returns (uint balance) {\r\n        return balances[owner_];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param to_ The address to transfer to.\r\n     * @param value_ The amount to be transferred.\r\n     */\r\n    function transfer(address to_, uint value_) public whenNotLocked returns (bool) {\r\n        require(to_ != address(0) && value_ <= balances[msg.sender]);\r\n        // SafeMath.sub will throw an exception if there is not enough balance\r\n        balances[msg.sender] = balances[msg.sender].sub(value_);\r\n        balances[to_] = balances[to_].add(value_);\r\n        emit Transfer(msg.sender, to_, value_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from_ address The address which you want to send tokens from\r\n     * @param to_ address The address which you want to transfer to\r\n     * @param value_ uint the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from_, address to_, uint value_) public whenNotLocked returns (bool) {\r\n        require(to_ != address(0) && value_ <= balances[from_] && value_ <= allowed[from_][msg.sender]);\r\n        balances[from_] = balances[from_].sub(value_);\r\n        balances[to_] = balances[to_].add(value_);\r\n        allowed[from_][msg.sender] = allowed[from_][msg.sender].sub(value_);\r\n        emit Transfer(from_, to_, value_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering\r\n     *\r\n     * To change the approve amount you first have to reduce the addresses\r\n     * allowance to zero by calling `approve(spender_, 0)` if it is not\r\n     * already 0 to mitigate the race condition described in:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * @param spender_ The address which will spend the funds.\r\n     * @param value_ The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender_, uint value_) public whenNotLocked returns (bool) {\r\n        if (value_ != 0 && allowed[msg.sender][spender_] != 0) {\r\n            revert();\r\n        }\r\n        allowed[msg.sender][spender_] = value_;\r\n        emit Approval(msg.sender, spender_, value_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\r\n     * @param owner_ address The address which owns the funds\r\n     * @param spender_ address The address which will spend the funds\r\n     * @return A uint specifying the amount of tokens still available for the spender\r\n     */\r\n    function allowance(address owner_, address spender_) public view returns (uint) {\r\n        return allowed[owner_][spender_];\r\n    }\r\n}\r\n\r\n// File: contracts/base/BaseICOToken.sol\r\n\r\n/**\r\n * @dev Not mintable, ERC20 compliant token, distributed by ICO.\r\n */\r\ncontract BaseICOToken is BaseFixedERC20Token {\r\n\r\n    /// @dev Available supply of tokens\r\n    uint public availableSupply;\r\n\r\n    /// @dev ICO smart contract allowed to distribute public funds for this\r\n    address public ico;\r\n\r\n    /// @dev Fired if investment for `amount` of tokens performed by `to` address\r\n    event ICOTokensInvested(address indexed to, uint amount);\r\n\r\n    /// @dev ICO contract changed for this token\r\n    event ICOChanged(address indexed icoContract);\r\n\r\n    modifier onlyICO() {\r\n        require(msg.sender == ico);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Not mintable, ERC20 compliant token, distributed by ICO.\r\n     * @param totalSupply_ Total tokens supply.\r\n     */\r\n    constructor(uint totalSupply_) public {\r\n        locked = true;\r\n        totalSupply = totalSupply_;\r\n        availableSupply = totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev Set address of ICO smart-contract which controls token\r\n     * initial token distribution.\r\n     * @param ico_ ICO contract address.\r\n     */\r\n    function changeICO(address ico_) public onlyOwner {\r\n        ico = ico_;\r\n        emit ICOChanged(ico);\r\n    }\r\n\r\n    /**\r\n     * @dev Assign `amountWei_` of wei converted into tokens to investor identified by `to_` address.\r\n     * @param to_ Investor address.\r\n     * @param amountWei_ Number of wei invested\r\n     * @param ethTokenExchangeRatio_ Number of tokens in 1Eth\r\n     * @return Amount of invested tokens\r\n     */\r\n    function icoInvestmentWei(address to_, uint amountWei_, uint ethTokenExchangeRatio_) public returns (uint);\r\n\r\n    function isValidICOInvestment(address to_, uint amount_) internal view returns (bool) {\r\n        return to_ != address(0) && amount_ <= availableSupply;\r\n    }\r\n}\r\n\r\n// File: contracts/flavours/SelfDestructible.sol\r\n\r\n/**\r\n * @title SelfDestructible\r\n * @dev The SelfDestructible contract has an owner address, and provides selfDestruct method\r\n * in case of deployment error.\r\n */\r\ncontract SelfDestructible is Ownable {\r\n\r\n    function selfDestruct(uint8 v, bytes32 r, bytes32 s) public onlyOwner {\r\n        if (ecrecover(prefixedHash(), v, r, s) != owner) {\r\n            revert();\r\n        }\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function originalHash() internal view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\r\n                \"Signed for Selfdestruct\",\r\n                address(this),\r\n                msg.sender\r\n            ));\r\n    }\r\n\r\n    function prefixedHash() internal view returns (bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        return keccak256(abi.encodePacked(prefix, originalHash()));\r\n    }\r\n}\r\n\r\n// File: contracts/interface/ERC20Token.sol\r\n\r\ninterface ERC20Token {\r\n    function transferFrom(address from_, address to_, uint value_) external returns (bool);\r\n    function transfer(address to_, uint value_) external returns (bool);\r\n    function balanceOf(address owner_) external returns (uint);\r\n}\r\n\r\n// File: contracts/flavours/Withdrawal.sol\r\n\r\n/**\r\n * @title Withdrawal\r\n * @dev The Withdrawal contract has an owner address, and provides method for withdraw funds and tokens, if any\r\n */\r\ncontract Withdrawal is Ownable {\r\n\r\n    // withdraw funds, if any, only for owner\r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    // withdraw stuck tokens, if any, only for owner\r\n    function withdrawTokens(address _someToken) public onlyOwner {\r\n        ERC20Token someToken = ERC20Token(_someToken);\r\n        uint balance = someToken.balanceOf(address(this));\r\n        someToken.transfer(owner, balance);\r\n    }\r\n}\r\n\r\n// File: contracts/ICHXToken.sol\r\n\r\n/**\r\n * @title ICHX token contract.\r\n */\r\ncontract ICHXToken is BaseICOToken, SelfDestructible, Withdrawal {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = \"IceChain\";\r\n\r\n    string public constant symbol = \"ICHX\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint internal constant ONE_TOKEN = 1e18;\r\n\r\n    constructor(uint totalSupplyTokens_,\r\n            uint companyTokens_) public\r\n        BaseICOToken(totalSupplyTokens_.mul(ONE_TOKEN)) {\r\n        require(availableSupply == totalSupply);\r\n\r\n        balances[owner] = companyTokens_.mul(ONE_TOKEN);\r\n\r\n        availableSupply = availableSupply\r\n            .sub(balances[owner]);\r\n\r\n        emit Transfer(0, address(this), balances[owner]);\r\n        emit Transfer(address(this), owner, balances[owner]);\r\n    }\r\n\r\n    // Disable direct payments\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @dev Assign `amountWei_` of wei converted into tokens to investor identified by `to_` address.\r\n     * @param to_ Investor address.\r\n     * @param amountWei_ Number of wei invested\r\n     * @param ethTokenExchangeRatio_ Number of tokens in 1 Eth\r\n     * @return Amount of invested tokens\r\n     */\r\n    function icoInvestmentWei(address to_, uint amountWei_, uint ethTokenExchangeRatio_) public onlyICO returns (uint) {\r\n        uint amount = amountWei_.mul(ethTokenExchangeRatio_).mul(ONE_TOKEN).div(1 ether);\r\n        require(isValidICOInvestment(to_, amount));\r\n        availableSupply = availableSupply.sub(amount);\r\n        balances[to_] = balances[to_].add(amount);\r\n        emit ICOTokensInvested(to_, amount);\r\n        return amount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_someToken\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ico_\",\"type\":\"address\"}],\"name\":\"changeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"amountWei_\",\"type\":\"uint256\"},{\"name\":\"ethTokenExchangeRatio_\",\"type\":\"uint256\"}],\"name\":\"icoInvestmentWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"spender_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"totalSupplyTokens_\",\"type\":\"uint256\"},{\"name\":\"companyTokens_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ICOTokensInvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"icoContract\",\"type\":\"address\"}],\"name\":\"ICOChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ICHXToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000002faf0800","Library":"","SwarmSource":"bzzr://40452501eee342e8d11f94b524e3d4bc155407734f6a9cb88e1282e29bbd2191"}]}