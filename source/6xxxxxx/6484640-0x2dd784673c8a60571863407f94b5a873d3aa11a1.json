{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: contracts/ontology/CvcOntologyInterface.sol\r\n\r\n/**\r\n * @title CvcOntologyInterface\r\n * @dev This contract defines marketplace ontology registry interface.\r\n */\r\ncontract CvcOntologyInterface {\r\n\r\n    struct CredentialItem {\r\n        bytes32 id;\r\n        string recordType;\r\n        string recordName;\r\n        string recordVersion;\r\n        string reference;\r\n        string referenceType;\r\n        bytes32 referenceHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds new Credential Item to the registry.\r\n     * @param _recordType Credential Item type\r\n     * @param _recordName Credential Item name\r\n     * @param _recordVersion Credential Item version\r\n     * @param _reference Credential Item reference URL\r\n     * @param _referenceType Credential Item reference type\r\n     * @param _referenceHash Credential Item reference hash\r\n     */\r\n    function add(\r\n        string _recordType,\r\n        string _recordName,\r\n        string _recordVersion,\r\n        string _reference,\r\n        string _referenceType,\r\n        bytes32 _referenceHash\r\n        ) external;\r\n\r\n    /**\r\n    * @dev Deprecates single Credential Item by external ID (type, name and version).\r\n    * @param _type Record type to deprecate\r\n    * @param _name Record name to deprecate\r\n    * @param _version Record version to deprecate\r\n    */\r\n    function deprecate(string _type, string _name, string _version) public;\r\n\r\n    /**\r\n    * @dev Deprecates single Credential Item by ID.\r\n    * @param _id Record ID to deprecate\r\n    */\r\n    function deprecateById(bytes32 _id) public;\r\n\r\n    /**\r\n     * @dev Returns single Credential Item data up by ontology record ID.\r\n     * @param _id Ontology record ID to search by\r\n     * @return id Ontology record ID\r\n     * @return recordType Credential Item type\r\n     * @return recordName Credential Item name\r\n     * @return recordVersion Credential Item version\r\n     * @return reference Credential Item reference URL\r\n     * @return referenceType Credential Item reference type\r\n     * @return referenceHash Credential Item reference hash\r\n     * @return deprecated Credential Item type deprecation flag\r\n     */\r\n    function getById(bytes32 _id) public view returns (\r\n        bytes32 id,\r\n        string recordType,\r\n        string recordName,\r\n        string recordVersion,\r\n        string reference,\r\n        string referenceType,\r\n        bytes32 referenceHash,\r\n        bool deprecated\r\n        );\r\n\r\n    /**\r\n     * @dev Returns single Credential Item of specific type, name and version.\r\n     * @param _type Credential Item type\r\n     * @param _name Credential Item name\r\n     * @param _version Credential Item version\r\n     * @return id Ontology record ID\r\n     * @return recordType Credential Item type\r\n     * @return recordName Credential Item name\r\n     * @return recordVersion Credential Item version\r\n     * @return reference Credential Item reference URL\r\n     * @return referenceType Credential Item reference type\r\n     * @return referenceHash Credential Item reference hash\r\n     * @return deprecated Credential Item type deprecation flag\r\n     */\r\n    function getByTypeNameVersion(\r\n        string _type,\r\n        string _name,\r\n        string _version\r\n        ) public view returns (\r\n            bytes32 id,\r\n            string recordType,\r\n            string recordName,\r\n            string recordVersion,\r\n            string reference,\r\n            string referenceType,\r\n            bytes32 referenceHash,\r\n            bool deprecated\r\n        );\r\n\r\n    /**\r\n     * @dev Returns all IDs of registered Credential Items.\r\n     * @return bytes32[]\r\n     */\r\n    function getAllIds() public view returns (bytes32[]);\r\n\r\n    /**\r\n     * @dev Returns all registered Credential Items.\r\n     * @return bytes32[]\r\n     */\r\n    function getAll() public view returns (CredentialItem[]);\r\n}\r\n\r\n// File: contracts/upgradeability/EternalStorage.sol\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract defines the generic storage structure\r\n * so that it could be re-used to implement any domain specific storage functionality\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n    mapping(bytes32 => bytes32) internal bytes32Storage;\r\n\r\n}\r\n\r\n// File: contracts/upgradeability/ImplementationStorage.sol\r\n\r\n/**\r\n * @title ImplementationStorage\r\n * @dev This contract stores proxy implementation address.\r\n */\r\ncontract ImplementationStorage {\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"cvc.proxy.implementation\", and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0xa490aab0d89837371982f93f57ffd20c47991f88066ef92475bc8233036969bb;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    */\r\n    constructor() public {\r\n        assert(IMPLEMENTATION_SLOT == keccak256(\"cvc.proxy.implementation\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     * @return Address of the current implementation\r\n     */\r\n    function implementation() public view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeability/Initializable.sol\r\n\r\n/**\r\n * @title Initializable\r\n * @dev This contract provides basic initialization control\r\n */\r\ncontract Initializable is EternalStorage, ImplementationStorage {\r\n\r\n    /**\r\n    Data structures and storage layout:\r\n    mapping(bytes32 => bool) initialized;\r\n    **/\r\n\r\n    /**\r\n     * @dev Throws if called before contract was initialized.\r\n     */\r\n    modifier onlyInitialized() {\r\n        // require(initialized[implementation()]);\r\n        require(boolStorage[keccak256(abi.encodePacked(implementation(), \"initialized\"))], \"Contract is not initialized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Controls the initialization state, allowing to call an initialization function only once.\r\n     */\r\n    modifier initializes() {\r\n        address impl = implementation();\r\n        // require(!initialized[implementation()]);\r\n        require(!boolStorage[keccak256(abi.encodePacked(impl, \"initialized\"))], \"Contract is already initialized\");\r\n        _;\r\n        // initialized[implementation()] = true;\r\n        boolStorage[keccak256(abi.encodePacked(impl, \"initialized\"))] = true;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeability/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n\r\n    /**\r\n    Data structures and storage layout:\r\n    address owner;\r\n    **/\r\n\r\n    /**\r\n     * @dev Event to show ownership has been transferred\r\n     * @param previousOwner representing the address of the previous owner\r\n     * @param newOwner representing the address of the new owner\r\n     */\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner(), \"Message sender must be contract admin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the address of the owner\r\n     * @return the address of the owner\r\n     */\r\n    function owner() public view returns (address) {\r\n        // return owner;\r\n        return addressStorage[keccak256(\"owner\")];\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner the address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Contract owner cannot be zero address\");\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new owner address\r\n     */\r\n    function setOwner(address newOwner) internal {\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        // owner = newOwner;\r\n        addressStorage[keccak256(\"owner\")] = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ontology/CvcOntology.sol\r\n\r\n/**\r\n * @title CvcOntology\r\n * @dev This contract holds the list of all recognized Credential Items available for sale.\r\n */\r\ncontract CvcOntology is EternalStorage, Initializable, Ownable, CvcOntologyInterface {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    Data structures and storage layout:\r\n    struct CredentialItem {\r\n        string type; // \"claim\" or \"credential\"\r\n        string name; // e.g. \"proofOfIdentity\"\r\n        string version; // e.g. \"v1.2\"\r\n        string reference; // e.g. \"https://example.com/credential-proofOfIdentity-v1_2.json\"\r\n        string referenceType; // e.g. \"JSON-LD-Context\"\r\n        bytes32 referenceHash; // e.g. \"0x2cd9bf92c5e20b1b410f5ace94d963a96e89156fbe65b70365e8596b37f1f165\"\r\n        bool deprecated; // e.g. false\r\n    }\r\n    uint256 recordsCount;\r\n    bytes32[] recordsIds;\r\n    mapping(bytes32 => CredentialItem) records;\r\n    **/\r\n\r\n    /**\r\n     * Constructor to initialize with some default values\r\n     */\r\n    constructor() public {\r\n        initialize(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds new Credential Item to the registry.\r\n     * @param _recordType Credential Item type\r\n     * @param _recordName Credential Item name\r\n     * @param _recordVersion Credential Item version\r\n     * @param _reference Credential Item reference URL\r\n     * @param _referenceType Credential Item reference type\r\n     * @param _referenceHash Credential Item reference hash\r\n     */\r\n    function add(\r\n        string _recordType,\r\n        string _recordName,\r\n        string _recordVersion,\r\n        string _reference,\r\n        string _referenceType,\r\n        bytes32 _referenceHash\r\n    ) external onlyInitialized onlyOwner {\r\n        require(bytes(_recordType).length > 0, \"Empty credential item type\");\r\n        require(bytes(_recordName).length > 0, \"Empty credential item name\");\r\n        require(bytes(_recordVersion).length > 0, \"Empty credential item version\");\r\n        require(bytes(_reference).length > 0, \"Empty credential item reference\");\r\n        require(bytes(_referenceType).length > 0, \"Empty credential item type\");\r\n        require(_referenceHash != 0x0, \"Empty credential item reference hash\");\r\n\r\n        bytes32 id = calculateId(_recordType, _recordName, _recordVersion);\r\n\r\n        require(getReferenceHash(id) == 0x0, \"Credential item record already exists\");\r\n\r\n        setType(id, _recordType);\r\n        setName(id, _recordName);\r\n        setVersion(id, _recordVersion);\r\n        setReference(id, _reference);\r\n        setReferenceType(id, _referenceType);\r\n        setReferenceHash(id, _referenceHash);\r\n        setRecordId(getCount(), id);\r\n        incrementCount();\r\n    }\r\n\r\n    /**\r\n     * @dev Contract initialization method.\r\n     * @param _owner Contract owner address\r\n     */\r\n    function initialize(address _owner) public initializes {\r\n        setOwner(_owner);\r\n    }\r\n\r\n    /**\r\n    * @dev Deprecates single Credential Item of specific type, name and version.\r\n    * @param _type Record type to deprecate\r\n    * @param _name Record name to deprecate\r\n    * @param _version Record version to deprecate\r\n    */\r\n    function deprecate(string _type, string _name, string _version) public onlyInitialized onlyOwner {\r\n        deprecateById(calculateId(_type, _name, _version));\r\n    }\r\n\r\n    /**\r\n    * @dev Deprecates single Credential Item by ontology record ID.\r\n    * @param _id Ontology record ID\r\n    */\r\n    function deprecateById(bytes32 _id) public onlyInitialized onlyOwner {\r\n        require(getReferenceHash(_id) != 0x0, \"Cannot deprecate unknown credential item\");\r\n        require(getDeprecated(_id) == false, \"Credential item is already deprecated\");\r\n        setDeprecated(_id);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns single Credential Item data up by ontology record ID.\r\n     * @param _id Ontology record ID to search by\r\n     * @return id Ontology record ID\r\n     * @return recordType Credential Item type\r\n     * @return recordName Credential Item name\r\n     * @return recordVersion Credential Item version\r\n     * @return reference Credential Item reference URL\r\n     * @return referenceType Credential Item reference type\r\n     * @return referenceHash Credential Item reference hash\r\n     * @return deprecated Credential Item type deprecation flag\r\n     */\r\n    function getById(\r\n        bytes32 _id\r\n    ) public view onlyInitialized returns (\r\n        bytes32 id,\r\n        string recordType,\r\n        string recordName,\r\n        string recordVersion,\r\n        string reference,\r\n        string referenceType,\r\n        bytes32 referenceHash,\r\n        bool deprecated\r\n    ) {\r\n        referenceHash = getReferenceHash(_id);\r\n        if (referenceHash != 0x0) {\r\n            recordType = getType(_id);\r\n            recordName = getName(_id);\r\n            recordVersion = getVersion(_id);\r\n            reference = getReference(_id);\r\n            referenceType = getReferenceType(_id);\r\n            deprecated = getDeprecated(_id);\r\n            id = _id;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns single Credential Item of specific type, name and version.\r\n     * @param _type Credential Item type\r\n     * @param _name Credential Item name\r\n     * @param _version Credential Item version\r\n     * @return id Ontology record ID\r\n     * @return recordType Credential Item type\r\n     * @return recordName Credential Item name\r\n     * @return recordVersion Credential Item version\r\n     * @return reference Credential Item reference URL\r\n     * @return referenceType Credential Item reference type\r\n     * @return referenceHash Credential Item reference hash\r\n     * @return deprecated Credential Item type deprecation flag\r\n     */\r\n    function getByTypeNameVersion(\r\n        string _type,\r\n        string _name,\r\n        string _version\r\n    ) public view onlyInitialized returns (\r\n        bytes32 id,\r\n        string recordType,\r\n        string recordName,\r\n        string recordVersion,\r\n        string reference,\r\n        string referenceType,\r\n        bytes32 referenceHash,\r\n        bool deprecated\r\n    ) {\r\n        return getById(calculateId(_type, _name, _version));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns all records. Currently is supported only from internal calls.\r\n     * @return CredentialItem[]\r\n     */\r\n    function getAll() public view onlyInitialized returns (CredentialItem[]) {\r\n        uint256 count = getCount();\r\n        bytes32 id;\r\n        CredentialItem[] memory records = new CredentialItem[](count);\r\n        for (uint256 i = 0; i < count; i++) {\r\n            id = getRecordId(i);\r\n            records[i] = CredentialItem(\r\n                id,\r\n                getType(id),\r\n                getName(id),\r\n                getVersion(id),\r\n                getReference(id),\r\n                getReferenceType(id),\r\n                getReferenceHash(id)\r\n            );\r\n        }\r\n\r\n        return records;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns all ontology record IDs.\r\n     * Could be used from web3.js to retrieve the list of all records.\r\n     * @return bytes32[]\r\n     */\r\n    function getAllIds() public view onlyInitialized returns(bytes32[]) {\r\n        uint256 count = getCount();\r\n        bytes32[] memory ids = new bytes32[](count);\r\n        for (uint256 i = 0; i < count; i++) {\r\n            ids[i] = getRecordId(i);\r\n        }\r\n\r\n        return ids;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of registered ontology records.\r\n     * @return uint256\r\n     */\r\n    function getCount() internal view returns (uint256) {\r\n        // return recordsCount;\r\n        return uintStorage[keccak256(\"records.count\")];\r\n    }\r\n\r\n    /**\r\n    * @dev Increments total record count.\r\n    */\r\n    function incrementCount() internal {\r\n        // recordsCount = getCount().add(1);\r\n        uintStorage[keccak256(\"records.count\")] = getCount().add(1);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ontology record ID by numeric index.\r\n     * @return bytes32\r\n     */\r\n    function getRecordId(uint256 _index) internal view returns (bytes32) {\r\n        // return recordsIds[_index];\r\n        return bytes32Storage[keccak256(abi.encodePacked(\"records.ids.\", _index))];\r\n    }\r\n\r\n    /**\r\n    * @dev Saves ontology record ID against the index.\r\n    * @param _index Numeric index.\r\n    * @param _id Ontology record ID.\r\n    */\r\n    function setRecordId(uint256 _index, bytes32 _id) internal {\r\n        // recordsIds[_index] = _id;\r\n        bytes32Storage[keccak256(abi.encodePacked(\"records.ids.\", _index))] = _id;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Credential Item type.\r\n     * @return string\r\n     */\r\n    function getType(bytes32 _id) internal view returns (string) {\r\n        // return records[_id].type;\r\n        return stringStorage[keccak256(abi.encodePacked(\"records.\", _id, \".type\"))];\r\n    }\r\n\r\n    /**\r\n    * @dev Saves Credential Item type.\r\n    * @param _id Ontology record ID.\r\n    * @param _type Credential Item type.\r\n    */\r\n    function setType(bytes32 _id, string _type) internal {\r\n        // records[_id].type = _type;\r\n        stringStorage[keccak256(abi.encodePacked(\"records.\", _id, \".type\"))] = _type;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Credential Item name.\r\n     * @return string\r\n     */\r\n    function getName(bytes32 _id) internal view returns (string) {\r\n        // records[_id].name;\r\n        return stringStorage[keccak256(abi.encodePacked(\"records.\", _id, \".name\"))];\r\n    }\r\n\r\n    /**\r\n    * @dev Saves Credential Item name.\r\n    * @param _id Ontology record ID.\r\n    * @param _name Credential Item name.\r\n    */\r\n    function setName(bytes32 _id, string _name) internal {\r\n        // records[_id].name = _name;\r\n        stringStorage[keccak256(abi.encodePacked(\"records.\", _id, \".name\"))] = _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Credential Item version.\r\n     * @return string\r\n     */\r\n    function getVersion(bytes32 _id) internal view returns (string) {\r\n        // return records[_id].version;\r\n        return stringStorage[keccak256(abi.encodePacked(\"records.\", _id, \".version\"))];\r\n    }\r\n\r\n    /**\r\n    * @dev Saves Credential Item version.\r\n    * @param _id Ontology record ID.\r\n    * @param _version Credential Item version.\r\n    */\r\n    function setVersion(bytes32 _id, string _version) internal {\r\n        // records[_id].version = _version;\r\n        stringStorage[keccak256(abi.encodePacked(\"records.\", _id, \".version\"))] = _version;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Credential Item reference URL.\r\n     * @return string\r\n     */\r\n    function getReference(bytes32 _id) internal view returns (string) {\r\n        // return records[_id].reference;\r\n        return stringStorage[keccak256(abi.encodePacked(\"records.\", _id, \".reference\"))];\r\n    }\r\n\r\n    /**\r\n    * @dev Saves Credential Item reference URL.\r\n    * @param _id Ontology record ID.\r\n    * @param _reference Reference value.\r\n    */\r\n    function setReference(bytes32 _id, string _reference) internal {\r\n        // records[_id].reference = _reference;\r\n        stringStorage[keccak256(abi.encodePacked(\"records.\", _id, \".reference\"))] = _reference;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Credential Item reference type value.\r\n     * @return string\r\n     */\r\n    function getReferenceType(bytes32 _id) internal view returns (string) {\r\n        // return records[_id].referenceType;\r\n        return stringStorage[keccak256(abi.encodePacked(\"records.\", _id, \".referenceType\"))];\r\n    }\r\n\r\n    /**\r\n    * @dev Saves Credential Item reference type.\r\n    * @param _id Ontology record ID.\r\n    * @param _referenceType Reference type.\r\n    */\r\n    function setReferenceType(bytes32 _id, string _referenceType) internal {\r\n        // records[_id].referenceType = _referenceType;\r\n        stringStorage[keccak256(abi.encodePacked(\"records.\", _id, \".referenceType\"))] = _referenceType;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Credential Item reference hash value.\r\n     * @return bytes32\r\n     */\r\n    function getReferenceHash(bytes32 _id) internal view returns (bytes32) {\r\n        // return records[_id].referenceHash;\r\n        return bytes32Storage[keccak256(abi.encodePacked(\"records.\", _id, \".referenceHash\"))];\r\n    }\r\n\r\n    /**\r\n    * @dev Saves Credential Item reference hash.\r\n    * @param _id Ontology record ID.\r\n    * @param _referenceHash Reference hash.\r\n    */\r\n    function setReferenceHash(bytes32 _id, bytes32 _referenceHash) internal {\r\n        // records[_id].referenceHash = _referenceHash;\r\n        bytes32Storage[keccak256(abi.encodePacked(\"records.\", _id, \".referenceHash\"))] = _referenceHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Credential Item deprecation flag value.\r\n     * @return bool\r\n     */\r\n    function getDeprecated(bytes32 _id) internal view returns (bool) {\r\n        // return records[_id].deprecated;\r\n        return boolStorage[keccak256(abi.encodePacked(\"records.\", _id, \".deprecated\"))];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets Credential Item deprecation flag value.\r\n    * @param _id Ontology record ID.\r\n    */\r\n    function setDeprecated(bytes32 _id) internal {\r\n        // records[_id].deprecated = true;\r\n        boolStorage[keccak256(abi.encodePacked(\"records.\", _id, \".deprecated\"))] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates ontology record ID.\r\n    * @param _type Credential Item type.\r\n    * @param _name Credential Item name.\r\n    * @param _version Credential Item version.\r\n    */\r\n    function calculateId(string _type, string _name, string _version) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_type, \".\", _name, \".\", _version));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"deprecateById\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"getByTypeNameVersion\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"recordType\",\"type\":\"string\"},{\"name\":\"recordName\",\"type\":\"string\"},{\"name\":\"recordVersion\",\"type\":\"string\"},{\"name\":\"reference\",\"type\":\"string\"},{\"name\":\"referenceType\",\"type\":\"string\"},{\"name\":\"referenceHash\",\"type\":\"bytes32\"},{\"name\":\"deprecated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getById\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"recordType\",\"type\":\"string\"},{\"name\":\"recordName\",\"type\":\"string\"},{\"name\":\"recordVersion\",\"type\":\"string\"},{\"name\":\"reference\",\"type\":\"string\"},{\"name\":\"referenceType\",\"type\":\"string\"},{\"name\":\"referenceHash\",\"type\":\"bytes32\"},{\"name\":\"deprecated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recordType\",\"type\":\"string\"},{\"name\":\"_recordName\",\"type\":\"string\"},{\"name\":\"_recordVersion\",\"type\":\"string\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_referenceType\",\"type\":\"string\"},{\"name\":\"_referenceHash\",\"type\":\"bytes32\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAll\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"recordType\",\"type\":\"string\"},{\"name\":\"recordName\",\"type\":\"string\"},{\"name\":\"recordVersion\",\"type\":\"string\"},{\"name\":\"reference\",\"type\":\"string\"},{\"name\":\"referenceType\",\"type\":\"string\"},{\"name\":\"referenceHash\",\"type\":\"bytes32\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CvcOntology","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b9c7a18c216d1bc0111081cb79d81757072100cbb44e79bc80573e2c4b83b121"}]}