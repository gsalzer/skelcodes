{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts\\EthSmart.sol\r\n\r\ncontract EthSmart {\r\n    /**\r\n    *   RECOMMENDED GAS LIMIT: 300 000 (90755 calculated by myetherwallet)\r\n    */\r\n\tusing SafeMath for uint256;\r\n    /**\r\n    * @dev Admins wallets adresses:\r\n    */\r\n\taddress public constant referralAddress = 0x0B4a3ADd0276A0DD311D616DCFDDE5686f4b11A7;\r\n\taddress public constant advertisementAddress = 0x28C1aA68681d1Cca986CC1eC2fe4dF07d7Fddeef;\r\n\taddress public constant developerAddress = 0x3f13C78c63cee71224f80d09c58f9c642d7b7b2f;\r\n\t\r\n\tmapping (address => uint256) deposited;\r\n\tmapping (address => uint256) withdrew;\r\n\tmapping (address => uint256) refearned;\r\n\tmapping (address => uint256) blocklock;\r\n\t\r\n     /**\r\n    * @dev deposit and withdrew counter for website:\r\n    */\r\n\tuint256 public totalDeposited = 0;\r\n\tuint256 public totalWithdrew = 0;\r\n\t\r\n     /**\r\n    * @dev fee split:\r\n    */\r\n\tfunction() payable external {\r\n\t\tuint256 referralPercent = msg.value.mul(10).div(100);\r\n\t\tuint256 advertisementPercent = msg.value.mul(7).div(100);\r\n\t\tuint256 developerPercent = msg.value.mul(3).div(100);\r\n        referralAddress.transfer(referralPercent);\r\n\t    advertisementAddress.transfer(advertisementPercent);\r\n\t    developerAddress.transfer(developerPercent);\r\n    \r\n\t\tif (deposited[msg.sender] != 0) {\r\n\t\t\taddress investor = msg.sender;\r\n\t\t\t\r\n\t\t\t// investors dividends:\r\n\t\t\tuint256 depositsPercents = deposited[msg.sender].mul(5).div(100).mul(block.number-blocklock[msg.sender]).div(5900);\r\n\t\t\tinvestor.transfer(depositsPercents);\r\n\t\t\twithdrew[msg.sender] += depositsPercents;\r\n\t\t\ttotalWithdrew = totalWithdrew.add(depositsPercents);}\r\n\r\n\t    address referrer = bytesToAddress(msg.data);\r\n\t\t\r\n\t\t//investors referrer program\r\n\t\tif (referrer > 0x0 && referrer != msg.sender) {\r\n\t\t\treferrer.transfer(referralPercent);\r\n\t\t\trefearned[referrer] += referralPercent;}\r\n            \r\n        blocklock[msg.sender] = block.number;\r\n\t\tdeposited[msg.sender] += msg.value;\r\n        totalDeposited = totalDeposited.add(msg.value);}\r\n\r\n\tfunction investorDeposited(address _address) public view returns (uint256) {\r\n\t\treturn deposited[_address];}\r\n\r\n\tfunction investorWithdrew(address _address) public view returns (uint256) {\r\n\t\treturn withdrew[_address];}\r\n\r\n\tfunction investorDividends(address _address) public view returns (uint256) {\r\n\t\treturn deposited[_address].mul(5).div(100).mul(block.number-blocklock[_address]).div(5900);}\r\n\r\n\tfunction investorReferrals(address _address) public view returns (uint256) {\r\n\t\treturn refearned[_address];}\r\n\r\n\tfunction bytesToAddress(bytes bys) private pure returns (address addr) {\r\n\t\tassembly {\r\n\t\t\taddr := mload(add(bys, 20))}\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"investorDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertisementAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"investorReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"investorDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrew\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"investorWithdrew\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EthSmart","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fa016e1ede8096caf9a44aadaa27a6d00dae86cef4a25f59491fef827c99e137"}]}