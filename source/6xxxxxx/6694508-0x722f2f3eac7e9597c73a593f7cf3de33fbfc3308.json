{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n/* solium-disable security/no-block-members */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _start the time (as Unix time) at which point vesting starts\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  constructor(\r\n    address _beneficiary,\r\n    uint256 _start,\r\n    uint256 _cliff,\r\n    uint256 _duration,\r\n    bool _revocable\r\n  )\r\n    public\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param _token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic _token) public {\r\n    uint256 unreleased = releasableAmount(_token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    released[_token] = released[_token].add(unreleased);\r\n\r\n    _token.safeTransfer(beneficiary, unreleased);\r\n\r\n    emit Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param _token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic _token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[_token]);\r\n\r\n    uint256 balance = _token.balanceOf(address(this));\r\n\r\n    uint256 unreleased = releasableAmount(_token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[_token] = true;\r\n\r\n    _token.safeTransfer(owner, refund);\r\n\r\n    emit Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param _token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic _token) public view returns (uint256) {\r\n    return vestedAmount(_token).sub(released[_token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param _token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic _token) public view returns (uint256) {\r\n    uint256 currentBalance = _token.balanceOf(address(this));\r\n    uint256 totalBalance = currentBalance.add(released[_token]);\r\n\r\n    if (block.timestamp < cliff) {\r\n      return 0;\r\n    } else if (block.timestamp >= start.add(duration) || revoked[_token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\n/** @title Periodic Token Vesting\r\n  * @dev A token holder contract that can release its token balance periodically like a\r\n  * typical vesting scheme. Optionally revocable by the owner.\r\n  */\r\ncontract PeriodicTokenVesting is TokenVesting {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public releasePeriod;\r\n    uint256 public releaseCount;\r\n\r\n    mapping (address => uint256) public revokedAmount;\r\n\r\n    constructor(\r\n        address _beneficiary,\r\n        uint256 _startInUnixEpochTime,\r\n        uint256 _releasePeriodInSeconds,\r\n        uint256 _releaseCount\r\n    )\r\n        public\r\n        TokenVesting(_beneficiary, _startInUnixEpochTime, 0, _releasePeriodInSeconds.mul(_releaseCount), true)\r\n    {\r\n        require(_releasePeriodInSeconds.mul(_releaseCount) > 0, \"Vesting Duration cannot be 0\");\r\n        require(_startInUnixEpochTime.add(_releasePeriodInSeconds.mul(_releaseCount)) > block.timestamp, \"Worthless vesting\");\r\n        releasePeriod = _releasePeriodInSeconds;\r\n        releaseCount = _releaseCount;\r\n    }\r\n\r\n    function initialTokenAmountInVesting(ERC20Basic _token) public view returns (uint256) {\r\n        return _token.balanceOf(address(this)).add(released[_token]).add(revokedAmount[_token]);\r\n    }\r\n\r\n    function tokenAmountLockedInVesting(ERC20Basic _token) public view returns (uint256) {\r\n        return _token.balanceOf(address(this)).sub(releasableAmount(_token));\r\n    }\r\n\r\n    function nextVestingTime(ERC20Basic _token) public view returns (uint256) {\r\n        if (block.timestamp >= start.add(duration) || revoked[_token]) {\r\n            return 0;\r\n        } else {\r\n            return start.add(((block.timestamp.sub(start)).div(releasePeriod).add(1)).mul(releasePeriod));\r\n        }\r\n    }\r\n\r\n    function vestingCompletionTime(ERC20Basic _token) public view returns (uint256) {\r\n        if (block.timestamp >= start.add(duration) || revoked[_token]) {\r\n            return 0;\r\n        } else {\r\n            return start.add(duration);\r\n        }\r\n    }\r\n\r\n    function remainingVestingCount(ERC20Basic _token) public view returns (uint256) {\r\n        if (block.timestamp >= start.add(duration) || revoked[_token]) {\r\n            return 0;\r\n        } else {\r\n            return releaseCount.sub((block.timestamp.sub(start)).div(releasePeriod));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n     * remain in the contract, the rest are returned to the owner.\r\n     * @param _token ERC20 token which is being vested\r\n     */\r\n    function revoke(ERC20Basic _token) public onlyOwner {\r\n      require(revocable);\r\n      require(!revoked[_token]);\r\n\r\n      uint256 balance = _token.balanceOf(address(this));\r\n\r\n      uint256 unreleased = releasableAmount(_token);\r\n      uint256 refund = balance.sub(unreleased);\r\n\r\n      revoked[_token] = true;\r\n      revokedAmount[_token] = refund;\r\n\r\n      _token.safeTransfer(owner, refund);\r\n\r\n      emit Revoked();\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param _token ERC20 token which is being vested\r\n     */\r\n    function vestedAmount(ERC20Basic _token) public view returns (uint256) {\r\n        uint256 currentBalance = _token.balanceOf(address(this));\r\n        uint256 totalBalance = currentBalance.add(released[_token]);\r\n\r\n        if (block.timestamp < cliff) {\r\n            return 0;\r\n        } else if (block.timestamp >= start.add(duration) || revoked[_token]) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul((block.timestamp.sub(start)).div(releasePeriod)).div(releaseCount);\r\n        }\r\n    }\r\n}\r\n\r\n/** @title Cnus Token\r\n  * An ERC20-compliant token.\r\n  */\r\ncontract CnusToken is StandardToken, Ownable, BurnableToken {\r\n    using SafeMath for uint256;\r\n\r\n    // global token transfer lock\r\n    bool public globalTokenTransferLock = false;\r\n    bool public mintingFinished = false;\r\n    bool public lockingDisabled = false;\r\n\r\n    string public name = \"CoinUs\";\r\n    string public symbol = \"CNUS\";\r\n    uint256 public decimals = 18;\r\n\r\n    address public mintContractOwner;\r\n\r\n    address[] public vestedAddresses;\r\n\r\n    // mapping that provides address based lock.\r\n    mapping( address => bool ) public lockedStatusAddress;\r\n    mapping( address => PeriodicTokenVesting ) private tokenVestingContracts;\r\n\r\n    event LockingDisabled();\r\n    event GlobalLocked();\r\n    event GlobalUnlocked();\r\n    event Locked(address indexed lockedAddress);\r\n    event Unlocked(address indexed unlockedaddress);\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    event MintOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event VestingCreated(address indexed beneficiary, uint256 startTime, uint256 period, uint256 releaseCount);\r\n    event InitialVestingDeposited(address indexed beneficiary, uint256 amount);\r\n    event AllVestedTokenReleased();\r\n    event VestedTokenReleased(address indexed beneficiary);\r\n    event RevokedTokenVesting(address indexed beneficiary);\r\n\r\n    // Check for global lock status to be unlocked\r\n    modifier checkGlobalTokenTransferLock {\r\n        if (!lockingDisabled) {\r\n            require(!globalTokenTransferLock, \"Global lock is active\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Check for address lock to be unlocked\r\n    modifier checkAddressLock {\r\n        require(!lockedStatusAddress[msg.sender], \"Address is locked\");\r\n        _;\r\n    }\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished, \"Minting is finished\");\r\n        _;\r\n    }\r\n\r\n    modifier hasMintPermission() {\r\n        require(msg.sender == mintContractOwner, \"Minting is not authorized from this account\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        uint256 initialSupply = 2000000000;\r\n        initialSupply = initialSupply.mul(10**18);\r\n        totalSupply_ = initialSupply;\r\n        balances[msg.sender] = initialSupply;\r\n        mintContractOwner = msg.sender;\r\n    }\r\n\r\n    function disableLockingForever() public\r\n    onlyOwner\r\n    {\r\n        lockingDisabled = true;\r\n        emit LockingDisabled();\r\n    }\r\n\r\n    function setGlobalTokenTransferLock(bool locked) public\r\n    onlyOwner\r\n    {\r\n        require(!lockingDisabled);\r\n        require(globalTokenTransferLock != locked);\r\n        globalTokenTransferLock = locked;\r\n        if (globalTokenTransferLock) {\r\n            emit GlobalLocked();\r\n        } else {\r\n            emit GlobalUnlocked();\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev Allows token issuer to lock token transfer for an address.\r\n      * @param target Target address to lock token transfer.\r\n      */\r\n    function lockAddress(\r\n        address target\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(!lockingDisabled);\r\n        require(owner != target);\r\n        require(!lockedStatusAddress[target]);\r\n        for(uint256 i = 0; i < vestedAddresses.length; i++) {\r\n            require(tokenVestingContracts[vestedAddresses[i]] != target);\r\n        }\r\n        lockedStatusAddress[target] = true;\r\n        emit Locked(target);\r\n    }\r\n\r\n    /**\r\n      * @dev Allows token issuer to unlock token transfer for an address.\r\n      * @param target Target address to unlock token transfer.\r\n      */\r\n    function unlockAddress(\r\n        address target\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(!lockingDisabled);\r\n        require(lockedStatusAddress[target]);\r\n        lockedStatusAddress[target] = false;\r\n        emit Unlocked(target);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a vesting contract that vests its balance of Cnus token to the\r\n     * _beneficiary, gradually in periodic interval until all of the balance will have\r\n     * vested by period * release count time.\r\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n     * @param _startInUnixEpochTime the time (as Unix time) at which point vesting starts\r\n     * @param _releasePeriodInSeconds period in seconds in which tokens will vest to beneficiary\r\n     * @param _releaseCount count of period required to have all of the balance vested\r\n     */\r\n    function createNewVesting(\r\n        address _beneficiary,\r\n        uint256 _startInUnixEpochTime,\r\n        uint256 _releasePeriodInSeconds,\r\n        uint256 _releaseCount\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(tokenVestingContracts[_beneficiary] == address(0));\r\n        tokenVestingContracts[_beneficiary] = new PeriodicTokenVesting(\r\n            _beneficiary, _startInUnixEpochTime, _releasePeriodInSeconds, _releaseCount);\r\n        vestedAddresses.push(_beneficiary);\r\n        emit VestingCreated(_beneficiary, _startInUnixEpochTime, _releasePeriodInSeconds, _releaseCount);\r\n    }\r\n\r\n    /**\r\n      * @dev Transfers token vesting amount from token issuer to vesting contract created for the\r\n      * beneficiary. Token Issuer must first approve token spending from owner's account.\r\n      * @param _beneficiary beneficiary for whom vesting has been created with createNewVesting function.\r\n      * @param _vestAmount vesting amount for the beneficiary\r\n      */\r\n    function transferInitialVestAmountFromOwner(\r\n        address _beneficiary,\r\n        uint256 _vestAmount\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(tokenVestingContracts[_beneficiary] != address(0));\r\n        ERC20 cnusToken = ERC20(address(this));\r\n        require(cnusToken.allowance(owner, address(this)) >= _vestAmount);\r\n        require(cnusToken.transferFrom(owner, tokenVestingContracts[_beneficiary], _vestAmount));\r\n        emit InitialVestingDeposited(_beneficiary, cnusToken.balanceOf(tokenVestingContracts[_beneficiary]));\r\n        return true;\r\n    }\r\n\r\n    function checkVestedAddressCount()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return vestedAddresses.length;\r\n    }\r\n\r\n    function checkCurrentTotolVestedAmount()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 vestedAmountSum = 0;\r\n        for (uint256 i = 0; i < vestedAddresses.length; i++) {\r\n            vestedAmountSum = vestedAmountSum.add(\r\n                tokenVestingContracts[vestedAddresses[i]].vestedAmount(ERC20(address(this))));\r\n        }\r\n        return vestedAmountSum;\r\n    }\r\n\r\n    function checkCurrentTotalReleasableAmount()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 releasableAmountSum = 0;\r\n        for (uint256 i = 0; i < vestedAddresses.length; i++) {\r\n            releasableAmountSum = releasableAmountSum.add(\r\n                tokenVestingContracts[vestedAddresses[i]].releasableAmount(ERC20(address(this))));\r\n        }\r\n        return releasableAmountSum;\r\n    }\r\n\r\n    function checkCurrentTotalAmountLockedInVesting()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 lockedAmountSum = 0;\r\n        for (uint256 i = 0; i < vestedAddresses.length; i++) {\r\n            lockedAmountSum = lockedAmountSum.add(\r\n               tokenVestingContracts[vestedAddresses[i]].tokenAmountLockedInVesting(ERC20(address(this))));\r\n        }\r\n        return lockedAmountSum;\r\n    }\r\n\r\n    function checkInitialTotalTokenAmountInVesting()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 initialTokenVesting = 0;\r\n        for (uint256 i = 0; i < vestedAddresses.length; i++) {\r\n            initialTokenVesting = initialTokenVesting.add(\r\n                tokenVestingContracts[vestedAddresses[i]].initialTokenAmountInVesting(ERC20(address(this))));\r\n        }\r\n        return initialTokenVesting;\r\n    }\r\n\r\n    function checkNextVestingTimeForBeneficiary(\r\n        address _beneficiary\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tokenVestingContracts[_beneficiary] != address(0));\r\n        return tokenVestingContracts[_beneficiary].nextVestingTime(ERC20(address(this)));\r\n    }\r\n\r\n    function checkVestingCompletionTimeForBeneficiary(\r\n        address _beneficiary\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tokenVestingContracts[_beneficiary] != address(0));\r\n        return tokenVestingContracts[_beneficiary].vestingCompletionTime(ERC20(address(this)));\r\n    }\r\n\r\n    function checkRemainingVestingCountForBeneficiary(\r\n        address _beneficiary\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tokenVestingContracts[_beneficiary] != address(0));\r\n        return tokenVestingContracts[_beneficiary].remainingVestingCount(ERC20(address(this)));\r\n    }\r\n\r\n    function checkReleasableAmountForBeneficiary(\r\n        address _beneficiary\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tokenVestingContracts[_beneficiary] != address(0));\r\n        return tokenVestingContracts[_beneficiary].releasableAmount(ERC20(address(this)));\r\n    }\r\n\r\n    function checkVestedAmountForBeneficiary(\r\n        address _beneficiary\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tokenVestingContracts[_beneficiary] != address(0));\r\n        return tokenVestingContracts[_beneficiary].vestedAmount(ERC20(address(this)));\r\n    }\r\n\r\n    function checkTokenAmountLockedInVestingForBeneficiary(\r\n        address _beneficiary\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tokenVestingContracts[_beneficiary] != address(0));\r\n        return tokenVestingContracts[_beneficiary].tokenAmountLockedInVesting(ERC20(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to all beneficiaries.\r\n     */\r\n    function releaseAllVestedToken()\r\n        public\r\n        checkGlobalTokenTransferLock\r\n        returns (bool)\r\n    {\r\n        emit AllVestedTokenReleased();\r\n        PeriodicTokenVesting tokenVesting;\r\n        for(uint256 i = 0; i < vestedAddresses.length; i++) {\r\n            tokenVesting = tokenVestingContracts[vestedAddresses[i]];\r\n            if(tokenVesting.releasableAmount(ERC20(address(this))) > 0) {\r\n                tokenVesting.release(ERC20(address(this)));\r\n                emit VestedTokenReleased(vestedAddresses[i]);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     * @param _beneficiary Beneficiary to whom cnus token is being vested\r\n     */\r\n    function releaseVestedToken(\r\n        address _beneficiary\r\n    )\r\n        public\r\n        checkGlobalTokenTransferLock\r\n        returns (bool)\r\n    {\r\n        require(tokenVestingContracts[_beneficiary] != address(0));\r\n        tokenVestingContracts[_beneficiary].release(ERC20(address(this)));\r\n        emit VestedTokenReleased(_beneficiary);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n     * remain in the contract, the rest are returned to the owner.\r\n     * @param _beneficiary Beneficiary to whom cnus token is being vested\r\n     */\r\n    function revokeTokenVesting(\r\n        address _beneficiary\r\n    )\r\n        public\r\n        onlyOwner\r\n        checkGlobalTokenTransferLock\r\n        returns (bool)\r\n    {\r\n        require(tokenVestingContracts[_beneficiary] != address(0));\r\n        tokenVestingContracts[_beneficiary].revoke(ERC20(address(this)));\r\n        _transferMisplacedToken(owner, address(this), ERC20(address(this)).balanceOf(address(this)));\r\n        emit RevokedTokenVesting(_beneficiary);\r\n        return true;\r\n    }\r\n\r\n    /** @dev Transfer `_value` token to `_to` from `msg.sender`, on the condition\r\n      * that global token lock and individual address lock in the `msg.sender`\r\n      * accountare both released.\r\n      * @param _to The address of the recipient.\r\n      * @param _value The amount of token to be transferred.\r\n      * @return Whether the transfer was successful or not.\r\n      */\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        checkGlobalTokenTransferLock\r\n        checkAddressLock\r\n        returns (bool)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        checkGlobalTokenTransferLock\r\n        returns (bool)\r\n    {\r\n        require(!lockedStatusAddress[_from], \"Address is locked.\");\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @param _value uint256 The amount of tokens to be spent.\r\n     */\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n        checkGlobalTokenTransferLock\r\n        checkAddressLock\r\n        returns (bool)\r\n    {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint _addedValue\r\n    )\r\n        public\r\n        checkGlobalTokenTransferLock\r\n        checkAddressLock\r\n        returns (bool success)\r\n    {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint _subtractedValue\r\n    )\r\n        public\r\n        checkGlobalTokenTransferLock\r\n        checkAddressLock\r\n        returns (bool success)\r\n    {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to transfer mint ownership.\r\n     * @param _newOwner The address that will have the mint ownership.\r\n     */\r\n    function transferMintOwnership(\r\n        address _newOwner\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        _transferMintOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        hasMintPermission\r\n        canMint\r\n        returns (bool)\r\n    {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting()\r\n        public\r\n        onlyOwner\r\n        canMint\r\n        returns (bool)\r\n    {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n    function checkMisplacedTokenBalance(\r\n        address _tokenAddress\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        ERC20 unknownToken = ERC20(_tokenAddress);\r\n        return unknownToken.balanceOf(address(this));\r\n    }\r\n\r\n    // Allow transfer of accidentally sent ERC20 tokens\r\n    function refundMisplacedToken(\r\n        address _recipient,\r\n        address _tokenAddress,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        _transferMisplacedToken(_recipient, _tokenAddress, _value);\r\n    }\r\n\r\n    function _transferMintOwnership(\r\n        address _newOwner\r\n    )\r\n        internal\r\n    {\r\n        require(_newOwner != address(0));\r\n        emit MintOwnershipTransferred(mintContractOwner, _newOwner);\r\n        mintContractOwner = _newOwner;\r\n    }\r\n\r\n    function _transferMisplacedToken(\r\n        address _recipient,\r\n        address _tokenAddress,\r\n        uint256 _value\r\n    )\r\n        internal\r\n    {\r\n        require(_recipient != address(0));\r\n        ERC20 unknownToken = ERC20(_tokenAddress);\r\n        require(unknownToken.balanceOf(address(this)) >= _value, \"Insufficient token balance.\");\r\n        require(unknownToken.transfer(_recipient, _value));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedStatusAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferMintOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_startInUnixEpochTime\",\"type\":\"uint256\"},{\"name\":\"_releasePeriodInSeconds\",\"type\":\"uint256\"},{\"name\":\"_releaseCount\",\"type\":\"uint256\"}],\"name\":\"createNewVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"lockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkInitialTotalTokenAmountInVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkCurrentTotalReleasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"checkMisplacedTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_vestAmount\",\"type\":\"uint256\"}],\"name\":\"transferInitialVestAmountFromOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalTokenTransferLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableLockingForever\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"refundMisplacedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseAllVestedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"checkVestingCompletionTimeForBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"checkTokenAmountLockedInVestingForBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"setGlobalTokenTransferLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkVestedAddressCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkCurrentTotolVestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"checkVestedAmountForBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unlockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"checkRemainingVestingCountForBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"releaseVestedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkCurrentTotalAmountLockedInVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"checkNextVestingTimeForBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"revokeTokenVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockingDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"checkReleasableAmountForBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LockingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GlobalLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GlobalUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lockedAddress\",\"type\":\"address\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unlockedaddress\",\"type\":\"address\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"MintOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseCount\",\"type\":\"uint256\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InitialVestingDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllVestedTokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"VestedTokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"RevokedTokenVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CnusToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f04abac9bb4e7d72f4033c8c997791f10220a672c24b6d69da3c7785fc3fb0dd"}]}