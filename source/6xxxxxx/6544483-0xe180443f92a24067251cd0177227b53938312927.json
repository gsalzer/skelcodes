{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC223 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/223\r\n */\r\ninterface ERC223I {\r\n\r\n  function balanceOf(address _owner) external view returns (uint balance);\r\n  \r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function decimals() external view returns (uint8 _decimals);\r\n  function totalSupply() external view returns (uint256 supply);\r\n\r\n  function transfer(address to, uint value) external returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) external returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) external returns (bool ok);\r\n\r\n  function releaseTokenTransfer() external;\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);  \r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow.\r\n    */\r\n    function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        assert(y <= x);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x + y;\r\n        assert(z >= x);\r\n        return z;\r\n    }\r\n\t\r\n\t/**\r\n    * @dev Integer division of two numbers, reverts on division by zero.\r\n    */\r\n    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x / y;\r\n        return z;\r\n    }\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\t\r\n    function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {    \r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n    \r\n        uint256 z = x * y;\r\n        assert(z / x == y);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the integer percentage of the number.\r\n    */\r\n    function safePerc(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 z = x * y;\r\n        assert(z / x == y);    \r\n        z = z / 10000; // percent to hundredths\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the minimum value of two numbers.\r\n    */\t\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x <= y ? x : y;\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the maximum value of two numbers.\r\n    */\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x >= y ? x : y;\r\n        return z;\r\n    }\r\n}\r\n/**\r\n * @title Ownable contract - base contract with an owner\r\n */\r\ncontract Ownable {\r\n  \r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n  \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    assert(_newOwner != address(0));      \r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Accept transferOwnership.\r\n   */\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Agent contract - base contract with an agent\r\n */\r\ncontract Agent is Ownable {\r\n\r\n  address public defAgent;\r\n\r\n  mapping(address => bool) public Agents;  \r\n\r\n  event UpdatedAgent(address _agent, bool _status);\r\n\r\n  constructor() public {\r\n    defAgent = msg.sender;\r\n    Agents[msg.sender] = true;\r\n  }\r\n  \r\n  modifier onlyAgent() {\r\n    assert(Agents[msg.sender]);\r\n    _;\r\n  }\r\n  \r\n  function updateAgent(address _agent, bool _status) public onlyOwner {\r\n    assert(_agent != address(0));\r\n    Agents[_agent] = _status;\r\n\r\n    emit UpdatedAgent(_agent, _status);\r\n  }  \r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC223 token\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/223\r\n */\r\ncontract ERC223 is ERC223I, Agent, SafeMath {\r\n\r\n  mapping(address => uint) balances;\r\n  \r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n  address public crowdsale = address(0);\r\n  bool public released = false;\r\n\r\n  /**\r\n   * @dev Limit token transfer until the crowdsale is over.\r\n   */\r\n  modifier canTransfer() {\r\n    assert(released || msg.sender == crowdsale);\r\n    _;\r\n  }\r\n\r\n  modifier onlyCrowdsaleContract() {\r\n    assert(msg.sender == crowdsale);\r\n    _;\r\n  }  \r\n  \r\n  function name() public view returns (string _name) {\r\n    return name;\r\n  }\r\n\r\n  function symbol() public view returns (string _symbol) {\r\n    return symbol;\r\n  }\r\n\r\n  function decimals() public view returns (uint8 _decimals) {\r\n    return decimals;\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256 _totalSupply) {\r\n    return totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }  \r\n\r\n  // if bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private view returns (bool is_contract) {\r\n    uint length;\r\n    assembly {\r\n      //retrieve the size of the code on target address, this needs assembly\r\n      length := extcodesize(_addr)\r\n    }\r\n    return (length>0);\r\n  }\r\n  \r\n  // function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data) external canTransfer() returns (bool success) {      \r\n    if(isContract(_to)) {\r\n      return transferToContract(_to, _value, _data);\r\n    } else {\r\n      return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n  \r\n  // standard function transfer similar to ERC20 transfer with no _data.\r\n  // added due to backwards compatibility reasons.\r\n  function transfer(address _to, uint _value) external canTransfer() returns (bool success) {      \r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n      return transferToContract(_to, _value, empty);\r\n    } else {\r\n      return transferToAddress(_to, _value, empty);\r\n    }\r\n  }\r\n\r\n  // function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    emit Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n  \r\n  // function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    assert(_to.call.value(0)(abi.encodeWithSignature(\"tokenFallback(address,uint256,bytes)\", msg.sender, _value, _data)));\r\n    emit Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  // function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) external canTransfer() returns (bool success) {      \r\n    if(isContract(_to)) {\r\n      if (balanceOf(msg.sender) < _value) revert();\r\n      balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n      balances[_to] = safeAdd(balanceOf(_to), _value);      \r\n      assert(_to.call.value(0)(abi.encodeWithSignature(_custom_fallback), msg.sender, _value, _data));    \r\n      emit Transfer(msg.sender, _to, _value, _data);\r\n      return true;\r\n    } else {\r\n      return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n\r\n  function setCrowdsaleContract(address _contract) external onlyOwner {\r\n    crowdsale = _contract;\r\n  }\r\n\r\n  /**\r\n   * @dev One way function to release the tokens to the wild. Can be called only from the crowdsale contract.\r\n   */\r\n  function releaseTokenTransfer() external onlyCrowdsaleContract {\r\n    released = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SABIGlobal Token based on ERC223 token\r\n */\r\ncontract SABIToken is ERC223 {\r\n\t\r\n  uint public initialSupply = 1400 * 10**6; // 1.4 billion\r\n\r\n  /** Name and symbol were updated. */\r\n  event UpdatedTokenInformation(string _name, string _symbol);\r\n\r\n  constructor(string _name, string _symbol, address _crowdsale, address _team, address _bounty, address _adviser, address _developer) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = 8;\r\n    crowdsale = _crowdsale;\r\n\r\n    bytes memory empty;    \r\n    totalSupply = initialSupply*uint(10)**decimals;\r\n    // creating initial tokens\r\n    balances[_crowdsale] = totalSupply;    \r\n    emit Transfer(0x0, _crowdsale, balances[_crowdsale], empty);\r\n    \r\n    // send 15% - to team account\r\n    uint value = safePerc(totalSupply, 1500);\r\n    balances[_crowdsale] = safeSub(balances[_crowdsale], value);\r\n    balances[_team] = value;\r\n    emit Transfer(_crowdsale, _team, balances[_team], empty);  \r\n\r\n    // send 5% - to bounty account\r\n    value = safePerc(totalSupply, 500);\r\n    balances[_crowdsale] = safeSub(balances[_crowdsale], value);\r\n    balances[_bounty] = value;\r\n    emit Transfer(_crowdsale, _bounty, balances[_bounty], empty);\r\n\r\n    // send 1.5% - to adviser account\r\n    value = safePerc(totalSupply, 150);\r\n    balances[_crowdsale] = safeSub(balances[_crowdsale], value);\r\n    balances[_adviser] = value;\r\n    emit Transfer(_crowdsale, _adviser, balances[_adviser], empty);\r\n\r\n    // send 1% - to developer account\r\n    value = safePerc(totalSupply, 100);\r\n    balances[_crowdsale] = safeSub(balances[_crowdsale], value);\r\n    balances[_developer] = value;\r\n    emit Transfer(_crowdsale, _developer, balances[_developer], empty);\r\n  } \r\n\r\n  /**\r\n  * Owner may issue new tokens\r\n  */\r\n  function mint(address _receiver, uint _amount) public onlyOwner {\r\n    balances[_receiver] = safeAdd(balances[_receiver], _amount);\r\n    totalSupply = safeAdd(totalSupply, _amount);\r\n    bytes memory empty;    \r\n    emit Transfer(0x0, _receiver, _amount, empty);    \r\n  }\r\n\r\n  /**\r\n  * Owner can update token information here.\r\n  */\r\n  function updateTokenInformation(string _name, string _symbol) public onlyOwner {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    emit UpdatedTokenInformation(_name, _symbol);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"updateTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setCrowdsaleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Agents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_crowdsale\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_bounty\",\"type\":\"address\"},{\"name\":\"_adviser\",\"type\":\"address\"},{\"name\":\"_developer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_agent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"UpdatedAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SABIToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000087432b7f9a47efc56b4a0cc3c6d0644ae74b982000000000000000000000000cf6f2e5d866de246583333e31f1f1b5790b1cd4f000000000000000000000000b5a291195ffed70bfe1a80cd47bdc8a1bed5d81b000000000000000000000000d8352fee21f9359ecc1c5cbf3dcfbbff7fc6950f00000000000000000000000008524fc879360fb3640944359a44a32c186002b4000000000000000000000000000000000000000000000000000000000000000a53414249474c4f42414c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045341424900000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://cdc9cbf44ac2b04687ac3a467004866a6717fe4fb2c12d52abc50eb73fa1bfe7"}]}