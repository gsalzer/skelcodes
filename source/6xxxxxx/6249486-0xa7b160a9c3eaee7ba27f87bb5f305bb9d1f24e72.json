{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract GetAchieveICO is Ownable {\r\n    using SafeMath for uint;\r\n    \r\n    address public beneficiary;\r\n    uint256 public decimals;\r\n    uint256 public softCap;            // in Wei\r\n    uint256 public hardCap;            // in Wei\r\n    uint256 public amountRaised;       // in Wei\r\n    uint256 public amountSold;         // Amount of sold tokens with decimals\r\n    uint256 public maxAmountToSell;    // Amount of tokens to sell for current Round [Pre Sale - 192M GAT, Sale - 228M GAT]\r\n    \r\n    uint256 deadline1;  // Pre Sale deadline\r\n    uint256 deadline2;  // Sale deadline\r\n    uint256 oneWeek;    // 1 week timeline\r\n    \r\n    uint256 public price;       // Current price\r\n    uint256 price0;             // Sale period price (ICO)\r\n    uint256 price1;             // Pre Sale period price Round 1\r\n    uint256 price2;             // Pre Sale period price Round 2\r\n    uint256 price3;             // Pre Sale period price Round 3\r\n    uint256 price4;             // Pre Sale period price Round 4\r\n    uint256 price5;             // Pre Sale period price Round 5\r\n    uint256 price6;             // Pre Sale period price Round 6\r\n    uint256 price7;             // Pre Sale period price Round 7\r\n    \r\n    ERC20 public token;\r\n    mapping(address => uint256) balances;\r\n    bool public fundingGoalReached = false;\r\n    bool public crowdsaleClosed = true;     // Closed till manually start by the owner\r\n\r\n    event GoalReached(address recipient, uint256 totalAmountRaised);\r\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\r\n    \r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initialization\r\n     */\r\n    constructor(\r\n        address wallet,\r\n        ERC20 addressOfToken\r\n    ) public {\r\n        beneficiary = wallet;\r\n        decimals = 18;\r\n        softCap = 4000 * 1 ether;\r\n        hardCap = 12000 * 1 ether;\r\n        maxAmountToSell = 192000000 * 10 ** decimals;    // Pre Sale 192M GAT. Then 228M GAT will be added in time of Sale period\r\n        // Price rates\r\n        price0 = 40;        // 0.000040 ETH (in Wei)\r\n        price1 = 20;        // 0.000020 ETH (in Wei)\r\n        price2 = 24;        // 0.000024 ETH (in Wei)\r\n        price3 = 24;        // 0.000024 ETH (in Wei)\r\n        price4 = 28;        // 0.000028 ETH (in Wei)\r\n        price5 = 28;        // 0.000028 ETH (in Wei)\r\n        price6 = 32;        // 0.000032 ETH (in Wei)\r\n        price7 = 32;        // 0.000032 ETH (in Wei)\r\n        price = price1;     // Set Pre Sale Round 1 token price as current\r\n        oneWeek = 7 * 1 days;\r\n        deadline2 = now + 50 * oneWeek; // Just for blocking checkGoalReached() function call till Crowdsale start\r\n        token = addressOfToken;\r\n    }\r\n    \r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable public {\r\n        require(!crowdsaleClosed);\r\n        require(_validateSaleDate());\r\n        require(msg.sender != address(0));\r\n        uint256 amount = msg.value;\r\n        require(amount != 0);\r\n        require(amount >= 10000000000000000);       // min 0.01 ETH\r\n        require(amount <= hardCap);                 // Hard cap\r\n        \r\n        uint256 tokens = amount.mul(10 ** 6);       // Add 6 zeros in the end of 'amount' to use correct price rate\r\n        tokens = tokens.div(price);                 // Amount of tokens to sell for the current price rate\r\n        require(amountSold.add(tokens) <= maxAmountToSell);     // Check token oversell for the current Round\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        amountRaised = amountRaised.add(amount);\r\n        amountSold = amountSold.add(tokens);        // Update amount of sold tokens\r\n        \r\n        token.transfer(msg.sender, tokens);\r\n        emit FundTransfer(msg.sender, amount, true);\r\n    }\r\n    \r\n    /**\r\n     * @dev Validation of Pre Sale period\r\n     * @return bool\r\n     */\r\n    function _validateSaleDate() internal returns (bool) {\r\n        // Pre Sale\r\n        if(now <= deadline1) {\r\n            uint256 dateDif = deadline1.sub(now);\r\n            if (dateDif <= 2 * 1 days) {\r\n                price = price7;     // Round 7\r\n                return true;\r\n            } else if (dateDif <= 4 * 1 days) {\r\n                price = price6;     // Round 6\r\n                return true;\r\n            } else if (dateDif <= 6 * 1 days) {\r\n                price = price5;     // Round 5\r\n                return true;\r\n            } else if (dateDif <= 8 * 1 days) {\r\n                price = price4;     // Round 4\r\n                return true;\r\n            } else if (dateDif <= 10 * 1 days) {\r\n                price = price3;     // Round 3\r\n                return true;\r\n            } else if (dateDif <= 12 * 1 days) {\r\n                price = price2;     // Round 2\r\n                return true;\r\n            } else if (dateDif <= 14 * 1 days) {\r\n                price = price1;     // Round 1\r\n                return true;\r\n            } else {\r\n                price = 25;         // Default average value\r\n                return true;\r\n            }\r\n        }\r\n        // Sale\r\n        if (now >= (deadline1.add(oneWeek)) && now <= deadline2) {\r\n            maxAmountToSell = 420000000 * 10 ** decimals;    // Pre Sale + Sale = 192M GAT + 228M GAT\r\n            price = price0;             // Sale token price\r\n            return true;\r\n        }\r\n        // After Sale\r\n        if (now >= deadline2) {\r\n            crowdsaleClosed = true;     // Crowdsale period is finished\r\n            return false;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    /**\r\n    * @dev Start Sale\r\n    */\r\n    function startCrowdsale() onlyOwner public returns (bool) {\r\n        deadline1 = now + 2 * oneWeek;                      // Set Pre Sale deadline 2 weeks\r\n        deadline2 = deadline1 + oneWeek + 8 * oneWeek;      // Set Sale deadline 8 weeks\r\n        crowdsaleClosed = false;    // Start Crowdsale period\r\n        return true;\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadline2) _; }\r\n\r\n    /**\r\n     * Check if goal was reached\r\n     * Checks if the goal or time limit has been reached and ends the campaign\r\n     */\r\n    function checkGoalReached() onlyOwner afterDeadline public {\r\n        if (amountRaised >= softCap) {\r\n            fundingGoalReached = true;\r\n            emit GoalReached(beneficiary, amountRaised);\r\n        }\r\n        crowdsaleClosed = true;     // Close Crowdsale\r\n    }\r\n\r\n\r\n    /**\r\n     * Withdraw the funds\r\n     *\r\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\r\n     * the amount they contributed.\r\n     */\r\n    function safeWithdrawal() afterDeadline public {\r\n        require(!fundingGoalReached);\r\n        require(crowdsaleClosed);\r\n        \r\n        uint256 amount = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n        if (amount > 0) {\r\n            if (msg.sender.send(amount)) {\r\n               emit FundTransfer(msg.sender, amount, false);\r\n            } else {\r\n                balances[msg.sender] = amount;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Withdraw the funds\r\n     */\r\n    function safeWithdrawFunds(uint256 amount) onlyOwner public returns (bool) {\r\n        require(beneficiary == msg.sender);\r\n        \r\n        if (beneficiary.send(amount)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Withdraw rest of tokens from smart contract balance to the owner's wallet\r\n     * if funding goal is not reached and Crowdsale is already closed.\r\n     * \r\n     * Can be used for Airdrop if funding goal is not reached.\r\n     */\r\n    function safeWithdrawTokens(uint256 amount) onlyOwner afterDeadline public returns (bool) {\r\n        require(!fundingGoalReached);\r\n        require(crowdsaleClosed);\r\n        \r\n        token.transfer(beneficiary, amount);\r\n        emit FundTransfer(beneficiary, amount, false);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmountToSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"addressOfToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"GetAchieveICO","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003174beace0fa1fdc0a223d3817417da18955d4bf000000000000000000000000b07efbe81051e11f4a4d0f2a43802d3f970ac770","Library":"","SwarmSource":"bzzr://07d6b78b590a955070a5929a11c72acd34dbacdfe640fe6656c9b65e503c4042"}]}