{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/PumaPayToken.sol\r\n\r\n/// PumaPayToken inherits from MintableToken, which in turn inherits from StandardToken.\r\n/// Super is used to bypass the original function signature and include the whenNotMinting modifier.\r\ncontract PumaPayToken is MintableToken {\r\n\r\n    string public name = \"PumaPay\"; \r\n    string public symbol = \"PMA\";\r\n    uint8 public decimals = 18;\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    /// This modifier will be used to disable all ERC20 functionalities during the minting process.\r\n    modifier whenNotMinting() {\r\n        require(mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /// @dev transfer token for a specified address\r\n    /// @param _to address The address to transfer to.\r\n    /// @param _value uint256 The amount to be transferred.\r\n    /// @return success bool Calling super.transfer and returns true if successful.\r\n    function transfer(address _to, uint256 _value) public whenNotMinting returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /// @dev Transfer tokens from one address to another.\r\n    /// @param _from address The address which you want to send tokens from.\r\n    /// @param _to address The address which you want to transfer to.\r\n    /// @param _value uint256 the amount of tokens to be transferred.\r\n    /// @return success bool Calling super.transferFrom and returns true if successful.\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotMinting returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/PumaPayPullPayment.sol\r\n\r\n/// @title PumaPay Pull Payment - Contract that facilitates our pull payment protocol\r\n/// @author PumaPay Dev Team - <developers@pumapay.io>\r\ncontract PumaPayPullPayment is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Events\r\n    /// ===============================================================================================================\r\n\r\n    event LogExecutorAdded(address executor);\r\n    event LogExecutorRemoved(address executor);\r\n    event LogPaymentRegistered(address clientAddress, address beneficiaryAddress, string paymentID);\r\n    event LogPaymentCancelled(address clientAddress, address beneficiaryAddress, string paymentID);\r\n    event LogPullPaymentExecuted(address clientAddress, address beneficiaryAddress, string paymentID);\r\n    event LogSetExchangeRate(string currency, uint256 exchangeRate);\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Constants\r\n    /// ===============================================================================================================\r\n\r\n    uint256 constant private DECIMAL_FIXER = 10 ** 10;    /// 1e^10 - This transforms the Rate from decimals to uint256\r\n    uint256 constant private FIAT_TO_CENT_FIXER = 100;    /// Fiat currencies have 100 cents in 1 basic monetary unit.\r\n    uint256 constant private ONE_ETHER = 1 ether;         /// PumaPay token has 18 decimals - same as one ETHER\r\n    uint256 constant private MINIMUM_AMOUNT_OF_ETH_FOR_OPARATORS = 0.01 ether; /// minimum amount of ETHER the owner/executor should have\r\n    uint256 constant private OVERFLOW_LIMITER_NUMBER = 10 ** 20; /// 1e^20 - This number is used to prevent numeric overflows\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Members\r\n    /// ===============================================================================================================\r\n\r\n    PumaPayToken public token;\r\n\r\n    mapping(string => uint256) private exchangeRates;\r\n    mapping(address => bool) public executors;\r\n    mapping(address => mapping(address => PullPayment)) public pullPayments;\r\n\r\n    struct PullPayment {\r\n        string merchantID;                      /// ID of the merchant\r\n        string paymentID;                       /// ID of the payment\r\n        string currency;                        /// 3-letter abbr i.e. 'EUR' / 'USD' etc.\r\n        uint256 initialPaymentAmountInCents;    /// initial payment amount in fiat in cents\r\n        uint256 fiatAmountInCents;              /// payment amount in fiat in cents\r\n        uint256 frequency;                      /// how often merchant can pull - in seconds\r\n        uint256 numberOfPayments;               /// amount of pull payments merchant can make\r\n        uint256 startTimestamp;                 /// when subscription starts - in seconds\r\n        uint256 nextPaymentTimestamp;           /// timestamp of next payment\r\n        uint256 lastPaymentTimestamp;           /// timestamp of last payment\r\n        uint256 cancelTimestamp;                /// timestamp the payment was cancelled\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Modifiers\r\n    /// ===============================================================================================================\r\n    modifier isExecutor() {\r\n        require(executors[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier executorExists(address _executor) {\r\n        require(executors[_executor]);\r\n        _;\r\n    }\r\n\r\n    modifier executorDoesNotExists(address _executor) {\r\n        require(!executors[_executor]);\r\n        _;\r\n    }\r\n\r\n    modifier paymentExists(address _client, address _beneficiary) {\r\n        require(doesPaymentExist(_client, _beneficiary));\r\n        _;\r\n    }\r\n\r\n    modifier paymentNotCancelled(address _client, address _beneficiary) {\r\n        require(pullPayments[_client][_beneficiary].cancelTimestamp == 0);\r\n        _;\r\n    }\r\n\r\n    modifier isValidPullPaymentRequest(address _client, address _beneficiary, string _paymentID) {\r\n        require(\r\n            (pullPayments[_client][_beneficiary].initialPaymentAmountInCents > 0 ||\r\n            (now >= pullPayments[_client][_beneficiary].startTimestamp &&\r\n            now >= pullPayments[_client][_beneficiary].nextPaymentTimestamp)\r\n            )\r\n            &&\r\n            pullPayments[_client][_beneficiary].numberOfPayments > 0 &&\r\n        (pullPayments[_client][_beneficiary].cancelTimestamp == 0 ||\r\n        pullPayments[_client][_beneficiary].cancelTimestamp > pullPayments[_client][_beneficiary].nextPaymentTimestamp) &&\r\n        keccak256(\r\n            abi.encodePacked(pullPayments[_client][_beneficiary].paymentID)\r\n        ) == keccak256(abi.encodePacked(_paymentID))\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isValidDeletionRequest(string paymentID, address client, address beneficiary) {\r\n        require(\r\n            beneficiary != address(0) &&\r\n            client != address(0) &&\r\n            bytes(paymentID).length != 0\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isValidAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Constructor\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Contract constructor - sets the token address that the contract facilitates.\r\n    /// @param _token Token Address.\r\n    constructor (PumaPayToken _token)\r\n    public\r\n    {\r\n        require(_token != address(0));\r\n        token = _token;\r\n    }\r\n\r\n    // @notice Will receive any eth sent to the contract\r\n    function() external payable {\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions - Owner Only\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Adds a new executor. - can be executed only by the onwer. \r\n    /// When adding a new executor 1 ETH is tranferred to allow the executor to pay for gas.\r\n    /// The balance of the owner is also checked and if funding is needed 1 ETH is transferred.\r\n    /// @param _executor - address of the executor which cannot be zero address.\r\n    function addExecutor(address _executor)\r\n    public\r\n    onlyOwner\r\n    isValidAddress(_executor)\r\n    executorDoesNotExists(_executor)\r\n    {\r\n        _executor.transfer(0.25 ether);\r\n        executors[_executor] = true;\r\n\r\n        if (isFundingNeeded(owner)) {\r\n            owner.transfer(0.5 ether);\r\n        }\r\n\r\n        emit LogExecutorAdded(_executor);\r\n    }\r\n\r\n    /// @dev Removes a new executor. - can be executed only by the onwer.\r\n    /// The balance of the owner is checked and if funding is needed 1 ETH is transferred.\r\n    /// @param _executor - address of the executor which cannot be zero address.\r\n    function removeExecutor(address _executor)\r\n    public\r\n    onlyOwner\r\n    isValidAddress(_executor)\r\n    executorExists(_executor)\r\n    {\r\n        executors[_executor] = false;\r\n        if (isFundingNeeded(owner)) {\r\n            owner.transfer(0.5 ether);\r\n        }\r\n        emit LogExecutorRemoved(_executor);\r\n    }\r\n\r\n    /// @dev Sets the exchange rate for a currency. - can be executed only by the onwer.\r\n    /// Emits 'LogSetExchangeRate' with the currency and the updated rate.\r\n    /// The balance of the owner is checked and if funding is needed 1 ETH is transferred.\r\n    /// @param _currency - address of the executor which cannot be zero address\r\n    /// @param _rate - address of the executor which cannot be zero address\r\n    function setRate(string _currency, uint256 _rate)\r\n    public\r\n    onlyOwner\r\n    returns (bool) {\r\n        exchangeRates[_currency] = _rate;\r\n        emit LogSetExchangeRate(_currency, _rate);\r\n\r\n        if (isFundingNeeded(owner)) {\r\n            owner.transfer(0.5 ether);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions - Executors Only\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Registers a new pull payment to the PumaPay Pull Payment Contract - The registration can be executed only by one of the executors of the PumaPay Pull Payment Contract\r\n    /// and the PumaPay Pull Payment Contract checks that the pull payment has been singed by the client of the account.\r\n    /// The balance of the executor (msg.sender) is checked and if funding is needed 1 ETH is transferred.\r\n    /// Emits 'LogPaymentRegistered' with client address, beneficiary address and paymentID.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _merchantID - ID of the merchant.\r\n    /// @param _paymentID - ID of the payment.\r\n    /// @param _client - client address that is linked to this pull payment.\r\n    /// @param _beneficiary - address that is allowed to execute this pull payment.\r\n    /// @param _currency - currency of the payment / 3-letter abbr i.e. 'EUR'.\r\n    /// @param _fiatAmountInCents - payment amount in fiat in cents.\r\n    /// @param _frequency - how often merchant can pull - in seconds.\r\n    /// @param _numberOfPayments - amount of pull payments merchant can make\r\n    /// @param _startTimestamp - when subscription starts - in seconds.\r\n    function registerPullPayment(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        string _merchantID,\r\n        string _paymentID,\r\n        address _client,\r\n        address _beneficiary,\r\n        string _currency,\r\n        uint256 _initialPaymentAmountInCents,\r\n        uint256 _fiatAmountInCents,\r\n        uint256 _frequency,\r\n        uint256 _numberOfPayments,\r\n        uint256 _startTimestamp\r\n    )\r\n    public\r\n    isExecutor()\r\n    {\r\n        require(\r\n            bytes(_paymentID).length > 0 &&\r\n            bytes(_currency).length > 0 &&\r\n            _client != address(0) &&\r\n            _beneficiary != address(0) &&\r\n            _fiatAmountInCents > 0 &&\r\n            _frequency > 0 &&\r\n            _frequency < OVERFLOW_LIMITER_NUMBER &&\r\n            _numberOfPayments > 0 &&\r\n            _startTimestamp > 0 &&\r\n            _startTimestamp < OVERFLOW_LIMITER_NUMBER\r\n        );\r\n\r\n        pullPayments[_client][_beneficiary].currency = _currency;\r\n        pullPayments[_client][_beneficiary].initialPaymentAmountInCents = _initialPaymentAmountInCents;\r\n        pullPayments[_client][_beneficiary].fiatAmountInCents = _fiatAmountInCents;\r\n        pullPayments[_client][_beneficiary].frequency = _frequency;\r\n        pullPayments[_client][_beneficiary].startTimestamp = _startTimestamp;\r\n        pullPayments[_client][_beneficiary].numberOfPayments = _numberOfPayments;\r\n\r\n        require(isValidRegistration(v, r, s, _client, _beneficiary, pullPayments[_client][_beneficiary]));\r\n\r\n        pullPayments[_client][_beneficiary].merchantID = _merchantID;\r\n        pullPayments[_client][_beneficiary].paymentID = _paymentID;\r\n        pullPayments[_client][_beneficiary].nextPaymentTimestamp = _startTimestamp;\r\n        pullPayments[_client][_beneficiary].lastPaymentTimestamp = 0;\r\n        pullPayments[_client][_beneficiary].cancelTimestamp = 0;\r\n\r\n        if (isFundingNeeded(msg.sender)) {\r\n            msg.sender.transfer(0.5 ether);\r\n        }\r\n\r\n        emit LogPaymentRegistered(_client, _beneficiary, _paymentID);\r\n    }\r\n\r\n    /// @dev Deletes a pull payment for a beneficiary - The deletion needs can be executed only by one of the executors of the PumaPay Pull Payment Contract\r\n    /// and the PumaPay Pull Payment Contract checks that the beneficiary and the paymentID have been singed by the client of the account.\r\n    /// This method sets the cancellation of the pull payment in the pull payments array for this beneficiary specified.\r\n    /// The balance of the executor (msg.sender) is checked and if funding is needed 1 ETH is transferred.\r\n    /// Emits 'LogPaymentCancelled' with beneficiary address and paymentID.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _paymentID - ID of the payment.\r\n    /// @param _client - client address that is linked to this pull payment.\r\n    /// @param _beneficiary - address that is allowed to execute this pull payment.\r\n    function deletePullPayment(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        string _paymentID,\r\n        address _client,\r\n        address _beneficiary\r\n    )\r\n    public\r\n    isExecutor()\r\n    paymentExists(_client, _beneficiary)\r\n    paymentNotCancelled(_client, _beneficiary)\r\n    isValidDeletionRequest(_paymentID, _client, _beneficiary)\r\n    {\r\n        require(isValidDeletion(v, r, s, _paymentID, _client, _beneficiary));\r\n\r\n        pullPayments[_client][_beneficiary].cancelTimestamp = now;\r\n\r\n        if (isFundingNeeded(msg.sender)) {\r\n            msg.sender.transfer(0.5 ether);\r\n        }\r\n\r\n        emit LogPaymentCancelled(_client, _beneficiary, _paymentID);\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Executes a pull payment for the msg.sender - The pull payment should exist and the payment request\r\n    /// should be valid in terms of when it can be executed.\r\n    /// Emits 'LogPullPaymentExecuted' with client address, msg.sender as the beneficiary address and the paymentID.\r\n    /// Use Case 1: Single/Recurring Fixed Pull Payment (initialPaymentAmountInCents == 0 )\r\n    /// ------------------------------------------------\r\n    /// We calculate the amount in PMA using the rate for the currency specified in the pull payment\r\n    /// and the 'fiatAmountInCents' and we transfer from the client account the amount in PMA.\r\n    /// After execution we set the last payment timestamp to NOW, the next payment timestamp is incremented by\r\n    /// the frequency and the number of payments is decresed by 1.\r\n    /// Use Case 2: Recurring Fixed Pull Payment with initial fee (initialPaymentAmountInCents > 0)\r\n    /// ------------------------------------------------------------------------------------------------\r\n    /// We calculate the amount in PMA using the rate for the currency specified in the pull payment\r\n    /// and the 'initialPaymentAmountInCents' and we transfer from the client account the amount in PMA.\r\n    /// After execution we set the last payment timestamp to NOW and the 'initialPaymentAmountInCents to ZERO.\r\n    /// @param _client - address of the client from which the msg.sender requires to pull funds.\r\n    function executePullPayment(address _client, string _paymentID)\r\n    public\r\n    paymentExists(_client, msg.sender)\r\n    isValidPullPaymentRequest(_client, msg.sender, _paymentID)\r\n    {\r\n        uint256 amountInPMA;\r\n        if (pullPayments[_client][msg.sender].initialPaymentAmountInCents > 0) {\r\n            amountInPMA = calculatePMAFromFiat(pullPayments[_client][msg.sender].initialPaymentAmountInCents, pullPayments[_client][msg.sender].currency);\r\n            pullPayments[_client][msg.sender].initialPaymentAmountInCents = 0;\r\n        } else {\r\n            amountInPMA = calculatePMAFromFiat(pullPayments[_client][msg.sender].fiatAmountInCents, pullPayments[_client][msg.sender].currency);\r\n\r\n            pullPayments[_client][msg.sender].nextPaymentTimestamp = pullPayments[_client][msg.sender].nextPaymentTimestamp + pullPayments[_client][msg.sender].frequency;\r\n            pullPayments[_client][msg.sender].numberOfPayments = pullPayments[_client][msg.sender].numberOfPayments - 1;\r\n        }\r\n        pullPayments[_client][msg.sender].lastPaymentTimestamp = now;\r\n        token.transferFrom(_client, msg.sender, amountInPMA);\r\n\r\n        emit LogPullPaymentExecuted(_client, msg.sender, pullPayments[_client][msg.sender].paymentID);\r\n    }\r\n\r\n    function getRate(string _currency) public view returns (uint256) {\r\n        return exchangeRates[_currency];\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Internal Functions\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Calculates the PMA Rate for the fiat currency specified - The rate is set every 10 minutes by our PMA server\r\n    /// for the currencies specified in the smart contract. \r\n    /// @param _fiatAmountInCents - payment amount in fiat CENTS so that is always integer\r\n    /// @param _currency - currency in which the payment needs to take place\r\n    /// RATE CALCULATION EXAMPLE\r\n    /// ------------------------\r\n    /// RATE ==> 1 PMA = 0.01 USD$\r\n    /// 1 USD$ = 1/0.01 PMA = 100 PMA\r\n    /// Start the calculation from one ether - PMA Token has 18 decimals\r\n    /// Multiply by the DECIMAL_FIXER (1e+10) to fix the multiplication of the rate\r\n    /// Multiply with the fiat amount in cents\r\n    /// Divide by the Rate of PMA to Fiat in cents\r\n    /// Divide by the FIAT_TO_CENT_FIXER to fix the _fiatAmountInCents\r\n    function calculatePMAFromFiat(uint256 _fiatAmountInCents, string _currency)\r\n    internal\r\n    view\r\n    returns (uint256) {\r\n        return ONE_ETHER.mul(DECIMAL_FIXER).mul(_fiatAmountInCents).div(exchangeRates[_currency]).div(FIAT_TO_CENT_FIXER);\r\n    }\r\n\r\n    /// @dev Checks if a registration request is valid by comparing the v, r, s params\r\n    /// and the hashed params with the client address.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _client - client address that is linked to this pull payment.\r\n    /// @param _beneficiary - address that is allowed to execute this pull payment.\r\n    /// @param _pullPayment - pull payment to be validated.\r\n    /// @return bool - if the v, r, s params with the hashed params match the client address\r\n    function isValidRegistration(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        address _client,\r\n        address _beneficiary,\r\n        PullPayment _pullPayment\r\n    )\r\n    internal\r\n    pure\r\n    returns (bool)\r\n    {\r\n        return ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _beneficiary,\r\n                    _pullPayment.currency,\r\n                    _pullPayment.initialPaymentAmountInCents,\r\n                    _pullPayment.fiatAmountInCents,\r\n                    _pullPayment.frequency,\r\n                    _pullPayment.numberOfPayments,\r\n                    _pullPayment.startTimestamp\r\n                )\r\n            ),\r\n            v, r, s) == _client;\r\n    }\r\n\r\n    /// @dev Checks if a deletion request is valid by comparing the v, r, s params\r\n    /// and the hashed params with the client address.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _paymentID - ID of the payment.\r\n    /// @param _client - client address that is linked to this pull payment.\r\n    /// @param _beneficiary - address that is allowed to execute this pull payment.\r\n    /// @return bool - if the v, r, s params with the hashed params match the client address\r\n    function isValidDeletion(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        string _paymentID,\r\n        address _client,\r\n        address _beneficiary\r\n    )\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        return ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _paymentID,\r\n                    _beneficiary\r\n                )\r\n            ), v, r, s) == _client\r\n        && keccak256(\r\n            abi.encodePacked(pullPayments[_client][_beneficiary].paymentID)\r\n        ) == keccak256(abi.encodePacked(_paymentID));\r\n    }\r\n\r\n    /// @dev Checks if a payment for a beneficiary of a client exists.\r\n    /// @param _client - client address that is linked to this pull payment.\r\n    /// @param _beneficiary - address to execute a pull payment.\r\n    /// @return bool - whether the beneficiary for this client has a pull payment to execute.\r\n    function doesPaymentExist(address _client, address _beneficiary)\r\n    internal\r\n    view\r\n    returns (bool) {\r\n        return (\r\n        bytes(pullPayments[_client][_beneficiary].currency).length > 0 &&\r\n        pullPayments[_client][_beneficiary].fiatAmountInCents > 0 &&\r\n        pullPayments[_client][_beneficiary].frequency > 0 &&\r\n        pullPayments[_client][_beneficiary].startTimestamp > 0 &&\r\n        pullPayments[_client][_beneficiary].numberOfPayments > 0 &&\r\n        pullPayments[_client][_beneficiary].nextPaymentTimestamp > 0\r\n        );\r\n    }\r\n\r\n    /// @dev Checks if the address of an owner/executor needs to be funded. \r\n    /// The minimum amount the owner/executors should always have is 0.001 ETH \r\n    /// @param _address - address of owner/executors that the balance is checked against. \r\n    /// @return bool - whether the address needs more ETH.\r\n    function isFundingNeeded(address _address)\r\n    private\r\n    view\r\n    returns (bool) {\r\n        return address(_address).balance <= MINIMUM_AMOUNT_OF_ETH_FOR_OPARATORS;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"addExecutor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"removeExecutor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_paymentID\",\"type\":\"string\"}],\"name\":\"executePullPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currency\",\"type\":\"string\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"_paymentID\",\"type\":\"string\"},{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"deletePullPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pullPayments\",\"outputs\":[{\"name\":\"merchantID\",\"type\":\"string\"},{\"name\":\"paymentID\",\"type\":\"string\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"initialPaymentAmountInCents\",\"type\":\"uint256\"},{\"name\":\"fiatAmountInCents\",\"type\":\"uint256\"},{\"name\":\"frequency\",\"type\":\"uint256\"},{\"name\":\"numberOfPayments\",\"type\":\"uint256\"},{\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"name\":\"nextPaymentTimestamp\",\"type\":\"uint256\"},{\"name\":\"lastPaymentTimestamp\",\"type\":\"uint256\"},{\"name\":\"cancelTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"_merchantID\",\"type\":\"string\"},{\"name\":\"_paymentID\",\"type\":\"string\"},{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"_initialPaymentAmountInCents\",\"type\":\"uint256\"},{\"name\":\"_fiatAmountInCents\",\"type\":\"uint256\"},{\"name\":\"_frequency\",\"type\":\"uint256\"},{\"name\":\"_numberOfPayments\",\"type\":\"uint256\"},{\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"name\":\"registerPullPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"LogExecutorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"LogExecutorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentID\",\"type\":\"string\"}],\"name\":\"LogPaymentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentID\",\"type\":\"string\"}],\"name\":\"LogPaymentCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentID\",\"type\":\"string\"}],\"name\":\"LogPullPaymentExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"LogSetExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PumaPayPullPayment","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000846c66cf71c43f80403b51fe3906b3599d63336f","Library":"","SwarmSource":"bzzr://eee3fb4da99b9873c0a6f558f7255bb843609533c2f3013722ba041055e4a441"}]}