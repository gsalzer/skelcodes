{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ---------------------------------------------------------------------------------------------------\r\n// EnsSubdomainFactory - allows creating and configuring custom ENS subdomains with one contract call.\r\n//\r\n// (c) Radek Ostrowski / https://startonchain.com - The MIT Licence.\r\n// Source: https://github.com/radek1st/ens-subdomain-factory\r\n// ---------------------------------------------------------------------------------------------------\r\n\r\n/**\r\n* @title EnsRegistry\r\n* @dev Extract of the interface for ENS Registry\r\n*/\r\ncontract EnsRegistry {\r\n\tfunction setOwner(bytes32 node, address owner) public;\r\n\tfunction setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\r\n\tfunction setResolver(bytes32 node, address resolver) public;\r\n\tfunction owner(bytes32 node) public view returns (address);\r\n}\r\n\r\n/**\r\n* @title EnsResolver\r\n* @dev Extract of the interface for ENS Resolver\r\n*/\r\ncontract EnsResolver {\r\n\tfunction setAddr(bytes32 node, address addr) public;\r\n}\r\n\r\n/**\r\n* @title EnsSubdomainFactory\r\n* @dev Allows to create and configure a first level subdomain for Ethereum ENS in one call.\r\n* After deploying this contract, change the owner of the top level domain you want to use\r\n* to this deployed contract address.\r\n*/\r\ncontract EnsSubdomainFactory {\r\n\taddress public owner;\r\n    EnsRegistry public registry = EnsRegistry(0x314159265dD8dbb310642f98f50C066173C1259b);\r\n\tEnsResolver public resolver = EnsResolver(0x5FfC014343cd971B7eb70732021E26C35B744cc4);\r\n    bytes32 ethNameHash = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\r\n\r\n\tevent SubdomainCreated(string indexed domain, string indexed subdomain, address indexed creator);\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t  require(msg.sender == owner);\r\n\t  _;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Allows to create a subdomain (e.g. \"radek.startonchain.eth\"), \r\n\t* set its resolver and set its target address\r\n\t* @param _topLevelDomain - parent domain name e.g. \"startonchain\"\r\n\t* @param _subDomain - sub domain name only e.g. \"radek\"\r\n\t* @param _owner - address that will become owner of this new subdomain\r\n\t* @param _target - address that this new domain will resolve to\r\n\t*/\r\n\tfunction newSubdomain(string _topLevelDomain, string _subDomain, address _owner, address _target) public {\r\n\t    //create namehash for the top domain\r\n\t    bytes32 topLevelNamehash = keccak256(abi.encodePacked(ethNameHash, keccak256(abi.encodePacked(_topLevelDomain))));\r\n\t    //make sure this contract owns the top level domain\r\n        require(registry.owner(topLevelNamehash) == address(this), \"this contract should own top level domain\");\r\n\t    //create labelhash for the sub domain\r\n\t    bytes32 subDomainLabelhash = keccak256(abi.encodePacked(_subDomain));\r\n\t    //create namehash for the sub domain\r\n\t    bytes32 subDomainNamehash = keccak256(abi.encodePacked(topLevelNamehash, subDomainLabelhash));\r\n        //make sure it is not already owned\r\n        require(registry.owner(subDomainNamehash) == address(0), \"sub domain already owned\");\r\n\t\t//create new subdomain, temporarily this smartcontract is the owner\r\n\t\tregistry.setSubnodeOwner(topLevelNamehash, subDomainLabelhash, address(this));\r\n\t\t//set public resolver for this domain\r\n\t\tregistry.setResolver(subDomainNamehash, resolver);\r\n\t\t//set the destination address\r\n\t\tresolver.setAddr(subDomainNamehash, _target);\r\n\t\t//change the ownership back to requested owner\r\n\t\tregistry.setOwner(subDomainNamehash, _owner);\r\n\t\t\r\n\t\temit SubdomainCreated(_topLevelDomain, _subDomain, msg.sender);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev The contract owner can take away the ownership of any top level domain owned by this contract.\r\n\t*/\r\n\tfunction transferDomainOwnership(bytes32 _node, address _owner) public onlyOwner {\r\n\t\tregistry.setOwner(_node, _owner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows the current owner to transfer control of the contract to a new owner.\r\n\t * @param _owner The address to transfer ownership to.\r\n\t */\r\n\tfunction transferContractOwnership(address _owner) public onlyOwner {\r\n\t  require(_owner != address(0));\r\n\t  owner = _owner;\r\n\t  emit OwnershipTransferred(owner, _owner);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferDomainOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_topLevelDomain\",\"type\":\"string\"},{\"name\":\"_subDomain\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"newSubdomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"subdomain\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"SubdomainCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EnsSubdomainFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0e9bdb51b2dd7a1f9cb68e8c40ee1624b682c7dfc6d6708460ec800a419ef83d"}]}