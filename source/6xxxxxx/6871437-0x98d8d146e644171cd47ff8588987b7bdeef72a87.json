{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Migrations {\r\n\taddress public owner;\r\n\taddress public newOwner;\r\n\r\n\taddress public manager;\r\n\taddress public newManager;\r\n\r\n\tevent TransferOwnership(address oldaddr, address newaddr);\r\n\tevent TransferManager(address oldaddr, address newaddr);\r\n\r\n\tmodifier onlyOwner() { require(msg.sender == owner); _; }\r\n\tmodifier onlyManager() { require(msg.sender == manager); _; }\r\n\tmodifier onlyAdmin() { require(msg.sender == owner || msg.sender == manager); _; }\r\n\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\tmanager = msg.sender;\r\n\t}\r\n\r\n\tfunction transferOwnership(address _newOwner) onlyOwner public {\r\n\t\tnewOwner = _newOwner;\r\n\t}\r\n\r\n\tfunction transferManager(address _newManager) onlyAdmin public {\r\n\t\tnewManager = _newManager;\r\n\t}\r\n\r\n\tfunction acceptOwnership() public {\r\n\t\trequire(msg.sender == newOwner);\r\n\t\taddress oldaddr = owner;\r\n\t\towner = newOwner;\r\n\t\tnewOwner = address(0);\r\n\t\temit TransferOwnership(oldaddr, owner);\r\n\t}\r\n\r\n\tfunction acceptManager() public {\r\n\t\trequire(msg.sender == newManager);\r\n\t\taddress oldaddr = manager;\r\n\t\tmanager = newManager;\r\n\t\tnewManager = address(0);\r\n\t\temit TransferManager(oldaddr, manager);\r\n\t}\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n\tfunction mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\t\tif (_a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = _a * _b;\r\n\t\trequire(c / _a == _b);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\t\trequire(_b > 0);\r\n\t\tuint256 c = _a / _b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\t\trequire(_b <= _a);\r\n\t\tuint256 c =  _a - _b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\t\tuint256 c = _a + _b;\r\n\t\trequire(c >= _a);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\t\trequire(_b != 0);\r\n\t\treturn _a % _b;\r\n\t}\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance);\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success);\r\n\tfunction transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\ncontract ReentrancyGuard {\r\n\tuint256 private guardCounter = 1;\r\n\r\n\tmodifier noReentrant() {\r\n\t\tguardCounter += 1;\r\n\t\tuint256 localCounter = guardCounter;\r\n\t\t_;\r\n\t\trequire(localCounter == guardCounter);\r\n\t}\r\n}\r\n\r\n\r\ninterface tokenRecipient {\r\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\n\r\ncontract ERC20Base is ERC20Interface , ReentrancyGuard{\r\n\tusing SafeMath for uint256;\r\n\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\tuint256 public totalSupply;\r\n\r\n\tmapping(address => uint256) public balanceOf;\r\n\tmapping(address => mapping (address => uint256)) public allowance;\r\n\r\n\tconstructor() public {\r\n\t\t//totalSupply = initialSupply * 10 ** uint256(decimals);\r\n\t\tuint256 initialSupply = 20000000000;\r\n\t\ttotalSupply = initialSupply.mul(1 ether);\r\n\t\tbalanceOf[msg.sender] = totalSupply;\r\n\t\tname = \"ABCToken\";\r\n\t\tsymbol = \"ABC\";\r\n\t}\r\n\r\n\tfunction () payable public {\r\n\t\trevert();\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns(uint256) {\r\n\t\treturn totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balanceOf[_owner];\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n\t\treturn allowance[_owner][_spender];\r\n\t}\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n\t\trequire(_to != 0x0);\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\t\tif (balanceOf[_to].add(_value) <= balanceOf[_to]) {\r\n\t\t\trevert();\r\n\t\t}\r\n\r\n\t\tuint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);\r\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\tassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\treturn _transfer(msg.sender, _to, _value);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(_value <= allowance[_from][msg.sender]);\r\n\t\tallowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n\t\treturn _transfer(_from, _to, _value);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n\t\tallowance[msg.sender][_spender] = (\r\n\t\tallowance[msg.sender][_spender].add(_addedValue));\r\n\t\temit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n\t\tuint256 oldValue = allowance[msg.sender][_spender];\r\n\t\tif (_subtractedValue >= oldValue) {\r\n\t\t\tallowance[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\tallowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\t\temit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) noReentrant public returns (bool success) {\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif (approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\ncontract BXAToken is Migrations, ERC20Base {\r\n\tbool public isTokenLocked;\r\n\tbool public isUseFreeze;\r\n\tstruct Frozen {\r\n\t\tbool from;\r\n\t\tuint256 amount;\r\n\t}\r\n\tmapping (address => Frozen) public frozenAccount;\r\n\r\n\tevent FrozenFunds(address target, bool freezeFrom, uint256 freezeAmount);\r\n\r\n\tconstructor()\r\n\t\tERC20Base()\r\n\t\tonlyOwner()\r\n\t\tpublic\r\n\t{\r\n\t\tuint256 initialSupply = 20000000000;\r\n\t\tisUseFreeze = true;\r\n\t\ttotalSupply = initialSupply.mul(1 ether);\r\n\t\tisTokenLocked = false;\r\n\t\tsymbol = \"BXA\";\r\n\t\tname = \"BXA\";\r\n\t\tbalanceOf[msg.sender] = totalSupply;\r\n\t\temit Transfer(address(0), msg.sender, totalSupply);\r\n\t}\r\n\r\n\tmodifier tokenLock() {\r\n\t\trequire(isTokenLocked == false);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction setLockToken(bool _lock) onlyOwner public {\r\n\t\tisTokenLocked = _lock;\r\n\t}\r\n\r\n\tfunction setUseFreeze(bool _useOrNot) onlyAdmin public {\r\n\t\tisUseFreeze = _useOrNot;\r\n\t}\r\n\r\n\tfunction freezeFrom(address target, bool fromFreeze) onlyAdmin public {\r\n\t\tfrozenAccount[target].from = fromFreeze;\r\n\t\temit FrozenFunds(target, fromFreeze, 0);\r\n\t}\r\n\r\n\tfunction freezeAmount(address target, uint256 amountFreeze) onlyAdmin public {\r\n\t\tfrozenAccount[target].amount = amountFreeze;\r\n\t\temit FrozenFunds(target, false, amountFreeze);\r\n\t}\r\n\r\n\tfunction freezeAccount(\r\n\t\taddress target,\r\n\t\tbool fromFreeze,\r\n\t\tuint256 amountFreeze\r\n\t) onlyAdmin public {\r\n\t\trequire(isUseFreeze);\r\n\t\tfrozenAccount[target].from = fromFreeze;\r\n\t\tfrozenAccount[target].amount = amountFreeze;\r\n\t\temit FrozenFunds(target, fromFreeze, amountFreeze);\r\n\t}\r\n\r\n\tfunction isFrozen(address target) public view returns(bool, uint256) {\r\n\t\treturn (frozenAccount[target].from, frozenAccount[target].amount);\r\n\t}\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _value) tokenLock internal returns(bool success) {\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\r\n\t\tif (balanceOf[_to].add(_value) <= balanceOf[_to]) {\r\n\t\t\trevert();\r\n\t\t}\r\n\r\n\t\tif (isUseFreeze == true) {\r\n\t\t\trequire(frozenAccount[_from].from == false);\r\n\r\n\t\t\tif(balanceOf[_from].sub(_value) < frozenAccount[_from].amount) {\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (_to == address(0)) {\r\n\t\t\trequire(msg.sender == owner);\r\n\t\t\ttotalSupply = totalSupply.sub(_value);\r\n\t\t}\r\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);\r\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction totalBurn() public view returns(uint256) {\r\n\t\treturn balanceOf[address(0)];\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"fromFreeze\",\"type\":\"bool\"},{\"name\":\"amountFreeze\",\"type\":\"uint256\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_useOrNot\",\"type\":\"bool\"}],\"name\":\"setUseFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amountFreeze\",\"type\":\"uint256\"}],\"name\":\"freezeAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setLockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"from\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"fromFreeze\",\"type\":\"bool\"}],\"name\":\"freezeFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"transferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTokenLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUseFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"freezeFrom\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"freezeAmount\",\"type\":\"uint256\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldaddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newaddr\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldaddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newaddr\",\"type\":\"address\"}],\"name\":\"TransferManager\",\"type\":\"event\"}]","ContractName":"BXAToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://425e0470659962b6c2233902a9063ccbd06fc6d26d4dc9fad334ee26c5b546df"}]}