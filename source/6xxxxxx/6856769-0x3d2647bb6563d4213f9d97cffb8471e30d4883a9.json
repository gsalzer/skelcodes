{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\ncontract Operations {\r\n    function copyBytesNToBytes(bytes32 source, bytes memory destination, uint[1] memory pointer) internal pure {\r\n        for (uint i=0; i < 32; i++) {\r\n            if (source[i] == 0)\r\n                break;\r\n            else {\r\n                destination[pointer[0]]=source[i];\r\n                pointer[0]++;\r\n            }\r\n        }\r\n    }\r\n    function copyBytesToBytes(bytes memory source, bytes memory destination, uint[1] memory pointer) internal pure {\r\n        for (uint i=0; i < source.length; i++) {\r\n            destination[pointer[0]]=source[i];\r\n            pointer[0]++;\r\n        }\r\n    }\r\n    function uintToBytesN(uint v) internal pure returns (bytes32 ret) {\r\n        if (v == 0) {\r\n            ret = '0';\r\n        }\r\n        else {\r\n            while (v > 0) {\r\n//                ret = bytes32(uint(ret) / (2 ** 8));\r\n//                ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\r\n                ret = bytes32(uint(ret) >> 8);\r\n                ret |= bytes32(((v % 10) + 48) << (8 * 31));\r\n                v /= 10;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    function stringToBytes32(string memory str) internal pure returns(bytes32) {\r\n        bytes32 bStrN;\r\n        assembly {\r\n            bStrN := mload(add(str, 32))\r\n        }\r\n        return(bStrN);\r\n    }\r\n}\r\ncontract DataRegister is Operations {\r\n    bytes32 Institute; \r\n    address owner;\r\n    mapping(bytes10 => bytes) Instructor;\r\n    mapping(uint => bytes10) InstructorUIds;\r\n    uint InstructorCount = 0;\r\n    struct course {\r\n//        bytes10 CourseNumber;\r\n        bytes CourseName;\r\n        bytes10 StartDate;\r\n        bytes10 EndDate;\r\n        uint Hours;\r\n        uint InstructorId;\r\n    }\r\n    mapping(bytes10 => course) Course;\r\n    mapping(uint => bytes10) CourseUIds;\r\n    uint CourseCount = 0;\r\n    struct student {\r\n        bytes Name;\r\n        bytes10 NationalId;\r\n    }\r\n    mapping(bytes10 => student) Student;\r\n    mapping(uint => bytes10) StudentUIds;\r\n    uint StudentCount = 0;\r\n    struct certificate {\r\n        uint CourseId;\r\n        uint StudentId;\r\n        uint CertificateType;\r\n        bytes10 Result;\r\n        bool Enabled;\r\n    }\r\n    mapping(bytes10 => certificate) Certificate;\r\n    uint CertificateCount = 0;\r\n    mapping(uint => bytes10) CertificateUIds;\r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner);\r\n        _;\r\n    }\r\n    modifier notEmpty(string memory str) {\r\n        bytes memory bStr = bytes(str);\r\n        require(bStr.length > 0);\r\n        _;\r\n    }\r\n    modifier isPositive(uint number) {\r\n        require(number > 0);\r\n        _;\r\n    }\r\n    modifier haveInstructor(uint InstructorId) {\r\n        require(Instructor[InstructorUIds[InstructorId]].length > 0);\r\n        _;\r\n    }\r\n    modifier haveCourse(uint CourseId) {\r\n        require(CourseUIds[CourseId].length > 0);\r\n        _;\r\n    }\r\n    modifier haveStudent(uint StudentId) {\r\n        require(Student[StudentUIds[StudentId]].Name.length > 0);\r\n        _;\r\n    }\r\n    modifier uniqueCertificateUId(string memory certificateUId) {\r\n        require(Certificate[bytes10(stringToBytes32(certificateUId))].CourseId == 0);\r\n        _;\r\n    }\r\n    modifier uniqueInstructorUId(string memory _instructorUId) {\r\n        require(Instructor[bytes10(stringToBytes32(_instructorUId))].length == 0);\r\n        _;\r\n    }\r\n    modifier uniqueCourseUId(string memory _courseUId) {\r\n        require(Course[bytes10(stringToBytes32(_courseUId))].CourseName.length == 0);\r\n        _;\r\n    }\r\n    modifier uniqueStudentUId(string memory _studentUId) {\r\n        require(Student[bytes10(stringToBytes32(_studentUId))].Name.length == 0);\r\n        _;\r\n    }\r\n    function RegisterInstructor(\r\n        string memory instructorUId, \r\n        string memory instructor\r\n        ) public onlyOwner notEmpty(instructorUId) notEmpty(instructor) uniqueInstructorUId(instructorUId) returns(bool) {\r\n            bytes10 _instructorUId = bytes10(stringToBytes32(instructorUId));\r\n            InstructorCount++;\r\n            Instructor[_instructorUId] = bytes(instructor);\r\n            InstructorUIds[InstructorCount]=_instructorUId;\r\n            return(true);\r\n    }\r\n    function RegisterCourse(\r\n        string memory CourseUId,\r\n        string memory CourseName,\r\n        string memory StartDate,\r\n        string memory EndDate,\r\n        uint Hours,\r\n        uint InstructorId\r\n        ) public onlyOwner notEmpty(CourseUId) notEmpty(CourseName) \r\n            isPositive(Hours) haveInstructor(InstructorId) uniqueCourseUId(CourseUId) {\r\n            course memory _course = setCourseElements(CourseName, StartDate, EndDate, Hours, InstructorId);\r\n            CourseCount++;\r\n            bytes10 _courseUId = bytes10(stringToBytes32(CourseUId));\r\n            CourseUIds[CourseCount] = _courseUId;\r\n            Course[_courseUId] = _course;\r\n    }\r\n    function setCourseElements(\r\n        string memory CourseName, \r\n        string memory StartDate, \r\n        string memory EndDate,\r\n        uint Hours,\r\n        uint InstructorId\r\n        ) internal pure returns(course memory) {\r\n        course memory _course;\r\n        _course.CourseName = bytes(CourseName);\r\n        _course.StartDate = bytes10(stringToBytes32(StartDate));\r\n        _course.EndDate = bytes10(stringToBytes32(EndDate));\r\n        _course.Hours = Hours;\r\n        _course.InstructorId = InstructorId;\r\n        return(_course);\r\n    }\r\n    function RegisterStudent(\r\n        string memory StudentUId,\r\n        string memory Name,\r\n        string memory NationalId\r\n        ) public onlyOwner notEmpty(Name) notEmpty(NationalId) notEmpty(StudentUId) uniqueStudentUId(StudentUId) returns(bool) {\r\n            StudentCount++;\r\n            StudentUIds[StudentCount] = bytes10(stringToBytes32(StudentUId));\r\n            student memory _student;\r\n            _student.Name = bytes(Name);\r\n            _student.NationalId = bytes10(stringToBytes32(NationalId));\r\n            Student[StudentUIds[StudentCount]]=_student;\r\n        return(true);\r\n    }\r\n    function RegisterCertificate(\r\n        string memory CertificateUId,\r\n        uint CourseId,\r\n        uint StudentId,\r\n        uint CertificateType,\r\n        string memory Result\r\n        ) public onlyOwner haveStudent(StudentId) haveCourse(CourseId) \r\n        uniqueCertificateUId(CertificateUId) isPositive(CertificateType) returns(bool) {\r\n            certificate memory _certificate;\r\n            _certificate.CourseId = CourseId;\r\n            _certificate.StudentId = StudentId;\r\n            _certificate.CertificateType = CertificateType;\r\n            _certificate.Result = bytes10(stringToBytes32(Result));\r\n            _certificate.Enabled = true;\r\n            bytes10 cert_uid = bytes10(stringToBytes32(CertificateUId));\r\n            CertificateCount++;\r\n            Certificate[cert_uid] = _certificate;\r\n            CertificateUIds[CertificateCount] = cert_uid;\r\n            return(true);\r\n    }\r\n    function EnableCertificate(string memory CertificateId) public onlyOwner notEmpty(CertificateId) returns(bool) {\r\n        bytes10 _certificateId = bytes10(stringToBytes32(CertificateId));\r\n        certificate memory _certificate = Certificate[_certificateId];\r\n        require(_certificate.Result != '');\r\n        require(! _certificate.Enabled);\r\n        Certificate[_certificateId].Enabled = true;\r\n        return(true);\r\n    }\r\n    function DisableCertificate(string memory CertificateId) public onlyOwner notEmpty(CertificateId) returns(bool) {\r\n        bytes10 _certificateId = bytes10(stringToBytes32(CertificateId));\r\n        certificate memory _certificate = Certificate[_certificateId];\r\n        require(_certificate.Result != '');\r\n        require(_certificate.Enabled);\r\n        Certificate[_certificateId].Enabled = false;\r\n        return(true);\r\n    }\r\n}\r\ncontract CryptoClassCertificate is DataRegister {\r\n    constructor(string memory _Institute) public notEmpty(_Institute) {\r\n        owner = msg.sender;\r\n        Institute = stringToBytes32(_Institute);\r\n    }\r\n    function GetInstitute() public view returns(string  memory) {\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        bytes memory institute=new bytes(48);\r\n        copyBytesToBytes('{\"Institute\":\"', institute, pointer);\r\n        copyBytesNToBytes(Institute, institute, pointer);\r\n        copyBytesToBytes('\"}', institute, pointer);\r\n        return(string(institute));\r\n    }\r\n    function GetInstructors() public view onlyOwner returns(string memory) {\r\n        uint len = 30;\r\n        uint i;\r\n        for (i=1 ; i <= InstructorCount ; i++) \r\n            len += 30 + Instructor[InstructorUIds[i]].length;\r\n        bytes memory instructors = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{ \"Instructors\":[', instructors, pointer);\r\n        for (i=1 ; i <= InstructorCount ; i++) {\r\n            if (i > 1) \r\n                copyBytesNToBytes(',', instructors, pointer);\r\n            copyBytesNToBytes('{\"Id\":\"', instructors, pointer);\r\n            copyBytesNToBytes(InstructorUIds[i], instructors, pointer);\r\n            copyBytesNToBytes('\",\"Name\":\"', instructors, pointer);\r\n            copyBytesToBytes(Instructor[InstructorUIds[i]], instructors, pointer);\r\n            copyBytesNToBytes('\"}', instructors, pointer);\r\n        }\r\n        copyBytesNToBytes(']}', instructors, pointer);\r\n        return(string(instructors));\r\n    }\r\n    function GetInstructor(string memory InstructorUId) public view notEmpty(InstructorUId) returns(string memory) {\r\n        bytes10 _instructorId = bytes10(stringToBytes32(InstructorUId));\r\n        require(Instructor[_instructorId].length > 0);\r\n        uint len = 30;\r\n        len += Instructor[_instructorId].length;\r\n        bytes memory _instructor = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{ \"Instructor\":\"', _instructor, pointer);\r\n        copyBytesToBytes(Instructor[_instructorId], _instructor, pointer);\r\n        copyBytesNToBytes('\"}', _instructor, pointer);\r\n        return(string(_instructor));\r\n    }\r\n    function GetInstructorCourses(string memory InstructorUId) public view notEmpty(InstructorUId) returns(string memory) {\r\n        bytes10 _instructorUId = bytes10(stringToBytes32(InstructorUId));\r\n        require(Instructor[_instructorUId].length > 0);\r\n        uint _instructorId = 0;\r\n        for (uint i = 1; i <= InstructorCount; i++)\r\n            if (InstructorUIds[i] == _instructorUId) {\r\n                _instructorId = i;\r\n                break;\r\n            }\r\n        uint len = 30;\r\n        course memory _course;\r\n        uint i;\r\n        for (i=1; i<=CourseCount; i++) {\r\n            if (Course[CourseUIds[i]].InstructorId == _instructorId) { \r\n                _course = Course[CourseUIds[i]];\r\n                len += 180 + Institute.length + _course.CourseName.length + Instructor[InstructorUIds[_course.InstructorId]].length;\r\n            }\r\n        }\r\n        bytes memory courseInfo = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{\"Courses\":[', courseInfo, pointer);\r\n        bool first = true;\r\n        for (i=1; i<=CourseCount; i++) {\r\n            _course = Course[CourseUIds[i]];\r\n            if (_course.InstructorId == _instructorId) {\r\n                if (first)\r\n                    first = false;\r\n                else\r\n                    copyBytesNToBytes(',', courseInfo, pointer);\r\n                copyBytesNToBytes('{\"CourseId\":\"', courseInfo, pointer);\r\n                copyBytesNToBytes(CourseUIds[i], courseInfo, pointer);\r\n                copyBytesNToBytes('\",\"CourseName\":\"', courseInfo, pointer);\r\n                copyBytesToBytes(_course.CourseName, courseInfo, pointer);\r\n                copyBytesNToBytes('\",\"StartDate\":\"', courseInfo, pointer);\r\n                copyBytesNToBytes(_course.StartDate, courseInfo, pointer);\r\n                copyBytesNToBytes('\",\"EndDate\":\"', courseInfo, pointer);\r\n                copyBytesNToBytes(_course.EndDate, courseInfo, pointer);\r\n                copyBytesNToBytes('\",\"DurationHours\":\"', courseInfo, pointer);\r\n                copyBytesNToBytes( uintToBytesN(_course.Hours), courseInfo, pointer);\r\n                copyBytesNToBytes('\"}', courseInfo, pointer);\r\n            }\r\n        }\r\n        copyBytesNToBytes(']}', courseInfo, pointer);\r\n        return(string(courseInfo));\r\n    }\r\n    function GetCourseInfo(string memory CourseUId) public view notEmpty(CourseUId) returns(string memory) {\r\n        bytes10 _courseUId=bytes10(stringToBytes32(CourseUId));\r\n        course memory _course;\r\n        _course = Course[_courseUId];\r\n        require(_course.CourseName.length > 0);\r\n        uint len = 110;\r\n        len += Institute.length + 10 + _course.CourseName.length + 10 + 10 + Instructor[InstructorUIds[_course.InstructorId]].length;\r\n        bytes memory courseInfo = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{\"Course\":', courseInfo, pointer);\r\n        copyBytesNToBytes('{\"Issuer\":\"', courseInfo, pointer);\r\n        copyBytesNToBytes(Institute, courseInfo, pointer);\r\n        copyBytesNToBytes('\",\"CourseUId\":\"', courseInfo, pointer);\r\n        copyBytesNToBytes(_courseUId, courseInfo, pointer);\r\n        copyBytesNToBytes('\",\"CourseName\":\"', courseInfo, pointer);\r\n        copyBytesToBytes(_course.CourseName, courseInfo, pointer);\r\n        copyBytesNToBytes('\",\"StartDate\":\"', courseInfo, pointer);\r\n        copyBytesNToBytes(_course.StartDate, courseInfo, pointer);\r\n        copyBytesNToBytes('\",\"EndDate\":\"', courseInfo, pointer);\r\n        copyBytesNToBytes(_course.EndDate, courseInfo, pointer);\r\n        copyBytesNToBytes('\",\"DurationHours\":\"', courseInfo, pointer);\r\n        copyBytesNToBytes( uintToBytesN(_course.Hours), courseInfo, pointer);\r\n        copyBytesNToBytes('\"}}', courseInfo, pointer);\r\n        return(string(courseInfo));\r\n    }\r\n    function GetCourses() public view onlyOwner returns(string memory) {\r\n        uint len = 30;\r\n        uint i;\r\n        course memory _course;\r\n        for (i=1 ; i <= CourseCount ; i++) {\r\n            _course = Course[CourseUIds[i]];\r\n            len += 90 + 10 + _course.CourseName.length + 10 + 12 + 12 + 6 + Instructor[InstructorUIds[_course.InstructorId]].length;\r\n        }\r\n        bytes memory courses = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        bytes32 hrs;\r\n        copyBytesNToBytes('{\"Courses\":[', courses, pointer);\r\n        for (i=1 ; i <= CourseCount ; i++) {\r\n            if (i > 1)\r\n                copyBytesNToBytes(',', courses, pointer);\r\n            _course = Course[CourseUIds[i]];\r\n            copyBytesNToBytes('{\"UId\":\"', courses, pointer);\r\n            copyBytesNToBytes(CourseUIds[i], courses, pointer);\r\n            copyBytesNToBytes('\",\"Name\":\"', courses, pointer);\r\n            copyBytesToBytes(_course.CourseName, courses, pointer);\r\n            copyBytesNToBytes('\",\"InstructorId\":\"', courses, pointer);\r\n            copyBytesToBytes(Instructor[InstructorUIds[_course.InstructorId]], courses, pointer);\r\n            copyBytesNToBytes('\",\"StartDate\":\"', courses, pointer);\r\n            copyBytesNToBytes(_course.StartDate, courses, pointer);\r\n            copyBytesNToBytes('\",\"EndDate\":\"', courses, pointer);\r\n            copyBytesNToBytes(_course.EndDate, courses, pointer);\r\n            copyBytesNToBytes('\",\"Duration\":\"', courses, pointer);\r\n            hrs = uintToBytesN(_course.Hours);\r\n            copyBytesNToBytes(hrs, courses, pointer);\r\n            copyBytesNToBytes(' Hours\"}', courses, pointer);\r\n        }\r\n        copyBytesNToBytes(']}', courses, pointer);\r\n        return(string(courses));\r\n    }\r\n    function GetStudentInfo(string memory StudentUId) public view notEmpty(StudentUId) returns(string memory) {\r\n        bytes10 _studentUId=bytes10(stringToBytes32(StudentUId));\r\n        student memory _student;\r\n        _student = Student[_studentUId];\r\n        require(_student.Name.length > 0);\r\n        uint len = 110;\r\n        len += Institute.length + 10 + _student.Name.length + 10 ;\r\n        bytes memory studentInfo = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{\"Student\":', studentInfo, pointer);\r\n        copyBytesNToBytes('{\"Issuer\":\"', studentInfo, pointer);\r\n        copyBytesNToBytes(Institute, studentInfo, pointer);\r\n        copyBytesNToBytes('\",\"StudentUId\":\"', studentInfo, pointer);\r\n        copyBytesNToBytes(_studentUId, studentInfo, pointer);\r\n        copyBytesNToBytes('\",\"Name\":\"', studentInfo, pointer);\r\n        copyBytesToBytes(_student.Name, studentInfo, pointer);\r\n        copyBytesNToBytes('\",\"NationalId\":\"', studentInfo, pointer);\r\n        copyBytesNToBytes(_student.NationalId, studentInfo, pointer);\r\n        copyBytesNToBytes('\"}}', studentInfo, pointer);\r\n        return(string(studentInfo));\r\n    }\r\n    function GetStudents() public view onlyOwner returns(string memory) {\r\n        uint len = 30;\r\n        uint i;\r\n        for (i=1 ; i <= StudentCount ; i++) \r\n            len += 50 + 3 + Student[StudentUIds[i]].Name.length;\r\n        bytes memory students = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{\"Students\":[', students, pointer);\r\n        for (i=1 ; i <= StudentCount ; i++) {\r\n            if (i > 1)\r\n                copyBytesNToBytes(',', students, pointer);\r\n            student memory _student = Student[StudentUIds[i]];\r\n            copyBytesNToBytes('{\"UId\":\"', students, pointer);\r\n            copyBytesNToBytes(StudentUIds[i], students, pointer);\r\n            copyBytesNToBytes('\",\"NationalId\":\"', students, pointer);\r\n            copyBytesNToBytes(_student.NationalId, students, pointer);\r\n            copyBytesNToBytes('\",\"Name\":\"', students, pointer);\r\n            copyBytesToBytes(_student.Name, students, pointer);\r\n            copyBytesNToBytes('\"}', students, pointer);\r\n        }\r\n        copyBytesNToBytes(']}', students, pointer);\r\n        return(string(students));\r\n    }\r\n    function GetCertificates() public view onlyOwner returns(string memory) {\r\n        uint len = 30;\r\n        uint i;\r\n        len += CertificateCount * 40;\r\n        bytes memory certificates = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{\"Certificates\":[', certificates, pointer);\r\n        for (i = 1 ; i <= CertificateCount ; i++) {\r\n            if (i > 1)\r\n                copyBytesNToBytes(',', certificates, pointer);\r\n            copyBytesNToBytes('{\"CertificateId\":\"', certificates, pointer);\r\n            copyBytesNToBytes(CertificateUIds[i], certificates, pointer);\r\n            copyBytesNToBytes('\"}', certificates, pointer);\r\n        }\r\n        copyBytesNToBytes(']}', certificates, pointer);\r\n        return(string(certificates));\r\n    }\r\n    function GetCertificate(string memory CertificateId) public view notEmpty(CertificateId) returns(string memory) {\r\n        bytes memory certSpec;\r\n        uint len;\r\n        uint[1] memory pointer;\r\n        pointer[0] = 0;\r\n        bytes10 _certificateId = bytes10(stringToBytes32(CertificateId));\r\n        certificate memory _certificate = Certificate[_certificateId];\r\n        course memory _course = Course[CourseUIds[_certificate.CourseId]];\r\n        student memory _student = Student[StudentUIds[_certificate.StudentId]];\r\n        bytes memory _instructor = Instructor[InstructorUIds[_course.InstructorId]];\r\n        len = 500;\r\n        len += _course.CourseName.length + _instructor.length;\r\n        certSpec = new bytes(len);\r\n        require(_certificate.StudentId > 0);\r\n        require(_certificate.Enabled);\r\n        copyBytesNToBytes('{\"Certificate\":{\"Issuer\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(Institute, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"CertificateId\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(_certificateId, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"Name\":\"', certSpec, pointer);\r\n        copyBytesToBytes(_student.Name, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"NationalId\":\"', certSpec, pointer);\r\n        copyBytesNToBytes( _student.NationalId, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"CourseId\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(CourseUIds[_certificate.CourseId], certSpec, pointer);\r\n        copyBytesNToBytes('\",\"CourseName\":\"', certSpec, pointer);\r\n        copyBytesToBytes(_course.CourseName, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"StartDate\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(_course.StartDate, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"EndDate\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(_course.EndDate, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"DurationHours\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(uintToBytesN(_course.Hours), certSpec, pointer);\r\n        copyBytesNToBytes('\",\"Instructor\":\"', certSpec, pointer);\r\n        copyBytesToBytes(_instructor, certSpec, pointer);\r\n        bytes10 _certType = GetCertificateTypeDescription(_certificate.CertificateType);\r\n        copyBytesNToBytes('\",\"CourseType\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(_certType, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"Result\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(_certificate.Result, certSpec, pointer);\r\n        copyBytesNToBytes('\"}}', certSpec, pointer);\r\n        return(string(certSpec));\r\n    }\r\n    function GetCertificateTypeDescription(uint Type) pure internal returns(bytes10) {\r\n        if (Type == 1) \r\n            return('Attendance');\r\n        else if (Type == 2)\r\n            return('Online');\r\n        else if (Type == 3)\r\n            return('Video');\r\n        else if (Type == 4)\r\n            return('ELearning');\r\n        else\r\n            return(bytes10(uintToBytesN(Type)));\r\n    } \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetInstitute\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"CertificateId\",\"type\":\"string\"}],\"name\":\"GetCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"CertificateId\",\"type\":\"string\"}],\"name\":\"EnableCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"InstructorUId\",\"type\":\"string\"}],\"name\":\"GetInstructorCourses\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"CertificateId\",\"type\":\"string\"}],\"name\":\"DisableCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"instructorUId\",\"type\":\"string\"},{\"name\":\"instructor\",\"type\":\"string\"}],\"name\":\"RegisterInstructor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"StudentUId\",\"type\":\"string\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"NationalId\",\"type\":\"string\"}],\"name\":\"RegisterStudent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetCertificates\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetInstructors\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"CourseUId\",\"type\":\"string\"}],\"name\":\"GetCourseInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"InstructorUId\",\"type\":\"string\"}],\"name\":\"GetInstructor\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetCourses\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"CourseUId\",\"type\":\"string\"},{\"name\":\"CourseName\",\"type\":\"string\"},{\"name\":\"StartDate\",\"type\":\"string\"},{\"name\":\"EndDate\",\"type\":\"string\"},{\"name\":\"Hours\",\"type\":\"uint256\"},{\"name\":\"InstructorId\",\"type\":\"uint256\"}],\"name\":\"RegisterCourse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"StudentUId\",\"type\":\"string\"}],\"name\":\"GetStudentInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetStudents\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"CertificateUId\",\"type\":\"string\"},{\"name\":\"CourseId\",\"type\":\"uint256\"},{\"name\":\"StudentId\",\"type\":\"uint256\"},{\"name\":\"CertificateType\",\"type\":\"uint256\"},{\"name\":\"Result\",\"type\":\"string\"}],\"name\":\"RegisterCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_Institute\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CryptoClassCertificate","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b43727970746f436c617373000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d84d51e5167cd5e06105ac3d1943799ea63b58bd8e6a51be57a59450d19b8c0d"}]}