{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Token {\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n}\r\n\r\ncontract EtherSnap {\r\n\r\n    uint private units;\r\n    uint private bonus;\r\n\r\n    address private owner;\r\n\r\n    // Token specification\r\n    string public name = \"EtherSnap\";\r\n    string public symbol = \"ETS\";\r\n    uint public decimals = 18;\r\n\r\n    uint private icoUnits; // ICO tokens\r\n    uint private tnbUnits; // Team & Bounty tokens\r\n\r\n    mapping(address => uint) public balances;\r\n    mapping(address => uint) private contribution;\r\n    mapping(address => uint) private extra_tokens;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Contribute(address indexed account, uint ethereum, uint i, uint b, uint e, uint t, uint bp, uint ep);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return (icoUnits + tnbUnits) - balances[address(0)];\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        require(tokens > 0 && balances[msg.sender] >= tokens && balances[to] + tokens > balances[to]);\r\n        balances[to] += tokens;\r\n        balances[msg.sender] -= tokens;\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        require(tokens > 0 && balances[from] >= tokens && allowed[from][msg.sender] >= tokens && balances[to] + tokens > balances[to]);\r\n        balances[to] += tokens;\r\n        balances[from] -= tokens;\r\n        allowed[from][msg.sender] -= tokens;\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function withdraw(address token) public returns (bool success) {\r\n        // Allow owner only\r\n        require(msg.sender == owner);\r\n        // Transfer ethereum balance\r\n        if (token == address(0)) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n        // Transfer ERC-20 tokens to owner\r\n        else {\r\n            Token ERC20 = Token(token);\r\n            ERC20.transfer(owner, ERC20.balanceOf(address(this)));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setup(uint _bonus, uint _units) public returns (bool success) {\r\n        // Allow owner only\r\n        require(msg.sender == owner);\r\n        // Update ICO configuration\r\n        bonus = _bonus;\r\n        units = _units;\r\n        return true;\r\n    }\r\n\r\n    function fill() public returns (bool success) {\r\n        // Allow owner only\r\n        require(msg.sender == owner);\r\n        // Calculate maximum tokens to redeem\r\n        uint maximum = 35 * (icoUnits / 65);\r\n        // Checkout availability to redeem\r\n        require(maximum > tnbUnits);\r\n        // Calculate available tokens\r\n        uint available = maximum - tnbUnits;\r\n        // Update database\r\n        tnbUnits += available;\r\n        balances[msg.sender] += available;\r\n        // Emit callbacks\r\n        emit Transfer(address(this), msg.sender, available);\r\n        return true;\r\n    }\r\n\r\n    function contribute(address _acc, uint _wei) private returns (bool success) {\r\n        // Checkout ether and ICO state\r\n        require(_wei > 0 && units > 0);\r\n\r\n        // Calculate initial tokens for contribution\r\n        uint iTokens = _wei * units;\r\n\r\n        // Calculate bonus tokens\r\n        uint bTokens = bonus > 0 ? ((iTokens * bonus) / 100) : 0;\r\n\r\n        // Update contribution\r\n        uint total = contribution[_acc] + _wei;\r\n        contribution[_acc] = total;\r\n\r\n        // Calculate extra bonus percentage for contribution\r\n        uint extra = (total / 5 ether) * 10;\r\n        extra = extra > 50 ? 50 : extra;\r\n\r\n        // Calculate tokens for extra bonus percentage\r\n        uint eTokens = extra > 0 ? (((total * units) * extra) / 100) : 0;\r\n\r\n        // Remove already claimed extra tokens\r\n        uint cTokens = extra_tokens[_acc];\r\n        if (eTokens > cTokens) {\r\n            eTokens -= cTokens;\r\n        } else {\r\n            eTokens = 0;\r\n        }\r\n\r\n        // Calculate sum of total tokens\r\n        uint tTokens = iTokens + bTokens + eTokens;\r\n\r\n        // Update user balance and database\r\n        icoUnits += tTokens;\r\n        balances[_acc] += tTokens;\r\n        extra_tokens[_acc] += eTokens;\r\n\r\n        // Emit callbacks\r\n        emit Transfer(address(this), _acc, tTokens);\r\n        emit Contribute(_acc, _wei, iTokens, bTokens, eTokens, tTokens, bonus, extra);\r\n\r\n        return true;\r\n    }\r\n\r\n    function mint(address account, uint amount) public returns (bool success) {\r\n        // Allow owner only\r\n        require(msg.sender == owner);\r\n        // Execute contribute method\r\n        return contribute(account, amount);\r\n    }\r\n\r\n    function() public payable {\r\n        contribute(msg.sender, msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"},{\"name\":\"_units\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fill\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"e\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"t\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ep\",\"type\":\"uint256\"}],\"name\":\"Contribute\",\"type\":\"event\"}]","ContractName":"EtherSnap","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5c14739ee971072d3242651d17b0c937f147fa386603370f46389450e22ca0e4"}]}