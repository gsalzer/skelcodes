{"status":"1","message":"OK","result":[{"SourceCode":"//\r\n//                    %(/************/#&\r\n//               (**,                 ,**/#\r\n//            %/*,                        **(&\r\n//          (*,                              //%\r\n//        %*,                                  /(\r\n//       (*      ,************************/      /*%\r\n//      //         /(                  (/,        ,/%\r\n//     (*           //(               //            /%\r\n//    //             */%             //             //\r\n//    /*         (((((///(((( ((((((//(((((,         /(\r\n//    /           ,/%   //        (/    /*           //\r\n//    /             //   //(    %//   (/*            ,/\r\n//    /              //   ,/%   //   (/,             (/\r\n//    /             %(//%   / //    ///(             //\r\n//    //          %(/, ,/(   /   %//  //(           /(\r\n//    (/         (//     /#      (/,     //(        (/\r\n//     ((     %(/,        (/    (/,        //(      /,\r\n//      ((    /,           *(*#(/            /*   %/,\r\n//      /((                 /*((                 ((/\r\n//        *(%                                  #(\r\n//          ((%                              #(,\r\n//            *((%                        #((,\r\n//               (((%                   ((/\r\n//                   *(((###*#&%###((((*\r\n//\r\n//\r\n//                       GORGONA.IO\r\n//\r\n// Earn on investment 3% daily!\r\n// Receive your 3% cash-back when invest with referrer!\r\n// Earn 3% from each referral deposit!\r\n//\r\n//\r\n// HOW TO TAKE PARTICIPANT:\r\n// Just send ETH to contract address (min. 0.01 ETH)\r\n//\r\n//\r\n// HOW TO RECEIVE MY DIVIDENDS?\r\n// Send 0 ETH to contract. No limits.\r\n//\r\n//\r\n// INTEREST\r\n// IF contract balance > 0 ETH = 3% per day\r\n// IF contract balance > 1000 ETH = 2% per day\r\n// IF contract balance > 4000 ETH = 1% per day\r\n//\r\n//\r\n// DO NOT HOLD YOUR DIVIDENDS ON CONTRACT ACCOUNT!\r\n// Max one-time payout is your dividends for 3 days of work.\r\n// It would be better if your will request your dividends each day.\r\n//\r\n// For more information visit https://gorgona.io/\r\n//\r\n// Telegram chat (ru): https://t.me/gorgona_io\r\n// Telegram chat (en): https://t.me/gorgona_io_en\r\n//\r\n// For support and requests telegram: @alex_gorgona_io\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n// service which controls amount of investments per day\r\n// this service does not allow fast grow!\r\nlibrary GrowingControl {\r\n    using GrowingControl for data;\r\n\r\n    // base structure for control investments per day\r\n    struct data {\r\n        uint min;\r\n        uint max;\r\n\r\n        uint startAt;\r\n        uint maxAmountPerDay;\r\n        mapping(uint => uint) investmentsPerDay;\r\n    }\r\n\r\n    // increase day investments\r\n    function addInvestment(data storage control, uint amount) internal\r\n    {\r\n        control.investmentsPerDay[getCurrentDay()] += amount;\r\n    }\r\n\r\n    // get today current max investment\r\n    function getMaxInvestmentToday(data storage control) internal view returns (uint)\r\n    {\r\n        if (control.startAt == 0) {\r\n            return 10000 ether; // disabled controlling, allow 10000 eth\r\n        }\r\n\r\n        if (control.startAt > now) {\r\n            return 10000 ether; // not started, allow 10000 eth\r\n        }\r\n\r\n        return control.maxAmountPerDay - control.getTodayInvestment();\r\n    }\r\n\r\n    function getCurrentDay() internal view returns (uint)\r\n    {\r\n        return now / 24 hours;\r\n    }\r\n\r\n    // get amount of today investments\r\n    function getTodayInvestment(data storage control) internal view returns (uint)\r\n    {\r\n        return control.investmentsPerDay[getCurrentDay()];\r\n    }\r\n}\r\n\r\n\r\n// in the first days investments are allowed only for investors from Gorgona.v1\r\n// if you was a member of Gorgona.v1, you can invest\r\nlibrary PreEntrance {\r\n    using PreEntrance for data;\r\n\r\n    struct data {\r\n        mapping(address => bool) members;\r\n\r\n        uint from;\r\n        uint to;\r\n        uint cnt;\r\n    }\r\n\r\n    function isActive(data storage preEntrance) internal view returns (bool)\r\n    {\r\n        if (now < preEntrance.from) {\r\n            return false;\r\n        }\r\n\r\n        if (now > preEntrance.to) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // add new allowed to invest member\r\n    function add(data storage preEntrance, address[] addr) internal\r\n    {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            preEntrance.members[addr[i]] = true;\r\n            preEntrance.cnt ++;\r\n        }\r\n    }\r\n\r\n    // check that addr is a member\r\n    function isMember(data storage preEntrance, address addr) internal view returns (bool)\r\n    {\r\n        return preEntrance.members[addr];\r\n    }\r\n}\r\n\r\ncontract Gorgona {\r\n    using GrowingControl for GrowingControl.data;\r\n    using PreEntrance for PreEntrance.data;\r\n\r\n    // contract owner, must be 0x0000000000000000000,\r\n    // use Read Contract tab to check it!\r\n    address public owner;\r\n\r\n    uint constant public MINIMUM_INVEST = 10000000000000000 wei;\r\n\r\n    // current interest\r\n    uint public currentInterest = 3;\r\n\r\n    // total deposited eth\r\n    uint public depositAmount;\r\n\r\n    // total paid out eth\r\n    uint public paidAmount;\r\n\r\n    // current round (restart)\r\n    uint public round = 1;\r\n\r\n    // last investment date\r\n    uint public lastPaymentDate;\r\n\r\n    // fee for advertising purposes\r\n    uint public advertFee = 10;\r\n\r\n    // project admins fee\r\n    uint public devFee = 5;\r\n\r\n    // maximum profit per investor (x2)\r\n    uint public profitThreshold = 2;\r\n\r\n    // addr of project admins (not owner of the contract)\r\n    address public devAddr;\r\n\r\n    // advert addr\r\n    address public advertAddr;\r\n\r\n    // investors addresses\r\n    address[] public addresses;\r\n\r\n    // mapping address to Investor\r\n    mapping(address => Investor) public investors;\r\n\r\n    // currently on restart phase or not?\r\n    bool public pause;\r\n\r\n    // Perseus structure\r\n    struct Perseus {\r\n        address addr;\r\n        uint deposit;\r\n        uint from;\r\n    }\r\n\r\n    // Investor structure\r\n    struct Investor\r\n    {\r\n        uint id;\r\n        uint deposit; // deposit amount\r\n        uint deposits; // deposits count\r\n        uint paidOut; // total paid out\r\n        uint date; // last date of investment or paid out\r\n        address referrer;\r\n    }\r\n\r\n    event Invest(address indexed addr, uint amount, address referrer);\r\n    event Payout(address indexed addr, uint amount, string eventType, address from);\r\n    event NextRoundStarted(uint indexed round, uint date, uint deposit);\r\n    event PerseusUpdate(address addr, string eventType);\r\n\r\n    Perseus public perseus;\r\n    GrowingControl.data private growingControl;\r\n    PreEntrance.data private preEntrance;\r\n\r\n    // only contract creator access\r\n    modifier onlyOwner {if (msg.sender == owner) _;}\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        devAddr = msg.sender;\r\n\r\n        addresses.length = 1;\r\n\r\n        // set bounces for growingControl service\r\n        growingControl.min = 30 ether;\r\n        growingControl.max = 500 ether;\r\n    }\r\n\r\n    // change advert address, only admin access (works before ownership resignation)\r\n    function setAdvertAddr(address addr) onlyOwner public {\r\n        advertAddr = addr;\r\n    }\r\n\r\n    // change owner, only admin access (works before ownership resignation)\r\n    function transferOwnership(address addr) onlyOwner public {\r\n        owner = addr;\r\n    }\r\n\r\n    // set date which enables control of growing function (limitation of investments per day)\r\n    function setGrowingControlStartAt(uint startAt) onlyOwner public {\r\n        growingControl.startAt = startAt;\r\n    }\r\n\r\n    function getGrowingControlStartAt() public view returns (uint) {\r\n        return growingControl.startAt;\r\n    }\r\n\r\n    // set max of investments per day. Only devAddr have access to this function\r\n    function setGrowingMaxPerDay(uint maxAmountPerDay) public {\r\n        require(maxAmountPerDay >= growingControl.min && maxAmountPerDay <= growingControl.max, \"incorrect amount\");\r\n        require(msg.sender == devAddr, \"Only dev team have access to this function\");\r\n        growingControl.maxAmountPerDay = maxAmountPerDay;\r\n    }\r\n\r\n    // add members to  PreEntrance, only these addresses will be allowed to invest in the first days\r\n    function addPreEntranceMembers(address[] addr, uint from, uint to) onlyOwner public\r\n    {\r\n        preEntrance.from = from;\r\n        preEntrance.to = to;\r\n        preEntrance.add(addr);\r\n    }\r\n\r\n    function getPreEntranceFrom() public view returns (uint)\r\n    {\r\n        return preEntrance.from;\r\n    }\r\n\r\n    function getPreEntranceTo() public view returns (uint)\r\n    {\r\n        return preEntrance.to;\r\n    }\r\n\r\n    function getPreEntranceMemberCount() public view returns (uint)\r\n    {\r\n        return preEntrance.cnt;\r\n    }\r\n\r\n    // main function, which accept new investments and do dividends payouts\r\n    // if you send 0 ETH to this function, you will receive your dividends\r\n    function() payable public {\r\n\r\n        // ensure that payment not from contract\r\n        if (isContract()) {\r\n            revert();\r\n        }\r\n\r\n        // if contract is on restarting phase - do some work before restart\r\n        if (pause) {\r\n            doRestart();\r\n            msg.sender.transfer(msg.value); // return all money to sender\r\n\r\n            return;\r\n        }\r\n\r\n        if (0 == msg.value) {\r\n            payDividends(); // do pay out\r\n            return;\r\n        }\r\n\r\n        // if it is currently preEntrance phase\r\n        if (preEntrance.isActive()) {\r\n            require(preEntrance.isMember(msg.sender), \"Only predefined members can make deposit\");\r\n        }\r\n\r\n        require(msg.value >= MINIMUM_INVEST, \"Too small amount, minimum 0.01 ether\");\r\n        Investor storage user = investors[msg.sender];\r\n\r\n        if (user.id == 0) { // if no saved address, save it\r\n            user.id = addresses.push(msg.sender);\r\n            user.date = now;\r\n\r\n            // check referrer\r\n            address referrer = bytesToAddress(msg.data);\r\n            if (investors[referrer].deposit > 0 && referrer != msg.sender) {\r\n                user.referrer = referrer;\r\n            }\r\n        } else {\r\n            payDividends(); // else pay dividends before reinvest\r\n        }\r\n\r\n        // get max investment amount for the current day, according to sent amount\r\n        // all excesses will be returned to sender later\r\n        uint investment = min(growingControl.getMaxInvestmentToday(), msg.value);\r\n        require(investment > 0, \"Too much investments today\");\r\n\r\n        // update investor\r\n        user.deposit += investment;\r\n        user.deposits += 1;\r\n\r\n        emit Invest(msg.sender, investment, user.referrer);\r\n\r\n        depositAmount += investment;\r\n        lastPaymentDate = now;\r\n\r\n\r\n        if (devAddr.send(investment / 100 * devFee)) {\r\n            // project fee\r\n        }\r\n\r\n        if (advertAddr.send(investment / 100 * advertFee)) {\r\n            // advert fee\r\n        }\r\n\r\n        // referrer commission for all deposits\r\n        uint bonusAmount = investment / 100 * currentInterest;\r\n\r\n        // user have referrer\r\n        if (user.referrer > 0x0) {\r\n            if (user.referrer.send(bonusAmount)) { // pay referrer commission\r\n                emit Payout(user.referrer, bonusAmount, \"referral\", msg.sender);\r\n            }\r\n\r\n            if (user.deposits == 1) { // only the first deposit cashback\r\n                if (msg.sender.send(bonusAmount)) {\r\n                    emit Payout(msg.sender, bonusAmount, \"cash-back\", 0);\r\n                }\r\n            }\r\n        } else if (perseus.addr > 0x0 && perseus.from + 24 hours > now) { // if investor does not have referrer, Perseus takes the bonus\r\n            // also check Perseus is active\r\n            if (perseus.addr.send(bonusAmount)) { // pay bonus to current Perseus\r\n                emit Payout(perseus.addr, bonusAmount, \"perseus\", msg.sender);\r\n            }\r\n        }\r\n\r\n        // check and maybe update current interest rate\r\n        considerCurrentInterest();\r\n        // add investment to the growingControl service\r\n        growingControl.addInvestment(investment);\r\n        // Perseus has changed? do some checks\r\n        considerPerseus(investment);\r\n\r\n        // return excess eth (if growingControl is active)\r\n        if (msg.value > investment) {\r\n            msg.sender.transfer(msg.value - investment);\r\n        }\r\n    }\r\n\r\n    function getTodayInvestment() view public returns (uint)\r\n    {\r\n        return growingControl.getTodayInvestment();\r\n    }\r\n\r\n    function getMaximumInvestmentPerDay() view public returns (uint)\r\n    {\r\n        return growingControl.maxAmountPerDay;\r\n    }\r\n\r\n    function payDividends() private {\r\n        require(investors[msg.sender].id > 0, \"Investor not found\");\r\n        uint amount = getInvestorDividendsAmount(msg.sender);\r\n\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        // save last paid out date\r\n        investors[msg.sender].date = now;\r\n\r\n        // save total paid out for investor\r\n        investors[msg.sender].paidOut += amount;\r\n\r\n        // save total paid out for contract\r\n        paidAmount += amount;\r\n\r\n        uint balance = address(this).balance;\r\n\r\n        // check contract balance, if not enough - do restart\r\n        if (balance < amount) {\r\n            pause = true;\r\n            amount = balance;\r\n        }\r\n\r\n        msg.sender.transfer(amount);\r\n        emit Payout(msg.sender, amount, \"payout\", 0);\r\n\r\n        // if investor has reached the limit (x2 profit) - delete him\r\n        if (investors[msg.sender].paidOut >= investors[msg.sender].deposit * profitThreshold) {\r\n            delete investors[msg.sender];\r\n        }\r\n    }\r\n\r\n    // remove all investors and prepare data for the new round!\r\n    function doRestart() private {\r\n        uint txs;\r\n\r\n        for (uint i = addresses.length - 1; i > 0; i--) {\r\n            delete investors[addresses[i]]; // remove investor\r\n            addresses.length -= 1; // decrease addr length\r\n            if (txs++ == 150) { // stop on 150 investors (to prevent out of gas exception)\r\n                return;\r\n            }\r\n        }\r\n\r\n        emit NextRoundStarted(round, now, depositAmount);\r\n        pause = false; // stop pause, play\r\n        round += 1; // increase round number\r\n        depositAmount = 0;\r\n        paidAmount = 0;\r\n        lastPaymentDate = now;\r\n    }\r\n\r\n    function getInvestorCount() public view returns (uint) {\r\n        return addresses.length - 1;\r\n    }\r\n\r\n    function considerCurrentInterest() internal\r\n    {\r\n        uint interest;\r\n\r\n        // if balance is over 4k ETH - set interest rate for 1%\r\n        if (depositAmount >= 4000 ether) {\r\n            interest = 1;\r\n        } else if (depositAmount >= 1000 ether) { // if balance is more than 1k ETH - set interest rate for 2%\r\n            interest = 2;\r\n        } else {\r\n            interest = 3; // base = 3%\r\n        }\r\n\r\n        // if interest has not changed, return\r\n        if (interest >= currentInterest) {\r\n            return;\r\n        }\r\n\r\n        currentInterest = interest;\r\n    }\r\n\r\n    // Perseus!\r\n    // make the biggest investment today - and receive ref-commissions from ALL investors who not have a referrer in the next 24h\r\n    function considerPerseus(uint amount) internal {\r\n        // if current Perseus dead, delete him\r\n        if (perseus.addr > 0x0 && perseus.from + 24 hours < now) {\r\n            perseus.addr = 0x0;\r\n            perseus.deposit = 0;\r\n            emit PerseusUpdate(msg.sender, \"expired\");\r\n        }\r\n\r\n        // if the investment bigger than current Perseus made - change Perseus\r\n        if (amount > perseus.deposit) {\r\n            perseus = Perseus(msg.sender, amount, now);\r\n            emit PerseusUpdate(msg.sender, \"change\");\r\n        }\r\n    }\r\n\r\n    // calculate total dividends for investor from the last investment/payout date\r\n    // be careful  - max. one-time amount can cover 3 days of work\r\n    function getInvestorDividendsAmount(address addr) public view returns (uint) {\r\n        uint time = min(now - investors[addr].date, 3 days);\r\n        return investors[addr].deposit / 100 * currentInterest * time / 1 days;\r\n    }\r\n\r\n    function bytesToAddress(bytes bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    // check that there is no contract in the middle\r\n    function isContract() internal view returns (bool) {\r\n        return msg.sender != tx.origin;\r\n    }\r\n\r\n    // get min value from a and b\r\n    function min(uint a, uint b) public pure returns (uint) {\r\n        if (a < b) return a;\r\n        else return b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"paidAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"addPreEntranceMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_INVEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreEntranceMemberCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreEntranceTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxAmountPerDay\",\"type\":\"uint256\"}],\"name\":\"setGrowingMaxPerDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreEntranceFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"deposits\",\"type\":\"uint256\"},{\"name\":\"paidOut\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPaymentDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perseus\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaximumInvestmentPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGrowingControlStartAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInvestorDividendsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startAt\",\"type\":\"uint256\"}],\"name\":\"setGrowingControlStartAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdvertAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTodayInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"NextRoundStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eventType\",\"type\":\"string\"}],\"name\":\"PerseusUpdate\",\"type\":\"event\"}]","ContractName":"Gorgona","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2020da3710775fa38a881ad433ddbe789c5f51e8b7c141d1a1c923db85926122"}]}