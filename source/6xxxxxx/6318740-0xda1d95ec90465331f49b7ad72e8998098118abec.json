{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts\\StattmToken.sol\r\n\r\ncontract StattmToken is MintableToken {\r\n\r\n    string public constant name = \"Stattm\";\r\n    string public constant symbol = \"STTM\";\r\n\r\n    uint256 public constant decimals = 18;\r\n    mapping(address => bool) public isWhiteListed;\r\n\r\n\r\n    function burn() public {\r\n        uint256 _b = balanceOf(msg.sender);\r\n        balances[msg.sender] = 0;\r\n        totalSupply_ = totalSupply_ - _b;\r\n    }\r\n\r\n    function addToWhitelist(address _user) public onlyOwner {\r\n        isWhiteListed[_user] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address _user) public onlyOwner {\r\n        isWhiteListed[_user] = false;\r\n    }\r\n\r\n    function init(address privateSale, address ito, address ico, address projectManagementAndAirdrop) public {\r\n\r\n        require(totalSupply_ == 0);\r\n        require(address(privateSale) != address(0));\r\n        require(address(ito) != address(0));\r\n        require(address(ico) != address(0));\r\n        require(address(projectManagementAndAirdrop) != address(0));\r\n        mint(address(privateSale), (10 ** decimals) * (5000000));\r\n        mint(address(ito), (10 ** decimals) * (25000000));\r\n        mint(address(ico), (10 ** decimals) * (35000000));\r\n        mint(address(projectManagementAndAirdrop), (10 ** decimals) * (35100100));\r\n        mintingFinished = true;\r\n    }\r\n}\r\n\r\n// File: contracts\\AbstractCrowdsale.sol\r\n\r\ncontract AbstractCrowdsale is Ownable{\r\n\r\n    StattmToken public token;\r\n    bool public softCapReached = false;\r\n    bool public hardCapReached = false;\r\n    uint256 private _now =0;\r\n\r\n    event WhiteListReqested(address _adr);\r\n\r\n\r\n    address public beneficiary;\r\n\r\n    function saleStartTime() public constant returns(uint256);\r\n    function saleEndTime() public constant returns(uint256);\r\n    function softCapInTokens() public constant returns(uint256);\r\n    function hardCapInTokens() public constant returns(uint256);\r\n\r\n    function withdrawEndTime() public constant returns(uint256){\r\n      return saleEndTime() + 30 days;\r\n    }\r\n\r\n    mapping(address => uint256) public ethPayed;\r\n    mapping(address => uint256) public tokensToTransfer;\r\n    uint256 public totalTokensToTransfer = 0;\r\n\r\n    constructor(address _token, address _beneficiary) public {\r\n        token = StattmToken(_token);\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function getCurrentPrice() public  constant returns(uint256) ;\r\n\r\n    function forceReturn(address _adr) public onlyOwner{\r\n\r\n        if (token.isWhiteListed(_adr) == false) {\r\n          //send tokens, presale successful\r\n          require(msg.value == 0);\r\n          uint256 amountToSend = tokensToTransfer[msg.sender];\r\n          tokensToTransfer[msg.sender] = 0;\r\n          ethPayed[msg.sender] = 0;\r\n          totalTokensToTransfer=totalTokensToTransfer-amountToSend;\r\n          softCapReached = totalTokensToTransfer >= softCapInTokens();\r\n          require(token.transfer(msg.sender, amountToSend));\r\n        }\r\n    }\r\n\r\n    function getNow() public constant returns(uint256){\r\n      if(_now!=0){\r\n        return _now;\r\n      }\r\n      return now;\r\n    }\r\n\r\n    function setNow(uint256 _n) public returns(uint256){\r\n/*Allowed only in tests*///      _now = _n;\r\n      return now;\r\n    }\r\n    event Stage(uint256 blockNumber,uint256 index);\r\n    event Stage2(address adr,uint256 index);\r\n    function buy() public payable {\r\n        require(getNow()  > saleStartTime());\r\n        if (getNow()  > saleEndTime()\r\n          && (softCapReached == false\r\n          || token.isWhiteListed(msg.sender) == false)) {\r\n\r\n            //return funds, presale unsuccessful or user not whitelisteed\r\n            emit Stage(block.number,10);\r\n            require(msg.value == 0);\r\n            emit Stage(block.number,11);\r\n            uint256 amountToReturn = ethPayed[msg.sender];\r\n            totalTokensToTransfer=totalTokensToTransfer-tokensToTransfer[msg.sender];\r\n            tokensToTransfer[msg.sender] = 0;\r\n            ethPayed[msg.sender] = 0;\r\n            softCapReached = totalTokensToTransfer >= softCapInTokens();\r\n            emit Stage(block.number,12);\r\n            msg.sender.transfer(amountToReturn);\r\n            emit Stage(block.number,13);\r\n\r\n        }\r\n        if (getNow()  > saleEndTime()\r\n          && softCapReached == true\r\n          && token.isWhiteListed(msg.sender)) {\r\n\r\n            emit Stage(block.number,20);\r\n            //send tokens, presale successful\r\n            require(msg.value == 0);\r\n            emit Stage(block.number,21);\r\n            uint256 amountToSend = tokensToTransfer[msg.sender];\r\n            tokensToTransfer[msg.sender] = 0;\r\n            ethPayed[msg.sender] = 0;\r\n            require(token.transfer(msg.sender, amountToSend));\r\n            emit Stage(block.number,22);\r\n\r\n        }\r\n        if (getNow()  <= saleEndTime() && getNow()  > saleStartTime()) {\r\n            emit Stage(block.number,30);\r\n            ethPayed[msg.sender] = ethPayed[msg.sender] + msg.value;\r\n            tokensToTransfer[msg.sender] = tokensToTransfer[msg.sender] + getCurrentPrice() * msg.value;\r\n            totalTokensToTransfer = totalTokensToTransfer + getCurrentPrice() * msg.value;\r\n\r\n            if (totalTokensToTransfer >= hardCapInTokens()) {\r\n                //hardcap exceeded - revert;\r\n                emit Stage(block.number,31);\r\n                revert();\r\n                emit Stage(block.number,32);\r\n            }\r\n        }\r\n        if(tokensToTransfer[msg.sender] > 0 &&  token.isWhiteListed(msg.sender) && softCapInTokens()==0){\r\n          emit Stage(block.number,40);\r\n          uint256 amountOfTokens = tokensToTransfer[msg.sender] ;\r\n          tokensToTransfer[msg.sender] = 0;\r\n          emit Stage(block.number,41);\r\n          require(token.transfer(msg.sender,amountOfTokens));\r\n          emit Stage(block.number,42);\r\n        }\r\n        if (totalTokensToTransfer >= softCapInTokens()) {\r\n            emit Stage(block.number,50);\r\n            softCapReached = true;\r\n            emit Stage(block.number,51);\r\n        }\r\n        if (getNow()  > withdrawEndTime() && softCapReached == true && msg.sender == owner) {\r\n            emit Stage(block.number,60);\r\n            emit Stage(address(this).balance,60);\r\n            //sale end successfully all eth is send to beneficiary\r\n            beneficiary.transfer(address(this).balance);\r\n            emit Stage(address(this).balance,60);\r\n            emit Stage(block.number,61);\r\n            token.burn();\r\n            emit Stage(block.number,62);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\StattmPrivSale.sol\r\n\r\ncontract StattmPrivSale is AbstractCrowdsale{\r\n\r\n    function softCapInTokens() public constant returns(uint256){\r\n      return uint256(0);\r\n    }\r\n\r\n    function hardCapInTokens() public constant returns(uint256){\r\n      return uint256(5000000*(10**18));\r\n    }\r\n\r\n    function saleStartTime() public constant returns(uint256){\r\n      return 1535223482;  // 2018-08-25 00:00:00 GMT - start time for pre sale\r\n    }\r\n\r\n    function saleEndTime() public constant returns(uint256){\r\n      return 1539043200;// 2018-10-5 23:59:59 GMT - end time for pre sale\r\n    }\r\n    address private dev;\r\n    uint256 private devSum = 15 ether;\r\n\r\n    constructor(address _token, address _dev, address _beneficiary) public AbstractCrowdsale(_token,_beneficiary) {\r\n      dev = _dev;\r\n    }\r\n\r\n    function getCurrentPrice() public constant returns(uint256) {\r\n        return 3000;\r\n    }\r\n\r\n    function() public payable {\r\n      buy();\r\n      if(softCapInTokens()==0 && token.isWhiteListed(msg.sender)==false){\r\n        revert('User needs to be immediatly whiteListed in Presale');\r\n      }\r\n\r\n        if (address(this).balance < devSum) {\r\n            devSum = devSum - address(this).balance;\r\n            uint256 tmp = address(this).balance;\r\n            dev.transfer(tmp);\r\n\r\n        } else {\r\n            dev.transfer(devSum);\r\n            emit Stage2(dev,70);\r\n            devSum = 0;\r\n        }\r\n        if(softCapInTokens()==0){\r\n          beneficiary.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensToTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethPayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"forceReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensToTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"setNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_dev\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"WhiteListReqested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Stage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Stage2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StattmPrivSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000636900d7c8a46c0463ccb2ea5e5c97b8722aebdf00000000000000000000000058c6dede9e15b9aecb501a5c265e12d49e189d68000000000000000000000000378609798cfe681af0c4850ccc77d7c06231e523","Library":"","SwarmSource":"bzzr://519a0539645ab7033bade8161338f7db57f73e5a5490380ecb84a560b908b52c"}]}