{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract HODL {\r\n    struct HODL {\r\n        uint256 stake;\r\n        // moving ANY funds invalidates hodling of the address\r\n        bool invalid;\r\n        bool claimed3M;\r\n        bool claimed6M;\r\n        bool claimed9M;\r\n    }\r\n    mapping (address => HODL) public hodlerStakes;\r\n}\r\n\r\n/**\r\n * @title EthealHodlHelper\r\n * @author thesved, viktor.tabori at etheal.com\r\n * @notice Helper with HodlReward\r\n */\r\ncontract EthealHodlHelper {\r\n    HODL private hodl = HODL(0x9ab055FD8189A4128F5940F0e1B3F690AFaCd80c);\r\n    \r\n    function getAddress(address[] keys, bool valid, bool invalid) view external returns (address[] hodlers) {\r\n        uint256 i;\r\n        uint256 result = 0;\r\n        uint256 _s = 0;\r\n        bool _v = false;\r\n        bool _a = false;\r\n        bool _b = false;\r\n        bool _c = false;\r\n        address[] memory _hodlers = new address[](keys.length);\r\n\r\n        // search in contributors\r\n        for (i = 0; i < keys.length; i++) {\r\n            (_s, _v, _a, _b, _c) = hodl.hodlerStakes(keys[i]);\r\n            if ((_v && valid) || (!_v && invalid)) {\r\n                _hodlers[result] = keys[i];\r\n                result++;\r\n            }\r\n        }\r\n\r\n        hodlers = new address[](result);\r\n        for (i = 0; i < result; i++) {\r\n            hodlers[i] = _hodlers[i];\r\n        }\r\n\r\n        return hodlers;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"keys\",\"type\":\"address[]\"},{\"name\":\"valid\",\"type\":\"bool\"},{\"name\":\"invalid\",\"type\":\"bool\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"hodlers\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EthealHodlHelper","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://721e983b0c3c6f89c1d4b8d890d9ba39640de3e80023e62ef97f7a2ccb4b67e1"}]}