{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity^0.4.24;\r\n\r\n/*interface DiviesInterface {\r\n    function deposit() external payable;\r\n}*/\r\n\r\ncontract Cryptorank{\r\n    using SafeMath for *;\r\n    using NameFilter for string;\r\n\r\n    struct Round\r\n    {\r\n       bool active;\r\n       address lastvoter;\r\n       uint256  jackpot; //奖池 25%\r\n       uint256 start; \r\n       uint256 end;\r\n       uint256 tickets;//总票数\r\n       uint256 pot;//空投，1%\r\n       \r\n    }\r\n    \r\n    struct Coin\r\n    {\r\n        string symbol;\r\n        string name;\r\n        uint256 votes;\r\n    }\r\n    \r\n    address[] public players;\r\n    //Coin[] public coins;\r\n    Coin[] public coinSorting;//排序数组\r\n    \r\n    mapping(uint256 => Round) public rounds;\r\n    \r\n    //DiviesInterface constant private Divies = DiviesInterface(0x4a771aa796ba9fd4c5ed3d6e7b6e98270d5de880);\r\n   \r\n    \r\n    address  private owner;\r\n    address  public manager;\r\n    uint256  public roundid = 0;//局数\r\n    uint256  constant private initvotetime = 1 hours;\r\n\tuint256  constant private voteinterval = 90 seconds;\r\n\tuint256  constant private maxvotetime = 24 hours;\r\n\t\r\n\tuint256 public addcoinfee = 1 ether;\r\n    uint256 private SortingCoinstime;\r\n\t\r\n\tuint256  public raiseethamount = 0;//众筹100个ether\r\n    uint8 public addcoinslimit = 5;// 用户一次性最多添加5个币种，待管理员调整上币价格\r\n\tuint256 public tonextround = 0;//留到下一轮的资金\r\n\t\r\n\t//uint8 constant public  raiseicoprice = 100;\r\n\t//uint8 private invitation = 10;//邀请分比,10%\r\n\t//uint8 private promote = 5;//推广.5%\r\n\tuint256 private fund = 0;//基金,8%\r\n\tuint256 public nextRoundCoolingTime = 10 minutes;//下局开始的冷却时间\r\n\t\r\n\tuint256 public ticketPrice = 0.01 ether;//票价\r\n\t\r\n\r\n    mapping(string=>bool) have;\r\n\r\n    mapping(string=>uint)  cvotes;\r\n    \r\n    mapping(uint256 => uint256) public awardedReward;//已发放的奖励\r\n    mapping(uint256 => uint256) public ticketHolderReward;//持票者奖励\r\n    mapping(address => uint256) public selfharvest;//占比提成 \r\n    mapping(address => uint256) public selfvoteamount;//个人投资总金额\r\n    mapping(address => uint256) public selfvotes;//个人票数\r\n    mapping(address => uint8) public selfOdds;//中奖概率\r\n    mapping(address => uint256) public selfpotprofit;//空投奖励\r\n    mapping(address => uint256) public selfcommission;//邀请抽成\r\n    mapping(address => string) public playername;\r\n    mapping(address => address) public playerreferees;\r\n    mapping(bytes32 => uint256) public verifyName;//验证名字是否重复\r\n    mapping(address => bool) public pState; //状态 表示地址是否已经注册为会员\r\n    mapping(address => uint256) public raisemax;//众筹个人限制在1ether内\r\n    \r\n    \r\n     modifier isactivity(uint256 rid){\r\n         \r\n         require(rounds[rid].active == true);\r\n         _;\r\n     }\r\n     \r\n     modifier onlyowner()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n     modifier isRepeat(string _name)\r\n    {\r\n        require(have[_name]==false);\r\n       _;\r\n    }\r\n    \r\n     modifier isHave (string _name)\r\n    {\r\n        require(have[_name]==true);\r\n        _;\r\n    }\r\n    \r\n    //排序刷新事件\r\n    event Sortime(address indexed adr,uint256 indexed time);\r\n    event AddCoin(uint _id,string _name,string _symbol);\r\n    \r\n    constructor()  public {\r\n        \r\n        owner = msg.sender;\r\n        \r\n        startRound();\r\n      \r\n    }\r\n    \r\n    //货币函数\r\n     //添加币\r\n    function addcoin(string _name,string _symbol) \r\n       public\r\n       payable\r\n       isRepeat(_name)\r\n    {\r\n        require(addcoinslimit > 1);\r\n        \r\n        if(msg.sender != owner){\r\n            require(msg.value >= addcoinfee);\r\n            \r\n        }\r\n        \r\n        uint id = coinSorting.push(Coin(_symbol,_name, 0)) - 1;\r\n\r\n        cvotes[_name]=id;\r\n\r\n        emit AddCoin(id,_name,_symbol);\r\n\r\n        have[_name]=true;\r\n        \r\n        addcoinslimit --;\r\n        \r\n        rounds[roundid].jackpot =   rounds[roundid].jackpot.add(msg.value);\r\n    }\r\n    \r\n    \r\n    function tovote(string _name,uint256 _votes,uint256 reward) private \r\n       isHave(_name)\r\n       {\r\n        \r\n        coinSorting[cvotes[_name]].votes = coinSorting[cvotes[_name]].votes.add(_votes) ;\r\n        \r\n        for(uint256 i = 0;i < players.length;i++){\r\n            \r\n            address player = players[i];\r\n            \r\n            uint256 backreward = reward.mul(selfvotes[player]).div(rounds[roundid].tickets);\r\n            \r\n            selfharvest[player] = selfharvest[player].add(backreward);\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    //由大到小排序\r\n    function SortingCoins() public {\r\n        \r\n       /* delete coinSorting;\r\n        coinSorting.length = 0;\r\n        \r\n        for(uint256 i = 0;i<coins.length;i++){\r\n          \r\n            coinSorting.push(Coin(coins[i].symbol,coins[i].name,coins[i].votes));\r\n         \r\n        }*/\r\n        \r\n        for(uint256 i = 0;i< coinSorting.length;i++){\r\n            \r\n            for(uint256 j = i + 1;j < coinSorting.length;j++){\r\n              \r\n                if(coinSorting[i].votes < coinSorting[j].votes){\r\n                    \r\n                    cvotes[coinSorting[i].name] =  j;\r\n                    cvotes[coinSorting[j].name] =  i;\r\n                    \r\n                    Coin memory temp = Coin(coinSorting[i].symbol,coinSorting[i].name,coinSorting[i].votes);\r\n                    coinSorting[i] = Coin(coinSorting[j].symbol,coinSorting[j].name,coinSorting[j].votes);\r\n                    coinSorting[j] = Coin(temp.symbol,temp.name,temp.votes);\r\n                    \r\n                    \r\n                }\r\n            }\r\n        }\r\n     \r\n     }\r\n      \r\n  \r\n    //设置上币价\r\n    function setcoinfee(uint256 _fee)  external onlyowner{\r\n        \r\n        addcoinfee = _fee;\r\n        \r\n        addcoinslimit = 5;\r\n    }\r\n    \r\n    function getcoinSortinglength() public view returns(uint )\r\n    {\r\n        return coinSorting.length;\r\n    }\r\n\r\n    function getcvotesid(string _name)public view returns (uint)\r\n    {\r\n        return cvotes[_name];\r\n    }\r\n    function getcoinsvotes(string _name) public view returns(uint)\r\n    {\r\n        return coinSorting[cvotes[_name]].votes;\r\n    }\r\n\r\n    \r\n\r\n    //众筹\r\n    function raisevote()\r\n        payable\r\n        public\r\n        isactivity(roundid){\r\n        \r\n        require(raiseethamount < 100 ether);\r\n        \r\n        require(raisemax[msg.sender].add(msg.value) <= 1 ether);\r\n        \r\n        uint256 raiseeth;\r\n        \r\n        if(raiseethamount.add(msg.value) > 100 ether){\r\n            \r\n            raiseeth = 100 - raiseethamount;\r\n            \r\n            uint256 backraise = raiseethamount.add(msg.value) - 100 ether;\r\n        \r\n            selfpotprofit[msg.sender] = selfpotprofit[msg.sender].add(backraise);\r\n            \r\n        }else{\r\n            \r\n            raiseeth = msg.value;\r\n        }\r\n      \r\n        raiseethamount = raiseethamount.add(raiseeth);\r\n        \r\n        raisemax[msg.sender] = raisemax[msg.sender].add(raiseeth);\r\n        \r\n        uint256 ticketamount = raiseeth.div(0.01 ether);\r\n        \r\n        //Divies.deposit.value(msg.value.mul(5).div(100))();\r\n        \r\n        uint256 reward = msg.value.mul(51).div(100);\r\n        \r\n        for(uint256 i = 0;i < players.length;i++){\r\n            \r\n            address player = players[i];\r\n            \r\n            uint256 backreward = reward.mul(selfvotes[player]).div(rounds[roundid].tickets);\r\n            \r\n            selfharvest[player] = selfharvest[player].add(backreward);\r\n        }\r\n        \r\n        allot(ticketamount);\r\n    }\r\n    \r\n    \r\n\t///////////////////////////////////////////////\r\n\t// OWNER FUNCTIONS\r\n\t///////////////////////////////////////////////\r\n    function transferOwnership(address newOwner) public {\r\n\t\trequire(msg.sender == owner);\r\n\r\n\t\towner = newOwner;\r\n\t}\r\n\t\r\n\t//设置manager地址，用以取款基金和注册费\r\n\tfunction setManager(address _manager) public  onlyowner{\r\n\t   \r\n\t   manager = _manager;\r\n\t}\r\n    \r\n    \r\n    \r\n    //开始下一轮\r\n    function startRound() private{\r\n       \r\n       roundid++;\r\n       \r\n       rounds[roundid].active = true;\r\n       rounds[roundid].lastvoter = 0x0;\r\n       rounds[roundid].jackpot = tonextround;\r\n       rounds[roundid].start = now;\r\n       rounds[roundid].end = now + initvotetime;\r\n       rounds[roundid].tickets = 0;\r\n       rounds[roundid].pot = 0;\r\n       \r\n       ticketPrice = 0.01 ether;\r\n       \r\n  \r\n    }\r\n    \r\n    //计算票价\r\n    function calculatVotePrice() \r\n         public\r\n         view\r\n         returns(uint256){\r\n        \r\n        uint256 playersnum = players.length;\r\n        \r\n        if(playersnum <= 30)\r\n           return  ticketPrice.mul(112).div(100);\r\n        if(playersnum>30 && playersnum <= 100)\r\n           return  ticketPrice.mul(103).div(100);\r\n        if(playersnum > 100)\r\n           return ticketPrice.mul(101).div(100);\r\n    }\r\n    \r\n    //判断是非中奖\r\n    function airdrop()\r\n        private \r\n        view \r\n        returns(bool)\r\n    {\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n            \r\n            (block.timestamp).add\r\n            (block.difficulty).add\r\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\r\n            (block.gaslimit).add\r\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\r\n            (block.number)\r\n            \r\n        )));\r\n        if((seed - ((seed / 100) * 100)) < selfOdds[msg.sender])\r\n            return(true);\r\n        else\r\n            return(false);\r\n    }\r\n    \r\n    //计算空投奖励\r\n    function airdrppReward()\r\n        private\r\n        returns(string){\r\n        \r\n        if(airdrop() == false){\r\n            return \"非常遗憾！没有空投！\";\r\n        }\r\n        else{\r\n            if(selfvoteamount[msg.sender] <= 1 ether && rounds[roundid].pot >= 0.1 ether){\r\n              \r\n              selfpotprofit[msg.sender] =  selfpotprofit[msg.sender].add(0.1 ether);        }\r\n              \r\n              rounds[roundid].pot = rounds[roundid].pot.sub(0.1 ether);\r\n              \r\n              return \"恭喜获得空投 0.1 ether\";\r\n             }\r\n            if(1 ether < selfvoteamount[msg.sender] && selfvoteamount[msg.sender] <= 5 ether && rounds[roundid].pot >=0.5 ether){\r\n              \r\n              selfpotprofit[msg.sender] = selfpotprofit[msg.sender].add(0.5 ether);\r\n              \r\n              rounds[roundid].pot = rounds[roundid].pot.sub(0.5 ether);\r\n              \r\n              return \"恭喜获得空投 0.5 ether\";\r\n            }\r\n            if(selfvoteamount[msg.sender] > 5 ether && rounds[roundid].pot >= 1 ether){\r\n              \r\n              selfpotprofit[msg.sender] = selfpotprofit[msg.sender].add(1 ether);\r\n              \r\n              rounds[roundid].pot = rounds[roundid].pot.sub(1 ether);\r\n              \r\n              return \"恭喜获得空投 1 ether\";\r\n            }\r\n    }\r\n    \r\n    //更新时间\r\n    function updateTimer(uint256 _votes)\r\n        private\r\n    {\r\n        // grab time\r\n        uint256 _now = now;\r\n        \r\n        // calculate time based on number of keys bought\r\n        uint256 _newTime;\r\n        if (_now > rounds[roundid].end && rounds[roundid].lastvoter == address(0))\r\n            _newTime = (_votes.mul(voteinterval)).add(_now);\r\n        else\r\n            _newTime = (_votes.mul(voteinterval)).add(rounds[roundid].end);\r\n        \r\n        // compare to max and set new end time\r\n        if (_newTime < (maxvotetime).add(_now))\r\n            rounds[roundid].end = _newTime;\r\n        else\r\n            rounds[roundid].end = maxvotetime.add(_now);\r\n    }\r\n    \r\n    //投票\r\n    function voting (string _name) \r\n       payable \r\n       public \r\n       isactivity(roundid)\r\n       returns(string)\r\n    {\r\n\r\n        //require(raiseethamount == 100);\r\n        \r\n        uint256 currentticketPrice = ticketPrice;\r\n       \r\n        require(msg.value >= currentticketPrice);\r\n        \r\n        string memory ifgetpot = airdrppReward();\r\n        \r\n        require(now > (rounds[roundid].start + nextRoundCoolingTime) &&(now <= rounds[roundid].end ||rounds[roundid].lastvoter == address(0) ));\r\n        \r\n          \r\n          selfvoteamount[msg.sender] = selfvoteamount[msg.sender].add(msg.value);\r\n          \r\n          uint256 votes = msg.value.div(currentticketPrice);\r\n          \r\n          //Divies.deposit.value(msg.value.mul(5).div(100))();\r\n          \r\n          uint256 reward = msg.value.mul(51).div(100);\r\n          \r\n          uint256 _now = now;\r\n        if(_now - SortingCoinstime >2 hours){\r\n            SortingCoins();\r\n            SortingCoinstime = _now;\r\n            emit Sortime(msg.sender,_now);\r\n        }\r\n          \r\n          tovote(_name,votes,reward);\r\n         \r\n          allot(votes);\r\n         \r\n          calculateselfOdd();\r\n          \r\n          ticketPrice = calculatVotePrice();\r\n        \r\n        \r\n      \r\n       return ifgetpot;\r\n   }\r\n    \r\n    //计算空投中奖概率\r\n    function calculateselfOdd() private {\r\n        \r\n         if(selfvoteamount[msg.sender] <= 1 ether)\r\n              selfOdds[msg.sender] = 25;\r\n            if(1 ether < selfvoteamount[msg.sender] &&selfvoteamount[msg.sender] <= 10 ether)\r\n               selfOdds[msg.sender] = 50;\r\n            if(selfvoteamount[msg.sender] > 10 ether)\r\n               selfOdds[msg.sender] = 75;\r\n        \r\n        \r\n    }\r\n    \r\n    //分配资金\r\n    function allot(uint256 votes) private  isactivity(roundid){\r\n        \r\n          if(playerreferees[msg.sender] != address(0)){\r\n               \r\n              selfcommission[playerreferees[msg.sender]] = selfcommission[playerreferees[msg.sender]].add(msg.value.mul(10).div(100));\r\n          }else{\r\n             \r\n             rounds[roundid].jackpot = rounds[roundid].jackpot.add(msg.value.mul(10).div(100)); \r\n          }\r\n          \r\n           if(selectplayer() == false){\r\n              players.push(msg.sender);\r\n          }\r\n          \r\n          fund = fund.add(msg.value.mul(13).div(100));\r\n          \r\n          ticketHolderReward[roundid] = ticketHolderReward[roundid].add(msg.value.mul(51).div(100));\r\n          \r\n          rounds[roundid].jackpot = rounds[roundid].jackpot.add(msg.value.mul(25).div(100));\r\n          \r\n          rounds[roundid].pot =  rounds[roundid].pot.add(msg.value.mul(1).div(100));\r\n          \r\n          rounds[roundid].lastvoter = msg.sender;\r\n          \r\n          rounds[roundid].tickets = rounds[roundid].tickets.add(votes);\r\n          \r\n          selfvotes[msg.sender] = selfvotes[msg.sender].add(votes);\r\n        \r\n          updateTimer(votes);\r\n          \r\n    }\r\n    \r\n    \r\n    \r\n    //发奖\r\n    function endround() public isactivity(roundid) {\r\n        \r\n        require(now > rounds[roundid].end && rounds[roundid].lastvoter != address(0));\r\n\r\n        uint256 reward = rounds[roundid].jackpot;\r\n        \r\n        for(uint i = 0 ;i< players.length;i++){\r\n            \r\n            address player = players[i];\r\n            \r\n            uint256 selfbalance = selfcommission[msg.sender] + selfharvest[msg.sender] + selfpotprofit[msg.sender];\r\n            \r\n            uint256 endreward = reward.mul(42).div(100).mul(selfvotes[player]).div(rounds[roundid].tickets);\r\n            \r\n            selfcommission[player] = 0;\r\n         \r\n            selfharvest[player] = 0;\r\n         \r\n            selfpotprofit[player] = 0;\r\n            \r\n            selfvoteamount[player] = 0;\r\n            \r\n            selfvotes[player] = 0;\r\n            \r\n            player.transfer(endreward.add(selfbalance));\r\n        }\r\n        \r\n    \r\n        rounds[roundid].lastvoter.transfer(reward.mul(48).div(100));\r\n        \r\n        tonextround = reward.mul(10).div(100);\r\n        \r\n        uint256 remainingpot =  rounds[roundid].pot;\r\n        \r\n        tonextround = tonextround.add(remainingpot);\r\n        \r\n        rounds[roundid].active = false;\r\n        \r\n        delete players;\r\n        players.length = 0;\r\n        \r\n        startRound();\r\n\r\n     }\r\n     \r\n     //注册\r\n     function registerNameXNAME(string _nameString,address _inviter) \r\n        public\r\n        payable {\r\n        // make sure name fees paid\r\n        require (msg.value >= 0.01 ether, \"umm.....  you have to pay the name fee\");\r\n\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n\r\n        require(verifyName[_name]!=1 ,\"sorry that names already taken\");\r\n        \r\n        bool state =   validation_inviter(_inviter);\r\n        require(state,\"注册失败\");\r\n        if(!pState[msg.sender]){\r\n            \r\n            verifyName[_name] = 1;\r\n            playername[msg.sender] = _nameString;\r\n            playerreferees[msg.sender] = _inviter;\r\n            pState[msg.sender] = true;\r\n        }\r\n\r\n        manager.transfer(msg.value);\r\n    }\r\n    \r\n     function  validation_inviter (address y_inviter) public view returns (bool){\r\n        if(y_inviter== 0x0000000000000000000000000000000000000000){\r\n            return true;\r\n        }\r\n        else if(pState[y_inviter]){\r\n            return true;\r\n        }\r\n        else {\r\n\r\n            return false;\r\n        }\r\n\r\n    }\r\n     \r\n     \r\n     \r\n     //取款\r\n     function withdraw() public{\r\n         \r\n         uint256 reward = selfcommission[msg.sender] + selfharvest[msg.sender] + selfpotprofit[msg.sender];\r\n         \r\n         uint256 subselfharvest = selfharvest[msg.sender];\r\n         \r\n         selfcommission[msg.sender] = 0;\r\n         \r\n         selfharvest[msg.sender] = 0;\r\n         \r\n         selfpotprofit[msg.sender] = 0;\r\n         \r\n         ticketHolderReward[roundid] = ticketHolderReward[roundid].sub(subselfharvest);\r\n         \r\n         awardedReward[roundid] = awardedReward[roundid].add(reward);\r\n         \r\n         msg.sender.transfer(reward);\r\n     }\r\n     \r\n     //manager取款\r\n     function withdrawbymanager() public{\r\n         \r\n         require(msg.sender == manager);\r\n         \r\n         uint256 fundvalue = fund;\r\n         \r\n         fund = 0;\r\n         \r\n         manager.transfer(fundvalue);\r\n     }\r\n     \r\n     //查询空投奖励\r\n     function getpotReward() public view returns(uint256){\r\n         \r\n         return selfpotprofit[msg.sender];\r\n     }\r\n     \r\n     //查询分红\r\n     function getBonus() public view returns(uint256){\r\n         \r\n         return selfvotes[msg.sender] / rounds[roundid].tickets * rounds[roundid].jackpot;\r\n     }\r\n     \r\n     //查询是否投票人已经在数组里\r\n     function selectplayer() public view returns(bool){\r\n         \r\n         for(uint i = 0;i< players.length ;i++){\r\n             \r\n             if(players[i] == msg.sender)\r\n               return true;\r\n         \r\n             }\r\n            \r\n             return false;\r\n         \r\n     }\r\n    \r\n    \r\n    //返回开奖时间\r\n    function getroundendtime() public view returns(uint256){\r\n        \r\n        if(rounds[roundid].end >= now){\r\n            \r\n            return  rounds[roundid].end - now;\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    \r\n    \r\n    function getamountvotes() public view returns(uint) {\r\n        \r\n        return rounds[roundid].tickets;\r\n    }\r\n    \r\n     function getjackpot() public view returns(uint)\r\n   {\r\n       return rounds[roundid].jackpot;\r\n   }\r\n\r\n    function () payable public {\r\n        \r\n        selfpotprofit[msg.sender] = selfpotprofit[msg.sender].add(msg.value);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\nlibrary NameFilter {\r\n\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.\r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x\r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string _input) //名字过滤器\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n\r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n\r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n\r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 ||\r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n\r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getcvotesid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculatVotePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"awardedReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setcoinfee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"selfharvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"selfvoteamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"raisemax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addcoinslimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerreferees\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"selfOdds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getpotReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endround\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"addcoin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tonextround\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getjackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"selfvotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"selfcommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selectplayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"registerNameXNAME\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coinSorting\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"votes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"lastvoter\",\"type\":\"address\"},{\"name\":\"jackpot\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"tickets\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"selfpotprofit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getcoinsvotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getroundendtime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getamountvotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRoundCoolingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verifyName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"raisevote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SortingCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addcoinfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketHolderReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playername\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getcoinSortinglength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"voting\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawbymanager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"y_inviter\",\"type\":\"address\"}],\"name\":\"validation_inviter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raiseethamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Sortime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"AddCoin\",\"type\":\"event\"}]","ContractName":"Cryptorank","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a5810c300c2bd70d01485dab1c3c96a635d892f10c160c5b34ea97ee0a6136f5"}]}