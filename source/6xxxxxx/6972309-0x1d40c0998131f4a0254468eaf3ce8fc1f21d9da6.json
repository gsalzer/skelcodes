{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner is allowed for this operation.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to relinquish control of the contract.\r\n    * @notice Renouncing to ownership will leave the contract without an owner.\r\n    * It will not be possible to call the functions with the `onlyOwner`\r\n    * modifier anymore.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \"Cannot transfer ownership to an empty user.\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ANKRTokenVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // token contract Address\r\n\r\n    //Wallet Addresses for allocation immediately\r\n    address public opentokenAddress           = 0x7B1f5F0FCa6434D7b01161552D335A774706b650;\r\n    address public tokenmanAddress            = 0xBB46219183f1F17364914e353A44F982de77eeC8;\r\n\r\n    // Wallet Address for unlocked token\r\n    address public marketingAddress           = 0xc2e96F45232134dD32B6DF4D51AC82248CA942cc;\r\n\r\n    // Wallet Address for locked token\r\n    address public teamReserveWallet          = 0x0AA7Aa665276A96acD25329354FeEa8F955CAf2b;\r\n    address public communityReserveWallet     = 0xeFA1f626670445271359940e1aC346Ac374019E7;\r\n\r\n    //Token Allocations\r\n    uint256 public opentokenAllocation            = 0.5 * (10 ** 9) * (10 ** 18);\r\n    uint256 public tokenmanAllocation             = 0.2 * (10 ** 9) * (10 ** 18);\r\n    uint256 public marketingAllocation            = 0.5 * (10 ** 9) * (10 ** 18);\r\n    uint256 public teamReserveAllocation          = 2.0 * (10 ** 9) * (10 ** 18);\r\n    uint256 public communityReserveAllocation     = 4.0 * (10 ** 9) * (10 ** 18);\r\n\r\n    //Total Token Allocations\r\n    uint256 public totalAllocation = 10 * (10 ** 9) * (10 ** 18);\r\n\r\n    uint256 public investorTimeLock = 183 days; // six months\r\n    uint256 public othersTimeLock = 3 * 365 days;\r\n    // uint256 public investorVestingStages = 1;\r\n    uint256 public othersVestingStages = 3 * 12;\r\n\r\n    // uint256 public investorTimeLock = 5 seconds; // six months\r\n    // uint256 public othersTimeLock = 3 * 12 * 5 seconds;\r\n\r\n    /** Reserve allocations */\r\n    mapping(address => uint256) public allocations;\r\n\r\n    /** When timeLocks are over (UNIX Timestamp)  */\r\n    mapping(address => uint256) public timeLocks;\r\n\r\n    /** How many tokens each reserve wallet has claimed */\r\n    mapping(address => uint256) public claimed;\r\n\r\n    /** How many tokens each reserve wallet has claimed */\r\n    mapping(address => uint256) public lockedInvestors;\r\n    address[] public lockedInvestorsIndices;\r\n\r\n    /** How many tokens each reserve wallet has claimed */\r\n    mapping(address => uint256) public unLockedInvestors;\r\n    address[] public unLockedInvestorsIndices;\r\n\r\n    /** When this vault was locked (UNIX Timestamp)*/\r\n    uint256 public lockedAt = 0;\r\n\r\n    ERC20Basic public token;\r\n\r\n    /** Allocated reserve tokens */\r\n    event Allocated(address wallet, uint256 value);\r\n\r\n    /** Distributed reserved tokens */\r\n    event Distributed(address wallet, uint256 value);\r\n\r\n    /** Tokens have been locked */\r\n    event Locked(uint256 lockTime);\r\n\r\n    //Any of the reserve wallets\r\n    modifier onlyReserveWallets {\r\n        require(allocations[msg.sender] > 0, \"There should be non-zero allocation.\");\r\n        _;\r\n    }\r\n\r\n    // //Only Ankr team reserve wallet\r\n    // modifier onlyNonInvestorReserve {\r\n    //     require(\r\n    //         msg.sender == teamReserveWallet || msg.sender == communityReserveWallet, \r\n    //         \"Only team and community is allowed for this operation.\");\r\n    //     require(allocations[msg.sender] > 0, \"There should be non-zero allocation for team.\");\r\n    //     _;\r\n    // }\r\n\r\n    //Has not been locked yet\r\n    modifier notLocked {\r\n        require(lockedAt == 0, \"lockedAt should be zero.\");\r\n        _;\r\n    }\r\n\r\n    modifier locked {\r\n        require(lockedAt > 0, \"lockedAt should be larger than zero.\");\r\n        _;\r\n    }\r\n\r\n    //Token allocations have not been set\r\n    modifier notAllocated {\r\n        require(allocations[opentokenAddress] == 0, \"Allocation should be zero.\");\r\n        require(allocations[tokenmanAddress] == 0, \"Allocation should be zero.\");\r\n        require(allocations[marketingAddress] == 0, \"Allocation should be zero.\");\r\n        require(allocations[teamReserveWallet] == 0, \"Allocation should be zero.\");\r\n        require(allocations[communityReserveWallet] == 0, \"Allocation should be zero.\");\r\n        _;\r\n    }\r\n\r\n    constructor(ERC20Basic _token) public {\r\n        token = ERC20Basic(_token);\r\n    }\r\n\r\n    function addUnlockedInvestor(address investor, uint256 amt) public onlyOwner notLocked notAllocated returns (bool) {\r\n        require(investor != address(0), \"Unlocked investor must not be zero.\");\r\n        require(amt > 0, \"Unlocked investor's amount should be larger than zero.\");\r\n        unLockedInvestorsIndices.push(investor);\r\n        unLockedInvestors[investor] = amt * (10 ** 18);\r\n        return true;\r\n    }\r\n\r\n    function addLockedInvestor(address investor, uint256 amt) public onlyOwner notLocked notAllocated returns (bool) {\r\n        require(investor != address(0), \"Locked investor must not be zero.\");\r\n        require(amt > 0, \"Locked investor's amount should be larger than zero.\");\r\n        lockedInvestorsIndices.push(investor);\r\n        lockedInvestors[investor] = amt * (10 ** 18);\r\n        return true;\r\n    }\r\n\r\n    function allocate() public notLocked notAllocated onlyOwner {\r\n\r\n        //Makes sure Token Contract has the exact number of tokens\r\n        require(token.balanceOf(address(this)) == totalAllocation, \"Token should not be allocated yet.\");\r\n\r\n        allocations[opentokenAddress] = opentokenAllocation;\r\n        allocations[tokenmanAddress] = tokenmanAllocation;\r\n        allocations[marketingAddress] = marketingAllocation;\r\n        allocations[teamReserveWallet] = teamReserveAllocation;\r\n        allocations[communityReserveWallet] = communityReserveAllocation;\r\n\r\n        emit Allocated(opentokenAddress, opentokenAllocation);\r\n        emit Allocated(tokenmanAddress, tokenmanAllocation);\r\n        emit Allocated(marketingAddress, marketingAllocation);\r\n        emit Allocated(teamReserveWallet, teamReserveAllocation);\r\n        emit Allocated(communityReserveWallet, communityReserveAllocation);\r\n\r\n        address cur;\r\n        uint arrayLength;\r\n        uint i;\r\n        arrayLength = unLockedInvestorsIndices.length;\r\n        for (i = 0; i < arrayLength; i++) {\r\n            cur = unLockedInvestorsIndices[i];\r\n            allocations[cur] = unLockedInvestors[cur];\r\n            emit Allocated(cur, unLockedInvestors[cur]);\r\n        }\r\n        arrayLength = lockedInvestorsIndices.length;\r\n        for (i = 0; i < arrayLength; i++) {\r\n            cur = lockedInvestorsIndices[i];\r\n            allocations[cur] = lockedInvestors[cur];\r\n            emit Allocated(cur, lockedInvestors[cur]);\r\n        }\r\n\r\n        // lock();\r\n        preDistribute();\r\n    }\r\n\r\n    function distribute() public notLocked onlyOwner {\r\n        claimTokenReserve(marketingAddress);\r\n        \r\n        uint arrayLength;\r\n        uint i;\r\n        arrayLength = unLockedInvestorsIndices.length;\r\n        for (i = 0; i < arrayLength; i++) {\r\n            claimTokenReserve(unLockedInvestorsIndices[i]);\r\n        }\r\n        lock();\r\n    }\r\n\r\n    //Lock the vault for the three wallets\r\n    function lock() internal {\r\n\r\n        lockedAt = block.timestamp;\r\n\r\n        timeLocks[teamReserveWallet] = lockedAt.add(othersTimeLock);\r\n        timeLocks[communityReserveWallet] = lockedAt.add(othersTimeLock);\r\n\r\n        emit Locked(lockedAt);\r\n    }\r\n\r\n    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\r\n    //Recover Tokens in case incorrect amount was sent to contract.\r\n    function recoverFailedLock() external notLocked notAllocated onlyOwner {\r\n\r\n        // Transfer all tokens on this contract back to the owner\r\n        require(token.transfer(owner, token.balanceOf(address(this))), \"recoverFailedLock: token transfer failed!\");\r\n    }\r\n\r\n    // Total number of tokens currently in the vault\r\n    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\r\n\r\n        return token.balanceOf(address(this));\r\n\r\n    }\r\n\r\n    // Number of tokens that are still locked\r\n    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\r\n\r\n        return allocations[msg.sender].sub(claimed[msg.sender]);\r\n\r\n    }\r\n\r\n    //Distribute tokens for non-vesting reserve wallets\r\n    function preDistribute() internal {\r\n        claimTokenReserve(opentokenAddress);\r\n        claimTokenReserve(tokenmanAddress);\r\n    }\r\n\r\n    //Claim tokens for non-vesting reserve wallets\r\n    function claimTokenReserve(address reserveWallet) internal {\r\n        // Must Only claim once\r\n        require(allocations[reserveWallet] > 0, \"There should be non-zero allocation.\");\r\n        require(claimed[reserveWallet] == 0, \"This address should be never claimed before.\");\r\n\r\n        uint256 amount = allocations[reserveWallet];\r\n\r\n        claimed[reserveWallet] = amount;\r\n\r\n        require(token.transfer(reserveWallet, amount), \"Token transfer failed\");\r\n\r\n        emit Distributed(reserveWallet, amount);\r\n    }\r\n\r\n    //Claim tokens for Investor's reserve wallet\r\n    function distributeInvestorsReserve() onlyOwner locked public {\r\n        require(block.timestamp.sub(lockedAt) > investorTimeLock, \"Still in locking period.\");\r\n\r\n        uint arrayLength;\r\n        uint i;\r\n        \r\n        arrayLength = lockedInvestorsIndices.length;\r\n        for (i = 0; i < arrayLength; i++) {\r\n            claimTokenReserve(lockedInvestorsIndices[i]);\r\n        }\r\n    }\r\n\r\n    //Claim tokens for Team and Community reserve wallet\r\n    // function claimNonInvestorReserve() public onlyNonInvestorReserve locked {\r\n    function claimNonInvestorReserve() public onlyOwner locked {\r\n        uint256 vestingStage = nonInvestorVestingStage();\r\n\r\n        //Amount of tokens the team should have at this vesting stage\r\n        uint256 totalUnlockedTeam = vestingStage.mul(allocations[teamReserveWallet]).div(othersVestingStages);\r\n        uint256 totalUnlockedComm = vestingStage.mul(allocations[communityReserveWallet]).div(othersVestingStages);\r\n\r\n        //Previously claimed tokens must be less than what is unlocked\r\n        require(claimed[teamReserveWallet] < totalUnlockedTeam, \"Team's claimed tokens must be less than what is unlocked\");\r\n        require(claimed[communityReserveWallet] < totalUnlockedComm, \"Community's claimed tokens must be less than what is unlocked\");\r\n\r\n        uint256 paymentTeam = totalUnlockedTeam.sub(claimed[teamReserveWallet]);\r\n        uint256 paymentComm = totalUnlockedComm.sub(claimed[communityReserveWallet]);\r\n\r\n        claimed[teamReserveWallet] = totalUnlockedTeam;\r\n        claimed[communityReserveWallet] = totalUnlockedComm;\r\n\r\n        require(token.transfer(teamReserveWallet, paymentTeam), \"Team token transfer failed.\");\r\n        require(token.transfer(communityReserveWallet, paymentComm), \"Community token transfer failed.\");\r\n\r\n        emit Distributed(teamReserveWallet, paymentTeam);\r\n        emit Distributed(communityReserveWallet, paymentComm);\r\n    }\r\n\r\n    //Current Vesting stage for Ankr's Team and Community\r\n    function nonInvestorVestingStage() public view returns(uint256){\r\n\r\n        // Every month\r\n        uint256 vestingMonths = othersTimeLock.div(othersVestingStages);\r\n\r\n        uint256 stage = (block.timestamp.sub(lockedAt).sub(investorTimeLock)).div(vestingMonths);\r\n\r\n        //Ensures Team and Community vesting stage doesn't go past othersVestingStages\r\n        if(stage > othersVestingStages){\r\n            stage = othersVestingStages;\r\n        }\r\n\r\n        return stage;\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"nonInvestorVestingStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"name\":\"tokensCurrentlyInVault\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opentokenAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"addUnlockedInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeInvestorsReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockedBalance\",\"outputs\":[{\"name\":\"tokensLocked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unLockedInvestorsIndices\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimNonInvestorReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedInvestorsIndices\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenmanAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenmanAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"othersTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"othersVestingStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unLockedInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opentokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"addLockedInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverFailedLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ANKRTokenVault","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b5f406dd1dec522542c8504c4c31b7940f5d895c","Library":"","SwarmSource":"bzzr://a93077f1e592911c3a8bd4fae148ffd90df23330c719ba2d6af900442b4b9a11"}]}