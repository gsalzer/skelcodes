{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Claimable.sol\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: contracts/DtktSale.sol\r\n\r\ncontract DtktSale is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Sale {\r\n        uint startTime;\r\n        uint endTime;\r\n        uint minPurchase;\r\n        uint weiRaised;\r\n    }\r\n\r\n    struct Fees {\r\n        uint fund;\r\n        uint reward;\r\n        uint divisor;\r\n    }\r\n\r\n    struct Wallets {\r\n        address fund;\r\n        address fees;\r\n    }\r\n\r\n    uint public era;\r\n    Fees public fees;\r\n    Wallets public wallets;\r\n    mapping(uint => Sale) public sales;\r\n    mapping(address => uint) public balances;\r\n\r\n    event NewSale(uint era, uint startTime, uint endTime, uint minPurchase);\r\n    event NewFees(uint fund, uint reward, uint divisor);\r\n    event NewWallets(address fund, address fees);\r\n    event Purchase(uint indexed era, address indexed wallet, uint amount);\r\n    event Reward(address indexed affiliate, uint amount);\r\n    event Withdraw(address indexed wallet, uint amount);\r\n\r\n    function DtktSale() public {\r\n        //set default\r\n        updateWallets(msg.sender, msg.sender);\r\n        updateFees(4, 1, 100);\r\n    }\r\n\r\n    function () public payable {\r\n        if (msg.value > 0) {\r\n            buy();\r\n        } else {\r\n            claim();\r\n        }\r\n    }\r\n\r\n    function buy() public payable {\r\n        buyWithReward(wallets.fees);\r\n    }\r\n\r\n    function buyWithReward(address affiliate) whenFunding public payable {\r\n        Sale storage sale = sales[era];\r\n        require(msg.value >= sale.minPurchase);\r\n\r\n        require(affiliate != msg.sender);\r\n        require(affiliate != address(this));\r\n\r\n        uint fee = msg.value.mul(fees.fund).div(fees.divisor);\r\n        uint reward = msg.value.mul(fees.reward).div(fees.divisor);\r\n        uint amount = msg.value.sub(fee).sub(reward);\r\n\r\n        balances[wallets.fees] = balances[wallets.fees].add(fee);\r\n        balances[affiliate] = balances[affiliate].add(reward);\r\n        balances[wallets.fund] = balances[wallets.fund].add(amount);\r\n\r\n        sale.weiRaised = sale.weiRaised.add(amount);\r\n\r\n        Purchase(era, msg.sender, amount);\r\n        Reward(affiliate, reward);\r\n    }\r\n\r\n    function claim() public {\r\n        if (msg.sender == wallets.fees || msg.sender == wallets.fund) require(!funding());\r\n        uint payment = balances[msg.sender];\r\n        require(payment > 0);\r\n        balances[msg.sender] = 0;\r\n        msg.sender.transfer(payment);\r\n        Withdraw(msg.sender, payment);\r\n    }\r\n\r\n    function funding() public view returns (bool) {\r\n        Sale storage sale = sales[era];\r\n        return now >= sale.startTime && now <= sale.endTime;\r\n    }\r\n\r\n    modifier whenFunding() {\r\n        require(funding());\r\n        _;\r\n    }\r\n\r\n    modifier whenNotFunding() {\r\n        require(!funding());\r\n        _;\r\n    }\r\n\r\n    function updateWallets(address _fund, address _fees) whenNotFunding onlyOwner public {\r\n        wallets = Wallets(_fund, _fees);\r\n        NewWallets(_fund, _fees);\r\n    }\r\n\r\n    function updateFees(uint _fund, uint _reward, uint _divisor) whenNotFunding onlyOwner public {\r\n        require(_divisor > _fund && _divisor > _reward);\r\n        fees = Fees(_fund, _reward, _divisor);\r\n        NewFees(_fund, _reward, _divisor);\r\n    }\r\n\r\n    function addSale(uint _startTime, uint _endTime, uint _minPurchase) whenNotFunding onlyOwner public {\r\n        require(_startTime >= now && _endTime >= _startTime);\r\n        era = era.add(1);\r\n        sales[era] = Sale(_startTime, _endTime, _minPurchase, 0);\r\n        NewSale(era, _startTime, _endTime, _minPurchase);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"era\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fund\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"},{\"name\":\"_divisor\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"name\":\"fund\",\"type\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\"},{\"name\":\"divisor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"name\":\"weiRaised\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"funding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallets\",\"outputs\":[{\"name\":\"fund\",\"type\":\"address\"},{\"name\":\"fees\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_minPurchase\",\"type\":\"uint256\"}],\"name\":\"addSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"buyWithReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fund\",\"type\":\"address\"},{\"name\":\"_fees\",\"type\":\"address\"}],\"name\":\"updateWallets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minPurchase\",\"type\":\"uint256\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fund\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"NewFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fund\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fees\",\"type\":\"address\"}],\"name\":\"NewWallets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"affiliate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DtktSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://80d1f468c26f4407d2ecd0fbe55fc6a4cb56a45f495d7f0b28486fc3404aedc3"}]}