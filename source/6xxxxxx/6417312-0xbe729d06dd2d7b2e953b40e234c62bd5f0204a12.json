{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  function () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize)\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize)\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize) }\r\n      default { return(0, returndatasize) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _implementation Address of the initial implementation.\r\n   */\r\n  constructor(address _implementation) public {\r\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\r\n\r\n    _setImplementation(_implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) private {\r\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". This adds two-phase\r\n * ownership control to OpenZeppelin's Ownable class. In this model, the original owner \r\n * designates a new owner but does not actually transfer ownership. The new owner then accepts \r\n * ownership and completes the transfer.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public pendingOwner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    pendingOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n*\r\n* @dev Stores permissions and validators and provides setter and getter methods. \r\n* Permissions determine which methods users have access to call. Validators\r\n* are able to mutate permissions at the Regulator level.\r\n*\r\n*/\r\ncontract RegulatorStorage is Ownable {\r\n    \r\n    /** \r\n        Structs \r\n    */\r\n\r\n    /* Contains metadata about a permission to execute a particular method signature. */\r\n    struct Permission {\r\n        string name; // A one-word description for the permission. e.g. \"canMint\"\r\n        string description; // A longer description for the permission. e.g. \"Allows user to mint tokens.\"\r\n        string contract_name; // e.g. \"PermissionedToken\"\r\n        bool active; // Permissions can be turned on or off by regulator\r\n    }\r\n\r\n    /** \r\n        Constants: stores method signatures. These are potential permissions that a user can have, \r\n        and each permission gives the user the ability to call the associated PermissionedToken method signature\r\n    */\r\n    bytes4 public constant MINT_SIG = bytes4(keccak256(\"mint(address,uint256)\"));\r\n    bytes4 public constant MINT_CUSD_SIG = bytes4(keccak256(\"mintCUSD(address,uint256)\"));\r\n    bytes4 public constant CONVERT_WT_SIG = bytes4(keccak256(\"convertWT(uint256)\"));\r\n    bytes4 public constant BURN_SIG = bytes4(keccak256(\"burn(uint256)\"));\r\n    bytes4 public constant CONVERT_CARBON_DOLLAR_SIG = bytes4(keccak256(\"convertCarbonDollar(address,uint256)\"));\r\n    bytes4 public constant BURN_CARBON_DOLLAR_SIG = bytes4(keccak256(\"burnCarbonDollar(address,uint256)\"));\r\n    bytes4 public constant DESTROY_BLACKLISTED_TOKENS_SIG = bytes4(keccak256(\"destroyBlacklistedTokens(address,uint256)\"));\r\n    bytes4 public constant APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG = bytes4(keccak256(\"approveBlacklistedAddressSpender(address)\"));\r\n    bytes4 public constant BLACKLISTED_SIG = bytes4(keccak256(\"blacklisted()\"));\r\n\r\n    /** \r\n        Mappings \r\n    */\r\n\r\n    /* each method signature maps to a Permission */\r\n    mapping (bytes4 => Permission) public permissions;\r\n    /* list of validators, either active or inactive */\r\n    mapping (address => bool) public validators;\r\n    /* each user can be given access to a given method signature */\r\n    mapping (address => mapping (bytes4 => bool)) public userPermissions;\r\n\r\n    /** \r\n        Events \r\n    */\r\n    event PermissionAdded(bytes4 methodsignature);\r\n    event PermissionRemoved(bytes4 methodsignature);\r\n    event ValidatorAdded(address indexed validator);\r\n    event ValidatorRemoved(address indexed validator);\r\n\r\n    /** \r\n        Modifiers \r\n    */\r\n    /**\r\n    * @notice Throws if called by any account that does not have access to set attributes\r\n    */\r\n    modifier onlyValidator() {\r\n        require (isValidator(msg.sender), \"Sender must be validator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Sets a permission within the list of permissions.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    * @param _permissionName A \"slug\" name for this permission (e.g. \"canMint\").\r\n    * @param _permissionDescription A lengthier description for this permission (e.g. \"Allows user to mint tokens\").\r\n    * @param _contractName Name of the contract that the method belongs to.\r\n    */\r\n    function addPermission(\r\n        bytes4 _methodsignature, \r\n        string _permissionName, \r\n        string _permissionDescription, \r\n        string _contractName) public onlyValidator { \r\n        Permission memory p = Permission(_permissionName, _permissionDescription, _contractName, true);\r\n        permissions[_methodsignature] = p;\r\n        emit PermissionAdded(_methodsignature);\r\n    }\r\n\r\n    /**\r\n    * @notice Removes a permission the list of permissions.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    */\r\n    function removePermission(bytes4 _methodsignature) public onlyValidator {\r\n        permissions[_methodsignature].active = false;\r\n        emit PermissionRemoved(_methodsignature);\r\n    }\r\n    \r\n    /**\r\n    * @notice Sets a permission in the list of permissions that a user has.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    */\r\n    function setUserPermission(address _who, bytes4 _methodsignature) public onlyValidator {\r\n        require(permissions[_methodsignature].active, \"Permission being set must be for a valid method signature\");\r\n        userPermissions[_who][_methodsignature] = true;\r\n    }\r\n\r\n    /**\r\n    * @notice Removes a permission from the list of permissions that a user has.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    */\r\n    function removeUserPermission(address _who, bytes4 _methodsignature) public onlyValidator {\r\n        require(permissions[_methodsignature].active, \"Permission being removed must be for a valid method signature\");\r\n        userPermissions[_who][_methodsignature] = false;\r\n    }\r\n\r\n    /**\r\n    * @notice add a Validator\r\n    * @param _validator Address of validator to add\r\n    */\r\n    function addValidator(address _validator) public onlyOwner {\r\n        validators[_validator] = true;\r\n        emit ValidatorAdded(_validator);\r\n    }\r\n\r\n    /**\r\n    * @notice remove a Validator\r\n    * @param _validator Address of validator to remove\r\n    */\r\n    function removeValidator(address _validator) public onlyOwner {\r\n        validators[_validator] = false;\r\n        emit ValidatorRemoved(_validator);\r\n    }\r\n\r\n    /**\r\n    * @notice does validator exist?\r\n    * @return true if yes, false if no\r\n    **/\r\n    function isValidator(address _validator) public view returns (bool) {\r\n        return validators[_validator];\r\n    }\r\n\r\n    /**\r\n    * @notice does permission exist?\r\n    * @return true if yes, false if no\r\n    **/\r\n    function isPermission(bytes4 _methodsignature) public view returns (bool) {\r\n        return permissions[_methodsignature].active;\r\n    }\r\n\r\n    /**\r\n    * @notice get Permission structure\r\n    * @param _methodsignature request to retrieve the Permission struct for this methodsignature\r\n    * @return Permission\r\n    **/\r\n    function getPermission(bytes4 _methodsignature) public view returns \r\n        (string name, \r\n         string description, \r\n         string contract_name,\r\n         bool active) {\r\n        return (permissions[_methodsignature].name,\r\n                permissions[_methodsignature].description,\r\n                permissions[_methodsignature].contract_name,\r\n                permissions[_methodsignature].active);\r\n    }\r\n\r\n    /**\r\n    * @notice does permission exist?\r\n    * @return true if yes, false if no\r\n    **/\r\n    function hasUserPermission(address _who, bytes4 _methodsignature) public view returns (bool) {\r\n        return userPermissions[_who][_methodsignature];\r\n    }\r\n}\r\n\r\n/**\r\n * @title RegulatorProxy\r\n * @dev A RegulatorProxy is a proxy contract that acts identically to a Regulator from the\r\n * user's point of view. A proxy can change its data storage locations and can also\r\n * change its implementation contract location. A call to RegulatorProxy delegates the function call\r\n * to the latest implementation contract's version of the function and the proxy then\r\n * calls that function in the context of the proxy's data storage\r\n *\r\n */\r\ncontract RegulatorProxy is UpgradeabilityProxy, RegulatorStorage {\r\n\r\n    \r\n    /**\r\n    * @dev CONSTRUCTOR\r\n    * @param _implementation the contract who's logic the proxy will initially delegate functionality to\r\n    **/\r\n    constructor(address _implementation) public UpgradeabilityProxy(_implementation) {}\r\n\r\n    /**\r\n    * @dev Upgrade the backing implementation of the proxy.\r\n    * Only the admin can call this function.\r\n    * @param newImplementation Address of the new implementation.\r\n    */\r\n    function upgradeTo(address newImplementation) public onlyOwner {\r\n        _upgradeTo(newImplementation);\r\n\r\n    }\r\n\r\n      /**\r\n    * @return The address of the implementation.\r\n    */\r\n    function implementation() public view returns (address) {\r\n        return _implementation();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_methodsignature\",\"type\":\"bytes4\"}],\"name\":\"hasUserPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_methodsignature\",\"type\":\"bytes4\"}],\"name\":\"getPermission\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"contract_name\",\"type\":\"string\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_methodsignature\",\"type\":\"bytes4\"}],\"name\":\"setUserPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"permissions\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"contract_name\",\"type\":\"string\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_methodsignature\",\"type\":\"bytes4\"}],\"name\":\"removeUserPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONVERT_WT_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_methodsignature\",\"type\":\"bytes4\"},{\"name\":\"_permissionName\",\"type\":\"string\"},{\"name\":\"_permissionDescription\",\"type\":\"string\"},{\"name\":\"_contractName\",\"type\":\"string\"}],\"name\":\"addPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"userPermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_CUSD_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_methodsignature\",\"type\":\"bytes4\"}],\"name\":\"isPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLACKLISTED_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DESTROY_BLACKLISTED_TOKENS_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_methodsignature\",\"type\":\"bytes4\"}],\"name\":\"removePermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_CARBON_DOLLAR_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONVERT_CARBON_DOLLAR_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"methodsignature\",\"type\":\"bytes4\"}],\"name\":\"PermissionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"methodsignature\",\"type\":\"bytes4\"}],\"name\":\"PermissionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]","ContractName":"RegulatorProxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000078a87623e381c395f6b02c649893642dcb3d245e","Library":"","SwarmSource":"bzzr://cc9fb92d196fd26c5df1ba01c3ac5c529d0b24e2434eddb99da751f6f21c88a5"}]}