{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract God {\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with tokens\r\n    modifier onlyTokenHolders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    // only people with profits\r\n    modifier onlyProfitsHolders() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }\r\n\r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned\r\n    );\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    event onInjectEtherFromIco(uint _incomingEthereum, uint _dividends, uint profitPerShare_);\r\n\r\n    event onInjectEtherToDividend(address sender, uint _incomingEthereum, uint profitPerShare_);\r\n\r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\r\n\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"God\";\r\n    string public symbol = \"God\";\r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal dividendFee_ = 10;\r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n\r\n    // proof of stake (defaults at 100 tokens)\r\n    uint256 public stakingRequirement = 100e18;\r\n\r\n    uint constant internal  MIN_TOKEN_TRANSFER = 1e10;\r\n\r\n\r\n    /*================================\r\n     =            DATASETS            =\r\n     ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    // administrator list (see above on what they can do)\r\n    address internal owner;\r\n    mapping(address => bool) public administrators;\r\n\r\n    address bankAddress;\r\n    mapping(address => bool) public contractAddresses;\r\n\r\n    int internal contractPayout = 0;\r\n\r\n    bool internal isProjectBonus = true;\r\n    uint internal projectBonus = 0;\r\n    uint internal projectBonusRate = 10;  // 1/10\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    constructor()\r\n    public\r\n    {\r\n        // add administrators here\r\n        owner = msg.sender;\r\n        administrators[owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\r\n     */\r\n    function buy(address _referredBy)\r\n    public\r\n    payable\r\n    returns (uint256)\r\n    {\r\n        purchaseTokens(msg.value, _referredBy);\r\n    }\r\n\r\n    /**\r\n     * Fallback function to handle ethereum that was send straight to the contract\r\n     * Unfortunately we cannot use a referral address this way.\r\n     */\r\n    function()\r\n    public\r\n    payable\r\n    {\r\n        purchaseTokens(msg.value, 0x0);\r\n    }\r\n\r\n    function injectEtherFromIco()\r\n    public\r\n    payable\r\n    {\r\n        uint _incomingEthereum = msg.value;\r\n        require(_incomingEthereum > 0);\r\n        uint256 _dividends = SafeMath.div(_incomingEthereum, dividendFee_);\r\n\r\n        if (isProjectBonus) {\r\n            uint temp = SafeMath.div(_dividends, projectBonusRate);\r\n            _dividends = SafeMath.sub(_dividends, temp);\r\n            projectBonus = SafeMath.add(projectBonus, temp);\r\n        }\r\n        profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n        emit onInjectEtherFromIco(_incomingEthereum, _dividends, profitPerShare_);\r\n    }\r\n\r\n    function injectEtherToDividend()\r\n    public\r\n    payable\r\n    {\r\n        uint _incomingEthereum = msg.value;\r\n        require(_incomingEthereum > 0);\r\n        profitPerShare_ += (_incomingEthereum * magnitude / (tokenSupply_));\r\n        emit onInjectEtherToDividend(msg.sender, _incomingEthereum, profitPerShare_);\r\n    }\r\n\r\n    function injectEther()\r\n    public\r\n    payable\r\n    {}\r\n\r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n     */\r\n    function reinvest()\r\n    onlyProfitsHolders()\r\n    public\r\n    {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(false);\r\n        // retrieve ref. bonus later in the code\r\n\r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\r\n\r\n        // retrieve ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\r\n\r\n        // fire event\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exit()\r\n    public\r\n    {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if (_tokens > 0) sell(_tokens);\r\n\r\n        // lambo delivery service\r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw()\r\n    onlyProfitsHolders()\r\n    public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n        // get ref. bonus later in the code\r\n\r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\r\n\r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        // lambo delivery service\r\n        _customerAddress.transfer(_dividends);\r\n\r\n        // fire event\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens)\r\n    onlyTokenHolders()\r\n    public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        // russian hackers BTFO\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n\r\n        if (isProjectBonus) {\r\n            uint temp = SafeMath.div(_dividends, projectBonusRate);\r\n            _dividends = SafeMath.sub(_dividends, temp);\r\n            projectBonus = SafeMath.add(projectBonus, temp);\r\n        }\r\n\r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n\r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        // dividing by zero is a bad idea\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n\r\n        // fire event\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\r\n    }\r\n\r\n\r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * Remember, there's a 10% fee here as well.\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n    onlyTokenHolders()\r\n    public\r\n    returns (bool)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens >= MIN_TOKEN_TRANSFER\r\n        && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        bytes memory empty;\r\n        transferFromInternal(_customerAddress, _toAddress, _amountOfTokens, empty);\r\n        return true;\r\n    }\r\n\r\n    function transferFromInternal(address _from, address _toAddress, uint _amountOfTokens, bytes _data)\r\n    internal\r\n    {\r\n        require(_toAddress != address(0x0));\r\n        uint fromLength;\r\n        uint toLength;\r\n        assembly {\r\n            fromLength := extcodesize(_from)\r\n            toLength := extcodesize(_toAddress)\r\n        }\r\n\r\n        if (fromLength > 0 && toLength <= 0) {\r\n            // contract to human\r\n            contractAddresses[_from] = true;\r\n            contractPayout -= (int) (_amountOfTokens);\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n            payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\r\n\r\n        } else if (fromLength <= 0 && toLength > 0) {\r\n            // human to contract\r\n            contractAddresses[_toAddress] = true;\r\n            contractPayout += (int) (_amountOfTokens);\r\n            tokenSupply_ = SafeMath.sub(tokenSupply_, _amountOfTokens);\r\n            payoutsTo_[_from] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n\r\n        } else if (fromLength > 0 && toLength > 0) {\r\n            // contract to contract\r\n            contractAddresses[_from] = true;\r\n            contractAddresses[_toAddress] = true;\r\n        } else {\r\n            // human to human\r\n            payoutsTo_[_from] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n            payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\r\n        }\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_from] = SafeMath.sub(tokenBalanceLedger_[_from], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n\r\n        // to contract\r\n        if (toLength > 0) {\r\n            ERC223Receiving receiver = ERC223Receiving(_toAddress);\r\n            receiver.tokenFallback(_from, _amountOfTokens, _data);\r\n        }\r\n\r\n        // fire event\r\n        emit Transfer(_from, _toAddress, _amountOfTokens);\r\n\r\n    }\r\n\r\n    function transferFrom(address _from, address _toAddress, uint _amountOfTokens)\r\n    public\r\n    returns (bool)\r\n    {\r\n        // Setup variables\r\n        address _customerAddress = _from;\r\n        bytes memory empty;\r\n        // Make sure we own the tokens we're transferring, are ALLOWED to transfer that many tokens,\r\n        // and are transferring at least one full token.\r\n        require(_amountOfTokens >= MIN_TOKEN_TRANSFER\r\n        && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]\r\n        && _amountOfTokens <= allowed[_customerAddress][msg.sender]);\r\n\r\n        transferFromInternal(_from, _toAddress, _amountOfTokens, empty);\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _amountOfTokens);\r\n\r\n        // Good old ERC20.\r\n        return true;\r\n\r\n    }\r\n\r\n    function transferTo(address _from, address _to, uint _amountOfTokens, bytes _data)\r\n    public\r\n    {\r\n        if (_from != msg.sender) {\r\n            require(_amountOfTokens >= MIN_TOKEN_TRANSFER\r\n            && _amountOfTokens <= tokenBalanceLedger_[_from]\r\n            && _amountOfTokens <= allowed[_from][msg.sender]);\r\n            allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _amountOfTokens);\r\n        }\r\n        else {\r\n            require(_amountOfTokens >= MIN_TOKEN_TRANSFER\r\n            && _amountOfTokens <= tokenBalanceLedger_[_from]);\r\n        }\r\n        transferFromInternal(_from, _to, _amountOfTokens, _data);\r\n    }\r\n\r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\r\n\r\n    function setBank(address _identifier, uint256 value)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        bankAddress = _identifier;\r\n        contractAddresses[_identifier] = true;\r\n        tokenBalanceLedger_[_identifier] = value;\r\n    }\r\n\r\n    /**\r\n     * In case one of us dies, we need to replace ourselves.\r\n     */\r\n    function setAdministrator(address _identifier, bool _status)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        require(_identifier != owner);\r\n        administrators[_identifier] = _status;\r\n    }\r\n\r\n    /**\r\n     * Precautionary measures in case we need to adjust the masternode rate.\r\n     */\r\n    function setStakingRequirement(uint256 _amountOfTokens)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        stakingRequirement = _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string _name)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        name = _name;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string _symbol)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function getContractPayout()\r\n    onlyAdministrator()\r\n    public\r\n    view\r\n    returns (int)\r\n    {\r\n        return contractPayout;\r\n    }\r\n\r\n    function getIsProjectBonus()\r\n    onlyAdministrator()\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        return isProjectBonus;\r\n    }\r\n\r\n    function setIsProjectBonus(bool value)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        isProjectBonus = value;\r\n    }\r\n\r\n    function getProjectBonus()\r\n    onlyAdministrator()\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return projectBonus;\r\n    }\r\n\r\n    function takeProjectBonus(address to, uint value)\r\n    onlyAdministrator()\r\n    public {\r\n        require(value <= projectBonus);\r\n        to.transfer(value);\r\n    }\r\n\r\n\r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n    function totalEthereumBalance()\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply()\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n\r\n\r\n    // erc 20\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return getBalance(_customerAddress);\r\n    }\r\n\r\n    function getProfitPerShare()\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return (uint256) ((int256)(tokenSupply_*profitPerShare_)) / magnitude;\r\n    }\r\n\r\n    function getContractETH()\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate.\r\n     */\r\n    function myDividends(bool _includeReferralBonus)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n    view\r\n    public\r\n    returns (uint256)\r\n    {\r\n        if(contractAddresses[_customerAddress]){\r\n            return 0;\r\n        }\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function getBalance(address _customerAddress)\r\n    view\r\n    public\r\n    returns (uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress)\r\n    view\r\n    public\r\n    returns (uint256)\r\n    {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n\r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function sellPrice()\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice()\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _ethereumToSpend)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEthereumReceived(uint256 _tokensToSell)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n\r\n\r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\r\n    internal\r\n    returns (uint256)\r\n    {\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n\r\n        if (isProjectBonus) {\r\n            uint temp = SafeMath.div(_undividedDividends, projectBonusRate);\r\n            _dividends = SafeMath.sub(_dividends, temp);\r\n            projectBonus = SafeMath.add(projectBonus, temp);\r\n        }\r\n\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_));\r\n\r\n        // is the user referred by a masternode?\r\n        if (\r\n        // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n\r\n            // no cheating!\r\n            _referredBy != _customerAddress &&\r\n\r\n            // does the referrer have at least X whole tokens?\r\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\r\n        ) {\r\n            // wealth redistribution\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n        } else {\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n\r\n        // we can't give people infinite ethereum\r\n        if (tokenSupply_ > 0) {\r\n\r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n\r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n\r\n            // calculate the amount of tokens the customer receives over his purchase\r\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n\r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n        //really i know you think you do but you don't\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n        // fire event\r\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ethereum\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived =\r\n        (\r\n        (\r\n        // underflow attempts BTFO\r\n        SafeMath.sub(\r\n            (sqrt\r\n        (\r\n            (_tokenPriceInitial ** 2)\r\n            +\r\n            (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\r\n            +\r\n            (((tokenPriceIncremental_) ** 2) * (tokenSupply_ ** 2))\r\n            +\r\n            (2 * (tokenPriceIncremental_) * _tokenPriceInitial * tokenSupply_)\r\n        )\r\n            ), _tokenPriceInitial\r\n        )\r\n        ) / (tokenPriceIncremental_)\r\n        ) - (tokenSupply_)\r\n        ;\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    /**\r\n     * Calculate token sell value.\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function tokensToEthereum_(uint256 _tokens)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n        (\r\n        // underflow attempts BTFO\r\n        SafeMath.sub(\r\n            (\r\n            (\r\n            (\r\n            tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\r\n            ) - tokenPriceIncremental_\r\n            ) * (tokens_ - 1e18)\r\n            ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\r\n        )\r\n        / 1e18);\r\n        return _etherReceived;\r\n    }\r\n\r\n\r\n    //This is where all your gas goes, sorry\r\n    //Not sorry, you probably only paid 1 gwei\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC223Receiving {\r\n    function tokenFallback(address _from, uint _amountOfTokens, bytes _data) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitPerShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"takeProjectBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"injectEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIsProjectBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsProjectBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"injectEtherToDividend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"injectEtherFromIco\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProjectBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"profitPerShare_\",\"type\":\"uint256\"}],\"name\":\"onInjectEtherFromIco\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"profitPerShare_\",\"type\":\"uint256\"}],\"name\":\"onInjectEtherToDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"God","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cfa96c56f02d26671d23808be9faac439a43343c4f0cee75a367f38aac01d2b2"}]}