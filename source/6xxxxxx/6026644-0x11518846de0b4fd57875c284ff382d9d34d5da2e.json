{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity^0.4.21;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    mapping (uint256 => address) public owner;\r\n    address[] public allOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner[0] = msg.sender;\r\n        allOwner.push(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner[0] || msg.sender == owner[1] || msg.sender == owner[2]);\r\n        _;\r\n    }\r\n    \r\n    function addnewOwner(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        uint256 len = allOwner.length;\r\n        owner[len] = newOwner;\r\n        allOwner.push(newOwner);\r\n    }\r\n\r\n    function setNewOwner(address newOwner, uint position) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        require(position == 1 || position == 2);\r\n        owner[position] = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner[0], newOwner);\r\n        owner[0] = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public;\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n}\r\n\r\ncontract KNBaseToken is ERC20 {\r\n    using SafeMath for uint256;\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 totalSupply_;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public{\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply_ = _totalSupply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value);\r\n        require(balances[_to].add(_value) > balances[_to]);\r\n\r\n\r\n        uint256 previousBalances = balances[_from].add(balances[_to]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        assert(balances[_from].add(balances[_to]) == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender]);     // Check allowance\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balances[_from] >= _value);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract KnowToken is KNBaseToken(\"Know Token\", \"KN\", 18, 7795482309000000000000000000), Ownable {\r\n\r\n    uint256 internal privateToken = 389774115000000000000000000;\r\n    uint256 internal preSaleToken = 1169322346000000000000000000;\r\n    uint256 internal crowdSaleToken = 3897741155000000000000000000;\r\n    uint256 internal bountyToken;\r\n    uint256 internal foundationToken;\r\n    address public founderAddress;\r\n    bool public unlockAllTokens;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    event FrozenFunds(address target, bool unfrozen);\r\n    event UnLockAllTokens(bool unlock);\r\n\r\n    constructor() public {\r\n        founderAddress = msg.sender;\r\n        balances[founderAddress] = totalSupply_;\r\n        emit Transfer(address(0), founderAddress, totalSupply_);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != address(0));                               \r\n        require (balances[_from] >= _value);               \r\n        require (balances[_to].add(_value) >= balances[_to]); \r\n        require(!frozenAccount[_from] || unlockAllTokens);\r\n\r\n        balances[_from] = balances[_from].sub(_value);                  \r\n        balances[_to] = balances[_to].add(_value);                  \r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function unlockAllTokens(bool _unlock) public onlyOwner {\r\n        unlockAllTokens = _unlock;\r\n        emit UnLockAllTokens(_unlock);\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) public onlyOwner {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n}\r\n\r\ncontract KnowTokenPrivateSale is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    KnowToken public token;\r\n    address public wallet;\r\n    uint256 public currentRate;\r\n    uint256 public limitTokenForSale;\r\n\r\n    event ChangeRate(address indexed who, uint256 newrate);\r\n    event FinishPrivateSale();\r\n\r\n    constructor() public {\r\n        currentRate = 100000;\r\n        wallet = msg.sender; //address of founder\r\n        limitTokenForSale = 389774115000000000000000000;\r\n        token = KnowToken(0xbfd18F20423694a69e35d65cB9c9D74396CC2c2d);// address of KN Token\r\n    }\r\n\r\n    function changeRate(uint256 newrate) public onlyOwner{\r\n        require(newrate > 0);\r\n        currentRate = newrate;\r\n\r\n        emit ChangeRate(msg.sender, newrate);\r\n    }\r\n\r\n    function remainTokens() view public returns(uint256) {\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n    function finish() public onlyOwner {\r\n        uint256 reTokens = remainTokens();\r\n        token.transfer(owner[0], reTokens);\r\n        \r\n        emit FinishPrivateSale();\r\n    }\r\n\r\n    function () public payable {\r\n        assert(msg.value >= 50 ether);\r\n        \r\n        uint256 tokens = currentRate.mul(msg.value);\r\n        uint256 bonus = tokens.div(2);\r\n        uint256 totalTokens = tokens.add(bonus);\r\n        token.transfer(msg.sender, totalTokens);\r\n        token.freezeAccount(msg.sender, true);        \r\n        wallet.transfer(msg.value);       \r\n    }  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"limitTokenForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addnewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newrate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newrate\",\"type\":\"uint256\"}],\"name\":\"ChangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinishPrivateSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"KnowTokenPrivateSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4cf178ebb0d2e5c9b73266beab3d676d47ce4f48750145e584c4a5b07a98dd4"}]}