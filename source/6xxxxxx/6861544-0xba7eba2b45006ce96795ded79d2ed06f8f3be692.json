{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n\r\ncontract EthRV2 {\r\n  using SafeMath for uint;\r\n\r\n  struct Investor {\r\n    uint deposit;\r\n    uint paymentTime;\r\n    uint withdrawal;\r\n    uint boostStartup;\r\n    bool isParticipant;\r\n  }\r\n\r\n  mapping (address => Investor) public investors;\r\n  address public admin1Address;\r\n  address public admin2Address;\r\n  address public admin3Address;\r\n  address public owner;\r\n  uint public investmentsNumber;\r\n  uint public investorsNumber;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"access denied\");\r\n    _;\r\n  }\r\n\r\n  event OnRefLink(address indexed referral, uint referrarBonus, address indexed referrer,  uint referrerBonus, uint time);\r\n  event OnNewInvestor(address indexed addr, uint time);\r\n  event OnInvesment(address indexed addr, uint deposit, uint time);\r\n  event OnBoostChanged(address indexed addr, bool isActive, uint time);\r\n  event OnEarlyWithdrawal(address indexed addr, uint withdrawal, uint time);\r\n  event OnDeleteInvestor(address indexed addr, uint time);\r\n  event OnWithdraw(address indexed addr, uint withdrawal, uint time);\r\n  event OnBoostBonus(address indexed addr, uint bonus, uint time);\r\n  event OnNotEnoughBalance(uint time);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    admin1Address = msg.sender;\r\n    admin2Address = msg.sender;\r\n    admin3Address = msg.sender;\r\n  }\r\n\r\n  function() external payable {\r\n    if (msg.value == 0) {\r\n      withdraw();\r\n    } else if (msg.value == 0.0077777 ether) {\r\n      boost();\r\n    } else if (msg.value == 0.0088888 ether) {\r\n      earlyWithdrawal();\r\n    } else {\r\n      deposit(bytes2address(msg.data));\r\n    }\r\n  }\r\n\r\n  function disown() public onlyOwner {\r\n    owner = address(0x0);\r\n  }\r\n\r\n  function setAdminsAddress(uint n, address addr) public onlyOwner {\r\n    require(n >= 1 && n <= 3, \"invalid number of admin`s address\");\r\n    if (n == 1) {\r\n      admin1Address = addr;\r\n    } else if (n == 2) {\r\n      admin2Address = addr;\r\n    } else {\r\n      admin3Address = addr;\r\n    }\r\n  }\r\n\r\n  function investorDividends(address investorAddr) public view returns(uint dividends, uint boostBonus) {\r\n    return getDividends(investorAddr);\r\n  }\r\n\r\n  function withdraw() public {\r\n    address investorAddr = msg.sender;\r\n    (uint dividends, uint boostBonus) = getDividends(investorAddr);\r\n    require(dividends > 0, \"cannot to pay zero dividends\");\r\n    require(address(this).balance > 0, \"fund is empty\");\r\n    uint withdrawal = dividends + boostBonus;\r\n\r\n    // fund limit\r\n    if (address(this).balance <= withdrawal) {\r\n      emit OnNotEnoughBalance(now);\r\n      withdrawal = address(this).balance;\r\n    }\r\n\r\n    Investor storage investor = investors[investorAddr];\r\n    uint withdrawalLimit = investor.deposit * 200 / 100; // 200%\r\n    uint totalWithdrawal = withdrawal + investor.withdrawal;\r\n\r\n    // withdrawal limit - 200%\r\n    if (totalWithdrawal >= withdrawalLimit) {\r\n      withdrawal = withdrawalLimit.sub(investor.withdrawal);\r\n      if (boostBonus > 0 ) {\r\n        emit OnBoostBonus(investorAddr, boostBonus, now);\r\n      }\r\n      deleteInvestor(investorAddr);\r\n    } else {\r\n      // normal withdraw - dont use boostBonus\r\n      if (withdrawal > dividends) {\r\n        withdrawal = dividends;\r\n      }\r\n      investor.withdrawal += withdrawal;\r\n      investor.paymentTime = now;\r\n      if (investor.boostStartup > 0) {\r\n        investor.boostStartup = 0;\r\n        emit OnBoostChanged(investorAddr, false, now);\r\n      }\r\n    }\r\n\r\n    investorAddr.transfer(withdrawal);\r\n    emit OnWithdraw(investorAddr, withdrawal, now);\r\n  }\r\n\r\n  function earlyWithdrawal() public {\r\n    address investorAddr = msg.sender;\r\n    Investor storage investor = investors[investorAddr];\r\n    require(investor.deposit > 0, \"sender must be an investor\");\r\n\r\n    uint earlyWithdrawalLimit = investor.deposit * 70 / 100; // 70%\r\n    require(earlyWithdrawalLimit > investor.withdrawal, \"early withdraw only before 70% deposit`s withdrawal\");\r\n\r\n    uint withdrawal = earlyWithdrawalLimit.sub(investor.withdrawal); \r\n    investorAddr.transfer(withdrawal);\r\n    emit OnEarlyWithdrawal(investorAddr, withdrawal, now);\r\n\r\n    deleteInvestor(investorAddr);\r\n  }\r\n\r\n  function boost() public {\r\n    Investor storage investor = investors[msg.sender];\r\n    require(investor.deposit > 0, \"sender must be an investor\");\r\n    require(investor.boostStartup == 0, \"boost is already activated\");\r\n    investor.boostStartup = now;\r\n    emit OnBoostChanged(msg.sender, true, now);\r\n  }\r\n\r\n  function deposit(address referrerAddr) public payable {\r\n    uint depositAmount = msg.value;\r\n    address investorAddr = msg.sender;\r\n    require(isNotContract(investorAddr), \"invest from contracts is not supported\");\r\n    require(depositAmount > 0, \"deposit amount cannot be zero\");\r\n\r\n    admin1Address.send(depositAmount * 70 / 1000); //   7%\r\n    admin2Address.send(depositAmount * 15 / 1000); // 1.5%\r\n    admin3Address.send(depositAmount * 15 / 1000); // 1.5%\r\n\r\n    Investor storage investor = investors[investorAddr];\r\n    bool senderIsNotPaticipant = !investor.isParticipant;\r\n    bool referrerIsParticipant = investors[referrerAddr].isParticipant;\r\n\r\n    // ref link\r\n    if (senderIsNotPaticipant && referrerIsParticipant && referrerAddr != investorAddr) {\r\n      uint referrerBonus = depositAmount * 3 / 100; // 3%\r\n      uint referralBonus = depositAmount * 1 / 100; // 1%\r\n      referrerAddr.transfer(referrerBonus);\r\n      investorAddr.transfer(referralBonus);\r\n      emit OnRefLink(investorAddr, referralBonus, referrerAddr, referrerBonus, now);\r\n    }\r\n\r\n    if (investor.deposit == 0) {\r\n      investorsNumber++;\r\n      investor.isParticipant = true;\r\n      emit OnNewInvestor(investorAddr, now);\r\n    }\r\n\r\n    investor.deposit += depositAmount;\r\n    investor.paymentTime = now;\r\n\r\n    investmentsNumber++;\r\n    emit OnInvesment(investorAddr, depositAmount, now);\r\n  }\r\n\r\n  function getDividends(address investorAddr) internal view returns(uint dividends, uint boostBonus) {\r\n    Investor storage investor = investors[investorAddr];\r\n    if (investor.deposit == 0) {\r\n      return (0, 0);\r\n    }\r\n\r\n    if (investor.boostStartup > 0) {\r\n      uint boostDays = now.sub(investor.boostStartup).div(24 hours);\r\n      boostBonus = boostDays * investor.deposit * 5 / 100000; // 0.005%\r\n    }\r\n\r\n    uint depositDays = now.sub(investor.paymentTime).div(24 hours);\r\n    dividends = depositDays * investor.deposit * 1 / 100; // 1%\r\n\r\n    uint depositAmountBonus;\r\n    if (10 ether <= investor.deposit && investor.deposit <= 50 ether) {\r\n      depositAmountBonus = depositDays * investor.deposit * 5 / 10000; // 0.05%\r\n    } else if (50 ether < investor.deposit) {\r\n      depositAmountBonus = depositDays * investor.deposit * 11 / 10000; // 0.11%\r\n    }\r\n\r\n    dividends += depositAmountBonus;\r\n  }\r\n\r\n  function isNotContract(address addr) internal view returns (bool) {\r\n    uint length;\r\n    assembly { length := extcodesize(addr) }\r\n    return length == 0;\r\n  }\r\n\r\n  function bytes2address(bytes memory source) internal pure returns(address addr) {\r\n    assembly { addr := mload(add(source, 0x14)) }\r\n    return addr;\r\n  }\r\n\r\n  function deleteInvestor(address investorAddr) private {\r\n    delete investors[investorAddr].deposit;\r\n    delete investors[investorAddr].paymentTime;\r\n    delete investors[investorAddr].withdrawal;\r\n    delete investors[investorAddr].boostStartup;\r\n    emit OnDeleteInvestor(investorAddr, now);\r\n    investorsNumber--;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"investorAddr\",\"type\":\"address\"}],\"name\":\"investorDividends\",\"outputs\":[{\"name\":\"dividends\",\"type\":\"uint256\"},{\"name\":\"boostBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin1Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin2Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin3Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdminsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"paymentTime\",\"type\":\"uint256\"},{\"name\":\"withdrawal\",\"type\":\"uint256\"},{\"name\":\"boostStartup\",\"type\":\"uint256\"},{\"name\":\"isParticipant\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"earlyWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"boost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddr\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrarBonus\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrerBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnRefLink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnNewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnInvesment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnBoostChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnEarlyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnDeleteInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnBoostBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnNotEnoughBalance\",\"type\":\"event\"}]","ContractName":"EthRV2","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7254bb7fa71f75ec22b22030d7ce97a7151dbe731991a4e4a4f08cd380a659af"}]}