{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ninterface P3D {\r\n  function() payable external;\r\n  function buy(address _playerAddress) payable external returns(uint256);\r\n  function sell(uint256 _amountOfTokens) external;\r\n  function reinvest() external;\r\n  function withdraw() external;\r\n  function exit() external;\r\n  function dividendsOf(address _playerAddress) external view returns(uint256);\r\n  function balanceOf(address _playerAddress) external view returns(uint256);\r\n  function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\r\n  function stakingRequirement() external view returns(uint256);\r\n  function myDividends(bool _includeReferralBonus) external view returns(uint256);\r\n}\r\n\r\ncontract Crop {\r\n  address public owner;\r\n  bool public disabled;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function() public payable {}\r\n  \r\n  /**\r\n   * @dev Turn reinvest on / off\r\n   * @param _disabled bool to determine state of reinvest.\r\n   */\r\n  function disable(bool _disabled) external onlyOwner() {\r\n    // toggle disabled\r\n    disabled = _disabled;\r\n  }\r\n\r\n  /**\r\n   * @dev Enables anyone with a masternode to earn referral fees on P3D reinvestments.\r\n   */\r\n  function reinvest() external {\r\n    // reinvest must be enabled\r\n    require(disabled == false);\r\n    \r\n    // setup p3d\r\n    P3D p3d = P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\r\n\r\n    // withdraw dividends\r\n    p3d.withdraw();\r\n\r\n    // reinvest with a referral fee for sender\r\n    p3d.buy.value(address(this).balance)(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Buy P3D tokens\r\n   * @param _playerAddress referral address.\r\n   */\r\n  function buy(address _playerAddress) external payable onlyOwner() {\r\n    P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).buy.value(msg.value)(_playerAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Sell P3D tokens and send balance to owner\r\n   * @param _amountOfTokens amount of tokens to sell.\r\n   */\r\n  function sell(uint256 _amountOfTokens) external onlyOwner() {\r\n    // sell tokens\r\n    P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).sell(_amountOfTokens);\r\n\r\n    // transfer to owner\r\n    owner.transfer(address(this).balance);\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw P3D dividends and send balance to owner\r\n   */\r\n  function withdraw() external onlyOwner() {\r\n    // withdraw dividends\r\n    P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).withdraw();\r\n\r\n    // transfer to owner\r\n    owner.transfer(address(this).balance);\r\n  }\r\n\r\n  /**\r\n   * @dev Sell P3D tokens, withdraw dividends, and send balance to owner\r\n   */\r\n  function exit() external onlyOwner() {\r\n    // sell all tokens and withdraw\r\n    P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).exit();\r\n\r\n    // transfer to owner\r\n    owner.transfer(address(this).balance);\r\n  }\r\n  \r\n  /**\r\n   * @dev Transfer P3D tokens\r\n   * @param _toAddress address to send tokens to.\r\n   * @param _amountOfTokens amount of tokens to send.\r\n   */\r\n  function transfer(address _toAddress, uint256 _amountOfTokens) external onlyOwner() returns (bool) {\r\n    return P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).transfer(_toAddress, _amountOfTokens);\r\n  }\r\n\r\n  /**\r\n   * @dev Get dividends for this contract\r\n   * @param _includeReferralBonus for including referrals in dividends.\r\n   */\r\n  function dividends(bool _includeReferralBonus) external view returns (uint256) {\r\n    return P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).myDividends(_includeReferralBonus);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disabled\",\"type\":\"bool\"}],\"name\":\"disable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"disabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crop","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://63e6e788db29602034113aca4a747dfb9a5c05b5ad5c6f5de4fdd6396466d227"}]}