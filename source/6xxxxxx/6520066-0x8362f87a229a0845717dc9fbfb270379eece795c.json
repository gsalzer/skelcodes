{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.18;\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() public constant returns (uint supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public constant returns (uint balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint _value) public returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint _value)  public returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint _value) public returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract RegularToken is Token {\r\n    mapping (address => uint256) balances;\r\n    //gaming locked balance\r\n    mapping (address => uint256) lockedBalances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    uint public totalSupply;\r\n    /// @dev only transfer unlockedbalance\r\n    function transfer(address _to, uint _value)  public returns (bool) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        if (balances[msg.sender] >= _value  && balances[_to] + _value >= balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner)  public constant returns (uint) {\r\n        return balances[_owner] + lockedBalances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)  public constant returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract A5DToken is RegularToken {\r\n    uint256 private keyprice = 30; // 0.03 ether\r\n    uint256 public totalSupply = 1000000000*10**18;\r\n    uint8 constant public decimals = 18;\r\n    string constant public name = \"5D Bid Coins\";\r\n    string constant public symbol = \"5D\";\r\n    mapping (address => uint) allowedContract;\r\n    address public owner;\r\n    address public communityWallet;\r\n    \r\n    function A5DToken()  public {\r\n        communityWallet = 0x03706722CA31e7d4Ba29F5cB5887E27710Fa013C;\r\n        owner = msg.sender;\r\n        balances[msg.sender] = totalSupply;\r\n        Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    //events\r\n    event SellLockedBalance(address indexed _owner, uint256 _amount);\r\n    event FreeLockedBalance(address indexed _owner, address _to,uint256 _amount);\r\n    event UnlockBalance(address indexed _owner, uint256 _amount);\r\n    event SpendLockedBalance(address indexed _owner,address indexed spender, uint256 _amount);\r\n\r\n    uint constant MAX_UINT = 2**256 - 1;\r\n    \r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyAllowedContract {\r\n        require (allowedContract[msg.sender] == 1 || msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    function transferCommunityWallet(address newCommunityWallet)\r\n        public  \r\n        {\r\n        require (msg.sender == communityWallet);\r\n        communityWallet = newCommunityWallet;\r\n    }\r\n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited amount.\r\n    /// @param _from Address to transfer from.\r\n    /// @param _to Address to transfer to.\r\n    /// @param _value Amount to transfer.\r\n    /// @return Success of transfer.\r\n    \r\n    \r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint allowance = allowed[_from][msg.sender];\r\n        if (balances[_from] >= _value\r\n            && allowance >= _value\r\n            && balances[_to] + _value >= balances[_to]\r\n        ) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            if (allowance < MAX_UINT) {\r\n                allowed[_from][msg.sender] -= _value;\r\n            }\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function unlockBalance(address _owner, uint256 _value)\r\n        public\r\n        onlyOwner()\r\n        returns (bool)\r\n        {\r\n        uint256 shouldUnlockedBalance = 0;\r\n        shouldUnlockedBalance = _value;\r\n        if(shouldUnlockedBalance > lockedBalances[_owner]){\r\n            shouldUnlockedBalance = lockedBalances[_owner];\r\n        }\r\n        balances[_owner] += shouldUnlockedBalance;\r\n        lockedBalances[_owner] -= shouldUnlockedBalance;\r\n        UnlockBalance(_owner, shouldUnlockedBalance);\r\n        return true;\r\n    }\r\n    \r\n    function withdrawAmount()\r\n        public  \r\n        {\r\n        require (msg.sender == communityWallet);\r\n        communityWallet.transfer(this.balance);\r\n    }\r\n    \r\n    function updateKeyPrice(uint256 updatePrice)\r\n        onlyOwner()\r\n        public  {\r\n        keyprice = updatePrice;\r\n    }\r\n    \r\n    function lockedBalanceOf(address _owner)\r\n        constant\r\n        public\r\n        returns (uint256 balance) {\r\n        return lockedBalances[_owner];\r\n    }\r\n    function UnlockedBalanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    /// @dev for gaming only\r\n    function freeGameLockedToken(address _to, uint256 _value)\r\n    onlyOwner()\r\n    public\r\n    {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        if (balances[msg.sender] >= _value  && lockedBalances[_to] + _value >= lockedBalances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            lockedBalances[_to] += _value;\r\n            FreeLockedBalance(msg.sender, _to, _value);\r\n\r\n        }\r\n    }\r\n    \r\n    function getConsideration(uint256 keyquantity) view public returns(uint256){\r\n        uint256 consideration = keyprice * keyquantity /1000;\r\n        return consideration;\r\n    }\r\n    \r\n    function sellGameLockedToken(uint256 keyquantity)\r\n    public\r\n    payable\r\n    returns (bool) \r\n    {\r\n        uint256 amount = msg.value;\r\n        uint256 consideration = keyprice * keyquantity /1000;\r\n        require(amount >= consideration);\r\n        uint256 _value = keyquantity;\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        if (balances[owner] >= _value  && lockedBalances[msg.sender] + _value >= lockedBalances[msg.sender]) {\r\n            balances[owner] -= _value;\r\n            lockedBalances[msg.sender] += _value;\r\n            SellLockedBalance(msg.sender, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    \r\n    function approveContractReceiveGameLockedToken(address _from)\r\n    onlyOwner()\r\n    public\r\n    returns (bool)\r\n    {\r\n        allowedContract[_from] = 1;\r\n        return true;\r\n    }\r\n    \r\n    function spendGameLockedToken(address _from, uint256 _value)\r\n    public\r\n    onlyAllowedContract()\r\n    returns (bool) {\r\n        \r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        if (lockedBalances[_from] >= _value  && balances[owner] + _value >= balances[owner]) {\r\n            lockedBalances[_from] -= _value;\r\n            balances[owner] += _value;\r\n            SpendLockedBalance(owner, _from, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    \r\n    function jackPotGameLockedToken(address _to, uint256 _value)\r\n    onlyAllowedContract()\r\n    public\r\n    {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        if (balances[owner] >= _value  && lockedBalances[_to] + _value >= lockedBalances[_to]) {\r\n            balances[owner] -= _value;\r\n            lockedBalances[_to] += _value;\r\n            }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unlockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"jackPotGameLockedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"updatePrice\",\"type\":\"uint256\"}],\"name\":\"updateKeyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"keyquantity\",\"type\":\"uint256\"}],\"name\":\"sellGameLockedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCommunityWallet\",\"type\":\"address\"}],\"name\":\"transferCommunityWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"UnlockedBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"spendGameLockedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"approveContractReceiveGameLockedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"keyquantity\",\"type\":\"uint256\"}],\"name\":\"getConsideration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeGameLockedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SellLockedBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FreeLockedBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UnlockBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SpendLockedBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"A5DToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3772662b2a4571835db370da509202b219f0095567ca115f9ae47bfa74135d45"}]}