{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/*\r\n *             ╔═╗┌─┐┌─┐┬┌─┐┬┌─┐┬   ┌─────────────────────────┐ ╦ ╦┌─┐┌┐ ╔═╗┬┌┬┐┌─┐ \r\n *             ║ ║├┤ ├┤ ││  │├─┤│   │          MSCE.vip       │ ║║║├┤ ├┴┐╚═╗│ │ ├┤  \r\n *             ╚═╝└  └  ┴└─┘┴┴ ┴┴─┘ └─┬─────────────────────┬─┘ ╚╩╝└─┘└─┘╚═╝┴ ┴ └─┘ \r\n *   ┌────────────────────────────────┘                     └──────────────────────────────┐\r\n *   │    ┌─────────────────────────────────────────────────────────────────────────────┐  │\r\n *   └────┤ Dev:John ├──────────────────────┤ Boss:Jack ├──────────────────┤ Sup:Kilmas ├──┘\r\n *        └─────────────────────────────────────────────────────────────────────────────┘\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\ncontract MSCE is Ownable, StandardToken, BurnableToken{\r\n    using SafeMath for uint256;\r\n\r\n    uint8 public constant TOKEN_DECIMALS = 18;\r\n\r\n    string public name = \"Mobile Ecosystem\"; \r\n    string public symbol = \"MSCE\";\r\n    uint8 public decimals = TOKEN_DECIMALS;\r\n\r\n\r\n    uint256 public totalSupply = 500000000 *(10**uint256(TOKEN_DECIMALS)); \r\n    uint256 public soldSupply = 0; \r\n    uint256 public sellSupply = 0; \r\n    uint256 public buySupply = 0; \r\n    bool public stopSell = true;\r\n    bool public stopBuy = false;\r\n\r\n    uint256 public crowdsaleStartTime = block.timestamp;\r\n    uint256 public crowdsaleEndTime = 1526831999;\r\n\r\n    uint256 public crowdsaleTotal = 2000*40000*(10**18);\r\n\r\n\r\n    uint256 public buyExchangeRate = 40000;   \r\n    uint256 public sellExchangeRate = 100000;  \r\n    address public ethFundDeposit;  \r\n\r\n\r\n    bool public allowTransfers = true; \r\n\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    bool public enableInternalLock = true;\r\n    uint256 unitCount = 100; \r\n    uint256 unitTime = 1 days;\r\n    uint256 lockTime = unitCount * unitTime;\r\n\r\n    mapping (address => bool) public internalLockAccount;\r\n    mapping (address => uint256) public releaseLockAccount;\r\n    mapping (address => uint256) public lockAmount;\r\n    mapping (address => uint256) public lockStartTime;\r\n    mapping (address => uint256) public lockReleaseTime;\r\n\r\n    event LockAmount(address _from, address _to, uint256 amount, uint256 releaseTime);\r\n    event FrozenFunds(address target, bool frozen);\r\n    event IncreaseSoldSaleSupply(uint256 _value);\r\n    event DecreaseSoldSaleSupply(uint256 _value);\r\n\r\n    function MSCE() public {\r\n        balances[msg.sender] = totalSupply;\r\n        ethFundDeposit = msg.sender;                      \r\n        allowTransfers = true;\r\n    }\r\n\r\n    function _isUserInternalLock() internal view returns (bool) {\r\n\r\n        return getAccountLockState(msg.sender);\r\n\r\n    }\r\n\r\n    function increaseSoldSaleSupply (uint256 _value) onlyOwner public {\r\n        require (_value + soldSupply < totalSupply);\r\n        soldSupply = soldSupply.add(_value);\r\n        emit IncreaseSoldSaleSupply(_value);\r\n    }\r\n\r\n    function decreaseSoldSaleSupply (uint256 _value) onlyOwner public {\r\n        require (soldSupply - _value > 0);\r\n        soldSupply = soldSupply.sub(_value);\r\n        emit DecreaseSoldSaleSupply(_value);\r\n    }\r\n\r\n\r\n    function setEthFundDeposit(address _ethFundDeposit) onlyOwner public {\r\n        require(_ethFundDeposit != address(0));\r\n        ethFundDeposit = _ethFundDeposit;\r\n    }\r\n\r\n    function transferETH() onlyOwner public {\r\n        require(ethFundDeposit != address(0));\r\n        require(this.balance != 0);\r\n        require(ethFundDeposit.send(this.balance));\r\n    }\r\n\r\n\r\n    function setExchangeRate(uint256 _sellExchangeRate, uint256 _buyExchangeRate) onlyOwner public {\r\n        sellExchangeRate = _sellExchangeRate;\r\n        buyExchangeRate = _buyExchangeRate;\r\n    }\r\n\r\n    function setExchangeStatus(bool _stopSell, bool _stopBuy) onlyOwner public {\r\n        stopSell = _stopSell;\r\n        stopBuy = _stopBuy;\r\n    }\r\n\r\n    function setAllowTransfers(bool _allowTransfers) onlyOwner public {\r\n        allowTransfers = _allowTransfers;\r\n    }\r\n\r\n    function setEnableInternalLock(bool _isEnable) onlyOwner public {\r\n        enableInternalLock = _isEnable;\r\n    }\r\n\r\n\r\n\r\n    function getAccountUnlockTime(address _target) public view returns(uint256) {\r\n\r\n        return releaseLockAccount[_target];\r\n\r\n    }\r\n    function getAccountLockState(address _target) public view returns(bool) {\r\n        if(enableInternalLock && internalLockAccount[_target]){\r\n            if((releaseLockAccount[_target] > 0)&&(releaseLockAccount[_target]<block.timestamp)){       \r\n                return false;\r\n            }          \r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    function setUnitTime(uint256 unit) external onlyOwner{\r\n        unitTime = unit;\r\n    }\r\n    \r\n    function isOwner() internal view returns(bool success) {\r\n        if (msg.sender == owner) return true;\r\n        return false;\r\n    }\r\n    /***************************************************/\r\n    /*              BASE Functions                     */\r\n    /***************************************************/\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        if (!isOwner()) {\r\n            require (allowTransfers);\r\n            require(!frozenAccount[_from]);                                         \r\n            require(!frozenAccount[_to]);                                        \r\n            require(!_isUserInternalLock());\r\n        }\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (!isOwner()) {\r\n            require (allowTransfers);\r\n            require(!frozenAccount[msg.sender]);                                       \r\n            require(!frozenAccount[_to]);                                             \r\n            require(!_isUserInternalLock());\r\n            require(_value <= balances[msg.sender] - lockAmount[msg.sender] + releasedAmount(msg.sender));\r\n        }\r\n        if(_value >= releasedAmount(msg.sender)){\r\n            lockAmount[msg.sender] = lockAmount[msg.sender].sub(releasedAmount(msg.sender));\r\n        }else{\r\n            lockAmount[msg.sender] = lockAmount[msg.sender].sub(_value);\r\n        }\r\n        \r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        if (!isOwner()) {\r\n            require (allowTransfers);\r\n            require(!frozenAccount[msg.sender]);                                         \r\n            require(!frozenAccount[_spender]);                                        \r\n            require(!_isUserInternalLock());\r\n            require(_value <= balances[msg.sender] - lockAmount[msg.sender] + releasedAmount(msg.sender));\r\n        }\r\n        if(_value >= releasedAmount(msg.sender)){\r\n            lockAmount[msg.sender] = lockAmount[msg.sender].sub(releasedAmount(msg.sender));\r\n        }else{\r\n            lockAmount[msg.sender] = lockAmount[msg.sender].sub(_value);\r\n        }\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function transferFromAdmin(address _from, address _to, uint256 _value) onlyOwner public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function () internal payable{\r\n\r\n        uint256 currentTime = block.timestamp;\r\n        require((currentTime>crowdsaleStartTime)&&(currentTime<crowdsaleEndTime));\r\n        require(crowdsaleTotal>0);\r\n\r\n        require(buy());\r\n\r\n        crowdsaleTotal = crowdsaleTotal.sub(msg.value.mul(buyExchangeRate));\r\n\r\n    }\r\n\r\n    function buy() payable public returns (bool){\r\n\r\n\r\n        uint256 amount = msg.value.mul(buyExchangeRate);\r\n\r\n        require(!stopBuy);\r\n        require(amount <= balances[owner]);\r\n\r\n        balances[owner] = balances[owner].sub(amount);\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n\r\n        soldSupply = soldSupply.add(amount);\r\n        buySupply = buySupply.add(amount);\r\n\r\n        Transfer(owner, msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function sell(uint256 amount) public {\r\n        uint256 ethAmount = amount.div(sellExchangeRate);\r\n        require(!stopSell);\r\n        require(this.balance >= ethAmount);      \r\n        require(ethAmount >= 1);      \r\n\r\n        require(balances[msg.sender] >= amount);                 \r\n        require(balances[owner] + amount > balances[owner]);       \r\n        require(!frozenAccount[msg.sender]);                       \r\n        require(!_isUserInternalLock());                                          \r\n\r\n        balances[owner] = balances[owner].add(amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n\r\n        soldSupply = soldSupply.sub(amount);\r\n        sellSupply = sellSupply.add(amount);\r\n\r\n        Transfer(msg.sender, owner, amount);\r\n\r\n        msg.sender.transfer(ethAmount); \r\n    }\r\n\r\n    function setCrowdsaleStartTime(uint256 _crowdsaleStartTime) onlyOwner public {\r\n        crowdsaleStartTime = _crowdsaleStartTime;\r\n    }\r\n\r\n    function setCrowdsaleEndTime(uint256 _crowdsaleEndTime) onlyOwner public {\r\n        crowdsaleEndTime = _crowdsaleEndTime;\r\n    }\r\n   \r\n\r\n    function setCrowdsaleTotal(uint256 _crowdsaleTotal) onlyOwner public {\r\n        crowdsaleTotal = _crowdsaleTotal;\r\n    }\r\n\r\n    /***************************************************/\r\n    /*              Lock Functions                     */\r\n    /***************************************************/\r\n    function transferLockAmount(address _to, uint256 _value) public{\r\n        // require(_value >= _value, \"Not enough MSCE\");\r\n        require(balances[msg.sender] >= _value, \"Not enough MSCE\");\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        lockAmount[_to] = lockAmount[_to].add(_value);\r\n        _resetReleaseTime(_to);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        emit LockAmount(msg.sender, _to, _value, uint256(now + lockTime));\r\n    }\r\n\r\n    function _resetReleaseTime(address _target) internal {\r\n        lockStartTime[_target] = uint256(now);\r\n        lockReleaseTime[_target] = uint256(now + lockTime);\r\n    }\r\n\r\n    function releasedAmount(address _target) public view returns (uint256) {\r\n        if(now >= lockReleaseTime[_target]){\r\n            return lockAmount[_target];\r\n        }\r\n        else{\r\n            return (now - lockStartTime[_target]).div(unitTime).mul(lockAmount[_target]).div(100);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract MSCEVote is MSCE {\r\n    //Vote Setting\r\n    uint256 votingRight = 10000;\r\n    uint256 dealTime = 3 days;\r\n    \r\n     \r\n    struct Vote{\r\n        bool isActivated;\r\n        bytes32 name;\r\n        address target;\r\n        address spender;\r\n        uint256 targetAmount;\r\n        bool freeze;\r\n        string newName;\r\n        string newSymbol;\r\n        uint256 agreeSupply;\r\n        uint256 disagreeSupply;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 releaseTime;\r\n    }\r\n \r\n    Vote[] public votes;\r\n\r\n    mapping (uint256 => address) public voteToOwner;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    event NewVote(address _initiator, bytes32 name, address target, uint256 targetAmount);\r\n\r\n    modifier onlySuperNode() {\r\n        require(balances[msg.sender] >= 5000000*(10**18), \"Just for SuperNodes\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyVotingRight() {\r\n        require(balances[msg.sender] >= votingRight*(10**18), \"You haven't voting right.\");\r\n        _;\r\n    }    \r\n\r\n    function createVote(bytes32 _name, address _target, address _spender,uint256 _targetAmount, bool _freeze, string _newName, string _newSymbol, uint256 _releaseTime) onlySuperNode public {\r\n        uint256 id = votes.push(Vote(true, _name,  _target, _spender,_targetAmount, _freeze, _newName, _newSymbol, 0, 0, uint256(now), uint256(now + dealTime), _releaseTime)) - 1;\r\n        voteToOwner[id] = msg.sender;\r\n        emit NewVote(msg.sender, _name, _target, _targetAmount);\r\n    }\r\n\r\n    function mintToken(address target, uint256 mintedAmount) onlySuperNode public {\r\n        createVote(\"MINT\", target, target, mintedAmount, false, \"\", \"\", 0);\r\n    }\r\n\r\n    function destroyToken(address target, uint256 amount) onlySuperNode public {\r\n        createVote(\"DESTROY\", target, target, amount, false, \"\", \"\", 0);\r\n    }\r\n\r\n    function freezeAccount(address _target, bool freeze) onlySuperNode public {\r\n        createVote(\"FREEZE\", _target, _target, 0, freeze, \"\", \"\", 0);\r\n    }\r\n\r\n    function lockInternalAccount(address _target, bool _lock, uint256 _releaseTime) onlySuperNode public {\r\n        require(_target != address(0));\r\n        createVote(\"LOCK\", _target, _target, 0, _lock, \"\", \"\", _releaseTime);\r\n    }\r\n\r\n    function setName(string _name) onlySuperNode public {\r\n        createVote(\"CHANGENAME\", msg.sender, msg.sender, 0, false, _name, \"\", 0);\r\n        \r\n    }\r\n\r\n    function setSymbol(string _symbol) onlySuperNode public {\r\n        createVote(\"CHANGESYMBOL\", msg.sender, msg.sender, 0, false, \"\", _symbol, 0);\r\n    }\r\n\r\n    function transferFromAdmin(address _from, address _to, uint256 _value) onlySuperNode public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        createVote(\"TRANS\",_from, _to, _value, false, \"\", \"\", 0);\r\n        return true;\r\n    }\r\n\r\n    /***************************************************/\r\n    /*              Vote Functions                     */\r\n    /***************************************************/\r\n    function getVote(uint _id) \r\n        public \r\n        view \r\n        returns (bool, bytes32, address, address, uint256, bool, string, string, uint256, uint256, uint256, uint256){\r\n        Vote storage _vote = votes[_id];\r\n        return(\r\n            _vote.isActivated,\r\n            _vote.name,\r\n            _vote.target,\r\n            _vote.spender,\r\n            _vote.targetAmount,\r\n            _vote.freeze,\r\n            _vote.newName,\r\n            _vote.newSymbol,\r\n            _vote.agreeSupply,\r\n            _vote.disagreeSupply,\r\n            _vote.startTime,\r\n            _vote.endTime\r\n        );\r\n    }\r\n\r\n    function voteXId(uint256 _id, bool _agree) onlyVotingRight public{\r\n        Vote storage vote = votes[_id];\r\n        uint256 rate = 100;\r\n        if(vote.name == \"FREEZE\")\r\n        {\r\n            rate = 30;\r\n        }else if(vote.name == \"DESTROY\")\r\n        {\r\n            rate = 51;\r\n        }\r\n        else{\r\n            rate = 80;\r\n        }\r\n        if(now > vote.endTime){\r\n            vote.isActivated = false;\r\n            votes[_id] = vote;\r\n        }\r\n        require(vote.isActivated == true, \"The vote ended\");\r\n        if(_agree == true){\r\n            vote.agreeSupply = vote.agreeSupply.add(balances[msg.sender]);\r\n        }\r\n        else{\r\n            vote.disagreeSupply = vote.disagreeSupply.add(balances[msg.sender]);\r\n        }\r\n\r\n        if (vote.agreeSupply >= soldSupply * (rate/100)){\r\n            executeVote(_id);\r\n        }else if (vote.disagreeSupply >= soldSupply * ((100-rate)/100)) {\r\n            vote.isActivated = false;\r\n            votes[_id] = vote;\r\n        }\r\n\r\n    }\r\n\r\n    function executeVote(uint256 _id)private{\r\n        Vote storage vote = votes[_id];\r\n        vote.isActivated = false;\r\n\r\n        if(vote.name == \"MINT\"){\r\n            balances[vote.target] = balances[vote.target].add(vote.targetAmount);\r\n            totalSupply = totalSupply.add(vote.targetAmount);\r\n            emit Transfer(0, this, vote.targetAmount);\r\n            emit Transfer(this, vote.target, vote.targetAmount);\r\n        }else if(vote.name == \"DESTROY\"){\r\n            balances[vote.target] = balances[vote.target].sub(vote.targetAmount);\r\n            totalSupply = totalSupply.sub(vote.targetAmount);\r\n            emit Transfer(vote.target, this, vote.targetAmount);\r\n            emit Transfer(this, 0, vote.targetAmount);\r\n        }else if(vote.name == \"CHANGENAME\"){\r\n            name = vote.newName;\r\n        }else if(vote.name == \"CHANGESYMBOL\"){\r\n            symbol = vote.newSymbol;\r\n        }else if(vote.name == \"FREEZE\"){\r\n            frozenAccount[vote.target] = vote.freeze;\r\n            emit FrozenFunds(vote.target, vote.freeze);\r\n        }else if(vote.name == \"LOCK\"){\r\n            internalLockAccount[vote.target] = vote.freeze;\r\n            releaseLockAccount[vote.target] = vote.endTime;\r\n        }\r\n        else if(vote.name == \"TRANS\"){\r\n            balances[vote.target] = balances[vote.target].sub(vote.targetAmount);\r\n            balances[vote.spender] = balances[vote.spender].add(vote.targetAmount);\r\n            emit Transfer(vote.target, vote.spender, vote.targetAmount);\r\n        }\r\n        votes[_id] = vote;\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleEndTime\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleStartTime\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_targetAmount\",\"type\":\"uint256\"},{\"name\":\"_freeze\",\"type\":\"bool\"},{\"name\":\"_newName\",\"type\":\"string\"},{\"name\":\"_newSymbol\",\"type\":\"string\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"createVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"releasedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"setUnitTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseSoldSaleSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enableInternalLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_lock\",\"type\":\"bool\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"lockInternalAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"isActivated\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"name\":\"freeze\",\"type\":\"bool\"},{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newSymbol\",\"type\":\"string\"},{\"name\":\"agreeSupply\",\"type\":\"uint256\"},{\"name\":\"disagreeSupply\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_agree\",\"type\":\"bool\"}],\"name\":\"voteXId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stopSell\",\"type\":\"bool\"},{\"name\":\"_stopBuy\",\"type\":\"bool\"}],\"name\":\"setExchangeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseSoldSaleSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferLockAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isEnable\",\"type\":\"bool\"}],\"name\":\"setEnableInternalLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleTotal\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"internalLockAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getAccountUnlockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releaseLockAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getAccountLockState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethFundDeposit\",\"type\":\"address\"}],\"name\":\"setEthFundDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowTransfers\",\"type\":\"bool\"}],\"name\":\"setAllowTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellExchangeRate\",\"type\":\"uint256\"},{\"name\":\"_buyExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"name\":\"NewVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"LockAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"IncreaseSoldSaleSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"DecreaseSoldSaleSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MSCEVote","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://edc3cbd18ce10c3869fe4a2189fab74f92094d1e5d34620a9971c41a81024875"}]}