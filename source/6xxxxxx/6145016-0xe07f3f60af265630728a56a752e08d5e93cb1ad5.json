{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface TokenInterface {\r\n     function totalSupply() external constant returns (uint);\r\n     function balanceOf(address tokenOwner) external constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) external returns (bool success);\r\n     function approve(address spender, uint tokens) external returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n     function burn(uint256 _value) external; \r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n     event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\n contract KRCICOContract is Ownable{\r\n  using SafeMath for uint256;\r\n \r\n  // The token being sold\r\n  TokenInterface public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public ratePerWei; \r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  uint256 public TOKENS_SOLD;\r\n  \r\n  uint256 maxTokensToSale;\r\n  \r\n  uint256 bonusInPhase1;\r\n  uint256 bonusInPhase2;\r\n  uint256 bonusInPhase3;\r\n  \r\n  uint256 minimumContribution;\r\n  uint256 maximumContribution;\r\n  \r\n  bool isCrowdsalePaused = false;\r\n  \r\n  uint256 totalDurationInDays = 45 days;\r\n  \r\n  uint256 LongTermFoundationBudgetAccumulated;\r\n  uint256 LegalContingencyFundsAccumulated;\r\n  uint256 MarketingAndCommunityOutreachAccumulated;\r\n  uint256 CashReserveFundAccumulated;\r\n  uint256 OperationalExpensesAccumulated;\r\n  uint256 SoftwareProductDevelopmentAccumulated;\r\n  uint256 FoundersTeamAndAdvisorsAccumulated;\r\n  \r\n  uint256 LongTermFoundationBudgetPercentage;\r\n  uint256 LegalContingencyFundsPercentage;\r\n  uint256 MarketingAndCommunityOutreachPercentage;\r\n  uint256 CashReserveFundPercentage;\r\n  uint256 OperationalExpensesPercentage;\r\n  uint256 SoftwareProductDevelopmentPercentage;\r\n  uint256 FoundersTeamAndAdvisorsPercentage;\r\n  \r\n  //Whitelist \r\n  struct Whitelist {\r\n    \tstring Email;\r\n    }\r\n    \r\n    mapping (address => Whitelist) Whitelists;\r\n    \r\n    address[] public WhitelistsAccts;\r\n    \r\n    function setWhitelist(address _address, string _Email) public  {\r\n        var whitelist = Whitelists[_address];\r\n        whitelist.Email = _Email;\r\n\r\n    \tWhitelistsAccts.push(_address) -1;\r\n    }\r\n    \r\n    function getWhitelist() view public returns (address[]) {\r\n    \treturn WhitelistsAccts;\r\n    }\r\n    \r\n    function searchWhitelist(address _address) view public returns (string){\r\n        return (Whitelists[_address].Email);\r\n    }\r\n    \r\n    function countWhitelists() view public returns (uint) {\r\n        return WhitelistsAccts.length;\r\n    }\r\n  \r\n  \r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  constructor(uint256 _startTime, address _wallet, address _tokenAddress) public \r\n  {\r\n    require(_startTime >=now);\r\n    require(_wallet != 0x0);\r\n\r\n    startTime = _startTime;  \r\n    endTime = startTime + totalDurationInDays;\r\n    require(endTime >= startTime);\r\n   \r\n    owner = _wallet;\r\n    \r\n    maxTokensToSale = 157500000e18;\r\n    bonusInPhase1 = 20;\r\n    bonusInPhase2 = 15;\r\n    bonusInPhase3 = 10;\r\n    minimumContribution = 5e17;\r\n    maximumContribution = 150e18;\r\n    ratePerWei = 40e18;\r\n    token = TokenInterface(_tokenAddress);\r\n    \r\n    LongTermFoundationBudgetAccumulated = 0;\r\n    LegalContingencyFundsAccumulated = 0;\r\n    MarketingAndCommunityOutreachAccumulated = 0;\r\n    CashReserveFundAccumulated = 0;\r\n    OperationalExpensesAccumulated = 0;\r\n    SoftwareProductDevelopmentAccumulated = 0;\r\n    FoundersTeamAndAdvisorsAccumulated = 0;\r\n  \r\n    LongTermFoundationBudgetPercentage = 15;\r\n    LegalContingencyFundsPercentage = 10;\r\n    MarketingAndCommunityOutreachPercentage = 10;\r\n    CashReserveFundPercentage = 20;\r\n    OperationalExpensesPercentage = 10;\r\n    SoftwareProductDevelopmentPercentage = 15;\r\n    FoundersTeamAndAdvisorsPercentage = 20;\r\n  }\r\n  \r\n  \r\n   // fallback function can be used to buy tokens\r\n   function () public  payable {\r\n     var isexist = searchWhitelist(msg.sender);\r\n     //Check if address is exist \r\n     if(bytes(isexist).length > 0){\r\n        buyTokens(msg.sender);\r\n     }else{\r\n         revert();\r\n     }\r\n    }\r\n    \r\n    function calculateTokens(uint value) internal view returns (uint256 tokens) \r\n    {\r\n        uint256 timeElapsed = now - startTime;\r\n        uint256 timeElapsedInDays = timeElapsed.div(1 days);\r\n        uint256 bonus = 0;\r\n        //Phase 1 (15 days)\r\n        if (timeElapsedInDays <15)\r\n        {\r\n            tokens = value.mul(ratePerWei);\r\n            bonus = tokens.mul(bonusInPhase1); \r\n            bonus = bonus.div(100);\r\n            tokens = tokens.add(bonus);\r\n            require (TOKENS_SOLD.add(tokens) <= maxTokensToSale);\r\n        }\r\n        //Phase 2 (15 days)\r\n        else if (timeElapsedInDays >=15 && timeElapsedInDays <30)\r\n        {\r\n            tokens = value.mul(ratePerWei);\r\n            bonus = tokens.mul(bonusInPhase2); \r\n            bonus = bonus.div(100);\r\n            tokens = tokens.add(bonus);\r\n            require (TOKENS_SOLD.add(tokens) <= maxTokensToSale);\r\n        }\r\n        //Phase 3 (15 days)\r\n        else if (timeElapsedInDays >=30 && timeElapsedInDays <45)\r\n        {\r\n            tokens = value.mul(ratePerWei);\r\n            bonus = tokens.mul(bonusInPhase3); \r\n            bonus = bonus.div(100);\r\n            tokens = tokens.add(bonus);\r\n            require (TOKENS_SOLD.add(tokens) <= maxTokensToSale);\r\n        }\r\n        else \r\n        {\r\n            bonus = 0;\r\n        }\r\n    }\r\n\r\n  // low level token purchase function\r\n  \r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(isCrowdsalePaused == false);\r\n    require(validPurchase());\r\n\r\n    \r\n    require(TOKENS_SOLD<maxTokensToSale);\r\n   \r\n    uint256 weiAmount = msg.value.div(10**16);\r\n    \r\n    uint256 tokens = calculateTokens(weiAmount);\r\n    require(TOKENS_SOLD.add(tokens)<=maxTokensToSale);\r\n    // update state\r\n    weiRaised = weiRaised.add(msg.value);\r\n    \r\n    token.transfer(beneficiary,tokens);\r\n    emit TokenPurchase(owner, beneficiary, msg.value, tokens);\r\n    TOKENS_SOLD = TOKENS_SOLD.add(tokens);\r\n    distributeFunds();\r\n  }\r\n  \r\n  function distributeFunds() internal {\r\n      uint received = msg.value;\r\n      \r\n      LongTermFoundationBudgetAccumulated = LongTermFoundationBudgetAccumulated\r\n                                            .add(received.mul(LongTermFoundationBudgetPercentage)\r\n                                            .div(100));\r\n      \r\n      LegalContingencyFundsAccumulated = LegalContingencyFundsAccumulated\r\n                                         .add(received.mul(LegalContingencyFundsPercentage)\r\n                                         .div(100));\r\n      \r\n      MarketingAndCommunityOutreachAccumulated = MarketingAndCommunityOutreachAccumulated\r\n                                                 .add(received.mul(MarketingAndCommunityOutreachPercentage)\r\n                                                 .div(100));\r\n      \r\n      CashReserveFundAccumulated = CashReserveFundAccumulated\r\n                                   .add(received.mul(CashReserveFundPercentage)\r\n                                   .div(100));\r\n      \r\n      OperationalExpensesAccumulated = OperationalExpensesAccumulated\r\n                                       .add(received.mul(OperationalExpensesPercentage)\r\n                                       .div(100));\r\n      \r\n      SoftwareProductDevelopmentAccumulated = SoftwareProductDevelopmentAccumulated\r\n                                              .add(received.mul(SoftwareProductDevelopmentPercentage)\r\n                                              .div(100));\r\n      \r\n      FoundersTeamAndAdvisorsAccumulated = FoundersTeamAndAdvisorsAccumulated\r\n                                            .add(received.mul(FoundersTeamAndAdvisorsPercentage)\r\n                                            .div(100));\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    bool withinContributionLimit = msg.value >= minimumContribution && msg.value <= maximumContribution;\r\n    return withinPeriod && nonZeroPurchase && withinContributionLimit;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n  \r\n   /**\r\n    * function to change the end timestamp of the ico\r\n    * can only be called by owner wallet\r\n    **/\r\n    function changeEndDate(uint256 endTimeUnixTimestamp) public onlyOwner{\r\n        endTime = endTimeUnixTimestamp;\r\n    }\r\n    \r\n    /**\r\n    * function to change the start timestamp of the ico\r\n    * can only be called by owner wallet\r\n    **/\r\n    \r\n    function changeStartDate(uint256 startTimeUnixTimestamp) public onlyOwner{\r\n        startTime = startTimeUnixTimestamp;\r\n    }\r\n    \r\n     /**\r\n     * function to pause the crowdsale \r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function pauseCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = true;\r\n    }\r\n\r\n    /**\r\n     * function to resume the crowdsale if it is paused\r\n     * can only be called from owner wallet\r\n     **/ \r\n    function resumeCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = false;\r\n    }\r\n     \r\n     function takeTokensBack() public onlyOwner\r\n     {\r\n         uint remainingTokensInTheContract = token.balanceOf(address(this));\r\n         token.transfer(owner,remainingTokensInTheContract);\r\n     }\r\n     \r\n    /**\r\n     * function to change the minimum contribution\r\n     * can only be called from owner wallet\r\n     **/ \r\n    function changeMinimumContribution(uint256 minContribution) public onlyOwner {\r\n        minimumContribution = minContribution;\r\n    }\r\n    \r\n    /**\r\n     * function to change the maximum contribution\r\n     * can only be called from owner wallet\r\n     **/ \r\n    function changeMaximumContribution(uint256 maxContribution) public onlyOwner {\r\n        maximumContribution = maxContribution;\r\n    }\r\n    \r\n    /**\r\n     * function to withdraw LongTermFoundationBudget funds to the owner wallet\r\n     * can only be called from owner wallet\r\n     **/  \r\n    function withdrawLongTermFoundationBudget() public onlyOwner {\r\n        require(LongTermFoundationBudgetAccumulated > 0);\r\n        owner.transfer(LongTermFoundationBudgetAccumulated);\r\n        LongTermFoundationBudgetAccumulated = 0;\r\n    }\r\n    \r\n     /**\r\n     * function to withdraw LegalContingencyFunds funds to the owner wallet\r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function withdrawLegalContingencyFunds() public onlyOwner {\r\n        require(LegalContingencyFundsAccumulated > 0);\r\n        owner.transfer(LegalContingencyFundsAccumulated);\r\n        LegalContingencyFundsAccumulated = 0;\r\n    }\r\n    \r\n     /**\r\n     * function to withdraw MarketingAndCommunityOutreach funds to the owner wallet\r\n     * can only be called from owner wallet\r\n     **/\r\n    function withdrawMarketingAndCommunityOutreach() public onlyOwner {\r\n        require (MarketingAndCommunityOutreachAccumulated > 0);\r\n        owner.transfer(MarketingAndCommunityOutreachAccumulated);\r\n        MarketingAndCommunityOutreachAccumulated = 0;\r\n    }\r\n    \r\n     /**\r\n     * function to withdraw CashReserveFund funds to the owner wallet\r\n     * can only be called from owner wallet\r\n     **/\r\n    function withdrawCashReserveFund() public onlyOwner {\r\n        require(CashReserveFundAccumulated > 0);\r\n        owner.transfer(CashReserveFundAccumulated);\r\n        CashReserveFundAccumulated = 0;\r\n    }\r\n    \r\n     /**\r\n     * function to withdraw OperationalExpenses funds to the owner wallet\r\n     * can only be called from owner wallet\r\n     **/\r\n    function withdrawOperationalExpenses() public onlyOwner {\r\n        require(OperationalExpensesAccumulated > 0);\r\n        owner.transfer(OperationalExpensesAccumulated);\r\n        OperationalExpensesAccumulated = 0;\r\n    }\r\n    \r\n     /**\r\n     * function to withdraw SoftwareProductDevelopment funds to the owner wallet\r\n     * can only be called from owner wallet\r\n     **/\r\n    function withdrawSoftwareProductDevelopment() public onlyOwner {\r\n        require (SoftwareProductDevelopmentAccumulated > 0);\r\n        owner.transfer(SoftwareProductDevelopmentAccumulated);\r\n        SoftwareProductDevelopmentAccumulated = 0;\r\n    }\r\n    \r\n     /**\r\n     * function to withdraw FoundersTeamAndAdvisors funds to the owner wallet\r\n     * can only be called from owner wallet\r\n     **/\r\n    function withdrawFoundersTeamAndAdvisors() public onlyOwner {\r\n        require (FoundersTeamAndAdvisorsAccumulated > 0);\r\n        owner.transfer(FoundersTeamAndAdvisorsAccumulated);\r\n        FoundersTeamAndAdvisorsAccumulated = 0;\r\n    }\r\n    \r\n     /**\r\n     * function to withdraw all funds to the owner wallet\r\n     * can only be called from owner wallet\r\n     **/\r\n    function withdrawAllFunds() public onlyOwner {\r\n        require (address(this).balance > 0);\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"startTimeUnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeStartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawLongTermFoundationBudget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawLegalContingencyFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endTimeUnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeTokensBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WhitelistsAccts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMarketingAndCommunityOutreach\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawSoftwareProductDevelopment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawOperationalExpenses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minContribution\",\"type\":\"uint256\"}],\"name\":\"changeMinimumContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"searchWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawCashReserveFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countWhitelists\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxContribution\",\"type\":\"uint256\"}],\"name\":\"changeMaximumContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFoundersTeamAndAdvisors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_Email\",\"type\":\"string\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"KRCICOContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b736d00000000000000000000000000503d5c5f23456766639d0bdaa442a2b282f42d1e00000000000000000000000052ed883e23a22fb0ace4629f0dc5c6348580d1ce","Library":"","SwarmSource":"bzzr://4fa2c2eac440b3893e154097602ecc884d5c8236209f62cca8ec63d3f144eac3"}]}