{"status":"1","message":"OK","result":[{"SourceCode":"// Ethertote - Official Token Sale Contract\r\n// 28.07.18\r\n//\r\n// Any unsold tokens can be sent directly to the TokenBurn Contract\r\n// by anyone once the Token Sale is complete - \r\n// this is a PUBLIC function that anyone can call!!\r\n//\r\n// All Eth raised during the token sale is automatically sent to the \r\n// EthRaised smart contract for distribution\r\n\r\n\r\npragma solidity ^0.4.24;\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// SafeMath Library \r\n///////////////////////////////////////////////////////////////////////////////\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Imported Token Contract functions\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract EthertoteToken {\r\n    function thisContractAddress() public pure returns (address) {}\r\n    function balanceOf(address) public pure returns (uint256) {}\r\n    function transfer(address, uint) public {}\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Main Contract\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract TokenSale {\r\n  using SafeMath for uint256;\r\n  \r\n  EthertoteToken public token;\r\n\r\n  address public admin;\r\n  address public thisContractAddress;\r\n\r\n  // address of the TOTE token original smart contract\r\n  address public tokenContractAddress = 0x42be9831FFF77972c1D0E1eC0aA9bdb3CaA04D47;\r\n  \r\n  // address of TokenBurn contract to \"burn\" unsold tokens\r\n  // for further details, review the TokenBurn contract and verify code on Etherscan\r\n  address public tokenBurnAddress = 0xadCa18DC9489C5FE5BdDf1A8a8C2623B66029198;\r\n  \r\n  // address of EthRaised contract, that will be used to distribute funds \r\n  // raised by the token sale. Added as \"wallet address\"\r\n  address public ethRaisedAddress = 0x9F73D808807c71Af185FEA0c1cE205002c74123C;\r\n  \r\n  uint public preIcoPhaseCountdown;       // used for website tokensale\r\n  uint public icoPhaseCountdown;          // used for website tokensale\r\n  uint public postIcoPhaseCountdown;      // used for website tokensale\r\n  \r\n  // pause token sale in an emergency [true/false]\r\n  bool public tokenSaleIsPaused;\r\n  \r\n  // note the pause time to allow special function to extend closingTime\r\n  uint public tokenSalePausedTime;\r\n  \r\n  // note the resume time \r\n  uint public tokenSaleResumedTime;\r\n  \r\n  // The time (in seconds) that needs to be added on to the closing time \r\n  // in the event of an emergency pause of the token sale\r\n  uint public tokenSalePausedDuration;\r\n  \r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n  \r\n  // 1000 tokens per Eth - 9,000,000 tokens for sale\r\n  uint public maxEthRaised = 9000;\r\n  \r\n  // Maximum amount of Wei that can be raised\r\n  // e.g. 9,000,000 tokens for sale with 1000 tokens per 1 eth\r\n  // means maximum Wei raised would be maxEthRaised * 1000000000000000000\r\n  uint public maxWeiRaised = maxEthRaised.mul(1000000000000000000);\r\n\r\n  // starting time and closing time of Crowdsale\r\n  // scheduled start on Monday, August 27th 2018 at 5:00pm GMT+1\r\n  uint public openingTime = 1535385600;\r\n  uint public closingTime = openingTime.add(7 days);\r\n  \r\n  // used as a divider so that 1 eth will buy 1000 tokens\r\n  // set rate to 1,000,000,000,000,000\r\n  uint public rate = 1000000000000000;\r\n  \r\n  // minimum and maximum spend of eth per transaction\r\n  uint public minSpend = 100000000000000000;    // 0.1 Eth\r\n  uint public maxSpend = 100000000000000000000; // 100 Eth \r\n\r\n  \r\n  // MODIFIERS\r\n  modifier onlyAdmin { \r\n        require(msg.sender == admin\r\n        ); \r\n        _; \r\n  }\r\n  \r\n  // EVENTS\r\n  event Deployed(string, uint);\r\n  event SalePaused(string, uint);\r\n  event SaleResumed(string, uint);\r\n  event TokensBurned(string, uint);\r\n  \r\n // ---------------------------------------------------------------------------\r\n // Constructor function\r\n // _ethRaisedContract = Address where collected funds will be forwarded to\r\n // _tokenContractAddress = Address of the original token contract being sold\r\n // ---------------------------------------------------------------------------\r\n \r\n  constructor() public {\r\n    \r\n    admin = msg.sender;\r\n    thisContractAddress = address(this);\r\n\r\n    token = EthertoteToken(tokenContractAddress);\r\n    \r\n\r\n    require(ethRaisedAddress != address(0));\r\n    require(tokenContractAddress != address(0));\r\n    require(tokenBurnAddress != address(0));\r\n\r\n    preIcoPhaseCountdown = openingTime;\r\n    icoPhaseCountdown = closingTime;\r\n    \r\n    // after 14 days the \"post-tokensale\" header section of the homepage \r\n    // on the website will be removed based on this time\r\n    postIcoPhaseCountdown = closingTime.add(14 days);\r\n    \r\n    emit Deployed(\"Ethertote Token Sale contract deployed\", now);\r\n  }\r\n  \r\n  \r\n  \r\n  // check balance of this smart contract\r\n  function tokenSaleTokenBalance() public view returns(uint) {\r\n      return token.balanceOf(thisContractAddress);\r\n  }\r\n  \r\n  // check the token balance of any ethereum address  \r\n  function getAnyAddressTokenBalance(address _address) public view returns(uint) {\r\n      return token.balanceOf(_address);\r\n  }\r\n  \r\n  // confirm if The Token Sale has finished\r\n  function tokenSaleHasFinished() public view returns (bool) {\r\n    return now > closingTime;\r\n  }\r\n  \r\n  // this function will send any unsold tokens to the null TokenBurn contract address\r\n  // once the crowdsale is finished, anyone can publicly call this function!\r\n  function burnUnsoldTokens() public {\r\n      require(tokenSaleIsPaused == false);\r\n      require(tokenSaleHasFinished() == true);\r\n      token.transfer(tokenBurnAddress, tokenSaleTokenBalance());\r\n      emit TokensBurned(\"tokens sent to TokenBurn contract\", now);\r\n  }\r\n\r\n\r\n\r\n  // function to temporarily pause token sale if needed\r\n  function pauseTokenSale() onlyAdmin public {\r\n      // confirm the token sale hasn't already completed\r\n      require(tokenSaleHasFinished() == false);\r\n      \r\n      // confirm the token sale isn't already paused\r\n      require(tokenSaleIsPaused == false);\r\n      \r\n      // pause the sale and note the time of the pause\r\n      tokenSaleIsPaused = true;\r\n      tokenSalePausedTime = now;\r\n      emit SalePaused(\"token sale has been paused\", now);\r\n  }\r\n  \r\n    // function to resume token sale\r\n  function resumeTokenSale() onlyAdmin public {\r\n      \r\n      // confirm the token sale is currently paused\r\n      require(tokenSaleIsPaused == true);\r\n      \r\n      tokenSaleResumedTime = now;\r\n      \r\n      // now calculate the difference in time between the pause time\r\n      // and the resume time, to establish how long the sale was\r\n      // paused for. This time now needs to be added to the closingTime.\r\n      \r\n      // Note: if the token sale was paused whilst the sale was live and was\r\n      // paused before the sale ended, then the value of tokenSalePausedTime\r\n      // will always be less than the value of tokenSaleResumedTime\r\n      \r\n      tokenSalePausedDuration = tokenSaleResumedTime.sub(tokenSalePausedTime);\r\n      \r\n      // add the total pause time to the closing time.\r\n      \r\n      closingTime = closingTime.add(tokenSalePausedDuration);\r\n      \r\n      // extend post ICO countdown for the web-site\r\n      postIcoPhaseCountdown = closingTime.add(14 days);\r\n      // now resume the token sale\r\n      tokenSaleIsPaused = false;\r\n      emit SaleResumed(\"token sale has now resumed\", now);\r\n  }\r\n  \r\n\r\n// ----------------------------------------------------------------------------\r\n// Event for token purchase logging\r\n// purchaser = the contract address that paid for the tokens\r\n// beneficiary = the address who got the tokens\r\n// value = the amount (in Wei) paid for purchase\r\n// amount = the amount of tokens purchased\r\n// ----------------------------------------------------------------------------\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n\r\n\r\n// -----------------------------------------\r\n// Crowdsale external interface\r\n// -----------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// fallback function ***DO NOT OVERRIDE***\r\n// allows purchase of tokens directly from MEW and other wallets\r\n// will conform to require statements set out in buyTokens() function\r\n// ----------------------------------------------------------------------------\r\n   \r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// function for front-end token purchase on our website ***DO NOT OVERRIDE***\r\n// buyer = Address of the wallet performing the token purchase\r\n// ----------------------------------------------------------------------------\r\n  function buyTokens(address buyer) public payable {\r\n    \r\n    // check Crowdsale is open (can disable for testing)\r\n    require(openingTime <= block.timestamp);\r\n    require(block.timestamp < closingTime);\r\n    \r\n    // minimum purchase of 100 tokens (0.1 eth)\r\n    require(msg.value >= minSpend);\r\n    \r\n    // maximum purchase per transaction to allow broader\r\n    // token distribution during tokensale\r\n    require(msg.value <= maxSpend);\r\n    \r\n    // stop sales of tokens if token balance is 0\r\n    require(tokenSaleTokenBalance() > 0);\r\n    \r\n    // stop sales of tokens if Token sale is paused\r\n    require(tokenSaleIsPaused == false);\r\n    \r\n    // log the amount being sent\r\n    uint256 weiAmount = msg.value;\r\n    preValidatePurchase(buyer, weiAmount);\r\n\r\n    // calculate token amount to be sold\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n    \r\n    // check that the amount of eth being sent by the buyer \r\n    // does not exceed the equivalent number of tokens remaining\r\n    require(tokens <= tokenSaleTokenBalance());\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    processPurchase(buyer, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      buyer,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    updatePurchasingState(buyer, weiAmount);\r\n\r\n    forwardFunds();\r\n    postValidatePurchase(buyer, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// Validation of an incoming purchase\r\n// ----------------------------------------------------------------------------\r\n  function preValidatePurchase(\r\n    address buyer,\r\n    uint256 weiAmount\r\n  )\r\n    internal pure\r\n  {\r\n    require(buyer != address(0));\r\n    require(weiAmount != 0);\r\n  }\r\n\r\n// ----------------------------------------------------------------------------\r\n// Validation of an executed purchase\r\n// ----------------------------------------------------------------------------\r\n  function postValidatePurchase(\r\n    address,\r\n    uint256\r\n  )\r\n    internal pure\r\n  {\r\n    // optional override\r\n  }\r\n\r\n// ----------------------------------------------------------------------------\r\n// Source of tokens\r\n// ----------------------------------------------------------------------------\r\n  function deliverTokens(\r\n    address buyer,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    token.transfer(buyer, tokenAmount);\r\n  }\r\n\r\n// ----------------------------------------------------------------------------\r\n// The following function is executed when a purchase has been validated \r\n// and is ready to be executed\r\n// ----------------------------------------------------------------------------\r\n  function processPurchase(\r\n    address buyer,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    deliverTokens(buyer, tokenAmount);\r\n  }\r\n\r\n// ----------------------------------------------------------------------------\r\n// Override for extensions that require an internal state to check for \r\n// validity (current user contributions, etc.)\r\n// ----------------------------------------------------------------------------\r\n  function updatePurchasingState(\r\n    address,\r\n    uint256\r\n  )\r\n    internal pure\r\n  {\r\n    // optional override\r\n  }\r\n\r\n// ----------------------------------------------------------------------------\r\n// Override to extend the way in which ether is converted to tokens.\r\n// _weiAmount Value in wei to be converted into tokens\r\n// return Number of tokens that can be purchased with the specified _weiAmount\r\n// ----------------------------------------------------------------------------\r\n  function getTokenAmount(uint256 weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return weiAmount.div(rate);\r\n  }\r\n\r\n// ----------------------------------------------------------------------------\r\n// how ETH is stored/forwarded on purchases.\r\n// Sent to the EthRaised Contract\r\n// ----------------------------------------------------------------------------\r\n  function forwardFunds() internal {\r\n    ethRaisedAddress.transfer(msg.value);\r\n  }\r\n  \r\n\r\n// functions for tokensale information on the website \r\n\r\n    function maximumRaised() public view returns(uint) {\r\n        return maxWeiRaised;\r\n    }\r\n    \r\n    function amountRaised() public view returns(uint) {\r\n        return weiRaised;\r\n    }\r\n  \r\n    function timeComplete() public view returns(uint) {\r\n        return closingTime;\r\n    }\r\n    \r\n    // special function to delay the token sale if necessary\r\n    function delayOpeningTime(uint256 _openingTime) onlyAdmin public {  \r\n    openingTime = _openingTime;\r\n    closingTime = openingTime.add(7 days);\r\n    preIcoPhaseCountdown = openingTime;\r\n    icoPhaseCountdown = closingTime;\r\n    postIcoPhaseCountdown = closingTime.add(14 days);\r\n    }\r\n    \r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"timeComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleIsPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRaisedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBurnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSpend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseCountdown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSpend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSalePausedDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeTokenSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_openingTime\",\"type\":\"uint256\"}],\"name\":\"delayOpeningTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSalePausedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAnyAddressTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleResumedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoPhaseCountdown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"postIcoPhaseCountdown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleHasFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEthRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseTokenSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SaleResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://50c2c84e7dc7a3d5652a69710599f74b5f0dacc6ad981efc4e60e108da77ab54"}]}