{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @dev Library that helps prevent integer overflows and underflows,\r\n * inspired by https://github.com/OpenZeppelin/zeppelin-solidity\r\n */\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title HasOwner\r\n *\r\n * @dev Allows for exclusive access to certain functionality.\r\n */\r\ncontract HasOwner {\r\n    // Current owner.\r\n    address public owner;\r\n\r\n    // Conditionally the new owner.\r\n    address public newOwner;\r\n\r\n    /**\r\n     * @dev The constructor.\r\n     *\r\n     * @param _owner The address of the owner.\r\n     */\r\n    constructor (address _owner) internal {\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Access control modifier that allows only the current owner to call the function.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The event is fired when the current owner is changed.\r\n     *\r\n     * @param _oldOwner The address of the previous owner.\r\n     * @param _newOwner The address of the new owner.\r\n     */\r\n    event OwnershipTransfer(address indexed _oldOwner, address indexed _newOwner);\r\n\r\n    /**\r\n     * @dev Transfering the ownership is a two-step process, as we prepare\r\n     * for the transfer by setting `newOwner` and requiring `newOwner` to accept\r\n     * the transfer. This prevents accidental lock-out if something goes wrong\r\n     * when passing the `newOwner` address.\r\n     *\r\n     * @param _newOwner The address of the proposed new owner.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev The `newOwner` finishes the ownership transfer process by accepting the\r\n     * ownership.\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransfer(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev The standard ERC20 Token interface.\r\n */\r\ncontract ERC20TokenInterface {\r\n    uint256 public totalSupply;  /* shorthand for public function and a property */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n}\r\n\r\n/**\r\n * @title ERC20Token\r\n *\r\n * @dev Implements the operations declared in the `ERC20TokenInterface`.\r\n */\r\ncontract ERC20Token is ERC20TokenInterface {\r\n    using SafeMath for uint256;\r\n\r\n    // Token account balances.\r\n    mapping (address => uint256) balances;\r\n\r\n    // Delegated number of tokens to transfer.\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n     * @dev Checks the balance of a certain address.\r\n     *\r\n     * @param _account The address which's balance will be checked.\r\n     *\r\n     * @return Returns the balance of the `_account` address.\r\n     */\r\n    function balanceOf(address _account) public constant returns (uint256 balance) {\r\n        return balances[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokens from one address to another.\r\n     *\r\n     * @param _to The target address to which the `_value` number of tokens will be sent.\r\n     * @param _value The number of tokens to send.\r\n     *\r\n     * @return Whether the transfer was successful or not.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[msg.sender] < _value || _value == 0) {\r\n\r\n            return false;\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Send `_value` tokens to `_to` from `_from` if `_from` has approved the process.\r\n     *\r\n     * @param _from The address of the sender.\r\n     * @param _to The address of the recipient.\r\n     * @param _value The number of tokens to be transferred.\r\n     *\r\n     * @return Whether the transfer was successful or not.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[_from] < _value || allowed[_from][msg.sender] < _value || _value == 0) {\r\n            return false;\r\n        }\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows another contract to spend some tokens on your behalf.\r\n     *\r\n     * @param _spender The address of the account which will be approved for transfer of tokens.\r\n     * @param _value The number of tokens to be approved for transfer.\r\n     *\r\n     * @return Whether the approval was successful or not.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Shows the number of tokens approved by `_owner` that are allowed to be transferred by `_spender`.\r\n     *\r\n     * @param _owner The account which allowed the transfer.\r\n     * @param _spender The account which will spend the tokens.\r\n     *\r\n     * @return The number of tokens to be transferred.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * Don't accept ETH\r\n     */\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n/**\r\n * @title BonusCloudTokenConfig\r\n *\r\n * @dev The static configuration for the Bonus Cloud Token.\r\n */\r\ncontract BonusCloudTokenConfig {\r\n    // The name of the token.\r\n    string constant NAME = \"BATTest\";\r\n\r\n    // The symbol of the token.\r\n    string constant SYMBOL = \"BATTest\";\r\n\r\n    // The number of decimals for the token.\r\n    uint8 constant DECIMALS = 18;\r\n\r\n    // Decimal factor for multiplication purposes.\r\n    uint256 constant DECIMALS_FACTOR = 10 ** uint(DECIMALS);\r\n\r\n    // TotalSupply\r\n    uint256 constant TOTAL_SUPPLY = 7000000000 * DECIMALS_FACTOR;\r\n\r\n    // The start date of the fundraiser: 2018-09-04 0:00:00 UTC.\r\n    uint constant START_DATE = 1536019200;\r\n\r\n    // Total number of tokens locked for the BxC core team.\r\n    uint256 constant TOKENS_LOCKED_CORE_TEAM = 1400 * (10**6) * DECIMALS_FACTOR;\r\n\r\n    // Total number of tokens for BxC advisors.\r\n    uint256 constant TOKENS_LOCKED_ADVISORS = 2100 * (10**6) * DECIMALS_FACTOR;\r\n\r\n    // Total number of tokens for BxC advisors A.\r\n    uint256 constant TOKENS_LOCKED_ADVISORS_A = 350 * (10**6) * DECIMALS_FACTOR;\r\n\r\n    // Total number of tokens for BxC advisors B.\r\n    uint256 constant TOKENS_LOCKED_ADVISORS_B = 350 * (10**6) * DECIMALS_FACTOR;\r\n\r\n    // Total number of tokens for BxC advisors C.\r\n    uint256 constant TOKENS_LOCKED_ADVISORS_C = 700 * (10**6) * DECIMALS_FACTOR;\r\n\r\n    // Total number of tokens for BxC advisors D.\r\n    uint256 constant TOKENS_LOCKED_ADVISORS_D = 700 * (10**6) * DECIMALS_FACTOR;\r\n\r\n    // Total number of tokens locked for bxc foundation.\r\n    uint256 constant TOKEN_FOUNDATION = 700 * (10**6) * DECIMALS_FACTOR;\r\n\r\n    // Total number of tokens locked for bounty program.\r\n    uint256 constant TOKENS_BOUNTY_PROGRAM = 2800 * (10**6) * DECIMALS_FACTOR;\r\n}\r\n\r\n/**\r\n * @title Bonus Cloud Token\r\n *\r\n * @dev A standard token implementation of the ERC20 token standard with added\r\n *      HasOwner trait and initialized using the configuration constants.\r\n */\r\ncontract BonusCloudToken is BonusCloudTokenConfig, HasOwner, ERC20Token {\r\n    // The name of the token.\r\n    string public name;\r\n\r\n    // The symbol for the token.\r\n    string public symbol;\r\n\r\n    // The decimals of the token.\r\n    uint8 public decimals;\r\n\r\n    /**\r\n     * @dev The constructor.\r\n     *\r\n     */\r\n    constructor() public HasOwner(msg.sender) {\r\n        name = NAME;\r\n        symbol = SYMBOL;\r\n        decimals = DECIMALS;\r\n        totalSupply = TOTAL_SUPPLY;\r\n        balances[owner] = TOTAL_SUPPLY;\r\n    }\r\n}\r\n\r\n/**\r\n * @title TokenSafeVesting\r\n *\r\n * @dev A multi-bundle token safe contract\r\n */\r\ncontract TokenSafeVesting is HasOwner {\r\n    using SafeMath for uint256;\r\n\r\n    // The Total number of tokens locked.\r\n    uint256 total;\r\n    uint256 lapsedTotal;\r\n    address account;\r\n\r\n    uint[] vestingCommencementDates;\r\n    uint[] vestingPercents;\r\n\r\n    bool revocable;\r\n    bool revoked;\r\n\r\n    // The `ERC20TokenInterface` contract.\r\n    ERC20TokenInterface token;\r\n\r\n    /**\r\n     * @dev constructor new account with locked token balance\r\n     *\r\n     * @param _token The erc20 token address.\r\n     * @param _account The address of th account.\r\n     * @param _balanceTotal The number of tokens to be locked.\r\n     * @param _vestingCommencementDates The vesting commenement date list.\r\n     * @param _vestingPercents The vesting percents list.\r\n     * @param _revocable Whether the vesting is revocable\r\n     */\r\n     constructor (\r\n        address _token,\r\n        address _account,\r\n        uint256 _balanceTotal,\r\n        uint[] _vestingCommencementDates,\r\n        uint[] _vestingPercents,\r\n        bool _revocable) public HasOwner(msg.sender) {\r\n\r\n        // check _vestingCommencementDates and _vestingPercents\r\n        require(_vestingPercents.length > 0);\r\n        require(_vestingCommencementDates.length == _vestingPercents.length);\r\n        uint percentSum;\r\n        for (uint32 i = 0; i < _vestingPercents.length; i++) {\r\n            require(_vestingPercents[i]>=0);\r\n            require(_vestingPercents[i]<=100);\r\n            percentSum = percentSum.add(_vestingPercents[i]);\r\n            require(_vestingCommencementDates[i]>0);\r\n            if (i > 0) {\r\n                require(_vestingCommencementDates[i] > _vestingCommencementDates[i-1]);\r\n            }\r\n        }\r\n        require(percentSum==100);\r\n\r\n        token = ERC20TokenInterface(_token);\r\n        account = _account;\r\n        total = _balanceTotal;\r\n        vestingCommencementDates = _vestingCommencementDates;\r\n        vestingPercents = _vestingPercents;\r\n        revocable = _revocable;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow the account to be released some token if it meets some vesting commencement date.\r\n     * TODO: public -> internal ?\r\n     */\r\n    function release() public {\r\n        require(!revoked);\r\n\r\n        uint256 grant;\r\n        uint percent;\r\n        for (uint32 i = 0; i < vestingCommencementDates.length; i++) {\r\n            if (block.timestamp < vestingCommencementDates[i]) {\r\n            } else {\r\n                percent += vestingPercents[i];\r\n            }\r\n        }\r\n        grant = total.mul(percent).div(100);\r\n\r\n        if (grant > lapsedTotal) {\r\n            uint256 tokens = grant.sub(lapsedTotal);\r\n            lapsedTotal = lapsedTotal.add(tokens);\r\n            if (!token.transfer(account, tokens)) {\r\n                revert();\r\n            } else {\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revoke token\r\n     */\r\n    function revoke() public onlyOwner {\r\n        require(revocable);\r\n        require(!revoked);\r\n\r\n        release();\r\n        revoked = true;\r\n    }\r\n}\r\n\r\ncontract BonusCloudTokenFoundation is BonusCloudToken {\r\n\r\n    // Vesting Token Pools\r\n    mapping (address => TokenSafeVesting) vestingTokenPools;\r\n\r\n    function addLockedAccount(\r\n        address _account,\r\n        uint256 _balanceTotal,\r\n        uint[] _vestingCommencementDates,\r\n        uint[] _vestingPercents,\r\n        bool _revocable) internal onlyOwner {\r\n\r\n        TokenSafeVesting vestingToken = new TokenSafeVesting(\r\n            this,\r\n            _account,\r\n            _balanceTotal,\r\n            _vestingCommencementDates,\r\n            _vestingPercents,\r\n            _revocable);\r\n\r\n        vestingTokenPools[_account] = vestingToken;\r\n        transfer(vestingToken, _balanceTotal);\r\n    }\r\n\r\n    function releaseAccount(address _account) public {\r\n        TokenSafeVesting vestingToken;\r\n        vestingToken = vestingTokenPools[_account];\r\n        vestingToken.release();\r\n    }\r\n\r\n    function revokeAccount(address _account) public onlyOwner {\r\n        TokenSafeVesting vestingToken;\r\n        vestingToken = vestingTokenPools[_account];\r\n        vestingToken.revoke();\r\n    }\r\n\r\n    constructor() public {\r\n        // bxc foundation\r\n        uint[] memory DFoundation = new uint[](1);\r\n        DFoundation[0] = START_DATE;\r\n        uint[] memory PFoundation = new uint[](1);\r\n        PFoundation[0] = 100;\r\n        addLockedAccount(0x4eE4F2A51EFf3DDDe7d7be6Da37Bb7f3F08771f7, TOKEN_FOUNDATION, DFoundation, PFoundation, false);\r\n\r\n        uint[] memory DAdvisorA = new uint[](5);\r\n        DAdvisorA[0] = START_DATE;\r\n        DAdvisorA[1] = START_DATE + 90 days;\r\n        DAdvisorA[2] = START_DATE + 180 days;\r\n        DAdvisorA[3] = START_DATE + 270 days;\r\n        DAdvisorA[4] = START_DATE + 365 days;\r\n        uint[] memory PAdvisorA = new uint[](5);\r\n        PAdvisorA[0] = 35;\r\n        PAdvisorA[1] = 17;\r\n        PAdvisorA[2] = 16;\r\n        PAdvisorA[3] = 16;\r\n        PAdvisorA[4] = 16;\r\n        addLockedAccount(0x67a25099C3958b884687663C17d22e88C83e9F9A, TOKENS_LOCKED_ADVISORS_A, DAdvisorA, PAdvisorA, false);\r\n\r\n        // advisor b\r\n        uint[] memory DAdvisorB = new uint[](5);\r\n        DAdvisorB[0] = START_DATE;\r\n        DAdvisorB[1] = START_DATE + 90 days;\r\n        DAdvisorB[2] = START_DATE + 180 days;\r\n        DAdvisorB[3] = START_DATE + 270 days;\r\n        DAdvisorB[4] = START_DATE + 365 days;\r\n        uint[] memory PAdvisorB = new uint[](5);\r\n        PAdvisorB[0] = 35;\r\n        PAdvisorB[1] = 17;\r\n        PAdvisorB[2] = 16;\r\n        PAdvisorB[3] = 16;\r\n        PAdvisorB[4] = 16;\r\n        addLockedAccount(0x3F756EA6F3a9d0e24f9857506D0E76cCCbAcFd59, TOKENS_LOCKED_ADVISORS_B, DAdvisorB, PAdvisorB, false);\r\n\r\n        // advisor c\r\n        uint[] memory DAdvisorC = new uint[](4);\r\n        DAdvisorC[0] = START_DATE + 90 days;\r\n        DAdvisorC[1] = START_DATE + 180 days;\r\n        DAdvisorC[2] = START_DATE + 270 days;\r\n        DAdvisorC[3] = START_DATE + 365 days;\r\n        uint[] memory PAdvisorC = new uint[](4);\r\n        PAdvisorC[0] = 25;\r\n        PAdvisorC[1] = 25;\r\n        PAdvisorC[2] = 25;\r\n        PAdvisorC[3] = 25;\r\n        addLockedAccount(0x0022F267eb8A8463C241e3bd23184e0C7DC783F3, TOKENS_LOCKED_ADVISORS_C, DAdvisorC, PAdvisorC, false);\r\n\r\n        // bxc core team\r\n        uint[] memory DCoreTeam = new uint[](12);\r\n        DCoreTeam[0] = START_DATE + 90 days;\r\n        DCoreTeam[1] = START_DATE + 180 days;\r\n        DCoreTeam[2] = START_DATE + 270 days;\r\n        DCoreTeam[3] = START_DATE + 365 days;\r\n        DCoreTeam[4] = START_DATE + 365 days + 90 days;\r\n        DCoreTeam[5] = START_DATE + 365 days + 180 days;\r\n        DCoreTeam[6] = START_DATE + 365 days + 270 days;\r\n        DCoreTeam[7] = START_DATE + 365 days + 365 days;\r\n        DCoreTeam[8] = START_DATE + 730 days + 90 days;\r\n        DCoreTeam[9] = START_DATE + 730 days + 180 days;\r\n        DCoreTeam[10] = START_DATE + 730 days + 270 days;\r\n        DCoreTeam[11] = START_DATE + 730 days + 365 days;\r\n        uint[] memory PCoreTeam = new uint[](12);\r\n        PCoreTeam[0] = 8;\r\n        PCoreTeam[1] = 8;\r\n        PCoreTeam[2] = 8;\r\n        PCoreTeam[3] = 9;\r\n        PCoreTeam[4] = 8;\r\n        PCoreTeam[5] = 8;\r\n        PCoreTeam[6] = 9;\r\n        PCoreTeam[7] = 9;\r\n        PCoreTeam[8] = 8;\r\n        PCoreTeam[9] = 8;\r\n        PCoreTeam[10] = 8;\r\n        PCoreTeam[11] = 9;\r\n        addLockedAccount(0xaEF494C6Af26ef6D9551E91A36b0502A216fF276, TOKENS_LOCKED_CORE_TEAM, DCoreTeam, PCoreTeam, false);\r\n\r\n        // bxc test dev\r\n        uint[] memory DTest = new uint[](2);\r\n        DTest[0] = START_DATE + 12 hours;\r\n        DTest[1] = START_DATE + 16 hours;\r\n        uint[] memory PTest = new uint[](2);\r\n        PTest[0] = 50;\r\n        PTest[1] = 50;\r\n        addLockedAccount(0x67a25099C3958b884687663C17d22e88C83e9F9A, 10 * (10**6) * DECIMALS_FACTOR, DTest, PTest, false);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"releaseAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"revokeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"}]","ContractName":"BonusCloudTokenFoundation","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2a8021a0c4f41e68af0531bed47ee09946aad4f27b6b87f7f7fae81939a22e3d"}]}