{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\npragma solidity ^0.4.24;\r\n\r\ninterface EtherHiLoRandomNumberRequester {\r\n\r\n    function incomingRandomNumber(address player, uint8 randomNumber) external;\r\n\r\n    function incomingRandomNumberError(address player) external;\r\n\r\n}\r\n\r\ninterface EtherHiLoRandomNumberGenerator {\r\n\r\n    function generateRandomNumber(address player, uint8 max) payable external returns (bool);\r\n\r\n}\r\n\r\n/// @title EtherHiLo\r\n/// @dev the contract than handles the EtherHiLo app\r\ncontract EtherHiLo is Ownable, EtherHiLoRandomNumberRequester {\r\n\r\n    uint8 constant NUM_DICE_SIDES = 13;\r\n\r\n    uint public minBet;\r\n    uint public maxBetThresholdPct;\r\n    bool public gameRunning;\r\n    uint public balanceInPlay;\r\n\r\n    EtherHiLoRandomNumberGenerator private random;\r\n    mapping(address => Game) private gamesInProgress;\r\n\r\n    event GameFinished(address indexed player, uint indexed playerGameNumber, uint bet, uint8 firstRoll, uint8 finalRoll, uint winnings, uint payout);\r\n    event GameError(address indexed player, uint indexed playerGameNumber);\r\n\r\n    enum BetDirection {\r\n        None,\r\n        Low,\r\n        High\r\n    }\r\n\r\n    enum GameState {\r\n        None,\r\n        WaitingForFirstCard,\r\n        WaitingForDirection,\r\n        WaitingForFinalCard,\r\n        Finished\r\n    }\r\n\r\n    // the game object\r\n    struct Game {\r\n        address player;\r\n        GameState state;\r\n        uint id;\r\n        BetDirection direction;\r\n        uint bet;\r\n        uint8 firstRoll;\r\n        uint8 finalRoll;\r\n        uint winnings;\r\n    }\r\n\r\n    // the constructor\r\n    constructor() public {\r\n        setMinBet(100 finney);\r\n        setGameRunning(true);\r\n        setMaxBetThresholdPct(75);\r\n    }\r\n\r\n    /// Default function\r\n    function() external payable {\r\n\r\n    }\r\n\r\n\r\n    /// =======================\r\n    /// EXTERNAL GAME RELATED FUNCTIONS\r\n\r\n    // begins a game\r\n    function beginGame() public payable {\r\n        address player = msg.sender;\r\n        uint bet = msg.value;\r\n\r\n        require(player != address(0));\r\n        require(gamesInProgress[player].state == GameState.None || gamesInProgress[player].state == GameState.Finished);\r\n        require(gameRunning);\r\n        require(bet >= minBet && bet <= getMaxBet());\r\n\r\n        Game memory game = Game({\r\n                id:         uint(keccak256(block.number, player, bet)),\r\n                player:     player,\r\n                state:      GameState.WaitingForFirstCard,\r\n                bet:        bet,\r\n                firstRoll:  0,\r\n                finalRoll:  0,\r\n                winnings:   0,\r\n                direction:  BetDirection.None\r\n            });\r\n\r\n        if (!random.generateRandomNumber(player, NUM_DICE_SIDES)) {\r\n            player.transfer(msg.value);\r\n            return;\r\n        }\r\n\r\n        balanceInPlay = balanceInPlay + game.bet;\r\n        gamesInProgress[player] = game;\r\n    }\r\n\r\n    // finishes a game that is in progress\r\n    function finishGame(BetDirection direction) public {\r\n        address player = msg.sender;\r\n\r\n        require(player != address(0));\r\n        require(gamesInProgress[player].state != GameState.None && gamesInProgress[player].state != GameState.Finished);\r\n\r\n        if (!random.generateRandomNumber(player, NUM_DICE_SIDES)) {\r\n            return;\r\n        }\r\n\r\n        Game storage game = gamesInProgress[player];\r\n        game.direction = direction;\r\n        game.state = GameState.WaitingForFinalCard;\r\n        gamesInProgress[player] = game;\r\n    }\r\n\r\n    // returns current game state\r\n    function getGameState(address player) public view returns\r\n            (GameState, uint, BetDirection, uint, uint8, uint8, uint) {\r\n        return (\r\n            gamesInProgress[player].state,\r\n            gamesInProgress[player].id,\r\n            gamesInProgress[player].direction,\r\n            gamesInProgress[player].bet,\r\n            gamesInProgress[player].firstRoll,\r\n            gamesInProgress[player].finalRoll,\r\n            gamesInProgress[player].winnings\r\n        );\r\n    }\r\n\r\n    // Returns the minimum bet\r\n    function getMinBet() public view returns (uint) {\r\n        return minBet;\r\n    }\r\n\r\n    // Returns the maximum bet\r\n    function getMaxBet() public view returns (uint) {\r\n        return SafeMath.div(SafeMath.div(SafeMath.mul(this.balance - balanceInPlay, maxBetThresholdPct), 100), 12);\r\n    }\r\n\r\n    // calculates winnings for the given bet and percent\r\n    function calculateWinnings(uint bet, uint percent) public pure returns (uint) {\r\n        return SafeMath.div(SafeMath.mul(bet, percent), 100);\r\n    }\r\n\r\n    // Returns the win percent when going low on the given number\r\n    function getLowWinPercent(uint number) public pure returns (uint) {\r\n        require(number >= 2 && number <= NUM_DICE_SIDES);\r\n        if (number == 2) {\r\n            return 1200;\r\n        } else if (number == 3) {\r\n            return 500;\r\n        } else if (number == 4) {\r\n            return 300;\r\n        } else if (number == 5) {\r\n            return 300;\r\n        } else if (number == 6) {\r\n            return 200;\r\n        } else if (number == 7) {\r\n            return 180;\r\n        } else if (number == 8) {\r\n            return 150;\r\n        } else if (number == 9) {\r\n            return 140;\r\n        } else if (number == 10) {\r\n            return 130;\r\n        } else if (number == 11) {\r\n            return 120;\r\n        } else if (number == 12) {\r\n            return 110;\r\n        } else if (number == 13) {\r\n            return 100;\r\n        }\r\n    }\r\n\r\n    // Returns the win percent when going high on the given number\r\n    function getHighWinPercent(uint number) public pure returns (uint) {\r\n        require(number >= 1 && number < NUM_DICE_SIDES);\r\n        if (number == 1) {\r\n            return 100;\r\n        } else if (number == 2) {\r\n            return 110;\r\n        } else if (number == 3) {\r\n            return 120;\r\n        } else if (number == 4) {\r\n            return 130;\r\n        } else if (number == 5) {\r\n            return 140;\r\n        } else if (number == 6) {\r\n            return 150;\r\n        } else if (number == 7) {\r\n            return 180;\r\n        } else if (number == 8) {\r\n            return 200;\r\n        } else if (number == 9) {\r\n            return 300;\r\n        } else if (number == 10) {\r\n            return 300;\r\n        } else if (number == 11) {\r\n            return 500;\r\n        } else if (number == 12) {\r\n            return 1200;\r\n        }\r\n    }\r\n\r\n\r\n    /// =======================\r\n    /// RANDOM NUMBER CALLBACKS\r\n\r\n    function incomingRandomNumberError(address player) public {\r\n        require(msg.sender == address(random));\r\n\r\n        Game storage game = gamesInProgress[player];\r\n        if (game.bet > 0) {\r\n            game.player.transfer(game.bet);\r\n        }\r\n\r\n        delete gamesInProgress[player];\r\n        GameError(player, game.id);\r\n    }\r\n\r\n    function incomingRandomNumber(address player, uint8 randomNumber) public {\r\n        require(msg.sender == address(random));\r\n\r\n        Game storage game = gamesInProgress[player];\r\n\r\n        if (game.firstRoll == 0) {\r\n\r\n            game.firstRoll = randomNumber;\r\n            game.state = GameState.WaitingForDirection;\r\n            gamesInProgress[player] = game;\r\n\r\n            return;\r\n        }\r\n\r\n        uint8 finalRoll = randomNumber;\r\n        uint winnings = 0;\r\n\r\n        if (game.direction == BetDirection.High && finalRoll > game.firstRoll) {\r\n            winnings = calculateWinnings(game.bet, getHighWinPercent(game.firstRoll));\r\n        } else if (game.direction == BetDirection.Low && finalRoll < game.firstRoll) {\r\n            winnings = calculateWinnings(game.bet, getLowWinPercent(game.firstRoll));\r\n        }\r\n\r\n        // this should never happen according to the odds,\r\n        // and the fact that we don't allow people to bet\r\n        // so large that they can take the whole pot in one\r\n        // fell swoop - however, a number of people could\r\n        // theoretically all win simultaneously and cause\r\n        // this scenario.  This will try to at a minimum\r\n        // send them back what they bet and then since it\r\n        // is recorded on the blockchain we can verify that\r\n        // the winnings sent don't match what they should be\r\n        // and we can manually send the rest to the player.\r\n        uint transferAmount = winnings;\r\n        if (transferAmount > this.balance) {\r\n            if (game.bet < this.balance) {\r\n                transferAmount = game.bet;\r\n            } else {\r\n                transferAmount = SafeMath.div(SafeMath.mul(this.balance, 90), 100);\r\n            }\r\n        }\r\n\r\n        balanceInPlay = balanceInPlay - game.bet;\r\n\r\n        if (transferAmount > 0) {\r\n            game.player.transfer(transferAmount);\r\n        }\r\n\r\n        game.finalRoll = finalRoll;\r\n        game.winnings = winnings;\r\n        game.state = GameState.Finished;\r\n        gamesInProgress[player] = game;\r\n\r\n        GameFinished(player, game.id, game.bet, game.firstRoll, finalRoll, winnings, transferAmount);\r\n    }\r\n\r\n\r\n    /// OWNER / MANAGEMENT RELATED FUNCTIONS\r\n\r\n    // fail safe for balance transfer\r\n    function transferBalance(address to, uint amount) public onlyOwner {\r\n        to.transfer(amount);\r\n    }\r\n\r\n    // cleans up a player abandoned game, but only if it's\r\n    // greater than 24 hours old.\r\n    function cleanupAbandonedGame(address player) public onlyOwner {\r\n        require(player != address(0));\r\n\r\n        Game storage game = gamesInProgress[player];\r\n        require(game.player != address(0));\r\n\r\n        game.player.transfer(game.bet);\r\n        delete gamesInProgress[game.player];\r\n    }\r\n\r\n    function setRandomAddress(address _address) public onlyOwner {\r\n        random = EtherHiLoRandomNumberGenerator(_address);\r\n    }\r\n\r\n    // set the minimum bet\r\n    function setMinBet(uint bet) public onlyOwner {\r\n        minBet = bet;\r\n    }\r\n\r\n    // set whether or not the game is running\r\n    function setGameRunning(bool v) public onlyOwner {\r\n        gameRunning = v;\r\n    }\r\n\r\n    // set the max bet threshold percent\r\n    function setMaxBetThresholdPct(uint v) public onlyOwner {\r\n        maxBetThresholdPct = v;\r\n    }\r\n\r\n    // Transfers the current balance to the recepient and terminates the contract.\r\n    function destroyAndSend(address _recipient) public onlyOwner {\r\n        selfdestruct(_recipient);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"getHighWinPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"randomNumber\",\"type\":\"uint8\"}],\"name\":\"incomingRandomNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bet\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"calculateWinnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"cleanupAbandonedGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"incomingRandomNumberError\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceInPlay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"setMaxBetThresholdPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bet\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"getLowWinPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBetThresholdPct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRandomAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"setGameRunning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getGameState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"beginGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"direction\",\"type\":\"uint8\"}],\"name\":\"finishGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerGameNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"firstRoll\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"finalRoll\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"winnings\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"GameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerGameNumber\",\"type\":\"uint256\"}],\"name\":\"GameError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EtherHiLo","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d7dd15eab0599182f4209804ee6564396b6e731d99c3911dcf2a8f64c8e46065"}]}