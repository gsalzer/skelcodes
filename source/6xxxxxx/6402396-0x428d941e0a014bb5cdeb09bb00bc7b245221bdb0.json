{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// *-----------------------------------------------------------------------*\r\n//       __ _    ________   __________  _____   __\r\n//      / /| |  / / ____/  / ____/ __ \\/  _/ | / /\r\n//     / / | | / / __/    / /   / / / // //  |/ / \r\n//    / /__| |/ / /___   / /___/ /_/ // // /|  /  \r\n//   /_____/___/_____/   \\____/\\____/___/_/ |_/  \r\n// *-----------------------------------------------------------------------*\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @ multiSig\r\n */\r\ncontract Ownable {\r\n\r\n    // _from: oldOwner _to: newOwner\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    event SubmitPrps(ProposalType indexed _prpsType);\r\n    event SignPrps(uint256 indexed _prpsIdx, ProposalType indexed _prpsType, address indexed _from);\r\n\r\n    // owner proposal type enum\r\n    enum ProposalType {\r\n        freeze,\r\n        unfreeze,\r\n        transferOwner\r\n    }\r\n    // owner proposal\r\n    struct Proposal {\r\n        ProposalType prpsType;\r\n        address fromAddr;\r\n        address toAddr;\r\n        mapping(address => bool) signed;\r\n        bool finalized;\r\n    }\r\n    // require sign owner number\r\n    uint256 public requiredSignNum;\r\n    // all owner address\r\n    address[] public owners;\r\n    // owner proposal list\r\n    Proposal[] public proposals;\r\n    // is owner mapping\r\n    mapping(address => bool) public isOwnerMap;\r\n\r\n    constructor() public{\r\n    }\r\n\r\n    // is owner\r\n    modifier isOwner{\r\n        require(isOwnerMap[msg.sender], \"\");\r\n        _;\r\n    }\r\n    // is most owner sign proposal\r\n    modifier multiSig(uint256 _prpsIdx) {\r\n        // is more than half(多數決)\r\n        require(signOwnerCount(_prpsIdx) >= requiredSignNum, \"\");\r\n        // proposal is not finalized\r\n        require(proposals[_prpsIdx].finalized == false, \"\");\r\n        _;\r\n    }\r\n    // proposal is exist\r\n    modifier isPrpsExists(uint256 _prpsIdx) {\r\n        require(_prpsIdx >= 0, \"\");\r\n        require(_prpsIdx < proposals.length, \"\");\r\n        _;\r\n    }\r\n    modifier checkOwner(address _fromAddr, address _toAddr) {\r\n        require(_toAddr != address(0), \"\");\r\n        require(_toAddr != msg.sender, \"\");\r\n        require(_fromAddr != msg.sender, \"\");\r\n        _;\r\n    }\r\n    // is right proposal type\r\n    modifier checkPrpsType(ProposalType _prpsType) {\r\n        require(_prpsType == ProposalType.freeze || _prpsType == ProposalType.unfreeze || _prpsType == ProposalType.transferOwner, \"\");\r\n        _;\r\n    }\r\n    // check already sign prps\r\n    modifier checkSignPrps(uint256 _prpsIdx) {\r\n        // proposal is not finalized\r\n        require(proposals[_prpsIdx].finalized == false, \"\");\r\n        // owner is not signed\r\n        require(proposals[_prpsIdx].signed[msg.sender] == false, \"\");\r\n        _;\r\n    }\r\n\r\n\r\n    // any owner submit not certified proposal\r\n    function submitProposal(ProposalType _prpsType, address _fromAddr, address _toAddr) public isOwner checkOwner(_fromAddr, _toAddr) checkPrpsType(_prpsType) {\r\n        Proposal memory _proposal;\r\n        _proposal.prpsType = _prpsType;\r\n        _proposal.finalized = false;\r\n        _proposal.fromAddr = _fromAddr;\r\n        _proposal.toAddr = _toAddr;\r\n        proposals.push(_proposal);\r\n        emit SubmitPrps(_prpsType);\r\n    }\r\n\r\n    // owner sign an proposal\r\n    function signProposal(uint256 _prpsIdx) public isOwner isPrpsExists(_prpsIdx) checkSignPrps(_prpsIdx){\r\n        proposals[_prpsIdx].signed[msg.sender] = true;\r\n        emit SignPrps(_prpsIdx, proposals[_prpsIdx].prpsType, msg.sender);\r\n    }\r\n\r\n    // get proposal owner sign number(多數決)\r\n    function signOwnerCount(uint256 _prpsIdx) public view isPrpsExists(_prpsIdx) returns(uint256) {\r\n        uint256 signedCount = 0;\r\n        for(uint256 i = 0; i < owners.length; i++) {\r\n            if(proposals[_prpsIdx].signed[owners[i]] == true){\r\n                signedCount++;\r\n            }\r\n        }\r\n        return signedCount;\r\n    }\r\n\r\n    // proposal count nums\r\n    function getProposalCount() public view returns(uint256){\r\n        return proposals.length;\r\n    }\r\n    \r\n    // get proposal sign status info\r\n    function getProposalInfo(uint256 _prpsIdx) public view isPrpsExists(_prpsIdx) returns(ProposalType _prpsType, uint256 _signedCount, bool _isFinalized, address _fromAddr, address _toAddr){\r\n\r\n        Proposal memory _proposal = proposals[_prpsIdx];\r\n        uint256 signCount = signOwnerCount(_prpsIdx);\r\n        return (_proposal.prpsType, signCount, _proposal.finalized, _proposal.fromAddr, _proposal.toAddr);\r\n    }\r\n\r\n    // Transfer owner\r\n    function transferOwnership(uint256 _prpsIdx) public isOwner isPrpsExists(_prpsIdx) multiSig(_prpsIdx) {\r\n\r\n        // is right enum proposalType\r\n        require(proposals[_prpsIdx].prpsType == ProposalType.transferOwner, \"\");\r\n        address oldOwnerAddr = proposals[_prpsIdx].fromAddr;\r\n        address newOwnerAddr = proposals[_prpsIdx].toAddr;\r\n        require(oldOwnerAddr != address(0), \"\");\r\n        require(newOwnerAddr != address(0), \"\");\r\n        require(oldOwnerAddr != newOwnerAddr, \"\");\r\n        for(uint256 i = 0; i < owners.length; i++) {\r\n            if( owners[i] == oldOwnerAddr){\r\n                owners[i] = newOwnerAddr;\r\n                delete isOwnerMap[oldOwnerAddr];\r\n                isOwnerMap[newOwnerAddr] = true;\r\n            }\r\n        }\r\n        proposals[_prpsIdx].finalized = true;\r\n        emit OwnershipTransferred(oldOwnerAddr, newOwnerAddr);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n */\r\ncontract Pausable is Ownable {\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused {\r\n        require(!paused, \"\");\r\n        _;\r\n    }\r\n    modifier whenPaused {\r\n        require(paused, \"\");\r\n        _;\r\n    }\r\n\r\n    // Pause contract   \r\n    function pause() public isOwner whenNotPaused returns (bool) {\r\n        paused = true;\r\n        emit Pause();\r\n        return true;\r\n    }\r\n\r\n    // Unpause contract\r\n    function unpause() public isOwner whenPaused returns (bool) {\r\n        paused = false;\r\n        emit Unpause();\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract ERC20 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    // _from: _owner _to: _spender\r\n    event Approval(address indexed _from, address indexed _to, uint256 _amount);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Token\r\n */\r\ncontract ERC20Token is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    uint256 public totalToken;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalToken;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        require(_owner != address(0), \"\");\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Transfer token by internal\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != address(0), \"\");\r\n        require(balances[_from] >= _value, \"\");\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0), \"\");\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\r\n        require(_from != address(0), \"\");\r\n        require(_to != address(0), \"\");\r\n        require(_value > 0, \"\");\r\n        require(balances[_from] >= _value, \"\");\r\n        require(allowed[_from][msg.sender] >= _value, \"\");\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool){\r\n        require(_spender != address(0), \"\");\r\n        require(_value > 0, \"\");\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256){\r\n        require(_owner != address(0), \"\");\r\n        require(_spender != address(0), \"\");\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title LVECoin\r\n */\r\ncontract LVECoin is ERC20Token, Pausable {\r\n\r\n    string public  constant name        = \"LVECoin\";\r\n    string public  constant symbol      = \"LVE\";\r\n    uint256 public constant decimals    = 18;\r\n    // issue all token\r\n    uint256 private initialToken        = 2000000000 * (10 ** decimals);\r\n    \r\n    // _to: _freezeAddr\r\n    event Freeze(address indexed _to);\r\n    // _to: _unfreezeAddr\r\n    event Unfreeze(address indexed _to);\r\n    event WithdrawalEther(address indexed _to, uint256 _amount);\r\n    \r\n    // freeze account mapping\r\n    mapping(address => bool) public freezeAccountMap;  \r\n    // wallet Address\r\n    address private walletAddr;\r\n    // owner sign threshold\r\n    uint256 private signThreshold       = 3;\r\n\r\n    constructor(address[] _initOwners, address _walletAddr) public{\r\n        require(_initOwners.length == signThreshold, \"\");\r\n        require(_walletAddr != address(0), \"\");\r\n\r\n        // init owners\r\n        requiredSignNum = _initOwners.length.div(2).add(1);\r\n        owners = _initOwners;\r\n        for(uint i = 0; i < _initOwners.length; i++) {\r\n            isOwnerMap[_initOwners[i]] = true;\r\n        }\r\n\r\n        totalToken = initialToken;\r\n        walletAddr = _walletAddr;\r\n        balances[msg.sender] = totalToken;\r\n        emit Transfer(0x0, msg.sender, totalToken);\r\n    }\r\n\r\n\r\n    // is freezeable account\r\n    modifier freezeable(address _addr) {\r\n        require(_addr != address(0), \"\");\r\n        require(!freezeAccountMap[_addr], \"\");\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused freezeable(msg.sender) returns (bool) {\r\n        require(_to != address(0), \"\");\r\n        return super.transfer(_to, _value);\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused freezeable(msg.sender) returns (bool) {\r\n        require(_from != address(0), \"\");\r\n        require(_to != address(0), \"\");\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    function approve(address _spender, uint256 _value) public whenNotPaused freezeable(msg.sender) returns (bool) {\r\n        require(_spender != address(0), \"\");\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    // freeze account\r\n    function freezeAccount(uint256 _prpsIdx) public isOwner isPrpsExists(_prpsIdx) multiSig(_prpsIdx) returns (bool) {\r\n\r\n        // is right enum proposalType\r\n        require(proposals[_prpsIdx].prpsType == ProposalType.freeze, \"\");\r\n        address freezeAddr = proposals[_prpsIdx].toAddr;\r\n        require(freezeAddr != address(0), \"\");\r\n        // proposals execute over\r\n        proposals[_prpsIdx].finalized = true;\r\n        freezeAccountMap[freezeAddr] = true;\r\n        emit Freeze(freezeAddr);\r\n        return true;\r\n    }\r\n    \r\n    // unfreeze account\r\n    function unfreezeAccount(uint256 _prpsIdx) public isOwner isPrpsExists(_prpsIdx) multiSig(_prpsIdx) returns (bool) {\r\n\r\n        // is right enum proposalType\r\n        require(proposals[_prpsIdx].prpsType == ProposalType.unfreeze, \"\");\r\n        address freezeAddr = proposals[_prpsIdx].toAddr;\r\n        require(freezeAddr != address(0), \"\");\r\n        // proposals execute over\r\n        proposals[_prpsIdx].finalized = true;\r\n        freezeAccountMap[freezeAddr] = false;\r\n        emit Unfreeze(freezeAddr);\r\n        return true;\r\n    }\r\n\r\n    // if send ether then send ether to owner\r\n    function() public payable {\r\n        require(msg.value > 0, \"\");\r\n        walletAddr.transfer(msg.value);\r\n        emit WithdrawalEther(walletAddr, msg.value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"prpsType\",\"type\":\"uint8\"},{\"name\":\"fromAddr\",\"type\":\"address\"},{\"name\":\"toAddr\",\"type\":\"address\"},{\"name\":\"finalized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_prpsIdx\",\"type\":\"uint256\"}],\"name\":\"unfreezeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_prpsIdx\",\"type\":\"uint256\"}],\"name\":\"signOwnerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwnerMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_prpsIdx\",\"type\":\"uint256\"}],\"name\":\"signProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_prpsIdx\",\"type\":\"uint256\"}],\"name\":\"getProposalInfo\",\"outputs\":[{\"name\":\"_prpsType\",\"type\":\"uint8\"},{\"name\":\"_signedCount\",\"type\":\"uint256\"},{\"name\":\"_isFinalized\",\"type\":\"bool\"},{\"name\":\"_fromAddr\",\"type\":\"address\"},{\"name\":\"_toAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProposalCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_prpsIdx\",\"type\":\"uint256\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_prpsType\",\"type\":\"uint8\"},{\"name\":\"_fromAddr\",\"type\":\"address\"},{\"name\":\"_toAddr\",\"type\":\"address\"}],\"name\":\"submitProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_prpsIdx\",\"type\":\"uint256\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeAccountMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initOwners\",\"type\":\"address[]\"},{\"name\":\"_walletAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prpsType\",\"type\":\"uint8\"}],\"name\":\"SubmitPrps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prpsIdx\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_prpsType\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"SignPrps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LVECoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000008b604c2e9f35bebfd76c25505f027c363a39d5e800000000000000000000000000000000000000000000000000000000000000030000000000000000000000008b604c2e9f35bebfd76c25505f027c363a39d5e80000000000000000000000007609a6ba1dead1250a4a1e1871aaa4ac038974dc000000000000000000000000405f5d826c6812835154e2e4cda1a05f4faeff9e","Library":"","SwarmSource":"bzzr://3b07882910661173011743cc6318c7fd5878bbd0e4d1f2d0819e07383906ffac"}]}