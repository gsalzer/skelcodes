{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n/*\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n\r\n  function balanceOf(address who) public constant returns (uint);\r\n\r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n\r\n  function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n\r\n  function approve(address spender, uint value) public returns (bool ok);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n// ERC223\r\ncontract ContractReceiver {\r\n  function tokenFallback(address from, uint value) public;\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  function Ownable() public { owner = msg.sender; }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n\r\n  }\r\n}\r\n\r\n// File: contracts/Deployer.sol\r\n\r\ncontract Deployer {\r\n\r\n  address public deployer;\r\n\r\n  function Deployer() public { deployer = msg.sender; }\r\n\r\n  modifier onlyDeployer() {\r\n    require(msg.sender == deployer);\r\n    _;\r\n  }\r\n}\r\n\r\n// File: contracts/OracleOwnable.sol\r\n\r\ncontract OracleOwnable is Ownable {\r\n\r\n  address public oracle;\r\n\r\n  modifier onlyOracle() {\r\n    require(msg.sender == oracle);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOracleOrOwner() {\r\n    require(msg.sender == oracle || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function setOracle(address newOracle) public onlyOracleOrOwner {\r\n    if (newOracle != address(0)) {\r\n      oracle = newOracle;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ModultradeLibrary.sol\r\n\r\nlibrary ModultradeLibrary {\r\n  enum Currencies {\r\n  ETH, MTR\r\n  }\r\n\r\n  enum ProposalStates {\r\n  Created, Paid, Delivery, Closed, Canceled\r\n  }\r\n}\r\n\r\n// File: contracts/ModultradeStorage.sol\r\n\r\ncontract ModultradeStorage is Ownable, Deployer {\r\n\r\n  bool private _doMigrate = true;\r\n\r\n  mapping (address => address[]) public sellerProposals;\r\n\r\n  mapping (uint => address) public proposalListAddress;\r\n\r\n  address[] public proposals;\r\n\r\n  event InsertProposalEvent (address _proposal, uint _id, address _seller);\r\n\r\n  event PaidProposalEvent (address _proposal, uint _id);\r\n\r\n  function ModultradeStorage() public {}\r\n\r\n  function insertProposal(address seller, uint id, address proposal) public onlyOwner {\r\n    sellerProposals[seller].push(proposal);\r\n    proposalListAddress[id] = proposal;\r\n    proposals.push(proposal);\r\n\r\n    InsertProposalEvent(proposal, id, seller);\r\n  }\r\n\r\n  function getProposalsBySeller(address seller) public constant returns (address[]){\r\n    return sellerProposals[seller];\r\n  }\r\n\r\n  function getProposals() public constant returns (address[]){\r\n    return proposals;\r\n  }\r\n\r\n  function getProposalById(uint id) public constant returns (address){\r\n    return proposalListAddress[id];\r\n  }\r\n\r\n  function getCount() public constant returns (uint) {\r\n    return proposals.length;\r\n  }\r\n\r\n  function getCountBySeller(address seller) public constant returns (uint) {\r\n    return sellerProposals[seller].length;\r\n  }\r\n\r\n  function firePaidProposalEvent(address proposal, uint id) public {\r\n    require(proposalListAddress[id] == proposal);\r\n\r\n    PaidProposalEvent(proposal, id);\r\n  }\r\n\r\n  function changeOwner(address newOwner) public onlyDeployer {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ModultradeProposal.sol\r\n\r\ncontract ModultradeProposal is OracleOwnable, ContractReceiver {\r\n\r\n  address public seller;\r\n\r\n  address public buyer;\r\n\r\n  uint public id;\r\n\r\n  string public title;\r\n\r\n  uint public price;\r\n\r\n  ModultradeLibrary.Currencies public currency;\r\n\r\n  uint public units;\r\n\r\n  uint public total;\r\n\r\n  uint public validUntil;\r\n\r\n  ModultradeLibrary.ProposalStates public state;\r\n\r\n  uint public payDate;\r\n\r\n  string public deliveryId;\r\n\r\n  uint public fee;\r\n\r\n  address public feeAddress;\r\n\r\n  ERC20 mtrContract;\r\n\r\n  Modultrade modultrade;\r\n\r\n  bytes public tokenFallbackData;\r\n\r\n  event CreatedEvent(uint _id, ModultradeLibrary.ProposalStates _state);\r\n\r\n  event PaidEvent(uint _id, ModultradeLibrary.ProposalStates _state, address _buyer);\r\n\r\n  event DeliveryEvent(uint _id, ModultradeLibrary.ProposalStates _state, string _deliveryId);\r\n\r\n  event ClosedEvent(uint _id, ModultradeLibrary.ProposalStates _state, address _seller, uint _amount);\r\n\r\n  event CanceledEvent(uint _id, ModultradeLibrary.ProposalStates _state, address _buyer, uint _amount);\r\n\r\n  function ModultradeProposal(address _modultrade, address _seller, address _mtrContractAddress) public {\r\n    seller = _seller;\r\n    state = ModultradeLibrary.ProposalStates.Created;\r\n    mtrContract = ERC20(_mtrContractAddress);\r\n    modultrade = Modultrade(_modultrade);\r\n  }\r\n\r\n  function setProposal(uint _id,\r\n  string _title,\r\n  uint _price,\r\n  ModultradeLibrary.Currencies _currency,\r\n  uint _units,\r\n  uint _total,\r\n  uint _validUntil\r\n  ) public onlyOracleOrOwner {\r\n    require(state == ModultradeLibrary.ProposalStates.Created);\r\n    id = _id;\r\n    title = _title;\r\n    price = _price;\r\n    currency = _currency;\r\n    units = _units;\r\n    total = _total;\r\n    validUntil = _validUntil;\r\n  }\r\n\r\n  function setFee(uint _fee, address _feeAddress) public onlyOracleOrOwner {\r\n    require(state == ModultradeLibrary.ProposalStates.Created);\r\n    fee = _fee;\r\n    feeAddress = _feeAddress;\r\n  }\r\n\r\n  function() public payable {purchase();}\r\n\r\n  function purchase() public payable {\r\n    require(currency == ModultradeLibrary.Currencies.ETH);\r\n    require(msg.value >= total);\r\n    setPaid(msg.sender);\r\n  }\r\n\r\n  function setPaid(address _buyer) internal {\r\n    require(state == ModultradeLibrary.ProposalStates.Created);\r\n    state = ModultradeLibrary.ProposalStates.Paid;\r\n    buyer = _buyer;\r\n    payDate = now;\r\n    PaidEvent(id, state, buyer);\r\n    modultrade.firePaidProposalEvent(address(this), id);\r\n  }\r\n\r\n  function paid(address _buyer) public onlyOracleOrOwner {\r\n    require(getBalance() >= total);\r\n    setPaid(_buyer);\r\n  }\r\n\r\n  function mtrTokenFallBack(address from, uint value) internal {\r\n    require(currency == ModultradeLibrary.Currencies.MTR);\r\n    require(msg.sender == address(mtrContract));\r\n    require(value >= total);\r\n    setPaid(from);\r\n  }\r\n\r\n  function tokenFallback(address from, uint value) public {\r\n    mtrTokenFallBack(from, value);\r\n  }\r\n\r\n  function tokenFallback(address from, uint value, bytes data) public {\r\n    tokenFallbackData = data;\r\n    mtrTokenFallBack(from, value);\r\n  }\r\n\r\n  function delivery(string _deliveryId) public onlyOracleOrOwner {\r\n    require(state == ModultradeLibrary.ProposalStates.Paid);\r\n    deliveryId = _deliveryId;\r\n    state = ModultradeLibrary.ProposalStates.Delivery;\r\n    DeliveryEvent(id, state, deliveryId);\r\n    modultrade.fireDeliveryProposalEvent(address(this), id);\r\n  }\r\n\r\n  function close() public onlyOracleOrOwner {\r\n    require(state != ModultradeLibrary.ProposalStates.Closed);\r\n    require(state != ModultradeLibrary.ProposalStates.Canceled);\r\n\r\n    if (currency == ModultradeLibrary.Currencies.ETH) {\r\n      closeEth();\r\n    }\r\n    if (currency == ModultradeLibrary.Currencies.MTR) {\r\n      closeMtr();\r\n    }\r\n\r\n    state = ModultradeLibrary.ProposalStates.Closed;\r\n    ClosedEvent(id, state, seller, this.balance);\r\n    modultrade.fireCloseProposalEvent(address(this), id);\r\n  }\r\n\r\n  function closeEth() private {\r\n    if (fee > 0) {\r\n      feeAddress.transfer(fee);\r\n    }\r\n    seller.transfer(this.balance);\r\n  }\r\n\r\n  function closeMtr() private {\r\n    if (fee > 0) {\r\n      mtrContract.transfer(feeAddress, fee);\r\n    }\r\n    mtrContract.transfer(seller, getBalance());\r\n  }\r\n\r\n  function cancel(uint cancelFee) public onlyOracleOrOwner {\r\n    require(state != ModultradeLibrary.ProposalStates.Closed);\r\n    require(state != ModultradeLibrary.ProposalStates.Canceled);\r\n    uint _balance = getBalance();\r\n    if (_balance > 0) {\r\n      if (currency == ModultradeLibrary.Currencies.ETH) {\r\n        cancelEth(cancelFee);\r\n      }\r\n      if (currency == ModultradeLibrary.Currencies.MTR) {\r\n        cancelMtr(cancelFee);\r\n      }\r\n    }\r\n    state = ModultradeLibrary.ProposalStates.Canceled;\r\n    CanceledEvent(id, state, buyer, this.balance);\r\n    modultrade.fireCancelProposalEvent(address(this), id);\r\n  }\r\n\r\n  function cancelEth(uint cancelFee) private {\r\n    uint _fee = cancelFee;\r\n    if (cancelFee > this.balance) {\r\n      _fee = this.balance;\r\n    }\r\n    feeAddress.transfer(_fee);\r\n    if (this.balance > 0 && buyer != address(0)) {\r\n      buyer.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  function cancelMtr(uint cancelFee) private {\r\n    uint _fee = cancelFee;\r\n    uint _balance = getBalance();\r\n    if (cancelFee > _balance) {\r\n      _fee = _balance;\r\n    }\r\n    mtrContract.transfer(feeAddress, _fee);\r\n    _balance = getBalance();\r\n    if (_balance > 0 && buyer != address(0)) {\r\n      mtrContract.transfer(buyer, _balance);\r\n    }\r\n  }\r\n\r\n  function getBalance() public constant returns (uint) {\r\n    if (currency == ModultradeLibrary.Currencies.MTR) {\r\n      return mtrContract.balanceOf(address(this));\r\n    }\r\n\r\n    return this.balance;\r\n  }\r\n}\r\n\r\n// File: contracts/Modultrade.sol\r\n\r\ncontract Modultrade is OracleOwnable, Deployer {\r\n\r\n  address public mtrContractAddress;\r\n\r\n  ModultradeStorage public modultradeStorage;\r\n\r\n  event ProposalCreatedEvent(uint _id, address _proposal);\r\n\r\n  event PaidProposalEvent (address _proposal, uint _id);\r\n  event CancelProposalEvent (address _proposal, uint _id);\r\n  event CloseProposalEvent (address _proposal, uint _id);\r\n  event DeliveryProposalEvent (address _proposal, uint _id);\r\n\r\n  event LogEvent (address _addr, string _log, uint _i);\r\n\r\n  function Modultrade(address _owner, address _oracle, address _mtrContractAddress, address _storageAddress) public {\r\n    transferOwnership(_owner);\r\n    setOracle(_oracle);\r\n    mtrContractAddress = _mtrContractAddress;\r\n    modultradeStorage = ModultradeStorage(_storageAddress);\r\n  }\r\n\r\n  function createProposal(\r\n  address seller,\r\n  uint id,\r\n  string title,\r\n  uint price,\r\n  ModultradeLibrary.Currencies currency,\r\n  uint units,\r\n  uint total,\r\n  uint validUntil,\r\n  uint fee,\r\n  address feeAddress\r\n  ) public onlyOracleOrOwner {\r\n    ModultradeProposal proposal = new ModultradeProposal(address(this), seller, mtrContractAddress);\r\n    LogEvent (address(proposal), 'ModultradeProposal', 1);\r\n    proposal.setProposal(id, title, price, currency, units, total, validUntil);\r\n    proposal.setFee(fee, feeAddress);\r\n    proposal.setOracle(oracle);\r\n    proposal.transferOwnership(owner);\r\n\r\n    modultradeStorage.insertProposal(seller, id, address(proposal));\r\n    ProposalCreatedEvent(proposal.id(), address(proposal));\r\n  }\r\n\r\n\r\n  function transferStorage(address _owner) public onlyOracleOrOwner {\r\n    modultradeStorage.transferOwnership(_owner);\r\n  }\r\n\r\n  function firePaidProposalEvent(address proposal, uint id) public {\r\n    var _proposal = modultradeStorage.getProposalById(id);\r\n    require(_proposal == proposal);\r\n    PaidProposalEvent(proposal, id);\r\n  }\r\n\r\n  function fireCancelProposalEvent(address proposal, uint id) public {\r\n    var _proposal = modultradeStorage.getProposalById(id);\r\n    require(_proposal == proposal);\r\n    CancelProposalEvent(proposal, id);\r\n  }\r\n\r\n  function fireCloseProposalEvent(address proposal, uint id) public {\r\n    var _proposal = modultradeStorage.getProposalById(id);\r\n    require(_proposal == proposal);\r\n    CloseProposalEvent(proposal, id);\r\n  }\r\n\r\n  function fireDeliveryProposalEvent(address proposal, uint id) public {\r\n    var _proposal = modultradeStorage.getProposalById(id);\r\n    require(_proposal == proposal);\r\n    DeliveryProposalEvent(proposal, id);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFallbackData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cancelFee\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"units\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_currency\",\"type\":\"uint8\"},{\"name\":\"_units\",\"type\":\"uint256\"},{\"name\":\"_total\",\"type\":\"uint256\"},{\"name\":\"_validUntil\",\"type\":\"uint256\"}],\"name\":\"setProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"paid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deliveryId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deliveryId\",\"type\":\"string\"}],\"name\":\"delivery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_modultrade\",\"type\":\"address\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_mtrContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"CreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"PaidEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_deliveryId\",\"type\":\"string\"}],\"name\":\"DeliveryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClosedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CanceledEvent\",\"type\":\"event\"}]","ContractName":"ModultradeProposal","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000074cebf05e472afb012896a9dafc3ce057233136f0000000000000000000000002acd7397615850f401ea16eb508ef59eac65f2a20000000000000000000000001e49ff77c355a3e38d6651ce8404af0e48c5395f","Library":"","SwarmSource":"bzzr://b6273084c6f54bd3ad892cea9cf6d06aa8f14c54d4ee750f7d8a2dcc858f6a83"}]}