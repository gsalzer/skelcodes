{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/ERC721.sol\r\n\r\n// eterart-contract\r\n// contracts/ERC721.sol\r\n\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC-721 contract interface.\r\n */\r\ncontract ERC721 {\r\n    // ERC20 compatible functions.\r\n    function name() public constant returns (string);\r\n    function symbol() public constant returns (string);\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address _owner) public constant returns (uint);\r\n    // Functions that define ownership.\r\n    function ownerOf(uint256 _tokenId) public constant returns (address);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function takeOwnership(uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant returns (uint);\r\n    // Token metadata.\r\n    function tokenMetadata(uint256 _tokenId) public constant returns (string);\r\n    // Events.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n}\r\n\r\n// File: contracts/EterArt.sol\r\n\r\n// eterart-contract\r\n// contracts/EterArt.sol\r\n\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title EterArt contract.\r\n */\r\ncontract EterArt is ERC721 {\r\n\r\n    // Art structure for tokens ownership registry.\r\n    struct Art {\r\n        uint256 price;\r\n        address owner;\r\n        address newOwner;\r\n    }\r\n\r\n    struct Token {\r\n        uint256[] items;\r\n        mapping(uint256 => uint) lookup;\r\n    }\r\n\r\n    // Mapping from token ID to owner.\r\n    mapping (address => Token) internal ownedTokens;\r\n\r\n    // All minted tokens number (ERC-20 compatibility).\r\n    uint256 public totalTokenSupply;\r\n\r\n    // Token issuer address\r\n    address public _issuer;\r\n\r\n    // Tokens ownership registry.\r\n    mapping (uint => Art) public registry;\r\n\r\n    // Token metadata base URL.\r\n    string public baseInfoUrl = \"https://www.eterart.com/art/\";\r\n\r\n    // Fee in percents\r\n    uint public feePercent = 5;\r\n\r\n    /**\r\n    * @dev Constructor sets the `issuer` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        _issuer = msg.sender;\r\n    }\r\n\r\n    /**\r\n   * @return the address of the issuer.\r\n   */\r\n    function issuer() public view returns(address) {\r\n        return _issuer;\r\n    }\r\n\r\n    /**\r\n    * @dev Reject all Ether from being sent here. (Hopefully, we can prevent user accidents.)\r\n    */\r\n    function() external payable {\r\n        require(msg.sender == address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Gets token name (ERC-20 compatibility).\r\n     * @return string token name.\r\n     */\r\n    function name() public constant returns (string) {\r\n        return \"EterArt\";\r\n    }\r\n\r\n    /**\r\n     * @dev Gets token symbol (ERC-20 compatibility).\r\n     * @return string token symbol.\r\n     */\r\n    function symbol() public constant returns (string) {\r\n        return \"WAW\";\r\n    }\r\n\r\n    /**\r\n     * @dev Gets token URL.\r\n     * @param _tokenId uint256 ID of the token to get URL of.\r\n     * @return string token URL.\r\n     */\r\n    function tokenMetadata(uint256 _tokenId) public constant returns (string) {\r\n        return strConcat(baseInfoUrl, strConcat(\"0x\", uint2hexstr(_tokenId)));\r\n    }\r\n\r\n    /**\r\n     * @dev Gets contract all minted tokens number.\r\n     * @return uint256 contract all minted tokens number.\r\n     */\r\n    function totalSupply() public constant returns (uint256) {\r\n        return totalTokenSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets tokens number of specified address.\r\n     * @param _owner address to query tokens number of.\r\n     * @return uint256 number of tokens owned by the specified address.\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint balance) {\r\n        balance = ownedTokens[_owner].items.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets token by index of specified address.\r\n     * @param _owner address to query tokens number of.\r\n     * @param _index uint256 index of the token to get.\r\n     * @return uint256 token ID from specified address tokens list by specified index.\r\n     */\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant returns (uint tokenId) {\r\n        tokenId = ownedTokens[_owner].items[_index];\r\n    }\r\n\r\n    /**\r\n     * @dev Approve token ownership transfer to another address.\r\n     * @param _to address to change token ownership to.\r\n     * @param _tokenId uint256 token ID to change ownership of.\r\n     */\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        require(_to != msg.sender);\r\n        require(registry[_tokenId].owner == msg.sender);\r\n        registry[_tokenId].newOwner = _to;\r\n        emit Approval(registry[_tokenId].owner, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal method that transfer token to another address.\r\n     * Run some checks and internal contract data manipulations.\r\n     * @param _to address new token owner address.\r\n     * @param _tokenId uint256 token ID to transfer to specified address.\r\n     */\r\n    function _transfer(address _to, uint256 _tokenId) internal {\r\n        if (registry[_tokenId].owner != address(0)) {\r\n            require(registry[_tokenId].owner != _to);\r\n            removeByValue(registry[_tokenId].owner, _tokenId);\r\n        }\r\n        else {\r\n            totalTokenSupply = totalTokenSupply + 1;\r\n        }\r\n\r\n        require(_to != address(0));\r\n\r\n        push(_to, _tokenId);\r\n        emit Transfer(registry[_tokenId].owner, _to, _tokenId);\r\n        registry[_tokenId].owner = _to;\r\n        registry[_tokenId].newOwner = address(0);\r\n        registry[_tokenId].price = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Take ownership of specified token.\r\n     * Only if current token owner approve that.\r\n     * @param _tokenId uint256 token ID to take ownership of.\r\n     */\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(registry[_tokenId].newOwner == msg.sender);\r\n        _transfer(msg.sender, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Change baseInfoUrl contract property value.\r\n     * @param url string new baseInfoUrl value.\r\n     */\r\n    function changeBaseInfoUrl(string url) public {\r\n        require(msg.sender == _issuer);\r\n        baseInfoUrl = url;\r\n    }\r\n\r\n    /**\r\n     * @dev Change issuer contract address.\r\n     * @param _to address of new contract issuer.\r\n     */\r\n    function changeIssuer(address _to) public {\r\n        require(msg.sender == _issuer);\r\n        _issuer = _to;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw all contract balance value to contract issuer.\r\n     */\r\n    function withdraw() public {\r\n        require(msg.sender == _issuer);\r\n        withdraw(_issuer, address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw all contract balance value to specified address.\r\n     * @param _to address to transfer value.\r\n     */\r\n    function withdraw(address _to) public {\r\n        require(msg.sender == _issuer);\r\n        withdraw(_to, address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw specified wei number to address.\r\n     * @param _to address to transfer value.\r\n     * @param _value uint wei amount value.\r\n     */\r\n    function withdraw(address _to, uint _value) public {\r\n        require(msg.sender == _issuer);\r\n        require(_value <= address(this).balance);\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets specified token owner address.\r\n     * @param token uint256 token ID.\r\n     * @return address specified token owner address.\r\n     */\r\n    function ownerOf(uint256 token) public constant returns (address owner) {\r\n        owner = registry[token].owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets specified token price.\r\n     * @param token uint256 token ID.\r\n     * @return uint specified token price.\r\n     */\r\n    function getPrice(uint token) public view returns (uint) {\r\n        return registry[token].price;\r\n    }\r\n\r\n    /**\r\n     * @dev Direct transfer specified token to another address.\r\n     * @param _to address new token owner address.\r\n     * @param _tokenId uint256 token ID to transfer to specified address.\r\n     */\r\n    function transfer(address _to, uint256 _tokenId) public {\r\n        require(registry[_tokenId].owner == msg.sender);\r\n        _transfer(_to, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Change specified token price.\r\n     * Used for: change token price,\r\n     * withdraw token from sale (set token price to 0 (zero))\r\n     * and for put up token for sale (set token price > 0)\r\n     * @param token uint token ID to change price of.\r\n     * @param price uint new token price.\r\n     */\r\n    function changePrice(uint token, uint price) public {\r\n        require(registry[token].owner == msg.sender);\r\n        registry[token].price = price;\r\n    }\r\n\r\n    /**\r\n     * @dev Buy specified token if it's marked as for sale (token price > 0).\r\n     * Run some checks, calculate fee and transfer token to msg.sender.\r\n     * @param _tokenId uint token ID to buy.\r\n     */\r\n    function buy(uint _tokenId) public payable {\r\n        require(registry[_tokenId].price > 0);\r\n\r\n        uint calcedFee = ((registry[_tokenId].price / 100) * feePercent);\r\n        uint value = msg.value - calcedFee;\r\n\r\n        require(registry[_tokenId].price <= value);\r\n        registry[_tokenId].owner.transfer(value);\r\n        _transfer(msg.sender, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint token.\r\n     */\r\n    function mint(uint _tokenId, address _to) public {\r\n        require(msg.sender == _issuer);\r\n        require(registry[_tokenId].owner == 0x0);\r\n        _transfer(_to, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint token.\r\n     */\r\n    function mint(\r\n        string length,\r\n        uint _tokenId,\r\n        uint price,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public payable {\r\n\r\n        string memory m_price = uint2hexstr(price);\r\n        string memory m_token = uint2hexstr(_tokenId);\r\n\r\n        require(msg.value >= price);\r\n        require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n\", length, m_token, m_price), v, r, s) == _issuer);\r\n        require(registry[_tokenId].owner == 0x0);\r\n        _transfer(msg.sender, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * UTILS\r\n     */\r\n\r\n    /**\r\n     * @dev Add token to specified address tokens list.\r\n     * @param owner address address of token owner to add token to.\r\n     * @param value uint token ID to add.\r\n     */\r\n    function push(address owner, uint value) private {\r\n\r\n        if (ownedTokens[owner].lookup[value] > 0) {\r\n            return;\r\n        }\r\n        ownedTokens[owner].lookup[value] = ownedTokens[owner].items.push(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove token by ID from specified address tokens list.\r\n     * @param owner address address of token owner to remove token from.\r\n     * @param value uint token ID to remove.\r\n     */\r\n    function removeByValue(address owner, uint value) private {\r\n        uint index = ownedTokens[owner].lookup[value];\r\n        if (index == 0) {\r\n            return;\r\n        }\r\n        if (index < ownedTokens[owner].items.length) {\r\n            uint256 lastItem = ownedTokens[owner].items[ownedTokens[owner].items.length - 1];\r\n            ownedTokens[owner].items[index - 1] = lastItem;\r\n            ownedTokens[owner].lookup[lastItem] = index;\r\n        }\r\n        ownedTokens[owner].items.length -= 1;\r\n        delete ownedTokens[owner].lookup[value];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev String concatenation.\r\n     * @param _a string first string.\r\n     * @param _b string second string.\r\n     * @return string result of string concatenation.\r\n     */\r\n    function strConcat(string _a, string _b) internal pure returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory abcde = new string(_ba.length + _bb.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n\r\n        return string(babcde);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert long to hex string.\r\n     * @param i uint value to convert.\r\n     * @return string specified value converted to hex string.\r\n     */\r\n    function uint2hexstr(uint i) internal pure returns (string) {\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint length;\r\n        while (j != 0) {\r\n            length++;\r\n            j = j >> 4;\r\n        }\r\n        uint mask = 15;\r\n        bytes memory bstr = new bytes(length);\r\n        uint k = length - 1;\r\n        while (i != 0){\r\n            uint curr = (i & mask);\r\n            bstr[k--] = curr > 9 ? byte(55 + curr) : byte(48 + curr); // 55 = 65 - 10\r\n            i = i >> 4;\r\n        }\r\n\r\n        return string(bstr);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registry\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseInfoUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"string\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"url\",\"type\":\"string\"}],\"name\":\"changeBaseInfoUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EterArt","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4f2953393f8e8b5188747638d4cbfcd3b639fc9baff34b809b0b62cdef6d6d6b"}]}