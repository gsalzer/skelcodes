{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.17;\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address internal owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n/**\r\n * @title HazzaTokenInterface\r\n*/\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  bool public mintingFinished = false;\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    //totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  function burnTokens(uint256 _unsoldTokens) onlyOwner public returns (bool) {\r\n    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\r\n  }\r\n}\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n  bool public paused = false;\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n/**\r\n * @title HazzaToken TokenFunctions\r\n */\r\ncontract TokenFunctions is Ownable, Pausable {\r\n  using SafeMath for uint256;\r\n  /**\r\n   *  @MintableToken token - Token Object\r\n  */\r\n  MintableToken internal token;\r\n  struct PrivatePurchaserStruct {\r\n    uint privatePurchaserTimeLock;\r\n    uint256 privatePurchaserTokens;\r\n    uint256 privatePurchaserBonus;\r\n  }\r\n  struct AdvisorStruct {\r\n    uint advisorTimeLock;\r\n    uint256 advisorTokens;\r\n  }\r\n  struct BackerStruct {\r\n    uint backerTimeLock;\r\n    uint256 backerTokens;\r\n  }\r\n  struct FounderStruct {\r\n    uint founderTimeLock;\r\n    uint256 founderTokens;\r\n  }\r\n  struct FoundationStruct {\r\n    uint foundationTimeLock;\r\n    uint256 foundationBonus;\r\n    uint256 foundationTokens;\r\n  }\r\n  mapping (address => AdvisorStruct) advisor;\r\n  mapping (address => BackerStruct) backer;\r\n  mapping (address => FounderStruct) founder;\r\n  mapping (address => FoundationStruct) foundation;\r\n  mapping (address => PrivatePurchaserStruct) privatePurchaser;\r\n  /**\r\n   *  @uint256 totalSupply - Total supply of tokens \r\n   *  @uint256 publicSupply - Total public Supply \r\n   *  @uint256 bountySupply - Total Bounty Supply \r\n   *  @uint256 privateSupply - Total Private Supply \r\n   *  @uint256 advisorSupply - Total Advisor Supply \r\n   *  @uint256 backerSupply - Total Backer Supply\r\n   *  @uint256 founderSupply - Total Founder Supply \r\n   *  @uint256 foundationSupply - Total Foundation Supply \r\n  */\r\n      \r\n  uint256 public totalTokens = 105926908800000000000000000; \r\n  uint256 internal publicSupply = 775353800000000000000000; \r\n  uint256 internal bountySupply = 657896000000000000000000;\r\n  uint256 internal privateSupply = 52589473690000000000000000;  \r\n  uint256 internal advisorSupply = 2834024170000000000000000;\r\n  uint256 internal backerSupply = 317780730000000000000000;\r\n  uint256 internal founderSupply = 10592690880000000000000000;\r\n  uint256 internal foundationSupply = 38159689530000000000000000; \r\n  event AdvisorTokenTransfer (address indexed beneficiary, uint256 amount);\r\n  event BackerTokenTransfer (address indexed beneficiary, uint256 amount);\r\n  event FoundationTokenTransfer (address indexed beneficiary, uint256 amount);\r\n  event FounderTokenTransfer (address indexed beneficiary, uint256 amount);\r\n  event PrivatePurchaserTokenTransfer (address indexed beneficiary, uint256 amount);\r\n  event AddAdvisor (address indexed advisorAddress, uint timeLock, uint256 advisorToken);\r\n  event AddBacker (address indexed backerAddress, uint timeLock, uint256 backerToken);\r\n  event AddFoundation (address indexed foundationAddress, uint timeLock, uint256 foundationToken, uint256 foundationBonus);\r\n  event AddFounder (address indexed founderAddress, uint timeLock, uint256 founderToken);\r\n  event BountyTokenTransfer (address indexed beneficiary, uint256 amount);\r\n  event PublicTokenTransfer (address indexed beneficiary, uint256 amount);\r\n  event AddPrivatePurchaser (address indexed privatePurchaserAddress, uint timeLock, uint256 privatePurchaserTokens, uint256 privatePurchaserBonus);\r\n  function addAdvisors (address advisorAddress, uint timeLock, uint256 advisorToken) onlyOwner public returns(bool acknowledgement) {\r\n      \r\n      require(now < timeLock || timeLock == 0);\r\n      require(advisorToken > 0);\r\n      require(advisorAddress != 0x0);\r\n      require(advisorSupply >= advisorToken);\r\n      advisorSupply = SafeMath.sub(advisorSupply,advisorToken);\r\n      \r\n      advisor[advisorAddress].advisorTimeLock = timeLock;\r\n      advisor[advisorAddress].advisorTokens = advisorToken;\r\n      \r\n      AddAdvisor(advisorAddress, timeLock, advisorToken);\r\n      return true;\r\n        \r\n  }\r\n  function getAdvisorStatus (address addr) public view returns(address, uint, uint256) {\r\n        return (addr, advisor[addr].advisorTimeLock, advisor[addr].advisorTokens);\r\n  } \r\n  function addBackers (address backerAddress, uint timeLock, uint256 backerToken) onlyOwner public returns(bool acknowledgement) {\r\n      \r\n      require(now < timeLock || timeLock == 0);\r\n      require(backerToken > 0);\r\n      require(backerAddress != 0x0);\r\n      require(backerSupply >= backerToken);\r\n      backerSupply = SafeMath.sub(backerSupply,backerToken);\r\n           \r\n      backer[backerAddress].backerTimeLock = timeLock;\r\n      backer[backerAddress].backerTokens = backerToken;\r\n      \r\n      AddBacker(backerAddress, timeLock, backerToken);\r\n      return true;\r\n        \r\n  }\r\n  function getBackerStatus(address addr) public view returns(address, uint, uint256) {\r\n        return (addr, backer[addr].backerTimeLock, backer[addr].backerTokens);\r\n  } \r\n  function addFounder(address founderAddress, uint timeLock, uint256 founderToken) onlyOwner public returns(bool acknowledgement) {\r\n      \r\n      require(now < timeLock || timeLock == 0);\r\n      require(founderToken > 0);\r\n      require(founderAddress != 0x0);\r\n      require(founderSupply >= founderToken);\r\n      founderSupply = SafeMath.sub(founderSupply,founderToken);  \r\n      founder[founderAddress].founderTimeLock = timeLock;\r\n      founder[founderAddress].founderTokens = founderToken;\r\n      \r\n      AddFounder(founderAddress, timeLock, founderToken);\r\n      return true;\r\n        \r\n  }\r\n  function getFounderStatus(address addr) public view returns(address, uint, uint256) {\r\n        return (addr, founder[addr].founderTimeLock, founder[addr].founderTokens);\r\n  }\r\n  function addFoundation(address foundationAddress, uint timeLock, uint256 foundationToken, uint256 foundationBonus) onlyOwner public returns(bool acknowledgement) {\r\n      \r\n      require(now < timeLock || timeLock == 0);\r\n      require(foundationToken > 0);\r\n      require(foundationBonus > 0);\r\n      require(foundationAddress != 0x0);\r\n      uint256 totalTokens = SafeMath.add(foundationToken, foundationBonus);\r\n      require(foundationSupply >= totalTokens);\r\n      foundationSupply = SafeMath.sub(foundationSupply, totalTokens);  \r\n      foundation[foundationAddress].foundationBonus = foundationBonus;\r\n      foundation[foundationAddress].foundationTimeLock = timeLock;\r\n      foundation[foundationAddress].foundationTokens = foundationToken;\r\n      \r\n      AddFoundation(foundationAddress, timeLock, foundationToken, foundationBonus);\r\n      return true;\r\n        \r\n  }\r\n  function getFoundationStatus(address addr) public view returns(address, uint, uint256, uint256) {\r\n        return (addr, foundation[addr].foundationTimeLock, foundation[addr].foundationBonus, foundation[addr].foundationTokens);\r\n  }\r\n  function addPrivatePurchaser(address privatePurchaserAddress, uint timeLock, uint256 privatePurchaserToken, uint256 privatePurchaserBonus) onlyOwner public returns(bool acknowledgement) {\r\n      \r\n      require(now < timeLock || timeLock == 0);\r\n      require(privatePurchaserToken > 0);\r\n      require(privatePurchaserBonus > 0);\r\n      require(privatePurchaserAddress != 0x0);\r\n      uint256 totalTokens = SafeMath.add(privatePurchaserToken, privatePurchaserBonus);\r\n      require(privateSupply >= totalTokens);\r\n      privateSupply = SafeMath.sub(privateSupply, totalTokens);        \r\n      privatePurchaser[privatePurchaserAddress].privatePurchaserTimeLock = timeLock;\r\n      privatePurchaser[privatePurchaserAddress].privatePurchaserTokens = privatePurchaserToken;\r\n      privatePurchaser[privatePurchaserAddress].privatePurchaserBonus = privatePurchaserBonus;\r\n      \r\n      AddPrivatePurchaser(privatePurchaserAddress, timeLock, privatePurchaserToken, privatePurchaserBonus);\r\n      return true;\r\n        \r\n  }\r\n  function getPrivatePurchaserStatus(address addr) public view returns(address, uint256, uint, uint) {\r\n        return (addr, privatePurchaser[addr].privatePurchaserTimeLock, privatePurchaser[addr].privatePurchaserTokens, privatePurchaser[addr].privatePurchaserBonus);\r\n  }\r\n  function TokenFunctions() internal {\r\n    token = createTokenContract();\r\n  }\r\n  /**\r\n   * function createTokenContract - Mintable Token Created\r\n   */\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n  \r\n  /** \r\n   * function getTokenAddress - Get Token Address \r\n   */\r\n  function getTokenAddress() onlyOwner public returns (address) {\r\n    return token;\r\n  }\r\n}\r\n/**\r\n * @title HazzaToken \r\n */\r\n \r\ncontract HazzaToken is MintableToken {\r\n    /**\r\n    *  @string name - Token Name\r\n    *  @string symbol - Token Symbol\r\n    *  @uint8 decimals - Token Decimals\r\n    *  @uint256 _totalSupply - Token Total Supply\r\n    */\r\n    string public constant name = \"HAZZA\";\r\n    string public constant symbol = \"HAZ\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant _totalSupply = 105926908800000000000000000;\r\n  \r\n    /** Constructor HazzaToken */\r\n    function HazzaToken() {\r\n        totalSupply = _totalSupply;\r\n    }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract TokenDistribution is TokenFunctions {\r\n  /** \r\n  * function grantAdvisorToken - Transfer advisor tokens \r\n  */\r\n    function grantAdvisorToken() public returns(bool response) {\r\n        require(advisor[msg.sender].advisorTokens > 0);\r\n        require(now > advisor[msg.sender].advisorTimeLock);\r\n        uint256 transferToken = advisor[msg.sender].advisorTokens;\r\n        advisor[msg.sender].advisorTokens = 0;\r\n        token.mint(msg.sender, transferToken);\r\n        AdvisorTokenTransfer(msg.sender, transferToken);\r\n        \r\n        return true;\r\n      \r\n    }\r\n  /** \r\n  * function grantBackerToken - Transfer backer tokens\r\n  */\r\n    function grantBackerToken() public returns(bool response) {\r\n        require(backer[msg.sender].backerTokens > 0);\r\n        require(now > backer[msg.sender].backerTimeLock);\r\n        uint256 transferToken = backer[msg.sender].backerTokens;\r\n        backer[msg.sender].backerTokens = 0;\r\n        token.mint(msg.sender, transferToken);\r\n        BackerTokenTransfer(msg.sender, transferToken);\r\n        \r\n        return true;\r\n      \r\n    }\r\n  /** \r\n  * function grantFoundationToken - Transfer foundation tokens  \r\n  */\r\n    function grantFoundationToken() public returns(bool response) {\r\n  \r\n        if (now > foundation[msg.sender].foundationTimeLock) {\r\n                require(foundation[msg.sender].foundationTokens > 0);\r\n                uint256 transferToken = foundation[msg.sender].foundationTokens;\r\n                foundation[msg.sender].foundationTokens = 0;\r\n                token.mint(msg.sender, transferToken);\r\n                FoundationTokenTransfer(msg.sender, transferToken);\r\n        }\r\n        \r\n        if (foundation[msg.sender].foundationBonus > 0) {\r\n                uint256 transferTokenBonus = foundation[msg.sender].foundationBonus;\r\n                foundation[msg.sender].foundationBonus = 0;\r\n                token.mint(msg.sender, transferTokenBonus);\r\n                FoundationTokenTransfer(msg.sender, transferTokenBonus);\r\n        }\r\n        return true;\r\n      \r\n    }\r\n  /** \r\n  * function grantFounderToken - Transfer founder tokens  \r\n  */\r\n    function grantFounderToken() public returns(bool response) {\r\n        require(founder[msg.sender].founderTokens > 0);\r\n        require(now > founder[msg.sender].founderTimeLock);\r\n        uint256 transferToken = founder[msg.sender].founderTokens;\r\n        founder[msg.sender].founderTokens = 0;\r\n        token.mint(msg.sender, transferToken);\r\n        FounderTokenTransfer(msg.sender, transferToken);\r\n        \r\n        return true;\r\n      \r\n    }\r\n  /** \r\n  * function grantPrivatePurchaserToken - Transfer Private Purchasers tokens\r\n  */\r\n    function grantPrivatePurchaserToken() public returns(bool response) {\r\n        if (now > privatePurchaser[msg.sender].privatePurchaserTimeLock) {\r\n                require(privatePurchaser[msg.sender].privatePurchaserTokens > 0);\r\n                uint256 transferToken = privatePurchaser[msg.sender].privatePurchaserTokens;\r\n                privatePurchaser[msg.sender].privatePurchaserTokens = 0;\r\n                token.mint(msg.sender, transferToken);\r\n                PrivatePurchaserTokenTransfer(msg.sender, transferToken);\r\n        }\r\n        \r\n        if (privatePurchaser[msg.sender].privatePurchaserBonus > 0) {\r\n                uint256 transferBonusToken = privatePurchaser[msg.sender].privatePurchaserBonus;\r\n                privatePurchaser[msg.sender].privatePurchaserBonus = 0;\r\n                token.mint(msg.sender, transferBonusToken);\r\n                PrivatePurchaserTokenTransfer(msg.sender, transferBonusToken);\r\n        }\r\n        return true;\r\n      \r\n    }\r\n    /** \r\n    * function bountyFunds - Transfer bounty tokens via AirDrop\r\n    * @param beneficiary address where owner wants to transfer tokens\r\n    * @param tokens value of token\r\n    */\r\n    function bountyTransferToken(address[] beneficiary, uint256[] tokens) onlyOwner public {\r\n        for (uint i = 0; i < beneficiary.length; i++) {\r\n        require(bountySupply >= tokens[i]);\r\n        bountySupply = SafeMath.sub(bountySupply, tokens[i]);\r\n        token.mint(beneficiary[i], tokens[i]);\r\n        BountyTokenTransfer(beneficiary[i], tokens[i]);\r\n        \r\n        }\r\n    }\r\n        /** \r\n    * function publicTransferToken - Transfer public tokens via AirDrop\r\n    * @param beneficiary address where owner wants to transfer tokens\r\n    * @param tokens value of token\r\n    */\r\n    function publicTransferToken(address[] beneficiary, uint256[] tokens) onlyOwner public {\r\n        for (uint i = 0; i < beneficiary.length; i++) {\r\n        \r\n        require(publicSupply >= tokens[i]);\r\n        publicSupply = SafeMath.sub(publicSupply,tokens[i]);\r\n        token.mint(beneficiary[i], tokens[i]);\r\n        PublicTokenTransfer(beneficiary[i], tokens[i]);\r\n        }\r\n    }\r\n}\r\ncontract HazzaTokenInterface is TokenFunctions, TokenDistribution {\r\n  \r\n    /** Constructor HazzaTokenInterface */\r\n    function HazzaTokenInterface() public TokenFunctions() {\r\n    }\r\n    \r\n    /** HazzaToken Contract */\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new HazzaToken();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"grantPrivatePurchaserToken\",\"outputs\":[{\"name\":\"response\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPrivatePurchaserStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getFounderStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"grantFounderToken\",\"outputs\":[{\"name\":\"response\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"grantAdvisorToken\",\"outputs\":[{\"name\":\"response\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAdvisorStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"foundationAddress\",\"type\":\"address\"},{\"name\":\"timeLock\",\"type\":\"uint256\"},{\"name\":\"foundationToken\",\"type\":\"uint256\"},{\"name\":\"foundationBonus\",\"type\":\"uint256\"}],\"name\":\"addFoundation\",\"outputs\":[{\"name\":\"acknowledgement\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"grantBackerToken\",\"outputs\":[{\"name\":\"response\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"publicTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"backerAddress\",\"type\":\"address\"},{\"name\":\"timeLock\",\"type\":\"uint256\"},{\"name\":\"backerToken\",\"type\":\"uint256\"}],\"name\":\"addBackers\",\"outputs\":[{\"name\":\"acknowledgement\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBackerStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"founderAddress\",\"type\":\"address\"},{\"name\":\"timeLock\",\"type\":\"uint256\"},{\"name\":\"founderToken\",\"type\":\"uint256\"}],\"name\":\"addFounder\",\"outputs\":[{\"name\":\"acknowledgement\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"advisorAddress\",\"type\":\"address\"},{\"name\":\"timeLock\",\"type\":\"uint256\"},{\"name\":\"advisorToken\",\"type\":\"uint256\"}],\"name\":\"addAdvisors\",\"outputs\":[{\"name\":\"acknowledgement\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"grantFoundationToken\",\"outputs\":[{\"name\":\"response\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"privatePurchaserAddress\",\"type\":\"address\"},{\"name\":\"timeLock\",\"type\":\"uint256\"},{\"name\":\"privatePurchaserToken\",\"type\":\"uint256\"},{\"name\":\"privatePurchaserBonus\",\"type\":\"uint256\"}],\"name\":\"addPrivatePurchaser\",\"outputs\":[{\"name\":\"acknowledgement\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getFoundationStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"bountyTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdvisorTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BackerTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FoundationTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FounderTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrivatePurchaserTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"advisorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeLock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"advisorToken\",\"type\":\"uint256\"}],\"name\":\"AddAdvisor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"backerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeLock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"backerToken\",\"type\":\"uint256\"}],\"name\":\"AddBacker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"foundationAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeLock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"foundationToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"foundationBonus\",\"type\":\"uint256\"}],\"name\":\"AddFoundation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"founderAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeLock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"founderToken\",\"type\":\"uint256\"}],\"name\":\"AddFounder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BountyTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PublicTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"privatePurchaserAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeLock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"privatePurchaserTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"privatePurchaserBonus\",\"type\":\"uint256\"}],\"name\":\"AddPrivatePurchaser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HazzaTokenInterface","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2667d01c11ca88d225197f6d0cc95d510c22714f1ff9a2a2c42a93420346154a"}]}