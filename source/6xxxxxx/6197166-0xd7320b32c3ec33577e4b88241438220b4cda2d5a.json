{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = 0x0;\r\n  }\r\n}\r\n\r\ncontract CanReclaimToken is Ownable {\r\n  \r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    require(token.transfer(owner, balance));\r\n  }\r\n\r\n}\r\n\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  constructor() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    require(owner.send(address(this).balance));\r\n  }\r\n}\r\n\r\ncontract HasNoTokens is CanReclaimToken {\r\n\r\n /**\r\n  * @dev Reject all ERC23 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ uint256 the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint256 value_, bytes data_) external {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CertificateRedeemer is Claimable, HasNoTokens, HasNoEther {\r\n    /// @dev A set of addresses that are approved to sign on behalf of this contract\r\n    mapping(address => bool) public signers;\r\n\r\n    /// @dev The nonce associated with each hash(accountId).  In this case, the account is an external\r\n    /// concept that does not correspond to an Ethereum address.  Therefore, the hash of the accountId\r\n    /// is used\r\n    mapping(bytes32 => uint256) public nonces;\r\n\r\n    address public token;\r\n    address public tokenHolder;\r\n\r\n    event TokenHolderChanged(address oldTokenHolder, address newTokenHolder);\r\n    event CertificateRedeemed(string accountId, uint256 amount, address recipient, uint256 nonce, address signer);\r\n    event SignerAdded(address signer);\r\n    event SignerRemoved(address signer);\r\n    event AccountNonceChanged(uint256 oldNonce, uint256 newNone);\r\n\r\n    constructor(address _token, address _tokenHolder)\r\n    public\r\n    {\r\n        token = _token;\r\n        tokenHolder = _tokenHolder;\r\n    }\r\n\r\n    function redeemWithdrawalCertificate(string accountId, uint256 amount, address recipient, bytes signature)\r\n      external\r\n      returns (bool)\r\n    {\r\n        // although the external accountId is a string, internally we use a hash of the string\r\n        bytes32 accountHash = hashAccountId(accountId);\r\n        uint256 nonce = nonces[accountHash]++;\r\n        \r\n        // compute the message that should have been signed for this action.\r\n        bytes32 unsignedMessage = generateWithdrawalHash(accountId, amount, recipient, nonce);\r\n\r\n        // assuming the computed message is correct, recover the signer from the given signature.\r\n        // If the actual message that was signed was a different message, the recovered signer\r\n        // address will be a random address. We can be sure the correct message was signed if\r\n        // the signer is one of our approved signers.\r\n        address signer = recoverSigner(unsignedMessage, signature);\r\n\r\n        // require that the signer is an approved signer\r\n        require(signers[signer]);\r\n\r\n        // log the event, including the nonce that was used and the signer that approved the action\r\n        emit CertificateRedeemed(accountId, amount, recipient, nonce, signer);\r\n\r\n        // make sure the transfer is successful\r\n        require(ERC20(token).transferFrom(tokenHolder, recipient, amount));\r\n\r\n        return true;\r\n    }\r\n\r\n    /// Helper Methods\r\n\r\n    /**\r\n     * @dev Generates the hash of the message that needs to be signed by an approved signer.\r\n     * The nonce is read directly from the contract's state.\r\n     */\r\n    function generateWithdrawalHash(string accountId, uint256 amount, address recipient, uint256 nonce)\r\n     view\r\n     public\r\n    returns (bytes32)\r\n    {\r\n        bytes memory message = abi.encodePacked(address(this), 'withdraw', accountId, amount, recipient, nonce);\r\n        bytes32 messageHash = keccak256(message);\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash));\r\n    }\r\n\r\n    /**\r\n     * @dev converts and accoutId to a bytes32\r\n     */\r\n    function hashAccountId(string accountId)\r\n    pure\r\n    internal\r\n    returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(accountId));\r\n    }\r\n\r\n\r\n    function recoverSigner(bytes32 _hash, bytes _signature)\r\n    internal\r\n    pure\r\n    returns (address)\r\n    {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        if (_signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(_signature, 32))\r\n            s := mload(add(_signature, 64))\r\n            v := byte(0, mload(add(_signature, 96)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            // solium-disable-next-line arg-overflow\r\n            return ecrecover(_hash, v, r, s);\r\n        }\r\n    }\r\n\r\n\r\n    /// Admin Methods\r\n\r\n    function updateTokenHolder(address newTokenHolder)\r\n     onlyOwner\r\n     external\r\n    {\r\n        address oldTokenHolder = tokenHolder;\r\n        tokenHolder = newTokenHolder;\r\n        emit TokenHolderChanged(oldTokenHolder, newTokenHolder);\r\n    }\r\n\r\n    function addSigner(address signer)\r\n     onlyOwner\r\n     external\r\n    {\r\n        signers[signer] = true;\r\n        emit SignerAdded(signer);\r\n    }\r\n\r\n    function removeSigner(address signer)\r\n     onlyOwner\r\n     external\r\n    {\r\n        signers[signer] = false;\r\n        emit SignerRemoved(signer);\r\n    }\r\n    \r\n    function setNonce(string accountId, uint256 newNonce) \r\n      public\r\n      onlyOwner\r\n    {\r\n        bytes32 accountHash = hashAccountId(accountId);\r\n        uint256 oldNonce = nonces[accountHash];\r\n        require(newNonce > oldNonce);\r\n        \r\n        nonces[accountHash] = newNonce;\r\n        \r\n        emit AccountNonceChanged(oldNonce, newNonce);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenHolder\",\"type\":\"address\"}],\"name\":\"updateTokenHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"redeemWithdrawalCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\"},{\"name\":\"newNonce\",\"type\":\"uint256\"}],\"name\":\"setNonce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"generateWithdrawalHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldTokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newTokenHolder\",\"type\":\"address\"}],\"name\":\"TokenHolderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"CertificateRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newNone\",\"type\":\"uint256\"}],\"name\":\"AccountNonceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CertificateRedeemer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000138a8752093f4f9a79aaedf48d4b9248fab93c9c0000000000000000000000009dbc1f531ef143cc820afd4aca4f872b66b14095","Library":"","SwarmSource":"bzzr://f6024889b46341479481dc77a2b54711bebdead897f3f7bb5adcecb976d09d94"}]}