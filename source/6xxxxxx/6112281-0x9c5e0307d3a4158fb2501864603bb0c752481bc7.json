{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint a, uint b) internal pure returns (uint c) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tc = a * b;\r\n\t\trequire(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint a, uint b) internal pure returns (uint c) {\r\n\t\treturn a / b;\r\n\t}\r\n}\r\n\r\ncontract DrupeCoin {\r\n\tfunction transfer(address to, uint tokens) public returns (bool success);\r\n\tfunction balanceOf(address tokenOwner) public constant returns (uint balance);\r\n}\r\n\r\n// Contract that forwards token purchases to the main ico contract\r\n// and references the referrer in order to sent a referral bonus:\r\ncontract DrupeICORef {\r\n\taddress _referrer;\r\n\tDrupeICO _ico;\r\n\r\n\tconstructor(address referrer, DrupeICO ico) public {\r\n\t\t_referrer = referrer;\r\n\t\t_ico = ico;\r\n\t}\r\n\r\n\tfunction() public payable {\r\n\t\t_ico.purchase.value(msg.value)(msg.sender, _referrer);\r\n\t}\r\n}\r\n\r\n// The main contract that holds all tokens for sale and accepts Ether:\r\ncontract DrupeICO {\r\n\tusing SafeMath for uint;\r\n\r\n\t// Representation of a fraction: n(numerator)/d(denominator)\r\n\tstruct Fraction { uint n; uint d; }\r\n\r\n\t// Representation of an ico phases:\r\n\tstruct Presale {\r\n\t\t// Start timestamp in seconds since unix epoch:\r\n\t\tuint start;\r\n\t\t// Bonus that applies to token purchases during this phase:\r\n\t\tFraction bonus;\r\n\t}\r\n\tstruct Mainsale {\r\n\t\t// Start timestamp in seconds since unix epoch:\r\n\t\tuint start;\r\n\t\t// End timestamp in seconds since unix epoch:\r\n\t\tuint end;\r\n\t}\r\n\r\n\t// Event that is emitted for each referral contract creation:\r\n\tevent Referrer(address indexed referrer, address indexed refContract);\r\n\r\n\taddress _owner;\r\n\taddress _newOwner;\r\n\tDrupeCoin _drupe;\r\n\tFraction _basePrice; // in: ETH per DPC\r\n\tFraction _refBonus;\r\n\tPresale _presale1;\r\n\tPresale _presale2;\r\n\tMainsale _mainsale;\r\n\r\n\tconstructor(\r\n\t\taddress drupe,\r\n\t\tuint basePriceN, uint basePriceD,\r\n\t\tuint refBonusN, uint refBonusD,\r\n\t\tuint presale1Start, uint presale1BonusN, uint presale1BonusD,\r\n\t\tuint presale2Start, uint presale2BonusN, uint presale2BonusD,\r\n\t\tuint mainsaleStart, uint mainsaleEnd\r\n\t) public {\r\n\t\trequire(drupe != address(0));\r\n\t\trequire(basePriceN > 0 && basePriceD > 0);\r\n\t\trequire(refBonusN > 0 && basePriceD > 0);\r\n\t\trequire(presale1Start > now);\r\n\t\trequire(presale1BonusN > 0 && presale1BonusD > 0);\r\n\t\trequire(presale2Start > presale1Start);\r\n\t\trequire(presale2BonusN > 0 && presale2BonusD > 0);\r\n\t\trequire(mainsaleStart > presale2Start);\r\n\t\trequire(mainsaleEnd > mainsaleStart);\r\n\r\n\t\t_owner = msg.sender;\r\n\t\t_newOwner = address(0);\r\n\t\t_drupe = DrupeCoin(drupe);\r\n\t\t_basePrice = Fraction({n: basePriceN, d: basePriceD});\r\n\t\t_refBonus = Fraction({n: refBonusN, d: refBonusD});\r\n\t\t_presale1 = Presale({\r\n\t\t\tstart: presale1Start,\r\n\t\t\tbonus: Fraction({n: presale1BonusN, d: presale1BonusD})\r\n\t\t});\r\n\t\t_presale2 = Presale({\r\n\t\t\tstart: presale2Start,\r\n\t\t\tbonus: Fraction({n: presale2BonusN, d: presale2BonusD})\r\n\t\t});\r\n\t\t_mainsale = Mainsale({\r\n\t\t\tstart: mainsaleStart,\r\n\t\t\tend: mainsaleEnd\r\n\t\t});\r\n\t}\r\n\r\n\t// Modifier to ensure that a function is only called during the ico:\r\n\tmodifier icoOnly() {\r\n\t\trequire(now >= _presale1.start && now < _mainsale.end);\r\n\t\t_;\r\n\t}\r\n\r\n\t// Modifier to ensure that a function is only called by the owner:\r\n\tmodifier ownerOnly() {\r\n\t\trequire(msg.sender == _owner);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\r\n\t// Internal function for determining the current bonus:\r\n\t// (It is assumed that this function is only called during the ico)\r\n\tfunction _getBonus() internal view returns (Fraction memory bonus) {\r\n\t\tif (now < _presale2.start) {\r\n\t\t\tbonus = _presale1.bonus;\r\n\t\t} else if (now < _mainsale.start) {\r\n\t\t\tbonus = _presale2.bonus;\r\n\t\t} else {\r\n\t\t\tbonus = Fraction({n: 0, d: 1});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t// Exchange Ether for tokens:\r\n\tfunction() public payable icoOnly {\r\n\t\tFraction memory bonus = _getBonus();\r\n\r\n\t\t// Calculate the raw amount of tokens:\r\n\t\tuint rawTokens = msg.value.mul(_basePrice.d).div(_basePrice.n);\r\n\t\t// Calculate the amount of tokens including bonus:\r\n\t\tuint tokens = rawTokens + rawTokens.mul(bonus.n).div(bonus.d);\r\n\r\n\t\t// Transfer tokens to the sender:\r\n\t\t_drupe.transfer(msg.sender, tokens);\r\n\t\t// (Sent Ether will remain on this contract)\r\n\r\n\t\t// Create referral contract for the sender:\r\n\t\taddress refContract = new DrupeICORef(msg.sender, this);\r\n\t\temit Referrer(msg.sender, refContract);\r\n\t}\r\n\r\n\t// Extended function for exchanging Ether for tokens.\r\n\t//  - aquired tokens will be send to the payout address.\r\n\t//  - ref bonus tokens will be send to the referrer.\r\n\tfunction purchase(address payout, address referrer) public payable icoOnly returns (uint tokens) {\r\n\t\tFraction memory bonus = _getBonus();\r\n\r\n\t\t// Calculate the raw amount of tokens:\r\n\t\tuint rawTokens = msg.value.mul(_basePrice.d).div(_basePrice.n);\r\n\t\t// Calculate the amount of tokens including bonus:\r\n\t\ttokens = rawTokens + rawTokens.mul(bonus.n).div(bonus.d);\r\n\t\t// Calculate the amount of tokens for the referrer:\r\n\t\tuint refTokens = rawTokens.mul(_refBonus.n).div(_refBonus.d);\r\n\r\n\t\t// Transfer tokens to the payout address:\r\n\t\t_drupe.transfer(payout, tokens);\r\n\t\t// Transfer ref bonus tokens to the referrer:\r\n\t\t_drupe.transfer(referrer, refTokens);\r\n\t\t// (Sent Ether will remain on this contract)\r\n\r\n\t\t// Create referral contract for the sender:\r\n\t\taddress refContract = new DrupeICORef(payout, this);\r\n\t\temit Referrer(payout, refContract);\r\n\t}\r\n\r\n\r\n\r\n\t// Function that can be used to burn unsold tokens after the ico has ended:\r\n\tfunction burnUnsoldTokens() public ownerOnly {\r\n\t\trequire(now >= _mainsale.end);\r\n\t\tuint unsoldTokens = _drupe.balanceOf(this);\r\n\t\t_drupe.transfer(address(0), unsoldTokens);\r\n\t}\r\n\r\n\t// Function that the owner can withdraw funds:\r\n\tfunction withdrawFunds(uint value) public ownerOnly {\r\n\t\tmsg.sender.transfer(value);\r\n\t}\r\n\r\n\r\n\r\n\tfunction getOwner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public ownerOnly {\r\n\t\t_newOwner = newOwner;\r\n\t}\r\n\r\n\tfunction acceptOwnership() public {\r\n\t\trequire(msg.sender == _newOwner);\r\n\t\t_owner = _newOwner;\r\n\t\t_newOwner = address(0);\r\n\t}\r\n\r\n\r\n\r\n\tfunction getDrupeCoin() public view returns (address) {\r\n\t\treturn _drupe;\r\n\t}\r\n\r\n\tfunction getBasePrice() public view returns (uint n, uint d) {\r\n\t\tn = _basePrice.n;\r\n\t\td = _basePrice.d;\r\n\t}\r\n\r\n\tfunction getRefBonus() public view returns (uint n, uint d) {\r\n\t\tn = _refBonus.n;\r\n\t\td = _refBonus.d;\r\n\t}\r\n\r\n\tfunction getPresale1() public view returns (uint start, uint bonusN, uint bonusD) {\r\n\t\tstart = _presale1.start;\r\n\t\tbonusN = _presale1.bonus.n;\r\n\t\tbonusD = _presale1.bonus.d;\r\n\t}\r\n\r\n\tfunction getPresale2() public view returns (uint start, uint bonusN, uint bonusD) {\r\n\t\tstart = _presale2.start;\r\n\t\tbonusN = _presale2.bonus.n;\r\n\t\tbonusD = _presale2.bonus.d;\r\n\t}\r\n\r\n\tfunction getMainsale() public view returns (uint start, uint end) {\r\n\t\tstart = _mainsale.start;\r\n\t\tend = _mainsale.end;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMainsale\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPresale2\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"bonusN\",\"type\":\"uint256\"},{\"name\":\"bonusD\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDrupeCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPresale1\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"bonusN\",\"type\":\"uint256\"},{\"name\":\"bonusD\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRefBonus\",\"outputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"d\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBasePrice\",\"outputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"d\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payout\",\"type\":\"address\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"drupe\",\"type\":\"address\"},{\"name\":\"basePriceN\",\"type\":\"uint256\"},{\"name\":\"basePriceD\",\"type\":\"uint256\"},{\"name\":\"refBonusN\",\"type\":\"uint256\"},{\"name\":\"refBonusD\",\"type\":\"uint256\"},{\"name\":\"presale1Start\",\"type\":\"uint256\"},{\"name\":\"presale1BonusN\",\"type\":\"uint256\"},{\"name\":\"presale1BonusD\",\"type\":\"uint256\"},{\"name\":\"presale2Start\",\"type\":\"uint256\"},{\"name\":\"presale2BonusN\",\"type\":\"uint256\"},{\"name\":\"presale2BonusD\",\"type\":\"uint256\"},{\"name\":\"mainsaleStart\",\"type\":\"uint256\"},{\"name\":\"mainsaleEnd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"refContract\",\"type\":\"address\"}],\"name\":\"Referrer\",\"type\":\"event\"}]","ContractName":"DrupeICO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003e0132984c959b9c34a50d5cea4272d3bf58bdb500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000dac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000005b7486400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000005b9d64c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000005bc4f1c0000000000000000000000000000000000000000000000000000000005c155d40","Library":"","SwarmSource":"bzzr://ea10af2ae5cfc1e2aaee374af41a9c74906abbae372f9ccf912b7cb758bcde3d"}]}