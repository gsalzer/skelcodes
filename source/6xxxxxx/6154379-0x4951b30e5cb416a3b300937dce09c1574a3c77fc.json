{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\n/**\r\n * @author Denver Brittain\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n   * @dev transfer token for a specified address\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param _owner The address to query the the balance of.\r\n   * @return An uint256 representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title StandardCrowdsale \r\n * @dev StandardCrowdsale is a base contract for managing a token crowdsale.\r\n * This crowdsale has been modified to contain a presale start and end time \r\n * with presale bonuses and an ongoing ICO that is not complete until all tokens\r\n * have been sold and transferred from the holding contract.\r\n * @dev from Crowdsale by Zepellin with a few differences, the most important of \r\n * which are the tiered presale pricing structure, presale start \r\n * and conclusion times, and the ongoing ICO.\"\r\n */\r\ncontract StandardCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // our token being sold\r\n    StandardToken public token; \r\n\r\n    // presale has a start and end time, ICO only has a start time\r\n    uint256 public icoStartTime;\r\n    uint256 public presaleStartTime;\r\n    uint256 public presaleEndTime;\r\n\r\n    // funding is collected here\r\n    address public wallet;\r\n\r\n    // the number of tokens/wei distributed to a buyer depends on a number of factors\r\n    // if the presale is active, the number of tokens a buyer receives per wei depends \r\n    // on the amount of wei sent: the tiered pricing structure\r\n    // if the ICO is active, the buyer receives a fixed number of tokens/wei at the icoRate\r\n    uint256 public icoRate;\r\n    uint256 public tier1Rate;\r\n    uint256 public tier2Rate;\r\n    uint256 public tier3Rate;\r\n    uint256 public tier4Rate;\r\n\r\n\r\n    // total funds raised in wei\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param value in wei paid for purchase\r\n     * @param amount (number) of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n    // modified standard crowdsale must be supplied presale and ico tiers for token purchase rates\r\n    function StandardCrowdsale(\r\n        uint256 _icoStartTime,  \r\n        uint256 _presaleStartTime,\r\n        uint256 _presaleEndTime,\r\n        uint256 _icoRate, \r\n        uint256 _tier1Rate,\r\n        uint256 _tier2Rate,\r\n        uint256 _tier3Rate,\r\n        uint256 _tier4Rate,\r\n        address _wallet) {\r\n\r\n        require(_icoStartTime >= now);\r\n        require(_icoRate > 0);\r\n        require(_wallet != 0x0);\r\n\r\n        icoStartTime = _icoStartTime;\r\n        presaleStartTime = _presaleStartTime;\r\n        presaleEndTime = _presaleEndTime;\r\n        tier1Rate = _tier1Rate;\r\n        tier2Rate = _tier2Rate;\r\n        tier3Rate = _tier3Rate;\r\n        tier4Rate = _tier4Rate;\r\n\r\n        icoRate = _icoRate;\r\n        wallet = _wallet;\r\n\r\n        token = createTokenContract(); \r\n    }\r\n\r\n    function createTokenContract() internal returns(StandardToken) {\r\n        return new StandardToken();\r\n    }\r\n\r\n    // buyers may purchase tokens through fallback function\r\n    // if registered, simply send wei to contract during active presale\r\n    // or ICO times to receive tokens\r\n    function () payable {\r\n        buyTokens();\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens() public payable {\r\n\r\n        // purhcase must occur during either ICO or presale\r\n        require(validPurchase()); \r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be sent\r\n        // set to ICO values and update for presale bonuses if necessary\r\n        // accept a maximum of 600 ether during presale\r\n        uint256 tokens = weiAmount.mul(icoRate);\r\n\r\n        // if presale is active, confirm that purchase does not go over presale \r\n        // funding cap and calculate presale tokens to be transferred\r\n        if ((now >= presaleStartTime && now < presaleEndTime) && weiRaised.add(weiAmount) <= 600 ether) {        \r\n            if (weiAmount < 2 ether) \r\n                tokens = weiAmount.mul(tier1Rate);\r\n            if (weiAmount >= 2 ether && weiAmount < 5 ether) \r\n                tokens = weiAmount.mul(tier2Rate);\r\n            if (weiAmount >= 5 ether && weiAmount < 10 ether)\r\n                tokens = weiAmount.mul(tier3Rate);\r\n            if (weiAmount >= 10 ether)\r\n                tokens = weiAmount.mul(tier4Rate);\r\n        } \r\n\r\n        // update funds raised by new purchase\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        require(token.transfer(msg.sender, tokens));\r\n        TokenPurchase(msg.sender, weiAmount, tokens);\r\n\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens from presale or ICO, includes funding cap check \r\n    function validPurchase() internal returns(bool) {\r\n        bool withinPresalePeriod = now >= presaleStartTime;\r\n        bool withinICOPeriod = now >= icoStartTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return (withinPresalePeriod && nonZeroPurchase && weiRaised <= 600 ether) || (withinICOPeriod && nonZeroPurchase && weiRaised <= 3000 ether);\r\n    }\r\n}\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is StandardCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return capReached;\r\n  }\r\n}\r\n\r\n/** \r\n * @title WhitelistedCrowdsale\r\n * @dev WhitelistedCrowdsale is a contract for managing a \r\n * token sale with a clearly defined whitelist of addresses \r\n * who may purchase tokens. \r\n * @dev WhitelistedCrowdsale based on RequestNetwork: https://github.com/RequestNetwork/RequestTokenSale \r\n*/ \r\ncontract WhitelistedCrowdsale is StandardCrowdsale, Ownable {\r\n    \r\n    mapping(address=>bool) public registered;\r\n\r\n    event RegistrationStatusChanged(address target, bool isRegistered);\r\n\r\n    function changeRegistrationStatus(address target, bool isRegistered) public onlyOwner {\r\n        registered[target] = isRegistered;\r\n        RegistrationStatusChanged(target, isRegistered);\r\n    }\r\n\r\n    function changeRegistrationStatuses(address[] targets, bool isRegistered) public onlyOwner {\r\n        for (uint i = 0; i < targets.length; i++) {\r\n            changeRegistrationStatus(targets[i], isRegistered);\r\n        }\r\n    }\r\n\r\n    function validPurchase() internal returns (bool) {\r\n        return super.validPurchase() && registered[msg.sender];\r\n    }\r\n}\r\n\r\n/** \r\n * @dev ApolloCoinToken definition. This is a very standard token definition that \r\n * contains a few additional features to the typical ERC20 token including a timelock,\r\n * and a valid transfer destination check\r\n*/\r\ncontract ApolloCoinToken is StandardToken, Ownable {\r\n    string  public  constant name = \"ApolloCoin\";\r\n    string  public  constant symbol = \"APC\";\r\n    uint8   public  constant decimals = 18;\r\n\r\n    uint    public  transferableStartTime;\r\n\r\n    address public  tokenSaleContract;\r\n    address public  earlyInvestorWallet;\r\n\r\n\r\n    modifier onlyWhenTransferEnabled() {\r\n        if ( now <= transferableStartTime ) {\r\n            require(msg.sender == tokenSaleContract || msg.sender == earlyInvestorWallet || msg.sender == owner);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier validDestination(address to) {\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    function ApolloCoinToken(uint tokenTotalAmount, uint _transferableStartTime, address _admin, address _earlyInvestorWallet) {\r\n        \r\n       // Mint total supply and permanently disable minting\r\n       totalSupply = tokenTotalAmount * (10 ** uint256(decimals));\r\n\r\n        balances[msg.sender] = totalSupply;\r\n        Transfer(address(0x0), msg.sender, totalSupply);\r\n\r\n        transferableStartTime = _transferableStartTime;     // tokens may only be transferred after this time\r\n        tokenSaleContract = msg.sender;\r\n        earlyInvestorWallet = _earlyInvestorWallet;\r\n\r\n        transferOwnership(_admin); \r\n    }\r\n\r\n    function transfer(address _to, uint _value) public validDestination(_to) onlyWhenTransferEnabled returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public validDestination(_to) onlyWhenTransferEnabled returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    event Burn(address indexed _burner, uint _value);\r\n\r\n    /**\r\n     * @dev burn tokens\r\n     * @param _value The amount to be burned.\r\n     * @return always true (necessary in case of override)\r\n     */\r\n    function burn(uint _value) public onlyWhenTransferEnabled returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(msg.sender, _value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev burn tokens on behalf of someone\r\n     * @param _from The address of the owner of the token\r\n     * @param _value The amount to be burned\r\n     * @return always true (necessary in case of override)\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public onlyWhenTransferEnabled returns(bool) {\r\n        assert(transferFrom(_from, msg.sender, _value));\r\n        return burn(_value);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer to owner any tokens sent here by mistake \r\n     * @param token The address of the token to transfer\r\n     * @param amount The amount to be transfered\r\n     */\r\n    function emergencyERC20Drain(ERC20 token, uint amount ) public onlyOwner {\r\n        token.transfer(owner, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev ApolloCoinTokenSale contract to define the transferrable start time, ICO hard cap, \r\n * tiered presale bonuses, and distribution of tokens to devs, early investors, and ApolloCoin company wallets.\r\n*/\r\ncontract ApolloCoinTokenSale is Ownable, CappedCrowdsale, WhitelistedCrowdsale {\r\n   \r\n    // hard cap on total ether collected \r\n    uint private constant HARD_CAP = 3000 ether;\r\n\r\n    // total supply cap\r\n    uint public constant TOTAL_APC_SUPPLY = 21000000;\r\n\r\n    // ICO rate definition\r\n    // buyers receive 900 APC per ETH sent\r\n    uint private constant ICO_RATE = 900;\r\n\r\n    // presale rate definitions \r\n    uint private constant TIER1_RATE = 1080;\r\n    uint private constant TIER2_RATE = 1440;\r\n    uint private constant TIER3_RATE = 1620;\r\n    uint private constant TIER4_RATE = 1800; \r\n\r\n    // Tokens initialy distributed for the team (20%)\r\n    address public constant TEAM_WALLET = 0xd55de4cdade91f8b3d0ad44e5bc0074840bcf287;\r\n    uint public constant TEAM_AMOUNT = 4200000e18;\r\n\r\n    // Tokens initialy distributed to early investors (35%)\r\n    address public constant EARLY_INVESTOR_WALLET = 0x67e84a30d6c33f90e9aef0b9147455f4c8d85208;\r\n    uint public constant EARLY_INVESTOR_AMOUNT = 7350000e18;\r\n\r\n    // Tokens initialy distributed to the company (30%)\r\n    // wallet also used to gather the ether of the token sale\r\n    address private constant APOLLOCOIN_COMPANY_WALLET = 0x129c3e7ac8e80511d50a77d757bb040a1132f59c;\r\n    uint public constant APOLLOCOIN_COMPANY_AMOUNT = 6300000e18;\r\n    \r\n    // tokens cannot be sent for 10 days following the start of the presale\r\n    uint public constant NON_TRANSFERABLE_TIME = 10 days;    \r\n\r\n    function ApolloCoinTokenSale(uint256 _icoStartTime, uint256 _presaleStartTime, uint256 _presaleEndTime) WhitelistedCrowdsale() CappedCrowdsale(HARD_CAP) StandardCrowdsale(_icoStartTime, _presaleStartTime, _presaleEndTime, ICO_RATE, TIER1_RATE, TIER2_RATE, TIER3_RATE, TIER4_RATE, APOLLOCOIN_COMPANY_WALLET) {\r\n        token.transfer(TEAM_WALLET, TEAM_AMOUNT);\r\n\r\n        token.transfer(EARLY_INVESTOR_WALLET, EARLY_INVESTOR_AMOUNT);\r\n\r\n        token.transfer(APOLLOCOIN_COMPANY_WALLET, APOLLOCOIN_COMPANY_AMOUNT);\r\n    }\r\n\r\n    function createTokenContract () internal returns(StandardToken) {\r\n        return new ApolloCoinToken(TOTAL_APC_SUPPLY, NON_TRANSFERABLE_TIME, APOLLOCOIN_COMPANY_WALLET, EARLY_INVESTOR_WALLET);\r\n    }\r\n\r\n    function drainRemainingToken () public onlyOwner {\r\n        require(hasEnded());\r\n        token.transfer(APOLLOCOIN_COMPANY_WALLET, token.balanceOf(this));\r\n    }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"EARLY_INVESTOR_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier1Rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier4Rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier2Rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier3Rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"changeRegistrationStatuses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drainRemainingToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NON_TRANSFERABLE_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_APC_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APOLLOCOIN_COMPANY_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EARLY_INVESTOR_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"changeRegistrationStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_icoStartTime\",\"type\":\"uint256\"},{\"name\":\"_presaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_presaleEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"RegistrationStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"ApolloCoinTokenSale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005beecd60000000000000000000000000000000000000000000000000000000005bed7be0000000000000000000000000000000000000000000000000000000005beecd24","Library":"","SwarmSource":"bzzr://91bb9f82d9161458d74a7eac61e94eb2f33a62419ff5769d417df75244f9c2e8"}]}