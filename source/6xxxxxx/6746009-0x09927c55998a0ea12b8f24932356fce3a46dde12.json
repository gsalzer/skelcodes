{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\nIntroducing \"ETHERKNIGHT\" 3.0 our first HDX20 POWERED GAME running on the Ethereum Blockchain got an upgrade \r\n\"ETHERKNIGHT\" is playable @ http://etherknightgame.io\r\n\r\nAbout the game :\r\n4 Knight Characters racing against each other to be the first to reach the goal and win the pot of gold.\r\n\r\nHow to play ETHERKNIGHT:\r\nThe Race will start after at least 1 player has bought shares of any Knight Racer then for every new item activated\r\na 24H countdown will reset. At the end of the countdown, the players on the first Racer will share the Treasure and\r\neverybody else will receive their payout (no one is leaving the table without values).\r\nIn addition, when you buy shares of your favorite Racer 5% of the price will buy you HDX20 Token earning you Ethereum\r\nfrom the volume of any HDX20 POWERED GAMES (visit https://hdx20.io/ for details).\r\nPlease remember, at every new buy, the price of the share is increasing a little and so will be your payout even\r\nif you are not the winner, buying shares at the beginning of the race is highly advised.\r\n\r\nPlay for the big WIN, Play for the TREASURE, Play for staking HDX20 TOKEN or Play for all at once...Your Choice!\r\n\r\nWe wish you Good Luck!\r\n\r\nPAYOUTS DISTRIBUTION:\r\n.60% to the winners of the race distributed proportionally to their shares.\r\n.25% to the community of HDX20 gamers/holders distributed as price appreciation.\r\n.5% to developer for running, developing and expanding the platform.\r\n.10% for provisioning the TREASURE for the next Race.\r\n\r\nUPDATE:\r\n\r\nwe updated:\r\n.the player can withdraw during the race any OWNED amount.\r\n.streamlined payment to HDX20 token holders.\r\n.from 1 eth played 50%(40% before) will charge the treasure, 30% (40% before) will buy shares, 5% will buy HDX20 for the player and 15% will appreciate the share price.\r\n.from the treasure =>60% for winners prizes, 5% for development fees, %25 (10% before) for HDX20 price appreciation, 10% (25% before) for provisioning the next round treasure.\r\n.adjusted the item price increase function. \r\n\r\nThis product is copyrighted. Any unauthorized copy, modification, or use without express written consent from HyperDevbox is prohibited.\r\n\r\nCopyright 2018 HyperDevbox\r\n\r\n*/\r\n\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\ninterface HDX20Interface\r\n{\r\n    function() payable external;\r\n    \r\n    \r\n    function buyTokenFromGame( address _customerAddress , address _referrer_address ) payable external returns(uint256);\r\n  \r\n    function payWithToken( uint256 _eth , address _player_address ) external returns(uint256);\r\n  \r\n    function appreciateTokenPrice() payable external;\r\n   \r\n    function totalSupply() external view returns(uint256); \r\n    \r\n    function ethBalanceOf(address _customerAddress) external view returns(uint256);\r\n  \r\n    function balanceOf(address _playerAddress) external view returns(uint256);\r\n    \r\n    function sellingPrice( bool includeFees) external view returns(uint256);\r\n  \r\n}\r\n\r\ncontract EtherKnightGame\r\n{\r\n     HDX20Interface private HDXcontract = HDX20Interface(0x8942a5995bd168f347f7ec58f25a54a9a064f882);\r\n     \r\n     using SafeMath for uint256;\r\n      using SafeMath128 for uint128;\r\n     \r\n     /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event OwnershipTransferred(\r\n        \r\n         address previousOwner,\r\n         address nextOwner,\r\n          uint256 timeStamp\r\n         );\r\n         \r\n    event HDXcontractChanged(\r\n        \r\n         address previous,\r\n         address next,\r\n         uint256 timeStamp\r\n         );\r\n \r\n   \r\n    \r\n     event onWithdrawGains(\r\n        address customerAddress,\r\n        uint256 ethereumWithdrawn,\r\n        uint256 timeStamp\r\n    );\r\n    \r\n    event onNewRound(\r\n        uint256       gRND,\r\n        uint32        turnRound,\r\n        uint32        eventType,\r\n        uint32        eventTarget,\r\n        uint32[4]     persoEnergy,\r\n        uint32[4]     persoDistance,\r\n        uint32[4]     powerUpSpeed,\r\n        uint32[4]     powerUpShield,\r\n        uint256       blockNumberTimeout,\r\n        uint256       treasureAmountFind,\r\n        address       customerAddress\r\n        \r\n       \r\n       \r\n    );\r\n    \r\n    \r\n    event onNewRace(\r\n        \r\n        uint256 gRND,\r\n        uint8[4] persoType,\r\n        uint256  blockNumber\r\n        \r\n        );\r\n        \r\n    event onBuyShare(\r\n        address     customerAddress,\r\n        uint256     gRND,\r\n        uint32      perso,\r\n        uint256     nbToken,\r\n        uint32      actionType,\r\n        uint32      actionValue\r\n        );    \r\n        \r\n        \r\n     event onMaintenance(\r\n        bool        mode,\r\n        uint256     timeStamp\r\n\r\n        );    \r\n        \r\n    event onRefund(\r\n        address     indexed customerAddress,\r\n        uint256     eth,\r\n        uint256     timeStamp\r\n         \r\n        );   \r\n        \r\n    event onCloseEntry(\r\n        \r\n         uint256 gRND\r\n         \r\n        );    \r\n        \r\n    event onChangeBlockTimeAverage(\r\n        \r\n         uint256 blocktimeavg\r\n         \r\n        );    \r\n        \r\n    /*==============================\r\n    =            MODIFIERS         =\r\n    ==============================*/\r\n    modifier onlyOwner\r\n    {\r\n        require (msg.sender == owner );\r\n        _;\r\n    }\r\n    \r\n    modifier onlyFromHDXToken\r\n    {\r\n        require (msg.sender == address( HDXcontract ));\r\n        _;\r\n    }\r\n   \r\n     modifier onlyDirectTransaction\r\n    {\r\n        require (msg.sender == tx.origin);\r\n        _;\r\n    }\r\n   \r\n   \r\n     modifier isPlayer\r\n    {\r\n        require (PlayerData[ msg.sender].gRND !=0);\r\n        _;\r\n    }\r\n    \r\n    modifier isMaintenance\r\n    {\r\n        require (maintenanceMode==true);\r\n        _;\r\n    }\r\n    \r\n     modifier isNotMaintenance\r\n    {\r\n        require (maintenanceMode==false);\r\n        _;\r\n    }\r\n   \r\n    // Changing ownership of the contract safely\r\n    address public owner;\r\n  \r\n    \r\n   \r\n    \r\n     /// Contract governance.\r\n\r\n    constructor () public\r\n    {\r\n        owner = msg.sender;\r\n       \r\n        \r\n        if ( address(this).balance > 0)\r\n        {\r\n            owner.transfer( address(this).balance );\r\n        }\r\n    }\r\n    \r\n    function changeOwner(address _nextOwner) public\r\n    onlyOwner\r\n    {\r\n        require (_nextOwner != owner);\r\n        require(_nextOwner != address(0));\r\n         \r\n        emit OwnershipTransferred(owner, _nextOwner , now);\r\n         \r\n        owner = _nextOwner;\r\n    }\r\n    \r\n    function changeHDXcontract(address _next) public\r\n    onlyOwner\r\n    {\r\n        require (_next != address( HDXcontract ));\r\n        require( _next != address(0));\r\n         \r\n        emit HDXcontractChanged(address(HDXcontract), _next , now);\r\n         \r\n        HDXcontract  = HDX20Interface( _next);\r\n    }\r\n  \r\n  \r\n    \r\n    function changeBlockTimeAverage( uint256 blocktimeavg) public\r\n    onlyOwner\r\n    {\r\n        require ( blocktimeavg>0 );\r\n        \r\n       \r\n        blockTimeAverage = blocktimeavg;\r\n        \r\n        emit onChangeBlockTimeAverage( blockTimeAverage );\r\n         \r\n    }\r\n    \r\n    function enableMaintenance() public\r\n    onlyOwner\r\n    {\r\n        maintenanceMode = true;\r\n        \r\n        emit onMaintenance( maintenanceMode , now);\r\n        \r\n    }\r\n\r\n    function disableMaintenance() public\r\n    onlyOwner\r\n    {\r\n        uint8[4] memory perso =[0,1,2,3];\r\n        \r\n        maintenanceMode = false;\r\n        \r\n        emit onMaintenance( maintenanceMode , now);\r\n        \r\n        //reset with a new race\r\n        initRace( perso );\r\n    }\r\n    \r\n  \r\n    \r\n    \r\n   \r\n    function refundMe() public\r\n    isMaintenance\r\n    {\r\n        address _playerAddress = msg.sender;\r\n         \r\n        \r\n      \r\n        require( this_gRND>0 && GameRoundData[ this_gRND].extraData[0]>0 && GameRoundData[ this_gRND].extraData[0]<(1<<30) && PlayerData[ _playerAddress ].gRND==this_gRND);\r\n        \r\n        uint256 _eth = 0;\r\n\r\n        for( uint i=0;i<4;i++)\r\n        {\r\n            _eth = _eth.add( PlayerGameRound[ _playerAddress][this_gRND].shares[i] * GameRoundData[ this_gRND].sharePrice);\r\n            \r\n            PlayerGameRound[ _playerAddress][this_gRND].shares[i] = 0;\r\n        }\r\n        \r\n        if (_eth>0)\r\n        {\r\n               _playerAddress.transfer( _eth );  \r\n               \r\n               emit onRefund( _playerAddress , _eth , now );\r\n        }\r\n        \r\n    }\r\n    \r\n     /*================================\r\n    =       GAMES VARIABLES         =\r\n    ================================*/\r\n    \r\n    struct PlayerData_s\r\n    {\r\n   \r\n        uint256 chest;  \r\n        uint256 payoutsTo;\r\n        uint256 gRND;  \r\n       \r\n    }\r\n    \r\n    struct PlayerGameRound_s\r\n    {\r\n        uint256[4]      shares;\r\n        uint128         treasure_payoutsTo;    \r\n        uint128         token;\r\n      \r\n       \r\n    }\r\n    \r\n    struct GameRoundData_s\r\n    {\r\n       uint256              blockNumber;\r\n       uint256              blockNumberTimeout;\r\n       uint256              sharePrice;\r\n       uint256[4]           sharePots;\r\n       uint256              shareEthBalance;\r\n       uint256              shareSupply;\r\n       uint256              treasureSupply;\r\n      \r\n     \r\n       //this time we want to stream the HDX20 apprecition and dev fees on the way\r\n       uint256              allFeeSupply;       //to separate the fees from the actual treasure\r\n       uint256              hdx20AppreciationPayout;\r\n       uint256              devAppreciationPayout;\r\n       //\r\n       \r\n       uint256              totalTreasureFound;\r\n       uint256[6]           actionBlockNumber;\r\n      \r\n       uint128[4]           treasurePerShare; \r\n       uint32[8]            persoData; //energy[4] distance[4]\r\n       uint32[8]            powerUpData; //Speed[4] Shield[4]\r\n       \r\n       uint32[6]            actionValue;\r\n       \r\n       uint32[6]            extraData;//[0]==this_TurnRound , [1]==winner , [2-5] totalPlayers\r\n  \r\n    }\r\n    \r\n  \r\n   \r\n    \r\n \r\n    \r\n   \r\n    mapping (address => PlayerData_s)   private PlayerData;\r\n    \r\n   \r\n    mapping (address => mapping (uint256 => PlayerGameRound_s)) private PlayerGameRound;\r\n    \r\n   \r\n    mapping (uint256 => GameRoundData_s)   private GameRoundData;\r\n    \r\n   \r\n    bool        private maintenanceMode=false;     \r\n   \r\n    uint256     private this_gRND =0;\r\n  \r\n \r\n  \r\n  \r\n    //85 , missing 15% for shares appreciation eg:share price increase\r\n    uint8 constant private HDX20BuyFees = 5;\r\n    uint8 constant private TREASUREBuyFees = 50;\r\n    uint8 constant private BUYPercentage = 30;\r\n    \r\n    \r\n    //the part to keep from the treasure for next round treasure + hdx20 appreciation + dev \r\n    uint8 constant private DevFees = 5;\r\n    uint8 constant private TreasureFees = 10;\r\n    uint8 constant private AppreciationFees = 25;\r\n    uint8 constant private AddedFees = DevFees+TreasureFees+AppreciationFees;\r\n  \r\n   \r\n    uint256 constant internal magnitude = 1e18;\r\n  \r\n    uint256 private genTreasure = 0;\r\n   \r\n    uint256 constant private minimumSharePrice = 0.001 ether;\r\n    \r\n    uint256 private blockTimeAverage = 15;  //seconds per block                          \r\n    \r\n \r\n    uint8[4]    private this_Perso_Type;\r\n    \r\n   \r\n      \r\n    /*================================\r\n    =       PUBLIC FUNCTIONS         =\r\n    ================================*/\r\n    \r\n    //fallback will be called only from the HDX token contract to fund the game from customers's HDX20\r\n    \r\n     function()\r\n     payable\r\n     public\r\n     onlyFromHDXToken \r\n    {\r\n       \r\n      \r\n      \r\n          \r\n    }\r\n    \r\n    \r\n    function ChargeTreasure() public payable\r\n    {\r\n        genTreasure = SafeMath.add( genTreasure , msg.value);     \r\n    }\r\n    \r\n    \r\n    function buyTreasureShares(GameRoundData_s storage  _GameRoundData , uint256 _eth ) private\r\n    returns( uint256)\r\n    {\r\n        uint256 _nbshares = (_eth.mul( magnitude)) / _GameRoundData.sharePrice;\r\n        uint256 _nbsharesForTreasure = (_nbshares.mul( 100-DevFees-TreasureFees-AppreciationFees)) / 100;\r\n       \r\n        //now we do separate for streamline payment\r\n        _GameRoundData.treasureSupply = _GameRoundData.treasureSupply.add( _nbsharesForTreasure );\r\n        //the difference is for the allFeeSupply\r\n        _GameRoundData.allFeeSupply = _GameRoundData.allFeeSupply.add( _nbshares - _nbsharesForTreasure);\r\n        \r\n        \r\n        _GameRoundData.shareSupply =   _GameRoundData.shareSupply.add( _nbshares );\r\n        \r\n        return( _nbshares);\r\n    }\r\n   \r\n    \r\n    function initRace( uint8[4] p ) public\r\n    onlyOwner\r\n    isNotMaintenance\r\n    {\r\n \r\n        \r\n        this_gRND++;\r\n        \r\n        GameRoundData_s storage _GameRoundData = GameRoundData[ this_gRND ];\r\n       \r\n        for( uint i=0;i<4;i++)\r\n        {\r\n           this_Perso_Type[i] = p[i];\r\n       \r\n            _GameRoundData.persoData[i] = 100;\r\n            _GameRoundData.persoData[4+i] = 25;\r\n            \r\n        }\r\n       \r\n        _GameRoundData.blockNumber = block.number;\r\n        \r\n        _GameRoundData.blockNumberTimeout = block.number + (360*10*24*3600); \r\n        \r\n        uint256 _sharePrice = 0.001 ether; // minimumSharePrice;\r\n        \r\n        _GameRoundData.sharePrice = _sharePrice;\r\n        \r\n        uint256 _nbshares = buyTreasureShares(_GameRoundData, genTreasure );\r\n     \r\n        //convert into ETH\r\n        _nbshares = _nbshares.mul( _sharePrice ) / magnitude;\r\n        \r\n        //start balance   \r\n        _GameRoundData.shareEthBalance = _nbshares;\r\n        \r\n        genTreasure = genTreasure.sub( _nbshares);\r\n     \r\n       \r\n        emit onNewRace( this_gRND , p , block.number);\r\n        \r\n    }\r\n    \r\n    \r\n   \r\n    function get_TotalPayout(  GameRoundData_s storage  _GameRoundData ) private view\r\n    returns( uint256)\r\n    {\r\n      \r\n       uint256 _payout = 0;\r\n        \r\n       uint256 _sharePrice = _GameRoundData.sharePrice;\r\n     \r\n       for(uint i=0;i<4;i++)\r\n       {\r\n           uint256 _bet = _GameRoundData.sharePots[i];\r\n           \r\n           _payout = _payout.add( _bet.mul (_sharePrice) / magnitude );\r\n       }           \r\n         \r\n       //from the whole treasure now since new version         \r\n       uint256 _potValue = (_GameRoundData.treasureSupply.mul( _sharePrice )) / magnitude;\r\n       \r\n       \r\n       _payout = _payout.add( _potValue ).add(_GameRoundData.totalTreasureFound );\r\n       \r\n   \r\n       return( _payout );\r\n        \r\n    }\r\n    \r\n    \r\n  \r\n    function get_PendingGains( address _player_address , uint256 _gRND) private view\r\n    returns( uint256)\r\n    {\r\n       \r\n       //did not play \r\n       if (PlayerData[ _player_address].gRND != _gRND || _gRND==0) return( 0 );\r\n       \r\n       GameRoundData_s storage  _GameRoundData = GameRoundData[ _gRND ];\r\n       \r\n     \r\n       uint32 _winner = _GameRoundData.extraData[1];\r\n       \r\n       uint256 _gains = 0;\r\n       uint256 _treasure = 0;\r\n       uint256 _sharePrice = _GameRoundData.sharePrice;\r\n       uint256 _shares;\r\n       \r\n       PlayerGameRound_s storage  _PlayerGameRound = PlayerGameRound[ _player_address][_gRND];\r\n       \r\n       for(uint i=0;i<4;i++)\r\n       {\r\n           _shares = _PlayerGameRound.shares[ i ];\r\n            \r\n           _gains = _gains.add( _shares.mul( _sharePrice) / magnitude );\r\n        \r\n           \r\n           _treasure = _treasure.add(_shares.mul( _GameRoundData.treasurePerShare[ i ] ) / magnitude);\r\n           \r\n       }\r\n       \r\n        if (_treasure >=  _PlayerGameRound.treasure_payoutsTo) _treasure = _treasure.sub(_PlayerGameRound.treasure_payoutsTo );\r\n       else _treasure = 0;\r\n           \r\n       _gains = _gains.add(_treasure );\r\n       \r\n       //if the race payment is made (race is over) then we add also the winner prize\r\n       if (_winner>0 && _GameRoundData.extraData[0] >= (1<<30))\r\n       {\r\n           _shares = _PlayerGameRound.shares[ _winner-1 ];\r\n           \r\n           if (_shares>0)\r\n           {\r\n               //from the whole treasure now since new version   \r\n               _treasure = (_GameRoundData.treasureSupply.mul( _sharePrice )) / magnitude;\r\n       \r\n               \r\n               _gains = _gains.add(  _treasure.mul( _shares ) / _GameRoundData.sharePots[ _winner-1]  );\r\n               \r\n           }\r\n           \r\n       }\r\n    \r\n       \r\n        return( _gains );\r\n        \r\n    }\r\n    \r\n    \r\n    //only for the Result Data Screen on the game not used for the payout\r\n    \r\n    function get_PendingGainsAll( address _player_address , uint256 _gRND) private view\r\n    returns( uint256)\r\n    {\r\n       \r\n       //did not play \r\n       if (PlayerData[ _player_address].gRND != _gRND || _gRND==0) return( 0 );\r\n       \r\n       GameRoundData_s storage  _GameRoundData = GameRoundData[ _gRND ];\r\n       \r\n     \r\n       uint32 _winner = _GameRoundData.extraData[1];\r\n       \r\n       uint256 _gains = 0;\r\n       uint256 _treasure = 0;\r\n       uint256 _sharePrice = _GameRoundData.sharePrice;\r\n       uint256 _shares;\r\n       \r\n       PlayerGameRound_s storage  _PlayerGameRound = PlayerGameRound[ _player_address][_gRND];\r\n       \r\n       for(uint i=0;i<4;i++)\r\n       {\r\n           _shares = _PlayerGameRound.shares[ i ];\r\n            \r\n           _gains = _gains.add( _shares.mul( _sharePrice) / magnitude );\r\n        \r\n           \r\n           _treasure = _treasure.add(_shares.mul( _GameRoundData.treasurePerShare[ i ] ) / magnitude);\r\n           \r\n       }\r\n       \r\n        if (_treasure >=  _PlayerGameRound.treasure_payoutsTo) _treasure = _treasure.sub(_PlayerGameRound.treasure_payoutsTo );\r\n       else _treasure = 0;\r\n           \r\n       _gains = _gains.add(_treasure );\r\n       \r\n     \r\n       if (_winner>0)\r\n       {\r\n           _shares = _PlayerGameRound.shares[ _winner-1 ];\r\n           \r\n           if (_shares>0)\r\n           {\r\n               //from the whole treasure now since new version \r\n               _treasure = (_GameRoundData.treasureSupply.mul( _sharePrice )) / magnitude;\r\n       \r\n               \r\n               _gains = _gains.add(  _treasure.mul( _shares ) / _GameRoundData.sharePots[ _winner-1]  );\r\n               \r\n           }\r\n           \r\n       }\r\n    \r\n       \r\n        return( _gains );\r\n        \r\n    }\r\n    \r\n       //process streaming HDX20 appreciation and dev fees appreciation\r\n    function process_sub_Taxes(  GameRoundData_s storage _GameRoundData , uint256 minimum) private\r\n    {\r\n        uint256 _sharePrice = _GameRoundData.sharePrice;\r\n             \r\n        uint256 _potValue = _GameRoundData.allFeeSupply.mul( _sharePrice ) / magnitude;\r\n            \r\n        uint256 _appreciation = SafeMath.mul( _potValue , AppreciationFees) / AddedFees; \r\n          \r\n        uint256 _dev = SafeMath.mul( _potValue , DevFees) / AddedFees;   \r\n        \r\n        if (_dev > _GameRoundData.devAppreciationPayout)\r\n        {\r\n            _dev -= _GameRoundData.devAppreciationPayout;\r\n            \r\n            if (_dev>minimum)\r\n            {\r\n              _GameRoundData.devAppreciationPayout = _GameRoundData.devAppreciationPayout.add( _dev );\r\n              \r\n               HDXcontract.buyTokenFromGame.value( _dev )( owner , address(0));\r\n              \r\n            }\r\n        }\r\n        \r\n        if (_appreciation> _GameRoundData.hdx20AppreciationPayout)\r\n        {\r\n            _appreciation -= _GameRoundData.hdx20AppreciationPayout;\r\n            \r\n            if (_appreciation>minimum)\r\n            {\r\n                _GameRoundData.hdx20AppreciationPayout = _GameRoundData.hdx20AppreciationPayout.add( _appreciation );\r\n                \r\n                 HDXcontract.appreciateTokenPrice.value( _appreciation )();\r\n                \r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    //process the fees, hdx20 appreciation, calcul results at the end of the race\r\n    function process_Taxes(  GameRoundData_s storage _GameRoundData ) private\r\n    {\r\n        uint32 turnround = _GameRoundData.extraData[0];\r\n        \r\n        if (turnround>0 && turnround<(1<<30))\r\n        {  \r\n            _GameRoundData.extraData[0] = turnround | (1<<30);\r\n            \r\n            uint256 _sharePrice = _GameRoundData.sharePrice;\r\n             \r\n            uint256 _potValue = _GameRoundData.allFeeSupply.mul( _sharePrice ) / magnitude;\r\n     \r\n           \r\n            uint256 _treasure = SafeMath.mul( _potValue , TreasureFees) / AddedFees; \r\n         \r\n           \r\n            genTreasure = genTreasure.add( _treasure );\r\n            \r\n            //take care of any left over\r\n            process_sub_Taxes( _GameRoundData , 0);\r\n            \r\n            \r\n        }\r\n     \r\n    }\r\n    \r\n    \r\n    \r\n    function BuyShareWithDividends( uint32 perso , uint256 eth , uint32 action, address _referrer_address ) public\r\n    onlyDirectTransaction\r\n    {\r\n  \r\n        require( maintenanceMode==false  && this_gRND>0 && (eth>=minimumSharePrice) && (eth <=100 ether) &&  perso<=3 && action <=5 && block.number <GameRoundData[ this_gRND ].blockNumberTimeout );\r\n  \r\n        address _customer_address = msg.sender;\r\n        \r\n        eth = HDXcontract.payWithToken( eth , _customer_address );\r\n       \r\n        require( eth>0 );\r\n         \r\n        CoreBuyShare( _customer_address , perso , eth , action , _referrer_address );\r\n        \r\n       \r\n    }\r\n    \r\n    function BuyShare(   uint32 perso , uint32 action , address _referrer_address ) public payable\r\n    onlyDirectTransaction\r\n    {\r\n     \r\n         \r\n        address _customer_address = msg.sender;\r\n        uint256 eth = msg.value;\r\n        \r\n        require( maintenanceMode==false  && this_gRND>0 && (eth>=minimumSharePrice) &&(eth <=100 ether) && perso<=3 && action <=5 && block.number <GameRoundData[ this_gRND ].blockNumberTimeout);\r\n   \r\n         \r\n        CoreBuyShare( _customer_address , perso , eth , action , _referrer_address);\r\n     \r\n    }\r\n    \r\n    /*================================\r\n    =       CORE BUY FUNCTIONS       =\r\n    ================================*/\r\n    \r\n    function CoreBuyShare( address _player_address , uint32 perso , uint256 eth , uint32 action ,  address _referrer_address ) private\r\n    {\r\n    \r\n        PlayerGameRound_s storage  _PlayerGameRound = PlayerGameRound[ _player_address][ this_gRND];\r\n        \r\n        GameRoundData_s storage  _GameRoundData = GameRoundData[ this_gRND ];\r\n        \r\n      \r\n        if (PlayerData[ _player_address].gRND != this_gRND)\r\n        {\r\n           \r\n            if (PlayerData[_player_address].gRND !=0)\r\n            {\r\n                uint256 _gains = get_PendingGains( _player_address , PlayerData[ _player_address].gRND  );\r\n            \r\n                 PlayerData[ _player_address].chest = PlayerData[ _player_address].chest.add( _gains);\r\n            }\r\n          \r\n          \r\n            PlayerData[ _player_address ].gRND = this_gRND;\r\n           \r\n   \r\n        }\r\n        \r\n        //HDX20BuyFees\r\n        uint256 _tempo = (eth.mul(HDX20BuyFees)) / 100;\r\n        \r\n        _GameRoundData.shareEthBalance =  _GameRoundData.shareEthBalance.add( eth-_tempo );  //minus the hdx20 fees\r\n        \r\n        uint256 _nb_token =   HDXcontract.buyTokenFromGame.value( _tempo )( _player_address , _referrer_address);\r\n        \r\n         //keep track for result UI screen how many token bought in this game round\r\n        _PlayerGameRound.token += uint128(_nb_token);\r\n        \r\n        //increase the treasure shares\r\n        buyTreasureShares(_GameRoundData , (eth.mul(TREASUREBuyFees)) / 100 );\r\n   \r\n        //what is left for the player\r\n        eth = eth.mul( BUYPercentage) / 100;\r\n        \r\n        uint256 _nbshare =  (eth.mul( magnitude)) / _GameRoundData.sharePrice;\r\n        \r\n        _GameRoundData.shareSupply =  _GameRoundData.shareSupply.add( _nbshare );\r\n        _GameRoundData.sharePots[ perso ] =  _GameRoundData.sharePots[ perso ].add( _nbshare);\r\n        \r\n        _tempo =  _PlayerGameRound.shares[ perso ];\r\n        \r\n        if (_tempo==0)\r\n        {\r\n            _GameRoundData.extraData[ 2+perso ]++; \r\n        }\r\n        \r\n        _PlayerGameRound.shares[ perso ] =  _tempo.add( _nbshare);\r\n   \r\n        //this will always raise the price after 1 share\r\n        if (_GameRoundData.shareSupply>magnitude)\r\n        {\r\n            _GameRoundData.sharePrice = (_GameRoundData.shareEthBalance.mul( magnitude)) / _GameRoundData.shareSupply;\r\n        }\r\n       \r\n       \r\n        _PlayerGameRound.treasure_payoutsTo = _PlayerGameRound.treasure_payoutsTo.add( uint128(_nbshare.mul(   _GameRoundData.treasurePerShare[ perso ]  ) / magnitude) );\r\n     \r\n        //HDX20 streaming appreciation\r\n        process_sub_Taxes( _GameRoundData , 0.2 ether);\r\n        \r\n        uint32 actionValue = ApplyAction( perso , action , _nbshare , _player_address);\r\n        \r\n        _GameRoundData.actionValue[ action] = actionValue;\r\n        \r\n        emit onBuyShare( _player_address , this_gRND , perso , _nb_token , action, actionValue  );\r\n                         \r\n        \r\n    }\r\n    \r\n     struct GameVar_s\r\n    {\r\n        uint32[4]   perso_energy;\r\n        uint32[4]   perso_distance;\r\n        uint32[4]   powerUpShield;\r\n        uint32[4]   powerUpSpeed;\r\n        \r\n        uint32      event_type;\r\n        uint32      event_target;\r\n     \r\n        uint32      winner;\r\n        \r\n        uint256     this_gRND;\r\n        \r\n        uint256     treasureAmountFind;\r\n        \r\n        bytes32     seed;\r\n        \r\n        uint256     blockNumberTimeout;\r\n        \r\n        uint32      turnround;\r\n      \r\n    }\r\n    \r\n    function actionPowerUpShield( uint32 perso , GameVar_s gamevar) pure private\r\n    {\r\n        \r\n        gamevar.powerUpShield[ perso ] = 100;\r\n        \r\n    }\r\n    \r\n    function actionPowerUpSpeed( uint32 perso , GameVar_s gamevar) pure private\r\n    {\r\n        \r\n        gamevar.powerUpSpeed[ perso ] = 100;\r\n        \r\n    }\r\n    \r\n   \r\n    \r\n    function actionApple( uint32 perso , GameVar_s gamevar) pure private\r\n    {\r\n        \r\n        gamevar.event_type = 6;     //apple / banana etc...\r\n        \r\n        gamevar.event_target = 1<<(perso*3);\r\n        \r\n        gamevar.perso_energy[ perso ] += 20; \r\n        \r\n        if (gamevar.perso_energy[ perso] > 150) gamevar.perso_energy[ perso ] = 150;\r\n        \r\n    }\r\n    \r\n    function actionBanana(  GameVar_s gamevar ) pure private\r\n    {\r\n        \r\n        gamevar.event_type = 6;     //apple / banana etc...\r\n        \r\n        uint32 result = 2;\r\n        \r\n        uint32 target = get_modulo_value(gamevar.seed,18, 4);\r\n        \r\n        if (gamevar.winner>0) target = gamevar.winner-1;\r\n    \r\n        \r\n        uint32 shield = uint32(gamevar.powerUpShield[ target ]);\r\n        \r\n        if (shield>20) result = 5; //jumping banana\r\n        else\r\n        {\r\n                    uint32 dd = 4 * (101 - shield);\r\n                                   \r\n                  \r\n                    \r\n                    if (gamevar.perso_distance[ target ]>=dd)  gamevar.perso_distance[ target ] -= dd;\r\n                    else  gamevar.perso_distance[ target ] = 0;\r\n                    \r\n        }\r\n        \r\n        gamevar.event_target = result<<(target*3);\r\n        \r\n       \r\n        \r\n    }\r\n    \r\n    function getTreasureProbabilityType( bytes32 seed ) private pure\r\n    returns( uint32 )\r\n    {\r\n           uint8[22] memory this_TreasureProbability =[\r\n    \r\n        1,1,1,1,1,1,1,1,1,1,1,1,    //12 chances to have 10%\r\n        2,2,2,2,2,2,                //6 chances to have 15%\r\n        3,3,3,                      //3 chances to have 20%\r\n        4                           //1 chance to have 25%\r\n       \r\n        ];       \r\n        \r\n        return( this_TreasureProbability[ get_modulo_value(seed,24, 22) ] );\r\n    }\r\n    \r\n   \r\n    \r\n    function distribute_treasure( uint32 type2 , uint32 target , GameVar_s gamevar) private\r\n    {\r\n        uint8[5] memory this_TreasureValue =[\r\n        \r\n        1,\r\n        10,\r\n        15,\r\n        20,\r\n        25\r\n      \r\n        ];  \r\n        \r\n        //from the whole treasure now since new version \r\n        uint256 _treasureSupply = GameRoundData[ gamevar.this_gRND].treasureSupply;\r\n      \r\n        \r\n        uint256 _sharePrice = GameRoundData[ gamevar.this_gRND].sharePrice;\r\n        uint256 _shareSupply = GameRoundData[ gamevar.this_gRND].shareSupply;\r\n       \r\n        //how many shares to sell\r\n        uint256  _amount = _treasureSupply.mul(this_TreasureValue[ type2 ] )  / 100;\r\n       \r\n        GameRoundData[ gamevar.this_gRND].treasureSupply = _treasureSupply.sub( _amount );\r\n        GameRoundData[ gamevar.this_gRND].shareSupply =  _shareSupply.sub( _amount );\r\n        \r\n        //in eth\r\n        _amount = _amount.mul( _sharePrice ) / magnitude;\r\n        \r\n        //price of shares should not change\r\n        GameRoundData[ gamevar.this_gRND].shareEthBalance =  GameRoundData[ gamevar.this_gRND].shareEthBalance.sub( _amount );\r\n        \r\n        gamevar.treasureAmountFind = _amount;\r\n       \r\n        GameRoundData[ gamevar.this_gRND].totalTreasureFound =   GameRoundData[ gamevar.this_gRND].totalTreasureFound.add( _amount );\r\n       \r\n        uint256 _shares = GameRoundData[ gamevar.this_gRND].sharePots[ target ];\r\n    \r\n        if (_shares>0)\r\n        {\r\n           \r\n            GameRoundData[ gamevar.this_gRND].treasurePerShare[ target ] =  GameRoundData[ gamevar.this_gRND].treasurePerShare[ target ].add( uint128(((_amount.mul(magnitude)) / _shares)));\r\n        }\r\n        \r\n    }\r\n    \r\n    function actionTreasure( uint32 perso, GameVar_s gamevar ) private\r\n    {\r\n        gamevar.event_target =  get_modulo_value(gamevar.seed,18,  14);\r\n        gamevar.event_type = getTreasureProbabilityType( gamevar.seed );\r\n                                                    \r\n        if (gamevar.event_target==perso)\r\n        {\r\n\r\n                distribute_treasure( gamevar.event_type , gamevar.event_target, gamevar);\r\n        }\r\n        \r\n       \r\n    }\r\n    \r\n    function apply_attack( uint32 perso, uint32 target , GameVar_s gamevar) pure private\r\n    {\r\n        for(uint i=0;i<4;i++)\r\n        {\r\n            uint32 damage = (1+(target % 3)) * 10;\r\n            \r\n            uint32 shield = uint32(  gamevar.powerUpShield[i] );\r\n            \r\n            if (damage<= shield || i==perso) damage = 0;\r\n            else damage -=  shield;\r\n            \r\n            if (damage<gamevar.perso_energy[i]) gamevar.perso_energy[i] -= damage;\r\n            else gamevar.perso_energy[i] = 1;   //minimum\r\n            \r\n            target >>= 2;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    function actionAttack( uint32 perso , GameVar_s gamevar ) pure private\r\n    {\r\n            gamevar.event_type =  5; \r\n            gamevar.event_target = get_modulo_value(gamevar.seed,24,256);     //8 bits 4x2\r\n            \r\n            apply_attack( perso , gamevar.event_target , gamevar);    \r\n    }\r\n    \r\n    function ApplyAction( uint32 perso ,  uint32 action , uint256 nbshare , address _player_address) private\r\n    returns( uint32)\r\n    {\r\n        uint32 actionValue = GameRoundData[ this_gRND].actionValue[ action ];\r\n        \r\n        //only the last one is activating within the same block\r\n        if (block.number<= GameRoundData[ this_gRND].actionBlockNumber[ action]) return( actionValue);\r\n        \r\n        GameVar_s memory gamevar;\r\n          \r\n        gamevar.turnround = GameRoundData[ this_gRND ].extraData[0];\r\n        \r\n        //now we introduce a new price increase for the items\r\n        nbshare = nbshare.mul(100*100);\r\n        nbshare /= (100+(gamevar.turnround/3));\r\n        \r\n        nbshare /= magnitude;\r\n      \r\n        nbshare += 10;\r\n        \r\n        if (nbshare>5000) nbshare = 5000;\r\n        \r\n        actionValue += uint32( nbshare );\r\n        \r\n    \r\n         uint16[6] memory actionPrice =[\r\n        \r\n        1000,   //apple\r\n        4000,   //powerup shield\r\n        5000,   //powerup speed \r\n        2000,   //chest\r\n        1000,   //banana action\r\n        3000   //attack\r\n      \r\n        ];  \r\n        \r\n        if (actionValue<actionPrice[action] && gamevar.turnround>0)\r\n        {\r\n           \r\n            return( actionValue );\r\n        }\r\n        \r\n        if (actionValue>=actionPrice[action])\r\n        {\r\n            GameRoundData[ this_gRND].actionBlockNumber[ action] = block.number;\r\n             \r\n            actionValue = 0;\r\n        }\r\n        else action = 100; //this is the first action\r\n        \r\n        gamevar.turnround++;\r\n     \r\n        \r\n      \r\n        \r\n        gamevar.this_gRND = this_gRND;\r\n        gamevar.winner = GameRoundData[ gamevar.this_gRND].extraData[1];\r\n      \r\n        \r\n        uint i;\r\n            \r\n        for( i=0;i<4;i++)\r\n        {\r\n                gamevar.perso_energy[i] = GameRoundData[ gamevar.this_gRND].persoData[i];\r\n                gamevar.perso_distance[i] = GameRoundData[ gamevar.this_gRND].persoData[4+i];\r\n                gamevar.powerUpSpeed[i] = GameRoundData[ gamevar.this_gRND].powerUpData[i] / 2;\r\n                gamevar.powerUpShield[i] = GameRoundData[ gamevar.this_gRND].powerUpData[4+i] / 2;\r\n    \r\n        }\r\n        \r\n        \r\n        \r\n        //a little boost for the fist action maker \r\n        if (gamevar.turnround==1) gamevar.perso_energy[ perso ] += 5;\r\n        \r\n        getSeed( gamevar);\r\n    \r\n      \r\n        if (action==0) actionApple( perso , gamevar );\r\n        if (action==1) actionPowerUpShield( perso , gamevar);\r\n        if (action==2) actionPowerUpSpeed( perso , gamevar );\r\n        if (action==3) actionTreasure( perso, gamevar);\r\n        if (action==4) actionBanana(  gamevar);\r\n        if (action==5) actionAttack( perso , gamevar);\r\n        \r\n        gamevar.event_type |= (perso<<16);\r\n\r\n        uint32 CurrentWinnerXpos = 0; //gamevar.perso_distance[0]; //this.Racers[n].perso_distance;\r\n       \r\n        for( i=0; i<4;i++)\r\n        {\r\n      \r\n                //tiredness\r\n                gamevar.perso_energy[ i ] *= 95;\r\n                gamevar.perso_energy[ i ] /= 100;\r\n                \r\n                                           \r\n                uint32 spd1 =  (gamevar.perso_energy[ i ]*10) + (gamevar.powerUpSpeed[ i ]*10); \r\n                                       \r\n                gamevar.perso_distance[ i ] = (  (gamevar.perso_distance[ i ]*95) + (spd1*100)  )/100; \r\n                         \r\n               if (gamevar.perso_distance[i] > CurrentWinnerXpos)\r\n               {\r\n                   CurrentWinnerXpos = gamevar.perso_distance[i];\r\n                   gamevar.winner = uint8(i);\r\n               }\r\n               \r\n                GameRoundData[ gamevar.this_gRND].persoData[i] = gamevar.perso_energy[i];\r\n                GameRoundData[ gamevar.this_gRND].persoData[4+i] = gamevar.perso_distance[i];\r\n                GameRoundData[ gamevar.this_gRND].powerUpData[i] = gamevar.powerUpSpeed[i];\r\n                GameRoundData[ gamevar.this_gRND].powerUpData[4+i] = gamevar.powerUpShield[i];\r\n        \r\n        }\r\n         \r\n        GameRoundData[ gamevar.this_gRND ].extraData[0] = gamevar.turnround;\r\n        \r\n        GameRoundData[ gamevar.this_gRND].extraData[1] = 1+gamevar.winner;\r\n        \r\n        gamevar.blockNumberTimeout = block.number + ((24*3600) / blockTimeAverage);\r\n        \r\n        GameRoundData[ gamevar.this_gRND].blockNumberTimeout = gamevar.blockNumberTimeout;\r\n        \r\n    \r\n        \r\n        emitRound( gamevar , _player_address);\r\n        \r\n        return( actionValue );\r\n    }\r\n  \r\n    function emitRound(GameVar_s gamevar , address _player_address) private\r\n    {\r\n           emit onNewRound(\r\n            gamevar.this_gRND,   \r\n            gamevar.turnround,\r\n            gamevar.event_type,\r\n            gamevar.event_target,\r\n            gamevar.perso_energy,\r\n            gamevar.perso_distance,\r\n            gamevar.powerUpSpeed,\r\n            gamevar.powerUpShield,\r\n            gamevar.blockNumberTimeout,\r\n            gamevar.treasureAmountFind,\r\n            _player_address\r\n           \r\n        );\r\n        \r\n    }\r\n   \r\n    \r\n    function get_Gains(address _player_address) private view\r\n    returns( uint256)\r\n    {\r\n       \r\n        uint256 _gains = PlayerData[ _player_address ].chest.add( get_PendingGains( _player_address , PlayerData[ _player_address].gRND ) );\r\n        \r\n        if (_gains > PlayerData[ _player_address].payoutsTo)\r\n        {\r\n            _gains -= PlayerData[ _player_address].payoutsTo;\r\n        }\r\n        else _gains = 0;\r\n     \r\n    \r\n        return( _gains );\r\n        \r\n    }\r\n    \r\n    \r\n    function WithdrawGains() public \r\n    isPlayer\r\n    {\r\n        address _customer_address = msg.sender;\r\n        \r\n        uint256 _gains = get_Gains( _customer_address );\r\n        \r\n        require( _gains>0);\r\n        \r\n        PlayerData[ _customer_address ].payoutsTo = PlayerData[ _customer_address ].payoutsTo.add( _gains );\r\n        \r\n      \r\n        emit onWithdrawGains( _customer_address , _gains , now);\r\n        \r\n        _customer_address.transfer( _gains );\r\n        \r\n        \r\n    }\r\n    \r\n    function getSeed(GameVar_s gamevar) private view\r\n   \r\n    {\r\n            uint256 _seed =  uint256( blockhash( block.number-1) );\r\n            _seed ^= uint256( blockhash( block.number-2) );\r\n            _seed ^= uint256(block.coinbase) / now;\r\n            _seed += gamevar.perso_distance[0];\r\n            _seed += gamevar.perso_distance[1];\r\n            _seed += gamevar.perso_distance[2];\r\n            _seed += gamevar.perso_distance[3];\r\n            \r\n            _seed += gasleft();\r\n            \r\n            gamevar.seed = keccak256(abi.encodePacked( _seed));\r\n        \r\n            \r\n    }\r\n    \r\n    function CloseEntry() public\r\n    onlyOwner\r\n    isNotMaintenance\r\n    {\r\n    \r\n        GameRoundData_s storage  _GameRoundData = GameRoundData[ this_gRND ];\r\n         \r\n        process_Taxes( _GameRoundData);\r\n          \r\n        emit onCloseEntry( this_gRND );\r\n      \r\n    }\r\n    \r\n   \r\n    \r\n    \r\n    function get_probability( bytes32 seed ,  uint32 bytepos , uint32 percentage) pure private\r\n    returns( bool )\r\n    {\r\n       uint32 v = uint32(seed[bytepos]);\r\n       \r\n       if (v<= ((255*percentage)/100)) return( true );\r\n       else return( false );\r\n     \r\n    }\r\n    \r\n    function get_modulo_value( bytes32 seed , uint32 bytepos, uint32 mod) pure private\r\n    returns( uint32 )\r\n    {\r\n      \r\n        return( ((uint32(seed[ bytepos])*256)+(uint32(seed[ bytepos+1]))) % mod);\r\n    }\r\n    \r\n  \r\n    \r\n  \r\n  \r\n    \r\n     /*================================\r\n    =  VIEW AND HELPERS FUNCTIONS    =\r\n    ================================*/\r\n  \r\n    \r\n    function view_get_Treasure() public\r\n    view\r\n    returns(uint256)\r\n    {\r\n      \r\n      return( genTreasure);  \r\n    }\r\n    \r\n    function view_get_allFees() public\r\n    view\r\n    returns(uint256)\r\n    {\r\n      \r\n      return( (GameRoundData[ this_gRND].allFeeSupply * GameRoundData[ this_gRND].sharePrice) / magnitude);  \r\n    }\r\n \r\n    function view_get_gameData() public\r\n    view\r\n    returns( uint256 sharePrice, uint256[4] sharePots, uint256 shareSupply , uint256 shareEthBalance, uint128[4] treasurePerShare, uint32[4] totalPlayers , uint32[6] actionValue , uint256[4] shares , uint256 treasure_payoutsTo ,uint256 treasureSupply  )\r\n    {\r\n        address _player_address = msg.sender;\r\n         \r\n        sharePrice = GameRoundData[ this_gRND].sharePrice;\r\n        sharePots = GameRoundData[ this_gRND].sharePots;\r\n        shareSupply = GameRoundData[ this_gRND].shareSupply;\r\n        shareEthBalance = GameRoundData[ this_gRND].shareEthBalance;\r\n        treasurePerShare = GameRoundData[ this_gRND].treasurePerShare;\r\n        \r\n        treasureSupply = GameRoundData[ this_gRND].treasureSupply;\r\n        \r\n        uint32[4] memory totalPlayersm;\r\n       \r\n        totalPlayersm[0] = GameRoundData[ this_gRND].extraData[2];\r\n        totalPlayersm[1] = GameRoundData[ this_gRND].extraData[3];\r\n        totalPlayersm[2] = GameRoundData[ this_gRND].extraData[4];\r\n        totalPlayersm[3] = GameRoundData[ this_gRND].extraData[5];\r\n        \r\n       \r\n        totalPlayers = totalPlayersm;\r\n        actionValue = GameRoundData[ this_gRND].actionValue;\r\n        \r\n        shares = PlayerGameRound[_player_address][this_gRND].shares;\r\n        \r\n        treasure_payoutsTo = PlayerGameRound[_player_address][this_gRND].treasure_payoutsTo;\r\n    }\r\n  \r\n    \r\n    function view_get_Gains()\r\n    public\r\n    view\r\n    returns( uint256 gains)\r\n    {\r\n        \r\n        address _player_address = msg.sender;\r\n   \r\n      \r\n        uint256 _gains = PlayerData[ _player_address ].chest.add( get_PendingGains( _player_address , PlayerData[ _player_address].gRND) );\r\n        \r\n        if (_gains > PlayerData[ _player_address].payoutsTo)\r\n        {\r\n            _gains -= PlayerData[ _player_address].payoutsTo;\r\n        }\r\n        else _gains = 0;\r\n     \r\n    \r\n        return( _gains );\r\n        \r\n    }\r\n  \r\n  \r\n    \r\n    function view_get_gameStates() public \r\n    view\r\n    returns(uint8[4] types, uint256 grnd, uint32 turnround, uint256 minimumshare , uint256 blockNumber , uint256 blockNumberTimeout, uint32[6] actionValue , uint32[8] persoData , uint32[8] powerUpData , uint256 blockNumberCurrent , uint256 blockTimeAvg)\r\n    {\r\n        return( this_Perso_Type, this_gRND , GameRoundData[ this_gRND].extraData[0] , minimumSharePrice , GameRoundData[ this_gRND].blockNumber,GameRoundData[ this_gRND].blockNumberTimeout, GameRoundData[ this_gRND].actionValue , GameRoundData[ this_gRND].persoData , GameRoundData[ this_gRND].powerUpData, block.number , blockTimeAverage /*, view_get_MyRacer()*/);\r\n    }\r\n    \r\n    function view_get_ResultData() public\r\n    view\r\n    returns(uint32 TotalPlayer, uint256 TotalPayout ,uint256 MyTokenValue, uint256 MyToken, uint256 MyGains , uint256 MyTreasureFound )\r\n    {\r\n        address _player_address = msg.sender;\r\n        \r\n        GameRoundData_s storage  _GameRoundData = GameRoundData[ this_gRND ];\r\n        \r\n        TotalPlayer = _GameRoundData.extraData[2]+_GameRoundData.extraData[3]+_GameRoundData.extraData[4]+_GameRoundData.extraData[5];\r\n     \r\n        TotalPayout = get_TotalPayout( _GameRoundData );\r\n      \r\n        MyToken =  PlayerGameRound[ _player_address][ this_gRND].token;\r\n          \r\n        MyTokenValue = MyToken * HDXcontract.sellingPrice( true );\r\n        MyTokenValue /= magnitude;\r\n      \r\n        MyGains = 0;\r\n        MyTreasureFound = 0;\r\n        \r\n        if (PlayerData[ _player_address].gRND == this_gRND)\r\n        {\r\n       \r\n           MyGains =  get_PendingGainsAll( _player_address , this_gRND ); //just here for the view function so not used for any payout\r\n        \r\n           \r\n           for(uint i=0;i<4;i++)\r\n           {\r\n             MyTreasureFound += PlayerGameRound[_player_address][ this_gRND].shares[ i ].mul( _GameRoundData.treasurePerShare[ i ] ) / magnitude;\r\n           }\r\n       \r\n       \r\n            if (MyTreasureFound >=  PlayerGameRound[_player_address][this_gRND].treasure_payoutsTo) MyTreasureFound = MyTreasureFound.sub(  PlayerGameRound[_player_address][this_gRND].treasure_payoutsTo );\r\n            else MyTreasureFound = 0;\r\n              \r\n           \r\n            \r\n        }\r\n        \r\n        \r\n    }    \r\n \r\n \r\n    function totalEthereumBalance()\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function view_get_maintenanceMode()\r\n    public\r\n    view\r\n    returns(bool)\r\n    {\r\n        return( maintenanceMode);\r\n    }\r\n    \r\n    function view_get_blockNumbers()\r\n    public\r\n    view\r\n    returns( uint256 b1 , uint256 b2 )\r\n    {\r\n        return( block.number , GameRoundData[ this_gRND ].blockNumberTimeout);\r\n        \r\n    }\r\n    \r\n   \r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n   \r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n   \r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n   \r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n   \r\n    \r\n  \r\n    \r\n   \r\n}\r\n\r\n\r\nlibrary SafeMath128 {\r\n    \r\n   \r\n    function mul(uint128 a, uint128 b) \r\n        internal \r\n        pure \r\n        returns (uint128 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n   \r\n    function sub(uint128 a, uint128 b)\r\n        internal\r\n        pure\r\n        returns (uint128) \r\n    {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n   \r\n    function add(uint128 a, uint128 b)\r\n        internal\r\n        pure\r\n        returns (uint128 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n   \r\n    \r\n  \r\n    \r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"view_get_Treasure\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_maintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_gameStates\",\"outputs\":[{\"name\":\"types\",\"type\":\"uint8[4]\"},{\"name\":\"grnd\",\"type\":\"uint256\"},{\"name\":\"turnround\",\"type\":\"uint32\"},{\"name\":\"minimumshare\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"blockNumberTimeout\",\"type\":\"uint256\"},{\"name\":\"actionValue\",\"type\":\"uint32[6]\"},{\"name\":\"persoData\",\"type\":\"uint32[8]\"},{\"name\":\"powerUpData\",\"type\":\"uint32[8]\"},{\"name\":\"blockNumberCurrent\",\"type\":\"uint256\"},{\"name\":\"blockTimeAvg\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"p\",\"type\":\"uint8[4]\"}],\"name\":\"initRace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CloseEntry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blocktimeavg\",\"type\":\"uint256\"}],\"name\":\"changeBlockTimeAverage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"perso\",\"type\":\"uint32\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"action\",\"type\":\"uint32\"},{\"name\":\"_referrer_address\",\"type\":\"address\"}],\"name\":\"BuyShareWithDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_next\",\"type\":\"address\"}],\"name\":\"changeHDXcontract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_Gains\",\"outputs\":[{\"name\":\"gains\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_gameData\",\"outputs\":[{\"name\":\"sharePrice\",\"type\":\"uint256\"},{\"name\":\"sharePots\",\"type\":\"uint256[4]\"},{\"name\":\"shareSupply\",\"type\":\"uint256\"},{\"name\":\"shareEthBalance\",\"type\":\"uint256\"},{\"name\":\"treasurePerShare\",\"type\":\"uint128[4]\"},{\"name\":\"totalPlayers\",\"type\":\"uint32[4]\"},{\"name\":\"actionValue\",\"type\":\"uint32[6]\"},{\"name\":\"shares\",\"type\":\"uint256[4]\"},{\"name\":\"treasure_payoutsTo\",\"type\":\"uint256\"},{\"name\":\"treasureSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_ResultData\",\"outputs\":[{\"name\":\"TotalPlayer\",\"type\":\"uint32\"},{\"name\":\"TotalPayout\",\"type\":\"uint256\"},{\"name\":\"MyTokenValue\",\"type\":\"uint256\"},{\"name\":\"MyToken\",\"type\":\"uint256\"},{\"name\":\"MyGains\",\"type\":\"uint256\"},{\"name\":\"MyTreasureFound\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_blockNumbers\",\"outputs\":[{\"name\":\"b1\",\"type\":\"uint256\"},{\"name\":\"b2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawGains\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableMaintenance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableMaintenance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"perso\",\"type\":\"uint32\"},{\"name\":\"action\",\"type\":\"uint32\"},{\"name\":\"_referrer_address\",\"type\":\"address\"}],\"name\":\"BuyShare\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_allFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ChargeTreasure\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nextOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"next\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"HDXcontractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdrawGains\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gRND\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"turnRound\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"eventType\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"eventTarget\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"persoEnergy\",\"type\":\"uint32[4]\"},{\"indexed\":false,\"name\":\"persoDistance\",\"type\":\"uint32[4]\"},{\"indexed\":false,\"name\":\"powerUpSpeed\",\"type\":\"uint32[4]\"},{\"indexed\":false,\"name\":\"powerUpShield\",\"type\":\"uint32[4]\"},{\"indexed\":false,\"name\":\"blockNumberTimeout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"treasureAmountFind\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"}],\"name\":\"onNewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gRND\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"persoType\",\"type\":\"uint8[4]\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"onNewRace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gRND\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"perso\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"nbToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"actionType\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"actionValue\",\"type\":\"uint32\"}],\"name\":\"onBuyShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"mode\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onMaintenance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gRND\",\"type\":\"uint256\"}],\"name\":\"onCloseEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blocktimeavg\",\"type\":\"uint256\"}],\"name\":\"onChangeBlockTimeAverage\",\"type\":\"event\"}]","ContractName":"EtherKnightGame","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9b95ef886c66812439e14023002ee7b268cb453d8b41848d234c2e4388dea5d4"}]}