{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Ownable {\r\n  address public owner;\r\n  \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20CompatibleToken {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) balances; // List of user balances.\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n  \tevent Approval(address indexed owner, address indexed spender, uint value);\r\n    event Burn(address indexed who, uint value);\r\n\r\n  \tmapping (address => mapping (address => uint)) internal allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n    \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n  \r\n    // Transfer the balance from owner's account to another account\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n\r\n\r\n  / _ \\_____ / __/ _` | '__/ _` | __|                                   \r\n |  __/_____| (_| (_| | | | (_| | |_                                    \r\n  \\___|      \\___\\__,_|_|  \\__,_|\\__|                                   \r\n  ____  _                                 _    ____ _           _       \r\n |  _ \\(_) __ _ _ __ ___   ___  _ __   __| |  / ___| |__   __ _(_)_ __  \r\n | | | | |/ _` | '_ ` _ \\ / _ \\| '_ \\ / _` | | |   | '_ \\ / _` | | '_ \\ \r\n | |_| | | (_| | | | | | | (_) | | | | (_| | | |___| | | | (_| | | | | |\r\n |____/|_|\\__,_|_| |_| |_|\\___/|_| |_|\\__,_|  \\____|_| |_|\\__,_|_|_| |_|\r\n                                                                        \r\n                                                                        \r\n\r\nSymbol      : ECT\r\nName        : Eclaira\r\nTotal supply: 100,000,000.000000000000000000\r\nDecimals    : 18\r\n\r\nwebsite:https://e-carat.io/\r\ndeveloper:(c) Block Potentiality Studio 2019\r\n                                                 \r\n*/\r\n\r\n\r\ncontract Eclaira is ERC20CompatibleToken,Ownable {\r\n    using SafeMath for uint;\r\n\r\n    string public name    = \"Eclaira\";\r\n    string public symbol  = \"ECT\";\r\n    uint public decimals = 18;\r\n    uint public totalSupply = 100*1000*1000 * 1 ether;\r\n    uint public lockSupply=25*1000*1000 * 1 ether;\r\n    \r\n\r\n    // ----------------------------------------------------------------------------\r\n    // \r\n    // Lock 75% tokens until 2019/6/30 24:00:00\r\n    // \r\n    // ----------------------------------------------------------------------------\r\n\r\n    uint public lockDate=1561939200;\r\n    address public mainWallet;\r\n    \r\n    modifier isLocked() {\r\n        if(now<lockDate){\r\n            require(balances[mainWallet] - totalSupply.sub(lockSupply) >=0);\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(address _mainWallet) public {\r\n        mainWallet=_mainWallet;\r\n        \r\n        balances[mainWallet] = totalSupply;\r\n        emit Transfer(msg.sender, mainWallet, totalSupply);\r\n    }\r\n   \r\n\r\n    function balanceOf(address _who) public view returns(uint){\r\n        return balances[_who];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) isLocked public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value >= 0);\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        if(msg.sender==mainWallet && now < lockDate){\r\n            require(balances[mainWallet].sub(_value).sub(totalSupply.sub(lockSupply)) >=0);\r\n        }\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    // Send `tokens` amount of tokens from address `from` to address `to`\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) isLocked public returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        if(msg.sender==mainWallet && now < lockDate){\r\n            require(balances[mainWallet].sub(_value).sub(totalSupply.sub(lockSupply)) >=0);\r\n        }\r\n        \r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // \r\n    // Burn Tokenm\r\n    // Only mainWallet could be burn\r\n    // \r\n    // ----------------------------------------------------------------------------\r\n    \r\n    function burn(uint256 _value) onlyOwner public { \r\n        balances[mainWallet] = balances[mainWallet].sub(_value); \r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(mainWallet, _value); \r\n        emit Transfer(mainWallet, address(0), _value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mainWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"Eclaira","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d3e77d0b49a6c6f0602909dd160f7f14121a005b","Library":"","SwarmSource":"bzzr://72adea34bd24828ae40f130f0c182a0d9699734180bcbe8c7f24d0908ce70cae"}]}