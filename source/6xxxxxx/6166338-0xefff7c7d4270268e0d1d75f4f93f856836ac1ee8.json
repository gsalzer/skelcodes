{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract ballotBox {\r\n    // addresses set to true are able to create new ballots\r\n    mapping(address => bool) public creators;\r\n    // define ballot object/struct\r\n    struct ballot {\r\n        uint8 choiceCount;\r\n        uint256 voteCountBlock;\r\n    }\r\n    // create array of ballots\r\n    ballot[] public ballots;\r\n    \r\n    // event to record what ballot contracts have been deployed with what parameters\r\n    event BallotCreated( string ballotProposal, uint256 indexed ballotIndex, address indexed ballotCreator, bytes32[] choices, uint256 countBlock );\r\n    // event to record a vote\r\n    event Vote(uint256 indexed ballotIndex, address voter, uint8 choice);\r\n    // event to record changes to creator permission                                 \r\n    event CreatorModified(address creator, bool active, address indexed by);\r\n    \r\n    constructor() public {\r\n        // set contract creator as authorized ballot creator\r\n        creators[msg.sender] = true;\r\n        emit CreatorModified(msg.sender, true, msg.sender);\r\n    }\r\n    \r\n    function createBallot(string _ballotQuestion, bytes32[] _choices, uint256 _countBlock) public {\r\n        // ensure the count is in the future\r\n        require(_countBlock > block.number);\r\n        // ensure msg.sender is an authorized ballot creator\r\n        require(creators[msg.sender]);\r\n        // add ballot object to array\r\n        ballots.push(ballot(uint8(_choices.length),_countBlock));\r\n        // fire event to record ballot contract creation and parameters\r\n        emit BallotCreated( _ballotQuestion, ballots.length-1 , msg.sender, _choices, _countBlock);\r\n    }\r\n    \r\n    function vote(uint256 _ballotIndex, uint8 _choice) public {\r\n        // ensure the count Block is not exceeded\r\n        require(ballots[_ballotIndex].voteCountBlock > block.number);\r\n        // ensure vote is a valid choice\r\n        require(_choice < ballots[_ballotIndex].choiceCount);\r\n        // fire event to record Vote\r\n        emit Vote(_ballotIndex, msg.sender, _choice);\r\n    }\r\n    \r\n    function modifyCreator(address _creator, bool _active) public {\r\n        // ensure only creators can add or remove creators\r\n        require(creators[msg.sender]);\r\n        // ensure creators can only remove themselves\r\n        if(_active == false) require(_creator == msg.sender);\r\n        // set creator status\r\n        creators[_creator] = _active;\r\n        // fire event to record creator permission change\r\n        emit CreatorModified(_creator, _active, msg.sender); \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_ballotQuestion\",\"type\":\"string\"},{\"name\":\"_choices\",\"type\":\"bytes32[]\"},{\"name\":\"_countBlock\",\"type\":\"uint256\"}],\"name\":\"createBallot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"modifyCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ballots\",\"outputs\":[{\"name\":\"choiceCount\",\"type\":\"uint8\"},{\"name\":\"voteCountBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"creators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ballotIndex\",\"type\":\"uint256\"},{\"name\":\"_choice\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ballotProposal\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"ballotIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ballotCreator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"choices\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"countBlock\",\"type\":\"uint256\"}],\"name\":\"BallotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ballotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"choice\",\"type\":\"uint8\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"CreatorModified\",\"type\":\"event\"}]","ContractName":"ballotBox","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ad71d8369ad6eedd8f91446540e5d2987d1a95d4258b992c2b4316847bbb0d78"}]}