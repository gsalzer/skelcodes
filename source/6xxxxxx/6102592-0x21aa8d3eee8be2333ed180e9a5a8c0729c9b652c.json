{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ---------------------------------------------------------------------------------------------------\r\n// EnsSubdomainFactory - allows creating and configuring custom ENS subdomains with one contract call.\r\n//\r\n// (c) Radek Ostrowski / https://startonchain.com - MIT Licence.\r\n// Source: https://github.com/radek1st/ens-subdomain-factory\r\n// ---------------------------------------------------------------------------------------------------\r\n\r\n/**\r\n* @title EnsRegistry\r\n* @dev Extract of the interface for ENS Registry\r\n*/\r\ncontract EnsRegistry {\r\n\tfunction setOwner(bytes32 node, address owner) public;\r\n\tfunction setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\r\n\tfunction setResolver(bytes32 node, address resolver) public;\r\n\tfunction owner(bytes32 node) public view returns (address);\r\n}\r\n\r\n/**\r\n* @title EnsResolver\r\n* @dev Extract of the interface for ENS Resolver\r\n*/\r\ncontract EnsResolver {\r\n\tfunction setAddr(bytes32 node, address addr) public;\r\n}\r\n\r\n/**\r\n * @title EnsSubdomainFactory\r\n * @dev Allows to create and configure a first level subdomain for Ethereum ENS in one call.\r\n * After deploying this contract, change the owner of the top level domain you want to use\r\n * to this deployed contract address. For example, transfer the ownership of \"startonchain.eth\"\r\n * so anyone can create subdomains like \"radek.startonchain.eth\".\r\n */\r\ncontract EnsSubdomainFactory {\r\n\taddress public owner;\r\n    EnsRegistry public registry;\r\n\tEnsResolver public resolver;\r\n\tbool public locked;\r\n    bytes32 ethNameHash = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\r\n\r\n\tevent SubdomainCreated(address indexed creator, address indexed owner, string subdomain, string domain);\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\tevent RegistryUpdated(address indexed previousRegistry, address indexed newRegistry);\r\n\tevent ResolverUpdated(address indexed previousResolver, address indexed newResolver);\r\n\tevent TopLevelDomainTransfersLocked();\r\n\r\n\tconstructor(EnsRegistry _registry, EnsResolver _resolver) public {\r\n\t\towner = msg.sender;\r\n\t\tregistry = _registry;\r\n\t\tresolver = _resolver;\r\n\t\tlocked = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t *\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t  require(msg.sender == owner);\r\n\t  _;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows to create a subdomain (e.g. \"radek.startonchain.eth\"), \r\n\t * set its resolver and set its target address\r\n\t * @param _subDomain - sub domain name only e.g. \"radek\"\r\n\t * @param _topLevelDomain - parent domain name e.g. \"startonchain\"\r\n\t * @param _owner - address that will become owner of this new subdomain\r\n\t * @param _target - address that this new domain will resolve to\r\n\t */\r\n\tfunction newSubdomain(string _subDomain, string _topLevelDomain, address _owner, address _target) public {\r\n\t    //create namehash for the top domain\r\n\t    bytes32 topLevelNamehash = keccak256(abi.encodePacked(ethNameHash, keccak256(abi.encodePacked(_topLevelDomain))));\r\n\t    //make sure this contract owns the top level domain\r\n        require(registry.owner(topLevelNamehash) == address(this), \"this contract should own top level domain\");\r\n\t    //create labelhash for the sub domain\r\n\t    bytes32 subDomainLabelhash = keccak256(abi.encodePacked(_subDomain));\r\n\t    //create namehash for the sub domain\r\n\t    bytes32 subDomainNamehash = keccak256(abi.encodePacked(topLevelNamehash, subDomainLabelhash));\r\n        //make sure it is free or owned by the sender\r\n        require(registry.owner(subDomainNamehash) == address(0) ||\r\n            registry.owner(subDomainNamehash) == msg.sender, \"sub domain already owned\");\r\n\t\t//create new subdomain, temporarily this smartcontract is the owner\r\n\t\tregistry.setSubnodeOwner(topLevelNamehash, subDomainLabelhash, address(this));\r\n\t\t//set public resolver for this domain\r\n\t\tregistry.setResolver(subDomainNamehash, resolver);\r\n\t\t//set the destination address\r\n\t\tresolver.setAddr(subDomainNamehash, _target);\r\n\t\t//change the ownership back to requested owner\r\n\t\tregistry.setOwner(subDomainNamehash, _owner);\r\n\t\t\r\n\t\temit SubdomainCreated(msg.sender, _owner, _subDomain, _topLevelDomain);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the owner of top level domain (e.g. \"startonchain.eth\"), \r\n\t * @param _topLevelDomain - domain name e.g. \"startonchain\"\r\n\t */\r\n\tfunction topLevelDomainOwner(string _topLevelDomain) public view returns(address) {\r\n\t\tbytes32 namehash = keccak256(abi.encodePacked(ethNameHash, keccak256(abi.encodePacked(_topLevelDomain))));\r\n\t\treturn registry.owner(namehash);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Return the owner of a subdomain (e.g. \"radek.startonchain.eth\"), \r\n\t * @param _subDomain - sub domain name only e.g. \"radek\"\r\n\t * @param _topLevelDomain - parent domain name e.g. \"startonchain\"\r\n\t */\r\n\tfunction subDomainOwner(string _subDomain, string _topLevelDomain) public view returns(address) {\r\n\t\tbytes32 topLevelNamehash = keccak256(abi.encodePacked(ethNameHash, keccak256(abi.encodePacked(_topLevelDomain))));\r\n\t\tbytes32 subDomainNamehash = keccak256(abi.encodePacked(topLevelNamehash, keccak256(abi.encodePacked(_subDomain))));\r\n\t\treturn registry.owner(subDomainNamehash);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The contract owner can take away the ownership of any domain owned by this contract.\r\n\t * @param _node - namehash of the domain\r\n\t * @param _owner - new owner for the domain\r\n\t */\r\n\tfunction transferTopLevelDomainOwnership(bytes32 _node, address _owner) public onlyOwner {\r\n\t\trequire(!locked);\r\n\t\tregistry.setOwner(_node, _owner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The contract owner can lock and prevent any future domain ownership transfers.\r\n\t */\r\n\tfunction lockTopLevelDomainOwnershipTransfers() public onlyOwner {\r\n\t\trequire(!locked);\r\n\t\tlocked = true;\r\n\t\temit TopLevelDomainTransfersLocked();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows to update to new ENS registry.\r\n\t * @param _registry The address of new ENS registry to use.\r\n\t */\r\n\tfunction updateRegistry(EnsRegistry _registry) public onlyOwner {\r\n\t\trequire(registry != _registry, \"new registry should be different from old\");\r\n\t\temit RegistryUpdated(registry, _registry);\r\n\t\tregistry = _registry;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows to update to new ENS resolver.\r\n\t * @param _resolver The address of new ENS resolver to use.\r\n\t */\r\n\tfunction updateResolver(EnsResolver _resolver) public onlyOwner {\r\n\t\trequire(resolver != _resolver, \"new resolver should be different from old\");\r\n\t\temit ResolverUpdated(resolver, _resolver);\r\n\t\tresolver = _resolver;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows the current owner to transfer control of the contract to a new owner.\r\n\t * @param _owner The address to transfer ownership to.\r\n\t */\r\n\tfunction transferContractOwnership(address _owner) public onlyOwner {\r\n\t\trequire(_owner != address(0), \"cannot transfer to address(0)\");\r\n\t\temit OwnershipTransferred(owner, _owner);\r\n\t\towner = _owner;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockTopLevelDomainOwnershipTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_topLevelDomain\",\"type\":\"string\"}],\"name\":\"topLevelDomainOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferTopLevelDomainOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_subDomain\",\"type\":\"string\"},{\"name\":\"_topLevelDomain\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"newSubdomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"updateResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_subDomain\",\"type\":\"string\"},{\"name\":\"_topLevelDomain\",\"type\":\"string\"}],\"name\":\"subDomainOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subdomain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"SubdomainCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousRegistry\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"RegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousResolver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newResolver\",\"type\":\"address\"}],\"name\":\"ResolverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TopLevelDomainTransfersLocked\",\"type\":\"event\"}]","ContractName":"EnsSubdomainFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b0000000000000000000000005ffc014343cd971b7eb70732021e26c35b744cc4","Library":"","SwarmSource":"bzzr://b4b3558e1e17923e1906bc9857bace5fa4250c4a9bc6344ce526a88589389e13"}]}