{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ninterface App \r\n{\r\n    function mint(address receiver, uint64 wad) external returns (bool);\r\n    function changeGatewayAddr(address newer) external returns (bool);\r\n}\r\n\r\ncontract GatewayVote \r\n{\r\n    \r\n    struct Vote \r\n    {\r\n        bool done;\r\n        uint poll;\r\n        mapping(uint256 => uint8) voters;\r\n    }\r\n    \r\n    struct AppInfo\r\n    {\r\n        uint32 chainCode;\r\n        uint32 tokenCode;\r\n        uint256 app;\r\n    }\r\n\r\n\r\n    // FIELDS\r\n    bool    public mStopped;\r\n    uint32  public mMaxAppCode;\r\n    uint32  public mMaxChainCode;\r\n    uint256 public mNumVoters;\r\n    \r\n    mapping(uint256 => uint8) mVoters;\r\n    mapping(uint256 => Vote) mVotesStore;\r\n    \r\n    mapping(uint256 => uint32) mAppToCode;\r\n    mapping(uint32 => AppInfo) mCodeToAppInfo;\r\n    \r\n    mapping(string => uint32) mChainToCode;\r\n    mapping(uint32 => string) mCodeToChain;\r\n    \r\n\r\n    // EVENTS\r\n    event Stopped(uint256 indexed operation);\r\n    event Started(uint256 indexed operation);\r\n    \r\n    event Confirmation(address voter, uint256 indexed operation);\r\n    event OperationDone(address voter, uint256 indexed operation);\r\n    event Revoke(address revoker, uint256 indexed operation);\r\n    \r\n    event VoterChanged(address oldVoter, address newVoter, uint256 indexed operation);\r\n    event VoterAdded(address newVoter, uint256 indexed operation);\r\n    event VoterRemoved(address oldVoter, uint256 indexed operation);\r\n    \r\n    event ChainAdded(string chain, uint256 indexed operation);\r\n    \r\n    event AppAdded(address app, uint32 chain, uint32 token, uint256 indexed operation);\r\n    event AppRemoved(uint32 code, uint256 indexed operation);\r\n    \r\n    event MintByGateway(uint32 appCode, address receiver, uint64 wad, uint256 indexed operation);\r\n    event BurnForGateway(uint32 appCode, address from, string receiver, uint64 wad);\r\n\r\n    event GatewayAddrChanged(uint32 appCode, address newer, uint256 indexed operation);\r\n\r\n    // METHODS\r\n\r\n    constructor(address[] voters) public \r\n    {\r\n        mNumVoters = voters.length;\r\n        for (uint i = 0; i < voters.length; ++i)\r\n        {\r\n            mVoters[uint(voters[i])] = 1;\r\n        }\r\n    }\r\n    \r\n    function isVoter(address voter) public view returns (bool) \r\n    {\r\n        return mVoters[uint(voter)] == 1;\r\n    }\r\n    \r\n    function isApper(address app) public view returns (bool) \r\n    {\r\n        return mAppToCode[uint(app)] > 0;\r\n    }\r\n    \r\n    function isAppCode(uint32 code) public view returns (bool) \r\n    {\r\n        return mAppToCode[uint256(mCodeToAppInfo[code].app)] == code;\r\n    }\r\n    \r\n    function getAppAddress(uint32 code) public view returns (address) \r\n    {\r\n        return address(mCodeToAppInfo[code].app);\r\n    }\r\n    \r\n    function getAppChainCode(uint32 code) public view returns (uint32) \r\n    {\r\n        return mCodeToAppInfo[code].chainCode;\r\n    }\r\n    \r\n    function getAppTokenCode(uint32 code) public view returns (uint32)\r\n    {\r\n        return mCodeToAppInfo[code].tokenCode;\r\n    }\r\n    \r\n    function getAppInfo(uint32 code) public view returns (address, uint32, uint32)\r\n    {\r\n        return (address(mCodeToAppInfo[code].app), mCodeToAppInfo[code].chainCode, mCodeToAppInfo[code].tokenCode);\r\n    }\r\n    \r\n    function getAppCode(address app) public view returns (uint32) \r\n    {\r\n        return mAppToCode[uint256(app)];\r\n    }\r\n    \r\n    function isCaller(address addr) public view returns (bool) \r\n    {\r\n        return isVoter(addr) || isApper(addr);\r\n    }\r\n    \r\n    function isChain(string chain) public view returns (bool) \r\n    {\r\n        return mChainToCode[chain] > 0;\r\n    }\r\n    \r\n    function isChainCode(uint32 code) public view returns (bool)\r\n    {\r\n        return mChainToCode[mCodeToChain[code]] == code;\r\n    }\r\n    \r\n    function getChainName(uint32 code) public view returns (string) \r\n    {\r\n        return mCodeToChain[code];\r\n    }\r\n    \r\n    function getChainCode(string chain) public view returns (uint32) \r\n    {\r\n        return mChainToCode[chain];\r\n    }\r\n    \r\n    function hasConfirmed(uint256 operation, address voter) public constant returns (bool) \r\n    {\r\n        if (mVotesStore[operation].voters[uint(voter)] == 1) \r\n        {\r\n            return true;\r\n        } \r\n        else \r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function major(uint total) internal pure returns (uint r) \r\n    {\r\n        r = (total * 2 + 1);\r\n        return r%3==0 ? r/3 : r/3+1;\r\n    }\r\n\r\n    function confirmation(uint256 operation) internal returns (bool) \r\n    {\r\n        Vote storage vote = mVotesStore[operation];\r\n        \r\n        if (vote.done) return;\r\n        \r\n        if (vote.voters[uint(tx.origin)] == 0) \r\n        {\r\n            vote.voters[uint(tx.origin)] = 1;\r\n            vote.poll++;\r\n            emit Confirmation(tx.origin, operation);\r\n        }\r\n        \r\n        //check if poll is enough to go ahead.\r\n        if (vote.poll >= major(mNumVoters)) \r\n        {\r\n            vote.done = true;\r\n            emit OperationDone(tx.origin, operation);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function stop(string proposal) external \r\n    {\r\n        // the origin tranx sender should be a voter\r\n        // contract should be running\r\n        require(isVoter(tx.origin) && !mStopped);\r\n        \r\n        // wait for voters until poll >= major\r\n        if(!confirmation(uint256(keccak256(msg.data)))) return;\r\n        \r\n        // change state\r\n        mStopped = true;\r\n        \r\n        // log output\r\n        emit Stopped(uint(keccak256(msg.data)));\r\n    }\r\n    \r\n    function start(string proposal) external \r\n    {\r\n        \r\n        // the origin tranx sender should be a voter\r\n        // contract should be stopped\r\n        require(isVoter(tx.origin) && mStopped);\r\n        \r\n        if(!confirmation(uint256(keccak256(msg.data)))) return;\r\n        \r\n        mStopped = false;\r\n        \r\n        emit Started(uint(keccak256(msg.data)));\r\n    }\r\n    \r\n    function revoke(uint256 operation) external \r\n    {\r\n        \r\n        require(isVoter(tx.origin) && !mStopped);\r\n        \r\n        Vote storage vote = mVotesStore[operation];\r\n        \r\n        // the vote for this operation should not be done\r\n        // the origin tranx sender should have voted to this operation\r\n        require(!vote.done && (vote.voters[uint(tx.origin)] ==  1));\r\n        \r\n        vote.poll--;\r\n        delete vote.voters[uint(tx.origin)];\r\n        \r\n        emit Revoke(tx.origin, operation);\r\n    }\r\n    \r\n    function changeVoter(address older, address newer, string proposal) external \r\n    {\r\n        \r\n        require(isVoter(tx.origin) && !mStopped && isVoter(older) && !isVoter(newer));\r\n        \r\n        if(!confirmation(uint256(keccak256(msg.data)))) return;\r\n        \r\n        mVoters[uint(newer)] = 1;\r\n        delete mVoters[uint(older)];\r\n        \r\n        emit VoterChanged(older, newer, uint(keccak256(msg.data)));\r\n    }\r\n    \r\n    function addVoter(address newer, string proposal) external \r\n    {\r\n        \r\n        require(isVoter(tx.origin) && !mStopped && !isVoter(newer));\r\n        \r\n        if(!confirmation(uint256(keccak256(msg.data)))) return;\r\n        \r\n        mNumVoters++;\r\n        mVoters[uint(newer)] = 1;\r\n        \r\n        emit VoterAdded(newer, uint256(keccak256(msg.data)));\r\n    }\r\n    \r\n    function removeVoter(address older, string proposal) external \r\n    {\r\n        \r\n        require(isVoter(tx.origin) && !mStopped && isVoter(older));\r\n        \r\n        if(!confirmation(uint256(keccak256(msg.data)))) return;\r\n        \r\n        mNumVoters--;\r\n        delete mVoters[uint(older)];\r\n        \r\n        emit VoterRemoved(older, uint256(keccak256(msg.data)));\r\n    }\r\n    \r\n    function addChain(string chain, string proposal) external \r\n    {\r\n        require(isVoter(tx.origin) && !mStopped && !isChain(chain));\r\n        \r\n        if(!confirmation(uint256(keccak256(msg.data)))) return;\r\n        \r\n        mMaxChainCode++;\r\n        mChainToCode[chain] = mMaxChainCode;\r\n        mCodeToChain[mMaxChainCode] = chain;\r\n        \r\n        emit ChainAdded(chain, uint256(keccak256(msg.data)));\r\n    }\r\n    \r\n    function addApp(address app, uint32 chain, uint32 token, string proposal) external \r\n    {\r\n        require(isVoter(tx.origin) && !mStopped && !isApper(app) && isChainCode(chain));\r\n        \r\n        if(!confirmation(uint256(keccak256(msg.data)))) return;\r\n        \r\n        mMaxAppCode++;\r\n        mAppToCode[uint256(app)] =mMaxAppCode;\r\n        mCodeToAppInfo[mMaxAppCode] = AppInfo(chain, token, uint256(app));\r\n        \r\n        emit AppAdded(app, chain, token, uint256(keccak256(msg.data)));\r\n    }\r\n    \r\n    function removeApp(uint32 code, string proposal) external \r\n    {\r\n        require(isVoter(tx.origin) && !mStopped && isAppCode(code));\r\n        \r\n        if(!confirmation(uint256(keccak256(msg.data)))) return;\r\n    \r\n        delete mAppToCode[uint256(mCodeToAppInfo[code].app)];\r\n        \r\n        emit AppRemoved(code, uint256(keccak256(msg.data)));\r\n    }\r\n    \r\n    function mintByGateway(uint32 appCode, uint64 wad, address receiver, string proposal) external \r\n    {\r\n        require(isVoter(tx.origin) && !mStopped && isAppCode(appCode));\r\n        \r\n        if(!confirmation(uint256(keccak256(msg.data)))) return;\r\n        \r\n        if (App(address(mCodeToAppInfo[appCode].app)).mint(receiver, wad))\r\n        {\r\n            emit MintByGateway(appCode, receiver, wad, uint256(keccak256(msg.data)));\r\n        }\r\n    }\r\n    \r\n    function changeGatewayAddr(uint32 appCode, address newer, string proposal) external \r\n    {\r\n        require(isVoter(tx.origin) && !mStopped && isAppCode(appCode));\r\n        \r\n        if(!confirmation(uint256(keccak256(msg.data)))) return;\r\n        \r\n        if(App(address(mCodeToAppInfo[appCode].app)).changeGatewayAddr(newer)) \r\n        {\r\n            emit GatewayAddrChanged(appCode, newer, uint256(keccak256(msg.data)));\r\n        }\r\n    }\r\n    \r\n    function burnForGateway(address from, string receiver, uint64 wad) external \r\n    {\r\n        require(isApper(msg.sender));\r\n        emit BurnForGateway(mAppToCode[uint256(msg.sender)], from, receiver, wad);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"operation\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"uint32\"}],\"name\":\"isChainCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposal\",\"type\":\"string\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"app\",\"type\":\"address\"},{\"name\":\"chain\",\"type\":\"uint32\"},{\"name\":\"token\",\"type\":\"uint32\"},{\"name\":\"proposal\",\"type\":\"string\"}],\"name\":\"addApp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"string\"},{\"name\":\"wad\",\"type\":\"uint64\"}],\"name\":\"burnForGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mMaxAppCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"uint32\"}],\"name\":\"getChainName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"app\",\"type\":\"address\"}],\"name\":\"getAppCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mMaxChainCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"appCode\",\"type\":\"uint32\"},{\"name\":\"newer\",\"type\":\"address\"},{\"name\":\"proposal\",\"type\":\"string\"}],\"name\":\"changeGatewayAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposal\",\"type\":\"string\"}],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"uint32\"}],\"name\":\"getAppAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"uint32\"}],\"name\":\"isAppCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"uint32\"}],\"name\":\"getAppTokenCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"code\",\"type\":\"uint32\"},{\"name\":\"proposal\",\"type\":\"string\"}],\"name\":\"removeApp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"uint32\"}],\"name\":\"getAppChainCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"uint32\"}],\"name\":\"getAppInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"isVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"chain\",\"type\":\"string\"},{\"name\":\"proposal\",\"type\":\"string\"}],\"name\":\"addChain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"appCode\",\"type\":\"uint32\"},{\"name\":\"wad\",\"type\":\"uint64\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"proposal\",\"type\":\"string\"}],\"name\":\"mintByGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"app\",\"type\":\"address\"}],\"name\":\"isApper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"getChainCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mNumVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"older\",\"type\":\"address\"},{\"name\":\"newer\",\"type\":\"address\"},{\"name\":\"proposal\",\"type\":\"string\"}],\"name\":\"changeVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"older\",\"type\":\"address\"},{\"name\":\"proposal\",\"type\":\"string\"}],\"name\":\"removeVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newer\",\"type\":\"address\"},{\"name\":\"proposal\",\"type\":\"string\"}],\"name\":\"addVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"isChain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"voters\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"Stopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"OperationDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldVoter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newVoter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"VoterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newVoter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"VoterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldVoter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"VoterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"chain\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"ChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"app\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"chain\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"AppAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"code\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"AppRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"appCode\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint64\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"MintByGateway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"appCode\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint64\"}],\"name\":\"BurnForGateway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"appCode\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"newer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"GatewayAddrChanged\",\"type\":\"event\"}]","ContractName":"GatewayVote","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000b42c436da7ece89914f75bd7239105bcba13590d000000000000000000000000862775d4b99075883a18eed2cafcf0d9ae839e0300000000000000000000000018945052716c87a4ab53063488f34f1a11b05ed20000000000000000000000006bcb244c6eb027ffed5c99943491637bc4824171","Library":"","SwarmSource":"bzzr://53ca037f8cdd52ac0988f154e55299b3c63231dff0b08bdc6415956390841a72"}]}