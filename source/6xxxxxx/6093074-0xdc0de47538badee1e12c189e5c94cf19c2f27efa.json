{"status":"1","message":"OK","result":[{"SourceCode":"// solhint-disable-next-line compiler-fixed, compiler-gt-0_4\r\npragma solidity ^0.4.24;\r\n\r\n//                             _,,ad8888888888bba,_\r\n//                         ,ad88888I888888888888888ba,\r\n//                       ,88888888I88888888888888888888a,\r\n//                     ,d888888888I8888888888888888888888b,\r\n//                    d88888PP\"\"\"\" \"\"YY88888888888888888888b,\r\n//                  ,d88\"'__,,--------,,,,.;ZZZY8888888888888,\r\n//                 ,8IIl'\"                ;;l\"ZZZIII8888888888,\r\n//                ,I88l;'                  ;lZZZZZ888III8888888,\r\n//              ,II88Zl;.                  ;llZZZZZ888888I888888,\r\n//             ,II888Zl;.                .;;;;;lllZZZ888888I8888b\r\n//            ,II8888Z;;                 `;;;;;''llZZ8888888I8888,\r\n//            II88888Z;'                        .;lZZZ8888888I888b\r\n//            II88888Z; _,aaa,      .,aaaaa,__.l;llZZZ88888888I888\r\n//            II88888IZZZZZZZZZ,  .ZZZZZZZZZZZZZZ;llZZ88888888I888,\r\n//            II88888IZZ<'(@@>Z|  |ZZZ<'(@@>ZZZZ;;llZZ888888888I88I\r\n//           ,II88888;   `\"\"\" ;|  |ZZ; `\"\"\"     ;;llZ8888888888I888\r\n//           II888888l            `;;          .;llZZ8888888888I888,\r\n//          ,II888888Z;           ;;;        .;;llZZZ8888888888I888I\r\n//          III888888Zl;    ..,   `;;       ,;;lllZZZ88888888888I888\r\n//          II88888888Z;;...;(_    _)      ,;;;llZZZZ88888888888I888,\r\n//          II88888888Zl;;;;;' `--'Z;.   .,;;;;llZZZZ88888888888I888b\r\n//          ]I888888888Z;;;;'   \";llllll;..;;;lllZZZZ88888888888I8888,\r\n//          II888888888Zl.;;\"Y88bd888P\";;,..;lllZZZZZ88888888888I8888I\r\n//          II8888888888Zl;.; `\"PPP\";;;,..;lllZZZZZZZ88888888888I88888\r\n//          II888888888888Zl;;. `;;;l;;;;lllZZZZZZZZW88888888888I88888\r\n//          `II8888888888888Zl;.    ,;;lllZZZZZZZZWMZ88888888888I88888\r\n//           II8888888888888888ZbaalllZZZZZZZZZWWMZZZ8888888888I888888,\r\n//           `II88888888888888888b\"WWZZZZZWWWMMZZZZZZI888888888I888888b\r\n//            `II88888888888888888;ZZMMMMMMZZZZZZZZllI888888888I8888888\r\n//             `II8888888888888888 `;lZZZZZZZZZZZlllll888888888I8888888,\r\n//              II8888888888888888, `;lllZZZZllllll;;.Y88888888I8888888b,\r\n//             ,II8888888888888888b   .;;lllllll;;;.;..88888888I88888888b,\r\n//             II888888888888888PZI;.  .`;;;.;;;..; ...88888888I8888888888,\r\n//             II888888888888PZ;;';;.   ;. .;.  .;. .. Y8888888I88888888888b,\r\n//            ,II888888888PZ;;'                        `8888888I8888888888888b,\r\n//            II888888888'                              888888I8888888888888888b\r\n//           ,II888888888                              ,888888I88888888888888888\r\n//          ,d88888888888                              d888888I8888888888ZZZZZZZ\r\n//       ,ad888888888888I                              8888888I8888ZZZZZZZZZZZZZ\r\n//     ,d888888888888888'                              888888IZZZZZZZZZZZZZZZZZZ\r\n//   ,d888888888888P'8P'                               Y888ZZZZZZZZZZZZZZZZZZZZZ\r\n//  ,8888888888888,  \"                                 ,ZZZZZZZZZZZZZZZZZZZZZZZZ\r\n// d888888888888888,                                ,ZZZZZZZZZZZZZZZZZZZZZZZZZZZ\r\n// 888888888888888888a,      _                    ,ZZZZZZZZZZZZZZZZZZZZ888888888\r\n// 888888888888888888888ba,_d'                  ,ZZZZZZZZZZZZZZZZZ88888888888888\r\n// 8888888888888888888888888888bbbaaa,,,______,ZZZZZZZZZZZZZZZ888888888888888888\r\n// 88888888888888888888888888888888888888888ZZZZZZZZZZZZZZZ888888888888888888888\r\n// 8888888888888888888888888888888888888888ZZZZZZZZZZZZZZ88888888888888888888888\r\n// 888888888888888888888888888888888888888ZZZZZZZZZZZZZZ888888888888888888888888\r\n// 8888888888888888888888888888888888888ZZZZZZZZZZZZZZ88888888888888888888888888\r\n// 88888888888888888888888888888888888ZZZZZZZZZZZZZZ8888888888888888888888888888\r\n// 8888888888888888888888888888888888ZZZZZZZZZZZZZZ88888888888888888 Da Vinci 88\r\n// 88888888888888888888888888888888ZZZZZZZZZZZZZZ8888888888888888888  Coders  88\r\n// 8888888888888888888888888888888ZZZZZZZZZZZZZZ88888888888888888888888888888888\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    return a / b;\r\n  }\r\n\r\n  function mod(uint a, uint b) internal pure returns (uint) {\r\n    return a % b;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Dividends {\r\n  using SafeMath for *;\r\n\r\n  uint private constant FIXED_POINT = 1000000000000000000;\r\n\r\n  struct Scheme {\r\n    uint value;\r\n    uint shares;\r\n    uint mask;\r\n  }\r\n\r\n  struct Vault {\r\n    uint value;\r\n    uint shares;\r\n    uint mask;\r\n  }\r\n\r\n  mapping (uint => mapping (address => Vault)) private vaultOfAddress;\r\n  mapping (uint => Scheme) private schemeOfId;\r\n\r\n  function buyShares (uint _schemeId, address _owner, uint _shares, uint _value) internal {\r\n    require(_owner != address(0));\r\n    require(_shares > 0 && _value > 0);\r\n\r\n    uint value = _value.mul(FIXED_POINT);\r\n\r\n    Scheme storage scheme = schemeOfId[_schemeId];\r\n\r\n    scheme.value = scheme.value.add(_value);\r\n    scheme.shares = scheme.shares.add(_shares);\r\n\r\n    require(value > scheme.shares);\r\n\r\n    uint pps = value.div(scheme.shares);\r\n\r\n    Vault storage vault = vaultOfAddress[_schemeId][_owner];\r\n\r\n    vault.shares = vault.shares.add(_shares);\r\n    vault.mask = vault.mask.add(scheme.mask.mul(_shares));\r\n    vault.value = vault.value.add(value.sub(pps.mul(scheme.shares)));\r\n\r\n    scheme.mask = scheme.mask.add(pps);\r\n  }\r\n\r\n  function flushVault (uint _schemeId, address _owner) internal {\r\n    uint gains = gainsOfVault(_schemeId, _owner);\r\n    if (gains > 0) {\r\n      Vault storage vault = vaultOfAddress[_schemeId][_owner];\r\n      vault.value = vault.value.add(gains);\r\n      vault.mask = vault.mask.add(gains);\r\n    }\r\n  }\r\n\r\n  function withdrawVault (uint _schemeId, address _owner) internal returns (uint) {\r\n    flushVault(_schemeId, _owner);\r\n\r\n    Vault storage vault = vaultOfAddress[_schemeId][_owner];\r\n    uint payout = vault.value.div(FIXED_POINT);\r\n\r\n    if (payout > 0) {\r\n      vault.value = 0;\r\n    }\r\n\r\n    return payout;\r\n  }\r\n\r\n  function creditVault (uint _schemeId, address _owner, uint _value) internal {\r\n    Vault storage vault = vaultOfAddress[_schemeId][_owner];\r\n    vault.value = vault.value.add(_value.mul(FIXED_POINT));\r\n  }\r\n\r\n  function gainsOfVault (uint _schemeId, address _owner) internal view returns (uint) {\r\n    Scheme storage scheme = schemeOfId[_schemeId];\r\n    Vault storage vault = vaultOfAddress[_schemeId][_owner];\r\n\r\n    if (vault.shares == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return scheme.mask.mul(vault.shares).sub(vault.mask);\r\n  }\r\n\r\n  function valueOfVault (uint _schemeId, address _owner) internal view returns (uint) {\r\n    Vault storage vault = vaultOfAddress[_schemeId][_owner];\r\n    return vault.value;\r\n  }\r\n\r\n  function balanceOfVault (uint _schemeId, address _owner) internal view returns (uint) {\r\n    Vault storage vault = vaultOfAddress[_schemeId][_owner];\r\n\r\n    uint total = vault.value.add(gainsOfVault(_schemeId, _owner));\r\n    uint balance = total.div(FIXED_POINT);\r\n\r\n    return balance;\r\n  }\r\n\r\n  function sharesOfVault (uint _schemeId, address _owner) internal view returns (uint) {\r\n    Vault storage vault = vaultOfAddress[_schemeId][_owner];\r\n    return vault.shares;\r\n  }\r\n\r\n  function valueOfScheme (uint _schemeId) internal view returns (uint) {\r\n    return schemeOfId[_schemeId].value;\r\n  }\r\n\r\n  function sharesOfScheme (uint _schemeId) internal view returns (uint) {\r\n    return schemeOfId[_schemeId].shares;\r\n  }\r\n}\r\n\r\n\r\nlibrary Utils {\r\n  using SafeMath for uint;\r\n\r\n  uint private constant LAST_COUNTRY = 195;\r\n\r\n  function regularTicketPrice () internal pure returns (uint) {\r\n    return 100000000000000;\r\n  }\r\n\r\n  function goldenTicketPrice (uint _x) internal pure returns (uint) {\r\n    uint price = _x.mul(_x).div(2168819140000000000000000).add(100000000000000).add(_x.div(100000));\r\n    return price < regularTicketPrice() ? regularTicketPrice() : price;\r\n  }\r\n\r\n  function ticketsForWithExcess (uint _value) internal pure returns (uint, uint) {\r\n    uint tickets = _value.div(regularTicketPrice());\r\n    uint excess = _value.sub(tickets.mul(regularTicketPrice()));\r\n    return (tickets, excess);\r\n  }\r\n\r\n  function percentageOf (uint _value, uint _p) internal pure returns (uint) {\r\n    return _value.mul(_p).div(100);\r\n  }\r\n\r\n  function validReferralCode (string _code) internal pure returns (bool) {\r\n    bytes memory b = bytes(_code);\r\n\r\n    if (b.length < 3) {\r\n      return false;\r\n    }\r\n\r\n    for (uint i = 0; i < b.length; i++) {\r\n      bytes1 c = b[i];\r\n      if (\r\n        !(c >= 0x30 && c <= 0x39) && // 0-9\r\n        !(c >= 0x41 && c <= 0x5A) && // A-Z\r\n        !(c >= 0x61 && c <= 0x7A) && // a-z\r\n        !(c == 0x2D) // -\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function validNick (string _nick) internal pure returns (bool) {\r\n    return bytes(_nick).length > 3;\r\n  }\r\n\r\n  function validCountryId (uint _countryId) internal pure returns (bool) {\r\n    return _countryId > 0 && _countryId <= LAST_COUNTRY;\r\n  }\r\n}\r\n\r\n\r\ncontract Events {\r\n  event Started (\r\n    uint _time\r\n  );\r\n\r\n  event Bought (\r\n    address indexed _player,\r\n    address indexed _referral,\r\n    uint _countryId,\r\n    uint _tickets,\r\n    uint _value,\r\n    uint _excess\r\n  );\r\n\r\n  event Promoted (\r\n    address indexed _player,\r\n    uint _goldenTickets,\r\n    uint _endTime\r\n  );\r\n\r\n  event Withdrew (\r\n    address indexed _player,\r\n    uint _amount\r\n  );\r\n\r\n  event Registered (\r\n    string _code, address indexed _referral\r\n  );\r\n\r\n  event Won (\r\n    address indexed _winner, uint _pot\r\n  );\r\n}\r\n\r\n\r\ncontract Constants {\r\n  uint internal constant MAIN_SCHEME = 1337;\r\n  uint internal constant DEFAULT_COUNTRY = 1;\r\n\r\n  uint internal constant SET_NICK_FEE = 0.01 ether;\r\n  uint internal constant REFERRAL_REGISTRATION_FEE = 0.1 ether;\r\n\r\n  uint internal constant TO_DIVIDENDS = 40;\r\n  uint internal constant TO_REFERRAL = 10;\r\n  uint internal constant TO_DEVELOPERS = 8;\r\n  uint internal constant TO_COUNTRY = 12;\r\n}\r\n\r\n\r\ncontract State is Constants {\r\n  address internal addressOfOwner;\r\n\r\n  uint internal maxTime = 0;\r\n  uint internal addedTime = 0;\r\n\r\n  uint internal totalPot = 0;\r\n  uint internal startTime = 0;\r\n  uint internal endTime = 0;\r\n  bool internal potWithdrawn = false;\r\n  address internal addressOfCaptain;\r\n\r\n  struct Info {\r\n    address referral;\r\n    uint countryId;\r\n    uint withdrawn;\r\n    string nick;\r\n  }\r\n\r\n  mapping (address => Info) internal infoOfAddress;\r\n  mapping (address => string[]) internal codesOfAddress;\r\n  mapping (string => address) internal addressOfCode;\r\n\r\n  modifier restricted () {\r\n    require(msg.sender == addressOfOwner);\r\n    _;\r\n  }\r\n\r\n  modifier active () {\r\n    require(startTime > 0);\r\n    require(block.timestamp < endTime);\r\n    require(!potWithdrawn);\r\n    _;\r\n  }\r\n\r\n  modifier player () {\r\n    require(infoOfAddress[msg.sender].countryId > 0);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\ncontract Core is Events, State, Dividends {}\r\n\r\n\r\ncontract ExternalView is Core {\r\n  function totalInfo () external view returns (bool, bool, address, uint, uint, uint, uint, uint, uint, address) {\r\n    return (\r\n      startTime > 0,\r\n      block.timestamp >= endTime,\r\n      addressOfCaptain,\r\n      totalPot,\r\n      endTime,\r\n      sharesOfScheme(MAIN_SCHEME),\r\n      valueOfScheme(MAIN_SCHEME),\r\n      maxTime,\r\n      addedTime,\r\n      addressOfOwner\r\n    );\r\n  }\r\n\r\n  function countryInfo (uint _countryId) external view returns (uint, uint) {\r\n    return (\r\n      sharesOfScheme(_countryId),\r\n      valueOfScheme(_countryId)\r\n    );\r\n  }\r\n\r\n  function playerInfo (address _player) external view returns (uint, uint, uint, address, uint, uint, string) {\r\n    Info storage info = infoOfAddress[_player];\r\n    return (\r\n      sharesOfVault(MAIN_SCHEME, _player),\r\n      balanceOfVault(MAIN_SCHEME, _player),\r\n      balanceOfVault(info.countryId, _player),\r\n      info.referral,\r\n      info.countryId,\r\n      info.withdrawn,\r\n      info.nick\r\n    );\r\n  }\r\n\r\n  function numberOfReferralCodes (address _player) external view returns (uint) {\r\n    return codesOfAddress[_player].length;\r\n  }\r\n\r\n  function referralCodeAt (address _player, uint i) external view returns (string) {\r\n    return codesOfAddress[_player][i];\r\n  }\r\n\r\n  function codeToAddress (string _code) external view returns (address) {\r\n    return addressOfCode[_code];\r\n  }\r\n\r\n  function goldenTicketPrice (uint _x) external pure returns (uint) {\r\n    return Utils.goldenTicketPrice(_x);\r\n  }\r\n}\r\n\r\n\r\ncontract Internal is Core {\r\n  function _registerReferral (string _code, address _referral) internal {\r\n    require(Utils.validReferralCode(_code));\r\n    require(addressOfCode[_code] == address(0));\r\n\r\n    addressOfCode[_code] = _referral;\r\n    codesOfAddress[_referral].push(_code);\r\n\r\n    emit Registered(_code, _referral);\r\n  }\r\n}\r\n\r\n\r\ncontract WinnerWinner is Core, Internal, ExternalView {\r\n  using SafeMath for *;\r\n\r\n  constructor () public {\r\n    addressOfOwner = msg.sender;\r\n  }\r\n\r\n  function () public payable {\r\n    buy(addressOfOwner, DEFAULT_COUNTRY);\r\n  }\r\n\r\n  function start (uint _maxTime, uint _addedTime) public restricted {\r\n    require(startTime == 0);\r\n    require(_maxTime > 0 && _addedTime > 0);\r\n    require(_maxTime > _addedTime);\r\n\r\n    maxTime = _maxTime;\r\n    addedTime = _addedTime;\r\n\r\n    startTime = block.timestamp;\r\n    endTime = startTime + maxTime;\r\n    addressOfCaptain = addressOfOwner;\r\n\r\n    _registerReferral(\"owner\", addressOfOwner);\r\n\r\n    emit Started(startTime);\r\n  }\r\n\r\n  function buy (address _referral, uint _countryId) public payable active {\r\n    require(msg.value >= Utils.regularTicketPrice());\r\n    require(msg.value <= 100000 ether);\r\n    require(codesOfAddress[_referral].length > 0);\r\n    require(_countryId != MAIN_SCHEME);\r\n    require(Utils.validCountryId(_countryId));\r\n\r\n    (uint tickets, uint excess) = Utils.ticketsForWithExcess(msg.value);\r\n    uint value = msg.value.sub(excess);\r\n\r\n    require(tickets > 0);\r\n    require(value.add(excess) == msg.value);\r\n\r\n    Info storage info = infoOfAddress[msg.sender];\r\n\r\n    if (info.countryId == 0) {\r\n      info.referral = _referral;\r\n      info.countryId = _countryId;\r\n    }\r\n\r\n    uint vdivs = Utils.percentageOf(value, TO_DIVIDENDS);\r\n    uint vreferral = Utils.percentageOf(value, TO_REFERRAL);\r\n    uint vdevs = Utils.percentageOf(value, TO_DEVELOPERS);\r\n    uint vcountry = Utils.percentageOf(value, TO_COUNTRY);\r\n    uint vpot = value.sub(vdivs).sub(vreferral).sub(vdevs).sub(vcountry);\r\n\r\n    assert(vdivs.add(vreferral).add(vdevs).add(vcountry).add(vpot) == value);\r\n\r\n    buyShares(MAIN_SCHEME, msg.sender, tickets, vdivs);\r\n    buyShares(info.countryId, msg.sender, tickets, vcountry);\r\n\r\n    creditVault(MAIN_SCHEME, info.referral, vreferral);\r\n    creditVault(MAIN_SCHEME, addressOfOwner, vdevs);\r\n\r\n    if (excess > 0) {\r\n      creditVault(MAIN_SCHEME, msg.sender, excess);\r\n    }\r\n\r\n    uint goldenTickets = value.div(Utils.goldenTicketPrice(totalPot));\r\n    if (goldenTickets > 0) {\r\n      endTime = endTime.add(goldenTickets.mul(addedTime)) > block.timestamp.add(maxTime) ?\r\n        block.timestamp.add(maxTime) : endTime.add(goldenTickets.mul(addedTime));\r\n      addressOfCaptain = msg.sender;\r\n      emit Promoted(addressOfCaptain, goldenTickets, endTime);\r\n    }\r\n\r\n    totalPot = totalPot.add(vpot);\r\n\r\n    emit Bought(msg.sender, info.referral, info.countryId, tickets, value, excess);\r\n  }\r\n\r\n  function setNick (string _nick) public payable {\r\n    require(msg.value == SET_NICK_FEE);\r\n    require(Utils.validNick(_nick));\r\n    infoOfAddress[msg.sender].nick = _nick;\r\n    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\r\n  }\r\n\r\n  function registerCode (string _code) public payable {\r\n    require(msg.value == REFERRAL_REGISTRATION_FEE);\r\n    _registerReferral(_code, msg.sender);\r\n    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\r\n  }\r\n\r\n  function giftCode (string _code, address _referral) public restricted {\r\n    _registerReferral(_code, _referral);\r\n  }\r\n\r\n  function withdraw () public {\r\n    Info storage info = infoOfAddress[msg.sender];\r\n    uint payout = withdrawVault(MAIN_SCHEME, msg.sender);\r\n\r\n    if (Utils.validCountryId(info.countryId)) {\r\n      payout = payout.add(withdrawVault(info.countryId, msg.sender));\r\n    }\r\n\r\n    if (payout > 0) {\r\n      info.withdrawn = info.withdrawn.add(payout);\r\n      msg.sender.transfer(payout);\r\n      emit Withdrew(msg.sender, payout);\r\n    }\r\n  }\r\n\r\n  function withdrawPot () public player {\r\n    require(startTime > 0);\r\n    require(block.timestamp > (endTime + 10 minutes));\r\n    require(!potWithdrawn);\r\n    require(totalPot > 0);\r\n    require(addressOfCaptain == msg.sender);\r\n\r\n    uint payout = totalPot;\r\n    totalPot = 0;\r\n    potWithdrawn = true;\r\n    addressOfCaptain.transfer(payout);\r\n    emit Won(msg.sender, payout);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"referralCodeAt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nick\",\"type\":\"string\"}],\"name\":\"setNick\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"playerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxTime\",\"type\":\"uint256\"},{\"name\":\"_addedTime\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"codeToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"}],\"name\":\"goldenTicketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referral\",\"type\":\"address\"},{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"numberOfReferralCodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"registerCode\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"countryInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"string\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"giftCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_countryId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tickets\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_excess\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_goldenTickets\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"Promoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_code\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_pot\",\"type\":\"uint256\"}],\"name\":\"Won\",\"type\":\"event\"}]","ContractName":"WinnerWinner","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://be6901e108e96eecc77d9d12160251eb7730e2eb715b8f8425f350679525a73b"}]}