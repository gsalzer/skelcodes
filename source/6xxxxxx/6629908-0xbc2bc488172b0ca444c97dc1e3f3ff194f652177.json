{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n// 名称检验\r\nlibrary NameFilter {\r\n\r\nfunction nameFilter(string _input)\r\n    internal\r\n    pure\r\n    returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n\r\n        bool _hasNonNumber;\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    _temp[i] == 0x20 ||\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n// 队伍数据库\r\nlibrary F3Ddatasets {\r\n    struct EventReturns {\r\n        uint256 compressedData;\r\n        uint256 compressedIDs;\r\n        address winnerAddr;         // 胜利者地址\r\n        bytes32 winnerName;         // 赢家姓名\r\n        uint256 amountWon;          // 金额赢了\r\n        uint256 newPot;             // 数量在新池里\r\n        uint256 P3DAmount;          // 数量分配给p3d\r\n        uint256 genAmount;          // 数量分配给gen\r\n        uint256 potAmount;          // 添加到池中的数量\r\n    }\r\n    struct Player {\r\n        address addr;               // 玩家地址\r\n        bytes32 name;               // 名称\r\n        uint256 names;              // 名称列表\r\n        uint256 win;                // 赢得金库\r\n        uint256 gen;                // 分红保险库\r\n        uint256 aff;                // 推广保险库\r\n        uint256 lrnd;               // 上一轮比赛\r\n        uint256 laff;               // 使用的最后一个会员ID\r\n    }\r\n    struct PlayerRounds {\r\n        uint256 eth;                // 玩家本回合增加的eth\r\n        uint256 keys;               // 钥匙数\r\n        uint256 mask;               // 玩家钱包\r\n        uint256 ico;                // ICO阶段投资\r\n    }\r\n    struct Round {\r\n        uint256 plyr;               // 领导者的pID\r\n        uint256 team;               // 团队领导的tID\r\n        uint256 end;                // 时间结束/结束\r\n        bool ended;                 // 已经运行了回合函数\r\n        uint256 strt;               // 时间开始了\r\n        uint256 keys;               // 钥匙数量\r\n        uint256 eth;                // 总的eth in\r\n        uint256 pot;                // 奖池（在回合期间）/最终金额支付给获胜者（在回合结束后）\r\n        uint256 mask;               // 全局钱包\r\n        uint256 ico;                // 在ICO阶段发送的总eth\r\n        uint256 icoGen;             // ICO期间gen的总eth\r\n        uint256 icoAvg;             // ICO阶段的平均关键价格\r\n    }\r\n    struct TeamFee {\r\n        uint256 gen;                // 支付给本轮钥匙持有者的分红百分比\r\n        uint256 p3d;                // 支付给p3d持有者的分红百分比\r\n    }\r\n    struct PotSplit {\r\n        uint256 gen;                // 支付给本轮钥匙持有者的底池百分比\r\n        uint256 p3d;                // 支付给p3d持有者的底池百分比\r\n    }\r\n}\r\n\r\n// 安全数学库\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x)\r\n    internal\r\n    pure\r\n    returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    function sq(uint256 x)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    function pwr(uint256 x, uint256 y)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// TinyF3D游戏\r\ncontract TinyF3D {\r\n\r\n    using SafeMath for *;\r\n    using NameFilter for string;\r\n\r\n    string constant public name = \"Fomo3D CHINA\";           // 游戏名称\r\n    string constant public symbol = \"GBL\";                      // 游戏符号\r\n\r\n    // 游戏数据\r\n    address public owner;                                       // 合约管理者\r\n    address public devs;                                        // 开发团队\r\n    address public otherF3D_;                                   // 副奖池\r\n    address  public Divies;                                     // 股东\r\n    address public Jekyll_Island_Inc;                           // 公司账户\r\n\r\n    bool public activated_ = false;                             // 合同部署标志\r\n\r\n    uint256 private rndExtra_ = 0;                              // 第一个ICO的时间\r\n    uint256 private rndGap_ = 0;                                // ICO阶段的时间,现为马上结束\r\n    uint256 constant private rndInit_ = 1 hours;                // 回合倒计时开始\r\n    uint256 constant private rndInc_ = 30 seconds;              // 每一把钥匙增加时间\r\n    uint256 constant private rndMax_ = 12 hours;                // 最大倒计时时间\r\n\r\n    uint256 public airDropPot_;                                 // 空头罐\r\n    uint256 public airDropTracker_ = 0;                         // 空投计数\r\n    uint256 public rID_;                                        // 回合轮数\r\n\r\n    uint256 public registrationFee_ = 10 finney;                // 注册价格\r\n\r\n    // 玩家数据\r\n    uint256 public pID_;                                        // 玩家总数\r\n    mapping(address => uint256) public pIDxAddr_;               //（addr => pID）按地址返回玩家ID\r\n    mapping(bytes32 => uint256) public pIDxName_;               //（name => pID）按名称返回玩家ID\r\n    mapping(uint256 => F3Ddatasets.Player) public plyr_;        //（pID => data）玩家数据\r\n    mapping(uint256 => mapping(uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_;    //（pID => rID => data）玩家ID和轮次ID的玩家轮数据\r\n    mapping(uint256 => mapping(bytes32 => bool)) public plyrNames_;       //（pID => name => bool）玩家拥有的名字列表。\r\n                                                                          //（用于这样您可以在您拥有的任何名称中更改您的显示名称）\r\n    mapping(uint256 => mapping(uint256 => bytes32)) public plyrNameList_; //（pID => nameNum => name）玩家拥有的名称列表\r\n\r\n    // 回合数据\r\n    mapping(uint256 => F3Ddatasets.Round) public round_;        //（rID => data）回合数据\r\n    mapping(uint256 => mapping(uint256 => uint256)) public rndTmEth_;    //（rID => tID => data）每个团队中的eth，按轮次ID和团队ID\r\n\r\n    // 团队数据\r\n    mapping(uint256 => F3Ddatasets.TeamFee) public fees_;       //（团队=>费用）按团队分配费用\r\n    mapping(uint256 => F3Ddatasets.PotSplit) public potSplit_;  //（团队=>费用）按团队分配分配\r\n\r\n    // 每当玩家注册一个名字时就会被触发\r\n    event onNewName\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // 购买并分红\r\n    event onBuyAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethIn,\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 P3DAmount,\r\n        uint256 genAmount\r\n    );\r\n\r\n    // 收到副奖池存款\r\n    event onPotSwapDeposit\r\n    (\r\n        uint256 roundID,\r\n        uint256 amountAddedToPot\r\n    );\r\n\r\n    // 购买结束事件\r\n    event onEndTx\r\n    (\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        bytes32 playerName,\r\n        address playerAddress,\r\n        uint256 ethIn,\r\n        uint256 keysBought,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 P3DAmount,\r\n        uint256 genAmount,\r\n        uint256 potAmount,\r\n        uint256 airDropPot\r\n    );\r\n\r\n    //每当联盟会员付款时都会被解雇\r\n    event onAffiliatePayout\r\n    (\r\n        uint256 indexed affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 indexed roundID,\r\n        uint256 indexed buyerID,\r\n        uint256 amount,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // 撤回收入事件\r\n    event onWithdraw\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // 撤回收入分发事件\r\n    event onWithdrawAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 P3DAmount,\r\n        uint256 genAmount\r\n    );\r\n\r\n    // 只有当玩家在回合结束后尝试重新加载时才会触发\r\n    event onReLoadAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 P3DAmount,\r\n        uint256 genAmount\r\n    );\r\n\r\n    // 确保在合约激活前不能使用\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"its not ready yet.  check ?eta in discord\");\r\n        _;\r\n    }\r\n\r\n    // 禁止其他合约调用\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    // 保证调用者是开发者\r\n    modifier onlyDevs()\r\n    {\r\n        require(msg.sender == devs, \"msg sender is not a dev\");\r\n        _;\r\n    }\r\n\r\n    // dev设置传入交易金额的边界\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\r\n        require(_eth <= 100000000000000000000000, \"no vitalik, no\");\r\n        _;\r\n    }\r\n\r\n    // 合同部署后激活一次\r\n    function activate()\r\n    public\r\n    onlyDevs\r\n    {\r\n        //只能运行一次\r\n        require(activated_ == false, \"TinyF3d already activated\");\r\n\r\n        //激活合同\r\n        activated_ = true;\r\n\r\n        //让我们开始第一轮\r\n        rID_ = 1;\r\n        round_[1].strt = now + rndExtra_ - rndGap_;\r\n        round_[1].end = now + rndInit_ + rndExtra_;\r\n    }\r\n\r\n    // 合约部署初始数据设置\r\n    constructor()\r\n    public\r\n    {\r\n        owner = msg.sender;\r\n        devs = msg.sender;\r\n        otherF3D_ = msg.sender;\r\n        Divies = msg.sender;\r\n        Jekyll_Island_Inc = msg.sender;\r\n\r\n        // 团队分配结构\r\n        // 0 =鲸鱼\r\n        // 1 =熊\r\n        // 2 = 蛇\r\n        // 3 =公牛\r\n\r\n        // 团队分红\r\n        //（F3D，P3D）+（奖池，推荐，社区）\r\n        fees_[0] = F3Ddatasets.TeamFee(30, 6);          // 50％为奖池，10％推广，2％为公司，1％为副奖池，1％为空投罐\r\n        fees_[1] = F3Ddatasets.TeamFee(43, 0);          // 43％为奖池，10％推广，2％为公司，1％为副奖池，1％为空投罐\r\n        fees_[2] = F3Ddatasets.TeamFee(56, 10);         // 20％为奖池，10％推广，2％为公司，1％为副奖池，1％为空投罐\r\n        fees_[3] = F3Ddatasets.TeamFee(43, 8);          // 35％为奖池，10％推广，2％为公司，1％为副奖池，1％为空投罐\r\n\r\n        // 结束奖池分配\r\n        //（F3D, P3D）+（获胜者，下一轮，公司）\r\n        potSplit_[0] = F3Ddatasets.PotSplit(15, 10);    // 获胜者48％，下一轮25％，com 2％\r\n        potSplit_[1] = F3Ddatasets.PotSplit(25, 0);     // 获胜者48％，下一轮25％，com 2％\r\n        potSplit_[2] = F3Ddatasets.PotSplit(20, 20);    // 获胜者48％，下一轮10％，com 2％\r\n        potSplit_[3] = F3Ddatasets.PotSplit(30, 10);    // 获胜者48％，下一轮10％，com 2％\r\n    }\r\n\r\n    // 匿名函数,用来紧急购买\r\n    function()\r\n    isActivated()\r\n    isHuman()\r\n    isWithinLimits(msg.value)\r\n    public\r\n    payable\r\n    {\r\n        // 设置交易事件数据并确定玩家是否是新玩家\r\n        F3Ddatasets.EventReturns memory _eventData_ = determinePlayer(_eventData_);\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 买核心\r\n        buyCore(_pID, plyr_[_pID].laff, 2, _eventData_);\r\n    }\r\n\r\n    // 存在或注册新的pID。当玩家可能是新手时使用此功能\r\n    function determinePlayer(F3Ddatasets.EventReturns memory _eventData_)\r\n    private\r\n    returns (F3Ddatasets.EventReturns)\r\n    {\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 如果玩家是新手\r\n        if (_pID == 0)\r\n        {\r\n            // 从玩家姓名合同中获取他们的玩家ID，姓名和最后一个身份证\r\n            determinePID(msg.sender);\r\n            _pID = pIDxAddr_[msg.sender];\r\n            bytes32 _name = plyr_[_pID].name;\r\n            uint256 _laff = plyr_[_pID].laff;\r\n\r\n            // 设置玩家账号\r\n            pIDxAddr_[msg.sender] = _pID;\r\n            plyr_[_pID].addr = msg.sender;\r\n\r\n            if (_name != \"\")\r\n            {\r\n                pIDxName_[_name] = _pID;\r\n                plyr_[_pID].name = _name;\r\n                plyrNames_[_pID][_name] = true;\r\n            }\r\n\r\n            if (_laff != 0 && _laff != _pID)\r\n                plyr_[_pID].laff = _laff;\r\n\r\n            // 将新玩家设置为true\r\n            _eventData_.compressedData = _eventData_.compressedData + 1;\r\n        }\r\n        return (_eventData_);\r\n    }\r\n\r\n    // 确定玩家ID\r\n    function determinePID(address _addr)\r\n    private\r\n    returns (bool)\r\n    {\r\n        if (pIDxAddr_[_addr] == 0)\r\n        {\r\n            pID_++;\r\n            pIDxAddr_[_addr] = pID_;\r\n            plyr_[pID_].addr = _addr;\r\n\r\n            // 将新玩家bool设置为true\r\n            return (true);\r\n        } else {\r\n            return (false);\r\n        }\r\n    }\r\n\r\n    // 注册名称\r\n    function registerNameXID(string _nameString, uint256 _affCode, bool _all)\r\n    isHuman()\r\n    public\r\n    payable\r\n    {\r\n        // 确保支付名称费用\r\n        require(msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n\r\n        // 过滤名称\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n\r\n        // 获取地址\r\n        address _addr = msg.sender;\r\n\r\n        // 是否是新玩家\r\n        bool _isNewPlayer = determinePID(_addr);\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // 如果没有推广人ID或者推广人是自己\r\n        if (_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID)\r\n        {\r\n            // 更新推广人\r\n            plyr_[_pID].laff = _affCode;\r\n        } else if (_affCode == _pID) {\r\n            _affCode = 0;\r\n        }\r\n\r\n        // 注册名称\r\n        registerNameCore(_pID, _addr, _affCode, _name, _isNewPlayer, _all);\r\n    }\r\n\r\n    // 通过地址注册名称\r\n    function registerNameXaddr(address _addr, string _nameString, address _affCode, bool _all)\r\n    external\r\n    payable\r\n    {\r\n        // 确保支付名称费用\r\n        require(msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n\r\n        // 过滤名称\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n\r\n        // 是否是新玩家\r\n        bool _isNewPlayer = determinePID(_addr);\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // 如果没有推广人ID或者推广人是自己\r\n        uint256 _affID;\r\n        if (_affCode != address(0) && _affCode != _addr)\r\n        {\r\n            // 获取推广人ID\r\n            _affID = pIDxAddr_[_affCode];\r\n\r\n            // 如果推广人ID与先前不同\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // 更新推广人\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // 注册名称\r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\r\n    }\r\n\r\n    // 通过已有名称注册新名称\r\n    function registerNameXname(address _addr, string _nameString, bytes32 _affCode, bool _all)\r\n    external\r\n    payable\r\n    {\r\n        // 确保支付名称费用\r\n        require(msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n\r\n        // 过滤名称\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n\r\n        // 是否是新玩家\r\n        bool _isNewPlayer = determinePID(_addr);\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // 如果没有推广人ID或者推广人是自己\r\n        uint256 _affID;\r\n        if (_affCode != \"\" && _affCode != _name)\r\n        {\r\n            // 获取推广人ID\r\n            _affID = pIDxName_[_affCode];\r\n\r\n            // 如果推广人ID与先前存储的不同\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // 更新推广人\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // 注册名称\r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\r\n    }\r\n\r\n    // 正式注册\r\n    function registerNameCore(uint256 _pID, address _addr, uint256 _affID, bytes32 _name, bool _isNewPlayer, bool _all)\r\n    private\r\n    {\r\n        // 如果已使用名称，则要求当前的msg发件人拥有该名称\r\n        if (pIDxName_[_name] != 0)\r\n            require(plyrNames_[_pID][_name] == true, \"sorry that names already taken\");\r\n\r\n        // 为玩家配置文件，注册表和名称簿添加名称\r\n        plyr_[_pID].name = _name;\r\n        pIDxName_[_name] = _pID;\r\n        if (plyrNames_[_pID][_name] == false)\r\n        {\r\n            plyrNames_[_pID][_name] = true;\r\n            plyr_[_pID].names++;\r\n            plyrNameList_[_pID][plyr_[_pID].names] = _name;\r\n        }\r\n\r\n        // 注册费直接归于社区奖励\r\n        Jekyll_Island_Inc.transfer(address(this).balance);\r\n\r\n        // 将玩家信息推送到游戏\r\n        // 暂时注释 bluehook\r\n        _all;\r\n        //if (_all == true)\r\n        //    for (uint256 i = 1; i <= gID_; i++)\r\n        //        games_[i].receivePlayerInfo(_pID, _addr, _name, _affID);\r\n\r\n\r\n        // 发送事件\r\n        emit onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, msg.value, now);\r\n    }\r\n\r\n    // 通过ID购买钥匙\r\n    function buyXid(uint256 _affCode, uint256 _team)\r\n    isActivated()\r\n    isHuman()\r\n    isWithinLimits(msg.value)\r\n    public\r\n    payable\r\n    {\r\n        // 设置交易事件数据,确定玩家是否是新玩家\r\n        F3Ddatasets.EventReturns memory _eventData_ = determinePlayer(_eventData_);\r\n\r\n        //获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 如果没有推广人并且推广人不是自己\r\n        if (_affCode == 0 || _affCode == _pID)\r\n        {\r\n            // 使用最后存储的推广人代码\r\n            _affCode = plyr_[_pID].laff;\r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            // 更新最后一个推广人代码\r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n\r\n        // 确认选择了有效的团队\r\n        _team = verifyTeam(_team);\r\n\r\n        // 买核心\r\n        buyCore(_pID, _affCode, _team, _eventData_);\r\n    }\r\n\r\n    // 通过地址购买\r\n    function buyXaddr(address _affCode, uint256 _team)\r\n    isActivated()\r\n    isHuman()\r\n    isWithinLimits(msg.value)\r\n    public\r\n    payable\r\n    {\r\n        // 设置交易事件数据,确定玩家是否是新玩家\r\n        F3Ddatasets.EventReturns memory _eventData_ = determinePlayer(_eventData_);\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 如果没有推广人并且推广人不是自己\r\n        uint256 _affID;\r\n        if (_affCode == address(0) || _affCode == msg.sender)\r\n        {\r\n            // 使用最后存储的推广人代码\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            // 获取推广ID\r\n            _affID = pIDxAddr_[_affCode];\r\n\r\n            // 如果推广ID与先前存储的不同\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // 更新最后一个推广人代码\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // 确认选择了有效的团队\r\n        _team = verifyTeam(_team);\r\n\r\n        // 买核心\r\n        buyCore(_pID, _affID, _team, _eventData_);\r\n    }\r\n\r\n    // 通过玩家名购买\r\n    function buyXname(bytes32 _affCode, uint256 _team)\r\n    isActivated()\r\n    isHuman()\r\n    isWithinLimits(msg.value)\r\n    public\r\n    payable\r\n    {\r\n        // 设置交易事件数据,确定玩家是否是新玩家\r\n        F3Ddatasets.EventReturns memory _eventData_ = determinePlayer(_eventData_);\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 如果没有推广人并且推广人不是自己\r\n        uint256 _affID;\r\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\r\n        {\r\n            // 使用最后存储的推广人代码\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            // 获取推广人ID\r\n            _affID = pIDxName_[_affCode];\r\n\r\n            // 如果推广人ID与先前存储的不同\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // 更新最后一个推广人代码\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // 确认选择了有效的团队\r\n        _team = verifyTeam(_team);\r\n\r\n        // 买核心\r\n        buyCore(_pID, _affID, _team, _eventData_);\r\n    }\r\n\r\n    // 使用未提取的收入购买\r\n    function reLoadXid(uint256 _affCode, uint256 _team, uint256 _eth)\r\n    isActivated()\r\n    isHuman()\r\n    isWithinLimits(_eth)\r\n    public\r\n    {\r\n        // 设置交易事件\r\n        F3Ddatasets.EventReturns memory _eventData_;\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 如果没有推广人并且推广人不是自己\r\n        if (_affCode == 0 || _affCode == _pID)\r\n        {\r\n            // 使用最后存储的推广人代码\r\n            _affCode = plyr_[_pID].laff;\r\n\r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            // 更新最后一个推广人代码\r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n\r\n        // 确认选择了有效的团队\r\n        _team = verifyTeam(_team);\r\n\r\n        // 重买核心\r\n        reLoadCore(_pID, _affCode, _team, _eth, _eventData_);\r\n    }\r\n\r\n    // 使用为提取的收入购买通过地址\r\n    function reLoadXaddr(address _affCode, uint256 _team, uint256 _eth)\r\n    isActivated()\r\n    isHuman()\r\n    isWithinLimits(_eth)\r\n    public\r\n    {\r\n        // 设置交易事件\r\n        F3Ddatasets.EventReturns memory _eventData_;\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 如果没有推广人并且推广人不是自己\r\n        uint256 _affID;\r\n        if (_affCode == address(0) || _affCode == msg.sender)\r\n        {\r\n            // 获取最后的推广人ID\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            // 获取最后的推广人ID\r\n            _affID = pIDxAddr_[_affCode];\r\n\r\n            // 如果推广人ID与先前存储的不同\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // 更新最后一个推广人\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // 确认选择了有效的团队\r\n        _team = verifyTeam(_team);\r\n\r\n        // 重买核心\r\n        reLoadCore(_pID, _affID, _team, _eth, _eventData_);\r\n    }\r\n\r\n    // 使用未提取的收入购买通过名称\r\n    function reLoadXname(bytes32 _affCode, uint256 _team, uint256 _eth)\r\n    isActivated()\r\n    isHuman()\r\n    isWithinLimits(_eth)\r\n    public\r\n    {\r\n        // 设置交易事件\r\n        F3Ddatasets.EventReturns memory _eventData_;\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 如果没有推广人并且推广人不是自己\r\n        uint256 _affID;\r\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\r\n        {\r\n            // 获取推广人ID\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            // 获取推广人ID\r\n            _affID = pIDxName_[_affCode];\r\n\r\n            // 如果推广人ID与先前的不同\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // 更新最后一个推广人\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // 确认选择了有效的团队\r\n        _team = verifyTeam(_team);\r\n\r\n        // 重买核心\r\n        reLoadCore(_pID, _affID, _team, _eth, _eventData_);\r\n    }\r\n\r\n    // 检查用户是否选择了队伍,如果没有默认蛇队\r\n    function verifyTeam(uint256 _team)\r\n    private\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        if (_team < 0 || _team > 3)\r\n            return (2);\r\n        else\r\n            return (_team);\r\n    }\r\n\r\n    // 购买\r\n    function buyCore(uint256 _pID, uint256 _affID, uint256 _team, F3Ddatasets.EventReturns memory _eventData_)\r\n    private\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 当前时间\r\n        uint256 _now = now;\r\n\r\n        // 如果回合进行中\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n        {\r\n            // 尝试购买\r\n            core(_rID, _pID, msg.value, _affID, _team, _eventData_);\r\n        } else {\r\n            // 如果round不活跃\r\n\r\n            // 检查是否回合已经结束\r\n            if (_now > round_[_rID].end && round_[_rID].ended == false)\r\n            {\r\n                // 结束回合（奖池分红）并开始新回合\r\n                round_[_rID].ended = true;\r\n                _eventData_ = endRound(_eventData_);\r\n\r\n                // 构建事件数据\r\n                _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n                _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n                // 发起购买事件\r\n                emit onBuyAndDistribute\r\n                (\r\n                    msg.sender,\r\n                    plyr_[_pID].name,\r\n                    msg.value,\r\n                    _eventData_.compressedData,\r\n                    _eventData_.compressedIDs,\r\n                    _eventData_.winnerAddr,\r\n                    _eventData_.winnerName,\r\n                    _eventData_.amountWon,\r\n                    _eventData_.newPot,\r\n                    _eventData_.P3DAmount,\r\n                    _eventData_.genAmount\r\n                );\r\n            }\r\n\r\n            //把eth放在球员保险库里\r\n            plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value);\r\n        }\r\n    }\r\n\r\n    // 重新购买\r\n    function reLoadCore(uint256 _pID, uint256 _affID, uint256 _team, uint256 _eth, F3Ddatasets.EventReturns memory _eventData_)\r\n    private\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 获取时间\r\n        uint256 _now = now;\r\n\r\n        // 回合进行中\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n        {\r\n            // 从所有保险库中获取收益并将未使用的保险库返还给gen保险库\r\n            plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth);\r\n\r\n            // 购买\r\n            core(_rID, _pID, _eth, _affID, _team, _eventData_);\r\n        } else if (_now > round_[_rID].end && round_[_rID].ended == false) {\r\n            // 回合结束,奖池分红,并开始新回合\r\n            round_[_rID].ended = true;\r\n            _eventData_ = endRound(_eventData_);\r\n\r\n            // 构建事件数据\r\n            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n            // 发送购买和分发事件\r\n            emit onReLoadAndDistribute\r\n            (\r\n                msg.sender,\r\n                plyr_[_pID].name,\r\n                _eventData_.compressedData,\r\n                _eventData_.compressedIDs,\r\n                _eventData_.winnerAddr,\r\n                _eventData_.winnerName,\r\n                _eventData_.amountWon,\r\n                _eventData_.newPot,\r\n                _eventData_.P3DAmount,\r\n                _eventData_.genAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    // 如果管理员开始新一轮,移动玩家没有保存的钱包收入到保险箱\r\n    function managePlayer(uint256 _pID, F3Ddatasets.EventReturns memory _eventData_)\r\n    private\r\n    returns (F3Ddatasets.EventReturns)\r\n    {\r\n        // 如果玩家玩过上一轮，则移动他们的收入到保险箱。\r\n        if (plyr_[_pID].lrnd != 0)\r\n            updateGenVault(_pID, plyr_[_pID].lrnd);\r\n\r\n        // 更新玩家的最后一轮比赛\r\n        plyr_[_pID].lrnd = rID_;\r\n\r\n        // 将参与的回合bool设置为true\r\n        _eventData_.compressedData = _eventData_.compressedData + 10;\r\n\r\n        return (_eventData_);\r\n    }\r\n\r\n    // 计算没有归入钱包的收入（只计算，不更新钱包）\r\n    // 返回wei格式的收入\r\n    function calcUnMaskedEarnings(uint256 _pID, uint256 _rIDlast)\r\n    private\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return ((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask));\r\n    }\r\n\r\n    // 将收入移至收入保险箱\r\n    function updateGenVault(uint256 _pID, uint256 _rIDlast)\r\n    private\r\n    {\r\n        uint256 _earnings = calcUnMaskedEarnings(_pID, _rIDlast);\r\n        if (_earnings > 0)\r\n        {\r\n            // 放入分红库\r\n            plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen);\r\n            // 更新钱包并将收入归0\r\n            plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask);\r\n        }\r\n    }\r\n\r\n    // 根据购买的全部钥匙数量更新回合计时器\r\n    function updateTimer(uint256 _keys, uint256 _rID)\r\n    private\r\n    {\r\n        // 当前时间\r\n        uint256 _now = now;\r\n\r\n        // 根据购买的钥匙数计算时间\r\n        uint256 _newTime;\r\n        if (_now > round_[_rID].end && round_[_rID].plyr == 0)\r\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now);\r\n        else\r\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end);\r\n\r\n        // 与最长限制比较并设置新的结束时间\r\n        if (_newTime < (rndMax_).add(_now))\r\n            round_[_rID].end = _newTime;\r\n        else\r\n            round_[_rID].end = rndMax_.add(_now);\r\n    }\r\n\r\n    // 检查空投\r\n    function airdrop()\r\n    private\r\n    view\r\n    returns (bool)\r\n    {\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n\r\n                (block.timestamp).add\r\n                (block.difficulty).add\r\n                ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\r\n                (block.gaslimit).add\r\n                ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\r\n                (block.number)\r\n\r\n            )));\r\n        if ((seed - ((seed / 1000) * 1000)) < airDropTracker_)\r\n            return (true);\r\n        else\r\n            return (false);\r\n    }\r\n\r\n    // 购买核心\r\n    function core(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, F3Ddatasets.EventReturns memory _eventData_)\r\n    private\r\n    {\r\n        // 如果玩家是新手\r\n        if (plyrRnds_[_pID][_rID].keys == 0)\r\n            _eventData_ = managePlayer(_pID, _eventData_);\r\n\r\n        // 早期的道德限制器 <100eth ... >=1eth 早期奖池小于100eth，一个玩家一局限制购买最多1eth\r\n        if (round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000)\r\n        {\r\n            uint256 _availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth); // 1eth\r\n            uint256 _refund = _eth.sub(_availableLimit);\r\n            plyr_[_pID].gen = plyr_[_pID].gen.add(_refund);\r\n            _eth = _availableLimit;\r\n        }\r\n\r\n        // 如果eth大于最小购买eth数量\r\n        if (_eth > 1000000000) //0.0000001eth\r\n        {\r\n\r\n            // 计算可购买钥匙数量\r\n            uint256 _keys = keysRec(round_[_rID].eth,_eth);\r\n\r\n            // 如果至少买一把钥匙19位\r\n            if (_keys >= 1000000000000000000)\r\n            {\r\n                updateTimer(_keys, _rID);\r\n\r\n                // 设置新的领先者\r\n                if (round_[_rID].plyr != _pID)\r\n                    round_[_rID].plyr = _pID;\r\n                if (round_[_rID].team != _team)\r\n                    round_[_rID].team = _team;\r\n\r\n                // 将新的领先者布尔设置为true\r\n                _eventData_.compressedData = _eventData_.compressedData + 100;\r\n            }\r\n\r\n            // 管理空投,如果购买金额至少0.1eth\r\n            if (_eth >= 100000000000000000)\r\n            {\r\n                airDropTracker_++;\r\n                if (airdrop() == true)\r\n                {\r\n                    uint256 _prize;\r\n                    if (_eth >= 10000000000000000000) // 10eth\r\n                    {\r\n                        // 计算奖金并将其交给获胜者\r\n                        _prize = ((airDropPot_).mul(75)) / 100;\r\n                        plyr_[_pID].win = (plyr_[_pID].win).add(_prize);\r\n\r\n                        // 调整空投罐\r\n                        airDropPot_ = (airDropPot_).sub(_prize);\r\n\r\n                        // 让活动知道赢得了一级奖\r\n                        _eventData_.compressedData += 300000000000000000000000000000000;\r\n                    } else if (_eth >= 1000000000000000000 && _eth < 10000000000000000000) {\r\n                        // 计算奖金并将其交给获胜者 1eth ~ 10eth\r\n                        _prize = ((airDropPot_).mul(50)) / 100;\r\n                        plyr_[_pID].win = (plyr_[_pID].win).add(_prize);\r\n\r\n                        // 调整空头罐\r\n                        airDropPot_ = (airDropPot_).sub(_prize);\r\n\r\n                        // 让活动知道获得二等奖\r\n                        _eventData_.compressedData += 200000000000000000000000000000000;\r\n                    } else if (_eth >= 100000000000000000 && _eth < 1000000000000000000) {\r\n                        // 计算奖金并将其交给获胜者 0.11eth ~ 1eth\r\n                        _prize = ((airDropPot_).mul(25)) / 100;\r\n                        plyr_[_pID].win = (plyr_[_pID].win).add(_prize);\r\n\r\n                        // 调整空头罐\r\n                        airDropPot_ = (airDropPot_).sub(_prize);\r\n\r\n                        // 让活动知道赢得了三级奖\r\n                        _eventData_.compressedData += 300000000000000000000000000000000;\r\n                    }\r\n                    // 设置空投罐触发bool为true\r\n                    _eventData_.compressedData += 10000000000000000000000000000000;\r\n                    // 让玩家知道赢了多少\r\n                    _eventData_.compressedData += _prize * 1000000000000000000000000000000000;\r\n\r\n                    // 重置空投罐计数\r\n                    airDropTracker_ = 0;\r\n                }\r\n            }\r\n\r\n            // 存储空投罐计数\r\n            _eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000);\r\n\r\n            // 更新玩家数据\r\n            plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys);\r\n            plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth);\r\n\r\n            // 更新回合数据\r\n            round_[_rID].keys = _keys.add(round_[_rID].keys);\r\n            round_[_rID].eth = _eth.add(round_[_rID].eth);\r\n            rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team]);\r\n\r\n            // eth分红\r\n            _eventData_ = distributeExternal(_rID, _pID, _eth, _affID, _team, _eventData_);\r\n            _eventData_ = distributeInternal(_rID, _pID, _eth, _team, _keys, _eventData_);\r\n\r\n            // 调用结束交易函数来触发结束交易事件。\r\n            endTx(_pID, _team, _eth, _keys, _eventData_);\r\n        }\r\n    }\r\n\r\n    // 返回玩家金库\r\n    function getPlayerVaults(uint256 _pID)\r\n    public\r\n    view\r\n    returns (uint256, uint256, uint256)\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 如果回合结束尚未开始（因此合同没有分配奖金）\r\n        if (now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)\r\n        {\r\n            // 如果玩家是赢家\r\n            if (round_[_rID].plyr == _pID)\r\n            {\r\n                return\r\n                (\r\n                (plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),\r\n                (plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)),\r\n                plyr_[_pID].aff\r\n                );\r\n            } else {\r\n                // 如果玩家不是赢家\r\n                return\r\n                (\r\n                plyr_[_pID].win,\r\n                (plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)),\r\n                plyr_[_pID].aff\r\n                );\r\n            }\r\n        } else {\r\n            // 如果回合仍然在进行或者回合结束又已经运行\r\n            return\r\n            (\r\n            plyr_[_pID].win,\r\n            (plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)),\r\n            plyr_[_pID].aff\r\n            );\r\n        }\r\n    }\r\n\r\n    // 计算金库金额帮助函数\r\n    function getPlayerVaultsHelper(uint256 _pID, uint256 _rID)\r\n    private\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return (((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000));\r\n    }\r\n\r\n    // 压缩数据并触发购买更新交易事件\r\n    function endTx(uint256 _pID, uint256 _team, uint256 _eth, uint256 _keys, F3Ddatasets.EventReturns memory _eventData_)\r\n    private\r\n    {\r\n        _eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000);\r\n        _eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000);\r\n\r\n        emit onEndTx\r\n        (\r\n            _eventData_.compressedData,\r\n            _eventData_.compressedIDs,\r\n            plyr_[_pID].name,\r\n            msg.sender,\r\n            _eth,\r\n            _keys,\r\n            _eventData_.winnerAddr,\r\n            _eventData_.winnerName,\r\n            _eventData_.amountWon,\r\n            _eventData_.newPot,\r\n            _eventData_.P3DAmount,\r\n            _eventData_.genAmount,\r\n            _eventData_.potAmount,\r\n            airDropPot_\r\n        );\r\n    }\r\n\r\n    // 外部分红\r\n    function distributeExternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, F3Ddatasets.EventReturns memory _eventData_)\r\n    private\r\n    returns (F3Ddatasets.EventReturns)\r\n    {\r\n        // 支付2％的社区奖励\r\n        uint256 _com = _eth / 50;\r\n        uint256 _p3d;\r\n        if (!address(Jekyll_Island_Inc).send(_com))\r\n        {\r\n            _p3d = _com;\r\n            _com = 0;\r\n        }\r\n\r\n        // 向FoMo3D支付1％的费用\r\n        uint256 _long = _eth / 100;\r\n        otherF3D_.transfer(_long);\r\n\r\n        // 将推广费用分配给会员\r\n        uint256 _aff = _eth / 10;\r\n\r\n        // 决定如何处理推广费用\r\n        // 不能是自己，并且必须注册名称\r\n        // 如果没有就归P3D\r\n        if (_affID != _pID && plyr_[_affID].name != '') {\r\n            plyr_[_affID].aff = _aff.add(plyr_[_affID].aff);\r\n            emit onAffiliatePayout(_affID, plyr_[_affID].addr, plyr_[_affID].name, _rID, _pID, _aff, now);\r\n        } else {\r\n            _p3d = _aff;\r\n        }\r\n\r\n        // 支付P3D\r\n        _p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100));\r\n        if (_p3d > 0)\r\n        {\r\n            // 然后存入DVS合约\r\n            Divies.transfer(_p3d);\r\n\r\n            // 设置事件数据\r\n            _eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount);\r\n        }\r\n\r\n        return (_eventData_);\r\n    }\r\n\r\n    // 内部分红\r\n    function distributeInternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _team, uint256 _keys, F3Ddatasets.EventReturns memory _eventData_)\r\n    private\r\n    returns (F3Ddatasets.EventReturns)\r\n    {\r\n        // 计算分红份额\r\n        uint256 _gen = (_eth.mul(fees_[_team].gen)) / 100;\r\n\r\n        // 将1％投入空投罐\r\n        uint256 _air = (_eth / 100);\r\n        airDropPot_ = airDropPot_.add(_air);\r\n\r\n        // 更新eth balance（eth = eth  - （com share + pot swap share + aff share + p3d share + airdrop pot share））\r\n        _eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100));\r\n\r\n        // 计算的奖池\r\n        uint256 _pot = _eth.sub(_gen);\r\n\r\n        // 分发分红\r\n        uint256 _dust = updateMasks(_rID, _pID, _gen, _keys);\r\n        if (_dust > 0)\r\n            _gen = _gen.sub(_dust);\r\n\r\n        // 添加eth到奖池\r\n        round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot);\r\n\r\n        // 设置事件数据\r\n        _eventData_.genAmount = _gen.add(_eventData_.genAmount);\r\n        _eventData_.potAmount = _pot;\r\n\r\n        return (_eventData_);\r\n    }\r\n\r\n    // 副奖池\r\n    function potSwap()\r\n    external\r\n    payable\r\n    {\r\n        // 获取一个rID\r\n        uint256 _rID = rID_ + 1;\r\n\r\n        round_[_rID].pot = round_[_rID].pot.add(msg.value);\r\n        emit onPotSwapDeposit(_rID, msg.value);\r\n    }\r\n\r\n    // 购买钥匙时更新回合和玩家钱包\r\n    function updateMasks(uint256 _rID, uint256 _pID, uint256 _gen, uint256 _keys)\r\n    private\r\n    returns (uint256)\r\n    {\r\n\r\n        // 基于此次购买的每个钥匙和回合分红利润:(剩余进入奖池）\r\n        uint256 _ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys);\r\n        round_[_rID].mask = _ppt.add(round_[_rID].mask);\r\n\r\n        // 计算自己的收入（基于刚刚买的钥匙数量）并更新玩家钱包\r\n        uint256 _pearn = (_ppt.mul(_keys)) / (1000000000000000000);\r\n        plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask);\r\n\r\n        //计算并返回灰尘\r\n        return (_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)));\r\n    }\r\n\r\n    // 结束了本回合,支付赢家和平分奖池\r\n    function endRound(F3Ddatasets.EventReturns memory _eventData_)\r\n    private\r\n    returns (F3Ddatasets.EventReturns)\r\n    {\r\n        // 获取一个rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 获取获胜玩家和队伍\r\n        uint256 _winPID = round_[_rID].plyr;\r\n        uint256 _winTID = round_[_rID].team;\r\n\r\n        // 获取奖池\r\n        uint256 _pot = round_[_rID].pot;\r\n\r\n        // 计算获胜玩家份额，社区奖励，公司份额，\r\n        // P3D分享，以及为下一个底池保留的金额\r\n        uint256 _win = (_pot.mul(48)) / 100;\r\n        uint256 _com = (_pot / 50);\r\n        uint256 _gen = (_pot.mul(potSplit_[_winTID].gen)) / 100;\r\n        uint256 _p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100;\r\n        uint256 _res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d);\r\n\r\n        // 计算回合钱包的ppt\r\n        uint256 _ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys);\r\n        uint256 _dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000);\r\n        if (_dust > 0)\r\n        {\r\n            _gen = _gen.sub(_dust);\r\n            _res = _res.add(_dust);\r\n        }\r\n\r\n        // 支付我们的赢家\r\n        plyr_[_winPID].win = _win.add(plyr_[_winPID].win);\r\n\r\n        // P3D奖励\r\n        if (!address(Jekyll_Island_Inc).send(_com))\r\n        {\r\n            _p3d = _p3d.add(_com);\r\n            _com = 0;\r\n        }\r\n\r\n        // 将gen部分分发给密钥持有者\r\n        round_[_rID].mask = _ppt.add(round_[_rID].mask);\r\n\r\n        // 将P3D的份额发送给divies\r\n        if (_p3d > 0)\r\n            Divies.transfer(_p3d);\r\n\r\n        // 准备事件\r\n        _eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000);\r\n        _eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000);\r\n        _eventData_.winnerAddr = plyr_[_winPID].addr;\r\n        _eventData_.winnerName = plyr_[_winPID].name;\r\n        _eventData_.amountWon = _win;\r\n        _eventData_.genAmount = _gen;\r\n        _eventData_.P3DAmount = _p3d;\r\n        _eventData_.newPot = _res;\r\n\r\n        // 新一轮开始\r\n        rID_++;\r\n        _rID++;\r\n        round_[_rID].strt = now;\r\n        round_[_rID].end = now.add(rndInit_).add(rndGap_);\r\n        round_[_rID].pot = _res;\r\n\r\n        return (_eventData_);\r\n    }\r\n\r\n    // 通过地址获取玩家信息\r\n    function getPlayerInfoByAddress(address _addr)\r\n    public\r\n    view\r\n    returns (uint256, bytes32, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        if (_addr == address(0))\r\n        {\r\n            _addr == msg.sender;\r\n        }\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        return\r\n        (\r\n        _pID, //0\r\n        plyr_[_pID].name, //1\r\n        plyrRnds_[_pID][_rID].keys, //2\r\n        plyr_[_pID].win, //3\r\n        (plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)), //4\r\n        plyr_[_pID].aff, //5\r\n        plyrRnds_[_pID][_rID].eth           //6\r\n        );\r\n    }\r\n\r\n    // 回合数据\r\n    function getCurrentRoundInfo()\r\n    public\r\n    view\r\n    returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, address, bytes32, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        return\r\n        (\r\n        round_[_rID].ico, //0\r\n        _rID, //1\r\n        round_[_rID].keys, //2\r\n        round_[_rID].end, //3\r\n        round_[_rID].strt, //4\r\n        round_[_rID].pot, //5\r\n        (round_[_rID].team + (round_[_rID].plyr * 10)), //6\r\n        plyr_[round_[_rID].plyr].addr, //7\r\n        plyr_[round_[_rID].plyr].name, //8\r\n        rndTmEth_[_rID][0], //9\r\n        rndTmEth_[_rID][1], //10\r\n        rndTmEth_[_rID][2], //11\r\n        rndTmEth_[_rID][3], //12\r\n        airDropTracker_ + (airDropPot_ * 1000)              //13\r\n        );\r\n    }\r\n\r\n    // 撤回所有收入\r\n    function withdraw()\r\n    isActivated()\r\n    isHuman()\r\n    public\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 获取时间\r\n        uint256 _now = now;\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 临时变量\r\n        uint256 _eth;\r\n\r\n        // 检查回合是否已经结束，还没有人绕过回合结束\r\n        if (_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)\r\n        {\r\n            // 设置交易事件\r\n            F3Ddatasets.EventReturns memory _eventData_;\r\n\r\n            // 结束回合（奖池分红）\r\n            round_[_rID].ended = true;\r\n            _eventData_ = endRound(_eventData_);\r\n\r\n            // 得到他的收入\r\n            _eth = withdrawEarnings(_pID);\r\n\r\n            // 支付玩家\r\n            if (_eth > 0)\r\n                plyr_[_pID].addr.transfer(_eth);\r\n\r\n            // 构建事件数据\r\n            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n            // 撤回分发事件\r\n            emit onWithdrawAndDistribute\r\n            (\r\n                msg.sender,\r\n                plyr_[_pID].name,\r\n                _eth,\r\n                _eventData_.compressedData,\r\n                _eventData_.compressedIDs,\r\n                _eventData_.winnerAddr,\r\n                _eventData_.winnerName,\r\n                _eventData_.amountWon,\r\n                _eventData_.newPot,\r\n                _eventData_.P3DAmount,\r\n                _eventData_.genAmount\r\n            );\r\n        } else {\r\n            // 在任何其他情况下\r\n            // 得到他的收入\r\n            _eth = withdrawEarnings(_pID);\r\n\r\n            // 支付玩家\r\n            if (_eth > 0)\r\n                plyr_[_pID].addr.transfer(_eth);\r\n\r\n            // 撤回事件\r\n            emit onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);\r\n        }\r\n    }\r\n\r\n    // 将未显示的收入和保险库收入加起来返回,并将它们置为0\r\n    function withdrawEarnings(uint256 _pID)\r\n    private\r\n    returns (uint256)\r\n    {\r\n        // 更新gen保险库\r\n        updateGenVault(_pID, plyr_[_pID].lrnd);\r\n\r\n        // 来自金库\r\n        uint256 _earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff);\r\n        if (_earnings > 0)\r\n        {\r\n            plyr_[_pID].win = 0;\r\n            plyr_[_pID].gen = 0;\r\n            plyr_[_pID].aff = 0;\r\n        }\r\n\r\n        return (_earnings);\r\n    }\r\n\r\n    // 计算给定eth可购买的钥匙数量\r\n    function calcKeysReceived(uint256 _rID, uint256 _eth)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        // 获取时间\r\n        uint256 _now = now;\r\n\r\n        // 回合进行中\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))) {\r\n            return keysRec(round_[_rID].eth + _eth,_eth);\r\n        } else {\r\n            // 如果结束,返回新一轮的数量\r\n            return keys(_eth);\r\n        }\r\n    }\r\n\r\n    // 返回购买指定数量钥匙需要的eth\r\n    function iWantXKeys(uint256 _keys)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 获取时间\r\n        uint256 _now = now;\r\n\r\n        // 在回合进行中\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n            return ethRec(round_[_rID].keys + _keys,_keys);\r\n        else // 如果结束,返回新一轮的价格\r\n            return eth(_keys);\r\n    }\r\n\r\n    // 计算以太币能够购买的钥匙数量\r\n    function keysRec(uint256 _curEth, uint256 _newEth)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\r\n    }\r\n\r\n    function keys(uint256 _eth)\r\n    internal\r\n    pure\r\n    returns(uint256)\r\n    {\r\n        return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000);\r\n    }\r\n\r\n    function ethRec(uint256 _curKeys, uint256 _sellKeys)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\r\n    }\r\n\r\n    function eth(uint256 _keys)\r\n    internal\r\n    pure\r\n    returns(uint256)\r\n    {\r\n        return ((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropTracker_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Jekyll_Island_Inc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_\",\"outputs\":[{\"name\":\"plyr\",\"type\":\"uint256\"},{\"name\":\"team\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"strt\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"ico\",\"type\":\"uint256\"},{\"name\":\"icoGen\",\"type\":\"uint256\"},{\"name\":\"icoAvg\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"plyrNames_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fees_\",\"outputs\":[{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"p3d\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"otherF3D_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rndTmEth_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerVaults\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXaddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"buyXid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXID\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"buyXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrRnds_\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"ico\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrNameList_\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"buyXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"potSplit_\",\"outputs\":[{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"p3d\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rID\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"calcKeysReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_keys\",\"type\":\"uint256\"}],\"name\":\"iWantXKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Divies\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropPot_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"names\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"lrnd\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"potSwap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isNewPlayer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedIDs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"P3DAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"}],\"name\":\"onBuyAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountAddedToPot\",\"type\":\"uint256\"}],\"name\":\"onPotSwapDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedIDs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keysBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"P3DAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"potAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"airDropPot\",\"type\":\"uint256\"}],\"name\":\"onEndTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onAffiliatePayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedIDs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"P3DAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"}],\"name\":\"onWithdrawAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedIDs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"P3DAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"}],\"name\":\"onReLoadAndDistribute\",\"type\":\"event\"}]","ContractName":"TinyF3D","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://de2e90fae822f47ab2377a5a2ee6e6b71bfa4270375bd696d146827af33502ba"}]}