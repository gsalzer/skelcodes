{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\ncontract GTXRecord is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // conversionRate is the multiplier to calculate the number of GTX claimable per FIN Point converted\r\n    // e.g., 100 = 1:1 conversion ratio\r\n    uint256 public conversionRate;\r\n\r\n    // a flag for locking record changes, lockRecords is only settable by the owner\r\n    bool public lockRecords;\r\n\r\n    // Maximum amount of recorded GTX able to be stored on this contract\r\n    uint256 public maxRecords;\r\n\r\n    // Total number of claimable GTX converted from FIN Points\r\n    uint256 public totalClaimableGTX;\r\n\r\n    // an address map used to store the per account claimable GTX\r\n    // as a result of converted FIN Points\r\n    mapping (address => uint256) public claimableGTX;\r\n\r\n    event GTXRecordCreate(\r\n        address indexed _recordAddress,\r\n        uint256 _finPointAmount,\r\n        uint256 _gtxAmount\r\n    );\r\n\r\n    event GTXRecordUpdate(\r\n        address indexed _recordAddress,\r\n        uint256 _finPointAmount,\r\n        uint256 _gtxAmount\r\n    );\r\n\r\n    event GTXRecordMove(\r\n        address indexed _oldAddress,\r\n        address indexed _newAddress,\r\n        uint256 _gtxAmount\r\n    );\r\n\r\n    event LockRecords();\r\n\r\n    /**\r\n     * Throws if conversionRate is not set or if the lockRecords flag has been set to true\r\n    */\r\n    modifier canRecord() {\r\n        require(conversionRate > 0);\r\n        require(!lockRecords);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev GTXRecord constructor\r\n     * @param _maxRecords is the maximum numer of GTX records this contract can store (used for sanity checks on GTX ERC20 totalsupply)\r\n    */\r\n    constructor (uint256 _maxRecords) public {\r\n        maxRecords = _maxRecords;\r\n    }\r\n\r\n    /**\r\n     * @dev sets the GTX Conversion rate\r\n     * @param _conversionRate is the rate applied during FIN Point to GTX conversion\r\n    */\r\n    function setConversionRate(uint256 _conversionRate) external onlyOwner{\r\n        require(_conversionRate <= 1000); // maximum 10x conversion rate\r\n        require(_conversionRate > 0); // minimum .01x conversion rate\r\n        conversionRate = _conversionRate;\r\n    }\r\n\r\n   /**\r\n    * @dev Function to lock record changes on this contracts\r\n    * @return True if the operation was successful.\r\n    */\r\n    function lock() public onlyOwner returns (bool) {\r\n        lockRecords = true;\r\n        emit LockRecords();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Used to calculate and store the amount of claimable GTX for those exsisting FIN point holders\r\n    * who opt to convert FIN points for GTX\r\n    * @param _recordAddress - the registered address where GTX can be claimed from\r\n    * @param _finPointAmount - the amount of FINs to be converted for GTX, this param should always be entered as base units\r\n    * i.e., 1 FIN = 10**18 base units\r\n    * @param _applyConversionRate - flag to apply conversion rate or not, any Finterra Technologies company GTX conversion allocations\r\n    * are strictly covnerted at one to one and do not recive the conversion bonus applied to FIN point user balances\r\n    */\r\n    function recordCreate(address _recordAddress, uint256 _finPointAmount, bool _applyConversionRate) public onlyOwner canRecord {\r\n        require(_finPointAmount >= 100000, \"cannot be less than 100000 FIN (in WEI)\"); // minimum allowed FIN 0.000000000001 (in base units) to avoid large rounding errors\r\n        uint256 afterConversionGTX;\r\n        if(_applyConversionRate == true) {\r\n            afterConversionGTX = _finPointAmount.mul(conversionRate).div(100);\r\n        } else {\r\n            afterConversionGTX = _finPointAmount;\r\n        }\r\n        claimableGTX[_recordAddress] = claimableGTX[_recordAddress].add(afterConversionGTX);\r\n        totalClaimableGTX = totalClaimableGTX.add(afterConversionGTX);\r\n        require(totalClaimableGTX <= maxRecords, \"total token record (contverted GTX) cannot exceed GTXRecord token limit\");\r\n        emit GTXRecordCreate(_recordAddress, _finPointAmount, claimableGTX[_recordAddress]);\r\n    }\r\n\r\n    /**\r\n    * @dev Used to calculate and update the amount of claimable GTX for those exsisting FIN point holders\r\n    * who opt to convert FIN points for GTX\r\n    * @param _recordAddress - the registered address where GTX can be claimed from\r\n    * @param _finPointAmount - the amount of FINs to be converted for GTX, this param should always be entered as base units\r\n    * i.e., 1 FIN = 10**18 base units\r\n    * @param _applyConversionRate - flag to apply conversion rate or do one for one conversion, any Finterra Technologies company FIN point allocations\r\n    * are strictly converted at one to one and do not recive the cnversion bonus applied to FIN point user balances\r\n    */\r\n    function recordUpdate(address _recordAddress, uint256 _finPointAmount, bool _applyConversionRate) public onlyOwner canRecord {\r\n        require(_finPointAmount >= 100000, \"cannot be less than 100000 FIN (in WEI)\"); // minimum allowed FIN 0.000000000001 (in base units) to avoid large rounding errors\r\n        uint256 afterConversionGTX;\r\n        totalClaimableGTX = totalClaimableGTX.sub(claimableGTX[_recordAddress]);\r\n        if(_applyConversionRate == true) {\r\n            afterConversionGTX  = _finPointAmount.mul(conversionRate).div(100);\r\n        } else {\r\n            afterConversionGTX  = _finPointAmount;\r\n        }\r\n        claimableGTX[_recordAddress] = afterConversionGTX;\r\n        totalClaimableGTX = totalClaimableGTX.add(claimableGTX[_recordAddress]);\r\n        require(totalClaimableGTX <= maxRecords, \"total token record (contverted GTX) cannot exceed GTXRecord token limit\");\r\n        emit GTXRecordUpdate(_recordAddress, _finPointAmount, claimableGTX[_recordAddress]);\r\n    }\r\n\r\n    /**\r\n    * @dev Used to move GTX records from one address to another, primarily in case a user has lost access to their originally registered account\r\n    * @param _oldAddress - the original registered address\r\n    * @param _newAddress - the new registerd address\r\n    */\r\n    function recordMove(address _oldAddress, address _newAddress) public onlyOwner canRecord {\r\n        require(claimableGTX[_oldAddress] != 0, \"cannot move a zero record\");\r\n        require(claimableGTX[_newAddress] == 0, \"destination must not already have a claimable record\");\r\n\r\n        claimableGTX[_newAddress] = claimableGTX[_oldAddress];\r\n        claimableGTX[_oldAddress] = 0;\r\n\r\n        emit GTXRecordMove(_oldAddress, _newAddress, claimableGTX[_newAddress]);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_recordAddress\",\"type\":\"address\"},{\"name\":\"_finPointAmount\",\"type\":\"uint256\"},{\"name\":\"_applyConversionRate\",\"type\":\"bool\"}],\"name\":\"recordUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldAddress\",\"type\":\"address\"},{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"recordMove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRecords\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaimableGTX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableGTX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recordAddress\",\"type\":\"address\"},{\"name\":\"_finPointAmount\",\"type\":\"uint256\"},{\"name\":\"_applyConversionRate\",\"type\":\"bool\"}],\"name\":\"recordCreate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conversionRate\",\"type\":\"uint256\"}],\"name\":\"setConversionRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRecords\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_maxRecords\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recordAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_finPointAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_gtxAmount\",\"type\":\"uint256\"}],\"name\":\"GTXRecordCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recordAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_finPointAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_gtxAmount\",\"type\":\"uint256\"}],\"name\":\"GTXRecordUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gtxAmount\",\"type\":\"uint256\"}],\"name\":\"GTXRecordMove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LockRecords\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GTXRecord","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000002a2fab8a32d35713000000","Library":"","SwarmSource":"bzzr://c362d2e9191921082fc25598c6602b76fe4ec43f13a42b160849249be9f539ff"}]}