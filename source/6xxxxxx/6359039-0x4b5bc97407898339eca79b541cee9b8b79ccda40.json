{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n * See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * Supports unlimited numbers of roles and addresses.\r\n * See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n * for you to write your own implementation of this interface using Enums or similar.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    view\r\n    public\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    require(_spender != address(0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_spender != address(0));\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_spender != address(0));\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract IdaToken is Ownable, RBAC, StandardToken {\r\n    using AddressUtils for address;\r\n    using SafeMath for uint256;\r\n\r\n    string public name    = \"IDA\";\r\n    string public symbol  = \"IDA\";\r\n    uint8 public decimals = 18;\r\n\r\n    // 初始发行量 100 亿\r\n    uint256 public constant INITIAL_SUPPLY          = 10000000000;\r\n    // 基石轮额度 3.96 亿\r\n    uint256 public constant FOOTSTONE_ROUND_AMOUNT  = 396000000;\r\n    // 私募额度 12 亿\r\n    uint256 public constant PRIVATE_SALE_AMOUNT     = 1200000000;\r\n    // 2019/05/01 之前的 Owner 锁仓额度 50 亿\r\n    uint256 public constant OWNER_LOCKED_IN_COMMON     = 5000000000;\r\n    // 通用额度 72.04 亿 （IDA 基金会、研发、生态建设、社区建设、运营）\r\n    uint256 public constant COMMON_PURPOSE_AMOUNT   = 7204000000;\r\n    // 团队预留额度1 1.2 亿\r\n    uint256 public constant TEAM_RESERVED_AMOUNT1   = 120000000;\r\n    // 团队预留额度2 3.6 亿\r\n    uint256 public constant TEAM_RESERVED_AMOUNT2   = 360000000;\r\n    // 团队预留额度3 3.6 亿\r\n    uint256 public constant TEAM_RESERVED_AMOUNT3   = 360000000;\r\n    // 团队预留额度4 3.6 亿\r\n    uint256 public constant TEAM_RESERVED_AMOUNT4   = 360000000;\r\n\r\n    // 私募中的 Ether 兑换比率，1 Ether = 10000 IDA\r\n    uint256 public constant EXCHANGE_RATE_IN_PRIVATE_SALE = 10000;\r\n\r\n    // 2018/10/01 00:00:01 的时间戳常数\r\n    uint256 public constant TIMESTAMP_OF_20181001000001 = 1538352001;\r\n    // 2018/10/02 00:00:01 的时间戳常数\r\n    uint256 public constant TIMESTAMP_OF_20181002000001 = 1538438401;\r\n    // 2018/11/01 00:00:01 的时间戳常数\r\n    uint256 public constant TIMESTAMP_OF_20181101000001 = 1541030401;\r\n    // 2019/02/01 00:00:01 的时间戳常数\r\n    uint256 public constant TIMESTAMP_OF_20190201000001 = 1548979201;\r\n    // 2019/05/01 00:00:01 的时间戳常数\r\n    uint256 public constant TIMESTAMP_OF_20190501000001 = 1556668801;\r\n    // 2019/08/01 00:00:01 的时间戳常数\r\n    uint256 public constant TIMESTAMP_OF_20190801000001 = 1564617601;\r\n    // 2019/11/01 00:00:01 的时间戳常数\r\n    uint256 public constant TIMESTAMP_OF_20191101000001 = 1572566401;\r\n    // 2020/11/01 00:00:01 的时间戳常数\r\n    uint256 public constant TIMESTAMP_OF_20201101000001 = 1604188801;\r\n    // 2021/11/01 00:00:01 的时间戳常数\r\n    uint256 public constant TIMESTAMP_OF_20211101000001 = 1635724801;\r\n\r\n    // Role constant of Partner Whitelist\r\n    string public constant ROLE_PARTNERWHITELIST = \"partnerWhitelist\";\r\n    // Role constant of Privatesale Whitelist\r\n    string public constant ROLE_PRIVATESALEWHITELIST = \"privateSaleWhitelist\";\r\n\r\n    // 由 Owner 分发的总数额\r\n    uint256 public totalOwnerReleased;\r\n    // 所有 partner 的已分发额总数\r\n    uint256 public totalPartnersReleased;\r\n    // 所有私募代理人的已分发数额总数\r\n    uint256 public totalPrivateSalesReleased;\r\n    // 通用额度的已分发数额总数\r\n    uint256 public totalCommonReleased;\r\n    // 团队保留额度的已分发数额总数1\r\n    uint256 public totalTeamReleased1;\r\n    // 团队保留额度的已分发数额总数2\r\n    uint256 public totalTeamReleased2;\r\n    // 团队保留额度的已分发数额总数3\r\n    uint256 public totalTeamReleased3;\r\n    // 团队保留额度的已分发数额总数4\r\n    uint256 public totalTeamReleased4;\r\n\r\n    // Partner 地址数组\r\n    address[] private partners;\r\n    // Partner 地址在数组中索引\r\n    mapping (address => uint256) private partnersIndex;\r\n    // 私募代理人地址数组\r\n    address[] private privateSaleAgents;\r\n    // 私募代理人地址在数组中的索引\r\n    mapping (address => uint256) private privateSaleAgentsIndex;\r\n\r\n    // Partner 限额映射\r\n    mapping (address => uint256) private partnersAmountLimit;\r\n    // Partner 实际已转账额度映射\r\n    mapping (address => uint256) private partnersWithdrawed;\r\n    // 私募代理人实际转出（售出）的 token 数量映射\r\n    mapping (address => uint256) private privateSalesReleased;\r\n\r\n    // Owner 的钱包地址\r\n    address ownerWallet;\r\n\r\n    // Log 特定的转账函数操作\r\n    event TransferLog(address from, address to, bytes32 functionName, uint256 value);\r\n\r\n    /**\r\n     * @dev 构造函数时需传入 Owner 指定的钱包地址\r\n     * @param _ownerWallet Owner 的钱包地址\r\n     */\r\n    constructor(address _ownerWallet) public {\r\n        ownerWallet = _ownerWallet;\r\n        totalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals));\r\n        balances[msg.sender] = totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev 变更 Owner 的钱包地址\r\n     * @param _ownerWallet Owner 的钱包地址\r\n     */\r\n    function changeOwnerWallet(address _ownerWallet) public onlyOwner {\r\n        ownerWallet = _ownerWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev 添加 partner 地址到白名单并设置其限额\r\n     * @param _addr Partner 地址\r\n     * @param _amount Partner 的持有限额\r\n     */\r\n    function addAddressToPartnerWhiteList(address _addr, uint256 _amount)\r\n        public onlyOwner\r\n    {\r\n        // 仅允许在 2018/11/01 00:00:01 之前调用\r\n        require(block.timestamp < TIMESTAMP_OF_20181101000001);\r\n        // 如 _addr 不在白名单内，则执行添加处理\r\n        if (!hasRole(_addr, ROLE_PARTNERWHITELIST)) {\r\n            addRole(_addr, ROLE_PARTNERWHITELIST);\r\n            // 把给定地址加入 partner 数组\r\n            partnersIndex[_addr] = partners.length;\r\n            partners.push(_addr);\r\n        }\r\n        // Owner 可以多次调用此函数以达到修改 partner 授权上限的效果\r\n        partnersAmountLimit[_addr] = _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev 将 partner 地址从白名单移除\r\n     * @param _addr Partner 地址\r\n     */\r\n    function removeAddressFromPartnerWhiteList(address _addr)\r\n        public onlyOwner\r\n    {\r\n        // 仅允许在 2018/11/01 00:00:01 之前调用\r\n        require(block.timestamp < TIMESTAMP_OF_20181101000001);\r\n        // 仅允许 _addr 已在白名单内时使用\r\n        require(hasRole(_addr, ROLE_PARTNERWHITELIST));\r\n\r\n        removeRole(_addr, ROLE_PARTNERWHITELIST);\r\n        partnersAmountLimit[_addr] = 0;\r\n        // 把给定地址从 partner 数组中删除\r\n        uint256 partnerIndex = partnersIndex[_addr];\r\n        uint256 lastPartnerIndex = partners.length.sub(1);\r\n        address lastPartner = partners[lastPartnerIndex];\r\n        partners[partnerIndex] = lastPartner;\r\n        delete partners[lastPartnerIndex];\r\n        partners.length--;\r\n        partnersIndex[_addr] = 0;\r\n        partnersIndex[lastPartner] = partnerIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev 添加私募代理人地址到白名单并设置其限额\r\n     * @param _addr 私募代理人地址\r\n     * @param _amount 私募代理人的转账限额\r\n     */\r\n    function addAddressToPrivateWhiteList(address _addr, uint256 _amount)\r\n        public onlyOwner\r\n    {\r\n        // 仅允许在 2018/10/02 00:00:01 之前调用\r\n        require(block.timestamp < TIMESTAMP_OF_20181002000001);\r\n        // 检查 _addr 是否已在白名单内以保证 approve 函数仅会被调用一次；\r\n        // 后续如还需要更改授权额度，\r\n        // 请直接使用安全的 increaseApproval 和 decreaseApproval 函数\r\n        require(!hasRole(_addr, ROLE_PRIVATESALEWHITELIST));\r\n\r\n        addRole(_addr, ROLE_PRIVATESALEWHITELIST);\r\n        approve(_addr, _amount);\r\n        // 把给定地址加入私募代理人数组\r\n        privateSaleAgentsIndex[_addr] = privateSaleAgents.length;\r\n        privateSaleAgents.push(_addr);\r\n    }\r\n\r\n    /**\r\n     * @dev 将私募代理人地址从白名单移除\r\n     * @param _addr 私募代理人地址\r\n     */\r\n    function removeAddressFromPrivateWhiteList(address _addr)\r\n        public onlyOwner\r\n    {\r\n        // 仅允许在 2018/10/02 00:00:01 之前调用\r\n        require(block.timestamp < TIMESTAMP_OF_20181002000001);\r\n        // 仅允许 _addr 已在白名单内时使用\r\n        require(hasRole(_addr, ROLE_PRIVATESALEWHITELIST));\r\n\r\n        removeRole(_addr, ROLE_PRIVATESALEWHITELIST);\r\n        approve(_addr, 0);\r\n        // 把给定地址从私募代理人数组中删除\r\n        uint256 agentIndex = privateSaleAgentsIndex[_addr];\r\n        uint256 lastAgentIndex = privateSaleAgents.length.sub(1);\r\n        address lastAgent = privateSaleAgents[lastAgentIndex];\r\n        privateSaleAgents[agentIndex] = lastAgent;\r\n        delete privateSaleAgents[lastAgentIndex];\r\n        privateSaleAgents.length--;\r\n        privateSaleAgentsIndex[_addr] = 0;\r\n        privateSaleAgentsIndex[lastAgent] = agentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev 允许接受转账的 fallback 函数\r\n     */\r\n    function() external payable {\r\n        privateSale(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev 私募处理\r\n     * @param _beneficiary 收取 token 地址\r\n     */\r\n    function privateSale(address _beneficiary)\r\n        public payable onlyRole(ROLE_PRIVATESALEWHITELIST)\r\n    {\r\n        // 仅允许 EOA 购买\r\n        require(msg.sender == tx.origin);\r\n        require(!msg.sender.isContract());\r\n        // 仅允许在 2018/10/02 00:00:01 之前购买\r\n        require(block.timestamp < TIMESTAMP_OF_20181002000001);\r\n\r\n        uint256 purchaseValue = msg.value.mul(EXCHANGE_RATE_IN_PRIVATE_SALE);\r\n        transferFrom(owner, _beneficiary, purchaseValue);\r\n    }\r\n\r\n    /**\r\n     * @dev 人工私募处理\r\n     * @param _addr 收取 token 地址\r\n     * @param _amount 转账 token 数量\r\n     */\r\n    function withdrawPrivateCoinByMan(address _addr, uint256 _amount)\r\n        public onlyRole(ROLE_PRIVATESALEWHITELIST)\r\n    {\r\n        // 仅允许在 2018/10/02 00:00:01 之前购买\r\n        require(block.timestamp < TIMESTAMP_OF_20181002000001);\r\n        // 仅允许 EOA 获得转账\r\n        require(!_addr.isContract());\r\n\r\n        transferFrom(owner, _addr, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev 私募余额提取\r\n     * @param _amount 提取 token 数量\r\n     */\r\n    function withdrawRemainPrivateCoin(uint256 _amount) public onlyOwner {\r\n        // 仅允许在 2018/10/01 00:00:01 之后提取\r\n        require(block.timestamp >= TIMESTAMP_OF_20181001000001);\r\n        require(transfer(ownerWallet, _amount));\r\n        emit TransferLog(owner, ownerWallet, bytes32(\"withdrawRemainPrivateCoin\"), _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev 私募转账处理(从 Owner 持有的余额中转出)\r\n     * @param _to 转入地址\r\n     * @param _amount 转账数量\r\n     */\r\n    function _privateSaleTransferFromOwner(address _to, uint256 _amount)\r\n        private returns (bool)\r\n    {\r\n        uint256 newTotalPrivateSaleAmount = totalPrivateSalesReleased.add(_amount);\r\n        // 检查私募转账总额是否超限\r\n        require(newTotalPrivateSaleAmount <= PRIVATE_SALE_AMOUNT.mul(10 ** uint256(decimals)));\r\n\r\n        bool result = super.transferFrom(owner, _to, _amount);\r\n        privateSalesReleased[msg.sender] = privateSalesReleased[msg.sender].add(_amount);\r\n        totalPrivateSalesReleased = newTotalPrivateSaleAmount;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev 合约余额提取\r\n     */\r\n    function withdrawFunds() public onlyOwner {\r\n        ownerWallet.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev 获取所有 Partner 地址\r\n     * @return 所有 Partner 地址\r\n     */\r\n    function getPartnerAddresses() public onlyOwner view returns (address[]) {\r\n        return partners;\r\n    }\r\n\r\n    /**\r\n     * @dev 获取所有私募代理人地址\r\n     * @return 所有私募代理人地址\r\n     */\r\n    function getPrivateSaleAgentAddresses() public onlyOwner view returns (address[]) {\r\n        return privateSaleAgents;\r\n    }\r\n\r\n    /**\r\n     * @dev 获得私募代理人地址已转出（售出）的 token 数量\r\n     * @param _addr 私募代理人地址\r\n     * @return 私募代理人地址的已转出的 token 数量\r\n     */\r\n    function privateSaleReleased(address _addr) public view returns (uint256) {\r\n        return privateSalesReleased[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev 获得 Partner 地址的提取限额\r\n     * @param _addr Partner 的地址\r\n     * @return Partner 地址的提取限额\r\n     */\r\n    function partnerAmountLimit(address _addr) public view returns (uint256) {\r\n        return partnersAmountLimit[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev 获得 Partner 地址的已提取 token 数量\r\n     * @param _addr Partner 的地址\r\n     * @return Partner 地址的已提取 token 数量\r\n     */\r\n    function partnerWithdrawed(address _addr) public view returns (uint256) {\r\n        return partnersWithdrawed[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev 给 Partner 地址分发 token\r\n     * @param _addr Partner 的地址\r\n     * @param _amount 分发的 token 数量\r\n     */\r\n    function withdrawToPartner(address _addr, uint256 _amount)\r\n        public onlyOwner\r\n    {\r\n        require(hasRole(_addr, ROLE_PARTNERWHITELIST));\r\n        // 仅允许在 2018/11/01 00:00:01 之前分发\r\n        require(block.timestamp < TIMESTAMP_OF_20181101000001);\r\n\r\n        uint256 newTotalReleased = totalPartnersReleased.add(_amount);\r\n        require(newTotalReleased <= FOOTSTONE_ROUND_AMOUNT.mul(10 ** uint256(decimals)));\r\n\r\n        uint256 newPartnerAmount = balanceOf(_addr).add(_amount);\r\n        require(newPartnerAmount <= partnersAmountLimit[_addr]);\r\n\r\n        totalPartnersReleased = newTotalReleased;\r\n        transfer(_addr, _amount);\r\n        emit TransferLog(owner, _addr, bytes32(\"withdrawToPartner\"), _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev 计算 Partner 地址的可提取 token 数量，返回其与 _value 之间较小的那个值\r\n     * @param _addr Partner 的地址\r\n     * @param _value 想要提取的 token 数量\r\n     * @return Partner 地址当前可提取的 token 数量，\r\n     *         如果 _value 较小，则返回 _value 的数值\r\n     */\r\n    function _permittedPartnerTranferValue(address _addr, uint256 _value)\r\n        private view returns (uint256)\r\n    {\r\n        uint256 limit = balanceOf(_addr);\r\n        uint256 withdrawed = partnersWithdrawed[_addr];\r\n        uint256 total = withdrawed.add(limit);\r\n        uint256 time = block.timestamp;\r\n\r\n        require(limit > 0);\r\n\r\n        if (time >= TIMESTAMP_OF_20191101000001) {\r\n            // 2019/11/01 00:00:01 之后可提取 100%\r\n            limit = total;\r\n        } else if (time >= TIMESTAMP_OF_20190801000001) {\r\n            // 2019/08/01 00:00:01 之后最多提取 75%\r\n            limit = total.mul(75).div(100);\r\n        } else if (time >= TIMESTAMP_OF_20190501000001) {\r\n            // 2019/05/01 00:00:01 之后最多提取 50%\r\n            limit = total.div(2);\r\n        } else if (time >= TIMESTAMP_OF_20190201000001) {\r\n            // 2019/02/01 00:00:01 之后最多提取 25%\r\n            limit = total.mul(25).div(100);\r\n        } else {\r\n            // 2019/02/01 00:00:01 之前不可提取\r\n            limit = 0;\r\n        }\r\n        if (withdrawed >= limit) {\r\n            limit = 0;\r\n        } else {\r\n            limit = limit.sub(withdrawed);\r\n        }\r\n        if (_value < limit) {\r\n            limit = _value;\r\n        }\r\n        return limit;\r\n    }\r\n\r\n    /**\r\n     * @dev 重写基础合约的 transferFrom 函数\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        bool result;\r\n        address sender = msg.sender;\r\n\r\n        if (_from == owner) {\r\n            if (hasRole(sender, ROLE_PRIVATESALEWHITELIST)) {\r\n                // 仅允许在 2018/10/02 00:00:01 之前购买\r\n                require(block.timestamp < TIMESTAMP_OF_20181002000001);\r\n\r\n                result = _privateSaleTransferFromOwner(_to, _value);\r\n            } else {\r\n                revert();\r\n            }\r\n        } else {\r\n            result = super.transferFrom(_from, _to, _value);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev 通用额度提取\r\n     * @param _amount 提取 token 数量\r\n     */\r\n    function withdrawCommonCoin(uint256 _amount) public onlyOwner {\r\n        // 仅允许在 2018/11/01 00:00:01 之后提取\r\n        require(block.timestamp >= TIMESTAMP_OF_20181101000001);\r\n        require(transfer(ownerWallet, _amount));\r\n        emit TransferLog(owner, ownerWallet, bytes32(\"withdrawCommonCoin\"), _amount);\r\n        totalCommonReleased = totalCommonReleased.add(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev 团队预留额度1提取\r\n     * @param _amount 提取 token 数量\r\n     */\r\n    function withdrawToTeamStep1(uint256 _amount) public onlyOwner {\r\n        // 仅允许在 2019/02/01 00:00:01 之后提取\r\n        require(block.timestamp >= TIMESTAMP_OF_20190201000001);\r\n        require(transfer(ownerWallet, _amount));\r\n        emit TransferLog(owner, ownerWallet, bytes32(\"withdrawToTeamStep1\"), _amount);\r\n        totalTeamReleased1 = totalTeamReleased1.add(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev 团队预留额度2提取\r\n     * @param _amount 提取 token 数量\r\n     */\r\n    function withdrawToTeamStep2(uint256 _amount) public onlyOwner {\r\n        // 仅允许在 2019/11/01 00:00:01 之后提取\r\n        require(block.timestamp >= TIMESTAMP_OF_20191101000001);\r\n        require(transfer(ownerWallet, _amount));\r\n        emit TransferLog(owner, ownerWallet, bytes32(\"withdrawToTeamStep2\"), _amount);\r\n        totalTeamReleased2 = totalTeamReleased2.add(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev 团队预留额度3提取\r\n     * @param _amount 提取 token 数量\r\n     */\r\n    function withdrawToTeamStep3(uint256 _amount) public onlyOwner {\r\n        // 仅允许在 2020/11/01 00:00:01 之后提取\r\n        require(block.timestamp >= TIMESTAMP_OF_20201101000001);\r\n        require(transfer(ownerWallet, _amount));\r\n        emit TransferLog(owner, ownerWallet, bytes32(\"withdrawToTeamStep3\"), _amount);\r\n        totalTeamReleased3 = totalTeamReleased3.add(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev 团队预留额度4提取\r\n     * @param _amount 提取 token 数量\r\n     */\r\n    function withdrawToTeamStep4(uint256 _amount) public onlyOwner {\r\n        // 仅允许在 2021/11/01 00:00:01 之后提取\r\n        require(block.timestamp >= TIMESTAMP_OF_20211101000001);\r\n        require(transfer(ownerWallet, _amount));\r\n        emit TransferLog(owner, ownerWallet, bytes32(\"withdrawToTeamStep4\"), _amount);\r\n        totalTeamReleased4 = totalTeamReleased4.add(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev 重写基础合约的 transfer 函数\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        bool result;\r\n        uint256 limit;\r\n\r\n        if (msg.sender == owner) {\r\n            limit = _ownerReleaseLimit();\r\n            uint256 newTotalOwnerReleased = totalOwnerReleased.add(_value);\r\n            require(newTotalOwnerReleased <= limit);\r\n            result = super.transfer(_to, _value);\r\n            totalOwnerReleased = newTotalOwnerReleased;\r\n        } else if (hasRole(msg.sender, ROLE_PARTNERWHITELIST)) {\r\n            limit = _permittedPartnerTranferValue(msg.sender, _value);\r\n            if (limit > 0) {\r\n                result = super.transfer(_to, limit);\r\n                partnersWithdrawed[msg.sender] = partnersWithdrawed[msg.sender].add(limit);\r\n            } else {\r\n                revert();\r\n            }\r\n        } else {\r\n            result = super.transfer(_to, _value);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev 计算 Owner 的转账额度\r\n     * @return Owner 的当前转账额度\r\n     */\r\n   function _ownerReleaseLimit() private view returns (uint256) {\r\n        uint256 time = block.timestamp;\r\n        uint256 limit;\r\n        uint256 amount;\r\n\r\n        // 基石轮额度作为默认限额\r\n        limit = FOOTSTONE_ROUND_AMOUNT.mul(10 ** uint256(decimals));\r\n        if (time >= TIMESTAMP_OF_20181001000001) {\r\n            // 2018/10/1 之后，最大限额需要增加私募剩余额度\r\n            amount = PRIVATE_SALE_AMOUNT.mul(10 ** uint256(decimals));\r\n            if (totalPrivateSalesReleased < amount) {\r\n                limit = limit.add(amount).sub(totalPrivateSalesReleased);\r\n            }\r\n        }\r\n        if (time >= TIMESTAMP_OF_20181101000001) {\r\n            // 2018/11/1 之后，最大限额需要增加通用提取额度中减去锁仓额度以外的额度\r\n            limit = limit.add(COMMON_PURPOSE_AMOUNT.sub(OWNER_LOCKED_IN_COMMON).mul(10 ** uint256(decimals)));\r\n        }\r\n        if (time >= TIMESTAMP_OF_20190201000001) {\r\n            // 2019/2/1 之后，最大限额需要增加团队预留额度1\r\n            limit = limit.add(TEAM_RESERVED_AMOUNT1.mul(10 ** uint256(decimals)));\r\n        }\r\n        if (time >= TIMESTAMP_OF_20190501000001) {\r\n            // 2019/5/1 之后，最大限额需要增加通用额度中的锁仓额度\r\n            limit = limit.add(OWNER_LOCKED_IN_COMMON.mul(10 ** uint256(decimals)));\r\n        }\r\n        if (time >= TIMESTAMP_OF_20191101000001) {\r\n            // 2019/11/1 之后，最大限额需要增加团队预留额度2\r\n            limit = limit.add(TEAM_RESERVED_AMOUNT2.mul(10 ** uint256(decimals)));\r\n        }\r\n        if (time >= TIMESTAMP_OF_20201101000001) {\r\n            // 2020/11/1 之后，最大限额需要增加团队预留额度3\r\n            limit = limit.add(TEAM_RESERVED_AMOUNT3.mul(10 ** uint256(decimals)));\r\n        }\r\n        if (time >= TIMESTAMP_OF_20211101000001) {\r\n            // 2021/11/1 之后，最大限额需要增加团队预留额度4\r\n            limit = limit.add(TEAM_RESERVED_AMOUNT4.mul(10 ** uint256(decimals)));\r\n        }\r\n        return limit;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromPrivateWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPartnersReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTeamReleased3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"privateSaleReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_RESERVED_AMOUNT2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToTeamStep4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXCHANGE_RATE_IN_PRIVATE_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_RESERVED_AMOUNT1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromPartnerWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addAddressToPartnerWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerWallet\",\"type\":\"address\"}],\"name\":\"changeOwnerWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIMESTAMP_OF_20211101000001\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_LOCKED_IN_COMMON\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_RESERVED_AMOUNT3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToTeamStep3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCommonReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToTeamStep1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRemainPrivateCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCommonCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addAddressToPrivateWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"partnerAmountLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIMESTAMP_OF_20190501000001\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIMESTAMP_OF_20181001000001\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRIVATE_SALE_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToPartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIMESTAMP_OF_20190201000001\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_PARTNERWHITELIST\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTeamReleased4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTeamReleased1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPrivateCoinByMan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrivateSaleAgentAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPartnerAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToTeamStep2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIMESTAMP_OF_20190801000001\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTeamReleased2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIMESTAMP_OF_20191101000001\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPrivateSalesReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMON_PURPOSE_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOOTSTONE_ROUND_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_PRIVATESALEWHITELIST\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"partnerWithdrawed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIMESTAMP_OF_20181101000001\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"privateSale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalOwnerReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIMESTAMP_OF_20201101000001\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_RESERVED_AMOUNT4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIMESTAMP_OF_20181002000001\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ownerWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"IdaToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://85fe8cacb4b93d4e9aba7506be3e0c438244201f910733d02d5be2fc499b731b"}]}