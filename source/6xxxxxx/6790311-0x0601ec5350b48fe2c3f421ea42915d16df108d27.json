{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath256 {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint256 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not a contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _validateAddress(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"contract is paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused, \"contract is not paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract Controllable is Ownable {\r\n    mapping(address => bool) controllers;\r\n\r\n    modifier onlyController {\r\n        require(_isController(msg.sender), \"no controller rights\");\r\n        _;\r\n    }\r\n\r\n    function _isController(address _controller) internal view returns (bool) {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    function _setControllers(address[] _controllers) internal {\r\n        for (uint256 i = 0; i < _controllers.length; i++) {\r\n            _validateAddress(_controllers[i]);\r\n            controllers[_controllers[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Upgradable is Controllable {\r\n    address[] internalDependencies;\r\n    address[] externalDependencies;\r\n\r\n    function getInternalDependencies() public view returns(address[]) {\r\n        return internalDependencies;\r\n    }\r\n\r\n    function getExternalDependencies() public view returns(address[]) {\r\n        return externalDependencies;\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\r\n            _validateAddress(_newDependencies[i]);\r\n        }\r\n        internalDependencies = _newDependencies;\r\n    }\r\n\r\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        externalDependencies = _newDependencies;\r\n        _setControllers(_newDependencies);\r\n    }\r\n}\r\n\r\ncontract HumanOriented {\r\n    modifier onlyHuman() {\r\n        require(msg.sender == tx.origin, \"not a human\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Events {\r\n    function emitEggCreated(address, uint256) external;\r\n    function emitDragonOnSale(address, uint256) external;\r\n    function emitDragonRemovedFromSale(address, uint256) external;\r\n    function emitDragonRemovedFromBreeding(address, uint256) external;\r\n    function emitDragonOnBreeding(address, uint256) external;\r\n    function emitDragonBought(address, address, uint256, uint256) external;\r\n    function emitDragonBreedingBought(address, address, uint256, uint256) external;\r\n    function emitDistributionUpdated(uint256, uint256, uint256) external;\r\n    function emitEggOnSale(address, uint256) external;\r\n    function emitEggRemovedFromSale(address, uint256) external;\r\n    function emitEggBought(address, address, uint256, uint256) external;\r\n    function emitGoldSellOrderCreated(address, uint256, uint256) external;\r\n    function emitGoldSellOrderCancelled(address) external;\r\n    function emitGoldSold(address, address, uint256, uint256) external;\r\n    function emitGoldBuyOrderCreated(address, uint256, uint256) external;\r\n    function emitGoldBuyOrderCancelled(address) external;\r\n    function emitGoldBought(address, address, uint256, uint256) external;\r\n    function emitSkillOnSale(address, uint256) external;\r\n    function emitSkillRemovedFromSale(address, uint256) external;\r\n    function emitSkillBought(address, address, uint256, uint256, uint256) external;\r\n}\r\n\r\n\r\ncontract MarketplaceController {\r\n    function buyEgg(address, uint256, uint256, uint256, bool) external returns (address, uint256, bool);\r\n    function sellEgg(address, uint256, uint256, uint256, uint16, bool) external;\r\n    function removeEggFromSale(address, uint256) external;\r\n    function buyDragon(address, uint256, uint256, uint256, bool) external returns (address, uint256, bool);\r\n    function sellDragon(address, uint256, uint256, uint256, uint16, bool) external;\r\n    function removeDragonFromSale(address, uint256) external;\r\n    function buyBreeding(address, uint256, uint256, uint256, uint256, bool) external returns (uint256, address, uint256, bool);\r\n    function sellBreeding(address, uint256, uint256, uint256, uint16, bool) external;\r\n    function removeBreedingFromSale(address, uint256) external;\r\n    function buySkill(address, uint256, uint256, uint256, uint32) external returns (address, uint256, bool);\r\n    function sellSkill(address, uint256, uint256) external;\r\n    function removeSkillFromSale(address, uint256) external;\r\n}\r\n\r\ncontract GoldMarketplace {\r\n    function createSellOrder(address, uint256, uint256) external;\r\n    function cancelSellOrder(address) external;\r\n    function fillSellOrder(address, uint256, address, uint256, uint256) external returns (uint256);\r\n    function createBuyOrder(address, uint256, uint256, uint256) external;\r\n    function cancelBuyOrder(address) external;\r\n    function fillBuyOrder(address, address, uint256, uint256) external returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n//////////////CONTRACT//////////////\r\n\r\n\r\n\r\n\r\ncontract MainMarket is Pausable, Upgradable, HumanOriented {\r\n    using SafeMath256 for uint256;\r\n\r\n    MarketplaceController public marketplaceController;\r\n    GoldMarketplace goldMarketplace;\r\n    Events events;\r\n\r\n    // MARKETPLACE\r\n\r\n    function _transferEth(\r\n        address _from,\r\n        address _to,\r\n        uint256 _available,\r\n        uint256 _required_,\r\n        bool _isGold\r\n    ) internal {\r\n        uint256 _required = _required_;\r\n        if (_isGold) {\r\n            _required = 0;\r\n        }\r\n\r\n        _to.transfer(_required);\r\n        if (_available > _required) {\r\n            _from.transfer(_available.sub(_required));\r\n        }\r\n    }\r\n\r\n    // EGG\r\n\r\n    function buyEgg(\r\n        uint256 _id,\r\n        uint256 _expectedPrice,\r\n        bool _isGold\r\n    ) external onlyHuman whenNotPaused payable {\r\n        (\r\n            address _seller,\r\n            uint256 _price,\r\n            bool _success\r\n        ) = marketplaceController.buyEgg(\r\n            msg.sender,\r\n            msg.value,\r\n            _id,\r\n            _expectedPrice,\r\n            _isGold\r\n        );\r\n        if (_success) {\r\n            _transferEth(msg.sender, _seller, msg.value, _price, _isGold);\r\n            events.emitEggBought(msg.sender, _seller, _id, _price);\r\n        } else {\r\n            msg.sender.transfer(msg.value);\r\n            events.emitEggRemovedFromSale(_seller, _id);\r\n        }\r\n    }\r\n\r\n    function sellEgg(\r\n        uint256 _id,\r\n        uint256 _maxPrice,\r\n        uint256 _minPrice,\r\n        uint16 _period,\r\n        bool _isGold\r\n    ) external onlyHuman whenNotPaused {\r\n        marketplaceController.sellEgg(msg.sender, _id, _maxPrice, _minPrice, _period, _isGold);\r\n        events.emitEggOnSale(msg.sender, _id);\r\n    }\r\n\r\n    function removeEggFromSale(uint256 _id) external onlyHuman whenNotPaused {\r\n        marketplaceController.removeEggFromSale(msg.sender, _id);\r\n        events.emitEggRemovedFromSale(msg.sender, _id);\r\n    }\r\n\r\n    // DRAGON\r\n\r\n    function buyDragon(\r\n        uint256 _id,\r\n        uint256 _expectedPrice,\r\n        bool _isGold\r\n    ) external onlyHuman whenNotPaused payable {\r\n        (\r\n            address _seller,\r\n            uint256 _price,\r\n            bool _success\r\n        ) = marketplaceController.buyDragon(\r\n            msg.sender,\r\n            msg.value,\r\n            _id,\r\n            _expectedPrice,\r\n            _isGold\r\n        );\r\n        if (_success) {\r\n            _transferEth(msg.sender, _seller, msg.value, _price, _isGold);\r\n            events.emitDragonBought(msg.sender, _seller, _id, _price);\r\n        } else {\r\n            msg.sender.transfer(msg.value);\r\n            events.emitDragonRemovedFromSale(_seller, _id);\r\n        }\r\n    }\r\n\r\n    function sellDragon(\r\n        uint256 _id,\r\n        uint256 _maxPrice,\r\n        uint256 _minPrice,\r\n        uint16 _period,\r\n        bool _isGold\r\n    ) external onlyHuman whenNotPaused {\r\n        marketplaceController.sellDragon(msg.sender, _id, _maxPrice, _minPrice, _period, _isGold);\r\n        events.emitDragonOnSale(msg.sender, _id);\r\n    }\r\n\r\n    function removeDragonFromSale(uint256 _id) external onlyHuman whenNotPaused {\r\n        marketplaceController.removeDragonFromSale(msg.sender, _id);\r\n        events.emitDragonRemovedFromSale(msg.sender, _id);\r\n    }\r\n\r\n    // BREEDING\r\n\r\n    function buyBreeding(\r\n        uint256 _momId,\r\n        uint256 _dadId,\r\n        uint256 _expectedPrice,\r\n        bool _isGold\r\n    ) external onlyHuman whenNotPaused payable {\r\n        (\r\n            uint256 _eggId,\r\n            address _seller,\r\n            uint256 _price,\r\n            bool _success\r\n        ) = marketplaceController.buyBreeding(\r\n            msg.sender,\r\n            msg.value,\r\n            _momId,\r\n            _dadId,\r\n            _expectedPrice,\r\n            _isGold\r\n        );\r\n        if (_success) {\r\n            events.emitEggCreated(msg.sender, _eggId);\r\n            _transferEth(msg.sender, _seller, msg.value, _price, _isGold);\r\n            events.emitDragonBreedingBought(msg.sender, _seller, _dadId, _price);\r\n        } else {\r\n            msg.sender.transfer(msg.value);\r\n            events.emitDragonRemovedFromBreeding(_seller, _dadId);\r\n        }\r\n    }\r\n\r\n    function sellBreeding(\r\n        uint256 _id,\r\n        uint256 _maxPrice,\r\n        uint256 _minPrice,\r\n        uint16 _period,\r\n        bool _isGold\r\n    ) external onlyHuman whenNotPaused {\r\n        marketplaceController.sellBreeding(msg.sender, _id, _maxPrice, _minPrice, _period, _isGold);\r\n        events.emitDragonOnBreeding(msg.sender, _id);\r\n    }\r\n\r\n    function removeBreedingFromSale(uint256 _id) external onlyHuman whenNotPaused {\r\n        marketplaceController.removeBreedingFromSale(msg.sender, _id);\r\n        events.emitDragonRemovedFromBreeding(msg.sender, _id);\r\n    }\r\n\r\n    // GOLD\r\n\r\n    // SELL\r\n\r\n    function fillGoldSellOrder(\r\n        address _seller,\r\n        uint256 _price,\r\n        uint256 _amount\r\n    ) external onlyHuman whenNotPaused payable {\r\n        address(goldMarketplace).transfer(msg.value);\r\n        uint256 _priceForOne = goldMarketplace.fillSellOrder(msg.sender, msg.value, _seller, _price, _amount);\r\n        events.emitGoldSold(msg.sender, _seller, _amount, _priceForOne);\r\n    }\r\n\r\n    function createGoldSellOrder(\r\n        uint256 _price,\r\n        uint256 _amount\r\n    ) external onlyHuman whenNotPaused {\r\n        goldMarketplace.createSellOrder(msg.sender, _price, _amount);\r\n        events.emitGoldSellOrderCreated(msg.sender, _price, _amount);\r\n    }\r\n\r\n    function cancelGoldSellOrder() external onlyHuman whenNotPaused {\r\n        goldMarketplace.cancelSellOrder(msg.sender);\r\n        events.emitGoldSellOrderCancelled(msg.sender);\r\n    }\r\n\r\n    // BUY\r\n\r\n    function fillGoldBuyOrder(\r\n        address _buyer,\r\n        uint256 _price,\r\n        uint256 _amount\r\n    ) external onlyHuman whenNotPaused {\r\n        uint256 _priceForOne = goldMarketplace.fillBuyOrder(msg.sender, _buyer, _price, _amount);\r\n        events.emitGoldBought(msg.sender, _buyer, _amount, _priceForOne);\r\n    }\r\n\r\n    function createGoldBuyOrder(\r\n        uint256 _price,\r\n        uint256 _amount\r\n    ) external onlyHuman whenNotPaused payable {\r\n        address(goldMarketplace).transfer(msg.value);\r\n        goldMarketplace.createBuyOrder(msg.sender, msg.value, _price, _amount);\r\n        events.emitGoldBuyOrderCreated(msg.sender, _price, _amount);\r\n    }\r\n\r\n    function cancelGoldBuyOrder() external onlyHuman whenNotPaused {\r\n        goldMarketplace.cancelBuyOrder(msg.sender);\r\n        events.emitGoldBuyOrderCancelled(msg.sender);\r\n    }\r\n\r\n    // SKILL\r\n\r\n    function buySkill(\r\n        uint256 _id,\r\n        uint256 _target,\r\n        uint256 _expectedPrice,\r\n        uint32 _expectedEffect\r\n    ) external onlyHuman whenNotPaused {\r\n        (\r\n            address _seller,\r\n            uint256 _price,\r\n            bool _success\r\n        ) = marketplaceController.buySkill(\r\n            msg.sender,\r\n            _id,\r\n            _target,\r\n            _expectedPrice,\r\n            _expectedEffect\r\n        );\r\n\r\n        if (_success) {\r\n            events.emitSkillBought(msg.sender, _seller, _id, _target, _price);\r\n        } else {\r\n            events.emitSkillRemovedFromSale(_seller, _id);\r\n        }\r\n    }\r\n\r\n    function sellSkill(\r\n        uint256 _id,\r\n        uint256 _price\r\n    ) external onlyHuman whenNotPaused {\r\n        marketplaceController.sellSkill(msg.sender, _id, _price);\r\n        events.emitSkillOnSale(msg.sender, _id);\r\n    }\r\n\r\n    function removeSkillFromSale(uint256 _id) external onlyHuman whenNotPaused {\r\n        marketplaceController.removeSkillFromSale(msg.sender, _id);\r\n        events.emitSkillRemovedFromSale(msg.sender, _id);\r\n    }\r\n\r\n    // UPDATE CONTRACT\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        super.setInternalDependencies(_newDependencies);\r\n\r\n        marketplaceController = MarketplaceController(_newDependencies[0]);\r\n        goldMarketplace = GoldMarketplace(_newDependencies[1]);\r\n        events = Events(_newDependencies[2]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"uint256\"},{\"name\":\"_expectedPrice\",\"type\":\"uint256\"},{\"name\":\"_expectedEffect\",\"type\":\"uint32\"}],\"name\":\"buySkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeEggFromSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeSkillFromSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_momId\",\"type\":\"uint256\"},{\"name\":\"_dadId\",\"type\":\"uint256\"},{\"name\":\"_expectedPrice\",\"type\":\"uint256\"},{\"name\":\"_isGold\",\"type\":\"bool\"}],\"name\":\"buyBreeding\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeDragonFromSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint16\"},{\"name\":\"_isGold\",\"type\":\"bool\"}],\"name\":\"sellDragon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelGoldBuyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint16\"},{\"name\":\"_isGold\",\"type\":\"bool\"}],\"name\":\"sellBreeding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"sellSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketplaceController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeBreedingFromSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createGoldBuyOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fillGoldSellOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint16\"},{\"name\":\"_isGold\",\"type\":\"bool\"}],\"name\":\"sellEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_expectedPrice\",\"type\":\"uint256\"},{\"name\":\"_isGold\",\"type\":\"bool\"}],\"name\":\"buyDragon\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setExternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setInternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_expectedPrice\",\"type\":\"uint256\"},{\"name\":\"_isGold\",\"type\":\"bool\"}],\"name\":\"buyEgg\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fillGoldBuyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createGoldSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelGoldSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MainMarket","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://79d2118c11a70497adb5a3049ce5418d7739fac0124389077ac8d66bfc9d1e56"}]}