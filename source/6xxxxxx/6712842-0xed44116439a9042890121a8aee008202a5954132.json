{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\ninterface Interfacemc {\r\n  \r\n  function balanceOf(address who) external view returns (uint256);\r\n  \r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  \r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n  \r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n  \r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n  \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract Mundicoin is Interfacemc{\r\n    using SafeMath for uint256;\r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    uint256 public totalSupply;\r\n    string public name = \"Mundicoin\"; \r\n    uint8 public decimals = 8; \r\n    string public symbol = \"MC\";\r\n    address private _owner;\r\n    \r\n    mapping (address => bool) public _notransferible;\r\n    mapping (address => bool) private _administradores; \r\n    \r\n    constructor() public{\r\n        _owner = msg.sender;\r\n        _balances[_owner] = totalSupply;\r\n        totalSupply = 10000000000000000;\r\n        _administradores[_owner] = true;\r\n    }\r\n\r\n    function isAdmin(address dir) public view returns(bool){\r\n        return _administradores[dir];\r\n    }\r\n    \r\n    modifier OnlyOwner(){\r\n        require(msg.sender == _owner, \"Not an admin\");\r\n        _;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n    \r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n      public\r\n      view\r\n      returns (uint256)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(!_notransferible[from], \"No authorized ejecutor\");\r\n        require(value <= _balances[from], \"Not enough balance\");\r\n        require(to != address(0), \"Invalid account\");\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n    \r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0), \"Invalid account\");\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n      public\r\n      returns (bool)\r\n    {   \r\n        require(value <= _allowed[from][msg.sender], \"Not enough approved ammount\");\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    )\r\n      public\r\n      returns (bool)\r\n    {\r\n        require(spender != address(0), \"Invalid account\");\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    )\r\n      public\r\n      returns (bool)\r\n    {\r\n        require(spender != address(0), \"Invalid account\");\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != 0, \"Invalid account\");\r\n        require(value <= _balances[account], \"Not enough balance\");\r\n\r\n        totalSupply = totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        require(value <= _allowed[account][msg.sender], \"No enough approved ammount\");\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n    }\r\n\r\n    function setTransferible(address admin, address sujeto, bool state) public returns (bool) {\r\n        require(_administradores[admin], \"Not an admin\");\r\n        _notransferible[sujeto] = state;\r\n        return true;\r\n    }\r\n\r\n    function setNewAdmin(address admin)public OnlyOwner returns(bool){\r\n        _administradores[admin] = true;\r\n        return true;\r\n    }  \r\n\r\n}\r\n\r\nlibrary SafeMundicoin {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    function safeSetTransferible(\r\n        Mundicoin token,\r\n        address authorizer,\r\n        address to,\r\n        bool state\r\n    )\r\n        internal\r\n    {\r\n        require(token.setTransferible(authorizer, to, state));\r\n    }\r\n\r\n    function safeTransfer(\r\n        Mundicoin token,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        Mundicoin token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(\r\n        Mundicoin token,\r\n        address spender,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        Mundicoin token,\r\n        address spender,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        Mundicoin token,\r\n        address spender,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n\r\npragma solidity ^0.4.24;\r\ncontract ReentradaProteccion {\r\n\r\n    uint256 private _guardCounter;\r\n    constructor() public {\r\n        // Inicia en 1 para ahorrar gas\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"No double\");\r\n    }\r\n\r\n}\r\n\r\ncontract Venta is ReentradaProteccion{\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _contributions;\r\n    mapping(uint => address[]) private _contributors;\r\n    uint128 public _campaign;\r\n    bool private _state;\r\n    address private _custodian;\r\n    address private _owner;\r\n    uint256 private _rate;\r\n    uint256 private _weiRaised;\r\n    using SafeMundicoin for Mundicoin;\r\n    Mundicoin private _token;\r\n    \r\n    event TokensPurchased(\r\n      address indexed purchaser,\r\n      address indexed beneficiary,\r\n      uint256 value,\r\n      uint256 amount\r\n    );\r\n    \r\n    constructor(Mundicoin token) public {\r\n        require(token != address(0),\"Invalid address\");\r\n        _token = token;\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    modifier OnlyOwner(){\r\n        require(msg.sender == _owner, \"Not an admin\");\r\n        _;\r\n    }\r\n    \r\n    function setCampaign(uint256 rate, uint128 campaign, bool state) public OnlyOwner returns(bool){\r\n        require(rate > 0, \"Invalid rate\");\r\n        _rate = rate;\r\n        _campaign = campaign;\r\n        _state = state;\r\n        return true;\r\n    }\r\n\r\n    function getRate() public view returns(uint256){\r\n        return _rate;\r\n    }\r\n    \r\n    function updateCustodian(address custodian) public OnlyOwner returns(bool) {\r\n        require(custodian != address(0), \"invalid address\");\r\n        _custodian = custodian;\r\n        return true;\r\n    }\r\n    \r\n    function getCustodian()public view OnlyOwner returns(address){\r\n        return _custodian;\r\n    }\r\n    \r\n    function getOwner()public view returns(address){\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n    \r\n    function buyTokens(address beneficiary) public nonReentrant payable {\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        _processPurchase(beneficiary, tokens);\r\n        emit TokensPurchased(\r\n            msg.sender,\r\n            beneficiary,\r\n            weiAmount,\r\n            tokens\r\n        );\r\n        _updatePurchasingState(this, beneficiary, weiAmount);\r\n        _forwardFunds();\r\n\r\n    }\r\n   \r\n    function _preValidatePurchase(\r\n        address beneficiary,\r\n        uint256 weiAmount\r\n    )\r\n      internal\r\n      pure\r\n    {\r\n        require(beneficiary != address(0), \"Invalid address\");\r\n        require(weiAmount != 0, \"Invalid ammount\");\r\n    }\r\n\r\n    function _deliverTokens(\r\n        address beneficiary,\r\n        uint256 tokenAmount\r\n    )\r\n      internal\r\n    {  \r\n        _token.safeTransfer(beneficiary, tokenAmount);\r\n    }\r\n\r\n    function _processPurchase(\r\n        address beneficiary,\r\n        uint256 tokenAmount\r\n    )\r\n      internal\r\n    {\r\n        _deliverTokens(beneficiary, tokenAmount);\r\n    }\r\n\r\n    function _updatePurchasingState(\r\n        address ejecutor,\r\n        address beneficiary,\r\n        uint256 weiAmount\r\n    )\r\n      internal\r\n    {\r\n        _contributions[beneficiary] = _contributions[beneficiary].add(\r\n        weiAmount);\r\n        _contributors[_campaign].push(beneficiary);\r\n        _token.safeSetTransferible(ejecutor, beneficiary, _state);\r\n    }\r\n\r\n    function _getTokenAmount(uint256 weiAmount)\r\n      internal view returns (uint256)\r\n    {\r\n        return weiAmount.div(_rate);\r\n    }\r\n\r\n    function _forwardFunds() internal {\r\n        _custodian.transfer(msg.value);\r\n    }\r\n\r\n    function getContribution(address beneficiary)\r\n        public view returns (uint256)\r\n    {\r\n        return _contributions[beneficiary];\r\n    }\r\n\r\n    function freedom(bool state, uint campaign) \r\n        public OnlyOwner returns(bool)\r\n    {\r\n        address[] memory array = _contributors[campaign];\r\n        uint256 n = array.length;\r\n\r\n        for(uint256 i = 0; i < n; i++ ){\r\n            _token.safeSetTransferible(this, array[i], state);\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"},{\"name\":\"campaign\",\"type\":\"uint256\"}],\"name\":\"freedom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"custodian\",\"type\":\"address\"}],\"name\":\"updateCustodian\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"campaign\",\"type\":\"uint128\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_campaign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCustodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]","ContractName":"Venta","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a53e261b20b6cd828082c735cb2eabbf74b96fa6","Library":"","SwarmSource":"bzzr://d8835a569770b3a54e7e0e628f6735f62f7238e55b62fb16d9a6cd3ea97a5e7d"}]}