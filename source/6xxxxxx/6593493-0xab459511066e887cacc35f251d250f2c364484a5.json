{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n/*\r\n* ---How to use:\r\n*\t1. Send from ETH wallet to the smart contract address any amount ETH.\r\n*\t2a. Claim your profit by sending 0 ether transaction (1 time per 12 hour)\r\n*\tOR\r\n*\t2b. Send more ether to reinvest AND get your profit\r\n*\t2c. If you hold, the percentage grows\r\n*\t3. If you earn more than 150%, you can withdraw only one finish time\r\n*\t4. If you want withdraw invested, send 0.00000911 ether\r\n*   5. Max invest 25 ETH per 12 hours\r\n*   6. Withdraw and deposit no more 1 time per 12 hour\r\n*\r\n*\tRECOMMENDED GAS LIMIT: 150000\r\n*\tRECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n*\t\r\n*\tTHE PROJECT HAS HIGH RISKS! \r\n*\tPROJECT PAYS IF BALANCE HAS ETHER!\r\n*/\r\n\r\ncontract HodlETH {\r\n    //use library for safe math operations\r\n    using SafeMath for uint;\r\n    \r\n    // records amount of invest\r\n    mapping (address => uint) public userInvested;\r\n    // records time of payment\r\n    mapping (address => uint) public entryTime;\r\n    // records withdrawal amount\r\n    mapping (address => uint) public withdrawAmount;\r\n    // records you use the referral program or not\r\n    mapping (address => uint) public referrerOn;\r\n    // advertising fund 6%\r\n    address advertisingFund = 0x9348739Fb4BA75fB316D3C01B9a89AbeB683162b; \r\n    uint public advertisingPercent = 6;\r\n\t// tech support fund 2 %\r\n\taddress techSupportFund = 0xC52d419a8cCD8b57586b67B668635faA1931e443;\t\t\r\n\tuint public techSupportPercent = 2;\r\n\t// \"hodl\" mode\r\n    uint public startPercent = 100;\t\t\t// 2.4%\tper day\t\tor \t0.1% \tper hours\r\n\tuint public fiveDayHodlPercent = 125;\t// 3%\tper day\t\tor \t0.125% \tper hours\r\n    uint public tenDayHodlPercent = 150;\t// 3.6%\tper day\t\tor \t0.155\tper hours\r\n\tuint public twentyDayHodlPercent = 200;\t// 4.8%\tper day\t\tor \t0.2%\tper hours\r\n\t// bonus percent of balance\r\n\tuint public lowBalance = 500 ether;\r\n\tuint public middleBalance = 2000 ether;\r\n\tuint public highBalance = 3500 ether;\r\n    uint public soLowBalanceBonus = 25;\t\t// 0.6%\tper day\t\tor \t0.025% \tper hours\r\n\tuint public lowBalanceBonus = 50;\t\t// 1.2%\tper day\t\tor \t0.05%\tper hours\r\n\tuint public middleBalanceBonus = 75;\t// 1.8%\tper day\t\tor \t0.075%\tper hours\r\n\tuint public highBalanceBonus = 100;\t\t// 2.4%\tper day\t\tor \t0.1%\tper hours\r\n\r\n\tuint public countOfInvestors = 0;\r\n\t\r\n    \r\n    // get bonus percent\r\n    function _bonusPercent() public view returns(uint){\r\n        \r\n        uint balance = address(this).balance;\r\n        \r\n        if (balance < lowBalance){\r\n            return (soLowBalanceBonus);\t\t// if balance less 500 ether, rate 0.6% per days\r\n        } \r\n        if (balance > lowBalance && balance < middleBalance){\r\n            return (lowBalanceBonus); \t\t// if balance more 500 ether, rate 1.2% per days\r\n        } \r\n        if (balance > middleBalance && balance < highBalance){\r\n            return (middleBalanceBonus); \t// if balance more 2000 ether, rate 1.8% per days\r\n        }\r\n        if (balance > highBalance){\r\n            return (highBalanceBonus);\t\t// if balance more 3500 ether, rate 2.4% per days\r\n        }\r\n    }\r\n    \r\n    // get personal percent\r\n    function _personalPercent() public view returns(uint){\r\n        // how many days you hold\r\n        uint hodl = (now).sub(entryTime[msg.sender]); \r\n\t\t\r\n         if (hodl < 5 days){\r\n            return (startPercent);\t\t\t// if you don't withdraw less 5 day, your rate 2.4% per days\r\n        }\r\n\t\tif (hodl > 5 days && hodl < 10 days){\r\n            return (fiveDayHodlPercent);\t// if you don't withdraw more 5 day , your rate 3% per days\r\n        }\r\n        if (hodl > 10 days && hodl < 20 days){\r\n            return (tenDayHodlPercent);\t\t// if you don't withdraw more 10 day , your rate 3.6% per days\r\n        }\r\n\t\tif (hodl > 20 days){\r\n            return (twentyDayHodlPercent);\t// if you don't withdraw more 20 day, your rate 4.8% per days\r\n        }\r\n    }\r\n    \r\n    // if send 0.00000911 ETH contract will return your invest, else make invest\r\n    function() external payable {\r\n        if (msg.value == 0.00000911 ether) {\r\n            returnInvestment();\r\n        } \r\n\t\telse {\r\n            invest();\r\n        }\r\n    }    \r\n    \r\n   // return of deposit(userInvested - withdrawAmount - (userInvested / 10(fund fee)) , after delete user\r\n    function returnInvestment() timeWithdraw private{\r\n        if(userInvested[msg.sender] > 0){\r\n            uint refundAmount = userInvested[msg.sender].sub(withdrawAmount[msg.sender]).sub(userInvested[msg.sender].div(10));\r\n            require(userInvested[msg.sender] > refundAmount, 'You have already returned the investment');\r\n\t\t\tuserInvested[msg.sender] = 0;\r\n            entryTime[msg.sender] = 0;\r\n            withdrawAmount[msg.sender] = 0;\r\n            msg.sender.transfer(refundAmount);\r\n        }\r\n    }\r\n    // make invest\r\n    function invest() timeWithdraw maxInvest  private {\r\n\t\tif (userInvested[msg.sender] == 0) {\r\n                countOfInvestors += 1;\r\n            }\r\n            \r\n\t\tif (msg.value > 0 ){\r\n\t\t\t// call terminal    \r\n\t\t\tterminal();\r\n\t\t\t// record invested amount (msg.value) of this transaction\r\n\t\t\tuserInvested[msg.sender] += msg.value;\r\n\t\t\t// record entry time\r\n\t\t\tentryTime[msg.sender] = now;\r\n\t\t\t// sending fee for advertising and tech support\r\n\t\t\tadvertisingFund.transfer((msg.value).mul(advertisingPercent).div(100));\r\n\t\t\ttechSupportFund.transfer((msg.value).mul(techSupportPercent).div(100));\r\n        \r\n\t\t\t// if you entered the address that invited you and didnâ€™t do this before\r\n\t\t\tif (msg.data.length != 0 && referrerOn[msg.sender] != 1){\r\n\t\t\t\t//pays his bonus\r\n\t\t\t\ttransferRefBonus();\r\n\t\t\t}\r\n        } else{\r\n\t\t\t// call terminal  \r\n            terminal();\r\n        }\r\n    }\r\n    \r\n    function terminal() internal {\r\n        // if the user received 150% or more of his contribution, delete  user\r\n        if (userInvested[msg.sender].mul(15).div(10) < withdrawAmount[msg.sender]){\r\n            userInvested[msg.sender] = 0;\r\n            entryTime[msg.sender] = 0;\r\n            withdrawAmount[msg.sender] = 0;\r\n        } else {\r\n            // you percent = bonusPercent + personalPercent, min 3% and max 7.2% per day or min 0.125% and max 0.3% per hours\r\n            uint bonusPercent = _bonusPercent();\r\n            uint personalPercent = _personalPercent();\r\n            uint percent = (bonusPercent).add(personalPercent);\r\n            // calculate profit amount as such:\r\n            // amount = (amount invested) * you percent / 100000 * ((now - your entry time) / 1 hour)\r\n            uint amount = userInvested[msg.sender].mul(percent).div(100000).mul(((now).sub(entryTime[msg.sender])).div(1 hours));\r\n            // record entry time\r\n            entryTime[msg.sender] = now;\r\n            // record withdraw amount\r\n            withdrawAmount[msg.sender] += amount;\r\n            // send calculated amount of ether directly to sender (aka YOU)\r\n            msg.sender.transfer(amount);\r\n        }\r\n        \r\n    }\r\n    \r\n    // convert bytes to eth address \r\n\tfunction bytesToAddress(bytes bys) private pure returns (address addr) {\r\n\t\tassembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n\t}\r\n\t// transfer referrer bonus of invested \r\n    function transferRefBonus() private {        \r\n        address referrer = bytesToAddress(msg.data);\r\n        if (referrer != msg.sender && userInvested[referrer] != 0){\r\n        //referrer ON\r\n\t\treferrerOn[msg.sender] = 1;\r\n\t\t//transfer to referrer 2 % of invested\r\n        uint refBonus = (msg.value).mul(2).div(100);\r\n        referrer.transfer(refBonus);    \r\n        }\r\n    }\r\n    \r\n    modifier timeWithdraw(){\r\n        require(entryTime[msg.sender].add(12 hours) <= now, 'Withdraw and deposit no more 1 time per 12 hour');\r\n        _;\r\n    }\r\n    \r\n    \r\n    modifier maxInvest(){\r\n        require(msg.value <= 25 ether, 'Max invest 25 ETH per 12 hours');\r\n        _;\r\n    }\r\n\r\n}\r\n\t\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"middleBalanceBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tenDayHodlPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"middleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soLowBalanceBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"entryTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highBalanceBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertisingPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"techSupportPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowBalanceBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerOn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_bonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiveDayHodlPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twentyDayHodlPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_personalPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"HodlETH","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8b2d31eac00c88a93ea9a703c1544e0195ae626fe8f5b9c03c7b341a4e8684e6"}]}