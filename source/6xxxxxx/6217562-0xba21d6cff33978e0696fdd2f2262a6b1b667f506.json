{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// 😀😀😀😀😀😀😀😀😀😀😀😀😀😀\r\n// 😀                            😀\r\n// 😀 https://emojisan.github.io 😀\r\n// 😀                            😀\r\n// 😀😀😀😀😀😀😀😀😀😀😀😀😀😀\r\n\r\n// part of NFT token interface used in this contract\r\n// https://etherscan.io/address/0xE3f2F807ba194ea0221B9109fb14Da600C9e1eb6\r\ninterface Emojisan {\r\n\r\n    function ownerOf(uint tokenId) external view returns (address);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function transferFrom(address from, address to, uint tokenId) external;\r\n    function mint(uint tokenId) external;\r\n    function setMinter(address newMinter) external;\r\n}\r\n\r\ncontract EmojisanAuctionHouse {\r\n\r\n    event Bid(uint indexed tokenId);\r\n\r\n    struct Auction {\r\n        address owner;\r\n        uint128 currentPrice;\r\n    }\r\n\r\n    struct User {\r\n        uint128 balance;\r\n        uint32 bidBlock;\r\n    }\r\n\r\n    // NFT token address\r\n    // https://etherscan.io/address/0xE3f2F807ba194ea0221B9109fb14Da600C9e1eb6\r\n    Emojisan public constant emojisan = Emojisan(0xE3f2F807ba194ea0221B9109fb14Da600C9e1eb6);\r\n\r\n    uint[] public tokenByIndex;\r\n    mapping (uint => Auction) public auction;\r\n    mapping (address => User) public user;\r\n    uint32 private constant auctionTime = 20000;\r\n\r\n    address public whaleAddress;\r\n    uint32 public whaleStartTime;\r\n    uint128 public whaleBalance;\r\n    uint32 private constant whaleWithdrawDelay = 80000;\r\n\r\n    uint128 public ownerBalance;\r\n    uint private constant ownerTokenId = 128512;\r\n\r\n    function tokens() external view returns (uint[]) {\r\n        return tokenByIndex;\r\n    }\r\n\r\n    function tokensCount() external view returns (uint) {\r\n        return tokenByIndex.length;\r\n    }\r\n\r\n    function wantItForFree(uint tokenId) external {\r\n        // user 👤 can bid only on one 1️⃣ token at a time ⏱️\r\n        require(block.number >= user[msg.sender].bidBlock + auctionTime);\r\n        // check auction has not started 🚫🎬\r\n        require(auction[tokenId].owner == address(this));\r\n        auction[tokenId].owner = msg.sender;\r\n        user[msg.sender].bidBlock = uint32(block.number);\r\n        emojisan.mint(tokenId);\r\n        emit Bid(tokenId);\r\n    }\r\n\r\n    function wantItMoreThanYou(uint tokenId) external payable {\r\n        // user 👤 can bid only on one 1️⃣ token at a time ⏱️\r\n        require(block.number >= user[msg.sender].bidBlock + auctionTime);\r\n        // check auction has not finished 🚫🏁\r\n        address previousOwner = auction[tokenId].owner;\r\n        require(block.number < user[previousOwner].bidBlock + auctionTime);\r\n        // fancy 🧐 price 💰 calculation 📈\r\n        // 0 ➡️ 0.002 ➡️ 0.004 ➡️ 0.008 ➡️ 0.016 ➡️ 0.032 ➡️ 0.064 ➡️ 0.128\r\n        // ➡️ 0.256 ➡️ 0.512 ➡️ 1 ➡️ 1.5 ➡️ 2 ➡️ 2.5 ➡️ 3 ➡️ 3.5 ➡️ 4 ➡️ ...\r\n        uint128 previousPrice = auction[tokenId].currentPrice;\r\n        uint128 price;\r\n        if (previousPrice == 0) {\r\n            price = 2 finney;\r\n        } else if (previousPrice < 500 finney) {\r\n            price = 2 * previousPrice;\r\n        } else {\r\n            price = (previousPrice + 500 finney) / 500 finney * 500 finney;\r\n        }\r\n        require(msg.value >= price);\r\n        uint128 priceDiff = price - previousPrice;\r\n        // previous 👤 gets what she 🙆 paid ➕ 2️⃣5️⃣%\r\n        user[previousOwner] = User({\r\n            balance: previousPrice + priceDiff / 4,\r\n            bidBlock: 0\r\n        });\r\n        // whale 🐋 gets 5️⃣0️⃣%\r\n        whaleBalance += priceDiff / 2;\r\n        // owner 👩 of token 128512 😀 gets 2️⃣5️⃣%\r\n        ownerBalance += priceDiff / 4;\r\n        auction[tokenId] = Auction({\r\n            owner: msg.sender,\r\n            currentPrice: price\r\n        });\r\n        user[msg.sender].bidBlock = uint32(block.number);\r\n        if (msg.value > price) {\r\n            // send back eth if someone sent too much 💸💸💸\r\n            msg.sender.transfer(msg.value - price);\r\n        }\r\n        emit Bid(tokenId);\r\n    }\r\n\r\n    function wantMyToken(uint tokenId) external {\r\n        Auction memory a = auction[tokenId];\r\n        // check auction has finished 🏁\r\n        require(block.number >= user[a.owner].bidBlock + auctionTime);\r\n        emojisan.transferFrom(this, a.owner, tokenId);\r\n    }\r\n\r\n    function wantMyEther() external {\r\n        uint amount = user[msg.sender].balance;\r\n        user[msg.sender].balance = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function wantToBeWhale() external {\r\n        // need to have more tokens 💰 than current 🐋\r\n        require(emojisan.balanceOf(msg.sender) > emojisan.balanceOf(whaleAddress));\r\n        whaleAddress = msg.sender;\r\n        // whale 🐳 needs to wait some time ⏱️ before snatching that sweet 🍬 eth 🤑\r\n        whaleStartTime = uint32(block.number);\r\n    }\r\n\r\n    function whaleWantMyEther() external {\r\n        require(msg.sender == whaleAddress);\r\n        // check enough time ⏱️ passed for whale 🐳 to grab 💵💷💶💴\r\n        require(block.number >= whaleStartTime + whaleWithdrawDelay);\r\n        // whale 🐳 needs to wait some time ⏱️ before snatching that sweet 🍭 eth 🤑 again\r\n        whaleStartTime = uint32(block.number);\r\n        uint amount = whaleBalance;\r\n        whaleBalance = 0;\r\n        whaleAddress.transfer(amount);\r\n    }\r\n\r\n    function ownerWantMyEther() external {\r\n        uint amount = ownerBalance;\r\n        ownerBalance = 0;\r\n        emojisan.ownerOf(ownerTokenId).transfer(amount);\r\n    }\r\n\r\n    function wantNewTokens(uint[] tokenIds) external {\r\n        // only owner 👩 of token 128512 😀\r\n        require(msg.sender == emojisan.ownerOf(ownerTokenId));\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            auction[tokenIds[i]].owner = this;\r\n            tokenByIndex.push(tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function wantNewMinter(address minter) external {\r\n        // only owner 👩 of token 128512 😀\r\n        require(msg.sender == emojisan.ownerOf(ownerTokenId));\r\n        emojisan.setMinter(minter);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auction\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"currentPrice\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"wantNewMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"wantItMoreThanYou\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emojisan\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"whaleWantMyEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"wantToBeWhale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"wantNewTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint128\"},{\"name\":\"bidBlock\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"wantItForFree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"wantMyEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"wantMyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWantMyEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"}]","ContractName":"EmojisanAuctionHouse","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b1aab13aeda04c23daea9e5369d1276ad089cef30501523acfb708cbeee5d0c9"}]}