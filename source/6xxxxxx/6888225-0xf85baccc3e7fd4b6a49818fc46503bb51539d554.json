{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n    Copyright 2018 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.4.24;\r\npragma experimental \"v0.5.0\";\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/external/Maker/Oasis/ISimpleMarketV1.sol\r\n\r\ncontract ISimpleMarketV1 {\r\n\r\n    // ============ Structs ================\r\n\r\n    struct OfferInfo {\r\n        uint256 pay_amt;\r\n        address pay_gem;\r\n        uint256 buy_amt;\r\n        address buy_gem;\r\n        address owner;\r\n        uint64 timestamp;\r\n    }\r\n\r\n    // ============ Storage ================\r\n\r\n    uint256 public last_offer_id;\r\n\r\n    mapping (uint256 => OfferInfo) public offers;\r\n\r\n    // ============ Functions ================\r\n\r\n    function isActive(\r\n        uint256 id\r\n    )\r\n        public\r\n        view\r\n        returns (bool active );\r\n\r\n    function getOwner(\r\n        uint256 id\r\n    )\r\n        public\r\n        view\r\n        returns (address owner);\r\n\r\n    function getOffer(\r\n        uint256 id\r\n    )\r\n        public\r\n        view\r\n        returns (uint, address, uint, address);\r\n\r\n    function bump(\r\n        bytes32 id_\r\n    )\r\n        public;\r\n\r\n    function buy(\r\n        uint256 id,\r\n        uint256 quantity\r\n    )\r\n        public\r\n        returns (bool);\r\n\r\n    function cancel(\r\n        uint256 id\r\n    )\r\n        public\r\n        returns (bool success);\r\n\r\n    function kill(\r\n        bytes32 id\r\n    )\r\n        public;\r\n\r\n    function make(\r\n        address  pay_gem,\r\n        address  buy_gem,\r\n        uint128  pay_amt,\r\n        uint128  buy_amt\r\n    )\r\n        public\r\n        returns (bytes32 id);\r\n\r\n    function offer(\r\n        uint256 pay_amt,\r\n        address pay_gem,\r\n        uint256 buy_amt,\r\n        address buy_gem\r\n    )\r\n        public\r\n        returns (uint256 id);\r\n\r\n    function take(\r\n        bytes32 id,\r\n        uint128 maxTakeAmount\r\n    )\r\n        public;\r\n}\r\n\r\n// File: contracts/lib/MathHelpers.sol\r\n\r\n/**\r\n * @title MathHelpers\r\n * @author dYdX\r\n *\r\n * This library helps with common math functions in Solidity\r\n */\r\nlibrary MathHelpers {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * Calculates partial value given a numerator and denominator.\r\n     *\r\n     * @param  numerator    Numerator\r\n     * @param  denominator  Denominator\r\n     * @param  target       Value to calculate partial of\r\n     * @return              target * numerator / denominator\r\n     */\r\n    function getPartialAmount(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 target\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return numerator.mul(target).div(denominator);\r\n    }\r\n\r\n    /**\r\n     * Calculates partial value given a numerator and denominator, rounded up.\r\n     *\r\n     * @param  numerator    Numerator\r\n     * @param  denominator  Denominator\r\n     * @param  target       Value to calculate partial of\r\n     * @return              Rounded-up result of target * numerator / denominator\r\n     */\r\n    function getPartialAmountRoundedUp(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 target\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return divisionRoundedUp(numerator.mul(target), denominator);\r\n    }\r\n\r\n    /**\r\n     * Calculates division given a numerator and denominator, rounded up.\r\n     *\r\n     * @param  numerator    Numerator.\r\n     * @param  denominator  Denominator.\r\n     * @return              Rounded-up result of numerator / denominator\r\n     */\r\n    function divisionRoundedUp(\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        assert(denominator != 0); // coverage-enable-line\r\n        if (numerator == 0) {\r\n            return 0;\r\n        }\r\n        return numerator.sub(1).div(denominator).add(1);\r\n    }\r\n\r\n    /**\r\n     * Calculates and returns the maximum value for a uint256 in solidity\r\n     *\r\n     * @return  The maximum value for uint256\r\n     */\r\n    function maxUint256(\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return 2 ** 256 - 1;\r\n    }\r\n\r\n    /**\r\n     * Calculates and returns the maximum value for a uint256 in solidity\r\n     *\r\n     * @return  The maximum value for uint256\r\n     */\r\n    function maxUint32(\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint32)\r\n    {\r\n        return 2 ** 32 - 1;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of bits in a uint256. That is, the lowest number, x, such that n >> x == 0\r\n     *\r\n     * @param  n  The uint256 to get the number of bits in\r\n     * @return    The number of bits in n\r\n     */\r\n    function getNumBits(\r\n        uint256 n\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 first = 0;\r\n        uint256 last = 256;\r\n        while (first < last) {\r\n            uint256 check = (first + last) / 2;\r\n            if ((n >> check) == 0) {\r\n                last = check;\r\n            } else {\r\n                first = check + 1;\r\n            }\r\n        }\r\n        assert(first <= 256);\r\n        return first;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/GeneralERC20.sol\r\n\r\n/**\r\n * @title GeneralERC20\r\n * @author dYdX\r\n *\r\n * Interface for using ERC20 Tokens. We have to use a special interface to call ERC20 functions so\r\n * that we dont automatically revert when calling non-compliant tokens that have no return value for\r\n * transfer(), transferFrom(), or approve().\r\n */\r\ninterface GeneralERC20 {\r\n    function totalSupply(\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function balanceOf(\r\n        address who\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 value\r\n    )\r\n        external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        external;\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 value\r\n    )\r\n        external;\r\n}\r\n\r\n// File: contracts/lib/TokenInteract.sol\r\n\r\n/**\r\n * @title TokenInteract\r\n * @author dYdX\r\n *\r\n * This library contains basic functions for interacting with ERC20 tokens\r\n */\r\nlibrary TokenInteract {\r\n    function balanceOf(\r\n        address token,\r\n        address owner\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return GeneralERC20(token).balanceOf(owner);\r\n    }\r\n\r\n    function allowance(\r\n        address token,\r\n        address owner,\r\n        address spender\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return GeneralERC20(token).allowance(owner, spender);\r\n    }\r\n\r\n    function approve(\r\n        address token,\r\n        address spender,\r\n        uint256 amount\r\n    )\r\n        internal\r\n    {\r\n        GeneralERC20(token).approve(spender, amount);\r\n\r\n        require(\r\n            checkSuccess(),\r\n            \"TokenInteract#approve: Approval failed\"\r\n        );\r\n    }\r\n\r\n    function transfer(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        internal\r\n    {\r\n        address from = address(this);\r\n        if (\r\n            amount == 0\r\n            || from == to\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        GeneralERC20(token).transfer(to, amount);\r\n\r\n        require(\r\n            checkSuccess(),\r\n            \"TokenInteract#transfer: Transfer failed\"\r\n        );\r\n    }\r\n\r\n    function transferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        internal\r\n    {\r\n        if (\r\n            amount == 0\r\n            || from == to\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        GeneralERC20(token).transferFrom(from, to, amount);\r\n\r\n        require(\r\n            checkSuccess(),\r\n            \"TokenInteract#transferFrom: TransferFrom failed\"\r\n        );\r\n    }\r\n\r\n    // ============ Private Helper-Functions ============\r\n\r\n    /**\r\n     * Checks the return value of the previous function up to 32 bytes. Returns true if the previous\r\n     * function returned 0 bytes or 32 bytes that are not all-zero.\r\n     */\r\n    function checkSuccess(\r\n    )\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        uint256 returnValue = 0;\r\n\r\n        /* solium-disable-next-line security/no-inline-assembly */\r\n        assembly {\r\n            // check number of bytes returned from last function call\r\n            switch returndatasize\r\n\r\n            // no bytes returned: assume success\r\n            case 0x0 {\r\n                returnValue := 1\r\n            }\r\n\r\n            // 32 bytes returned: check if non-zero\r\n            case 0x20 {\r\n                // copy 32 bytes into scratch space\r\n                returndatacopy(0x0, 0x0, 0x20)\r\n\r\n                // load those bytes into returnValue\r\n                returnValue := mload(0x0)\r\n            }\r\n\r\n            // not sure what was returned: dont mark as success\r\n            default { }\r\n        }\r\n\r\n        return returnValue != 0;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/AdvancedTokenInteract.sol\r\n\r\n/**\r\n * @title AdvancedTokenInteract\r\n * @author dYdX\r\n *\r\n * This library contains advanced functions for interacting with ERC20 tokens\r\n */\r\nlibrary AdvancedTokenInteract {\r\n    using TokenInteract for address;\r\n\r\n    /**\r\n     * Checks if the spender has some amount of allowance. If it doesn't, then set allowance at\r\n     * the maximum value.\r\n     *\r\n     * @param  token    Address of the ERC20 token\r\n     * @param  spender  Argument of the allowance function\r\n     * @param  amount   The minimum amount of allownce the the spender should be guaranteed\r\n     */\r\n    function ensureAllowance(\r\n        address token,\r\n        address spender,\r\n        uint256 amount\r\n    )\r\n        internal\r\n    {\r\n        if (token.allowance(address(this), spender) < amount) {\r\n            token.approve(spender, MathHelpers.maxUint256());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/margin/interfaces/ExchangeReader.sol\r\n\r\n/**\r\n * @title ExchangeReader\r\n * @author dYdX\r\n *\r\n * Contract interface that wraps an exchange and provides information about the current state of the\r\n * exchange or particular orders\r\n */\r\ninterface ExchangeReader {\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Get the maxmimum amount of makerToken for some order\r\n     *\r\n     * @param  makerToken           Address of makerToken, the token to receive\r\n     * @param  takerToken           Address of takerToken, the token to pay\r\n     * @param  orderData            Arbitrary bytes data for any information to pass to the exchange\r\n     * @return                      Maximum amount of makerToken\r\n     */\r\n    function getMaxMakerAmount(\r\n        address makerToken,\r\n        address takerToken,\r\n        bytes orderData\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// File: contracts/margin/interfaces/ExchangeWrapper.sol\r\n\r\n/**\r\n * @title ExchangeWrapper\r\n * @author dYdX\r\n *\r\n * Contract interface that Exchange Wrapper smart contracts must implement in order to interface\r\n * with other smart contracts through a common interface.\r\n */\r\ninterface ExchangeWrapper {\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Exchange some amount of takerToken for makerToken.\r\n     *\r\n     * @param  tradeOriginator      Address of the initiator of the trade (however, this value\r\n     *                              cannot always be trusted as it is set at the discretion of the\r\n     *                              msg.sender)\r\n     * @param  receiver             Address to set allowance on once the trade has completed\r\n     * @param  makerToken           Address of makerToken, the token to receive\r\n     * @param  takerToken           Address of takerToken, the token to pay\r\n     * @param  requestedFillAmount  Amount of takerToken being paid\r\n     * @param  orderData            Arbitrary bytes data for any information to pass to the exchange\r\n     * @return                      The amount of makerToken received\r\n     */\r\n    function exchange(\r\n        address tradeOriginator,\r\n        address receiver,\r\n        address makerToken,\r\n        address takerToken,\r\n        uint256 requestedFillAmount,\r\n        bytes orderData\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Get amount of takerToken required to buy a certain amount of makerToken for a given trade.\r\n     * Should match the takerToken amount used in exchangeForAmount. If the order cannot provide\r\n     * exactly desiredMakerToken, then it must return the price to buy the minimum amount greater\r\n     * than desiredMakerToken\r\n     *\r\n     * @param  makerToken         Address of makerToken, the token to receive\r\n     * @param  takerToken         Address of takerToken, the token to pay\r\n     * @param  desiredMakerToken  Amount of makerToken requested\r\n     * @param  orderData          Arbitrary bytes data for any information to pass to the exchange\r\n     * @return                    Amount of takerToken the needed to complete the transaction\r\n     */\r\n    function getExchangeCost(\r\n        address makerToken,\r\n        address takerToken,\r\n        uint256 desiredMakerToken,\r\n        bytes orderData\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// File: contracts/margin/external/exchangewrappers/OasisV2SimpleExchangeWrapper.sol\r\n\r\n/**\r\n * @title OasisV2SimpleExchangeWrapper\r\n * @author dYdX\r\n *\r\n * dYdX ExchangeWrapper to interface with Maker's (Oasis exchange) SimpleMarket or MatchingMarket\r\n * contracts to trade using a specific offer. Since any MatchingMarket is also a SimpleMarket, this\r\n * ExchangeWrapper can also be used for any MatchingMarket.\r\n */\r\ncontract OasisV2SimpleExchangeWrapper is\r\n    ExchangeWrapper,\r\n    ExchangeReader\r\n{\r\n    using SafeMath for uint256;\r\n    using TokenInteract for address;\r\n    using AdvancedTokenInteract for address;\r\n\r\n    // ============ Structs ============\r\n\r\n    struct Offer {\r\n        uint256 makerAmount;\r\n        address makerToken;\r\n        uint256 takerAmount;\r\n        address takerToken;\r\n    }\r\n\r\n    // ============ State Variables ============\r\n\r\n    address public SIMPLE_MARKET;\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor(\r\n        address simpleMarket\r\n    )\r\n        public\r\n    {\r\n        SIMPLE_MARKET = simpleMarket;\r\n    }\r\n\r\n    // ============ Public Functions ============\r\n\r\n    function exchange(\r\n        address /*tradeOriginator*/,\r\n        address receiver,\r\n        address makerToken,\r\n        address takerToken,\r\n        uint256 requestedFillAmount,\r\n        bytes orderData\r\n    )\r\n        external\r\n        returns (uint256)\r\n    {\r\n        ISimpleMarketV1 market = ISimpleMarketV1(SIMPLE_MARKET);\r\n        uint256 offerId = bytesToOfferId(orderData);\r\n        Offer memory offer = getOffer(market, offerId);\r\n\r\n        // make sure offer is for the correct tokens\r\n        verifyOfferTokens(offer, makerToken, takerToken);\r\n\r\n        // calculate maximum amount of makerToken to receive given requestedFillAmount\r\n        uint256 makerAmount = getInversePartialAmount(\r\n            offer.takerAmount,\r\n            offer.makerAmount,\r\n            requestedFillAmount\r\n        );\r\n\r\n        // make sure offer is fillable\r\n        verifyOfferAmount(offer, makerAmount);\r\n\r\n        // make sure that the exchange can take the tokens from this contract\r\n        takerToken.ensureAllowance(address(market), requestedFillAmount);\r\n\r\n        // do the exchange. take() is either successful or reverts\r\n        assert(makerAmount == uint128(makerAmount));\r\n        market.take(bytes32(offerId), uint128(makerAmount));\r\n\r\n        // set allowance for the receiver\r\n        makerToken.ensureAllowance(receiver, makerAmount);\r\n\r\n        return makerAmount;\r\n    }\r\n\r\n    function getExchangeCost(\r\n        address makerToken,\r\n        address takerToken,\r\n        uint256 desiredMakerToken,\r\n        bytes orderData\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        ISimpleMarketV1 market = ISimpleMarketV1(SIMPLE_MARKET);\r\n        Offer memory offer = getOffer(market, bytesToOfferId(orderData));\r\n        verifyOfferTokens(offer, makerToken, takerToken);\r\n        verifyOfferAmount(offer, desiredMakerToken);\r\n\r\n        // return takerToken cost of desiredMakerToken\r\n        return MathHelpers.getPartialAmount(\r\n            desiredMakerToken,\r\n            offer.makerAmount,\r\n            offer.takerAmount\r\n        );\r\n    }\r\n\r\n    function getMaxMakerAmount(\r\n        address makerToken,\r\n        address takerToken,\r\n        bytes orderData\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        ISimpleMarketV1 market = ISimpleMarketV1(SIMPLE_MARKET);\r\n        Offer memory offer = getOffer(market, bytesToOfferId(orderData));\r\n        verifyOfferTokens(offer, makerToken, takerToken);\r\n\r\n        return offer.makerAmount;\r\n    }\r\n\r\n    // ============ Private Functions ============\r\n\r\n    /**\r\n     * Calculate the greatest target amount that can be passed into getPartialAmount such that a\r\n     * certain result is achieved.\r\n     *\r\n     * @param  numerator    The numerator of the getPartialAmount function\r\n     * @param  denominator  The denominator of the getPartialAmount function\r\n     * @param  result       The result of the getPartialAmount function\r\n     * @return              The largest value of target such that the result is achieved\r\n     */\r\n    function getInversePartialAmount(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 result\r\n    )\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 temp = result.add(1).mul(denominator);\r\n        uint256 target = temp.div(numerator);\r\n\r\n        if (target.mul(numerator) == temp) {\r\n            target = target.sub(1);\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    function getOffer(\r\n        ISimpleMarketV1 market,\r\n        uint256 offerId\r\n    )\r\n        private\r\n        view\r\n        returns (Offer memory)\r\n    {\r\n        (\r\n            uint256 makerAmount,\r\n            address makerToken,\r\n            uint256 takerAmount,\r\n            address takerToken\r\n        ) = market.getOffer(offerId);\r\n\r\n        return Offer({\r\n            makerAmount: makerAmount,\r\n            makerToken: makerToken,\r\n            takerAmount: takerAmount,\r\n            takerToken: takerToken\r\n        });\r\n    }\r\n\r\n    function verifyOfferTokens(\r\n        Offer memory offer,\r\n        address makerToken,\r\n        address takerToken\r\n    )\r\n        private\r\n        pure\r\n    {\r\n        require(\r\n            offer.makerToken != address(0),\r\n            \"OasisV2SimpleExchangeWrapper#verifyOfferTokens: offer does not exist\"\r\n        );\r\n        require(\r\n            makerToken == offer.makerToken,\r\n            \"OasisV2SimpleExchangeWrapper#verifyOfferTokens: makerToken mismatch\"\r\n        );\r\n        require(\r\n            takerToken == offer.takerToken,\r\n            \"OasisV2SimpleExchangeWrapper#verifyOfferTokens: takerToken mismatch\"\r\n        );\r\n    }\r\n\r\n    function verifyOfferAmount(\r\n        Offer memory offer,\r\n        uint256 fillAmount\r\n    )\r\n        private\r\n        pure\r\n    {\r\n        require(\r\n            fillAmount != 0,\r\n            \"OasisV2SimpleExchangeWrapper#verifyOfferAmount: cannot trade zero makerAmount\"\r\n        );\r\n        require(\r\n            fillAmount <= offer.makerAmount,\r\n            \"OasisV2SimpleExchangeWrapper#verifyOfferAmount: offer is not large enough\"\r\n        );\r\n        uint256 spend = MathHelpers.getPartialAmount(\r\n            fillAmount,\r\n            offer.makerAmount,\r\n            offer.takerAmount\r\n        );\r\n        require(\r\n            spend != 0,\r\n            \"OasisV2SimpleExchangeWrapper#verifyOfferAmount: cannot trade zero takerAmount\"\r\n        );\r\n    }\r\n\r\n    function bytesToOfferId(\r\n        bytes orderData\r\n    )\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            orderData.length == 32,\r\n            \"OasisV2SimpleExchangeWrapper:#bytesToOfferId: invalid orderData\"\r\n        );\r\n\r\n        uint256 offerId;\r\n\r\n        /* solium-disable-next-line security/no-inline-assembly */\r\n        assembly {\r\n            offerId := mload(add(orderData, 32))\r\n        }\r\n\r\n        return offerId;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"makerToken\",\"type\":\"address\"},{\"name\":\"takerToken\",\"type\":\"address\"},{\"name\":\"desiredMakerToken\",\"type\":\"uint256\"},{\"name\":\"orderData\",\"type\":\"bytes\"}],\"name\":\"getExchangeCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"makerToken\",\"type\":\"address\"},{\"name\":\"takerToken\",\"type\":\"address\"},{\"name\":\"orderData\",\"type\":\"bytes\"}],\"name\":\"getMaxMakerAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"makerToken\",\"type\":\"address\"},{\"name\":\"takerToken\",\"type\":\"address\"},{\"name\":\"requestedFillAmount\",\"type\":\"uint256\"},{\"name\":\"orderData\",\"type\":\"bytes\"}],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIMPLE_MARKET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"simpleMarket\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"OasisV2SimpleExchangeWrapper","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000b7ac09c2c0217b07d7c103029b4918a2c401eecb","Library":"","SwarmSource":"bzzr://f39d34c5fb8982fded9ba751ba981854fc3bea50c906ab58e09fc83b5d6bf791"}]}