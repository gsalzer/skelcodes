{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n        return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract INFLIVERC20 {\r\n    function totalSupply() public view returns (uint total_Supply);\r\n    function balanceOf (address who) public view returns (uint256);\r\n    function allowance (address IFVOwner, address spender) public view returns (uint);\r\n    function transferFrom (address from, address to, uint value) public returns (bool ok);\r\n    function approve (address spender, uint value) public returns (bool ok);\r\n    function transfer (address to, uint value) public returns (bool ok);\r\n    event    Transfer (address indexed from, address indexed to, uint value);\r\n    event    Approval (address indexed IFVOwner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract INFLIV is INFLIVERC20 { \r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string  public constant name        = \"INFLIV\";                             // Name of the token\r\n    string  public constant symbol      = \"IFV\";                                // Symbol of token\r\n    uint8   public constant decimals    = 18;\r\n    \r\n    uint    public _totalsupply         = 70000000 * 10 ** 18;                  // 70 million Total Supply\r\n    uint256 maxPublicSale               = 22000000 * 10 ** 18;                  // 22 million Public Sale\r\n                                   \r\n    uint256 public PricePre             = 6000;                                 // 1 Ether = 6000 tokens in Pre-ICO\r\n    uint256 public PriceICO1            = 3800;                                 // 1 Ether = 3800 tokens in ICO Phase 1\r\n    uint256 public PriceICO2            = 2600;                                 // 1 Ether = 2600 tokens in ICO Phase 2\r\n    uint256 public PublicPrice          = 1800;                                 // 1 Ether = 1800 tokens in Public Sale\r\n    uint256 public PreStartTimeStamp;\r\n    uint256 public PreEndTimeStamp;\r\n    uint256 input_token;\r\n    uint256 bonus_token;\r\n    uint256 total_token;\r\n    uint256 ICO1;\r\n    uint256 ICO2;\r\n    uint256 public ETHReceived;                                                 // Total ETH received in the contract\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping(address => uint)) allowed;\r\n    \r\n    address public IFVOwner;                                                    // Owner of this contract\r\n    bool stopped = false;\r\n\r\n    enum CurrentStages {\r\n        NOTSTARTED,\r\n        PRE,\r\n        ICO,\r\n        PAUSED,\r\n        ENDED\r\n    }\r\n    \r\n    CurrentStages public stage;\r\n    \r\n    modifier atStage(CurrentStages _stage) {\r\n        if (stage != _stage)\r\n            // Contract not in expected state\r\n            revert();\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        if (msg.sender != IFVOwner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function INFLIV() public {\r\n        IFVOwner            = msg.sender;\r\n        balances[IFVOwner]  = 48000000 * 10 ** 18;                              // 28 million to owner & 20 million to referral bonus\r\n        balances[address(this)] = maxPublicSale;\r\n        stage               = CurrentStages.NOTSTARTED;\r\n        Transfer (0, IFVOwner, balances[IFVOwner]);\r\n        Transfer (0, address(this), balances[address(this)]);\r\n    }\r\n  \r\n    function () public payable {\r\n        require(stage != CurrentStages.ENDED);\r\n        require(!stopped && msg.sender != IFVOwner);\r\n            if(stage == CurrentStages.PRE && now <= PreEndTimeStamp) { \r\n                    require (ETHReceived <= 1500 ether);                        // Hardcap\r\n                    ETHReceived     = (ETHReceived).add(msg.value);\r\n                    input_token     = ((msg.value).mul(PricePre)); \r\n                    bonus_token     = ((input_token).mul(50)).div(100);         // 50% bonus in Pre-ICO\r\n                    total_token     = input_token + bonus_token;\r\n                    transferTokens (msg.sender, total_token);\r\n            }\r\n            else if (now <= ICO2) {\r\n                    \r\n                if(now < ICO1)\r\n                {\r\n                    input_token     = (msg.value).mul(PriceICO1);\r\n                    bonus_token     = ((input_token).mul(25)).div(100);         // 25% bonus in ICO Phase 1\r\n                    total_token     = input_token + bonus_token;\r\n                    transferTokens (msg.sender, total_token);\r\n                }   \r\n                else if(now >= ICO1 && now < ICO2)\r\n                {\r\n                    input_token     = (msg.value).mul(PriceICO2);\r\n                    bonus_token     = ((input_token).mul(10)).div(100);         // 10% bonus in ICO Phase 2\r\n                    total_token     = input_token + bonus_token;\r\n                    transferTokens (msg.sender, total_token);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                    input_token     = (msg.value).mul(PublicPrice);\r\n                    transferTokens (msg.sender, input_token);\r\n            }\r\n    }\r\n     \r\n    function start_ICO() public onlyOwner atStage(CurrentStages.NOTSTARTED)\r\n    {\r\n        stage                   = CurrentStages.PRE;\r\n        stopped                 = false;\r\n        PreStartTimeStamp       = now;\r\n        PreEndTimeStamp         = now + 20 days;\r\n        ICO1                    = PreEndTimeStamp + 20 days;\r\n        ICO2                    = ICO1 + 20 days;\r\n    }\r\n    \r\n    function PauseICO() external onlyOwner\r\n    {\r\n        stopped = true;\r\n    }\r\n\r\n    function ResumeICO() external onlyOwner\r\n    {\r\n        stopped = false;\r\n    }\r\n   \r\n    function end_ICO() external onlyOwner atStage(CurrentStages.PRE)\r\n    {\r\n        require (now > ICO2);\r\n        stage                       = CurrentStages.ENDED;\r\n        _totalsupply                = (_totalsupply).sub(balances[address(this)]);\r\n        balances[address(this)]     = 0;\r\n        Transfer (address(this), 0 , balances[address(this)]);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        require (_to != 0x0);\r\n        require (balances[_from]    >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n        balances[_from]             = (balances[_from]).sub(_amount);\r\n        allowed[_from][msg.sender]  = (allowed[_from][msg.sender]).sub(_amount);\r\n        balances[_to]               = (balances[_to]).add(_amount);\r\n        Transfer (_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require (_to != 0x0);\r\n        require (balances[msg.sender]       >= _amount && _amount >= 0);\r\n        balances[msg.sender]                = (balances[msg.sender]).sub(_amount);\r\n        balances[_to]                       = (balances[_to]).add(_amount);\r\n        Transfer (msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferTokens(address _to, uint256 _amount) private returns (bool success) {\r\n        require (_to != 0x0);       \r\n        require (balances[address(this)]    >= _amount && _amount > 0);\r\n        balances[address(this)]             = (balances[address(this)]).sub(_amount);\r\n        balances[_to]                       = (balances[_to]).add(_amount);\r\n        Transfer (address(this), _to, _amount);\r\n        return true;\r\n    }\r\n \r\n    function withdrawETH() external onlyOwner {\r\n        IFVOwner.transfer(this.balance);\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require (_spender != 0x0);\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval (msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        require (_owner != 0x0 && _spender !=0x0);\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 total_Supply) {\r\n        total_Supply                = _totalsupply;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreStartTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreEndTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PublicPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PriceICO1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IFVOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PricePre\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ResumeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PauseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PriceICO2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"IFVOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"INFLIV","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f49f1b584914ca5295566ce1f5f7c45c2cfa32cb8d871d0004b9f87beb1c53f7"}]}