{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string name, string symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract SupportEscrow is Ownable {\r\n    ERC20Detailed public constant bznToken = ERC20Detailed(0x1BD223e638aEb3A943b8F617335E04f3e6B6fFfa);\r\n    ERC20Detailed public constant gusdToken = ERC20Detailed(0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd);\r\n    \r\n    //BZN has 18 decimals, so we must append 18 decimals to this number\r\n    uint256 public constant bznRequirement = 13213 * (10 ** uint256(18));\r\n    \r\n    //gusd has two decimals, so the last two digits are for decimals\r\n    //i.e 8888801 = $88,888.01\r\n    //Therefore, 330330 = $3,303.30\r\n    uint256 public constant gusdRequirement = 330330;\r\n\r\n    //The minimum amount the contract must hold ($303.33)\r\n    uint256 public constant gusdMinimum = 33033;\r\n    \r\n    //The date when assets unlock\r\n    uint256 public constant unlockDate = 1551330000;\r\n    \r\n    bool public redeemed = false;\r\n    bool public executed = false;\r\n    bool public redeemable = false;\r\n    address public thirdParty;\r\n    \r\n    modifier onlyThridParty {\r\n        require(msg.sender == thirdParty);\r\n        _;\r\n    }\r\n    \r\n    constructor(address tp) public {\r\n        thirdParty = tp;\r\n    }\r\n    \r\n    function validate() public view returns (bool) {\r\n        address self = address(this);\r\n        \r\n        uint256 bzn = bznToken.balanceOf(self);\r\n        uint256 gusd = gusdToken.balanceOf(self);\r\n        \r\n        return bzn >= bznRequirement && gusd >= gusdRequirement;\r\n    }\r\n    \r\n    function execute() public onlyOwner returns (bool) {\r\n        //Ensure we haven't executed yet\r\n        require(executed == false);\r\n        \r\n        address self = address(this);\r\n        uint256 bzn = bznToken.balanceOf(self);\r\n        \r\n        //Ensure everything is in place before we execute\r\n        require(bzn >= bznRequirement);\r\n        \r\n        //Transfer the BZN to the owner\r\n        bznToken.transfer(owner(), bznRequirement);\r\n        \r\n        //We are done executing\r\n        executed = true;\r\n    }\r\n    \r\n    function destroy() public onlyOwner {\r\n        address self = address(this);\r\n        \r\n        uint256 bzn = bznToken.balanceOf(self);\r\n        uint256 gusd = gusdToken.balanceOf(self);\r\n        \r\n        //First return all funds\r\n        if (executed == false) {\r\n            //If it hasn't been executed yet, give funds back to third party\r\n            \r\n            bznToken.transfer(thirdParty, bzn);\r\n            bznToken.transfer(thirdParty, gusd);\r\n        } else if (redeemable && redeemed == false) {\r\n            //If it hasn't been redeemed but was marked redeemable, give back to third party\r\n            \r\n            bznToken.transfer(thirdParty, bzn);\r\n            bznToken.transfer(thirdParty, gusd);\r\n        }\r\n        \r\n        selfdestruct(owner());\r\n    }\r\n    \r\n    function allowRedeem() public onlyThridParty returns (uint256) {\r\n        //Ensure this has been executed\r\n        require(executed);\r\n        //Ensure this hasn't been marked as redeemable yet\r\n        require(redeemed == false);\r\n        //Ensure this hasn't been redeemed yet\r\n        require(redeemable == false);\r\n        //Ensure the time is past the unlock date\r\n        require(block.timestamp >= unlockDate);\r\n        //Ensure everything is in place before marking it as redeemable\r\n        require(validate());\r\n        \r\n        redeemable = true;\r\n    }\r\n    \r\n    function redeem() public onlyOwner returns (uint256) {\r\n        //Ensure this has been executed\r\n        require(executed);\r\n        //Ensure this is redeemable\r\n        require(redeemable);\r\n        //Ensure it hasn't been redeemed\r\n        require(redeemed == false);\r\n        //Ensure the time is past the unlock date\r\n        require(block.timestamp >= unlockDate);\r\n        //Ensure it's in the correct state\r\n        require(validate());\r\n        \r\n        //Give back the BZN to the thrid party\r\n        bznToken.transfer(thirdParty, bznRequirement);\r\n        \r\n        //Transfer gusd to the owner\r\n        gusdToken.transfer(owner(), gusdRequirement);\r\n        \r\n        //Mark as redeemed\r\n        redeemed = true;\r\n    }\r\n    \r\n    function withdrawBZN(uint256 amount) public onlyThridParty {\r\n        //You can only do this before execute() is called\r\n        //This is a safety net to ensure you don't send more than you meant to\r\n        //Or to reverse this contract before execute() is called\r\n        require(executed == false);\r\n        \r\n        //Send back BZN to the third party\r\n        bznToken.transfer(thirdParty, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"redeemable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bznRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gusdRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gusdToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bznToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBZN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gusdMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdParty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowRedeem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tp\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SupportEscrow","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004472a4b8f2194788dbfc717811392e0aa6b30bf5","Library":"","SwarmSource":"bzzr://132d7a994781b79ff928fa834d304f78f770002266167ad9dbda481cb972f433"}]}