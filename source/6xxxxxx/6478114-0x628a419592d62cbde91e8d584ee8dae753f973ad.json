{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n// First Spielley and Dav collab on creating a Hot potato take for P3D\r\n// pass the spud, \r\n// each time you have the spud you can win the jackpot, \r\n// first player has most chance of hitting jackpot and slowly the chances of winning decrease. \r\n// if someone doesn't take over the spud within 256 blocks you auto win\r\n// each time you play you get a spudcoin\r\n// spudcoin reward for UI devs\r\n// spudcoins can be traded in for a part of the contracts divs\r\n// dependant on totalsupply and how many coins you trade in\r\n// you can also trade in spudcoin for spots in the MN rotator when the contract buys P3D\r\n// \r\n\r\ncontract Spud3D {\r\n    using SafeMath for uint;\r\n    \r\n    HourglassInterface constant p3dContract = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\r\n    SPASMInterface constant SPASM_ = SPASMInterface(0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1);//spielley's profit sharing payout\r\n    \r\n    struct State {\r\n        \r\n        uint256 blocknumber;\r\n        address player;\r\n        \r\n        \r\n    }\r\n    \r\n    mapping(uint256 =>  State) public Spudgame;\r\n    mapping(address => uint256) public playerVault;\r\n    mapping(address => uint256) public SpudCoin;\r\n    mapping(uint256 => address) public Rotator;\r\n    \r\n    uint256 public totalsupply;//spud totalsupply\r\n    uint256 public Pot; // pot that get's filled from entry mainly\r\n    uint256 public SpudPot; // divpot spucoins can be traded for\r\n    uint256 public round; //roundnumber\r\n    \r\n    uint256 public RNGdeterminator; // variable upon gameprogress\r\n    uint256 public nextspotnr; // next spot in rotator\r\n    \r\n    mapping(address => string) public Vanity;\r\n    \r\n    event Withdrawn(address indexed player, uint256 indexed amount);\r\n    event SpudRnG(address indexed player, uint256 indexed outcome);\r\n    event payout(address indexed player, uint256 indexed amount);\r\n    \r\n    function harvestabledivs()\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return ( p3dContract.myDividends(true))  ;\r\n    }\r\n    function contractownsthismanyP3D()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        \r\n        return (p3dContract.balanceOf(address(this)));\r\n    }\r\n    function getthismuchethforyourspud(uint256 amount)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 dividends = p3dContract.myDividends(true);\r\n            \r\n            uint256 amt = dividends.div(100);\r\n            \r\n            uint256 thepot = SpudPot.add(dividends.sub(amt));\r\n            \r\n        uint256 payouts = thepot.mul(amount).div(totalsupply);\r\n        return (payouts);\r\n    }\r\n    function thismanyblockstillthspudholderwins()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 value;\r\n        if(265-( block.number - Spudgame[round].blocknumber) >0){value = 265- (block.number - Spudgame[round].blocknumber);}\r\n        return (value);\r\n    }\r\n    function currentspudinfo()\r\n        public\r\n        view\r\n        returns(uint256, address)\r\n    {\r\n        \r\n        return (Spudgame[round].blocknumber, Spudgame[round].player);\r\n    }\r\n    function returntrueifcurrentplayerwinsround()\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        uint256 refblocknr = Spudgame[round].blocknumber;\r\n        uint256 RNGresult = uint256(blockhash(refblocknr)) % RNGdeterminator;\r\n        \r\n        bool result;\r\n        if(RNGresult == 1){result = true;}\r\n        if(refblocknr < block.number - 256){result = true;}\r\n        return (result);\r\n    }\r\n    //mods\r\n    modifier hasEarnings()\r\n    {\r\n        require(playerVault[msg.sender] > 0);\r\n        _;\r\n    }\r\n    \r\n    function() external payable {} // needed for P3D myDividends\r\n    //constructor\r\n    constructor()\r\n        public\r\n    {\r\n        Spudgame[0].player = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\r\n        Spudgame[0].blocknumber = block.number;\r\n        RNGdeterminator = 6;\r\n        Rotator[0] = 0x989eB9629225B8C06997eF0577CC08535fD789F9;//raffle3d possible MN reward\r\n        nextspotnr++;\r\n    }\r\n    //vanity\r\n    \r\n    function changevanity(string van , address masternode) public payable\r\n    {\r\n        require(msg.value >= 1  finney);\r\n        Vanity[msg.sender] = van;\r\n        if(masternode == 0x0){masternode = 0x989eB9629225B8C06997eF0577CC08535fD789F9;}// raffle3d's address\r\n        p3dContract.buy.value(msg.value)(masternode);\r\n    } \r\n    //\r\n     function withdraw()\r\n        external\r\n        hasEarnings\r\n    {\r\n       \r\n        \r\n        uint256 amount = playerVault[msg.sender];\r\n        playerVault[msg.sender] = 0;\r\n        \r\n        emit Withdrawn(msg.sender, amount); \r\n        \r\n        msg.sender.transfer(amount);\r\n    }\r\n    // main function\r\n    function GetSpud(address MN) public payable\r\n    {\r\n        require(msg.value >= 1  finney);\r\n        address sender = msg.sender;\r\n        uint256 blocknr = block.number;\r\n        uint256 curround = round;\r\n        uint256 refblocknr = Spudgame[curround].blocknumber;\r\n        \r\n        SpudCoin[MN]++;\r\n        totalsupply +=2;\r\n        SpudCoin[sender]++;\r\n        \r\n        // check previous RNG\r\n        \r\n        if(blocknr == refblocknr) \r\n        {\r\n            // just change state previous player does not win\r\n            \r\n            playerVault[msg.sender] += msg.value;\r\n            \r\n        }\r\n        if(blocknr - 256 <= refblocknr && blocknr != refblocknr)\r\n        {\r\n        \r\n        uint256 RNGresult = uint256(blockhash(refblocknr)) % RNGdeterminator;\r\n        emit SpudRnG(Spudgame[curround].player , RNGresult) ;\r\n        \r\n        Pot += msg.value;\r\n        if(RNGresult == 1)\r\n        {\r\n            // won payout\r\n            uint256 RNGrotator = uint256(blockhash(refblocknr)) % nextspotnr;\r\n            address rotated = Rotator[RNGrotator]; \r\n            uint256 base = Pot.div(10);\r\n            p3dContract.buy.value(base)(rotated);\r\n            Spudgame[curround].player.transfer(base.mul(5));\r\n            emit payout(Spudgame[curround].player , base.mul(5));\r\n            Pot = Pot.sub(base.mul(6));\r\n            // ifpreviouswon => new round\r\n            uint256 nextround = curround+1;\r\n            Spudgame[nextround].player = sender;\r\n            Spudgame[nextround].blocknumber = blocknr;\r\n            \r\n            round++;\r\n            RNGdeterminator = 6;\r\n        }\r\n        if(RNGresult != 1)\r\n        {\r\n            // not won\r\n            \r\n            Spudgame[curround].player = sender;\r\n            Spudgame[curround].blocknumber = blocknr;\r\n        }\r\n        \r\n        \r\n        }\r\n        if(blocknr - 256 > refblocknr)\r\n        {\r\n            //win\r\n            // won payout\r\n            Pot += msg.value;\r\n            RNGrotator = uint256(blockhash(blocknr-1)) % nextspotnr;\r\n            rotated =Rotator[RNGrotator]; \r\n            base = Pot.div(10);\r\n            p3dContract.buy.value(base)(rotated);\r\n            Spudgame[round].player.transfer(base.mul(5));\r\n            emit payout(Spudgame[round].player , base.mul(5));\r\n            Pot = Pot.sub(base.mul(6));\r\n            // ifpreviouswon => new round\r\n            nextround = curround+1;\r\n            Spudgame[nextround].player = sender;\r\n            Spudgame[nextround].blocknumber = blocknr;\r\n            \r\n            round++;\r\n            RNGdeterminator = 6;\r\n        }\r\n        \r\n    } \r\n\r\nfunction SpudToDivs(uint256 amount) public \r\n    {\r\n        address sender = msg.sender;\r\n        require(amount>0 && SpudCoin[sender] >= amount );\r\n         uint256 dividends = p3dContract.myDividends(true);\r\n            require(dividends > 0);\r\n            uint256 amt = dividends.div(100);\r\n            p3dContract.withdraw();\r\n            SPASM_.disburse.value(amt)();// to dev fee sharing contract SPASM\r\n            SpudPot = SpudPot.add(dividends.sub(amt));\r\n        uint256 payouts = SpudPot.mul(amount).div(totalsupply);\r\n        SpudPot = SpudPot.sub(payouts);\r\n        SpudCoin[sender] = SpudCoin[sender].sub(amount);\r\n        totalsupply = totalsupply.sub(amount);\r\n        sender.transfer(payouts);\r\n    } \r\nfunction SpudToRotator(uint256 amount, address MN) public\r\n    {\r\n        address sender = msg.sender;\r\n        require(amount>0 && SpudCoin[sender] >= amount );\r\n        uint256 counter;\r\n    for(uint i=0; i< amount; i++)\r\n        {\r\n            counter = i + nextspotnr;\r\n            Rotator[counter] = MN;\r\n        }\r\n    nextspotnr += i;\r\n    SpudCoin[sender] = SpudCoin[sender].sub(amount);\r\n    totalsupply = totalsupply.sub(amount);\r\n    }\r\n}\r\n\r\ninterface HourglassInterface {\r\n    function buy(address _playerAddress) payable external returns(uint256);\r\n    function withdraw() external;\r\n    function myDividends(bool _includeReferralBonus) external view returns(uint256);\r\n    function balanceOf(address _playerAddress) external view returns(uint256);\r\n}\r\ninterface SPASMInterface  {\r\n    function() payable external;\r\n    function disburse() external  payable;\r\n}\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"contractownsthismanyP3D\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextspotnr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Rotator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentspudinfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getthismuchethforyourspud\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Spudgame\",\"outputs\":[{\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returntrueifcurrentplayerwinsround\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"van\",\"type\":\"string\"},{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"changevanity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SpudToDivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MN\",\"type\":\"address\"}],\"name\":\"GetSpud\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SpudPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestabledivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"SpudCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Vanity\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerVault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thismanyblockstillthspudholderwins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"MN\",\"type\":\"address\"}],\"name\":\"SpudToRotator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RNGdeterminator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"outcome\",\"type\":\"uint256\"}],\"name\":\"SpudRnG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"type\":\"event\"}]","ContractName":"Spud3D","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f8e80cf5d11f5a23cfff9812fa023e7dcdedd3906f6f29d5915aca094efd8010"}]}