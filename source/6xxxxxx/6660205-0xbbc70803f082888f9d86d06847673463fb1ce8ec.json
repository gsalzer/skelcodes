{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/assets/ChronoBankAssetChainableInterface.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract ChronoBankAssetChainableInterface {\r\n\r\n    function assetType() public pure returns (bytes32);\r\n\r\n    function getPreviousAsset() public view returns (ChronoBankAssetChainableInterface);\r\n    function getNextAsset() public view returns (ChronoBankAssetChainableInterface);\r\n\r\n    function getChainedAssets() public view returns (bytes32[] _types, address[] _assets);\r\n    function getAssetByType(bytes32 _assetType) public view returns (address);\r\n\r\n    function chainAssets(ChronoBankAssetChainableInterface[] _assets) external returns (bool);\r\n    function __chainAssetsFromIdx(ChronoBankAssetChainableInterface[] _assets, uint _startFromIdx) external returns (bool);\r\n\r\n    function finalizeAssetChaining() public;\r\n}\r\n\r\n// File: @laborx/solidity-shared-lib/contracts/BaseByzantiumRouter.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/// @title Routing contract that is able to provide a way for delegating invocations with dynamic destination address.\r\ncontract BaseByzantiumRouter {\r\n\r\n    function() external payable {\r\n        address _implementation = implementation();\r\n\r\n        assembly {\r\n            let calldataMemoryOffset := mload(0x40)\r\n            mstore(0x40, add(calldataMemoryOffset, calldatasize))\r\n            calldatacopy(calldataMemoryOffset, 0x0, calldatasize)\r\n            let r := delegatecall(sub(gas, 10000), _implementation, calldataMemoryOffset, calldatasize, 0, 0)\r\n\r\n            let returndataMemoryOffset := mload(0x40)\r\n            mstore(0x40, add(returndataMemoryOffset, returndatasize))\r\n            returndatacopy(returndataMemoryOffset, 0x0, returndatasize)\r\n\r\n            switch r\r\n            case 1 {\r\n                return(returndataMemoryOffset, returndatasize)\r\n            }\r\n            default {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Returns destination address for future calls\r\n    /// @dev abstract definition. should be implemented in sibling contracts\r\n    /// @return destination address\r\n    function implementation() internal view returns (address);\r\n}\r\n\r\n// File: @laborx/solidity-shared-lib/contracts/ERC20Interface.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n/// @title Defines an interface for EIP20 token smart contract\r\ncontract ERC20Interface {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    string public symbol;\r\n\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n}\r\n\r\n// File: @laborx/solidity-shared-lib/contracts/Owned.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\n/// @title Owned contract with safe ownership pass.\r\n///\r\n/// Note: all the non constant functions return false instead of throwing in case if state change\r\n/// didn't happen yet.\r\ncontract Owned {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address public contractOwner;\r\n    address public pendingContractOwner;\r\n\r\n    modifier onlyContractOwner {\r\n        if (msg.sender == contractOwner) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    constructor()\r\n    public\r\n    {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    /// @notice Prepares ownership pass.\r\n    /// Can only be called by current owner.\r\n    /// @param _to address of the next owner.\r\n    /// @return success.\r\n    function changeContractOwnership(address _to)\r\n    public\r\n    onlyContractOwner\r\n    returns (bool)\r\n    {\r\n        if (_to == 0x0) {\r\n            return false;\r\n        }\r\n        pendingContractOwner = _to;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Finalize ownership pass.\r\n    /// Can only be called by pending owner.\r\n    /// @return success.\r\n    function claimContractOwnership()\r\n    public\r\n    returns (bool)\r\n    {\r\n        if (msg.sender != pendingContractOwner) {\r\n            return false;\r\n        }\r\n\r\n        emit OwnershipTransferred(contractOwner, pendingContractOwner);\r\n        contractOwner = pendingContractOwner;\r\n        delete pendingContractOwner;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Allows the current owner to transfer control of the contract to a newOwner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(address newOwner)\r\n    public\r\n    onlyContractOwner\r\n    returns (bool)\r\n    {\r\n        if (newOwner == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        emit OwnershipTransferred(contractOwner, newOwner);\r\n        contractOwner = newOwner;\r\n        delete pendingContractOwner;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Allows the current owner to transfer control of the contract to a newOwner.\r\n    /// @dev Backward compatibility only.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferContractOwnership(address newOwner)\r\n    public\r\n    returns (bool)\r\n    {\r\n        return transferOwnership(newOwner);\r\n    }\r\n\r\n    /// @notice Withdraw given tokens from contract to owner.\r\n    /// This method is only allowed for contact owner.\r\n    function withdrawTokens(address[] tokens)\r\n    public\r\n    onlyContractOwner\r\n    {\r\n        address _contractOwner = contractOwner;\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            ERC20Interface token = ERC20Interface(tokens[i]);\r\n            uint balance = token.balanceOf(this);\r\n            if (balance > 0) {\r\n                token.transfer(_contractOwner, balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraw ether from contract to owner.\r\n    /// This method is only allowed for contact owner.\r\n    function withdrawEther()\r\n    public\r\n    onlyContractOwner\r\n    {\r\n        uint balance = address(this).balance;\r\n        if (balance > 0)  {\r\n            contractOwner.transfer(balance);\r\n        }\r\n    }\r\n\r\n    /// @notice Transfers ether to another address.\r\n    /// Allowed only for contract owners.\r\n    /// @param _to recepient address\r\n    /// @param _value wei to transfer; must be less or equal to total balance on the contract\r\n    function transferEther(address _to, uint256 _value)\r\n    public\r\n    onlyContractOwner\r\n    {\r\n        require(_to != 0x0, \"INVALID_ETHER_RECEPIENT_ADDRESS\");\r\n        if (_value > address(this).balance) {\r\n            revert(\"INVALID_VALUE_TO_TRANSFER_ETHER\");\r\n        }\r\n\r\n        _to.transfer(_value);\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-storage-lib/contracts/Storage.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\ncontract Manager {\r\n    function isAllowed(address _actor, bytes32 _role) public view returns (bool);\r\n    function hasAccess(address _actor) public view returns (bool);\r\n}\r\n\r\n\r\ncontract Storage is Owned {\r\n    struct Crate {\r\n        mapping(bytes32 => uint) uints;\r\n        mapping(bytes32 => address) addresses;\r\n        mapping(bytes32 => bool) bools;\r\n        mapping(bytes32 => int) ints;\r\n        mapping(bytes32 => uint8) uint8s;\r\n        mapping(bytes32 => bytes32) bytes32s;\r\n        mapping(bytes32 => AddressUInt8) addressUInt8s;\r\n        mapping(bytes32 => string) strings;\r\n    }\r\n\r\n    struct AddressUInt8 {\r\n        address _address;\r\n        uint8 _uint8;\r\n    }\r\n\r\n    mapping(bytes32 => Crate) internal crates;\r\n    Manager public manager;\r\n\r\n    modifier onlyAllowed(bytes32 _role) {\r\n        if (!(msg.sender == address(this) || manager.isAllowed(msg.sender, _role))) {\r\n            revert(\"STORAGE_FAILED_TO_ACCESS_PROTECTED_FUNCTION\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setManager(Manager _manager)\r\n    external\r\n    onlyContractOwner\r\n    returns (bool)\r\n    {\r\n        manager = _manager;\r\n        return true;\r\n    }\r\n\r\n    function setUInt(bytes32 _crate, bytes32 _key, uint _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setUInt(_crate, _key, _value);\r\n    }\r\n\r\n    function _setUInt(bytes32 _crate, bytes32 _key, uint _value)\r\n    internal\r\n    {\r\n        crates[_crate].uints[_key] = _value;\r\n    }\r\n\r\n\r\n    function getUInt(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return crates[_crate].uints[_key];\r\n    }\r\n\r\n    function setAddress(bytes32 _crate, bytes32 _key, address _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setAddress(_crate, _key, _value);\r\n    }\r\n\r\n    function _setAddress(bytes32 _crate, bytes32 _key, address _value)\r\n    internal\r\n    {\r\n        crates[_crate].addresses[_key] = _value;\r\n    }\r\n\r\n    function getAddress(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        return crates[_crate].addresses[_key];\r\n    }\r\n\r\n    function setBool(bytes32 _crate, bytes32 _key, bool _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setBool(_crate, _key, _value);\r\n    }\r\n\r\n    function _setBool(bytes32 _crate, bytes32 _key, bool _value)\r\n    internal\r\n    {\r\n        crates[_crate].bools[_key] = _value;\r\n    }\r\n\r\n    function getBool(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        return crates[_crate].bools[_key];\r\n    }\r\n\r\n    function setInt(bytes32 _crate, bytes32 _key, int _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setInt(_crate, _key, _value);\r\n    }\r\n\r\n    function _setInt(bytes32 _crate, bytes32 _key, int _value)\r\n    internal\r\n    {\r\n        crates[_crate].ints[_key] = _value;\r\n    }\r\n\r\n    function getInt(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (int)\r\n    {\r\n        return crates[_crate].ints[_key];\r\n    }\r\n\r\n    function setUInt8(bytes32 _crate, bytes32 _key, uint8 _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setUInt8(_crate, _key, _value);\r\n    }\r\n\r\n    function _setUInt8(bytes32 _crate, bytes32 _key, uint8 _value)\r\n    internal\r\n    {\r\n        crates[_crate].uint8s[_key] = _value;\r\n    }\r\n\r\n    function getUInt8(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (uint8)\r\n    {\r\n        return crates[_crate].uint8s[_key];\r\n    }\r\n\r\n    function setBytes32(bytes32 _crate, bytes32 _key, bytes32 _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setBytes32(_crate, _key, _value);\r\n    }\r\n\r\n    function _setBytes32(bytes32 _crate, bytes32 _key, bytes32 _value)\r\n    internal\r\n    {\r\n        crates[_crate].bytes32s[_key] = _value;\r\n    }\r\n\r\n    function getBytes32(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (bytes32)\r\n    {\r\n        return crates[_crate].bytes32s[_key];\r\n    }\r\n\r\n    function setAddressUInt8(bytes32 _crate, bytes32 _key, address _value, uint8 _value2)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setAddressUInt8(_crate, _key, _value, _value2);\r\n    }\r\n\r\n    function _setAddressUInt8(bytes32 _crate, bytes32 _key, address _value, uint8 _value2)\r\n    internal\r\n    {\r\n        crates[_crate].addressUInt8s[_key] = AddressUInt8(_value, _value2);\r\n    }\r\n\r\n    function getAddressUInt8(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (address, uint8)\r\n    {\r\n        return (crates[_crate].addressUInt8s[_key]._address, crates[_crate].addressUInt8s[_key]._uint8);\r\n    }\r\n\r\n    function setString(bytes32 _crate, bytes32 _key, string _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setString(_crate, _key, _value);\r\n    }\r\n\r\n    function _setString(bytes32 _crate, bytes32 _key, string _value)\r\n    internal\r\n    {\r\n        crates[_crate].strings[_key] = _value;\r\n    }\r\n\r\n    function getString(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (string)\r\n    {\r\n        return crates[_crate].strings[_key];\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-storage-lib/contracts/StorageInterface.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\nlibrary StorageInterface {\r\n    struct Config {\r\n        Storage store;\r\n        bytes32 crate;\r\n    }\r\n\r\n    struct UInt {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct UInt8 {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Int {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Address {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Bool {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Bytes32 {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct String {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Mapping {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct StringMapping {\r\n        String id;\r\n    }\r\n\r\n    struct UIntBoolMapping {\r\n        Bool innerMapping;\r\n    }\r\n\r\n    struct UIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntBytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntEnumMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBoolMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUInt8Mapping {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct AddressUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressAddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UInt8Mapping {\r\n        UInt8 innerMapping;\r\n    }\r\n\r\n    struct Bytes32BoolMapping {\r\n        Bool innerMapping;\r\n    }\r\n\r\n    struct Bytes32Bytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32AddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UIntBoolMapping {\r\n        Bool innerMapping;\r\n    }\r\n\r\n    struct AddressAddressUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressAddressUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBytes32Bytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBytes4BoolMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBytes4Bytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressAddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressBoolMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntUIntAddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntUIntBytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntUIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntStructAddressUInt8Mapping {\r\n        AddressUInt8Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntStructAddressUInt8Mapping {\r\n        AddressUInt8Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntUIntStructAddressUInt8Mapping {\r\n        AddressUInt8Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntUIntUIntStructAddressUInt8Mapping {\r\n        AddressUInt8Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntAddressUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntAddressUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntUIntAddressUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressAddressBoolMapping {\r\n        Bool innerMapping;\r\n    }\r\n\r\n    struct UIntUIntUIntBytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UIntUIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    bytes32 constant SET_IDENTIFIER = \"set\";\r\n\r\n    struct Set {\r\n        UInt count;\r\n        Mapping indexes;\r\n        Mapping values;\r\n    }\r\n\r\n    struct AddressesSet {\r\n        Set innerSet;\r\n    }\r\n\r\n    struct CounterSet {\r\n        Set innerSet;\r\n    }\r\n\r\n    bytes32 constant ORDERED_SET_IDENTIFIER = \"ordered_set\";\r\n\r\n    struct OrderedSet {\r\n        UInt count;\r\n        Bytes32 first;\r\n        Bytes32 last;\r\n        Mapping nextValues;\r\n        Mapping previousValues;\r\n    }\r\n\r\n    struct OrderedUIntSet {\r\n        OrderedSet innerSet;\r\n    }\r\n\r\n    struct OrderedAddressesSet {\r\n        OrderedSet innerSet;\r\n    }\r\n\r\n    struct Bytes32SetMapping {\r\n        Set innerMapping;\r\n    }\r\n\r\n    struct AddressesSetMapping {\r\n        Bytes32SetMapping innerMapping;\r\n    }\r\n\r\n    struct UIntSetMapping {\r\n        Bytes32SetMapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32OrderedSetMapping {\r\n        OrderedSet innerMapping;\r\n    }\r\n\r\n    struct UIntOrderedSetMapping {\r\n        Bytes32OrderedSetMapping innerMapping;\r\n    }\r\n\r\n    struct AddressOrderedSetMapping {\r\n        Bytes32OrderedSetMapping innerMapping;\r\n    }\r\n\r\n    // Can't use modifier due to a Solidity bug.\r\n    function sanityCheck(bytes32 _currentId, bytes32 _newId) internal pure {\r\n        if (_currentId != 0 || _newId == 0) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function init(Config storage self, Storage _store, bytes32 _crate) internal {\r\n        self.store = _store;\r\n        self.crate = _crate;\r\n    }\r\n\r\n    function init(UInt8 storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(UInt storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Int storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Address storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Bool storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Bytes32 storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(String storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Mapping storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(StringMapping storage self, bytes32 _id) internal {\r\n        init(self.id, _id);\r\n    }\r\n\r\n    function init(UIntAddressMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntEnumMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressAddressUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBytes32Bytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntAddressUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntAddressBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntAddressMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntAddressAddressMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntAddressAddressBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntUIntBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UIntUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(AddressUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressAddressMapping  storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBytes4BoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBytes4Bytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntUIntUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntUIntAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32BoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32Bytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32AddressMapping  storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UIntBoolMapping  storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Set storage self, bytes32 _id) internal {\r\n        init(self.count, keccak256(abi.encodePacked(_id, \"count\")));\r\n        init(self.indexes, keccak256(abi.encodePacked(_id, \"indexes\")));\r\n        init(self.values, keccak256(abi.encodePacked(_id, \"values\")));\r\n    }\r\n\r\n    function init(AddressesSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(CounterSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(OrderedSet storage self, bytes32 _id) internal {\r\n        init(self.count, keccak256(abi.encodePacked(_id, \"uint/count\")));\r\n        init(self.first, keccak256(abi.encodePacked(_id, \"uint/first\")));\r\n        init(self.last, keccak256(abi.encodePacked(_id, \"uint/last\")));\r\n        init(self.nextValues, keccak256(abi.encodePacked(_id, \"uint/next\")));\r\n        init(self.previousValues, keccak256(abi.encodePacked(_id, \"uint/prev\")));\r\n    }\r\n\r\n    function init(OrderedUIntSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(OrderedAddressesSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(Bytes32SetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressesSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32OrderedSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntOrderedSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressOrderedSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    /** `set` operation */\r\n\r\n    function set(Config storage self, UInt storage item, uint _value) internal {\r\n        self.store.setUInt(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, UInt storage item, bytes32 _salt, uint _value) internal {\r\n        self.store.setUInt(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, UInt8 storage item, uint8 _value) internal {\r\n        self.store.setUInt8(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, UInt8 storage item, bytes32 _salt, uint8 _value) internal {\r\n        self.store.setUInt8(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Int storage item, int _value) internal {\r\n        self.store.setInt(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, Int storage item, bytes32 _salt, int _value) internal {\r\n        self.store.setInt(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Address storage item, address _value) internal {\r\n        self.store.setAddress(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, Address storage item, bytes32 _salt, address _value) internal {\r\n        self.store.setAddress(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bool storage item, bool _value) internal {\r\n        self.store.setBool(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bool storage item, bytes32 _salt, bool _value) internal {\r\n        self.store.setBool(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32 storage item, bytes32 _value) internal {\r\n        self.store.setBytes32(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32 storage item, bytes32 _salt, bytes32 _value) internal {\r\n        self.store.setBytes32(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, String storage item, string _value) internal {\r\n        self.store.setString(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, String storage item, bytes32 _salt, string _value) internal {\r\n        self.store.setString(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Mapping storage item, uint _key, uint _value) internal {\r\n        self.store.setUInt(self.crate, keccak256(abi.encodePacked(item.id, _key)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Mapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        self.store.setBytes32(self.crate, keccak256(abi.encodePacked(item.id, _key)), _value);\r\n    }\r\n\r\n    function set(Config storage self, StringMapping storage item, bytes32 _key, string _value) internal {\r\n        set(self, item.id, _key, _value);\r\n    }\r\n\r\n    function set(Config storage self, AddressUInt8Mapping storage item, bytes32 _key, address _value1, uint8 _value2) internal {\r\n        self.store.setAddressUInt8(self.crate, keccak256(abi.encodePacked(item.id, _key)), _value1, _value2);\r\n    }\r\n\r\n    function set(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _value) internal {\r\n        set(self, item, keccak256(abi.encodePacked(_key, _key2)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _key3, bytes32 _value) internal {\r\n        set(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bool storage item, bytes32 _key, bytes32 _key2, bytes32 _key3, bool _value) internal {\r\n        set(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)), _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressMapping storage item, uint _key, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntMapping storage item, uint _key, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntBoolMapping storage item, uint _key, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntEnumMapping storage item, uint _key, uint8 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntBytes32Mapping storage item, uint _key, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UIntMapping storage item, bytes32 _key, uint _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UInt8Mapping storage item, bytes32 _key, uint8 _value) internal {\r\n        set(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32BoolMapping storage item, bytes32 _key, bool _value) internal {\r\n        set(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32Bytes32Mapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        set(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32AddressMapping storage item, bytes32 _key, address _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UIntBoolMapping storage item, bytes32 _key, uint _key2, bool _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)), _value);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntMapping storage item, address _key, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBoolMapping storage item, address _key, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), toBytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBytes32Mapping storage item, address _key, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _value);\r\n    }\r\n\r\n    function set(Config storage self, AddressAddressMapping storage item, address _key, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressAddressUIntMapping storage item, address _key, address _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntMapping storage item, address _key, uint _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressAddressUInt8Mapping storage item, address _key, address _key2, uint8 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUInt8Mapping storage item, address _key, uint _key2, uint8 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBytes32Bytes32Mapping storage item, address _key, bytes32 _key2, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _key2, _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressUIntMapping storage item, uint _key, address _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressBoolMapping storage item, uint _key, address _key2, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), toBytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressAddressMapping storage item, uint _key, address _key2, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntAddressMapping storage item, uint _key, uint _key2, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntBytes32Mapping storage item, uint _key, uint _key2, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntUIntMapping storage item, uint _key, uint _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressAddressBoolMapping storage item, uint _key, address _key2, address _key3, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntUIntBytes32Mapping storage item, uint _key, uint _key2,  uint _key3, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UIntUIntMapping storage item, bytes32 _key, uint _key2, uint _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UIntUIntUIntMapping storage item, bytes32 _key, uint _key2,  uint _key3, uint _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_key2), bytes32(_key3), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntUIntMapping storage item, address _key, uint _key2,  uint _key3, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)), _value, _value2);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)), _value, _value2);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2,  uint _key3, uint _key4, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4)), _value, _value2);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2,  uint _key3, uint _key4, uint _key5, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5)), _value, _value2);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntAddressUInt8Mapping storage item, address _key, uint _key2, address _key3, uint8 _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _key4, uint8 _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4)), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2,  uint _key3, uint _key4, address _key5, uint8 _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5)), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBytes4BoolMapping storage item, address _key, bytes4 _key2, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), toBytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBytes4Bytes32Mapping storage item, address _key, bytes4 _key2, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), _value);\r\n    }\r\n\r\n\r\n    /** `add` operation */\r\n\r\n    function add(Config storage self, Set storage item, bytes32 _value) internal {\r\n        add(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function add(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (includes(self, item, _salt, _value)) {\r\n            return;\r\n        }\r\n        uint newCount = count(self, item, _salt) + 1;\r\n        set(self, item.values, _salt, bytes32(newCount), _value);\r\n        set(self, item.indexes, _salt, _value, bytes32(newCount));\r\n        set(self, item.count, _salt, newCount);\r\n    }\r\n\r\n    function add(Config storage self, AddressesSet storage item, address _value) internal {\r\n        add(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, CounterSet storage item) internal {\r\n        add(self, item.innerSet, bytes32(count(self, item) + 1));\r\n    }\r\n\r\n    function add(Config storage self, OrderedSet storage item, bytes32 _value) internal {\r\n        add(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function add(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (_value == 0x0) { revert(); }\r\n\r\n        if (includes(self, item, _salt, _value)) { return; }\r\n\r\n        if (count(self, item, _salt) == 0x0) {\r\n            set(self, item.first, _salt, _value);\r\n        }\r\n\r\n        if (get(self, item.last, _salt) != 0x0) {\r\n            _setOrderedSetLink(self, item.nextValues, _salt, get(self, item.last, _salt), _value);\r\n            _setOrderedSetLink(self, item.previousValues, _salt, _value, get(self, item.last, _salt));\r\n        }\r\n\r\n        _setOrderedSetLink(self, item.nextValues, _salt,  _value, 0x0);\r\n        set(self, item.last, _salt, _value);\r\n        set(self, item.count, _salt, get(self, item.count, _salt) + 1);\r\n    }\r\n\r\n    function add(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        add(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function add(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        add(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function add(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, OrderedUIntSet storage item, uint _value) internal {\r\n        add(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, OrderedAddressesSet storage item, address _value) internal {\r\n        add(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, Set storage item, bytes32 _oldValue, bytes32 _newValue) internal {\r\n        set(self, item, SET_IDENTIFIER, _oldValue, _newValue);\r\n    }\r\n\r\n    function set(Config storage self, Set storage item, bytes32 _salt, bytes32 _oldValue, bytes32 _newValue) private {\r\n        if (!includes(self, item, _salt, _oldValue)) {\r\n            return;\r\n        }\r\n        uint index = uint(get(self, item.indexes, _salt, _oldValue));\r\n        set(self, item.values, _salt, bytes32(index), _newValue);\r\n        set(self, item.indexes, _salt, _newValue, bytes32(index));\r\n        set(self, item.indexes, _salt, _oldValue, bytes32(0));\r\n    }\r\n\r\n    function set(Config storage self, AddressesSet storage item, address _oldValue, address _newValue) internal {\r\n        set(self, item.innerSet, bytes32(_oldValue), bytes32(_newValue));\r\n    }\r\n\r\n    /** `remove` operation */\r\n\r\n    function remove(Config storage self, Set storage item, bytes32 _value) internal {\r\n        remove(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function remove(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (!includes(self, item, _salt, _value)) {\r\n            return;\r\n        }\r\n        uint lastIndex = count(self, item, _salt);\r\n        bytes32 lastValue = get(self, item.values, _salt, bytes32(lastIndex));\r\n        uint index = uint(get(self, item.indexes, _salt, _value));\r\n        if (index < lastIndex) {\r\n            set(self, item.indexes, _salt, lastValue, bytes32(index));\r\n            set(self, item.values, _salt, bytes32(index), lastValue);\r\n        }\r\n        set(self, item.indexes, _salt, _value, bytes32(0));\r\n        set(self, item.values, _salt, bytes32(lastIndex), bytes32(0));\r\n        set(self, item.count, _salt, lastIndex - 1);\r\n    }\r\n\r\n    function remove(Config storage self, AddressesSet storage item, address _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, CounterSet storage item, uint _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, OrderedSet storage item, bytes32 _value) internal {\r\n        remove(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function remove(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (!includes(self, item, _salt, _value)) { return; }\r\n\r\n        _setOrderedSetLink(self, item.nextValues, _salt, get(self, item.previousValues, _salt, _value), get(self, item.nextValues, _salt, _value));\r\n        _setOrderedSetLink(self, item.previousValues, _salt, get(self, item.nextValues, _salt, _value), get(self, item.previousValues, _salt, _value));\r\n\r\n        if (_value == get(self, item.first, _salt)) {\r\n            set(self, item.first, _salt, get(self, item.nextValues, _salt, _value));\r\n        }\r\n\r\n        if (_value == get(self, item.last, _salt)) {\r\n            set(self, item.last, _salt, get(self, item.previousValues, _salt, _value));\r\n        }\r\n\r\n        _deleteOrderedSetLink(self, item.nextValues, _salt, _value);\r\n        _deleteOrderedSetLink(self, item.previousValues, _salt, _value);\r\n\r\n        set(self, item.count, _salt, get(self, item.count, _salt) - 1);\r\n    }\r\n\r\n    function remove(Config storage self, OrderedUIntSet storage item, uint _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, OrderedAddressesSet storage item, address _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        remove(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function remove(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        remove(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function remove(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    /** 'copy` operation */\r\n\r\n    function copy(Config storage self, Set storage source, Set storage dest) internal {\r\n        uint _destCount = count(self, dest);\r\n        bytes32[] memory _toRemoveFromDest = new bytes32[](_destCount);\r\n        uint _idx;\r\n        uint _pointer = 0;\r\n        for (_idx = 0; _idx < _destCount; ++_idx) {\r\n            bytes32 _destValue = get(self, dest, _idx);\r\n            if (!includes(self, source, _destValue)) {\r\n                _toRemoveFromDest[_pointer++] = _destValue;\r\n            }\r\n        }\r\n\r\n        uint _sourceCount = count(self, source);\r\n        for (_idx = 0; _idx < _sourceCount; ++_idx) {\r\n            add(self, dest, get(self, source, _idx));\r\n        }\r\n\r\n        for (_idx = 0; _idx < _pointer; ++_idx) {\r\n            remove(self, dest, _toRemoveFromDest[_idx]);\r\n        }\r\n    }\r\n\r\n    function copy(Config storage self, AddressesSet storage source, AddressesSet storage dest) internal {\r\n        copy(self, source.innerSet, dest.innerSet);\r\n    }\r\n\r\n    function copy(Config storage self, CounterSet storage source, CounterSet storage dest) internal {\r\n        copy(self, source.innerSet, dest.innerSet);\r\n    }\r\n\r\n    /** `get` operation */\r\n\r\n    function get(Config storage self, UInt storage item) internal view returns (uint) {\r\n        return self.store.getUInt(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, UInt storage item, bytes32 salt) internal view returns (uint) {\r\n        return self.store.getUInt(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, UInt8 storage item) internal view returns (uint8) {\r\n        return self.store.getUInt8(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, UInt8 storage item, bytes32 salt) internal view returns (uint8) {\r\n        return self.store.getUInt8(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Int storage item) internal view returns (int) {\r\n        return self.store.getInt(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, Int storage item, bytes32 salt) internal view returns (int) {\r\n        return self.store.getInt(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Address storage item) internal view returns (address) {\r\n        return self.store.getAddress(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, Address storage item, bytes32 salt) internal view returns (address) {\r\n        return self.store.getAddress(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Bool storage item) internal view returns (bool) {\r\n        return self.store.getBool(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, Bool storage item, bytes32 salt) internal view returns (bool) {\r\n        return self.store.getBool(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32 storage item) internal view returns (bytes32) {\r\n        return self.store.getBytes32(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, Bytes32 storage item, bytes32 salt) internal view returns (bytes32) {\r\n        return self.store.getBytes32(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, String storage item) internal view returns (string) {\r\n        return self.store.getString(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, String storage item, bytes32 salt) internal view returns (string) {\r\n        return self.store.getString(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Mapping storage item, uint _key) internal view returns (uint) {\r\n        return self.store.getUInt(self.crate, keccak256(abi.encodePacked(item.id, _key)));\r\n    }\r\n\r\n    function get(Config storage self, Mapping storage item, bytes32 _key) internal view returns (bytes32) {\r\n        return self.store.getBytes32(self.crate, keccak256(abi.encodePacked(item.id, _key)));\r\n    }\r\n\r\n    function get(Config storage self, StringMapping storage item, bytes32 _key) internal view returns (string) {\r\n        return get(self, item.id, _key);\r\n    }\r\n\r\n    function get(Config storage self, AddressUInt8Mapping storage item, bytes32 _key) internal view returns (address, uint8) {\r\n        return self.store.getAddressUInt8(self.crate, keccak256(abi.encodePacked(item.id, _key)));\r\n    }\r\n\r\n    function get(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2) internal view returns (bytes32) {\r\n        return get(self, item, keccak256(abi.encodePacked(_key, _key2)));\r\n    }\r\n\r\n    function get(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _key3) internal view returns (bytes32) {\r\n        return get(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)));\r\n    }\r\n\r\n    function get(Config storage self, Bool storage item, bytes32 _key, bytes32 _key2, bytes32 _key3) internal view returns (bool) {\r\n        return get(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)));\r\n    }\r\n\r\n    function get(Config storage self, UIntBoolMapping storage item, uint _key) internal view returns (bool) {\r\n        return get(self, item.innerMapping, bytes32(_key));\r\n    }\r\n\r\n    function get(Config storage self, UIntEnumMapping storage item, uint _key) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntMapping storage item, uint _key) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressMapping storage item, uint _key) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UIntMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32AddressMapping storage item, bytes32 _key) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UInt8Mapping storage item, bytes32 _key) internal view returns (uint8) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, Bytes32BoolMapping storage item, bytes32 _key) internal view returns (bool) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, Bytes32Bytes32Mapping storage item, bytes32 _key) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UIntBoolMapping storage item, bytes32 _key, uint _key2) internal view returns (bool) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntBytes32Mapping storage item, uint _key) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntMapping storage item, address _key) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, AddressBoolMapping storage item, address _key) internal view returns (bool) {\r\n        return toBool(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, AddressAddressMapping storage item, address _key) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, AddressBytes32Mapping storage item, address _key) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntBytes32Mapping storage item, uint _key, uint _key2) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntAddressMapping storage item, uint _key, uint _key2) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntUIntMapping storage item, uint _key, uint _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UIntUIntMapping storage item, bytes32 _key, uint _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key, bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UIntUIntUIntMapping storage item, bytes32 _key, uint _key2, uint _key3) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key, bytes32(_key2), bytes32(_key3)));\r\n    }\r\n\r\n    function get(Config storage self, AddressAddressUIntMapping storage item, address _key, address _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressAddressUInt8Mapping storage item, address _key, address _key2) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntMapping storage item, address _key, uint _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUInt8Mapping storage item, address _key, uint _key2) internal view returns (uint) {\r\n        return uint8(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressBytes32Bytes32Mapping storage item, address _key, bytes32 _key2) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), _key2);\r\n    }\r\n\r\n    function get(Config storage self, AddressBytes4BoolMapping storage item, address _key, bytes4 _key2) internal view returns (bool) {\r\n        return toBool(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressBytes4Bytes32Mapping storage item, address _key, bytes4 _key2) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressUIntMapping storage item, uint _key, address _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressBoolMapping storage item, uint _key, address _key2) internal view returns (bool) {\r\n        return toBool(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressAddressMapping storage item, uint _key, address _key2) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressAddressBoolMapping storage item, uint _key, address _key2, address _key3) internal view returns (bool) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntUIntBytes32Mapping storage item, uint _key, uint _key2, uint _key3) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntUIntMapping storage item, address _key, uint _key2, uint _key3) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntStructAddressUInt8Mapping storage item, address _key, uint _key2) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, uint _key4) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, uint _key4, uint _key5) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntAddressUInt8Mapping storage item, address _key, uint _key2, address _key3) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3))));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _key4) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4))));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, uint _key4, address _key5) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5))));\r\n    }\r\n\r\n    /** `includes` operation */\r\n\r\n    function includes(Config storage self, Set storage item, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function includes(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) internal view returns (bool) {\r\n        return get(self, item.indexes, _salt, _value) != 0;\r\n    }\r\n\r\n    function includes(Config storage self, AddressesSet storage item, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, CounterSet storage item, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, OrderedSet storage item, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function includes(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private view returns (bool) {\r\n        return _value != 0x0 && (get(self, item.nextValues, _salt, _value) != 0x0 || get(self, item.last, _salt) == _value);\r\n    }\r\n\r\n    function includes(Config storage self, OrderedUIntSet storage item, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, OrderedAddressesSet storage item, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function includes(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function includes(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(Config storage self, Set storage item, bytes32 _value) internal view returns (uint) {\r\n        return getIndex(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function getIndex(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) private view returns (uint) {\r\n        return uint(get(self, item.indexes, _salt, _value));\r\n    }\r\n\r\n    function getIndex(Config storage self, AddressesSet storage item, address _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(Config storage self, CounterSet storage item, uint _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function getIndex(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    /** `count` operation */\r\n\r\n    function count(Config storage self, Set storage item) internal view returns (uint) {\r\n        return count(self, item, SET_IDENTIFIER);\r\n    }\r\n\r\n    function count(Config storage self, Set storage item, bytes32 _salt) internal view returns (uint) {\r\n        return get(self, item.count, _salt);\r\n    }\r\n\r\n    function count(Config storage self, AddressesSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(Config storage self, CounterSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(Config storage self, OrderedSet storage item) internal view returns (uint) {\r\n        return count(self, item, ORDERED_SET_IDENTIFIER);\r\n    }\r\n\r\n    function count(Config storage self, OrderedSet storage item, bytes32 _salt) private view returns (uint) {\r\n        return get(self, item.count, _salt);\r\n    }\r\n\r\n    function count(Config storage self, OrderedUIntSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(Config storage self, OrderedAddressesSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(Config storage self, Bytes32SetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, AddressesSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, UIntSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, Set storage item) internal view returns (bytes32[] result) {\r\n        result = get(self, item, SET_IDENTIFIER);\r\n    }\r\n\r\n    function get(Config storage self, Set storage item, bytes32 _salt) private view returns (bytes32[] result) {\r\n        uint valuesCount = count(self, item, _salt);\r\n        result = new bytes32[](valuesCount);\r\n        for (uint i = 0; i < valuesCount; i++) {\r\n            result[i] = get(self, item, _salt, i);\r\n        }\r\n    }\r\n\r\n    function get(Config storage self, AddressesSet storage item) internal view returns (address[]) {\r\n        return toAddresses(get(self, item.innerSet));\r\n    }\r\n\r\n    function get(Config storage self, CounterSet storage item) internal view returns (uint[]) {\r\n        return toUInt(get(self, item.innerSet));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32SetMapping storage item, bytes32 _key) internal view returns (bytes32[]) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, AddressesSetMapping storage item, bytes32 _key) internal view returns (address[]) {\r\n        return toAddresses(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(Config storage self, UIntSetMapping storage item, bytes32 _key) internal view returns (uint[]) {\r\n        return toUInt(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(Config storage self, Set storage item, uint _index) internal view returns (bytes32) {\r\n        return get(self, item, SET_IDENTIFIER, _index);\r\n    }\r\n\r\n    function get(Config storage self, Set storage item, bytes32 _salt, uint _index) private view returns (bytes32) {\r\n        return get(self, item.values, _salt, bytes32(_index+1));\r\n    }\r\n\r\n    function get(Config storage self, AddressesSet storage item, uint _index) internal view returns (address) {\r\n        return address(get(self, item.innerSet, _index));\r\n    }\r\n\r\n    function get(Config storage self, CounterSet storage item, uint _index) internal view returns (uint) {\r\n        return uint(get(self, item.innerSet, _index));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32SetMapping storage item, bytes32 _key, uint _index) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, _key, _index);\r\n    }\r\n\r\n    function get(Config storage self, AddressesSetMapping storage item, bytes32 _key, uint _index) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, _key, _index));\r\n    }\r\n\r\n    function get(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _index) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key, _index));\r\n    }\r\n\r\n    function getNextValue(Config storage self, OrderedSet storage item, bytes32 _value) internal view returns (bytes32) {\r\n        return getNextValue(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function getNextValue(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private view returns (bytes32) {\r\n        return get(self, item.nextValues, _salt, _value);\r\n    }\r\n\r\n    function getNextValue(Config storage self, OrderedUIntSet storage item, uint _value) internal view returns (uint) {\r\n        return uint(getNextValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function getNextValue(Config storage self, OrderedAddressesSet storage item, address _value) internal view returns (address) {\r\n        return address(getNextValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function getPreviousValue(Config storage self, OrderedSet storage item, bytes32 _value) internal view returns (bytes32) {\r\n        return getPreviousValue(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function getPreviousValue(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private view returns (bytes32) {\r\n        return get(self, item.previousValues, _salt, _value);\r\n    }\r\n\r\n    function getPreviousValue(Config storage self, OrderedUIntSet storage item, uint _value) internal view returns (uint) {\r\n        return uint(getPreviousValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function getPreviousValue(Config storage self, OrderedAddressesSet storage item, address _value) internal view returns (address) {\r\n        return address(getPreviousValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function toBool(bytes32 self) internal pure returns (bool) {\r\n        return self != bytes32(0);\r\n    }\r\n\r\n    function toBytes32(bool self) internal pure returns (bytes32) {\r\n        return bytes32(self ? 1 : 0);\r\n    }\r\n\r\n    function toAddresses(bytes32[] memory self) internal pure returns (address[]) {\r\n        address[] memory result = new address[](self.length);\r\n        for (uint i = 0; i < self.length; i++) {\r\n            result[i] = address(self[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function toUInt(bytes32[] memory self) internal pure returns (uint[]) {\r\n        uint[] memory result = new uint[](self.length);\r\n        for (uint i = 0; i < self.length; i++) {\r\n            result[i] = uint(self[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function _setOrderedSetLink(Config storage self, Mapping storage link, bytes32 _salt, bytes32 from, bytes32 to) private {\r\n        if (from != 0x0) {\r\n            set(self, link, _salt, from, to);\r\n        }\r\n    }\r\n\r\n    function _deleteOrderedSetLink(Config storage self, Mapping storage link, bytes32 _salt, bytes32 from) private {\r\n        if (from != 0x0) {\r\n            set(self, link, _salt, from, 0x0);\r\n        }\r\n    }\r\n\r\n    /** @title Structure to incapsulate and organize iteration through different kinds of collections */\r\n    struct Iterator {\r\n        uint limit;\r\n        uint valuesLeft;\r\n        bytes32 currentValue;\r\n        bytes32 anchorKey;\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item, bytes32 anchorKey, bytes32 startValue, uint limit) internal view returns (Iterator) {\r\n        if (startValue == 0x0) {\r\n            return listIterator(self, item, anchorKey, limit);\r\n        }\r\n\r\n        return createIterator(anchorKey, startValue, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item, bytes32 anchorKey, uint startValue, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, bytes32(startValue), limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item, bytes32 anchorKey, address startValue, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, bytes32(startValue), limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item, ORDERED_SET_IDENTIFIER, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item, bytes32 anchorKey, uint limit) internal view returns (Iterator) {\r\n        return createIterator(anchorKey, get(self, item.first, anchorKey), limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item, bytes32 anchorKey, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item, uint limit, bytes32 anchorKey) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item) internal view returns (Iterator) {\r\n        return listIterator(self, item, ORDERED_SET_IDENTIFIER);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item, bytes32 anchorKey) internal view returns (Iterator) {\r\n        return listIterator(self, item, anchorKey, get(self, item.count, anchorKey));\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item, bytes32 anchorKey) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item, bytes32 anchorKey) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey);\r\n    }\r\n\r\n    function listIterator(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function listIterator(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function listIterator(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function createIterator(bytes32 anchorKey, bytes32 startValue, uint limit) internal pure returns (Iterator) {\r\n        return Iterator({\r\n            currentValue: startValue,\r\n            limit: limit,\r\n            valuesLeft: limit,\r\n            anchorKey: anchorKey\r\n        });\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, OrderedSet storage item, Iterator iterator) internal view returns (bytes32 _nextValue) {\r\n        if (!canGetNextWithIterator(self, item, iterator)) { revert(); }\r\n\r\n        _nextValue = iterator.currentValue;\r\n\r\n        iterator.currentValue = getNextValue(self, item, iterator.anchorKey, iterator.currentValue);\r\n        iterator.valuesLeft -= 1;\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, OrderedUIntSet storage item, Iterator iterator) internal view returns (uint _nextValue) {\r\n        return uint(getNextWithIterator(self, item.innerSet, iterator));\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, OrderedAddressesSet storage item, Iterator iterator) internal view returns (address _nextValue) {\r\n        return address(getNextWithIterator(self, item.innerSet, iterator));\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, Bytes32OrderedSetMapping storage item, Iterator iterator) internal view returns (bytes32 _nextValue) {\r\n        return getNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, UIntOrderedSetMapping storage item, Iterator iterator) internal view returns (uint _nextValue) {\r\n        return uint(getNextWithIterator(self, item.innerMapping, iterator));\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, AddressOrderedSetMapping storage item, Iterator iterator) internal view returns (address _nextValue) {\r\n        return address(getNextWithIterator(self, item.innerMapping, iterator));\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, OrderedSet storage item, Iterator iterator) internal view returns (bool) {\r\n        if (iterator.valuesLeft == 0 || !includes(self, item, iterator.anchorKey, iterator.currentValue)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, OrderedUIntSet storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerSet, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, OrderedAddressesSet storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerSet, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, Bytes32OrderedSetMapping storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, UIntOrderedSetMapping storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, AddressOrderedSetMapping storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function count(Iterator iterator) internal pure returns (uint) {\r\n        return iterator.valuesLeft;\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-storage-lib/contracts/StorageAdapter.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\ncontract StorageAdapter {\r\n\r\n    using StorageInterface for *;\r\n\r\n    StorageInterface.Config internal store;\r\n\r\n    constructor(Storage _store, bytes32 _crate) public {\r\n        store.init(_store, _crate);\r\n    }\r\n}\r\n\r\n// File: contracts/assets/ChronoBankAssetAbstractCore.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract ChronoBankAssetAbstractCore {\r\n\r\n    using StorageInterface for *;\r\n\r\n    bytes32 constant CHRONOBANK_PLATFORM_CRATE = \"ChronoBankPlatform\";\r\n\r\n    StorageInterface.Config internal store;\r\n\r\n    /// @dev Assigned asset proxy contract\r\n    StorageInterface.Address internal proxyStorage;\r\n}\r\n\r\n\r\ncontract ChronoBankAssetAbstractRouter is StorageAdapter {\r\n\r\n    bytes32 constant CHRONOBANK_PLATFORM_CRATE = \"ChronoBankPlatform\";\r\n\r\n    /// @dev Assigned asset proxy contract\r\n    StorageInterface.Address internal proxyStorage;\r\n\r\n    constructor(Storage _platform, bytes32 _crate) StorageAdapter(_platform, _crate) public {\r\n        require(\r\n            _crate != CHRONOBANK_PLATFORM_CRATE,\r\n            \"ASSET_INVALID_CRATE\"\r\n        );\r\n\r\n        proxyStorage.init(\"proxy\");\r\n    }\r\n}\r\n\r\n// File: contracts/assets/ChronoBankAssetRouter.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract ChronoBankAssetRouterCore {\r\n    address public assetBackend;\r\n}\r\n\r\n\r\ncontract ChronoBankAssetRouter is\r\n    BaseByzantiumRouter,\r\n    ChronoBankAssetRouterCore,\r\n    ChronoBankAssetAbstractRouter\r\n{\r\n    constructor(Storage _platform, bytes32 _crate, address _assetBackend) ChronoBankAssetAbstractRouter(_platform, _crate) public {\r\n        require(_assetBackend != 0x0, \"ASSET_ROUTER_INVALID_BACKEND_ADDRESS\");\r\n\r\n        assetBackend = _assetBackend;\r\n    }\r\n\r\n    function implementation() internal view returns (address) {\r\n        return assetBackend;\r\n    }\r\n}\r\n\r\n// File: contracts/ChronoBankAssetInterface.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\ncontract ChronoBankAssetInterface {\r\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) public returns (bool);\r\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns (bool);\r\n    function __approve(address _spender, uint _value, address _sender) public returns(bool);\r\n    function __process(bytes /*_data*/, address /*_sender*/) public payable {\r\n        revert(\"ASSET_PROCESS_NOT_SUPPORTED\");\r\n    }\r\n}\r\n\r\n// File: contracts/ChronoBankAssetProxyInterface.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ncontract ChronoBankAssetProxyInterface {\r\n    address public chronoBankPlatform;\r\n    bytes32 public smbl;\r\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) public returns (bool);\r\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns (bool);\r\n    function __approve(address _spender, uint _value, address _sender) public returns (bool);\r\n    function getLatestVersion() public view returns (address);\r\n    function init(address _chronoBankPlatform, string _symbol, string _name) public;\r\n    function proposeUpgrade(address _newVersion) external returns (bool);\r\n}\r\n\r\ncontract ChronoBankAssetProxy is ChronoBankAssetProxyInterface {}\r\n\r\n// File: @laborx/solidity-eventshistory-lib/contracts/EventsHistorySourceAdapter.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title EventsHistory Source Adapter.\r\n */\r\ncontract EventsHistorySourceAdapter {\r\n\r\n    // It is address of MultiEventsHistory caller assuming we are inside of delegate call.\r\n    function _self()\r\n    internal\r\n    view\r\n    returns (address)\r\n    {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-eventshistory-lib/contracts/MultiEventsHistoryAdapter.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n/**\r\n * @title General MultiEventsHistory user.\r\n */\r\ncontract MultiEventsHistoryAdapter is EventsHistorySourceAdapter {\r\n\r\n    address internal localEventsHistory;\r\n\r\n    event ErrorCode(address indexed self, uint errorCode);\r\n\r\n    function getEventsHistory()\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        address _eventsHistory = localEventsHistory;\r\n        return _eventsHistory != 0x0 ? _eventsHistory : this;\r\n    }\r\n\r\n    function emitErrorCode(uint _errorCode) public {\r\n        emit ErrorCode(_self(), _errorCode);\r\n    }\r\n\r\n    function _setEventsHistory(address _eventsHistory) internal returns (bool) {\r\n        localEventsHistory = _eventsHistory;\r\n        return true;\r\n    }\r\n    \r\n    function _emitErrorCode(uint _errorCode) internal returns (uint) {\r\n        MultiEventsHistoryAdapter(getEventsHistory()).emitErrorCode(_errorCode);\r\n        return _errorCode;\r\n    }\r\n}\r\n\r\n// File: contracts/ChronoBankPlatformEmitter.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n/// @title ChronoBank Platform Emitter.\r\n///\r\n/// Contains all the original event emitting function definitions and events.\r\n/// In case of new events needed later, additional emitters can be developed.\r\n/// All the functions is meant to be called using delegatecall.\r\ncontract ChronoBankPlatformEmitter is MultiEventsHistoryAdapter {\r\n\r\n    event Transfer(address indexed from, address indexed to, bytes32 indexed symbol, uint value, string reference);\r\n    event Issue(bytes32 indexed symbol, uint value, address indexed by);\r\n    event Revoke(bytes32 indexed symbol, uint value, address indexed by);\r\n    event RevokeExternal(bytes32 indexed symbol, uint value, address indexed by, string externalReference);\r\n    event OwnershipChange(address indexed from, address indexed to, bytes32 indexed symbol);\r\n    event Approve(address indexed from, address indexed spender, bytes32 indexed symbol, uint value);\r\n    event Recovery(address indexed from, address indexed to, address by);\r\n\r\n    function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference) public {\r\n        emit Transfer(_from, _to, _symbol, _value, _reference);\r\n    }\r\n\r\n    function emitIssue(bytes32 _symbol, uint _value, address _by) public {\r\n        emit Issue(_symbol, _value, _by);\r\n    }\r\n\r\n    function emitRevoke(bytes32 _symbol, uint _value, address _by) public {\r\n        emit Revoke(_symbol, _value, _by);\r\n    }\r\n\r\n    function emitRevokeExternal(bytes32 _symbol, uint _value, address _by, string _externalReference) public {\r\n        emit RevokeExternal(_symbol, _value, _by, _externalReference);\r\n    }\r\n\r\n    function emitOwnershipChange(address _from, address _to, bytes32 _symbol) public {\r\n        emit OwnershipChange(_from, _to, _symbol);\r\n    }\r\n\r\n    function emitApprove(address _from, address _spender, bytes32 _symbol, uint _value) public {\r\n        emit Approve(_from, _spender, _symbol, _value);\r\n    }\r\n\r\n    function emitRecovery(address _from, address _to, address _by) public {\r\n        emit Recovery(_from, _to, _by);\r\n    }\r\n}\r\n\r\n// File: contracts/ChronoBankPlatformInterface.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\ncontract ChronoBankPlatformInterface is ChronoBankPlatformEmitter {\r\n    mapping(bytes32 => address) public proxies;\r\n\r\n    function symbols(uint _idx) public view returns (bytes32);\r\n    function symbolsCount() public view returns (uint);\r\n    function isCreated(bytes32 _symbol) public view returns(bool);\r\n    function isOwner(address _owner, bytes32 _symbol) public view returns(bool);\r\n    function owner(bytes32 _symbol) public view returns(address);\r\n\r\n    function setProxy(address _address, bytes32 _symbol) public returns(uint errorCode);\r\n\r\n    function name(bytes32 _symbol) public view returns(string);\r\n\r\n    function totalSupply(bytes32 _symbol) public view returns(uint);\r\n    function balanceOf(address _holder, bytes32 _symbol) public view returns(uint);\r\n    function allowance(address _from, address _spender, bytes32 _symbol) public view returns(uint);\r\n    function baseUnit(bytes32 _symbol) public view returns(uint8);\r\n    function description(bytes32 _symbol) public view returns(string);\r\n    function isReissuable(bytes32 _symbol) public view returns(bool);\r\n    function blockNumber(bytes32 _symbol) public view returns (uint);\r\n\r\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(uint errorCode);\r\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(uint errorCode);\r\n\r\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) public returns(uint errorCode);\r\n\r\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, uint _blockNumber) public returns(uint errorCode);\r\n    function issueAssetWithInitialReceiver(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, uint _blockNumber, address _account) public returns(uint errorCode);\r\n\r\n    function reissueAsset(bytes32 _symbol, uint _value) public returns(uint errorCode);\r\n    function reissueAssetToRecepient(bytes32 _symbol, uint _value, address _to) public returns (uint);\r\n\r\n    function revokeAsset(bytes32 _symbol, uint _value) public returns(uint errorCode);\r\n    function revokeAssetWithExternalReference(bytes32 _symbol, uint _value, string _externalReference) public returns (uint);\r\n\r\n    function hasAssetRights(address _owner, bytes32 _symbol) public view returns (bool);\r\n    function isDesignatedAssetManager(address _account, bytes32 _symbol) public view returns (bool);\r\n    function changeOwnership(bytes32 _symbol, address _newOwner) public returns(uint errorCode);\r\n}\r\n\r\ncontract ChronoBankPlatform is ChronoBankPlatformInterface {}\r\n\r\n// File: contracts/assets/ChronoBankAssetLibAbstract.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ChronoBankAssetLibAbstract is\r\n    ChronoBankAssetRouterCore,\r\n    ChronoBankAssetAbstractCore\r\n{\r\n    bytes32 constant CHRONOBANK_PLATFORM_CRATE = \"ChronoBankPlatform\";\r\n\r\n    /// @dev Only assets's admins are allowed to execute\r\n    modifier onlyAuthorized {\r\n        ChronoBankAssetProxy _proxy = proxy();\r\n        if (_chronoBankPlatform(_proxy).hasAssetRights(msg.sender, _proxy.smbl())) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @dev Only assigned proxy is allowed to call.\r\n    modifier onlyProxy {\r\n        if (msg.sender == address(proxy()) ||\r\n            msg.sender == address(ChronoBankAssetChainableInterface(this).getPreviousAsset())\r\n        ) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @notice Sets asset proxy address.\r\n    /// Can be set only once.\r\n    /// @dev function is final, and must not be overridden.\r\n    /// @param _proxy asset proxy contract address.\r\n    /// @return success.\r\n    function init(ChronoBankAssetProxy _proxy, bool _finalizeChaining)\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(\r\n            address(store.store) == _proxy.chronoBankPlatform(),\r\n            \"ASSET_LIB_INVALID_STORAGE_INITIALIZED\"\r\n        );\r\n\r\n        if (_finalizeChaining) {\r\n            ChronoBankAssetChainableInterface(this).finalizeAssetChaining();\r\n        }\r\n\r\n        address _gotProxy = proxy();\r\n        if (_gotProxy != 0x0 && address(_proxy) == _gotProxy) {\r\n            return true;\r\n        }\r\n\r\n        if (_gotProxy != 0x0) {\r\n            return false;\r\n        }\r\n\r\n        store.set(proxyStorage, address(_proxy));\r\n        return true;\r\n    }\r\n\r\n    function proxy()\r\n    public\r\n    view\r\n    returns (ChronoBankAssetProxy)\r\n    {\r\n        return ChronoBankAssetProxy(store.get(proxyStorage));\r\n    }\r\n\r\n    /// @notice Gets eventsHistory contract used for events' triggering\r\n    function getEventsHistory()\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        ChronoBankPlatform platform = _chronoBankPlatform(proxy());\r\n        address eventsHistory = platform.getEventsHistory();\r\n        return (eventsHistory != address(platform)) ? eventsHistory : address(this);\r\n    }\r\n\r\n    /// @notice Passes execution into virtual function.\r\n    /// Can only be called by assigned asset proxy.\r\n    /// @dev function is final, and must not be overridden.\r\n    /// @return success.\r\n    function __transferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender\r\n    )\r\n    public\r\n    onlyProxy\r\n    returns (bool _isSuccess)\r\n    {\r\n        if (!_beforeTransferWithReference(_to, _value, _reference, _sender)) {\r\n            return false;\r\n        }\r\n\r\n        ChronoBankAssetInterface _nextAsset = ChronoBankAssetInterface(ChronoBankAssetChainableInterface(this).getNextAsset());\r\n        if (address(_nextAsset) == 0x0 ||\r\n            _nextAsset.__transferWithReference(_to, _value, _reference, _sender)\r\n        ) {\r\n            return _afterTransferWithReference(_to, _value, _reference, _sender);\r\n        }\r\n    }\r\n\r\n    function _beforeTransferWithReference(\r\n        address /*_to*/,\r\n        uint /*_value*/,\r\n        string /*_reference*/,\r\n        address /*_sender*/\r\n    )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    function _afterTransferWithReference(\r\n        address /*_to*/,\r\n        uint /*_value*/,\r\n        string /*_reference*/,\r\n        address /*_sender*/\r\n    )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Passes execution into virtual function.\r\n    /// Can only be called by assigned asset proxy.\r\n    /// @dev function is final, and must not be overridden.\r\n    /// @return success.\r\n    function __transferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender\r\n    )\r\n    public\r\n    onlyProxy\r\n    returns (bool)\r\n    {\r\n        if (!_beforeTransferFromWithReference(_from, _to, _value, _reference, _sender)) {\r\n            return false;\r\n        }\r\n\r\n        ChronoBankAssetInterface _nextAsset = ChronoBankAssetInterface(ChronoBankAssetChainableInterface(this).getNextAsset());\r\n        if (address(_nextAsset) == 0x0 ||\r\n            _nextAsset.__transferFromWithReference(_from, _to, _value, _reference, _sender)\r\n        ) {\r\n            return _afterTransferFromWithReference(_from, _to, _value, _reference, _sender);\r\n        }\r\n    }\r\n\r\n    function _beforeTransferFromWithReference(\r\n        address /*_from*/,\r\n        address /*_to*/,\r\n        uint /*_value*/,\r\n        string /*_reference*/,\r\n        address /*_sender*/\r\n    )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    function _afterTransferFromWithReference(\r\n        address /*_from*/,\r\n        address /*_to*/,\r\n        uint /*_value*/,\r\n        string /*_reference*/,\r\n        address /*_sender*/\r\n    )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Passes execution into virtual function.\r\n    /// Can only be called by assigned asset proxy.\r\n    /// @dev function is final, and must not be overridden.\r\n    /// @return success.\r\n    function __approve(address _spender, uint _value, address _sender)\r\n    public\r\n    onlyProxy\r\n    returns (bool)\r\n    {\r\n        if (!_beforeApprove(_spender, _value, _sender)) {\r\n            return false;\r\n        }\r\n\r\n        ChronoBankAssetInterface _nextAsset = ChronoBankAssetInterface(ChronoBankAssetChainableInterface(this).getNextAsset());\r\n        if (address(_nextAsset) == 0x0 ||\r\n            _nextAsset.__approve(_spender, _value, _sender)\r\n        ) {\r\n            return _afterApprove(_spender, _value, _sender);\r\n        }\r\n    }\r\n\r\n    function _beforeApprove(address /*_spender*/, uint /*_value*/, address /*_sender*/)\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    function _afterApprove(address /*_spender*/, uint /*_value*/, address /*_sender*/)\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    function _chronoBankPlatform(address _proxy)\r\n    internal\r\n    view\r\n    returns (ChronoBankPlatform)\r\n    {\r\n        return ChronoBankPlatform(ChronoBankAssetProxy(_proxy).chronoBankPlatform());\r\n    }\r\n}\r\n\r\n// File: contracts/assets/basic/ChronoBankAssetBasicLibAbstract.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract ChronoBankAssetBasicLibAbstract is ChronoBankAssetLibAbstract {    \r\n\r\n    function _beforeTransferWithReference(\r\n        address, \r\n        uint, \r\n        string, \r\n        address\r\n    )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Calls back without modifications if an asset is not stopped.\r\n    /// Checks whether _from/_sender are not in blacklist.\r\n    /// @dev function is virtual, and meant to be overridden.\r\n    /// @return success.\r\n    function _afterTransferWithReference(\r\n        address _to, \r\n        uint _value, \r\n        string _reference, \r\n        address _sender\r\n    )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return proxy().__transferWithReference(_to, _value, _reference, _sender);\r\n    }\r\n\r\n    function _beforeTransferFromWithReference(\r\n        address, \r\n        address, \r\n        uint, \r\n        string, \r\n        address\r\n    )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Calls back without modifications if an asset is not stopped.\r\n    /// Checks whether _from/_sender are not in blacklist.\r\n    /// @dev function is virtual, and meant to be overridden.\r\n    /// @return success.\r\n    function _afterTransferFromWithReference(\r\n        address _from, \r\n        address _to, \r\n        uint _value, \r\n        string _reference, \r\n        address _sender\r\n    )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return proxy().__transferFromWithReference(_from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    function _beforeApprove(address, uint, address)\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Calls back without modifications.\r\n    /// @dev function is virtual, and meant to be overridden.\r\n    /// @return success.\r\n    function _afterApprove(address _spender, uint _value, address _sender)\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return proxy().__approve(_spender, _value, _sender);\r\n    }\r\n}\r\n\r\n// File: contracts/assets/ChronoBankAssetUtils.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\nlibrary ChronoBankAssetUtils {\r\n\r\n    uint constant ASSETS_CHAIN_MAX_LENGTH = 20;\r\n\r\n    function getChainedAssets(ChronoBankAssetChainableInterface _asset)\r\n    public\r\n    view\r\n    returns (bytes32[] _types, address[] _assets)\r\n    {\r\n        bytes32[] memory _tempTypes = new bytes32[](ASSETS_CHAIN_MAX_LENGTH);\r\n        address[] memory _tempAssets = new address[](ASSETS_CHAIN_MAX_LENGTH);\r\n\r\n        ChronoBankAssetChainableInterface _next = getHeadAsset(_asset);\r\n        uint _counter = 0;\r\n        do {\r\n            _tempTypes[_counter] = _next.assetType();\r\n            _tempAssets[_counter] = address(_next);\r\n            _counter += 1;\r\n\r\n            _next = _next.getNextAsset();\r\n        } while (address(_next) != 0x0);\r\n\r\n        _types = new bytes32[](_counter);\r\n        _assets = new address[](_counter);\r\n        for (uint _assetIdx = 0; _assetIdx < _counter; ++_assetIdx) {\r\n            _types[_assetIdx] = _tempTypes[_assetIdx];\r\n            _assets[_assetIdx] = _tempAssets[_assetIdx];\r\n        }\r\n    }\r\n\r\n    function getAssetByType(ChronoBankAssetChainableInterface _asset, bytes32 _assetType)\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        ChronoBankAssetChainableInterface _next = getHeadAsset(_asset);\r\n        do {\r\n            if (_next.assetType() == _assetType) {\r\n                return address(_next);\r\n            }\r\n\r\n            _next = _next.getNextAsset();\r\n        } while (address(_next) != 0x0);\r\n    }\r\n\r\n    function containsAssetInChain(ChronoBankAssetChainableInterface _asset, address _checkAsset)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        ChronoBankAssetChainableInterface _next = getHeadAsset(_asset);\r\n        do {\r\n            if (address(_next) == _checkAsset) {\r\n                return true;\r\n            }\r\n\r\n            _next = _next.getNextAsset();\r\n        } while (address(_next) != 0x0);\r\n    }\r\n\r\n    function getHeadAsset(ChronoBankAssetChainableInterface _asset)\r\n    public\r\n    view\r\n    returns (ChronoBankAssetChainableInterface)\r\n    {\r\n        ChronoBankAssetChainableInterface _head = _asset;\r\n        ChronoBankAssetChainableInterface _previousAsset;\r\n        do {\r\n            _previousAsset = _head.getPreviousAsset();\r\n            if (address(_previousAsset) == 0x0) {\r\n                return _head;\r\n            }\r\n            _head = _previousAsset;\r\n        } while (true);\r\n    }\r\n}\r\n\r\n// File: contracts/assets/ChronoBankAssetChainableImpl.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ChronoBankAssetChainableCore {\r\n\r\n    uint constant ASSETS_CHAIN_MAX_LENGTH = 20;\r\n\r\n    ChronoBankAssetChainableInterface internal previousAsset;\r\n    ChronoBankAssetChainableInterface internal nextAsset;\r\n    bool public chainingFinalized;\r\n\r\n    string public version = \"v0.0.1\";\r\n}\r\n\r\n\r\ncontract ChronoBankAssetChainableImpl is\r\n    ChronoBankAssetChainableInterface,\r\n    ChronoBankAssetChainableCore\r\n{\r\n    modifier onlyNotFinalizedChaining {\r\n        require(chainingFinalized == false, \"ASSET_CHAIN_SHOULD_NOT_BE_IN_FINALIZED_CHAINING\");\r\n        _;\r\n    }\r\n\r\n    function assetType()\r\n    public\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        revert(\"INVALID_INVOCATION_IMPLEMENT_ASSET_TYPE_FUNCTION\");\r\n    }\r\n\r\n    function getPreviousAsset()\r\n    public\r\n    view\r\n    returns (ChronoBankAssetChainableInterface)\r\n    {\r\n        return previousAsset;\r\n    }\r\n\r\n    function getNextAsset()\r\n    public\r\n    view\r\n    returns (ChronoBankAssetChainableInterface)\r\n    {\r\n        return nextAsset;\r\n    }\r\n\r\n    function getChainedAssets()\r\n    public\r\n    view\r\n    returns (bytes32[] _types, address[] _assets)\r\n    {\r\n        return ChronoBankAssetUtils.getChainedAssets(this);\r\n    }\r\n\r\n    function getAssetByType(bytes32 _assetType)\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        return ChronoBankAssetUtils.getAssetByType(this, _assetType);\r\n    }\r\n\r\n    function chainAssets(ChronoBankAssetChainableInterface[] _assets)\r\n    external\r\n    onlyNotFinalizedChaining\r\n    returns (bool)\r\n    {\r\n        require(_assets.length - 1 <= ASSETS_CHAIN_MAX_LENGTH, \"ASSET_CHAIN_MAX_ASSETS_EXCEEDED\");\r\n        require(address(previousAsset) == 0x0, \"ASSET_CHAIN_HEAD_ASSET_SHOULD_NOT_HAVE_PREVIOUS_LINK\");\r\n\r\n        if (_assets.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        return _chainAssets(_assets, 0);\r\n    }\r\n\r\n    function _chainAssets(ChronoBankAssetChainableInterface[] _assets, uint _startFromIdx)\r\n    private\r\n    returns (bool _result)\r\n    {\r\n        nextAsset = _assets[_startFromIdx];\r\n        require(\r\n            ChronoBankAssetChainableImpl(_assets[_startFromIdx]).__setPreviousAsset(this),\r\n            \"ASSET_CHAIN_CANNOT_SETUP_PREVIOUS_IN_CHAIN\");\r\n\r\n        _result = ChronoBankAssetChainableImpl(_assets[_startFromIdx]).__chainAssetsFromIdx(_assets, _startFromIdx + 1);\r\n        if (_result) {\r\n            chainingFinalized = true;\r\n        }\r\n    }\r\n\r\n    function __chainAssetsFromIdx(ChronoBankAssetChainableInterface[] _assets, uint _startFromIdx)\r\n    external\r\n    onlyNotFinalizedChaining\r\n    returns (bool)\r\n    {\r\n        require(msg.sender == address(previousAsset), \"ASSET_CHAIN_SENDER_SHOULD_BE_ASSET\");\r\n        require(_assets[_startFromIdx - 1] == this, \"ASSET_CHAIN_RECEIVER_SHOULD_BE_FIRST_IN_ARRAY\");\r\n\r\n        if (_startFromIdx >= _assets.length) {\r\n            chainingFinalized = true;\r\n            return true;\r\n        }\r\n\r\n        return _chainAssets(_assets, _startFromIdx);\r\n    }\r\n\r\n    function __setPreviousAsset(ChronoBankAssetChainableInterface _asset)\r\n    external\r\n    onlyNotFinalizedChaining\r\n    returns (bool)\r\n    {\r\n        require(msg.sender == address(_asset), \"ASSET_CHAIN_SENDER_SHOULD_SEND_HIMSELF\");\r\n        // require(address(_asset.getNextAsset()) == address(this), \"Only when `next` property set to the current asset\");\r\n        previousAsset = _asset;\r\n\r\n        return true;\r\n    }\r\n\r\n    function finalizeAssetChaining()\r\n    public\r\n    {\r\n        if (!chainingFinalized) {\r\n            chainingFinalized = true;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/assets/basic/ChronoBankAssetBasicLib.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract ChronoBankAssetBasicLib is \r\n    ChronoBankAssetBasicLibAbstract,\r\n    ChronoBankAssetChainableImpl\r\n{    \r\n    function assetType()\r\n    public\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        return \"ChronoBankAssetBasic\";\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"assetType\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__transferWithReference\",\"outputs\":[{\"name\":\"_isSuccess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"__setPreviousAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChainedAssets\",\"outputs\":[{\"name\":\"_types\",\"type\":\"bytes32[]\"},{\"name\":\"_assets\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"chainAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetBackend\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeAssetChaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetType\",\"type\":\"bytes32\"}],\"name\":\"getAssetByType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreviousAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assets\",\"type\":\"address[]\"},{\"name\":\"_startFromIdx\",\"type\":\"uint256\"}],\"name\":\"__chainAssetsFromIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_finalizeChaining\",\"type\":\"bool\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainingFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__transferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEventsHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChronoBankAssetBasicLib","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"ChronoBankAssetUtils:1c1d1d619e1f0e09ffe03cc33d5e7589191c6cfc","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a413291d0c123677d9e7c2bff96c552bb210e1137cd9300e4cc9b6e3ef49e1ab"}]}