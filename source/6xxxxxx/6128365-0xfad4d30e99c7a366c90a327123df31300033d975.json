{"status":"1","message":"OK","result":[{"SourceCode":"/* 一个相对比较完善的代币合约 */\r\npragma solidity ^0.4.24;\r\n/* 创建一个父类， 账户管理员 */\r\ncontract owned {\r\n\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /* modifier是修改标志 */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /* 修改管理员账户， onlyOwner代表只能是用户管理员来修改 */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/* receiveApproval服务合约指示代币合约将代币从发送者的账户转移到服务合约的账户（通过调用服务合约的 */\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 {\r\n    // 代币（token）的公共变量\r\n    string public name;             //代币名字\r\n    string public symbol;           //代币符号\r\n    uint8 public decimals = 18;     //代币小数点位数， 18是默认， 尽量不要更改\r\n\r\n    uint256 public totalSupply;     //代币总量\r\n\r\n    // 记录各个账户的代币数目\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // A账户存在B账户资金\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // 转账通知事件\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // 销毁金额通知事件\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /* 构造函数 */\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // 根据decimals计算代币的数量\r\n        balanceOf[msg.sender] = totalSupply;                    // 给生成者所有的代币数量\r\n        name = tokenName;                                       // 设置代币的名字\r\n        symbol = tokenSymbol;                                   // 设置代币的符号\r\n    }\r\n\r\n    /* 私有的交易函数 */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // 防止转移到0x0， 用burn代替这个功能\r\n        require(_to != 0x0);\r\n        // 检测发送者是否有足够的资金\r\n        require(balanceOf[_from] >= _value);\r\n        // 检查是否溢出（数据类型的溢出）\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // 将此保存为将来的断言， 函数最后会有一个检验\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // 减少发送者资产\r\n        balanceOf[_from] -= _value;\r\n        // 增加接收者的资产\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // 断言检测， 不应该为错\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /* 传递tokens */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /* 从其他账户转移资产 */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /*  授权第三方从发送者账户转移代币，然后通过transferFrom()函数来执行第三方的转移操作 */\r\n//    function approve(address _spender, uint256 _value) public\r\n//    returns (bool success) {\r\n//        allowance[msg.sender][_spender] = _value;\r\n//        return true;\r\n//    }\r\n\r\n    /*\r\n    为其他地址设置津贴， 并通知\r\n    发送者通知代币合约, 代币合约通知服务合约receiveApproval, 服务合约指示代币合约将代币从发送者的账户转移到服务合约的账户（通过调用服务合约的transferFrom)\r\n    */\r\n\r\n//    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n//    public\r\n//    returns (bool success) {\r\n//        tokenRecipient spender = tokenRecipient(_spender);\r\n//        if (approve(_spender, _value)) {\r\n//            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n//            return true;\r\n//        }\r\n//    }\r\n\r\n    /**\r\n    * 销毁代币\r\n    */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * 从其他账户销毁代币\r\n    */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract MyAdvancedToken is owned, TokenERC20 {\r\n\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n\r\n    /* 冻结账户 */\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /*\r\n    * 冻结账户金额\r\n    * 涉及到frozenAccountCoin, freezeAccountCoin\r\n    */\r\n    // mapping (address => uint256) public frozenAccountCoin;\r\n\r\n    /*\r\n    * 根据时间冻结账户金额\r\n    */\r\n    mapping(address => uint[]) public frozenAccountCoinList;\r\n\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n    // event FrozenCoins(address target, uint256 coinNum);\r\n    event FrozenCoinsByTime(address target, uint256 coinNum, uint256 timestamp);\r\n\r\n    /* 构造函数 */\r\n    function MyAdvancedToken(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n    /* 转账， 比父类加入了账户冻结 */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\r\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        uint frozenAccountCoin = _calFrozenAccountCoin(_from);\r\n        // 确保账户锁\r\n        require(frozenAccountCoin == 0 || (balanceOf[_from] - _value) >= frozenAccountCoin);\r\n\r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /// 向指定账户增发资金\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n\r\n    }\r\n\r\n    /// 冻结 or 解冻账户\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n\r\n    /// 冻结 or 解冻账户\r\n//    function freezeAccountCoin(address target, uint256 coinNum) onlyOwner public {\r\n//        frozenAccountCoin[target] = coinNum;\r\n//        FrozenCoins(target, coinNum);\r\n//    }\r\n\r\n\r\n    function frozenAccountCoinByTime(address target, uint timestamp, uint256 num) onlyOwner public{\r\n        // 根据时间冻结货币\r\n        frozenAccountCoinList[target].push(timestamp);\r\n        frozenAccountCoinList[target].push(num);\r\n        FrozenCoinsByTime(target, num, timestamp);\r\n    }\r\n\r\n    function frozenAccountCoinByHour(address target, uint hourCount, uint256 num) onlyOwner public{\r\n        // 规定小时内冻结货币\r\n        uint timestamp = now + hourCount * 3600;\r\n        frozenAccountCoinList[target].push(timestamp);\r\n        frozenAccountCoinList[target].push(num);\r\n        FrozenCoinsByTime(target, num, timestamp);\r\n    }\r\n\r\n    function _calFrozenAccountCoin(address target) public returns(uint num){\r\n        for(uint i = 0; i < frozenAccountCoinList[target].length; i++) {\r\n            if (now <= frozenAccountCoinList[target][i]){\r\n                i = i + 1;\r\n                num = num + frozenAccountCoinList[target][i];\r\n            }else{\r\n                i = i + 1;\r\n            }\r\n        }\r\n        return num;\r\n    }\r\n\r\n    function getFrozenAccountCoinCount(address target) onlyOwner view public returns(uint num){\r\n        num = _calFrozenAccountCoin(target);\r\n        return num;\r\n    }\r\n\r\n    /* 从其他账户转移资产 */\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyOwner public returns (bool success) {\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 销毁其他账户代币\r\n     */\r\n    function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        //require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        //allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n//    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n//        sellPrice = newSellPrice;\r\n//        buyPrice = newBuyPrice;\r\n//    }\r\n//\r\n//    /// @notice Buy tokens from contract by sending ether\r\n//    function buy() payable public {\r\n//        uint amount = msg.value / buyPrice;               // calculates the amount\r\n//        _transfer(this, msg.sender, amount);              // makes the transfers\r\n//    }\r\n//\r\n//    function sell(uint256 amount) public {\r\n//        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\r\n//        _transfer(msg.sender, this, amount);              // makes the transfers\r\n//        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n//    }\r\n\r\n//    function aa() view public returns(address aa){\r\n//        return msg.sender;\r\n//    }\r\n//\r\n//    function bb() view public returns(address bb){\r\n//        return owner;\r\n//    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"_calFrozenAccountCoin\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"frozenAccountCoinByTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"hourCount\",\"type\":\"uint256\"},{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"frozenAccountCoinByHour\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getFrozenAccountCoinCount\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozenAccountCoinList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"coinNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FrozenCoinsByTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MyAdvancedToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000b436f736d6f73436861696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003434f530000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://fa62b3b64abfbf00070006548306123b9aa308d357d19391e7eb8d49a82dad3e"}]}