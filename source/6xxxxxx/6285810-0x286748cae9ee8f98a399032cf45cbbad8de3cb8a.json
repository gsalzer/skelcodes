{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract MathLib \r\n{\r\n    function add(uint256 x, uint256 y) pure internal returns (uint256 z) \r\n    {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) pure internal returns (uint256 z) \r\n    {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) pure internal returns (uint256 z) \r\n    {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) pure internal returns (uint256 z) \r\n    {\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) pure internal returns (uint256 z) \r\n    {\r\n        return x <= y ? x : y;\r\n    }\r\n    \r\n    function max(uint256 x, uint256 y) pure internal returns (uint256 z) \r\n    {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 \r\n{\r\n    function totalSupply() public constant returns (uint supply);\r\n    function balanceOf(address who) public constant returns (uint value);\r\n    function allowance(address owner, address spender) public constant returns (uint _allowance);\r\n\r\n    function transfer(address to, uint value) public returns (bool ok);\r\n    function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n    function approve(address spender, uint value) public returns (bool ok);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract TokenBase is ERC20, MathLib \r\n{\r\n    uint256                                            _supply;\r\n    mapping (address => uint256)                       _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n    \r\n    constructor(uint256 supply) public \r\n    {\r\n        _balances[msg.sender] = supply;\r\n        _supply = supply;\r\n    }\r\n    \r\n    function totalSupply() public constant returns (uint256) \r\n    {\r\n        return _supply;\r\n    }\r\n    \r\n    function balanceOf(address src) public constant returns (uint256) \r\n    {\r\n        return _balances[src];\r\n    }\r\n    \r\n    function allowance(address src, address guy) public constant returns (uint256) \r\n    {\r\n        return _approvals[src][guy];\r\n    }\r\n    \r\n    function transfer(address dst, uint wad) public returns (bool) \r\n    {\r\n        assert(_balances[msg.sender] >= wad);\r\n        \r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n        \r\n        emit Transfer(msg.sender, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address src, address dst, uint wad) public returns (bool)\r\n    {\r\n        assert(_balances[src] >= wad);\r\n        assert(_approvals[src][msg.sender] >= wad);\r\n        \r\n        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n        \r\n        emit Transfer(src, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address guy, uint256 wad) public returns (bool)\r\n    {\r\n        _approvals[msg.sender][guy] = wad;\r\n        \r\n        emit Approval(msg.sender, guy, wad);\r\n        \r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ninterface GatewayVote \r\n{\r\n    function burnForGateway(address from, string receiver, uint64 wad) external;\r\n}\r\n\r\ncontract WBCHToken is TokenBase(0) \r\n{\r\n\r\n    uint8   public  decimals = 8;\r\n    address private Gateway;\r\n        \r\n    string  public  name   = \"Wrapped BCH (BCH-MALLOW-ETH for standard)\";\r\n    string  public  symbol = \"WBCH\";\r\n    \r\n    \r\n    event Mint(address receiver, uint64 wad);\r\n    event Burn(address from, string receiver, uint64 wad);\r\n    event GatewayChangedTo(address newer);\r\n\r\n    constructor(address gateway) public\r\n    {\r\n        Gateway = gateway;\r\n        emit GatewayChangedTo(Gateway);\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool)\r\n    {\r\n        return super.transfer(dst, wad);\r\n    }\r\n    \r\n    function transferFrom(address src, address dst, uint wad) public returns (bool) \r\n    {\r\n        return super.transferFrom(src, dst, wad);\r\n    }\r\n    \r\n    function approve(address guy, uint wad) public returns (bool) \r\n    {\r\n        return super.approve(guy, wad);\r\n    }\r\n\r\n    function mint(address receiver, uint64 wad) external returns (bool)\r\n    {\r\n        require(msg.sender == Gateway);\r\n        \r\n        _balances[receiver] = add(_balances[receiver], wad);\r\n        _supply = add(_supply, wad);\r\n        \r\n        emit Mint(receiver, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function changeGatewayAddr(address newer) external returns (bool)\r\n    {\r\n        require(msg.sender == Gateway);\r\n        Gateway = newer;\r\n        \r\n        emit GatewayChangedTo(Gateway);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function burn(uint64 wad, string receiver) external\r\n    {\r\n        assert(_balances[msg.sender] >= wad);\r\n        \r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _supply = sub(_supply, wad);\r\n        \r\n        emit Burn(msg.sender, receiver, wad);\r\n        \r\n        GatewayVote(Gateway).burnForGateway(msg.sender, receiver, wad);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newer\",\"type\":\"address\"}],\"name\":\"changeGatewayAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint64\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint64\"},{\"name\":\"receiver\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"gateway\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint64\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint64\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newer\",\"type\":\"address\"}],\"name\":\"GatewayChangedTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WBCHToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d9c422d2205248e7ec4d4c21a6b270baa66784c0","Library":"","SwarmSource":"bzzr://6409e536414ab352f6cf6df1e7b655cddec412e11cb7426040f5da78a0fc3460"}]}