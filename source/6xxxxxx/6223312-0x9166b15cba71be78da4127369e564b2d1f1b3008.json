{"status":"1","message":"OK","result":[{"SourceCode":"contract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary Utils {\r\n     /* Not secured random number generation, but it's enough for the perpose of implementaion particular case*/\r\n    function almostRnd(uint min, uint max) internal view returns(uint)\r\n    {\r\n        return uint(keccak256(block.timestamp, block.blockhash(block.number))) % (max - min) + min;\r\n    }\r\n}\r\ncontract EternalStorage {\r\n\r\n    /**** Storage Types *******/\r\n\r\n    address public owner;\r\n\r\n    mapping(bytes32 => uint256)    private uIntStorage;\r\n    mapping(bytes32 => uint8)      private uInt8Storage;\r\n    mapping(bytes32 => string)     private stringStorage;\r\n    mapping(bytes32 => address)    private addressStorage;\r\n    mapping(bytes32 => bytes)      private bytesStorage;\r\n    mapping(bytes32 => bool)       private boolStorage;\r\n    mapping(bytes32 => int256)     private intStorage;\r\n    mapping(bytes32 => bytes32)    private bytes32Storage;\r\n\r\n\r\n    /*** Modifiers ************/\r\n\r\n    /// @dev Only allow access from the latest version of a contract in the Rocket Pool network after deployment\r\n    modifier onlyLatestContract() {\r\n        require(addressStorage[keccak256(\"contract.address\", msg.sender)] != 0x0 || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev constructor\r\n    function EternalStorage() public {\r\n        owner = msg.sender;\r\n        addressStorage[keccak256(\"contract.address\", msg.sender)] = msg.sender;\r\n    }\r\n\r\n    function setOwner() public {\r\n        require(msg.sender == owner);\r\n        addressStorage[keccak256(\"contract.address\", owner)] = 0x0;\r\n        owner = msg.sender;\r\n        addressStorage[keccak256(\"contract.address\", msg.sender)] = msg.sender;\r\n    }\r\n\r\n    /**** Get Methods ***********/\r\n\r\n    /// @param _key The key for the record\r\n    function getAddress(bytes32 _key) external view returns (address) {\r\n        return addressStorage[_key];\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function getUint(bytes32 _key) external view returns (uint) {\r\n        return uIntStorage[_key];\r\n    }\r\n\r\n      /// @param _key The key for the record\r\n    function getUint8(bytes32 _key) external view returns (uint8) {\r\n        return uInt8Storage[_key];\r\n    }\r\n\r\n\r\n    /// @param _key The key for the record\r\n    function getString(bytes32 _key) external view returns (string) {\r\n        return stringStorage[_key];\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function getBytes(bytes32 _key) external view returns (bytes) {\r\n        return bytesStorage[_key];\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function getBytes32(bytes32 _key) external view returns (bytes32) {\r\n        return bytes32Storage[_key];\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function getBool(bytes32 _key) external view returns (bool) {\r\n        return boolStorage[_key];\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function getInt(bytes32 _key) external view returns (int) {\r\n        return intStorage[_key];\r\n    }\r\n\r\n    /**** Set Methods ***********/\r\n\r\n    /// @param _key The key for the record\r\n    function setAddress(bytes32 _key, address _value) onlyLatestContract external {\r\n        addressStorage[_key] = _value;\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function setUint(bytes32 _key, uint _value) onlyLatestContract external {\r\n        uIntStorage[_key] = _value;\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function setUint8(bytes32 _key, uint8 _value) onlyLatestContract external {\r\n        uInt8Storage[_key] = _value;\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function setString(bytes32 _key, string _value) onlyLatestContract external {\r\n        stringStorage[_key] = _value;\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function setBytes(bytes32 _key, bytes _value) onlyLatestContract external {\r\n        bytesStorage[_key] = _value;\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function setBytes32(bytes32 _key, bytes32 _value) onlyLatestContract external {\r\n        bytes32Storage[_key] = _value;\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function setBool(bytes32 _key, bool _value) onlyLatestContract external {\r\n        boolStorage[_key] = _value;\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function setInt(bytes32 _key, int _value) onlyLatestContract external {\r\n        intStorage[_key] = _value;\r\n    }\r\n\r\n    /**** Delete Methods ***********/\r\n\r\n    /// @param _key The key for the record\r\n    function deleteAddress(bytes32 _key) onlyLatestContract external {\r\n        delete addressStorage[_key];\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteUint(bytes32 _key) onlyLatestContract external {\r\n        delete uIntStorage[_key];\r\n    }\r\n\r\n     /// @param _key The key for the record\r\n    function deleteUint8(bytes32 _key) onlyLatestContract external {\r\n        delete uInt8Storage[_key];\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteString(bytes32 _key) onlyLatestContract external {\r\n        delete stringStorage[_key];\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteBytes(bytes32 _key) onlyLatestContract external {\r\n        delete bytesStorage[_key];\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteBytes32(bytes32 _key) onlyLatestContract external {\r\n        delete bytes32Storage[_key];\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteBool(bytes32 _key) onlyLatestContract external {\r\n        delete boolStorage[_key];\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteInt(bytes32 _key) onlyLatestContract external {\r\n        delete intStorage[_key];\r\n    }\r\n}\r\n\r\ncontract EIP20 {\r\n    /* This is a slight change to the ERC20 base standard.\r\n    function totalSupply() constant returns (uint256 supply);\r\n    is replaced with:\r\n    uint256 public totalSupply;\r\n    This automatically creates a getter function for the totalSupply.\r\n    This is moved to the base contract since public getter functions are not\r\n    currently recognised as an implementation of the matching abstract\r\n    function by the compiler.\r\n    */\r\n    /// total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name  \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\ncontract Token {\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256 remaining);\r\n}\r\ncontract IBoardConfig is Ownable {\r\n\r\n    uint constant decimals = 10 ** uint(18);\r\n    uint8 public version;\r\n\r\n    function resetValuesToDefault() external;\r\n\r\n    function setStorageAddress(address storageAddress) external;\r\n\r\n    function getRefereeFee() external view returns (uint);\r\n    function getRefereeFeeEth() external view returns(uint);\r\n\r\n    function getVoteTokenPrice() external view returns (uint);\r\n    function setVoteTokenPrice(uint value) external;\r\n\r\n    function getVoteTokenPriceEth() external view returns (uint);\r\n    function setVoteTokenPriceEth(uint value) external;\r\n\r\n    function getVoteTokensPerRequest() external view returns (uint);\r\n    function setVoteTokensPerRequest(uint voteTokens) external;\r\n\r\n    function getTimeToStartVotingCase() external view returns (uint);\r\n    function setTimeToStartVotingCase(uint value) external;\r\n\r\n    function getTimeToRevealVotesCase() external view returns (uint);\r\n    function setTimeToRevealVotesCase(uint value) external;\r\n\r\n    function getTimeToCloseCase() external view returns (uint);\r\n    function setTimeToCloseCase(uint value) external;\r\n\r\n    function getRefereeCountPerCase() external view returns(uint);\r\n    function setRefereeCountPerCase(uint refereeCount) external;\r\n\r\n    function getRefereeNeedCountPerCase() external view returns(uint);\r\n    function setRefereeNeedCountPerCase(uint refereeCount) external;\r\n\r\n    function getFullConfiguration()\r\n    external view returns(\r\n        uint voteTokenPrice, uint voteTokenPriceEth, uint voteTokenPerRequest,\r\n        uint refereeCountPerCase, uint refereeNeedCountPerCase,\r\n        uint timeToStartVoting, uint timeToRevealVotes, uint timeToClose\r\n    );\r\n\r\n    function getCaseDatesFromNow() public view returns(uint[] dates);\r\n\r\n}\r\nlibrary RefereeCasesLib {\r\n\r\n    function setRefereesToCase(address storageAddress, address[] referees, bytes32 caseId) public {\r\n        for (uint i = 0; i < referees.length; i++) {\r\n            setRefereeToCase(storageAddress, referees[i], caseId, i);\r\n        }\r\n        setRefereeCountForCase(storageAddress, caseId, referees.length);\r\n    }\r\n\r\n    function isRefereeVoted(address storageAddress, address referee, bytes32 caseId) public view returns (bool) {\r\n        return EternalStorage(storageAddress).getBool(keccak256(\"case.referees.voted\", caseId, referee));\r\n    }\r\n\r\n    function setRefereeVote(address storageAddress, bytes32 caseId, address referee, bool forApplicant) public {\r\n        uint index = getRefereeVotesFor(storageAddress, caseId, forApplicant);\r\n        EternalStorage(storageAddress).setAddress(keccak256(\"case.referees.vote\", caseId, forApplicant, index), referee);\r\n        setRefereeVotesFor(storageAddress, caseId,  forApplicant, index + 1);\r\n    }\r\n\r\n    function getRefereeVoteForByIndex(address storageAddress, bytes32 caseId, bool forApplicant, uint index) public view returns (address) {\r\n        return EternalStorage(storageAddress).getAddress(keccak256(\"case.referees.vote\", caseId, forApplicant, index));\r\n    }\r\n\r\n    function getRefereeVotesFor(address storageAddress, bytes32 caseId, bool forApplicant) public view returns (uint) {\r\n        return EternalStorage(storageAddress).getUint(keccak256(\"case.referees.votes.count\", caseId, forApplicant));\r\n    }\r\n\r\n    function setRefereeVotesFor(address storageAddress, bytes32 caseId, bool forApplicant, uint votes) public {\r\n        EternalStorage(storageAddress).setUint(keccak256(\"case.referees.votes.count\", caseId, forApplicant), votes);\r\n    }\r\n\r\n    function getRefereeCountByCase(address storageAddress, bytes32 caseId) public view returns (uint) {\r\n        return EternalStorage(storageAddress).getUint(keccak256(\"case.referees.count\", caseId));\r\n    }\r\n\r\n    function setRefereeCountForCase(address storageAddress, bytes32 caseId, uint value) public {\r\n        EternalStorage(storageAddress).setUint(keccak256(\"case.referees.count\", caseId), value);\r\n    }\r\n\r\n    function getRefereeByCase(address storageAddress, bytes32 caseId, uint index) public view returns (address) {\r\n        return EternalStorage(storageAddress).getAddress(keccak256(\"case.referees\", caseId, index));\r\n    }\r\n\r\n    function isRefereeSetToCase(address storageAddress, address referee, bytes32 caseId) public view returns(bool) {\r\n        return EternalStorage(storageAddress).getBool(keccak256(\"case.referees\", caseId, referee));\r\n    }\r\n    \r\n    function setRefereeToCase(address storageAddress, address referee, bytes32 caseId, uint index) public {\r\n        EternalStorage st = EternalStorage(storageAddress);\r\n        st.setAddress(keccak256(\"case.referees\", caseId, index), referee);\r\n        st.setBool(keccak256(\"case.referees\", caseId, referee), true);\r\n    }\r\n\r\n    function getRefereeVoteHash(address storageAddress, bytes32 caseId, address referee) public view returns (bytes32) {\r\n        return EternalStorage(storageAddress).getBytes32(keccak256(\"case.referees.vote.hash\", caseId, referee));\r\n    }\r\n\r\n    function setRefereeVoteHash(address storageAddress, bytes32 caseId, address referee, bytes32 voteHash) public {\r\n        uint caseCount = getRefereeVoteHashCount(storageAddress, caseId);\r\n        EternalStorage(storageAddress).setBool(keccak256(\"case.referees.voted\", caseId, referee), true);\r\n        EternalStorage(storageAddress).setBytes32(keccak256(\"case.referees.vote.hash\", caseId, referee), voteHash);\r\n        EternalStorage(storageAddress).setUint(keccak256(\"case.referees.vote.hash.count\", caseId), caseCount + 1);\r\n    }\r\n\r\n    function getRefereeVoteHashCount(address storageAddress, bytes32 caseId) public view returns(uint) {\r\n        return EternalStorage(storageAddress).getUint(keccak256(\"case.referees.vote.hash.count\", caseId));\r\n    }\r\n\r\n    function getRefereesFor(address storageAddress, bytes32 caseId, bool forApplicant)\r\n    public view returns(address[]) {\r\n        uint n = getRefereeVotesFor(storageAddress, caseId, forApplicant);\r\n        address[] memory referees = new address[](n);\r\n        for (uint i = 0; i < n; i++) {\r\n            referees[i] = getRefereeVoteForByIndex(storageAddress, caseId, forApplicant, i);\r\n        }\r\n        return referees;\r\n    }\r\n\r\n    function getRefereesByCase(address storageAddress, bytes32 caseId)\r\n    public view returns (address[]) {\r\n        uint n = getRefereeCountByCase(storageAddress, caseId);\r\n        address[] memory referees = new address[](n);\r\n        for (uint i = 0; i < n; i++) {\r\n            referees[i] = getRefereeByCase(storageAddress, caseId, i);\r\n        }\r\n        return referees;\r\n    }\r\n\r\n}\r\ncontract Withdrawable is Ownable {\r\n    function withdrawEth(uint value) external onlyOwner {\r\n        require(address(this).balance >= value);\r\n        msg.sender.transfer(value);\r\n    }\r\n\r\n    function withdrawToken(address token, uint value) external onlyOwner {\r\n        require(Token(token).balanceOf(address(this)) >= value, \"Not enough tokens\");\r\n        require(Token(token).transfer(msg.sender, value));\r\n    }\r\n}\r\n\r\nlibrary CasesLib {\r\n\r\n    enum CaseStatus {OPENED, VOTING, REVEALING, CLOSED, CANCELED}\r\n    enum CaseCanceledCode { NOT_ENOUGH_VOTES, EQUAL_NUMBER_OF_VOTES }\r\n\r\n    function getCase(address storageAddress, bytes32 caseId)\r\n    public view returns ( address applicant, address respondent,\r\n        bytes32 deal, uint amount,\r\n        uint refereeAward,\r\n        bytes32 title, uint8 status, uint8 canceledCode,\r\n        bool won, bytes32 applicantDescriptionHash,\r\n        bytes32 respondentDescriptionHash, bool isEthRefereeAward)\r\n    {\r\n        EternalStorage st = EternalStorage(storageAddress);\r\n        applicant = st.getAddress(keccak256(\"case.applicant\", caseId));\r\n        respondent = st.getAddress(keccak256(\"case.respondent\", caseId));\r\n        deal = st.getBytes32(keccak256(\"case.deal\", caseId));\r\n        amount = st.getUint(keccak256(\"case.amount\", caseId));\r\n        won = st.getBool(keccak256(\"case.won\", caseId));\r\n        status = st.getUint8(keccak256(\"case.status\", caseId));\r\n        canceledCode = st.getUint8(keccak256(\"case.canceled.cause.code\", caseId));\r\n        refereeAward = st.getUint(keccak256(\"case.referee.award\", caseId));\r\n        title = st.getBytes32(keccak256(\"case.title\", caseId));\r\n        applicantDescriptionHash = st.getBytes32(keccak256(\"case.applicant.description\", caseId));\r\n        respondentDescriptionHash = st.getBytes32(keccak256(\"case.respondent.description\", caseId));\r\n        isEthRefereeAward = st.getBool(keccak256(\"case.referee.award.eth\", caseId));\r\n    }\r\n\r\n    function getCaseDates(address storageAddress, bytes32 caseId)\r\n    public view returns (uint date, uint votingDate, uint revealingDate, uint closeDate)\r\n    {\r\n        EternalStorage st = EternalStorage(storageAddress);\r\n        date = st.getUint(keccak256(\"case.date\", caseId));\r\n        votingDate = st.getUint(keccak256(\"case.date.voting\", caseId));\r\n        revealingDate = st.getUint(keccak256(\"case.date.revealing\", caseId));\r\n        closeDate = st.getUint(keccak256(\"case.date.close\", caseId));\r\n    }\r\n\r\n    function addCase(\r\n        address storageAddress, address applicant, \r\n        address respondent, bytes32 deal, \r\n        uint amount, uint refereeAward,\r\n        bytes32 title, string applicantDescription,\r\n        uint[] dates, uint refereeCountNeed, bool isEthRefereeAward\r\n    )\r\n    public returns(bytes32 caseId)\r\n    {\r\n        EternalStorage st = EternalStorage(storageAddress);\r\n        caseId = keccak256(applicant, respondent, deal, dates[0], title, amount);\r\n        st.setAddress(keccak256(\"case.applicant\", caseId), applicant);\r\n        st.setAddress(keccak256(\"case.respondent\", caseId), respondent);\r\n        st.setBytes32(keccak256(\"case.deal\", caseId), deal);\r\n        st.setUint(keccak256(\"case.amount\", caseId), amount);\r\n        st.setUint(keccak256(\"case.date\", caseId), dates[0]);\r\n        st.setUint(keccak256(\"case.date.voting\", caseId), dates[1]);\r\n        st.setUint(keccak256(\"case.date.revealing\", caseId), dates[2]);\r\n        st.setUint(keccak256(\"case.date.close\", caseId), dates[3]);\r\n        st.setUint8(keccak256(\"case.status\", caseId), 0);//OPENED\r\n        st.setUint(keccak256(\"case.referee.award\", caseId), refereeAward);\r\n        st.setBytes32(keccak256(\"case.title\", caseId), title);\r\n        st.setBytes32(keccak256(\"case.applicant.description\", caseId), keccak256(applicantDescription));\r\n        st.setBool(keccak256(\"case.referee.award.eth\", caseId), isEthRefereeAward);\r\n        st.setUint(keccak256(\"case.referee.count.need\", caseId), refereeCountNeed);\r\n    }\r\n\r\n    function setCaseWon(address storageAddress, bytes32 caseId, bool won) public\r\n    {\r\n        EternalStorage st = EternalStorage(storageAddress);\r\n        st.setBool(keccak256(\"case.won\", caseId), won);\r\n    }\r\n\r\n    function setCaseStatus(address storageAddress, bytes32 caseId, CaseStatus status) public\r\n    {\r\n        uint8 statusCode = uint8(status);\r\n        require(statusCode >= 0 && statusCode <= uint8(CaseStatus.CANCELED));\r\n        EternalStorage(storageAddress).setUint8(keccak256(\"case.status\", caseId), statusCode);\r\n    }\r\n\r\n    function getCaseStatus(address storageAddress, bytes32 caseId) public view returns(CaseStatus) {\r\n        return CaseStatus(EternalStorage(storageAddress).getUint8(keccak256(\"case.status\", caseId)));\r\n    }\r\n\r\n    function setCaseCanceledCode(address storageAddress, bytes32 caseId, CaseCanceledCode cause) public\r\n    {\r\n        uint8 causeCode = uint8(cause);\r\n        require(causeCode >= 0 && causeCode <= uint8(CaseCanceledCode.EQUAL_NUMBER_OF_VOTES));\r\n        EternalStorage(storageAddress).setUint8(keccak256(\"case.canceled.cause.code\", caseId), causeCode);\r\n    }\r\n\r\n    function getCaseDate(address storageAddress, bytes32 caseId) public view returns(uint) {\r\n        return EternalStorage(storageAddress).getUint(keccak256(\"case.date\", caseId));\r\n    }\r\n\r\n    function getRespondentDescription(address storageAddress, bytes32 caseId) public view returns(bytes32) {\r\n        return EternalStorage(storageAddress).getBytes32(keccak256(\"case.respondent.description\", caseId));\r\n    }\r\n\r\n    function setRespondentDescription(address storageAddress, bytes32 caseId, string description) public {\r\n        EternalStorage(storageAddress).setBytes32(keccak256(\"case.respondent.description\", caseId), keccak256(description));\r\n    }\r\n\r\n    function getApplicant(address storageAddress, bytes32 caseId) public view returns(address) {\r\n        return EternalStorage(storageAddress).getAddress(keccak256(\"case.applicant\", caseId));\r\n    }\r\n\r\n    function getRespondent(address storageAddress, bytes32 caseId) public view returns(address) {\r\n        return EternalStorage(storageAddress).getAddress(keccak256(\"case.respondent\", caseId));\r\n    }\r\n\r\n    function getRefereeAward(address storageAddress, bytes32 caseId) public view returns(uint) {\r\n        return EternalStorage(storageAddress).getUint(keccak256(\"case.referee.award\", caseId));\r\n    }\r\n\r\n    function getVotingDate(address storageAddress, bytes32 caseId) public view returns(uint) {\r\n        return EternalStorage(storageAddress).getUint(keccak256(\"case.date.voting\", caseId));\r\n    }\r\n\r\n    function getRevealingDate(address storageAddress, bytes32 caseId) public view returns(uint) {\r\n        return EternalStorage(storageAddress).getUint(keccak256(\"case.date.revealing\", caseId));\r\n    }\r\n\r\n    function getCloseDate(address storageAddress, bytes32 caseId) public view returns(uint) {\r\n        return EternalStorage(storageAddress).getUint(keccak256(\"case.date.close\", caseId));\r\n    }\r\n\r\n    function getRefereeCountNeed(address storageAddress, bytes32 caseId) public view returns(uint) {\r\n        return EternalStorage(storageAddress).getUint(keccak256(\"case.referee.count.need\", caseId));\r\n    }\r\n\r\n    function isEthRefereeAward(address storageAddress, bytes32 caseId) public view returns(bool) {\r\n        return EternalStorage(storageAddress).getBool(keccak256(\"case.referee.award.eth\", caseId));\r\n    }\r\n}\r\nlibrary VoteTokenLib  {\r\n\r\n    function getVotes(address storageAddress, address account) public view returns(uint) {\r\n        return EternalStorage(storageAddress).getUint(keccak256(\"vote.token.balance\", account));\r\n    }\r\n\r\n    function increaseVotes(address storageAddress, address account, uint256 diff) public {\r\n        setVotes(storageAddress, account, getVotes(storageAddress, account) + diff);\r\n    }\r\n\r\n    function decreaseVotes(address storageAddress, address account, uint256 diff) public {\r\n        setVotes(storageAddress, account, getVotes(storageAddress, account) - diff);\r\n    }\r\n\r\n    function setVotes(address storageAddress, address account, uint256 value) public {\r\n        EternalStorage(storageAddress).setUint(keccak256(\"vote.token.balance\", account), value);\r\n    }\r\n\r\n}\r\ncontract PaymentHolder is Ownable {\r\n\r\n    modifier onlyAllowed() {\r\n        require(allowed[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyUpdater() {\r\n        require(msg.sender == updater);\r\n        _;\r\n    }\r\n\r\n    mapping(address => bool) public allowed;\r\n    address public updater;\r\n\r\n    /*-----------------MAINTAIN METHODS------------------*/\r\n\r\n    function setUpdater(address _updater)\r\n    external onlyOwner {\r\n        updater = _updater;\r\n    }\r\n\r\n    function migrate(address newHolder, address[] tokens, address[] _allowed)\r\n    external onlyOwner {\r\n        require(PaymentHolder(newHolder).update.value(address(this).balance)(_allowed));\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            address token = tokens[i];\r\n            uint256 balance = Token(token).balanceOf(this);\r\n            if (balance > 0) {\r\n                require(Token(token).transfer(newHolder, balance));\r\n            }\r\n        }\r\n    }\r\n\r\n    function update(address[] _allowed)\r\n    external payable onlyUpdater returns(bool) {\r\n        for (uint256 i = 0; i < _allowed.length; i++) {\r\n            allowed[_allowed[i]] = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /*-----------------OWNER FLOW------------------*/\r\n\r\n    function allow(address to) \r\n    external onlyOwner { allowed[to] = true; }\r\n\r\n    function prohibit(address to)\r\n    external onlyOwner { allowed[to] = false; }\r\n\r\n    /*-----------------ALLOWED FLOW------------------*/\r\n\r\n    function depositEth()\r\n    public payable onlyAllowed returns (bool) {\r\n        //Default function to receive eth\r\n        return true;\r\n    }\r\n\r\n    function withdrawEth(address to, uint256 amount)\r\n    public onlyAllowed returns(bool) {\r\n        require(address(this).balance >= amount, \"Not enough ETH balance\");\r\n        to.transfer(amount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawToken(address to, uint256 amount, address token)\r\n    public onlyAllowed returns(bool) {\r\n        require(Token(token).balanceOf(this) >= amount, \"Not enough token balance\");\r\n        require(Token(token).transfer(to, amount));\r\n        return true;\r\n    }\r\n\r\n}\r\nlibrary RefereesLib {\r\n\r\n    struct Referees {\r\n        address[] addresses;\r\n    }\r\n\r\n    function addReferee(address storageAddress, address referee) public {\r\n        uint id = getRefereeCount(storageAddress);\r\n        setReferee(storageAddress, referee, id, true);\r\n        setRefereeCount(storageAddress, id + 1);\r\n    }\r\n\r\n    function getRefereeCount(address storageAddress) public view returns(uint) {\r\n        return EternalStorage(storageAddress).getUint(keccak256(\"referee.count\"));\r\n    }\r\n\r\n    function setRefereeCount(address storageAddress, uint value) public {\r\n        EternalStorage(storageAddress).setUint(keccak256(\"referee.count\"), value);\r\n    }\r\n\r\n    function setReferee(address storageAddress, address referee, uint id, bool applied) public {\r\n        EternalStorage st = EternalStorage(storageAddress);\r\n        st.setBool(keccak256(\"referee.applied\", referee), applied);\r\n        st.setAddress(keccak256(\"referee.address\", id), referee);\r\n    }\r\n\r\n    function isRefereeApplied(address storageAddress, address referee) public view returns(bool) {\r\n        return EternalStorage(storageAddress).getBool(keccak256(\"referee.applied\", referee));\r\n    }\r\n\r\n    function setRefereeApplied(address storageAddress, address referee, bool applied) public {\r\n        EternalStorage(storageAddress).setBool(keccak256(\"referee.applied\", referee), applied);\r\n    }\r\n\r\n    function getRefereeAddress(address storageAddress, uint id) public view returns(address) {\r\n        return EternalStorage(storageAddress).getAddress(keccak256(\"referee.address\", id));\r\n    }\r\n    \r\n    function getRandomRefereesToCase(address storageAddress, address applicant, address respondent, uint256 targetCount) \r\n    public view returns(address[] foundReferees)  {\r\n        uint refereesCount = getRefereeCount(storageAddress);\r\n        require(refereesCount >= targetCount);\r\n        foundReferees = new address[](targetCount);\r\n        uint id = Utils.almostRnd(0, refereesCount);\r\n        uint found = 0;\r\n        for (uint i = 0; i < refereesCount; i++) {\r\n            address referee = getRefereeAddress(storageAddress, id);\r\n            id = id + 1;\r\n            id = id % refereesCount;\r\n            uint voteBalance = VoteTokenLib.getVotes(storageAddress, referee);\r\n            if (referee != applicant && referee != respondent && voteBalance > 0) {\r\n                foundReferees[found] = referee;\r\n                found++;\r\n            }\r\n            if (found == targetCount) {\r\n                break;\r\n            }\r\n        }\r\n        require(found == targetCount);\r\n    }\r\n}\r\ncontract BkxToken is EIP20 {\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success);\r\n    function decreaseApproval (address _spender, uint _subtractedValue)public returns (bool success);\r\n}\r\n\r\ncontract IBoard is Ownable {\r\n\r\n    event CaseOpened(bytes32 caseId, address applicant, address respondent, bytes32 deal, uint amount, uint refereeAward, bytes32 title, string applicantDescription, uint[] dates, uint refereeCountNeed, bool isEthRefereeAward);\r\n    event CaseCommentedByRespondent(bytes32 caseId, address respondent, string comment);\r\n    event CaseVoting(bytes32 caseId);\r\n    event CaseVoteCommitted(bytes32 caseId, address referee, bytes32 voteHash);\r\n    event CaseRevealingVotes(bytes32 caseId);\r\n    event CaseVoteRevealed(bytes32 caseId, address referee, uint8 voteOption, bytes32 salt);\r\n    event CaseClosed(bytes32 caseId, bool won);\r\n    event CaseCanceled(bytes32 caseId, uint8 causeCode);\r\n\r\n    event RefereesAssignedToCase(bytes32 caseId, address[] referees);\r\n    event RefereeVoteBalanceChanged(address referee, uint balance);\r\n    event RefereeAwarded(address referee, bytes32 caseId, uint award);\r\n\r\n    address public lib;\r\n    uint public version;\r\n    IBoardConfig public config;\r\n    BkxToken public bkxToken;\r\n    address public admin;\r\n    address public paymentHolder;\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(msg.sender == admin || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function withdrawEth(uint value) external;\r\n\r\n    function withdrawBkx(uint value) external;\r\n\r\n    function setStorageAddress(address storageAddress) external;\r\n\r\n    function setConfigAddress(address configAddress) external;\r\n\r\n    function setBkxToken(address tokenAddress) external;\r\n\r\n    function setPaymentHolder(address paymentHolder) external;\r\n\r\n    function setAdmin(address admin) external;\r\n\r\n    function applyForReferee() external payable;\r\n\r\n    function addVoteTokens(address referee) external;\r\n\r\n    function openCase(address respondent, bytes32 deal, uint amount, uint refereeAward, bytes32 title, string description) external payable;\r\n\r\n    function setRespondentDescription(bytes32 caseId, string description) external;\r\n\r\n    function startVotingCase(bytes32 caseId) external;\r\n\r\n    function createVoteHash(uint8 voteOption, bytes32 salt) public view returns(bytes32);\r\n\r\n    function commitVote(bytes32 caseId, bytes32 voteHash) external;\r\n\r\n    function verifyVote(bytes32 caseId, address referee, uint8 voteOption, bytes32 salt) public view returns(bool);\r\n\r\n    function startRevealingVotes(bytes32 caseId) external;\r\n\r\n    function revealVote(bytes32 caseId, address referee, uint8 voteOption, bytes32 salt) external;\r\n\r\n    function revealVotes(bytes32 caseId, address[] referees, uint8[] voteOptions, bytes32[] salts) external;\r\n\r\n    function verdict(bytes32 caseId) external;\r\n}\r\n\r\n\r\ncontract Board is IBoard {\r\n\r\n    using SafeMath for uint;\r\n    using VoteTokenLib for address;\r\n    using CasesLib for address;\r\n    using RefereesLib for address;\r\n    using RefereeCasesLib for address;\r\n\r\n    modifier onlyRespondent(bytes32 caseId) {\r\n        require(msg.sender == lib.getRespondent(caseId));\r\n        _;\r\n    }\r\n\r\n    modifier hasStatus(bytes32 caseId, CasesLib.CaseStatus state) {\r\n        require(state == lib.getCaseStatus(caseId));\r\n        _;\r\n    }\r\n\r\n    modifier before(uint date) {\r\n        require(now <= date);\r\n        _;\r\n    }\r\n\r\n    modifier laterOn(uint date) {\r\n        require(now >= date);\r\n        _;\r\n    }\r\n\r\n    function Board(address storageAddress, address configAddress, address _paymentHolder) public {\r\n        version = 2;\r\n        config = IBoardConfig(configAddress);\r\n        lib = storageAddress;\r\n        //check real BKX address https://etherscan.io/token/0x45245bc59219eeaAF6cD3f382e078A461FF9De7B\r\n        bkxToken = BkxToken(0x45245bc59219eeaAF6cD3f382e078A461FF9De7B);\r\n        admin = 0xE0b6C095D722961C2C11E55b97fCd0C8bd7a1cD2;\r\n        paymentHolder = _paymentHolder;\r\n    }\r\n\r\n    function withdrawEth(uint value) external onlyOwner {\r\n        require(address(this).balance >= value);\r\n        msg.sender.transfer(value);\r\n    }\r\n\r\n    function withdrawBkx(uint value) external onlyOwner {\r\n        require(bkxToken.balanceOf(address(this)) >= value);\r\n        require(bkxToken.transfer(msg.sender, value));\r\n    }\r\n\r\n    /* configuration */\r\n    function setStorageAddress(address storageAddress) external onlyOwner {\r\n        lib = storageAddress;\r\n    }\r\n\r\n    function setConfigAddress(address configAddress) external onlyOwner {\r\n        config = IBoardConfig(configAddress);\r\n    }\r\n\r\n    /* dependency tokens */\r\n    function setBkxToken(address tokenAddress) external onlyOwner {\r\n        bkxToken = BkxToken(tokenAddress);\r\n    }\r\n\r\n    function setPaymentHolder(address _paymentHolder) external onlyOwner {\r\n        paymentHolder = _paymentHolder;\r\n    }\r\n\r\n    function setAdmin(address newAdmin) external onlyOwner {\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function applyForReferee() external payable {\r\n        uint refereeFee = msg.value == 0 ? config.getRefereeFee() : config.getRefereeFeeEth();\r\n        withdrawPayment(refereeFee);\r\n        addVotes(msg.sender);\r\n    }\r\n\r\n    function addVoteTokens(address referee) external onlyOwnerOrAdmin {\r\n        addVotes(referee);\r\n    }\r\n\r\n    function addVotes(address referee) private {\r\n        uint refereeTokens = config.getVoteTokensPerRequest();\r\n        if (!lib.isRefereeApplied(referee)) {\r\n            lib.addReferee(referee);\r\n        }\r\n        uint balance = refereeTokens.add(lib.getVotes(referee));\r\n        lib.setVotes(referee, balance);\r\n        emit RefereeVoteBalanceChanged(referee, balance);\r\n    }\r\n\r\n    function openCase(address respondent, bytes32 deal, uint amount, uint refereeAward, bytes32 title, string description)\r\n    external payable {\r\n        require(msg.sender != respondent);\r\n        withdrawPayment(refereeAward);\r\n        uint[] memory dates = config.getCaseDatesFromNow();\r\n        uint refereeCountNeed = config.getRefereeNeedCountPerCase();\r\n        bytes32 caseId = lib.addCase(msg.sender, respondent, deal, amount, refereeAward, title, description, dates, refereeCountNeed, msg.value != 0);\r\n        emit CaseOpened(caseId, msg.sender, respondent, deal, amount, refereeAward, title, description, dates, refereeCountNeed, msg.value != 0);\r\n        assignRefereesToCase(caseId, msg.sender, respondent);\r\n    }\r\n\r\n    function withdrawPayment(uint256 amount) private {\r\n        if(msg.value != 0) {\r\n            require(msg.value == amount, \"ETH amount must be equal amount\");\r\n            require(PaymentHolder(paymentHolder).depositEth.value(msg.value)());\r\n        } else {\r\n            require(bkxToken.allowance(msg.sender, address(this)) >= amount);\r\n            require(bkxToken.balanceOf(msg.sender) >= amount);\r\n            require(bkxToken.transferFrom(msg.sender, paymentHolder, amount));\r\n        }\r\n    }\r\n\r\n    function assignRefereesToCase(bytes32 caseId, address applicant, address respondent) private  {\r\n        uint targetCount = config.getRefereeCountPerCase();\r\n        address[] memory foundReferees = lib.getRandomRefereesToCase(applicant, respondent, targetCount);\r\n        for (uint i = 0; i < foundReferees.length; i++) {\r\n            address referee = foundReferees[i];\r\n            uint voteBalance = lib.getVotes(referee);\r\n            voteBalance -= 1;\r\n            lib.setVotes(referee, voteBalance);\r\n            emit RefereeVoteBalanceChanged(referee, voteBalance);\r\n        }\r\n        lib.setRefereesToCase(foundReferees, caseId);\r\n        emit RefereesAssignedToCase(caseId, foundReferees);\r\n    }\r\n\r\n    function setRespondentDescription(bytes32 caseId, string description)\r\n    external onlyRespondent(caseId) hasStatus(caseId, CasesLib.CaseStatus.OPENED) before(lib.getVotingDate(caseId)) {\r\n        require(lib.getRespondentDescription(caseId) == 0);\r\n        lib.setRespondentDescription(caseId, description);\r\n        lib.setCaseStatus(caseId, CasesLib.CaseStatus.VOTING);\r\n        emit CaseCommentedByRespondent(caseId, msg.sender, description);\r\n        emit CaseVoting(caseId);\r\n    }\r\n\r\n    function startVotingCase(bytes32 caseId)\r\n    external hasStatus(caseId, CasesLib.CaseStatus.OPENED) laterOn(lib.getVotingDate(caseId)) {\r\n        lib.setCaseStatus(caseId, CasesLib.CaseStatus.VOTING);\r\n        emit CaseVoting(caseId);\r\n    }\r\n\r\n    function commitVote(bytes32 caseId, bytes32 voteHash)\r\n    external hasStatus(caseId, CasesLib.CaseStatus.VOTING) before(lib.getRevealingDate(caseId))\r\n    {\r\n        require(lib.isRefereeSetToCase(msg.sender, caseId)); //referee must be set to case\r\n        require(!lib.isRefereeVoted(msg.sender, caseId)); //referee can not vote twice\r\n        lib.setRefereeVoteHash(caseId, msg.sender, voteHash);\r\n        emit CaseVoteCommitted(caseId, msg.sender, voteHash);\r\n        if (lib.getRefereeVoteHashCount(caseId) == lib.getRefereeCountByCase(caseId)) {\r\n            lib.setCaseStatus(caseId, CasesLib.CaseStatus.REVEALING);\r\n            emit CaseRevealingVotes(caseId);\r\n        }\r\n    }\r\n\r\n    function startRevealingVotes(bytes32 caseId)\r\n    external hasStatus(caseId, CasesLib.CaseStatus.VOTING) laterOn(lib.getRevealingDate(caseId))\r\n    {\r\n        lib.setCaseStatus(caseId, CasesLib.CaseStatus.REVEALING);\r\n        emit CaseRevealingVotes(caseId);\r\n    }\r\n\r\n    function revealVote(bytes32 caseId, address referee, uint8 voteOption, bytes32 salt)\r\n    external hasStatus(caseId, CasesLib.CaseStatus.REVEALING) before(lib.getCloseDate(caseId))\r\n    {\r\n        doRevealVote(caseId, referee, voteOption, salt);\r\n        checkShouldMakeVerdict(caseId);\r\n    }\r\n\r\n    function revealVotes(bytes32 caseId, address[] referees, uint8[] voteOptions, bytes32[] salts)\r\n    external hasStatus(caseId, CasesLib.CaseStatus.REVEALING) before(lib.getCloseDate(caseId))\r\n    {\r\n        require((referees.length == voteOptions.length) && (referees.length == salts.length));\r\n        for (uint i = 0; i < referees.length; i++) {\r\n            doRevealVote(caseId, referees[i], voteOptions[i], salts[i]);\r\n        }\r\n        checkShouldMakeVerdict(caseId);\r\n    }\r\n\r\n    function checkShouldMakeVerdict(bytes32 caseId)\r\n    private {\r\n        if (lib.getRefereeVotesFor(caseId, true) + lib.getRefereeVotesFor(caseId, false) == lib.getRefereeVoteHashCount(caseId)) {\r\n            makeVerdict(caseId);\r\n        }\r\n    }\r\n\r\n    function doRevealVote(bytes32 caseId, address referee, uint8 voteOption, bytes32 salt) private {\r\n        require(verifyVote(caseId, referee, voteOption, salt));\r\n        lib.setRefereeVote(caseId, referee,  voteOption == 0);\r\n        emit CaseVoteRevealed(caseId, referee, voteOption, salt);\r\n    }\r\n\r\n    function createVoteHash(uint8 voteOption, bytes32 salt)\r\n    public view returns(bytes32) {\r\n        return keccak256(voteOption, salt);\r\n    }\r\n\r\n    function verifyVote(bytes32 caseId, address referee, uint8 voteOption, bytes32 salt)\r\n    public view returns(bool){\r\n        return lib.getRefereeVoteHash(caseId, referee) == keccak256(voteOption, salt);\r\n    }\r\n\r\n    function verdict(bytes32 caseId)\r\n    external hasStatus(caseId, CasesLib.CaseStatus.REVEALING) laterOn(lib.getCloseDate(caseId)) {\r\n        makeVerdict(caseId);\r\n    }\r\n\r\n    function makeVerdict(bytes32 caseId)\r\n    private {\r\n        uint forApplicant = lib.getRefereeVotesFor(caseId, true);\r\n        uint forRespondent = lib.getRefereeVotesFor(caseId, false);\r\n        uint refereeAward = lib.getRefereeAward(caseId);\r\n        bool isNotEnoughVotes = (forApplicant + forRespondent) < lib.getRefereeCountNeed(caseId);\r\n        bool isEthRefereeAward = lib.isEthRefereeAward(caseId);\r\n        if (isNotEnoughVotes || (forApplicant == forRespondent)) {\r\n            withdrawTo(isEthRefereeAward, lib.getApplicant(caseId), refereeAward);\r\n            lib.setCaseStatus(caseId, CasesLib.CaseStatus.CANCELED);\r\n            CasesLib.CaseCanceledCode causeCode = isNotEnoughVotes ?\r\n                CasesLib.CaseCanceledCode.NOT_ENOUGH_VOTES : CasesLib.CaseCanceledCode.EQUAL_NUMBER_OF_VOTES;\r\n            lib.setCaseCanceledCode(caseId, causeCode);\r\n            emit CaseCanceled(caseId, uint8(causeCode));\r\n            withdrawAllRefereeVotes(caseId);\r\n            return;\r\n        }\r\n        bool won = false;\r\n        uint awardPerReferee;\r\n        if (forApplicant > forRespondent) {\r\n            won = true;\r\n            awardPerReferee = refereeAward / forApplicant;\r\n        } else {\r\n            awardPerReferee = refereeAward / forRespondent;\r\n        }\r\n        lib.setCaseStatus(caseId, CasesLib.CaseStatus.CLOSED);\r\n        lib.setCaseWon(caseId, won);\r\n        emit CaseClosed(caseId, won);\r\n        address[] memory wonReferees = lib.getRefereesFor(caseId, won);\r\n        for (uint i = 0; i < wonReferees.length; i++) {\r\n            withdrawTo(isEthRefereeAward, wonReferees[i], awardPerReferee);\r\n            emit RefereeAwarded(wonReferees[i], caseId, awardPerReferee);\r\n        }\r\n        withdrawRefereeVotes(caseId);\r\n    }\r\n\r\n    function withdrawTo(bool isEth, address to, uint amount) private {\r\n        if (isEth) {\r\n            require(PaymentHolder(paymentHolder).withdrawEth(to, amount));\r\n        } else {\r\n            require(PaymentHolder(paymentHolder).withdrawToken(to, amount, address(bkxToken)));\r\n        }\r\n    } \r\n\r\n    function withdrawAllRefereeVotes(bytes32 caseId) private {\r\n        address[] memory referees = lib.getRefereesByCase(caseId);\r\n        for (uint i = 0; i < referees.length; i++) {\r\n            withdrawRefereeVote(referees[i]);\r\n        }\r\n    }\r\n\r\n    function withdrawRefereeVotes(bytes32 caseId)\r\n    private {\r\n        address[] memory referees = lib.getRefereesByCase(caseId);\r\n        for (uint i = 0; i < referees.length; i++) {\r\n            if (!lib.isRefereeVoted(referees[i], caseId)) {\r\n                withdrawRefereeVote(referees[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawRefereeVote(address referee)\r\n    private {\r\n        uint voteBalance = lib.getVotes(referee);\r\n        voteBalance += 1;\r\n        lib.setVotes(referee, voteBalance);\r\n        emit RefereeVoteBalanceChanged(referee, voteBalance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawBkx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caseId\",\"type\":\"bytes32\"},{\"name\":\"voteHash\",\"type\":\"bytes32\"}],\"name\":\"commitVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"applyForReferee\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caseId\",\"type\":\"bytes32\"}],\"name\":\"startRevealingVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"storageAddress\",\"type\":\"address\"}],\"name\":\"setStorageAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setBkxToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caseId\",\"type\":\"bytes32\"}],\"name\":\"verdict\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentHolder\",\"type\":\"address\"}],\"name\":\"setPaymentHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voteOption\",\"type\":\"uint8\"},{\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createVoteHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"configAddress\",\"type\":\"address\"}],\"name\":\"setConfigAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caseId\",\"type\":\"bytes32\"},{\"name\":\"referees\",\"type\":\"address[]\"},{\"name\":\"voteOptions\",\"type\":\"uint8[]\"},{\"name\":\"salts\",\"type\":\"bytes32[]\"}],\"name\":\"revealVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lib\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caseId\",\"type\":\"bytes32\"},{\"name\":\"referee\",\"type\":\"address\"},{\"name\":\"voteOption\",\"type\":\"uint8\"},{\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"verifyVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caseId\",\"type\":\"bytes32\"}],\"name\":\"startVotingCase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bkxToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"respondent\",\"type\":\"address\"},{\"name\":\"deal\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"refereeAward\",\"type\":\"uint256\"},{\"name\":\"title\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"string\"}],\"name\":\"openCase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caseId\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"string\"}],\"name\":\"setRespondentDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"addVoteTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caseId\",\"type\":\"bytes32\"},{\"name\":\"referee\",\"type\":\"address\"},{\"name\":\"voteOption\",\"type\":\"uint8\"},{\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"revealVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"storageAddress\",\"type\":\"address\"},{\"name\":\"configAddress\",\"type\":\"address\"},{\"name\":\"_paymentHolder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"applicant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"respondent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"deal\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refereeAward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"applicantDescription\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"dates\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"refereeCountNeed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isEthRefereeAward\",\"type\":\"bool\"}],\"name\":\"CaseOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"respondent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"CaseCommentedByRespondent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caseId\",\"type\":\"bytes32\"}],\"name\":\"CaseVoting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"voteHash\",\"type\":\"bytes32\"}],\"name\":\"CaseVoteCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caseId\",\"type\":\"bytes32\"}],\"name\":\"CaseRevealingVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"voteOption\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"CaseVoteRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"won\",\"type\":\"bool\"}],\"name\":\"CaseClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"causeCode\",\"type\":\"uint8\"}],\"name\":\"CaseCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"referees\",\"type\":\"address[]\"}],\"name\":\"RefereesAssignedToCase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"RefereeVoteBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"caseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"award\",\"type\":\"uint256\"}],\"name\":\"RefereeAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Board","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000024caa9ad2831489823c560c65c9211904ffc13bd0000000000000000000000005e57d82421e40eddf792b2a5681192f4457f791500000000000000000000000064542fd1991949482e51e24973d047e286b4ef50","Library":"CasesLib:ebbb7e95a4d61850fad81b2bff318ed8fd762287;RefereesLib:56781cbb608324eeb418e323e28aaa4c6043a022;RefereeCasesLib:728427d1e48daa939aade5a692d54a14e452efaf;VoteTokenLib:44bc22e0e33d546eb5e13d5f1e71fdaa0221ae74","SwarmSource":"bzzr://0d9d38165819919fb0480ef0af5fee48358e9aad50d40c86bc9e850e50116021"}]}