{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Contracts' names:\r\n * 1) UserfeedsClaim - prefix\r\n * 2a) WithoutValueTransfer - simplest case, no transfer\r\n * 2b) With - continuation\r\n * 3) Configurable - optional, means there is function parameter to decide how much to send to each recipient\r\n * 4) Value or Token - value means ether, token means ERC20 or ERC721\r\n * 5) Multi - optional, means there are multiple recipients\r\n * 6) Send or Transfer - using send or transfer in case of ether, or transferFrom in case of ERC20/ERC721 (no \"Send\" possible in this case)\r\n * 7) Unsafe or NoCheck - optional, means that value returned from send or transferFrom is not checked\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\ncontract ERC20 {\r\n\r\n  function transferFrom(address from, address to, uint value) public returns (bool success);\r\n}\r\n\r\ncontract ERC721 {\r\n\r\n  function transferFrom(address from, address to, uint value) public;\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address owner;\r\n  address pendingOwner;\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier onlyPendingOwner {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  function claimOwnership() public onlyPendingOwner {\r\n    owner = pendingOwner;\r\n  }\r\n}\r\n\r\ncontract Destructible is Ownable {\r\n\r\n  function destroy() public onlyOwner {\r\n    selfdestruct(msg.sender);\r\n  }\r\n}\r\n\r\ncontract WithClaim {\r\n\r\n  event Claim(string data);\r\n}\r\n\r\n// older version:\r\n// Mainnet: 0xFd74f0ce337fC692B8c124c094c1386A14ec7901\r\n// Rinkeby: 0xC5De286677AC4f371dc791022218b1c13B72DbBd\r\n// Ropsten: 0x6f32a6F579CFEed1FFfDc562231C957ECC894001\r\n// Kovan:   0x139d658eD55b78e783DbE9bD4eb8F2b977b24153\r\n\r\ncontract UserfeedsClaimWithoutValueTransfer is Destructible, WithClaim {\r\n\r\n  function post(string data) public {\r\n    emit Claim(data);\r\n  }\r\n}\r\n\r\n// older version:\r\n// Mainnet: 0x70B610F7072E742d4278eC55C02426Dbaaee388C\r\n// Rinkeby: 0x00034B8397d9400117b4298548EAa59267953F8c\r\n// Ropsten: 0x37C1CA7996CDdAaa31e13AA3eEE0C89Ee4f665B5\r\n// Kovan:   0xc666c75C2bBA9AD8Df402138cE32265ac0EC7aaC\r\n\r\ncontract UserfeedsClaimWithValueTransfer is Destructible, WithClaim {\r\n\r\n  function post(address userfeed, string data) public payable {\r\n    emit Claim(data);\r\n    userfeed.transfer(msg.value);\r\n  }\r\n}\r\n\r\n// older version:\r\n// Mainnet: 0xfF8A1BA752fE5df494B02D77525EC6Fa76cecb93\r\n// Rinkeby: 0xBd2A0FF74dE98cFDDe4653c610E0E473137534fB\r\n// Ropsten: 0x54b4372fA0bd76664B48625f0e8c899Ff19DFc39\r\n// Kovan:   0xd6Ede7F43882B100C6311a9dF801088eA91cEb64\r\n\r\ncontract UserfeedsClaimWithTokenTransfer is Destructible, WithClaim {\r\n\r\n  function post(address userfeed, ERC20 token, uint value, string data) public {\r\n    emit Claim(data);\r\n    require(token.transferFrom(msg.sender, userfeed, value));\r\n  }\r\n}\r\n\r\n// Rinkeby: 0x73cDd7e5Cf3DA3985f985298597D404A90878BD9\r\n// Ropsten: 0xA7828A4369B3e89C02234c9c05d12516dbb154BC\r\n// Kovan:   0x5301F5b1Af6f00A61E3a78A9609d1D143B22BB8d\r\n\r\ncontract UserfeedsClaimWithValueMultiSendUnsafe is Destructible, WithClaim {\r\n\r\n  function post(string data, address[] recipients) public payable {\r\n    emit Claim(data);\r\n    send(recipients);\r\n  }\r\n\r\n  function post(string data, bytes20[] recipients) public payable {\r\n    emit Claim(data);\r\n    send(recipients);\r\n  }\r\n\r\n  function send(address[] recipients) public payable {\r\n    uint amount = msg.value / recipients.length;\r\n    for (uint i = 0; i < recipients.length; i++) {\r\n      recipients[i].send(amount);\r\n    }\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n\r\n  function send(bytes20[] recipients) public payable {\r\n    uint amount = msg.value / recipients.length;\r\n    for (uint i = 0; i < recipients.length; i++) {\r\n      address(recipients[i]).send(amount);\r\n    }\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n}\r\n\r\n// Mainnet: 0xfad31a5672fBd8243E9691E8a5F958699CD0AaA9\r\n// Rinkeby: 0x1f8A01833A0B083CCcd87fffEe50EF1D35621fD2\r\n// Ropsten: 0x298611B2798d280910274C222A9dbDfBA914B058\r\n// Kovan:   0x0c20Daa719Cd4fD73eAf23d2Cb687cD07d500E17\r\n\r\ncontract UserfeedsClaimWithConfigurableValueMultiTransfer is Destructible, WithClaim {\r\n\r\n  function post(string data, address[] recipients, uint[] values) public payable {\r\n    emit Claim(data);\r\n    transfer(recipients, values);\r\n  }\r\n\r\n  function transfer(address[] recipients, uint[] values) public payable {\r\n    for (uint i = 0; i < recipients.length; i++) {\r\n      recipients[i].transfer(values[i]);\r\n    }\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n}\r\n\r\n// Mainnet: 0xeCBED48098C4F25a16195c45DdF5fD736E28B14b\r\n// Rinkeby: 0xA105908d1Bd7e76Ec4Dfddd08d9E0c89F6B39474\r\n// Ropsten: 0x1A97Aba0fb047cd8cd8F4c14D890bE6E7004fae9\r\n// Kovan:   0xcF53D90E7f71C7Db557Bc42C5a85D36dD53956C0\r\n\r\ncontract UserfeedsClaimWithConfigurableTokenMultiTransfer is Destructible, WithClaim {\r\n\r\n  function post(string data, address[] recipients, ERC20 token, uint[] values) public {\r\n    emit Claim(data);\r\n    transfer(recipients, token, values);\r\n  }\r\n\r\n  function transfer(address[] recipients, ERC20 token, uint[] values) public {\r\n    for (uint i = 0; i < recipients.length; i++) {\r\n      require(token.transferFrom(msg.sender, recipients[i], values[i]));\r\n    }\r\n  }\r\n}\r\n\r\n// Rinkeby: 0x042a52f30572A54f504102cc1Fbd1f2B53859D8A\r\n// Ropsten: 0x616c0ee7C6659a99a99A36f558b318779C3ebC16\r\n// Kovan:   0x30192DE195f393688ce515489E4E0e0b148e9D8d\r\n\r\ncontract UserfeedsClaimWithConfigurableTokenMultiTransferNoCheck is Destructible, WithClaim {\r\n\r\n  function post(string data, address[] recipients, ERC721 token, uint[] values) public {\r\n    emit Claim(data);\r\n    transfer(recipients, token, values);\r\n  }\r\n\r\n  function transfer(address[] recipients, ERC721 token, uint[] values) public {\r\n    for (uint i = 0; i < recipients.length; i++) {\r\n      token.transferFrom(msg.sender, recipients[i], values[i]);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"string\"},{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"post\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"Claim\",\"type\":\"event\"}]","ContractName":"UserfeedsClaimWithConfigurableTokenMultiTransfer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9138189014809185a6f9fa1a8e4f5224b550a5bf28caadfd061e7d4c74031cb1"}]}