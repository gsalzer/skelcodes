{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: zos-lib/contracts/Initializable.sol\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool wasInitializing = initializing;\r\n    initializing = true;\r\n    initialized = true;\r\n\r\n    _;\r\n\r\n    initializing = wasInitializing;\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is Initializable {\r\n  address private _owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function initialize(address sender) public initializer {\r\n    _owner = sender;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(_owner);\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/utils/Address.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/libs/SafeTransfer.sol\r\n\r\n/**\r\n* @dev Library to perform transfer for ERC20 tokens.\r\n* Not all the tokens transfer method has a return value (bool) neither revert for insufficient funds or \r\n* unathorized _value\r\n*/\r\nlibrary SafeTransfer {\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the _value of tokens to be transferred\r\n    */\r\n    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\r\n        uint256 prevBalance = _token.balanceOf(address(this));\r\n\r\n        require(prevBalance >= _value, \"Insufficient funds\");\r\n\r\n        _token.transfer(_to, _value);\r\n\r\n        require(prevBalance - _value == _token.balanceOf(address(this)), \"Transfer failed\");\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the _value of tokens to be transferred\r\n    */\r\n    function safeTransferFrom(\r\n        IERC20 _token,\r\n        address _from,\r\n        address _to, \r\n        uint256 _value\r\n    ) internal returns (bool) \r\n    {\r\n        uint256 prevBalance = _token.balanceOf(_from);\r\n\r\n        require(prevBalance >= _value, \"Insufficient funds\");\r\n        require(_token.allowance(_from, address(this)) >= _value, \"Insufficient allowance\");\r\n\r\n        _token.transferFrom(_from, _to, _value);\r\n\r\n        require(prevBalance - _value == _token.balanceOf(_from), \"Transfer failed\");\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/dex/ITokenConverter.sol\r\n\r\ncontract ITokenConverter {    \r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Makes a simple ERC20 -> ERC20 token trade\r\n    * @param _srcToken - IERC20 token\r\n    * @param _destToken - IERC20 token \r\n    * @param _srcAmount - uint256 amount to be converted\r\n    * @param _destAmount - uint256 amount to get after conversion\r\n    * @return uint256 for the change. 0 if there is no change\r\n    */\r\n    function convert(\r\n        IERC20 _srcToken,\r\n        IERC20 _destToken,\r\n        uint256 _srcAmount,\r\n        uint256 _destAmount\r\n        ) external returns (uint256);\r\n\r\n    /**\r\n    * @dev Get exchange rate and slippage rate. \r\n    * Note that these returned values are in 18 decimals regardless of the destination token's decimals.\r\n    * @param _srcToken - IERC20 token\r\n    * @param _destToken - IERC20 token \r\n    * @param _srcAmount - uint256 amount to be converted\r\n    * @return uint256 of the expected rate\r\n    * @return uint256 of the slippage rate\r\n    */\r\n    function getExpectedRate(IERC20 _srcToken, IERC20 _destToken, uint256 _srcAmount) \r\n        public view returns(uint256 expectedRate, uint256 slippageRate);\r\n}\r\n\r\n// File: contracts/auction/LANDAuctionStorage.sol\r\n\r\n/**\r\n* @title ERC20 Interface with burn\r\n* @dev IERC20 imported in ItokenConverter.sol\r\n*/\r\ncontract ERC20 is IERC20 {\r\n    function burn(uint256 _value) public;\r\n}\r\n\r\n\r\n/**\r\n* @title Interface for contracts conforming to ERC-721\r\n*/\r\ncontract LANDRegistry {\r\n    function assignMultipleParcels(int[] x, int[] y, address beneficiary) external;\r\n}\r\n\r\n\r\ncontract LANDAuctionStorage {\r\n    uint256 constant public PERCENTAGE_OF_TOKEN_BALANCE = 5;\r\n    uint256 constant public MAX_DECIMALS = 18;\r\n\r\n    enum Status { created, finished }\r\n\r\n    struct Func {\r\n        uint256 slope;\r\n        uint256 base;\r\n        uint256 limit;\r\n    }\r\n\r\n    struct Token {\r\n        uint256 decimals;\r\n        bool shouldBurnTokens;\r\n        bool shouldForwardTokens;\r\n        address forwardTarget;\r\n        bool isAllowed;\r\n    }\r\n\r\n    uint256 public conversionFee = 105;\r\n    uint256 public totalBids = 0;\r\n    Status public status;\r\n    uint256 public gasPriceLimit;\r\n    uint256 public landsLimitPerBid;\r\n    ERC20 public manaToken;\r\n    LANDRegistry public landRegistry;\r\n    ITokenConverter public dex;\r\n    mapping (address => Token) public tokensAllowed;\r\n    uint256 public totalManaBurned = 0;\r\n    uint256 public totalLandsBidded = 0;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    Func[] internal curves;\r\n    uint256 internal initialPrice;\r\n    uint256 internal endPrice;\r\n    uint256 internal duration;\r\n\r\n    event AuctionCreated(\r\n      address indexed _caller,\r\n      uint256 _startTime,\r\n      uint256 _duration,\r\n      uint256 _initialPrice,\r\n      uint256 _endPrice\r\n    );\r\n\r\n    event BidConversion(\r\n      uint256 _bidId,\r\n      address indexed _token,\r\n      uint256 _requiredManaAmountToBurn,\r\n      uint256 _amountOfTokenConverted,\r\n      uint256 _requiredTokenBalance\r\n    );\r\n\r\n    event BidSuccessful(\r\n      uint256 _bidId,\r\n      address indexed _beneficiary,\r\n      address indexed _token,\r\n      uint256 _pricePerLandInMana,\r\n      uint256 _manaAmountToBurn,\r\n      int[] _xs,\r\n      int[] _ys\r\n    );\r\n\r\n    event AuctionFinished(\r\n      address indexed _caller,\r\n      uint256 _time,\r\n      uint256 _pricePerLandInMana\r\n    );\r\n\r\n    event TokenBurned(\r\n      uint256 _bidId,\r\n      address indexed _token,\r\n      uint256 _total\r\n    );\r\n\r\n    event TokenTransferred(\r\n      uint256 _bidId,\r\n      address indexed _token,\r\n      address indexed _to,\r\n      uint256 _total\r\n    );\r\n\r\n    event LandsLimitPerBidChanged(\r\n      address indexed _caller,\r\n      uint256 _oldLandsLimitPerBid, \r\n      uint256 _landsLimitPerBid\r\n    );\r\n\r\n    event GasPriceLimitChanged(\r\n      address indexed _caller,\r\n      uint256 _oldGasPriceLimit,\r\n      uint256 _gasPriceLimit\r\n    );\r\n\r\n    event DexChanged(\r\n      address indexed _caller,\r\n      address indexed _oldDex,\r\n      address indexed _dex\r\n    );\r\n\r\n    event TokenAllowed(\r\n      address indexed _caller,\r\n      address indexed _address,\r\n      uint256 _decimals,\r\n      bool _shouldBurnTokens,\r\n      bool _shouldForwardTokens,\r\n      address indexed _forwardTarget\r\n    );\r\n\r\n    event TokenDisabled(\r\n      address indexed _caller,\r\n      address indexed _address\r\n    );\r\n\r\n    event ConversionFeeChanged(\r\n      address indexed _caller,\r\n      uint256 _oldConversionFee,\r\n      uint256 _conversionFee\r\n    );\r\n}\r\n\r\n// File: contracts/auction/LANDAuction.sol\r\n\r\ncontract LANDAuction is Ownable, LANDAuctionStorage {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using SafeTransfer for ERC20;\r\n\r\n    /**\r\n    * @dev Constructor of the contract.\r\n    * Note that the last value of _xPoints will be the total duration and\r\n    * the first value of _yPoints will be the initial price and the last value will be the endPrice\r\n    * @param _xPoints - uint256[] of seconds\r\n    * @param _yPoints - uint256[] of prices\r\n    * @param _startTime - uint256 timestamp in seconds when the auction will start\r\n    * @param _landsLimitPerBid - uint256 LAND limit for a single bid\r\n    * @param _gasPriceLimit - uint256 gas price limit for a single bid\r\n    * @param _manaToken - address of the MANA token\r\n    * @param _landRegistry - address of the LANDRegistry\r\n    * @param _dex - address of the Dex to convert ERC20 tokens allowed to MANA\r\n    */\r\n    constructor(\r\n        uint256[] _xPoints, \r\n        uint256[] _yPoints, \r\n        uint256 _startTime,\r\n        uint256 _landsLimitPerBid,\r\n        uint256 _gasPriceLimit,\r\n        ERC20 _manaToken,\r\n        LANDRegistry _landRegistry,\r\n        address _dex\r\n    ) public {\r\n        require(\r\n            PERCENTAGE_OF_TOKEN_BALANCE == 5, \r\n            \"Balance of tokens required should be equal to 5%\"\r\n        );\r\n        // Initialize owneable\r\n        Ownable.initialize(msg.sender);\r\n\r\n        // Schedule auction\r\n        require(_startTime > block.timestamp, \"Started time should be after now\");\r\n        startTime = _startTime;\r\n\r\n        // Set LANDRegistry\r\n        require(\r\n            address(_landRegistry).isContract(),\r\n            \"The LANDRegistry token address must be a deployed contract\"\r\n        );\r\n        landRegistry = _landRegistry;\r\n\r\n        setDex(_dex);\r\n\r\n        // Set MANAToken\r\n        allowToken(\r\n            address(_manaToken), \r\n            18,\r\n            true, \r\n            false, \r\n            address(0)\r\n        );\r\n        manaToken = _manaToken;\r\n\r\n        // Set total duration of the auction\r\n        duration = _xPoints[_xPoints.length - 1];\r\n        require(duration > 1 days, \"The duration should be greater than 1 day\");\r\n\r\n        // Set Curve\r\n        _setCurve(_xPoints, _yPoints);\r\n\r\n        // Set limits\r\n        setLandsLimitPerBid(_landsLimitPerBid);\r\n        setGasPriceLimit(_gasPriceLimit);\r\n        \r\n        // Initialize status\r\n        status = Status.created;      \r\n\r\n        emit AuctionCreated(\r\n            msg.sender,\r\n            startTime,\r\n            duration,\r\n            initialPrice, \r\n            endPrice\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Make a bid for LANDs\r\n    * @param _xs - uint256[] x values for the LANDs to bid\r\n    * @param _ys - uint256[] y values for the LANDs to bid\r\n    * @param _beneficiary - address beneficiary for the LANDs to bid\r\n    * @param _fromToken - token used to bid\r\n    */\r\n    function bid(\r\n        int[] _xs, \r\n        int[] _ys, \r\n        address _beneficiary, \r\n        ERC20 _fromToken\r\n    )\r\n        external \r\n    {\r\n        _validateBidParameters(\r\n            _xs, \r\n            _ys, \r\n            _beneficiary, \r\n            _fromToken\r\n        );\r\n        \r\n        uint256 bidId = _getBidId();\r\n        uint256 bidPriceInMana = _xs.length.mul(getCurrentPrice());\r\n        uint256 manaAmountToBurn = bidPriceInMana;\r\n\r\n        if (address(_fromToken) != address(manaToken)) {\r\n            require(\r\n                address(dex).isContract(), \r\n                \"Paying with other tokens has been disabled\"\r\n            );\r\n            // Convert from the other token to MANA. The amount to be burned might be smaller\r\n            // because 5% will be burned or forwarded without converting it to MANA.\r\n            manaAmountToBurn = _convertSafe(bidId, _fromToken, bidPriceInMana);\r\n        } else {\r\n            // Transfer MANA to this contract\r\n            require(\r\n                _fromToken.safeTransferFrom(msg.sender, address(this), bidPriceInMana),\r\n                \"Insuficient balance or unauthorized amount (transferFrom failed)\"\r\n            );\r\n        }\r\n\r\n        // Process funds (burn or forward them)\r\n        _processFunds(bidId, _fromToken);\r\n\r\n        // Assign LANDs to the beneficiary user\r\n        landRegistry.assignMultipleParcels(_xs, _ys, _beneficiary);\r\n\r\n        emit BidSuccessful(\r\n            bidId,\r\n            _beneficiary,\r\n            _fromToken,\r\n            getCurrentPrice(),\r\n            manaAmountToBurn,\r\n            _xs,\r\n            _ys\r\n        );  \r\n\r\n        // Update stats\r\n        _updateStats(_xs.length, manaAmountToBurn);        \r\n    }\r\n\r\n    /** \r\n    * @dev Validate bid function params\r\n    * @param _xs - int[] x values for the LANDs to bid\r\n    * @param _ys - int[] y values for the LANDs to bid\r\n    * @param _beneficiary - address beneficiary for the LANDs to bid\r\n    * @param _fromToken - token used to bid\r\n    */\r\n    function _validateBidParameters(\r\n        int[] _xs, \r\n        int[] _ys, \r\n        address _beneficiary, \r\n        ERC20 _fromToken\r\n    ) internal view \r\n    {\r\n        require(startTime <= block.timestamp, \"The auction has not started\");\r\n        require(\r\n            status == Status.created && \r\n            block.timestamp.sub(startTime) <= duration, \r\n            \"The auction has finished\"\r\n        );\r\n        require(tx.gasprice <= gasPriceLimit, \"Gas price limit exceeded\");\r\n        require(_beneficiary != address(0), \"The beneficiary could not be the 0 address\");\r\n        require(_xs.length > 0, \"You should bid for at least one LAND\");\r\n        require(_xs.length <= landsLimitPerBid, \"LAND limit exceeded\");\r\n        require(_xs.length == _ys.length, \"X values length should be equal to Y values length\");\r\n        require(tokensAllowed[address(_fromToken)].isAllowed, \"Token not allowed\");\r\n        for (uint256 i = 0; i < _xs.length; i++) {\r\n            require(\r\n                -150 <= _xs[i] && _xs[i] <= 150 && -150 <= _ys[i] && _ys[i] <= 150,\r\n                \"The coordinates should be inside bounds -150 & 150\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Current LAND price. \r\n    * Note that if the auction has not started returns the initial price and when\r\n    * the auction is finished return the endPrice\r\n    * @return uint256 current LAND price\r\n    */\r\n    function getCurrentPrice() public view returns (uint256) { \r\n        // If the auction has not started returns initialPrice\r\n        if (startTime == 0 || startTime >= block.timestamp) {\r\n            return initialPrice;\r\n        }\r\n\r\n        // If the auction has finished returns endPrice\r\n        uint256 timePassed = block.timestamp - startTime;\r\n        if (timePassed >= duration) {\r\n            return endPrice;\r\n        }\r\n\r\n        return _getPrice(timePassed);\r\n    }\r\n\r\n    /**\r\n    * @dev Convert allowed token to MANA and transfer the change in the original token\r\n    * Note that we will use the slippageRate cause it has a 3% buffer and a deposit of 5% to cover\r\n    * the conversion fee.\r\n    * @param _bidId - uint256 of the bid Id\r\n    * @param _fromToken - ERC20 token to be converted\r\n    * @param _bidPriceInMana - uint256 of the total amount in MANA\r\n    * @return uint256 of the total amount of MANA to burn\r\n    */\r\n    function _convertSafe(\r\n        uint256 _bidId,\r\n        ERC20 _fromToken,\r\n        uint256 _bidPriceInMana\r\n    ) internal returns (uint256 requiredManaAmountToBurn)\r\n    {\r\n        requiredManaAmountToBurn = _bidPriceInMana;\r\n        Token memory fromToken = tokensAllowed[address(_fromToken)];\r\n\r\n        uint256 bidPriceInManaPlusSafetyMargin = _bidPriceInMana.mul(conversionFee).div(100);\r\n\r\n        // Get rate\r\n        uint256 tokenRate = getRate(manaToken, _fromToken, bidPriceInManaPlusSafetyMargin);\r\n\r\n        // Check if contract should burn or transfer some tokens\r\n        uint256 requiredTokenBalance = 0;\r\n        \r\n        if (fromToken.shouldBurnTokens || fromToken.shouldForwardTokens) {\r\n            requiredTokenBalance = _calculateRequiredTokenBalance(requiredManaAmountToBurn, tokenRate);\r\n            requiredManaAmountToBurn = _calculateRequiredManaAmount(_bidPriceInMana);\r\n        }\r\n\r\n        // Calculate the amount of _fromToken to be converted\r\n        uint256 tokensToConvertPlusSafetyMargin = bidPriceInManaPlusSafetyMargin\r\n            .mul(tokenRate)\r\n            .div(10 ** 18);\r\n\r\n        // Normalize to _fromToken decimals\r\n        if (MAX_DECIMALS > fromToken.decimals) {\r\n            requiredTokenBalance = _normalizeDecimals(\r\n                fromToken.decimals, \r\n                requiredTokenBalance\r\n            );\r\n            tokensToConvertPlusSafetyMargin = _normalizeDecimals(\r\n                fromToken.decimals,\r\n                tokensToConvertPlusSafetyMargin\r\n            );\r\n        }\r\n\r\n        // Retrieve tokens from the sender to this contract\r\n        require(\r\n            _fromToken.safeTransferFrom(msg.sender, address(this), tokensToConvertPlusSafetyMargin),\r\n            \"Transfering the totalPrice in token to LANDAuction contract failed\"\r\n        );\r\n        \r\n        // Calculate the total tokens to convert\r\n        uint256 finalTokensToConvert = tokensToConvertPlusSafetyMargin.sub(requiredTokenBalance);\r\n\r\n        // Approve amount of _fromToken owned by contract to be used by dex contract\r\n        require(_fromToken.approve(address(dex), finalTokensToConvert), \"Error approve\");\r\n\r\n        // Convert _fromToken to MANA\r\n        uint256 change = dex.convert(\r\n                _fromToken,\r\n                manaToken,\r\n                finalTokensToConvert,\r\n                requiredManaAmountToBurn\r\n        );\r\n\r\n       // Return change in _fromToken to sender\r\n        if (change > 0) {\r\n            // Return the change of src token\r\n            require(\r\n                _fromToken.safeTransfer(msg.sender, change),\r\n                \"Transfering the change to sender failed\"\r\n            );\r\n        }\r\n\r\n        // Remove approval of _fromToken owned by contract to be used by dex contract\r\n        require(_fromToken.approve(address(dex), 1), \"Error remove approval\");\r\n\r\n        emit BidConversion(\r\n            _bidId,\r\n            address(_fromToken),\r\n            requiredManaAmountToBurn,\r\n            tokensToConvertPlusSafetyMargin.sub(change),\r\n            requiredTokenBalance\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Get exchange rate\r\n    * @param _srcToken - IERC20 token\r\n    * @param _destToken - IERC20 token \r\n    * @param _srcAmount - uint256 amount to be converted\r\n    * @return uint256 of the rate\r\n    */\r\n    function getRate(\r\n        IERC20 _srcToken, \r\n        IERC20 _destToken, \r\n        uint256 _srcAmount\r\n    ) public view returns (uint256 rate) \r\n    {\r\n        (rate,) = dex.getExpectedRate(_srcToken, _destToken, _srcAmount);\r\n    }\r\n\r\n    /** \r\n    * @dev Calculate the amount of tokens to process\r\n    * @param _totalPrice - uint256 price to calculate percentage to process\r\n    * @param _tokenRate - rate to calculate the amount of tokens\r\n    * @return uint256 of the amount of tokens required\r\n    */\r\n    function _calculateRequiredTokenBalance(\r\n        uint256 _totalPrice,\r\n        uint256 _tokenRate\r\n    ) \r\n    internal pure returns (uint256) \r\n    {\r\n        return _totalPrice.mul(_tokenRate)\r\n            .div(10 ** 18)\r\n            .mul(PERCENTAGE_OF_TOKEN_BALANCE)\r\n            .div(100);\r\n    }\r\n\r\n    /** \r\n    * @dev Calculate the total price in MANA\r\n    * Note that PERCENTAGE_OF_TOKEN_BALANCE will be always less than 100\r\n    * @param _totalPrice - uint256 price to calculate percentage to keep\r\n    * @return uint256 of the new total price in MANA\r\n    */\r\n    function _calculateRequiredManaAmount(\r\n        uint256 _totalPrice\r\n    ) \r\n    internal pure returns (uint256)\r\n    {\r\n        return _totalPrice.mul(100 - PERCENTAGE_OF_TOKEN_BALANCE).div(100);\r\n    }\r\n\r\n    /**\r\n    * @dev Burn or forward the MANA and other tokens earned\r\n    * Note that as we will transfer or burn tokens from other contracts.\r\n    * We should burn MANA first to avoid a possible re-entrancy\r\n    * @param _bidId - uint256 of the bid Id\r\n    * @param _token - ERC20 token\r\n    */\r\n    function _processFunds(uint256 _bidId, ERC20 _token) internal {\r\n        // Burn MANA\r\n        _burnTokens(_bidId, manaToken);\r\n\r\n        // Burn or forward token if it is not MANA\r\n        Token memory token = tokensAllowed[address(_token)];\r\n        if (_token != manaToken) {\r\n            if (token.shouldBurnTokens) {\r\n                _burnTokens(_bidId, _token);\r\n            }\r\n            if (token.shouldForwardTokens) {\r\n                _forwardTokens(_bidId, token.forwardTarget, _token);\r\n            }   \r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev LAND price based on time\r\n    * Note that will select the function to calculate based on the time\r\n    * It should return endPrice if _time < duration\r\n    * @param _time - uint256 time passed before reach duration\r\n    * @return uint256 price for the given time\r\n    */\r\n    function _getPrice(uint256 _time) internal view returns (uint256) {\r\n        for (uint256 i = 0; i < curves.length; i++) {\r\n            Func storage func = curves[i];\r\n            if (_time < func.limit) {\r\n                return func.base.sub(func.slope.mul(_time));\r\n            }\r\n        }\r\n        revert(\"Invalid time\");\r\n    }\r\n\r\n    /** \r\n    * @dev Burn tokens\r\n    * @param _bidId - uint256 of the bid Id\r\n    * @param _token - ERC20 token\r\n    */\r\n    function _burnTokens(uint256 _bidId, ERC20 _token) private {\r\n        uint256 balance = _token.balanceOf(address(this));\r\n\r\n        // Check if balance is valid\r\n        require(balance > 0, \"Balance to burn should be > 0\");\r\n        \r\n        _token.burn(balance);\r\n\r\n        emit TokenBurned(_bidId, address(_token), balance);\r\n\r\n        // Check if balance of the auction contract is empty\r\n        balance = _token.balanceOf(address(this));\r\n        require(balance == 0, \"Burn token failed\");\r\n    }\r\n\r\n    /** \r\n    * @dev Forward tokens\r\n    * @param _bidId - uint256 of the bid Id\r\n    * @param _address - address to send the tokens to\r\n    * @param _token - ERC20 token\r\n    */\r\n    function _forwardTokens(uint256 _bidId, address _address, ERC20 _token) private {\r\n        uint256 balance = _token.balanceOf(address(this));\r\n\r\n        // Check if balance is valid\r\n        require(balance > 0, \"Balance to burn should be > 0\");\r\n        \r\n        _token.safeTransfer(_address, balance);\r\n\r\n        emit TokenTransferred(\r\n            _bidId, \r\n            address(_token), \r\n            _address,balance\r\n        );\r\n\r\n        // Check if balance of the auction contract is empty\r\n        balance = _token.balanceOf(address(this));\r\n        require(balance == 0, \"Transfer token failed\");\r\n    }\r\n\r\n    /**\r\n    * @dev Set conversion fee rate\r\n    * @param _fee - uint256 for the new conversion rate\r\n    */\r\n    function setConversionFee(uint256 _fee) external onlyOwner {\r\n        require(_fee < 200 && _fee >= 100, \"Conversion fee should be >= 100 and < 200\");\r\n        emit ConversionFeeChanged(msg.sender, conversionFee, _fee);\r\n        conversionFee = _fee;\r\n    }\r\n\r\n    /**\r\n    * @dev Finish auction \r\n    */\r\n    function finishAuction() public onlyOwner {\r\n        require(status != Status.finished, \"The auction is finished\");\r\n\r\n        uint256 currentPrice = getCurrentPrice();\r\n\r\n        status = Status.finished;\r\n        endTime = block.timestamp;\r\n\r\n        emit AuctionFinished(msg.sender, block.timestamp, currentPrice);\r\n    }\r\n\r\n    /**\r\n    * @dev Set LAND for the auction\r\n    * @param _landsLimitPerBid - uint256 LAND limit for a single id\r\n    */\r\n    function setLandsLimitPerBid(uint256 _landsLimitPerBid) public onlyOwner {\r\n        require(_landsLimitPerBid > 0, \"The LAND limit should be greater than 0\");\r\n        emit LandsLimitPerBidChanged(msg.sender, landsLimitPerBid, _landsLimitPerBid);\r\n        landsLimitPerBid = _landsLimitPerBid;\r\n    }\r\n\r\n    /**\r\n    * @dev Set gas price limit for the auction\r\n    * @param _gasPriceLimit - uint256 gas price limit for a single bid\r\n    */\r\n    function setGasPriceLimit(uint256 _gasPriceLimit) public onlyOwner {\r\n        require(_gasPriceLimit > 0, \"The gas price should be greater than 0\");\r\n        emit GasPriceLimitChanged(msg.sender, gasPriceLimit, _gasPriceLimit);\r\n        gasPriceLimit = _gasPriceLimit;\r\n    }\r\n\r\n    /**\r\n    * @dev Set dex to convert ERC20\r\n    * @param _dex - address of the token converter\r\n    */\r\n    function setDex(address _dex) public onlyOwner {\r\n        require(_dex != address(dex), \"The dex is the current\");\r\n        if (_dex != address(0)) {\r\n            require(_dex.isContract(), \"The dex address must be a deployed contract\");\r\n        }\r\n        emit DexChanged(msg.sender, dex, _dex);\r\n        dex = ITokenConverter(_dex);\r\n    }\r\n\r\n    /**\r\n    * @dev Allow ERC20 to to be used for bidding\r\n    * Note that if _shouldBurnTokens and _shouldForwardTokens are false, we \r\n    * will convert the total amount of the ERC20 to MANA\r\n    * @param _address - address of the ERC20 Token\r\n    * @param _decimals - uint256 of the number of decimals\r\n    * @param _shouldBurnTokens - boolean whether we should burn funds\r\n    * @param _shouldForwardTokens - boolean whether we should transferred funds\r\n    * @param _forwardTarget - address where the funds will be transferred\r\n    */\r\n    function allowToken(\r\n        address _address,\r\n        uint256 _decimals,\r\n        bool _shouldBurnTokens,\r\n        bool _shouldForwardTokens,\r\n        address _forwardTarget\r\n    ) \r\n    public onlyOwner \r\n    {\r\n        require(\r\n            _address.isContract(),\r\n            \"Tokens allowed should be a deployed ERC20 contract\"\r\n        );\r\n        require(\r\n            _decimals > 0 && _decimals <= MAX_DECIMALS,\r\n            \"Decimals should be greather than 0 and less or equal to 18\"\r\n        );\r\n        require(\r\n            !(_shouldBurnTokens && _shouldForwardTokens),\r\n            \"The token should be either burned or transferred\"\r\n        );\r\n        require(\r\n            !_shouldForwardTokens || \r\n            (_shouldForwardTokens && _forwardTarget != address(0)),\r\n            \"The token should be transferred to a deployed contract\"\r\n        );\r\n        require(\r\n            _forwardTarget != address(this) && _forwardTarget != _address, \r\n            \"The forward target should be different from  this contract and the erc20 token\"\r\n        );\r\n        \r\n        require(!tokensAllowed[_address].isAllowed, \"The ERC20 token is already allowed\");\r\n\r\n        tokensAllowed[_address] = Token({\r\n            decimals: _decimals,\r\n            shouldBurnTokens: _shouldBurnTokens,\r\n            shouldForwardTokens: _shouldForwardTokens,\r\n            forwardTarget: _forwardTarget,\r\n            isAllowed: true\r\n        });\r\n\r\n        emit TokenAllowed(\r\n            msg.sender, \r\n            _address, \r\n            _decimals,\r\n            _shouldBurnTokens,\r\n            _shouldForwardTokens,\r\n            _forwardTarget\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Disable ERC20 to to be used for bidding\r\n    * @param _address - address of the ERC20 Token\r\n    */\r\n    function disableToken(address _address) public onlyOwner {\r\n        require(\r\n            tokensAllowed[_address].isAllowed,\r\n            \"The ERC20 token is already disabled\"\r\n        );\r\n        delete tokensAllowed[_address];\r\n        emit TokenDisabled(msg.sender, _address);\r\n    }\r\n\r\n    /** \r\n    * @dev Create a combined function.\r\n    * note that we will set N - 1 function combinations based on N points (x,y)\r\n    * @param _xPoints - uint256[] of x values\r\n    * @param _yPoints - uint256[] of y values\r\n    */\r\n    function _setCurve(uint256[] _xPoints, uint256[] _yPoints) internal {\r\n        uint256 pointsLength = _xPoints.length;\r\n        require(pointsLength == _yPoints.length, \"Points should have the same length\");\r\n        for (uint256 i = 0; i < pointsLength - 1; i++) {\r\n            uint256 x1 = _xPoints[i];\r\n            uint256 x2 = _xPoints[i + 1];\r\n            uint256 y1 = _yPoints[i];\r\n            uint256 y2 = _yPoints[i + 1];\r\n            require(x1 < x2, \"X points should increase\");\r\n            require(y1 > y2, \"Y points should decrease\");\r\n            (uint256 base, uint256 slope) = _getFunc(\r\n                x1, \r\n                x2, \r\n                y1, \r\n                y2\r\n            );\r\n            curves.push(Func({\r\n                base: base,\r\n                slope: slope,\r\n                limit: x2\r\n            }));\r\n        }\r\n\r\n        initialPrice = _yPoints[0];\r\n        endPrice = _yPoints[pointsLength - 1];\r\n    }\r\n\r\n    /**\r\n    * @dev Calculate base and slope for the given points\r\n    * It is a linear function y = ax - b. But The slope should be negative.\r\n    * As we want to avoid negative numbers in favor of using uints we use it as: y = b - ax\r\n    * Based on two points (x1; x2) and (y1; y2)\r\n    * base = (x2 * y1) - (x1 * y2) / (x2 - x1)\r\n    * slope = (y1 - y2) / (x2 - x1) to avoid negative maths\r\n    * @param _x1 - uint256 x1 value\r\n    * @param _x2 - uint256 x2 value\r\n    * @param _y1 - uint256 y1 value\r\n    * @param _y2 - uint256 y2 value\r\n    * @return uint256 for the base\r\n    * @return uint256 for the slope\r\n    */\r\n    function _getFunc(\r\n        uint256 _x1,\r\n        uint256 _x2,\r\n        uint256 _y1, \r\n        uint256 _y2\r\n    ) internal pure returns (uint256 base, uint256 slope) \r\n    {\r\n        base = ((_x2.mul(_y1)).sub(_x1.mul(_y2))).div(_x2.sub(_x1));\r\n        slope = (_y1.sub(_y2)).div(_x2.sub(_x1));\r\n    }\r\n\r\n    /**\r\n    * @dev Return bid id\r\n    * @return uint256 of the bid id\r\n    */\r\n    function _getBidId() private view returns (uint256) {\r\n        return totalBids;\r\n    }\r\n\r\n    /** \r\n    * @dev Normalize to _fromToken decimals\r\n    * @param _decimals - uint256 of _fromToken decimals\r\n    * @param _value - uint256 of the amount to normalize\r\n    */\r\n    function _normalizeDecimals(\r\n        uint256 _decimals, \r\n        uint256 _value\r\n    ) \r\n    internal pure returns (uint256 _result) \r\n    {\r\n        _result = _value.div(10**MAX_DECIMALS.sub(_decimals));\r\n    }\r\n\r\n    /** \r\n    * @dev Update stats. It will update the following stats:\r\n    * - totalBids\r\n    * - totalLandsBidded\r\n    * - totalManaBurned\r\n    * @param _landsBidded - uint256 of the number of LAND bidded\r\n    * @param _manaAmountBurned - uint256 of the amount of MANA burned\r\n    */\r\n    function _updateStats(uint256 _landsBidded, uint256 _manaAmountBurned) private {\r\n        totalBids = totalBids.add(1);\r\n        totalLandsBidded = totalLandsBidded.add(_landsBidded);\r\n        totalManaBurned = totalManaBurned.add(_manaAmountBurned);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_landsLimitPerBid\",\"type\":\"uint256\"}],\"name\":\"setLandsLimitPerBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"setGasPriceLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalManaBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"disableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_shouldBurnTokens\",\"type\":\"bool\"},{\"name\":\"_shouldForwardTokens\",\"type\":\"bool\"},{\"name\":\"_forwardTarget\",\"type\":\"address\"}],\"name\":\"allowToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"landsLimitPerBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTAGE_OF_TOKEN_BALANCE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dex\",\"type\":\"address\"}],\"name\":\"setDex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLandsBidded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPriceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_xs\",\"type\":\"int256[]\"},{\"name\":\"_ys\",\"type\":\"int256[]\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"landRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setConversionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_srcAmount\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensAllowed\",\"outputs\":[{\"name\":\"decimals\",\"type\":\"uint256\"},{\"name\":\"shouldBurnTokens\",\"type\":\"bool\"},{\"name\":\"shouldForwardTokens\",\"type\":\"bool\"},{\"name\":\"forwardTarget\",\"type\":\"address\"},{\"name\":\"isAllowed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_xPoints\",\"type\":\"uint256[]\"},{\"name\":\"_yPoints\",\"type\":\"uint256[]\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_landsLimitPerBid\",\"type\":\"uint256\"},{\"name\":\"_gasPriceLimit\",\"type\":\"uint256\"},{\"name\":\"_manaToken\",\"type\":\"address\"},{\"name\":\"_landRegistry\",\"type\":\"address\"},{\"name\":\"_dex\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_initialPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endPrice\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_requiredManaAmountToBurn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amountOfTokenConverted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_requiredTokenBalance\",\"type\":\"uint256\"}],\"name\":\"BidConversion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_pricePerLandInMana\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_manaAmountToBurn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_xs\",\"type\":\"int256[]\"},{\"indexed\":false,\"name\":\"_ys\",\"type\":\"int256[]\"}],\"name\":\"BidSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_pricePerLandInMana\",\"type\":\"uint256\"}],\"name\":\"AuctionFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"TokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldLandsLimitPerBid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_landsLimitPerBid\",\"type\":\"uint256\"}],\"name\":\"LandsLimitPerBidChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldGasPriceLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_gasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"GasPriceLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_oldDex\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_dex\",\"type\":\"address\"}],\"name\":\"DexChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_decimals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_shouldBurnTokens\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_shouldForwardTokens\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"_forwardTarget\",\"type\":\"address\"}],\"name\":\"TokenAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TokenDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldConversionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_conversionFee\",\"type\":\"uint256\"}],\"name\":\"ConversionFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LANDAuction","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000005c091eae000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000009502f90000000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942000000000000000000000000036570162bc64a4e1201f1ba4a3fcd87e35b0b2f000000000000000000000000d734d794958ba6b89b6162fd14e8ababc228a98d000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000002a3000000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000000000000000000000000000000000000013c6800000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000001158e460913d000000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000022b1c8c1227a00000000000000000000000000000000000000000000000000000de0b6b3a7640000","Library":"","SwarmSource":"bzzr://32f8b4f6f18e1df144be57251c4078a89bd02c745cab274c7c1b1151f4637345"}]}