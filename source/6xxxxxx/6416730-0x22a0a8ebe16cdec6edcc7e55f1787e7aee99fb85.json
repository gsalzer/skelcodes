{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n//\r\n//   ____                                      ______                        __      \r\n//  /\\  _`\\                                   /\\__  _\\                      /\\ \\__   \r\n//  \\ \\,\\L\\_\\  __  __  _____      __   _ __   \\/_/\\ \\/ _ __   __  __    ____\\ \\ ,_\\  \r\n//   \\/_\\__ \\ /\\ \\/\\ \\/\\ '__`\\  /'__`\\/\\`'__\\    \\ \\ \\/\\`'__\\/\\ \\/\\ \\  /',__\\\\ \\ \\/  \r\n//     /\\ \\L\\ \\ \\ \\_\\ \\ \\ \\L\\ \\/\\  __/\\ \\ \\/      \\ \\ \\ \\ \\/ \\ \\ \\_\\ \\/\\__, `\\\\ \\ \\_ \r\n//     \\ `\\____\\ \\____/\\ \\ ,__/\\ \\____\\\\ \\_\\       \\ \\_\\ \\_\\  \\ \\____/\\/\\____/ \\ \\__\\\r\n//      \\/_____/\\/___/  \\ \\ \\/  \\/____/ \\/_/        \\/_/\\/_/   \\/___/  \\/___/   \\/__/\r\n//                       \\ \\_\\               \r\n//                        \\/_/                                                        \r\n//\r\n//  ETHEREUM PSEUDO-INVESTMENT SMART CONTRACT\r\n//\r\n//  Make a payment to this address to become a participant. Once invested,\r\n//  any following transactions of any amount will request dividend payout\r\n//  for you and increase invested amount.\r\n//\r\n//  Easter Eggs:\r\n//  1. If a function \"advertise\" called by any ethereum address with supplied\r\n//  referring address and at least 0.15 ETH, and referring address makes\r\n//  payments in future, referrer address will receive 3% referral bonuses.\r\n//  E.g., in geth console you can do the following:\r\n//\r\n//  var abi = eth.contract(<TrustABI>);\r\n//  var contract = abi.at(\"<TrustAddress>\");\r\n//  var calldata = contract.advertise.getData(\"<TargetAddress>\");\r\n//  web3.eth.sendTransaction({from:\"<YourAddress>\", to:\"<TrustAddress>\",\r\n//      data: calldata, value: web3.toWei(0.15, \"ether\"), gas:200000});\r\n//\r\n//  Copypaste and insert your values into \"<>\" placeholders.\r\n//\r\n//  Referring wallet will receive an advertisement payment of 1 WEI and your\r\n//  supplied ETH value will be invested. PLEASE NOTE that 0.15 ETH price\r\n//  may be changed - see \"Read Contract\" tab on etherscan.io.\r\n//\r\n//  2. Gold investor receive instant 3% bonus payments, when regular\r\n//  investors make payments greater than 0.05 ETH on each N-th transaction.\r\n//\r\n//  3. Gold referrer will receive additional bonus in similar way as the gold\r\n//  investor.\r\n//\r\n//  Please do not send payments via contracts and other unusual ways -\r\n//  these payments may be lost. Recommended gas limit per transaction is\r\n//  200000.\r\n//\r\n//  Initial GAIN:                               4%\r\n//  Referral Bonus:                             3% from investments\r\n//  Gold Bonus:                                 3% from every N-th investment\r\n//  Project Fee:                                3% from dividends\r\n//  Minimum investment:                         No limit\r\n//  Other questions:                            apiman45445 at protonmail.com\r\n//\r\n\r\ncontract SuperTrust {\r\n\t// Generate public view getters for game settings and stats\r\n\taddress public admin = msg.sender;\r\n\tuint256 public round = 0;\r\n\tuint256 public payoutFee;\r\n\tuint256 public goldBonus;\r\n\tuint256 public referralBonus;\r\n\tuint256 public investorGain;\r\n\tuint256 public bonusInterval;\r\n\tuint256 public bonusThreshold;\r\n\tuint256 public advPrice;\r\n\tuint256 public investorCount;\r\n\tuint256 public avgMinedPerDay;\r\n\tuint256 public collectedFee = 0;\r\n\tbool public lastRound = false; \r\n    // Hide some data from public access to prevent manipulations\r\n\tmapping(uint256 => mapping(address => Investor)) private investors;\r\n\tmapping(uint256 => mapping(address => address)) private referrals;\r\n\taddress[2] private board;\r\n\tuint256 private roulett;\r\n\r\n\tstruct Investor {\r\n\t\tuint256 deposit;\r\n\t\tuint256 block;\r\n\t\tuint256 refBalance;\r\n\t\tbool banned;\r\n\t}\r\n\r\n\tfunction globalReinitialization() private {\r\n\t\tpayoutFee = 3;\r\n\t\tgoldBonus = 3;\r\n\t\treferralBonus = 3;\r\n\t\tinvestorGain = 4;\r\n\t\tbonusInterval = 5;\r\n\t\tbonusThreshold = 0.05 ether;\r\n\t\tadvPrice = 0.15 ether;\r\n\t\tinvestorCount = 0;\r\n\t\tavgMinedPerDay = 5900;\r\n\t\tboard = [admin, admin];\r\n\t\troulett = bonusInterval * board.length;\r\n\t}\r\n\r\n\tconstructor () public {\r\n\t\tglobalReinitialization();\r\n\t}\r\n\r\n\t//\r\n\t// Administration\r\n\t//\r\n\r\n\tevent LogAdminRetired(address, address, address);\r\n\tevent LogPayoutFeeChanged(address, uint256, uint256);\r\n\tevent LogGoldBonusChanged(address, uint256, uint256);\r\n\tevent LogReferralBonusChanged(address, uint256, uint256);\r\n\tevent LogInvestorGainChanged(address, uint256, uint256);\r\n\tevent LogBonusIntervalChanged(address, uint256, uint256);\r\n\tevent LogBonusThresholdChanged(address, uint256, uint256);\r\n\tevent LogAdvPriceChanged(address, uint256, uint256);\r\n\tevent LogAvgMinedPerDayChanged(address, uint256, uint256);\r\n\tevent LogReferrerBanned(address, address, string);\r\n\r\n\tmodifier asAdmin {\r\n\t\trequire(msg.sender == admin, \"unauthorized function call\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction retireAdmin(address newAdmin) public asAdmin {\r\n\t\temit LogAdminRetired(msg.sender, admin, newAdmin);\r\n\t\tadmin = newAdmin;\r\n\t}\r\n\r\n\tfunction setPayoutFee(uint256 newValue) public asAdmin {\r\n\t\t// Administrator cannot withdraw all money at any time.\r\n\t\trequire((newValue > 0) && (newValue <= 10));\r\n\t\temit LogPayoutFeeChanged(msg.sender, payoutFee, newValue);\r\n\t\tpayoutFee = newValue;\r\n\t}\r\n\r\n\tfunction setGoldBonus(uint256 newValue) public asAdmin {\r\n\t\trequire((newValue > 0) && (newValue <= 10));\r\n\t\temit LogGoldBonusChanged(msg.sender, goldBonus, newValue);\r\n\t\tgoldBonus = newValue;\r\n\t}\r\n\r\n\tfunction setReferralBonus(uint256 newValue) public asAdmin {\r\n\t\trequire((newValue > 0) && (newValue <= 10));\r\n\t\temit LogReferralBonusChanged(msg.sender, referralBonus, newValue);\r\n\t\treferralBonus = newValue;\r\n\t}\r\n\r\n\tfunction setInvestorGain(uint256 newValue) public asAdmin {\r\n\t\trequire((newValue > 0) && (newValue <= 5));\r\n\t\temit LogInvestorGainChanged(msg.sender, investorGain, newValue);\r\n\t\tinvestorGain = newValue;\r\n\t}\r\n\r\n\tfunction setBonusInterval(uint256 newValue) public asAdmin {\r\n\t\trequire(newValue > 0);\r\n\t\temit LogBonusIntervalChanged(msg.sender, bonusInterval, newValue);\r\n\t\tbonusInterval = newValue;\r\n\t\troulett = bonusInterval * board.length;\r\n\t}\r\n\r\n\tfunction setBonusThreshold(uint256 newValue) public asAdmin {\r\n\t\temit LogBonusThresholdChanged(msg.sender, bonusThreshold, newValue);\r\n\t\tbonusThreshold = newValue;\r\n\t}\r\n\r\n\tfunction setAdvPrice(uint256 newValue) public asAdmin {\r\n\t\temit LogAdvPriceChanged(msg.sender, advPrice, newValue);\r\n\t\tadvPrice = newValue;\r\n\t}\r\n\r\n\tfunction setAvgMinedPerDay(uint256 newValue) public asAdmin {\r\n\t\trequire(newValue >= 4000);\r\n\t\temit LogAvgMinedPerDayChanged(msg.sender, avgMinedPerDay, newValue);\r\n\t\tavgMinedPerDay = newValue;\r\n\t}\r\n\r\n\tfunction collectFee(uint256 percent) public asAdmin {\r\n\t\trequire(percent <= 100);\r\n\t\tuint256 amount = (collectedFee * percent) / 100;\r\n\t\trequire(amount <= collectedFee);\r\n\t\tcollectedFee -= amount;\r\n\t\tadmin.transfer(amount);\r\n\t}\r\n\r\n\tfunction banReferrer(address target) public asAdmin {\r\n\t\trequire(target != admin);\r\n\t\temit LogReferrerBanned(msg.sender, target, \"Violating referrer banned\");\r\n\t\tinvestors[round][target].banned = true;\r\n\t\tboard[1] = admin; // refBonus of admin is always zero\r\n\t}\r\n\r\n\tfunction unbanReferrer(address target) public asAdmin {\r\n\t\trequire(target != admin);\r\n\t\temit LogReferrerBanned(msg.sender, target, \"Referrer unbanned\");\r\n\t\tinvestors[round][target].banned = false;\r\n\t}\r\n\r\n\t//\r\n\t// Game logic\r\n\t//\r\n\r\n\tevent LogGoldBonus(address, address, uint256);\r\n\tevent LogReferralBonus(address, address, uint256);\r\n\tevent LogAdvertisement(address, address, uint256);\r\n\tevent LogNewInvestor(address, uint256);\r\n\tevent LogRoundEnd(address, uint256, uint256, uint256);\r\n\tevent LogBoardChange(address, uint256, string);\r\n\r\n\tfunction payoutBonuses() private {\r\n\t\t// GOLD bonus payout, if any\r\n\t\troulett--;\r\n\t\tif (roulett % bonusInterval == 0) {\r\n\t\t\tuint256 bonusAmount = (msg.value * goldBonus) / 100;\r\n\t\t\tuint256 winnIdx = roulett / bonusInterval;\r\n\t\t\tif ((board[winnIdx] != msg.sender) && (board[winnIdx] != admin)) {\r\n\t\t\t\t// Payouts to itself are not applicable, admin has its own reward\r\n\t\t\t\temit LogGoldBonus(msg.sender, board[winnIdx], bonusAmount);\r\n\t\t\t\tpayoutBalanceCheck(board[winnIdx], bonusAmount);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (roulett == 0)\r\n\t\t\troulett = bonusInterval * board.length;\r\n\t}\r\n\r\n\tfunction payoutReferrer() private {\r\n\t\tuint256 bonusAmount = (msg.value * referralBonus) / 100;\r\n\t\taddress referrer = referrals[round][msg.sender];\r\n\t\tif (!investors[round][referrer].banned) {\r\n\t\t\tif (referrer != admin)\r\n\t\t\t\tinvestors[round][referrer].refBalance += bonusAmount;\r\n\t\t\temit LogReferralBonus(msg.sender, referrer, bonusAmount);\r\n\t\t\tupdateGoldReferrer(referrer);\r\n\t\t\tpayoutBalanceCheck(referrer, bonusAmount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction payoutBalanceCheck(address to, uint256 value) private {\r\n\t\tif (to == admin) {\r\n\t\t\tcollectedFee += value;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (value > (address(this).balance - 0.01 ether)) {\r\n\t\t\tif (lastRound)\r\n\t\t\t\tselfdestruct(admin);\r\n\t\t\temit LogRoundEnd(msg.sender, value, address(this).balance, round);\r\n\t\t\tglobalReinitialization();\r\n\t\t\tround++;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tto.transfer(value);\r\n\t}\r\n\r\n\tfunction processDividends() private {\r\n\t\tif (investors[round][msg.sender].deposit != 0) {\r\n\t\t\t// ((investorGain% from deposit) * minedBlocks) / avgMinedPerDay\r\n\t\t\tuint256 deposit = investors[round][msg.sender].deposit;\r\n\t\t\tuint256 previousBlock = investors[round][msg.sender].block;\r\n\t\t\tuint256 minedBlocks = block.number - previousBlock;\r\n\t\t\tuint256 dailyIncome = (deposit * investorGain) / 100;\r\n\t\t\tuint256 divsAmount = (dailyIncome * minedBlocks) / avgMinedPerDay;\r\n\t\t\tcollectedFee += (divsAmount * payoutFee) / 100;\r\n\t\t\tpayoutBalanceCheck(msg.sender, divsAmount);\t\r\n\t\t}\r\n\t\telse if (msg.value != 0) {\r\n\t\t\temit LogNewInvestor(msg.sender, ++investorCount);\r\n\t\t}\r\n\t\tinvestors[round][msg.sender].block = block.number;\r\n\t\tinvestors[round][msg.sender].deposit += msg.value;\r\n\t}\r\n\r\n\tfunction updateGoldInvestor(address candidate) private {\r\n\t\tuint256 candidateDeposit = investors[round][candidate].deposit;\r\n\t\tif (candidateDeposit > investors[round][board[0]].deposit) {\r\n\t\t\tboard[0] = candidate;\r\n\t\t\temit LogBoardChange(candidate, candidateDeposit,\r\n\t\t\t\t\"Congrats! New Gold Investor!\");\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateGoldReferrer(address candidate) private {\r\n\t\t// Admin can refer participants, but will not be the gold referrer.\r\n\t\tif ((candidate != admin) && (!investors[round][candidate].banned)) {\r\n\t\t\tuint256 candidateRefBalance = investors[round][candidate].refBalance;\r\n\t\t\tuint256 goldReferrerBalance = investors[round][board[1]].refBalance;\r\n\t\t\tif (candidateRefBalance > goldReferrerBalance) {\r\n\t\t\t\tboard[1] = candidate;\r\n\t\t\t\temit LogBoardChange(candidate, candidateRefBalance,\r\n\t\t\t\t\t\"Congrats! New Gold Referrer!\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction regularPayment() private {\r\n\t\tif (msg.value >= bonusThreshold) {\r\n\t\t\tpayoutBonuses();\r\n\t\t\tif (referrals[round][msg.sender] != 0)\r\n\t\t\t\tpayoutReferrer();\r\n\t\t}\r\n\t\tprocessDividends();\r\n\t\tupdateGoldInvestor(msg.sender);\r\n\t}\r\n\r\n\tfunction advertise(address targetAddress) external payable {\r\n\t\t// Any violation results in failed transaction\r\n\t\tif (investors[round][msg.sender].banned)\r\n\t\t\trevert(\"You are violating the rules and banned\");\r\n\t\tif ((msg.sender != admin) && (msg.value < advPrice))\r\n\t\t\trevert(\"Need more ETH to make an advertiement\");\r\n\t\tif (investors[round][targetAddress].deposit != 0)\r\n\t\t\trevert(\"Advertising address is already an investor\");\r\n\t\tif (referrals[round][targetAddress] != 0)\r\n\t\t\trevert(\"Address already advertised\");\r\n\r\n\t\temit LogAdvertisement(msg.sender, targetAddress, msg.value);\r\n\t\treferrals[round][targetAddress] = msg.sender;\r\n\t\ttargetAddress.transfer(1 wei);\r\n\t\tregularPayment();\r\n\t}\r\n\r\n\tfunction () external payable {\r\n\t\tregularPayment();\r\n\t} \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAdvPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"advertise\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"retireAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAvgMinedPerDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"avgMinedPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setReferralBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setGoldBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"collectFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unbanReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setBonusThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setBonusInterval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"banReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorGain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setInvestorGain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setPayoutFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"LogAdminRetired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogPayoutFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogGoldBonusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogReferralBonusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogInvestorGainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogBonusIntervalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogBonusThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogAdvPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogAvgMinedPerDayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"name\":\"LogReferrerBanned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogGoldBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogReferralBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogAdvertisement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogNewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogRoundEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"name\":\"LogBoardChange\",\"type\":\"event\"}]","ContractName":"SuperTrust","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2ebf2c322551a093e750e11d7a6d5d594739271d55f875dd217f0bae8f1b79e6"}]}