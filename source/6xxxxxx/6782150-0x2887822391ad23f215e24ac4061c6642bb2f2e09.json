{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n/* Required code start */\r\ncontract MarketplaceProxy {\r\n    function calculatePlatformCommission(uint256 weiAmount) public view returns (uint256);\r\n    function payPlatformIncomingTransactionCommission(address clientAddress) public payable;\r\n    function payPlatformOutgoingTransactionCommission() public payable;\r\n    function isUserBlockedByContract(address contractAddress) public view returns (bool);\r\n}\r\n/* Required code end */\r\n\r\ncontract Deposit is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct ClientDeposit {\r\n        uint256 balance;\r\n        // We should reject incoming transactions on payable \r\n        // methods that not equals this variable\r\n        uint256 nextPaymentTotalAmount;\r\n        uint256 nextPaymentDepositCommission;   // deposit commission stored on contract\r\n        uint256 nextPaymentPlatformCommission;\r\n        bool exists;\r\n        bool isBlocked;\r\n    }\r\n    mapping(address => ClientDeposit) public depositsMap;\r\n\r\n    /* Required code start */\r\n    MarketplaceProxy public mp;\r\n    event PlatformIncomingTransactionCommission(uint256 amount, address clientAddress);\r\n    event PlatformOutgoingTransactionCommission(uint256 amount);\r\n    event Blocked();\r\n    /* Required code end */\r\n    event DepositCommission(uint256 amount, address clientAddress);\r\n\r\n    constructor () public {\r\n        /* Required code start */\r\n        // NOTE: CHANGE ADDRESS ON PRODUCTION\r\n        mp = MarketplaceProxy(0x17b38d3779debcf1079506522e10284d3c6b0fef);\r\n        /* Required code end */\r\n    }\r\n\r\n    /**\r\n     * @dev Handles direct clients transactions\r\n     */\r\n    function () public payable {\r\n        handleIncomingPayment(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Handles payment gateway transactions\r\n     * @param clientAddress when payment method is fiat money\r\n     */\r\n    function fromPaymentGateway(address clientAddress) public payable {\r\n        handleIncomingPayment(clientAddress, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Send commission to marketplace and increases client balance\r\n     * @param clientAddress client wallet for deposit\r\n     * @param amount transaction value (msg.value)\r\n     */\r\n    function handleIncomingPayment(address clientAddress, uint256 amount) private {\r\n        ClientDeposit storage clientDeposit = depositsMap[clientAddress];\r\n\r\n        require(clientDeposit.exists);\r\n        require(clientDeposit.nextPaymentTotalAmount == amount);\r\n\r\n        /* Required code start */\r\n        // Send all incoming eth if user blocked\r\n        if (mp.isUserBlockedByContract(address(this))) {\r\n            mp.payPlatformIncomingTransactionCommission.value(amount)(clientAddress);\r\n            emit Blocked();\r\n        } else {\r\n            mp.payPlatformIncomingTransactionCommission.value(clientDeposit.nextPaymentPlatformCommission)(clientAddress);\r\n            emit PlatformIncomingTransactionCommission(clientDeposit.nextPaymentPlatformCommission, clientAddress);\r\n        }\r\n        /* Required code end */\r\n\r\n        // Virtually add ETH to client deposit (sended ETH subtract platform and deposit commissions)\r\n        clientDeposit.balance += amount.sub(clientDeposit.nextPaymentPlatformCommission).sub(clientDeposit.nextPaymentDepositCommission);\r\n        emit DepositCommission(clientDeposit.nextPaymentDepositCommission, clientAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner can add ETH to contract without commission\r\n     */\r\n    function addEth() public payable onlyOwner {\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Owner can transfer ETH from contract to address\r\n     * @param to address\r\n     * @param amount 18 decimals (wei)\r\n     */\r\n    function transferEthTo(address to, uint256 amount) public onlyOwner {\r\n        require(address(this).balance > amount);\r\n\r\n        /* Required code start */\r\n        // Get commission amount from marketplace\r\n        uint256 commission = mp.calculatePlatformCommission(amount);\r\n\r\n        require(address(this).balance > amount.add(commission));\r\n\r\n        // Send commission to marketplace\r\n        mp.payPlatformOutgoingTransactionCommission.value(commission)();\r\n        emit PlatformOutgoingTransactionCommission(commission);\r\n        /* Required code end */\r\n\r\n        to.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Send client's balance to some address on claim\r\n     * @param from client address\r\n     * @param to send ETH on this address\r\n     * @param amount 18 decimals (wei)\r\n     */\r\n    function claim(address from, address to, uint256 amount) public onlyOwner{\r\n        require(depositsMap[from].exists);\r\n\r\n        /* Required code start */\r\n        // Get commission amount from marketplace\r\n        uint256 commission = mp.calculatePlatformCommission(amount);\r\n\r\n        require(address(this).balance > amount.add(commission));\r\n        require(depositsMap[from].balance > amount);\r\n\r\n        // Send commission to marketplace\r\n        mp.payPlatformOutgoingTransactionCommission.value(commission)();\r\n        emit PlatformOutgoingTransactionCommission(commission);\r\n        /* Required code end */\r\n\r\n        // Virtually subtract amount from client deposit\r\n        depositsMap[from].balance -= amount;\r\n\r\n        to.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @return bool, client exist or not\r\n     */\r\n    function isClient(address clientAddress) public view onlyOwner returns(bool) {\r\n        return depositsMap[clientAddress].exists;\r\n    }\r\n\r\n    /**\r\n     * @dev Add new client to structure\r\n     * @param clientAddress wallet\r\n     * @param _nextPaymentTotalAmount reject next incoming payable transaction if it's amount not equal to this variable\r\n     * @param _nextPaymentDepositCommission deposit commission stored on contract\r\n     * @param _nextPaymentPlatformCommission marketplace commission to send\r\n     */\r\n    function addClient(address clientAddress, uint256 _nextPaymentTotalAmount, uint256 _nextPaymentDepositCommission, uint256 _nextPaymentPlatformCommission) public onlyOwner {\r\n        require( (clientAddress != address(0)));\r\n\r\n        // Can be called only once for address\r\n        require(!depositsMap[clientAddress].exists);\r\n\r\n        // Add new element to structure\r\n        depositsMap[clientAddress] = ClientDeposit(\r\n            0,                                  // balance\r\n            _nextPaymentTotalAmount,            // nextPaymentTotalAmount\r\n            _nextPaymentDepositCommission,      // nextPaymentDepositCommission\r\n            _nextPaymentPlatformCommission,     // nextPaymentPlatformCommission\r\n            true,                               // exists\r\n            false                               // isBlocked\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return uint256 client balance\r\n     */\r\n    function getClientBalance(address clientAddress) public view returns(uint256) {\r\n        return depositsMap[clientAddress].balance;\r\n    }\r\n\r\n    /**\r\n     * @dev Update client payment details\r\n     * @param clientAddress wallet\r\n     * @param _nextPaymentTotalAmount reject next incoming payable transaction if it's amount not equal to this variable\r\n     * @param _nextPaymentDepositCommission deposit commission stored on contract\r\n     * @param _nextPaymentPlatformCommission marketplace commission to send\r\n     */\r\n    function repeatedPayment(address clientAddress, uint256 _nextPaymentTotalAmount, uint256 _nextPaymentDepositCommission, uint256 _nextPaymentPlatformCommission) public onlyOwner {\r\n        ClientDeposit storage clientDeposit = depositsMap[clientAddress];\r\n\r\n        require(clientAddress != address(0));\r\n        require(clientDeposit.exists);\r\n\r\n        clientDeposit.nextPaymentTotalAmount = _nextPaymentTotalAmount;\r\n        clientDeposit.nextPaymentDepositCommission = _nextPaymentDepositCommission;\r\n        clientDeposit.nextPaymentPlatformCommission = _nextPaymentPlatformCommission;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"fromPaymentGateway\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"getClientBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"isClient\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEthTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clientAddress\",\"type\":\"address\"},{\"name\":\"_nextPaymentTotalAmount\",\"type\":\"uint256\"},{\"name\":\"_nextPaymentDepositCommission\",\"type\":\"uint256\"},{\"name\":\"_nextPaymentPlatformCommission\",\"type\":\"uint256\"}],\"name\":\"addClient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositsMap\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"nextPaymentTotalAmount\",\"type\":\"uint256\"},{\"name\":\"nextPaymentDepositCommission\",\"type\":\"uint256\"},{\"name\":\"nextPaymentPlatformCommission\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"isBlocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clientAddress\",\"type\":\"address\"},{\"name\":\"_nextPaymentTotalAmount\",\"type\":\"uint256\"},{\"name\":\"_nextPaymentDepositCommission\",\"type\":\"uint256\"},{\"name\":\"_nextPaymentPlatformCommission\",\"type\":\"uint256\"}],\"name\":\"repeatedPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"PlatformIncomingTransactionCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlatformOutgoingTransactionCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Blocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"DepositCommission\",\"type\":\"event\"}]","ContractName":"Deposit","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3581556488bef9dcdf6d2d9476bf8fdf2b75e50974e536998f4c5e27076c11f1"}]}