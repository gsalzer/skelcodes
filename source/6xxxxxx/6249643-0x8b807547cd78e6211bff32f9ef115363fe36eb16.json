{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error.\r\n */\r\nlibrary SafeMath {\r\n    // Multiplies two numbers, throws on overflow./\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) return 0;\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    // Integer division of two numbers, truncating the quotient.\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    // Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    // Adds two numbers, throws on overflow.\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title CMR_Mining distribution-contract (C 25 / M 25 / R 50)\r\n */\r\ncontract CMR_Mining {\r\n    using SafeMath for uint256;\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Variables\r\n    // -------------------------------------------------------------------------\r\n    \r\n    struct Member {\r\n        uint256 share;                               // Percent of mining profits\r\n        uint256 unpaid;                              // Available Wei for withdrawal, + 1 in storage for gas optimization\r\n    }                                              \r\n    mapping (address => Member) private members;     // All contract members as 'Member'-struct\r\n    \r\n    uint16    public memberCount;                   // Count of all members\r\n    address[] public memberIndex;                   // Lookuptable of all member addresses to iterate on deposit over and assign unpaid Ether to members\r\n    \r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Private functions, can only be called by this contract\r\n    // -------------------------------------------------------------------------\r\n    \r\n    function _addMember (address _member, uint256 _share) private {\r\n        emit AddMember(_member, _share);\r\n        members[_member].share = _share;\r\n        members[_member].unpaid = 1;\r\n        memberIndex.push(_member);\r\n        memberCount++;\r\n    }\r\n    \r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n    \r\n    constructor () public {\r\n        // Initialize members with their share (total 100) and trigger 'AddMember'-event\r\n        _addMember(0xd2Ce719a0d00f4f8751297aD61B0E936970282E1, 50);\r\n        _addMember(0xE517CB63e4dD36533C26b1ffF5deB893E63c3afA, 25);\r\n        _addMember(0x430e1dd1ab2E68F201B53056EF25B9e116979D9b, 25);\r\n    }\r\n    \r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Events\r\n    // -------------------------------------------------------------------------\r\n    \r\n    event AddMember(address indexed member, uint256 share);\r\n    event Withdraw(address indexed member, uint256 value);\r\n    event Deposit(address indexed from, uint256 value);\r\n    \r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Public external interface\r\n    // -------------------------------------------------------------------------\r\n    \r\n    function () external payable {\r\n        // Distribute deposited Ether to all members related to their profit-share\r\n        for (uint i=0; i<memberIndex.length; i++) {\r\n            members[memberIndex[i]].unpaid = \r\n                // Adding current deposit to members unpaid Wei amount\r\n                members[memberIndex[i]].unpaid.add(\r\n                    // MemberShare * DepositedWei / 100 = WeiAmount of member-share to be added to members unpaid holdings\r\n                    members[memberIndex[i]].share.mul(msg.value).div(100)\r\n                );\r\n        }\r\n        \r\n        // Trigger 'Deposit'-event\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n    \r\n    function withdraw () external { \r\n        // Pre-validate withdrawal\r\n        require(members[msg.sender].unpaid > 1, \"No unpaid balance or not a member account\");\r\n        \r\n        // Remember members unpaid amount but remove it from his contract holdings before initiating the withdrawal for security reasons\r\n        uint256 unpaid = members[msg.sender].unpaid.sub(1);\r\n        members[msg.sender].unpaid = 1;\r\n        \r\n        // Trigger 'Withdraw'-event\r\n        emit Withdraw(msg.sender, unpaid);\r\n        \r\n        // Transfer the unpaid Wei amount to member address\r\n        msg.sender.transfer(unpaid);\r\n    }\r\n    \r\n    function shareOf (address _member) public view returns (uint256) {\r\n        // Get share percentage of member\r\n        return members[_member].share;\r\n    }\r\n    \r\n    function unpaidOf (address _member) public view returns (uint256) {\r\n        // Get unpaid Wei amount of member\r\n        return members[_member].unpaid.sub(1);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"memberCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"shareOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"unpaidOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memberIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"AddMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"}]","ContractName":"CMR_Mining","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4ea6da9916aa042eff1918029d21e4aa39b9110568634cb5203f6e3d34be17ac"}]}