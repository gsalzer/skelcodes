{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a && c >= b);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Extent {\r\n    using SafeMath for uint;\r\n\r\n    address public admin; //the admin address\r\n    mapping(address => bool) private canClaimTokens;\r\n    mapping(address => uint) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n    mapping(address => uint) public claimableAmount; //mapping of token addresses to max amount to claim\r\n\r\n    event Deposit(address token, address user, uint amount, uint balance);\r\n    event Withdraw(address token, address user, uint amount, uint balance);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelisted(address address_) {\r\n        require(canClaimTokens[address_]);\r\n        _;\r\n    }\r\n\r\n    constructor(address admin_) public {\r\n        admin = admin_;\r\n    }\r\n\r\n    function() public payable {\r\n        revert(\"Cannot send ETH directly to the Contract\");\r\n    }\r\n\r\n    function changeAdmin(address admin_) public onlyAdmin {\r\n        admin = admin_;\r\n    }\r\n\r\n    function addToWhitelist(address address_) public onlyAdmin {\r\n        canClaimTokens[address_] = true;\r\n    }\r\n\r\n    function addToWhitelistBulk(address[] addresses_) public onlyAdmin {\r\n        for (uint i = 0; i < addresses_.length; i++) {\r\n            canClaimTokens[addresses_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setAmountToClaim(address token, uint amount) public onlyAdmin {\r\n        claimableAmount[token] = amount;\r\n    }\r\n\r\n    function depositToken(address token, uint amount) public onlyAdmin {\r\n        //remember to call ERC20Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n        if (token == 0) revert(\"Cannot deposit ETH with depositToken method\");\r\n        if (!ERC20(token).transferFrom(msg.sender, this, amount)) revert(\"You didn't call approve method on Token contract\");\r\n        tokens[token] += amount;\r\n        emit Deposit(token, msg.sender, amount, tokens[token]);\r\n    }\r\n\r\n    function claimTokens(address token) public onlyWhitelisted(msg.sender) {\r\n        if (token == 0) revert(\"Cannot withdraw ETH with withdrawToken method\");\r\n        if (tokens[token] < claimableAmount[token]) revert(\"Not enough tokens to claim\");\r\n        tokens[token] -= claimableAmount[token];\r\n        canClaimTokens[msg.sender] = false;\r\n        if (!ERC20(token).transfer(msg.sender, claimableAmount[token])) revert(\"Error while transfering tokens\");\r\n        emit Withdraw(token, msg.sender, claimableAmount[token], tokens[token]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAmountToClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses_\",\"type\":\"address[]\"}],\"name\":\"addToWhitelistBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"Extent","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f57fe198c7f951f964534266c4f2188fc4b479d29314ad813ae1b2109c3911cf"}]}