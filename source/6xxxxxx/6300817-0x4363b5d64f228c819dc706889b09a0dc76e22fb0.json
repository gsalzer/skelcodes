{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\ninterface token {\r\n    function transfer(address to, uint tokens) external;\r\n    function balanceOf(address tokenOwner) external returns(uint balance);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    event tokensBought(address _addr, uint _amount);\r\n    event tokensCalledBack(uint _amount);\r\n    event privateSaleEnded(uint _time);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Crowdsale is Owned{\r\n    using SafeMath for uint;\r\n    \r\n    uint public start;\r\n    uint public end;\r\n    uint public phaseOneLimit;\r\n    uint public phaseTwoLimit;\r\n    uint public phaseThreeLimit;\r\n    uint public levelOneBonus;\r\n    uint public levelTwoBonus;\r\n    uint public levelThreeBonus;\r\n    uint public softCap;\r\n    uint public hardCap;\r\n    bool public hardCapReached;\r\n    \r\n    mapping (address => address) public refers;\r\n    \r\n    mapping (address => uint) public etherHoldings;\r\n    mapping (address => uint) public tokenHoldings;\r\n    \r\n    token public rewardToken;\r\n    \r\n    constructor() public{\r\n        start = now;\r\n        end = now.safeAdd(112 days);\r\n        rewardToken = token(0x64d431354f27009965b163f7e6cdb60700ad5d12);\r\n        phaseOneLimit = 10000 ether;\r\n        phaseTwoLimit = 30000 ether;\r\n        phaseThreeLimit = 50000 ether;\r\n        levelOneBonus = 3;\r\n        levelTwoBonus = 2;\r\n        levelThreeBonus = 1;\r\n        softCap = 10000 ether;\r\n        hardCap = 50000 ether;\r\n    }\r\n    \r\n    modifier stillActive{\r\n        require(address(this).balance <= phaseThreeLimit && now <= end);\r\n        _;\r\n    }\r\n    \r\n    function returnETher(address _addr) view public returns(uint){\r\n        return etherHoldings[_addr];\r\n    }\r\n    \r\n    function () public payable stillActive{\r\n        require(msg.value != 0);\r\n        uint cb = address(this).balance;\r\n        address buyer = msg.sender;\r\n        uint buyamount = msg.value;\r\n        uint tokens;\r\n        if(cb <= phaseOneLimit){\r\n            tokens = buyamount * 2000;\r\n        }\r\n        if(cb <= phaseTwoLimit && cb > phaseOneLimit){\r\n            tokens = buyamount * 1500;\r\n        }\r\n        if(cb <= phaseThreeLimit && cb > phaseTwoLimit ){\r\n            tokens = buyamount * 1000;\r\n        }\r\n        etherHoldings[buyer] += msg.value;\r\n        tokenHoldings[buyer] += tokens;\r\n        \r\n    }\r\n    \r\n    \r\n    function buyWithReferral(address _addr) public payable stillActive{\r\n        require(msg.sender != _addr);\r\n        require(msg.value != 0);\r\n        uint cb = address(this).balance;\r\n        address buyer = msg.sender;\r\n        uint buyamount = msg.value;\r\n        uint tokens;\r\n        refers[buyer] = _addr;\r\n        address ref1 = _addr;\r\n        address ref2 = refers[ref1];\r\n        address ref3 = refers[ref2];\r\n        \r\n        \r\n        if(cb <= phaseOneLimit){\r\n            tokens = buyamount * 2000;\r\n        }\r\n        if(cb <= phaseTwoLimit && cb > phaseOneLimit){\r\n            tokens = buyamount * 1500;\r\n        }\r\n        if(cb <= phaseThreeLimit && cb > phaseTwoLimit ){\r\n            tokens = buyamount * 1000;\r\n        }\r\n        \r\n        etherHoldings[buyer] += buyamount;\r\n        tokenHoldings[buyer] += tokens;\r\n\r\n        uint reftok1 = tokens/uint(100);\r\n        reftok1 = reftok1 * 5;\r\n        reftok1 = reftok1;\r\n        tokenHoldings[ref1] += reftok1;\r\n\r\n        \r\n        if(ref2 != 0){\r\n        uint reftok2 = tokens/uint(100);\r\n        reftok2 = reftok2 * 3;\r\n        reftok2 = reftok2;\r\n        tokenHoldings[ref2] += reftok2;\r\n        }\r\n        \r\n        if(ref3 != 0){\r\n        uint reftok3 = tokens/uint(100);\r\n        reftok3 = reftok3 * 1;\r\n        reftok3 = reftok3;\r\n        tokenHoldings[ref3] += reftok3;\r\n        }\r\n        \r\n    }\r\n    \r\n    modifier saleSuccessful{\r\n        require(now > end);\r\n        _;\r\n    }\r\n    \r\n    modifier saleFailed{\r\n        require (now > end && address(this).balance < softCap );\r\n        _;\r\n    }\r\n    \r\n    function releaseTokens() public {\r\n        uint tokens = tokenHoldings[msg.sender];\r\n        if(tokens <= 0){\r\n            revert();\r\n        }\r\n        rewardToken.transfer(msg.sender, tokens);\r\n        tokenHoldings[msg.sender] = 0;\r\n    }\r\n    \r\n    \r\n    function releaseEthers() public saleFailed{\r\n        uint ethers = etherHoldings[msg.sender];\r\n        if(ethers <= 0){\r\n            revert();\r\n        }\r\n        msg.sender.transfer(ethers);\r\n        etherHoldings[msg.sender] = 0;\r\n        \r\n    }\r\n    \r\n    modifier softCapReached{\r\n        require(address(this).balance >= softCap);\r\n        _;\r\n    }\r\n    \r\n    function safeWithdrawal() public onlyOwner softCapReached {\r\n        uint amount = address(this).balance;\r\n        owner.transfer(amount);\r\n        \r\n    }\r\n    \r\n\r\n    function withdrawTokens() public onlyOwner saleSuccessful{\r\n        uint Ownerbalance = rewardToken.balanceOf(this);\r\n    \trewardToken.transfer(owner, Ownerbalance);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"phaseThreeLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenHoldings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phaseOneLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"returnETher\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelThreeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseEthers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phaseTwoLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"buyWithReferral\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelOneBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherHoldings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelTwoBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokensCalledBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"privateSaleEnded\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://891630a2cbf156f6179f0da9134d9a766dca8fca6c3dab2cc812f34db79417d8"}]}