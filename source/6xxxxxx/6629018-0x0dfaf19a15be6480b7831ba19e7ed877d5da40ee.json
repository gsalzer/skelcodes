{"status":"1","message":"OK","result":[{"SourceCode":"contract Owner {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Owner(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    function changeOwner(address _newOwnerAddr) public onlyOwner {\r\n        require(_newOwnerAddr != address(0));\r\n        owner = _newOwnerAddr;\r\n    }\r\n}\r\n\r\ncontract XPOT is Owner {\r\n    \r\n    event Game(uint _game, uint indexed _time);\r\n\r\n    event Ticket(\r\n        address indexed _address,\r\n        uint indexed _game,\r\n        uint _number,\r\n        uint _time\r\n    );\r\n    \r\n    // Game fee.\r\n    uint8 public fee = 10;\r\n    // Current game number.\r\n    uint public game;\r\n    // Ticket price.\r\n    uint public ticketPrice = 0.01 ether;\r\n    // New ticket price.\r\n    uint public newPrice;\r\n    // All-time game jackpot.\r\n    uint public allTimeJackpot = 0;\r\n    // All-time game players count\r\n    uint public allTimePlayers = 0;\r\n    \r\n    // Game status.\r\n    bool public isActive = true;\r\n    // The variable that indicates game status switching.\r\n    bool public toogleStatus = false;\r\n    // The array of all games\r\n    uint[] public games;\r\n    \r\n    // Store game jackpot.\r\n    mapping(uint => uint) jackpot;\r\n    // Store game players.\r\n    mapping(uint => address[]) players;\r\n    \r\n    // Funds distributor address.\r\n    address public fundsDistributor;\r\n\r\n    /**\r\n    * @dev Check sender address and compare it to an owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function XPOT(\r\n        address distributor\r\n    ) \r\n     public Owner(msg.sender)\r\n    {\r\n        fundsDistributor = distributor;\r\n        startGame();\r\n    }\r\n\r\n    function() public payable {\r\n        buyTicket(address(0));\r\n    }\r\n\r\n    function getPlayedGamePlayers() \r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return getPlayersInGame(game);\r\n    }\r\n\r\n    function getPlayersInGame(uint playedGame) \r\n        public \r\n        view\r\n        returns (uint)\r\n    {\r\n        return players[playedGame].length;\r\n    }\r\n\r\n    function getPlayedGameJackpot() \r\n        public \r\n        view\r\n        returns (uint) \r\n    {\r\n        return getGameJackpot(game);\r\n    }\r\n    \r\n    function getGameJackpot(uint playedGame) \r\n        public \r\n        view \r\n        returns(uint)\r\n    {\r\n        return jackpot[playedGame];\r\n    }\r\n    \r\n    function toogleActive() public onlyOwner() {\r\n        if (!isActive) {\r\n            isActive = true;\r\n        } else {\r\n            toogleStatus = !toogleStatus;\r\n        }\r\n    }\r\n    \r\n    function start() public onlyOwner() {\r\n        if (players[game].length > 0) {\r\n            pickTheWinner();\r\n        }\r\n        startGame();\r\n    }\r\n\r\n    function changeTicketPrice(uint price) \r\n        public \r\n        onlyOwner() \r\n    {\r\n        newPrice = price;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Get random number.\r\n    * @dev Random number calculation depends on block timestamp,\r\n    * @dev difficulty, number and hash.\r\n    *\r\n    * @param min Minimal number.\r\n    * @param max Maximum number.\r\n    * @param time Timestamp.\r\n    * @param difficulty Block difficulty.\r\n    * @param number Block number.\r\n    * @param bHash Block hash.\r\n    */\r\n    function randomNumber(\r\n        uint min,\r\n        uint max,\r\n        uint time,\r\n        uint difficulty,\r\n        uint number,\r\n        bytes32 bHash\r\n    ) \r\n        public \r\n        pure \r\n        returns (uint) \r\n    {\r\n        min ++;\r\n        max ++;\r\n\r\n        uint random = uint(keccak256(\r\n            time * \r\n            difficulty * \r\n            number *\r\n            uint(bHash)\r\n        ))%10 + 1;\r\n       \r\n        uint result = uint(keccak256(random))%(min+max)-min;\r\n        \r\n        if (result > max) {\r\n            result = max;\r\n        }\r\n        \r\n        if (result < min) {\r\n            result = min;\r\n        }\r\n        \r\n        result--;\r\n\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n    * @dev The payable method that accepts ether and adds the player to the game.\r\n    */\r\n    function buyTicket(address partner) public payable {\r\n        require(isActive);\r\n        require(msg.value == ticketPrice);\r\n        \r\n        jackpot[game] += msg.value;\r\n        \r\n        uint playerNumber =  players[game].length;\r\n        players[game].push(msg.sender);\r\n\r\n        emit Ticket(msg.sender, game, playerNumber, now);\r\n    }\r\n\r\n    /**\r\n    * @dev Start the new game.\r\n    * @dev Checks ticket price changes, if exists new ticket price the price will be changed.\r\n    * @dev Checks game status changes, if exists request for changing game status game status \r\n    * @dev will be changed.\r\n    */\r\n    function startGame() internal {\r\n        require(isActive);\r\n\r\n        game = block.number;\r\n        if (newPrice != 0) {\r\n            ticketPrice = newPrice;\r\n            newPrice = 0;\r\n        }\r\n        if (toogleStatus) {\r\n            isActive = !isActive;\r\n            toogleStatus = false;\r\n        }\r\n        emit Game(game, now);\r\n    }\r\n\r\n    /**\r\n    * @dev Pick the winner.\r\n    * @dev Check game players, depends on player count provides next logic:\r\n    * @dev - if in the game is only one player, by game rules the whole jackpot \r\n    * @dev without commission returns to him.\r\n    * @dev - if more than one player smart contract randomly selects one player, \r\n    * @dev calculates commission and after that jackpot transfers to the winner,\r\n    * @dev commision to founders.\r\n    */\r\n    function pickTheWinner() internal {\r\n        uint winner;\r\n        uint toPlayer;\r\n        if (players[game].length == 1) {\r\n            toPlayer = jackpot[game];\r\n            players[game][0].transfer(jackpot[game]);\r\n            winner = 0;\r\n        } else {\r\n            winner = randomNumber(\r\n                0,\r\n                players[game].length - 1,\r\n                block.timestamp,\r\n                block.difficulty,\r\n                block.number,\r\n                blockhash(block.number - 1)\r\n            );\r\n        \r\n            uint distribute = jackpot[game] * fee / 100;\r\n            toPlayer = jackpot[game] - distribute;\r\n            players[game][winner].transfer(toPlayer);\r\n            fundsDistributor.transfer(distribute);\r\n        }\r\n        \r\n        allTimeJackpot += toPlayer;\r\n        allTimePlayers += players[game].length;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"toogleActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getGameJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTimePlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changeTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTimeJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getPlayersInGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsDistributor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toogleStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"difficulty\",\"type\":\"uint256\"},{\"name\":\"number\",\"type\":\"uint256\"},{\"name\":\"bHash\",\"type\":\"bytes32\"}],\"name\":\"randomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerAddr\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayedGamePlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayedGameJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"distributor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Game\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Ticket\",\"type\":\"event\"}]","ContractName":"XPOT","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c675686bbf9f058b3bdf65df21220da47ff3a75d","Library":"","SwarmSource":"bzzr://4bbeb8452b97e0565180589ed1f33ebc7bc71caf33638205c3c4937de5d3f838"}]}