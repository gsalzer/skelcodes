{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n/*\r\n* giff\r\n* giff\r\n* giff\r\n* giff\r\n* giff\r\n* giff\r\n* giff\r\n* giff\r\n* giff\r\n*\r\n* Author:  Konstantin G...\r\n* Telegram: @bunnygame (en)\r\n* talk : https://bitcointalk.org/index.php?topic=5025885.0\r\n* discord : https://discordapp.com/invite/G2jt4Fw\r\n* email: info@bunnycoin.co\r\n* site : http://bunnycoin.co \r\n*/\r\ncontract Ownable {\r\n    address owner;        \r\n    constructor() public {\r\n        owner = msg.sender; \r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwner(address _add) public onlyOwner {\r\n        if (_add != address(0)) {\r\n            owner = _add;\r\n        }\r\n    }  \r\n}\r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  \r\n}\r\n\r\n\r\ncontract PublicInterface { \r\n    function transferFrom(address _from, address _to, uint32 _tokenId) public returns (bool);\r\n    function ownerOf(uint32 _tokenId) public view returns (address owner);\r\n    function isUIntPublic() public view returns(bool);\r\n    //function setAllowedChangeSex( uint32 _bunny, bool canBunny) public;\r\n    //function ownerOf(uint32 _tokenId) public view returns (address owner);\r\n\r\n    function getAllowedChangeSex(uint32 _bunny) public view returns(bool);\r\n    function getBirthCount(uint32 _bunny) public view returns(uint);\r\n    function getBirthLastTime(uint32 _bunny) public view returns(uint);\r\n    function getRabbitSirePrice(uint32 _bunny) public view returns(uint);\r\n    function setAllowedChangeSex( uint32 _bunny, bool canBunny) public;\r\n    function setRabbitSirePrice( uint32 _bunny, uint count) external;\r\n}\r\n\r\ncontract Gift  is Ownable { \r\n    event SendGift(address from, address to, uint32 bunnyId);\r\n    event ChengeSex(uint32 bunnyId, bool sex, uint256 price);\r\n\r\n\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 bigPrice = 0.003 ether;\r\n    function setBigPrice(uint _bigPrice) public onlyOwner() {\r\n        bigPrice = _bigPrice;\r\n    }\r\n    uint32[12] public cooldowns = [\r\n        uint32(1 minutes),\r\n        uint32(2 minutes),\r\n        uint32(4 minutes),\r\n        uint32(8 minutes),\r\n        uint32(16 minutes),\r\n        uint32(32 minutes),\r\n        uint32(1 hours),\r\n        uint32(2 hours),\r\n        uint32(4 hours),\r\n        uint32(8 hours),\r\n        uint32(16 hours),\r\n        uint32(1 days)\r\n    ];\r\n\r\n\r\n    bool public pause = false; \r\n    uint public totalGift = 0; \r\n    uint public lastGiftTime = 0; \r\n  \r\n    uint public commission_system = 5;\r\n    \r\n    address public lastGift; \r\n    address public pubAddress; \r\n\r\n    PublicInterface publicContract; \r\n \r\n    constructor() public { \r\n        transferContract(0x2Ed020b084F7a58Ce7AC5d86496dC4ef48413a24);\r\n    }\r\n    function transferContract(address _pubAddress) public onlyOwner {\r\n        require(_pubAddress != address(0)); \r\n        pubAddress = _pubAddress;\r\n        publicContract = PublicInterface(_pubAddress);\r\n    } \r\n    function setPause() public onlyOwner {\r\n        pause = !pause;\r\n    }\r\n    function isPauseSave() public  view returns(bool){\r\n        return !pause;\r\n    } \r\n     \r\n    function getSirePrice(uint32 _tokenId) public view returns(uint) {\r\n        if(publicContract.getRabbitSirePrice(_tokenId) != 0){\r\n            uint procent = (publicContract.getRabbitSirePrice(_tokenId) / 100);\r\n            uint res = procent.mul(25);\r\n            uint system  = procent.mul(commission_system);\r\n            res = res.add( publicContract.getRabbitSirePrice(_tokenId));\r\n            return res.add(system); \r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    function setRabbitSirePrice(uint32 _rabbitid, uint price) public {\r\n        require(isPauseSave());\r\n        require(publicContract.ownerOf(_rabbitid) == msg.sender);\r\n        require(price > bigPrice);\r\n        require(publicContract.getAllowedChangeSex(_rabbitid));\r\n        require(publicContract.getRabbitSirePrice(_rabbitid) != price);\r\n        uint lastTime;\r\n        (lastTime,,) = getcoolduwn(_rabbitid);\r\n        require(now >= lastTime);\r\n        publicContract.setRabbitSirePrice(_rabbitid, price);\r\n        emit ChengeSex(_rabbitid, true, getSirePrice(_rabbitid));\r\n\r\n    }\r\n    function setSireStop(uint32 _rabbitid) public returns(bool) {\r\n        require(isPauseSave());\r\n        require(publicContract.getRabbitSirePrice(_rabbitid) !=0);\r\n\r\n        require(publicContract.ownerOf(_rabbitid) == msg.sender);\r\n     //   require(rabbits[(_rabbitid-1)].role == 0);\r\n        publicContract.setRabbitSirePrice( _rabbitid, 0);\r\n     //   deleteSire(_rabbitid);\r\n        emit ChengeSex(_rabbitid, false, 0);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function sendGift(uint32 _bunnyId, address _to) public {\r\n        require(isPauseSave());\r\n        require(checkContract());\r\n        require(ownerOf(_bunnyId) == msg.sender);\r\n        require(_to != address(0)); \r\n        publicContract.transferFrom(msg.sender, _to, _bunnyId); \r\n        publicContract.setAllowedChangeSex( _bunnyId, true);\r\n        lastGift = msg.sender; \r\n        totalGift = totalGift + 1;\r\n        lastGiftTime = block.timestamp;\r\n        emit SendGift(msg.sender, _to, _bunnyId);\r\n    }  \r\n\r\n\r\n\r\n    function ownerOf(uint32 _bunnyId) public  view returns(address) {\r\n        return publicContract.ownerOf(_bunnyId);\r\n    } \r\n    function checkContract() public view returns(bool) {\r\n        return publicContract.isUIntPublic(); \r\n    }\r\n    function isUIntPublic() public view returns(bool) {\r\n        require(isPauseSave());\r\n        return true;\r\n    }\r\n    /**\r\n     *  we get cooldown\r\n     */\r\n    function getcoolduwn(uint32 _mother) public view returns(uint lastTime, uint cd, uint lefttime) {\r\n        cd = publicContract.getBirthCount(_mother);\r\n        if(cd > 11) {\r\n            cd = 11;\r\n        }\r\n        // time when I can give birth\r\n        lastTime = (cooldowns[cd] + publicContract.getBirthLastTime(_mother));\r\n        if(lastTime > now) {\r\n            // I can not give birth, it remains until delivery\r\n            lefttime = lastTime.sub(now);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_mother\",\"type\":\"uint32\"}],\"name\":\"getcoolduwn\",\"outputs\":[{\"name\":\"lastTime\",\"type\":\"uint256\"},{\"name\":\"cd\",\"type\":\"uint256\"},{\"name\":\"lefttime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunnyId\",\"type\":\"uint32\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sendGift\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunnyId\",\"type\":\"uint32\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGift\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rabbitid\",\"type\":\"uint32\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setRabbitSirePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pubAddress\",\"type\":\"address\"}],\"name\":\"transferContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"getSirePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bigPrice\",\"type\":\"uint256\"}],\"name\":\"setBigPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUIntPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPauseSave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastGiftTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rabbitid\",\"type\":\"uint32\"}],\"name\":\"setSireStop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pubAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastGift\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission_system\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"}],\"name\":\"SendGift\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"sex\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ChengeSex\",\"type\":\"event\"}]","ContractName":"Gift","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://15fe99d3f1f44ad5ba59a7334596468e9eb4cfd3d5543d82e79789a4dc4fba52"}]}