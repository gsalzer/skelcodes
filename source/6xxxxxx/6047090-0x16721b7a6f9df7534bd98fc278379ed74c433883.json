{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ninterface HourglassInterface  {\r\n    function() payable external;\r\n    function buy(address _playerAddress) payable external returns(uint256);\r\n    function sell(uint256 _amountOfTokens) external;\r\n    function reinvest() external;\r\n    function withdraw() external;\r\n    function exit() external;\r\n    function dividendsOf(address _playerAddress) external view returns(uint256);\r\n    function balanceOf(address _playerAddress) external view returns(uint256);\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\r\n    function stakingRequirement() external view returns(uint256);\r\n}\r\ncontract DivMultisigHackable is Owned {\r\nHourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\r\n\r\nfunction buyp3d(uint256 amt) internal{\r\nP3Dcontract_.buy.value(amt)(this);\r\n}\r\nfunction claimdivs() internal{\r\nP3Dcontract_.withdraw();\r\n}\r\n// amount of divs available\r\n\r\nstruct HackableSignature {\r\n    address owner;\r\n    uint256 hackingcost;\r\n    uint256 encryption;\r\n}\r\nuint256 private ethtosend;\r\nuint256 private nexId;\r\nuint256 public totalsigs;\r\nmapping(uint256 => HackableSignature) public Multisigs;  \r\nmapping(address => uint256) public lasthack;\r\n\r\naddress public contrp3d = 0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe;\r\nuint256 private div;\r\nuint256 private count;\r\nconstructor(uint256 amtsigs) public{\r\n    for(nexId = 0; nexId < amtsigs;nexId++){\r\n    Multisigs[nexId].owner = msg.sender;\r\n    Multisigs[nexId].hackingcost = 1;\r\n    Multisigs[nexId].encryption = 1;\r\n}\r\ntotalsigs = amtsigs;\r\n}\r\nevent onHarvest(\r\n        address customerAddress,\r\n        uint256 amount\r\n    );\r\nfunction harvestabledivs()\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return ( P3Dcontract_.dividendsOf(address(this)))  ;\r\n    }\r\nfunction amountofp3d() external view returns(uint256){\r\n    return ( P3Dcontract_.balanceOf(address(this)))  ;\r\n}\r\nfunction Hacksig(uint256 nmbr) public payable{\r\n    require(lasthack[msg.sender] < block.number);\r\n    require(nmbr < totalsigs);\r\n    require(Multisigs[nmbr].owner != msg.sender);\r\n    require(msg.value >= Multisigs[nmbr].hackingcost + Multisigs[nmbr].encryption);\r\n    Multisigs[nmbr].owner = msg.sender;\r\n    Multisigs[nmbr].hackingcost ++;\r\n    Multisigs[nmbr].encryption = 0;\r\n    lasthack[msg.sender] = block.number;\r\n}\r\nfunction Encrypt(uint256 nmbr) public payable{\r\n    require(Multisigs[nmbr].owner == msg.sender);//prevent encryption of hacked sig\r\n    Multisigs[nmbr].encryption += msg.value;\r\n    }\r\n\r\nfunction HackDivs() public payable{\r\n    div = harvestabledivs();\r\n    require(msg.value >= 1 finney);\r\n    require(div > 0);\r\n    count = 0;\r\n    for(nexId = 0; nexId < totalsigs;nexId++){\r\n    if(Multisigs[nexId].owner == msg.sender){\r\n        count++;\r\n    }\r\n}\r\nrequire(count > totalsigs/2);\r\n    claimdivs();\r\n    //1% to owner\r\n    ethtosend = div /100;\r\n    owner.transfer(ethtosend);\r\n    ethtosend = ethtosend * 99;\r\n    msg.sender.transfer(ethtosend);\r\n    emit onHarvest(msg.sender,ethtosend);\r\n}\r\n\r\nfunction Expand() public {\r\n    //1% to owner\r\n    ethtosend = this.balance /100;\r\n    owner.transfer(ethtosend);\r\n    //99% buy p3d\r\n    buyp3d(this.balance);\r\n}\r\n\r\nfunction () external payable{}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"HackDivs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contrp3d\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nmbr\",\"type\":\"uint256\"}],\"name\":\"Hacksig\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestabledivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountofp3d\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Expand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lasthack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Multisigs\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"hackingcost\",\"type\":\"uint256\"},{\"name\":\"encryption\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nmbr\",\"type\":\"uint256\"}],\"name\":\"Encrypt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalsigs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"amtsigs\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DivMultisigHackable","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000019","Library":"","SwarmSource":"bzzr://f6f4a509d1a035a8e65a44574131fc75864f0263a6bf9d5004441c7b284c5245"}]}