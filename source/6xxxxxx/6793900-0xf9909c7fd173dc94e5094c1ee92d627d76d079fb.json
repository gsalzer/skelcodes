{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\ncontract Erc20Token {\r\n\tuint256 public totalSupply; //Total amount of Erc20Token\r\n\t\r\n\t//Check balances\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    \r\n\t/**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    \r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\t\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n//Contract manager\r\ncontract ownerYHT {\r\n    address public owner;\r\n\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\t\r\n    function transferOwner(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n//MB888\r\ncontract MB888 is ownerYHT,Erc20Token {\r\n    string public name= 'MB888'; \r\n    string public symbol = 'MB888'; \r\n    uint8 public decimals = 18;\r\n\t\r\n\tuint256 public moneyTotal = 66000000;//Total amount of Erc20Token\r\n\tuint256 public moneyFreeze = 0; \r\n\t\r\n\tmapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\t\r\n\t/**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor() public {\r\n        totalSupply = (moneyTotal - moneyFreeze) * 10 ** uint256(decimals);\r\n\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\t\r\n\t\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        _transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t/**\r\n\t * Send tokens to another account from a specified account\r\n     * The calling process will check the set maximum allowable transaction amount\r\n\t * \r\n\t */\r\n    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success){\r\n        \r\n        require(_value <= allowed[_from][msg.sender]);   // Check allowed\r\n        allowed[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction balanceOf(address _owner) public constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\t\r\n\t//Set the maximum amount allowed for the account\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\t\r\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    //private\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n\r\n\t\trequire(_to != 0x0);\r\n\r\n\t\trequire(balances[_from] >= _value);\r\n\r\n\t\trequire(balances[_to] + _value > balances[_to]);\r\n\r\n\t\tuint previousBalances = balances[_from] + balances[_to];\r\n\r\n\t\tbalances[_from] -= _value;\r\n\r\n\t\tbalances[_to] += _value;\r\n\r\n\t\temit Transfer(_from, _to, _value);\r\n\r\n\t\tassert(balances[_from] + balances[_to] == previousBalances);\r\n\r\n    }\r\n    \r\n\t/**\r\n\t *Thawing frozen money\r\n\t *Note: The value unit here is the unit before the 18th power \r\n\t *that hasn't been multiplied by 10, that is, the same unit as \r\n\t * the money whose initial definition was frozen.\r\n\t */\r\n\tevent EventUnLockFreeze(address indexed from,uint256 value);\r\n    function unLockFreeze(uint256 _value) onlyOwner public {\r\n        require(_value <= moneyFreeze);\r\n        \r\n\t\tmoneyFreeze -= _value;\r\n\t\t\r\n\t\tbalances[msg.sender] += _value * 10 ** uint256(decimals);\r\n\t\t\r\n\t\temit EventUnLockFreeze(msg.sender,_value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unLockFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moneyTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moneyFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EventUnLockFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MB888","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2a3b324c708419c666ae63292f717243be97043e2a2e1cd981dcd8fc21fa9fbd"}]}