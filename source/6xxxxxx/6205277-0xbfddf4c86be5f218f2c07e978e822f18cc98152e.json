{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * ┌───┐░░░┌┐░┌─┐┌─┐░░░░░┌┐░░░░░\r\n * │┌──┘░░░││░││└┘││░░░░┌┘└┐░░░░\r\n * │└──┬┐┌┬┤│░│┌┐┌┐├──┬─┼┐┌┼┐░┌┐\r\n * │┌──┤└┘├┤│░││││││┌┐│┌┘││││░││\r\n * │└──┼┐┌┤│└┐││││││└┘││░│└┤└─┘│\r\n * └───┘└┘└┴─┘└┘└┘└┴──┴┘░└─┴─┐┌┘\r\n * ░░░░░░░░░░░░░░░░░░░░░░░░┌─┘│░\r\n * ░░░░░░░░░░░░░░░░░░░░░░░░└──┘░\r\n * @author: pickle_rick\r\n */\r\npragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title AdminUtils\r\n * @dev customized admin control panel\r\n * @dev just want to keep everything safe\r\n */\r\ncontract AdminUtils is Ownable {\r\n\r\n    mapping (address => uint256) adminContracts;\r\n\r\n    address internal root;\r\n\r\n    /* modifiers */\r\n    modifier OnlyContract() {\r\n        require(isSuperContract(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier OwnerOrContract() {\r\n        require(msg.sender == owner || isSuperContract(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyRoot() {\r\n        require(msg.sender == root);\r\n        _;\r\n    }\r\n\r\n    /* constructor */\r\n    constructor() public {\r\n        // This is a safe key stored offline\r\n        root = 0xe07faf5B0e91007183b76F37AC54d38f90111D40;\r\n    }\r\n\r\n    /**\r\n     * @dev really??? you wanna send us free money???\r\n     */\r\n    function ()\r\n        public\r\n        payable {\r\n    }\r\n\r\n    /**\r\n     * @dev this is the kickass idea from @dan\r\n     * and well we will see how it works\r\n     */\r\n    function claimOwnership()\r\n        external\r\n        onlyRoot\r\n        returns (bool) {\r\n        owner = root;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev function to address a super contract address\r\n     * some functions are meant to be called from another contract\r\n     * but not from any contracts\r\n     * @param _address A contract address\r\n     */\r\n    function addContractAddress(address _address)\r\n        public\r\n        onlyOwner\r\n        returns (bool) {\r\n\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(_address)\r\n        }\r\n\r\n        if (codeLength == 0) {\r\n            return false;\r\n        }\r\n\r\n        adminContracts[_address] = 1;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove the contract address as a super user role\r\n     * have it here just in case\r\n     * @param _address A contract address\r\n     */\r\n    function removeContractAddress(address _address)\r\n        public\r\n        onlyOwner\r\n        returns (bool) {\r\n\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(_address)\r\n        }\r\n\r\n        if (codeLength == 0) {\r\n            return false;\r\n        }\r\n\r\n        adminContracts[_address] = 0;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev check contract eligibility\r\n     * @param _address A contract address\r\n     */\r\n    function isSuperContract(address _address)\r\n        public\r\n        view\r\n        returns (bool) {\r\n\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(_address)\r\n        }\r\n\r\n        if (codeLength == 0) {\r\n            return false;\r\n        }\r\n\r\n        if (adminContracts[_address] == 1) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20\r\n * @dev StandardToken.\r\n */\r\ncontract ERC20 is AdminUtils {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n     )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint _addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n            allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint _subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function withdraw()\r\n        public\r\n        onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\ncontract ERC223ReceivingContract { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n * @title ERC223\r\n * @dev Standard ERC223 token.\r\n */\r\ncontract ERC223 is ERC20 {\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        bytes memory empty;\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev you get the idea\r\n     * this is the same transferFrom function in ERC20\r\n     * except it calls a token fallback function if the\r\n     * receiver is a contract\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value)\r\n        public\r\n        returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        bytes memory empty;\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n\r\n        if(codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/* \r\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::..==========.:::::::::::::::::::::::::::::::::::::::::\r\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::,..,:::.~======,::::::::::::::::::::::::::::::::::::::::::\r\n:::::::::::::::::::::::::::::::::::::::::::::::::::,....,:::::::::::::...===~,::::::::::::::::::::::::::::::::::::::::::\r\n:::::::::::::::::::::::::::::::::::::::::::::,..:::::::::::::::::::::::::::..:::::::::::::::::::::::::::::::::::::::::::\r\n:::::::::::::::::::::::::::::::::::::::::,.:::::::::::::::::::::::::::::::::::.,::::::::::::::::::::::::::::::::::::::::\r\n:::::::::::::::::::::::::::::::::::::::.::::::::::::::::::::::::::::::::::::::::,.,:::::::::::::::::::::::::::::::::::::\r\n::::::::::::::::::::::::::::......:::.::::::::::::::::::::::::::::::::::::::::::::::..::::::::::::::::::::::::::::::::::\r\n::::::::::::::::::::::::::.,,,,,,,,.:::::::::::::::::::::::::::::::::::::::::::::::::::,.:::::::::::::::::::::::::::::::\r\n::::::::::::::::::::::::..,,,,,,,.,:::::::::::::::::::::::::::::::::::::::::::::::::::::::,.,:::::::::::::::::::::::::::\r\n:::::::::::::::::::::::.:~~~.,,.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.,::::::::::::::::::::::::\r\n:::::::::::::::::::::::,~~~~~.,::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.::::::::::::::::::::::\r\n:::::::::::::::::::::::,~~~~.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.::::::::::::::::::::\r\n:::::::::::::::::::::::.~~~.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.:::::::::::::::::::\r\n::::::::::::::::::::::::,~.:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.:::::::::::::::::\r\n::::::::::::::::::::::::,.:::::::::::::::::::::,...,~+?I?+:...,::::::::::::::::::::::::::::::::::::::::.::::::::::::::::\r\n:::::::::::::::::::::::::.:::::::::::::..,~?IIIIIIIIIIIIIIIIIIIII=..::::::::::::::::::::::::::::::::::::.:::::::::::::::\r\n:::::::::::::::::::::::::,::::::::,.~IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII:.:::::::::::::::::::::::::::::::::.::::::::::::::\r\n::::::::::::::::::::::::,:::::::.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+.,::::::::::::::::::::::::::::::.:::::::::::::\r\n::::::::::::::::::::::::,::::,:?=,=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.,::::::::::::::::::::::::::::.::::::::::::\r\n:::::::::::::::::::::::::::..~IIIIIIIIIIIIIIIIIIIIIIIIIIIIII~.+IIIIIIIIIIIIIIII+.:::::::::::::::::::::::::::,,::::::::::\r\n:::::::::::::::::::::::::.:IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.+IIIIIIIIIIIIIII?.::::::::::::::::::::::::::,::::::::::\r\n::::::::::::::::::::::::.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII:,IIIIIIIIIIIIIIII.:::::::::::::::::::::::::.:::::::::\r\n::::::::::::::::::::::::IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+.IIIIIIIIIIIIIII?.::::::::::::::::::::::::.::::::::\r\n:::::::::::::::::::::.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.IIIIIIIIIIIIIII.::::::::::::::::::::::::.:::::::\r\n::::::::::::::::..~+I?=,.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~?IIIIIIIIIIIIII?.::::::::::::::::::::::::::::::\r\n:::::::::::::.I77777777777I.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.::::::::::::::::::::::.::::::\r\n:::::::::::.77777777777777777:=IIIIIIIIIIIIIIIIIIIIIIII+:....,=IIIIIIIIIIIIIIIIIIIIIIIIIIII~,:::::::::::::::::::::,:::::\r\n:::::::::,+77777777777777777777.IIIIIIIIIIIIIIIIIII:,I7777777777I,=IIIIIIIIIIIIIIIIIIIIIIIII+:::::::::::::::::::::.:::::\r\n::::::::.77777777777777777777777.IIIIIIIIIIIIIII~,77777777777777777?.IIIIIIIIIIIIIIIIIIIIIIII,::::::::::::::::::::.:::::\r\n:::::::,I777777777777777777777777=IIIIIIIIIIII=:777777777777777777777I,IIIIIIIIIIIIIIIIIIIIIII.:::::::::::::::::::,:::::\r\n::::::::7777777777777777777777777,IIIIIIIIIII:7777777777777777777777777:?IIIIIIIIIIIIIIIIIIIIII.:::::::::::::::::::,::::\r\n::::::.77777777777777777777777777I=IIIIIIIII,777777777777777777777777777I?IIIIIIIIIIIIIIIIIIIIII.::::::::::::::::::,::::\r\n::::::.777777777777..~777777777777.IIIIIIII~77777777777777777777777777777=?IIIIIIIIIIIIIIIIIIIII~::::::::::::::::::.::::\r\n::::::=777777777777777777777777777.IIIIIIII:777777777777777777777777777777.IIIIIIIIIIIIIIIIIIIIII.:::::::::::::::::.::::\r\n::::::I777777777777777777777777777,IIIIIII:77777777777777777777777777777777~IIIIIIIIIIIIIIIIIIIII?,::::::::::::::::.::::\r\n::::::I777777777777777777777777777.IIIIIII.7777777777777,..7777777777777777.IIIIIIIIIIIIIIIIIIIIII.::::::::::::::::.::::\r\n::::::~777777777777777777777777777.IIIIIII:7777777777777~.,7777777777777777:IIIIIIIIIIIIIIIIIIIIII?,:::::::::::::::.::::\r\n::::,,.77777777777777777777777777?+IIIIIII:77777777777777777777777777777777=IIIIIIIIIIIIIIIIIIIIIII.:::::::::::::::.....\r\n~~~~~~:I7777777777777777777777777.IIIIIIII.77777777777777777777777777777777~IIIIIIIIIIIIIIIIIIIIIII~:::::::::::::::.~~~~\r\n~~~~~~~.777777777777777777777777=IIIIIIIII,77777777777777777777777777777777,IIIIIIIIIIIIIIIIIIIIIII?:::::::::::::::.~~~~\r\n~~~~~~~~.7777777777777777777777~?IIIIIIIII?=7777777777777777777777777777777.IIIIIIIIIIIIIIIIIIIIIIII,::::::::::::::.~~~~\r\n~~~~~~~~.~=7777777777777777777.IIIIIIIIIIII,777777777777777777777777777777I+IIIIIIIIIIIIIIIIIIIIIIII.::::::::::::::.~~~~\r\n~~~~~~~~=II=:77777777777777+.IIIIIIIIIIIIIII,77777777777777777777777777777.IIIIIIIIIIIIIIIIIIIIIIIII.::::::::::::::,~~~~\r\n~~~~~~~:?IIIII..I7777777:.?IIIIIIIIIIIIIIIIII,777777777777777777777777777.IIIIIIIIIIIIIIIIIIIIIIIIII.:::::::::::::::,~~~\r\n~~~~~~~,IIIIIIIIIIIIIIIIIIIIII?.?IIIIIIIIIIIII~+777777777777777777777777.IIIIIIIIIIIIIIIIIIIIIIIIIII,:::::::::::::::,~~~\r\n~~~~~~~.IIIIIIIIIIIIIIIIIIII?.?IIIIIIIIIIIIIIIII,~77777777777777777777:=IIIIIIIIIIIIIIIIIIIIIIIIIIII,::::::::::::::::~~~\r\n~~~~~~~.IIIIIIIIIIIIIIIIIII.?IIIIIIIIIIIIIIIIIIIII?.=77777777777777I.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIII,::::::::::::::.~~~~\r\n~~~~~~~.IIIIIIIIIIIIIIIIII~?IIIIIIIIIIIIIIIIIIIIIIIIII+,.:?I77?~.,?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.::::::::::::::,~~~~\r\n~~~~~~~,IIIIIIIIIIIIIIIIII?+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.:::::::::::::.~~~~~\r\n~~~~~~~:?IIIIIIIIIIIIIIIIII=~IIII=.~IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.::::::::::::,~~~~~~\r\n~~~~~~~~:IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII,::::::::::,,~~~~~~~\r\n~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~.+I?::::::::::.~~~~~~~~~\r\n~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII:.:::::::::.~~~~~~~~~~\r\n~~~~~~~~~~IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?,:::::::::~~~~~~~~~~\r\n~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=:::::::.~~~~~~~~~~~\r\n~~~~~~~~~:+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.:::::.~~~~~~~~~~~~\r\n~~~~~~~~~~.IIIIIIIIII.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.::::.~~~~~~~~~~~~~\r\n~~~~~~~~~~~:IIIIIIIIIII,.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.:::.~~~~~~~~~~~~~~\r\n~~~.~~~~~~~:+IIIIIIIIIIIII+,.=?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?,,.~~~~~~~~~~~~~~~~\r\n~~~,~~~~~~~~,IIIIIIIIIIIIIIIIIII?=:............~+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~~~~~~~~~~~~~~~~\r\n~~~~.~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~~~~~~~~~~~~~~~~~\r\n~~~~.~~~~~~~~~.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.:~~~~~~~~~~~~~~~~~~~~~\r\n~~~~,~~~~~~~~~~:=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=..,,..:~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~:,~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~:~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~.~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~.~~~~~~~~~~~~~,?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~.~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~~~~~.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~,~~~~~~~~~~~~~~~~~.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~.~~~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~.~~~~~~~~~~~~~~~~~~~~~..?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~.~~~~~~~~~~~~~~~~~~~~,III?,.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII:.+=,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~:~~~~~~~~~~~~~~~~~~~,IIIIIIIII~.,+IIIIIIIIIIIIIIIIIIIIIIIIIIIII+,.+IIIIII.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~:~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIII??+~:,.................,~+?IIIIIIIIIIII,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~.~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.~~~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~.~~~~~~~~~~~~~~~,?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~.~~~~~~~~~~~~~~:=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?,~~~~,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~.~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~~~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~:~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~::~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~~~~=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~~~IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+:~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~~=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?:::~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n */\r\n\r\n/**\r\n * @title EvilMorty\r\n * @dev secret: 79c9b9df0405a75d72e3f17fb484821ef3ba426bdc1d3b9805c92f29\r\n */\r\ncontract EvilMorty is ERC223 {\r\n\r\n    string public constant name = \"Evil Morty\";\r\n    string public constant symbol = \"Morty\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 1000000000e18;\r\n    uint256 public constant GAME_SUPPLY = 200000000e18;\r\n    uint256 public constant COMMUNITY_SUPPLY = 800000000e18;\r\n\r\n    address public citadelAddress;\r\n\r\n    /* constructor */\r\n    constructor()\r\n        public {\r\n\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n\r\n        // owners get 200 million locked\r\n        // and 200 million for second round crowdsale supply\r\n        // and 400 million for building the microverse\r\n        balances[owner] = COMMUNITY_SUPPLY;\r\n        emit Transfer(0x0, owner, COMMUNITY_SUPPLY);\r\n    }\r\n\r\n    /**\r\n     * @dev for mouting microverse contract\r\n     * @param _address Microverse's address\r\n     */\r\n    function mountCitadel(address _address)\r\n        public\r\n        onlyOwner\r\n        returns (bool) {\r\n        \r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(_address)\r\n        }\r\n\r\n        if (codeLength == 0) {\r\n            return false;\r\n        }\r\n\r\n        citadelAddress = _address;\r\n        balances[citadelAddress] = GAME_SUPPLY;\r\n        emit Transfer(0x0, citadelAddress, GAME_SUPPLY);\r\n        addContractAddress(_address);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev special transfer method for Microverse\r\n     * Because there are other contracts making transfer on behalf of Microverse,\r\n     * we need this special function, used for super contracts or owner.\r\n     * @param _to receiver's address\r\n     * @param _value amount of morties to transfer\r\n     */\r\n    function citadelTransfer(address _to, uint256 _value)\r\n        public\r\n        OwnerOrContract\r\n        returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[citadelAddress]);\r\n\r\n        bytes memory empty;\r\n\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[citadelAddress] = balances[citadelAddress].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        if(codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(citadelAddress, _value, empty);\r\n        }\r\n        emit Transfer(citadelAddress, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev checks the Microverse contract's balance\r\n     * so other contracts won't bother remembering Microverse's address\r\n     */\r\n    function citadelBalance()\r\n        public\r\n        view\r\n        returns (uint256) {\r\n        return balances[citadelAddress];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"mountCitadel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAME_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"citadelTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMUNITY_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"citadelBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"citadelAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isSuperContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EvilMorty","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1aedb2f3fbdb40dafcac881dfa14a4c29904dbb0f5a87943064a48946c6a4f60"}]}