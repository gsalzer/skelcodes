{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\ncontract ERC20 {\r\n    function balanceOf(address who) public view returns(uint);\r\n    function transfer(address to, uint value) public returns(bool);\r\n}\r\ncontract KiOS {\r\n    address public admin;\r\n    mapping(address => uint) public rates;\r\n    event Purchase(address indexed payer, address indexed token, uint price, uint amount);\r\n    event Received(address indexed sender, address indexed token, uint amount);\r\n    event Sent(address indexed recipient, address indexed token, uint amount);\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n    modifier restrict() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n    function check(address who) internal view returns(bool) {\r\n        if (who != address(0) && address(this) != who) return true;\r\n        else return false;\r\n    }\r\n    function getBalance(address token) internal view returns(uint) {\r\n        if (address(0) == token) return address(this).balance;\r\n        else return ERC20(token).balanceOf(address(this));\r\n    }\r\n    function changeAdmin(address newAdmin) public restrict returns(bool) {\r\n        require(check(newAdmin));\r\n        admin = newAdmin;\r\n        return true;\r\n    }\r\n    function() public payable {\r\n        if (msg.value > 0) payment();\r\n    }\r\n    function payment() public payable returns(bool) {\r\n        require(msg.value > 0);\r\n        emit Received(msg.sender, address(0), msg.value);\r\n        return true;\r\n    }\r\n    function pay(address recipient, address token, uint amount) public restrict returns(bool) {\r\n        require(check(recipient) && amount > 0 && amount <= getBalance(token));\r\n        if (address(0) == token) recipient.transfer(amount);\r\n        else if (!ERC20(token).transfer(recipient, amount)) revert();\r\n        emit Sent(recipient, token, amount);\r\n        return true;\r\n    }\r\n    function setRate(address token, uint price) public restrict returns(bool) {\r\n        require(check(token));\r\n        rates[token] = price;\r\n        return true;\r\n    }\r\n    function buy(address token) public payable returns(bool) {\r\n        require(check(token) && msg.value > 0);\r\n        require(getBalance(token) > 0 && rates[token] > 0);\r\n        uint valueEther = msg.value;\r\n        uint valueToken = valueEther * rates[token];\r\n        uint stock = getBalance(token);\r\n        if (valueToken > stock) {\r\n            msg.sender.transfer(valueEther - (stock / rates[token]));\r\n            valueToken = stock;\r\n        }\r\n        if (!ERC20(token).transfer(msg.sender, valueToken)) revert();\r\n        emit Purchase(msg.sender, token, rates[token], valueToken);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"}]","ContractName":"KiOS","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://752ce585b452378c770b65340e7f0e8258bacdb53c1517775fda52775c8d9a61"}]}