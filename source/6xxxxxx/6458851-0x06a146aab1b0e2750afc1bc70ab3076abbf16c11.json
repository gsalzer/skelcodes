{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract SnowflakeResolver is Ownable {\r\n    string public snowflakeName;\r\n    string public snowflakeDescription;\r\n    address public snowflakeAddress;\r\n\r\n    bool public callOnSignUp;\r\n    bool public callOnRemoval;\r\n\r\n    function setSnowflakeAddress(address _address) public onlyOwner {\r\n        snowflakeAddress = _address;\r\n    }\r\n\r\n    modifier senderIsSnowflake() {\r\n        require(msg.sender == snowflakeAddress, \"Did not originate from Snowflake.\");\r\n        _;\r\n    }\r\n\r\n    // onSignUp is called every time a user sets your contract as a resolver if callOnSignUp is true\r\n    // this function **must** use the senderIsSnowflake modifier\r\n    // returning false will disallow users from setting your contract as a resolver\r\n    // function onSignUp(string hydroId, uint allowance) public returns (bool);\r\n\r\n    // onRemoval is called every time a user sets your contract as a resolver if callOnRemoval is true\r\n    // this function **must** use the senderIsSnowflake modifier\r\n    // returning false soft prevents users from removing your contract as a resolver\r\n    // however, they can force remove your resolver, bypassing this function\r\n    // function onRemoval(string hydroId, uint allowance) public returns (bool);\r\n}\r\n\r\n\r\ncontract Snowflake {\r\n    function whitelistResolver(address resolver) external;\r\n    function withdrawFrom(string hydroIdFrom, address to, uint amount) public returns (bool);\r\n    function getHydroId(address _address) public view returns (string hydroId);\r\n}\r\n\r\n\r\ncontract Status is SnowflakeResolver {\r\n    mapping (string => string) internal statuses;\r\n\r\n    uint signUpFee = 1000000000000000000;\r\n    string firstStatus = \"My first status ðŸ˜Ž\";\r\n\r\n    constructor (address snowflakeAddress) public {\r\n        snowflakeName = \"Status\";\r\n        snowflakeDescription = \"Set your status.\";\r\n        setSnowflakeAddress(snowflakeAddress);\r\n\r\n        callOnSignUp = true;\r\n\r\n        Snowflake snowflake = Snowflake(snowflakeAddress);\r\n        snowflake.whitelistResolver(address(this));\r\n    }\r\n\r\n    // implement signup function\r\n    function onSignUp(string hydroId, uint allowance) public senderIsSnowflake() returns (bool) {\r\n        require(allowance >= signUpFee, \"Must set an allowance of at least 1.\");\r\n        Snowflake snowflake = Snowflake(snowflakeAddress);\r\n        snowflake.withdrawFrom(hydroId, owner, signUpFee);\r\n        statuses[hydroId] = firstStatus;\r\n        emit StatusUpdated(hydroId, firstStatus);\r\n        return true;\r\n    }\r\n\r\n    function getStatus(string hydroId) public view returns (string) {\r\n        return statuses[hydroId];\r\n    }\r\n\r\n    // example function that calls withdraw on a linked hydroID\r\n    function setStatus(string status) public {\r\n        Snowflake snowflake = Snowflake(snowflakeAddress);\r\n        string memory hydroId = snowflake.getHydroId(msg.sender);\r\n        statuses[hydroId] = status;\r\n        emit StatusUpdated(hydroId, status);\r\n    }\r\n\r\n    event StatusUpdated(string hydroId, string status);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"hydroId\",\"type\":\"string\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snowflakeDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"string\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snowflakeName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callOnRemoval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSnowflakeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callOnSignUp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snowflakeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hydroId\",\"type\":\"string\"},{\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"onSignUp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"snowflakeAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hydroId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Status","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000037941d4ed93af8628fb4e9451752db8b2446f76","Library":"","SwarmSource":"bzzr://159eb29d523eb368306d8232256d867353c5383ddf6c7ff19922efff82a781d0"}]}