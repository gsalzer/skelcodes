{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract Administratable is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  address[] public adminsForIndex;\r\n  address[] public superAdminsForIndex;\r\n  mapping (address => bool) public admins;\r\n  mapping (address => bool) public superAdmins;\r\n  mapping (address => bool) private processedAdmin;\r\n  mapping (address => bool) private processedSuperAdmin;\r\n\r\n  event AddAdmin(address indexed admin);\r\n  event RemoveAdmin(address indexed admin);\r\n  event AddSuperAdmin(address indexed admin);\r\n  event RemoveSuperAdmin(address indexed admin);\r\n\r\n  modifier onlyAdmins {\r\n    require (msg.sender == owner || superAdmins[msg.sender] || admins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  modifier onlySuperAdmins {\r\n    require (msg.sender == owner || superAdmins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function totalSuperAdminsMapping() public view returns (uint256) {\r\n    return superAdminsForIndex.length;\r\n  }\r\n\r\n  function addSuperAdmin(address admin) public onlySuperAdmins {\r\n    require(admin != address(0));\r\n    superAdmins[admin] = true;\r\n    if (!processedSuperAdmin[admin]) {\r\n      superAdminsForIndex.push(admin);\r\n      processedSuperAdmin[admin] = true;\r\n    }\r\n\r\n    emit AddSuperAdmin(admin);\r\n  }\r\n\r\n  function removeSuperAdmin(address admin) public onlySuperAdmins {\r\n    require(admin != address(0));\r\n    superAdmins[admin] = false;\r\n\r\n    emit RemoveSuperAdmin(admin);\r\n  }\r\n\r\n  function totalAdminsMapping() public view returns (uint256) {\r\n    return adminsForIndex.length;\r\n  }\r\n\r\n  function addAdmin(address admin) public onlySuperAdmins {\r\n    require(admin != address(0));\r\n    admins[admin] = true;\r\n    if (!processedAdmin[admin]) {\r\n      adminsForIndex.push(admin);\r\n      processedAdmin[admin] = true;\r\n    }\r\n\r\n    emit AddAdmin(admin);\r\n  }\r\n\r\n  function removeAdmin(address admin) public onlySuperAdmins {\r\n    require(admin != address(0));\r\n    admins[admin] = false;\r\n\r\n    emit RemoveAdmin(admin);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev An Administratable contract that can be used as a storage where the variables\r\n * are stored in a set of mappings indexed by hash names.\r\n */\r\ncontract EternalStorage is Administratable {\r\n\r\n  struct Storage {\r\n    mapping(bytes32 => bool) _bool;\r\n    mapping(bytes32 => int) _int;\r\n    mapping(bytes32 => uint256) _uint;\r\n    mapping(bytes32 => string) _string;\r\n    mapping(bytes32 => address) _address;\r\n    mapping(bytes32 => bytes) _bytes;\r\n  }\r\n\r\n  Storage internal s;\r\n\r\n  /**\r\n   * @dev Allows admins to set a value for a boolean variable.\r\n   * @param h The keccak256 hash of the variable name\r\n   * @param v The value to be stored\r\n   */\r\n  function setBoolean(bytes32 h, bool v) public onlyAdmins {\r\n    s._bool[h] = v;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows admins to set a value for a int variable.\r\n   * @param h The keccak256 hash of the variable name\r\n   * @param v The value to be stored\r\n   */\r\n  function setInt(bytes32 h, int v) public onlyAdmins {\r\n    s._int[h] = v;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows admins to set a value for a boolean variable.\r\n   * @param h The keccak256 hash of the variable name\r\n   * @param v The value to be stored\r\n   */\r\n  function setUint(bytes32 h, uint256 v) public onlyAdmins {\r\n    s._uint[h] = v;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows admins to set a value for a address variable.\r\n   * @param h The keccak256 hash of the variable name\r\n   * @param v The value to be stored\r\n   */\r\n  function setAddress(bytes32 h, address v) public onlyAdmins {\r\n    s._address[h] = v;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows admins to set a value for a string variable.\r\n   * @param h The keccak256 hash of the variable name\r\n   * @param v The value to be stored\r\n   */\r\n  function setString(bytes32 h, string v) public onlyAdmins {\r\n    s._string[h] = v;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to set a value for a bytes variable.\r\n   * @param h The keccak256 hash of the variable name\r\n   * @param v The value to be stored\r\n   */\r\n  function setBytes(bytes32 h, bytes v) public onlyAdmins {\r\n    s._bytes[h] = v;\r\n  }\r\n\r\n  /**\r\n   * @dev Get the value stored of a boolean variable by the hash name\r\n   * @param h The keccak256 hash of the variable name\r\n   */\r\n  function getBoolean(bytes32 h) public view returns (bool){\r\n    return s._bool[h];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the value stored of a int variable by the hash name\r\n   * @param h The keccak256 hash of the variable name\r\n   */\r\n  function getInt(bytes32 h) public view returns (int){\r\n    return s._int[h];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the value stored of a uint variable by the hash name\r\n   * @param h The keccak256 hash of the variable name\r\n   */\r\n  function getUint(bytes32 h) public view returns (uint256){\r\n    return s._uint[h];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the value stored of a address variable by the hash name\r\n   * @param h The keccak256 hash of the variable name\r\n   */\r\n  function getAddress(bytes32 h) public view returns (address){\r\n    return s._address[h];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the value stored of a string variable by the hash name\r\n   * @param h The keccak256 hash of the variable name\r\n   */\r\n  function getString(bytes32 h) public view returns (string){\r\n    return s._string[h];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the value stored of a bytes variable by the hash name\r\n   * @param h The keccak256 hash of the variable name\r\n   */\r\n  function getBytes(bytes32 h) public view returns (bytes){\r\n    return s._bytes[h];\r\n  }\r\n}\r\n\r\n\r\nlibrary TokenLib {\r\n  using SafeMath for uint256;\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  /* struct TokenStorage { address storage} */\r\n\r\n  function transfer(address _storage, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    uint256 senderBalance = EternalStorage(_storage).getUint(keccak256(abi.encodePacked('balance', msg.sender)));\r\n    require(_value <= senderBalance);\r\n\r\n    uint256 receiverBalance = balanceOf(_storage, _to);\r\n    EternalStorage(_storage).setUint(keccak256(abi.encodePacked('balance', msg.sender)), senderBalance.sub(_value));\r\n    EternalStorage(_storage).setUint(keccak256(abi.encodePacked('balance', _to)), receiverBalance.add(_value));\r\n    emit Transfer(msg.sender, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function mint(address _storage, address _to, uint256 _value) public {\r\n    EternalStorage(_storage).setUint(keccak256(abi.encodePacked('balance', _to)), _value);\r\n    EternalStorage(_storage).setUint(keccak256(abi.encodePacked('totalSupply')), _value);\r\n  }\r\n\r\n  function setTotalSupply(address _storage, uint256 _totalSupply) public {\r\n    EternalStorage(_storage).setUint(keccak256(abi.encodePacked('totalSupply')), _totalSupply);\r\n  }\r\n\r\n  function totalSupply(address _storage) public view returns (uint256) {\r\n    return EternalStorage(_storage).getUint(keccak256(abi.encodePacked('totalSupply')));\r\n  }\r\n\r\n\r\n  function balanceOf(address _storage, address _owner) public view returns (uint256 balance) {\r\n    return EternalStorage(_storage).getUint(keccak256(abi.encodePacked('balance', _owner)));\r\n  }\r\n\r\n  function getAllowance(address _storage, address _owner, address _spender) public view returns (uint256) {\r\n    return EternalStorage(_storage).getUint(keccak256(abi.encodePacked('allowance', _owner, _spender)));\r\n  }\r\n\r\n  function setAllowance(address _storage, address _owner, address _spender, uint256 _allowance) public {\r\n    EternalStorage(_storage).setUint(keccak256(abi.encodePacked('allowance', _owner, _spender)), _allowance);\r\n  }\r\n\r\n  function allowance(address _storage, address _owner, address _spender) public view  returns (uint256) {\r\n    return getAllowance(_storage, _owner, _spender);\r\n  }\r\n\r\n  function transferFrom(address _storage, address _from, address _to, uint256 _value) public  returns (bool) {\r\n    require(_to != address(0));\r\n    require(_from != msg.sender);\r\n    require(_value > 0);\r\n    uint256 senderBalance = balanceOf(_storage, _from);\r\n    require(senderBalance >= _value);\r\n\r\n    uint256 allowanceValue = allowance(_storage, _from, msg.sender);\r\n    require(allowanceValue >= _value);\r\n\r\n    uint256 receiverBalance = balanceOf(_storage, _to);\r\n    EternalStorage(_storage).setUint(keccak256(abi.encodePacked('balance', _from)), senderBalance.sub(_value));\r\n    EternalStorage(_storage).setUint(keccak256(abi.encodePacked('balance', _to)), receiverBalance.add(_value));\r\n\r\n    setAllowance(_storage, _from, msg.sender, allowanceValue.sub(_value));\r\n    emit Transfer(_from, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function approve(address _storage, address _spender, uint256 _value) public returns (bool) {\r\n    require(_spender != address(0));\r\n    require(msg.sender != _spender);\r\n\r\n    setAllowance(_storage, msg.sender, _spender, _value);\r\n\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function increaseApproval(address _storage, address _spender, uint256 _addedValue) public returns (bool) {\r\n    return approve(_storage, _spender, getAllowance(_storage, msg.sender, _spender).add(_addedValue));\r\n  }\r\n\r\n  function decreaseApproval(address _storage, address _spender, uint256 _subtractedValue) public returns (bool) {\r\n    uint256 oldValue = getAllowance(_storage, msg.sender, _spender);\r\n\r\n    if (_subtractedValue > oldValue) {\r\n      return approve(_storage, _spender, 0);\r\n    } else {\r\n      return approve(_storage, _spender, oldValue.sub(_subtractedValue));\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract UpgradableToken is ERC20, Ownable {\r\n  address public predecessor;\r\n  address public successor;\r\n  string public version;\r\n\r\n  event UpgradedTo(address indexed successor);\r\n  event UpgradedFrom(address indexed predecessor);\r\n\r\n  modifier unlessUpgraded() {\r\n    require (msg.sender == successor || successor == address(0));\r\n    _;\r\n  }\r\n\r\n  modifier isUpgraded() {\r\n    require (successor != address(0));\r\n    _;\r\n  }\r\n\r\n  modifier hasPredecessor() {\r\n    require (predecessor != address(0));\r\n    _;\r\n  }\r\n\r\n  function isDeprecated() public view returns (bool) {\r\n    return successor != address(0);\r\n  }\r\n\r\n  constructor(string _version) public {\r\n      version = _version;\r\n  }\r\n\r\n  function upgradeTo(address _successor) public onlyOwner unlessUpgraded returns (bool){\r\n    require(_successor != address(0));\r\n\r\n    uint remainingContractBalance = balanceOf(this);\r\n\r\n    if (remainingContractBalance > 0) {\r\n      this.transfer(_successor, remainingContractBalance);\r\n    }\r\n    successor = _successor;\r\n    emit UpgradedTo(_successor);\r\n    return true;\r\n  }\r\n\r\n  function upgradedFrom(address _predecessor) public onlyOwner returns (bool) {\r\n    require(_predecessor != address(0));\r\n\r\n    predecessor = _predecessor;\r\n\r\n    emit UpgradedFrom(_predecessor);\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Token is Ownable {\r\n  event UpgradedTo(address indexed implementation);\r\n\r\n  address internal _implementation;\r\n\r\n  function implementation() public view returns (address) {\r\n    return _implementation;\r\n  }\r\n\r\n  function upgradeTo(address impl) public onlyOwner {\r\n    require(_implementation != impl);\r\n    _implementation = impl;\r\n    emit UpgradedTo(impl);\r\n  }\r\n\r\n  function () payable public {\r\n    address _impl = implementation();\r\n    require(_impl != address(0));\r\n    bytes memory data = msg.data;\r\n\r\n    assembly {\r\n      let result := delegatecall(gas, _impl, add(data, 0x20), mload(data), 0, 0)\r\n      let size := returndatasize\r\n      let ptr := mload(0x40)\r\n      returndatacopy(ptr, 0, size)\r\n      switch result\r\n      case 0 { revert(ptr, size) }\r\n      default { return(ptr, size) }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract TokenDelegate is UpgradableToken, DetailedERC20, Pausable {\r\n    using TokenLib for address;\r\n\r\n    address tokenStorage;\r\n\r\n    constructor(string _name, string _symbol, uint8 _decimals, address _storage, string _version)\r\n        DetailedERC20(_name, _symbol, _decimals) UpgradableToken(_version) public {\r\n        setStorage(_storage);\r\n    }\r\n\r\n    function setTotalSupply(uint256 _totalSupply) public onlyOwner {\r\n        tokenStorage.setTotalSupply(_totalSupply);\r\n    }\r\n\r\n    function setStorage(address _storage) public onlyOwner unlessUpgraded whenNotPaused {\r\n        tokenStorage = _storage;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint){\r\n        return tokenStorage.totalSupply();\r\n    }\r\n\r\n    function mint(address _to, uint _value) public onlyOwner unlessUpgraded whenNotPaused {\r\n        tokenStorage.mint(_to, _value);\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return tokenStorage.balanceOf(_owner);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public unlessUpgraded whenNotPaused returns(bool) {\r\n        return tokenStorage.transfer(_to, _value);\r\n    }\r\n\r\n    function approve(address _to, uint _value) public unlessUpgraded whenNotPaused returns(bool) {\r\n        return tokenStorage.approve(_to, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return tokenStorage.allowance(_owner, _spender);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public unlessUpgraded whenNotPaused returns (bool) {\r\n        return tokenStorage.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) public unlessUpgraded whenNotPaused returns (bool) {\r\n        return tokenStorage.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public unlessUpgraded whenNotPaused returns (bool) {\r\n        return tokenStorage.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_successor\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_predecessor\",\"type\":\"address\"}],\"name\":\"upgradedFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"successor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_storage\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"predecessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDeprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_storage\",\"type\":\"address\"},{\"name\":\"_version\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"successor\",\"type\":\"address\"}],\"name\":\"UpgradedTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"predecessor\",\"type\":\"address\"}],\"name\":\"UpgradedFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TokenDelegate","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000306b5cf6f9ee067b676a3a6be0dff0b5df2f629f0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000b4879706572627269646765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000348425800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003312e300000000000000000000000000000000000000000000000000000000000","Library":"TokenLib:1ee9faa44d313a1d2e4bfa135ffb15c6f0da8a27","SwarmSource":"bzzr://680ecf2bbd309216d7921b24b986df9892af14fcc74bc5541cbc5ef524100e89"}]}