{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.24 <0.6.0;\r\n\r\n/**\r\n * Cryptonomica EthID Tokens smart contract\r\n * developed by Cryptonomica Ltd., 2018\r\n * https://cryptonomica.net\r\n * github: https://github.com/Cryptonomica/\r\n * deployed using compiler version: 0.4.24+commit.e67f0147.Emscripten.clang\r\n */\r\n\r\n\r\n/* ---- Libraries */\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n * see: https://openzeppelin.org/api/docs/math_SafeMath.html\r\n * source: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.0.0/contracts/math/SafeMath.sol\r\n * (e7aa8de on Oct 21 2018)\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// << end of SafeMath\r\n\r\n/* --- \"Interfaces\" */\r\n\r\n//  this is expected from another contracts\r\n//  if it wants to spend tokens of behalf of the token owner in our contract\r\ncontract allowanceRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _inContract, bytes _extraData) public returns (bool);\r\n}\r\n\r\n// see: https://github.com/ethereum/EIPs/issues/677\r\ncontract tokenRecipient {\r\n    function tokenFallback(address _from, uint256 _value, bytes _extraData) public returns (bool);\r\n}\r\n\r\n/* -------- ///////// Main Contract /////// ----------- */\r\n\r\ncontract EthIdTokens {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /* --- ERC-20 variables */\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#name\r\n    // function name() constant returns (string name)\r\n    string public name = \"EthID Tokens\";\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#symbol\r\n    // function symbol() constant returns (string symbol)\r\n    string public symbol = \"EthID\";\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#decimals\r\n    // function decimals() constant returns (uint8 decimals)\r\n    uint8 public decimals = 0;\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#totalsupply\r\n    // function totalSupply() constant returns (uint256 totalSupply)\r\n    uint256 public totalSupply;\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#balanceof\r\n    // function balanceOf(address _owner) constant returns (uint256 balance)\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#allowance\r\n    // function allowance(address _owner, address _spender) constant returns (uint256 remaining)\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /* --- ERC-20 events */\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#events\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transfer-1\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#approval\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n\r\n    /* --- Events for interaction with other smart contracts */\r\n    event DataSentToAnotherContract(address indexed _from, address indexed _toContract, bytes _extraData);\r\n\r\n\r\n    /* --- administrative variable and functions */\r\n\r\n    address public owner; // smart contract owner (super admin)\r\n\r\n    // to avoid mistakes: owner (super admin) should be changed in two steps\r\n    // change is valid when accepted from new owner address\r\n    address private newOwner;\r\n\r\n    function changeOwnerStart(address _newOwner) public {\r\n        // only owner\r\n        require(msg.sender == owner);\r\n\r\n        newOwner = _newOwner;\r\n        emit ChangeOwnerStarted(msg.sender, _newOwner);\r\n    } //\r\n    event ChangeOwnerStarted (address indexed startedBy, address indexed newOwner);\r\n\r\n    function changeOwnerAccept() public {\r\n        // only by new owner\r\n        require(msg.sender == newOwner);\r\n        // event here:\r\n        emit OwnerChanged(owner, newOwner);\r\n        owner = newOwner;\r\n    } //\r\n    event OwnerChanged(address indexed from, address indexed to);\r\n\r\n    /* --- Constructor */\r\n\r\n    constructor() public {\r\n        // can be hardcoded in production:\r\n        owner = msg.sender;\r\n        // 100M :\r\n        totalSupply = 100 * 1000000;\r\n        balanceOf[owner] = totalSupply;\r\n    }\r\n\r\n\r\n    /* --- Dividends */\r\n    event DividendsPaid(address indexed to, uint256 tokensBurned, uint256 sumInWeiPaid);\r\n\r\n    // valueInTokens : tokens to burn to get dividends\r\n    function takeDividends(uint256 valueInTokens) public returns (bool) {\r\n\r\n        require(address(this).balance > 0);\r\n        require(totalSupply > 0);\r\n\r\n        uint256 sumToPay = (address(this).balance / totalSupply).mul(valueInTokens);\r\n\r\n        totalSupply = totalSupply.sub(valueInTokens);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(valueInTokens);\r\n\r\n        msg.sender.transfer(sumToPay);\r\n\r\n        emit DividendsPaid(msg.sender, valueInTokens, sumToPay);\r\n\r\n        return true;\r\n    }\r\n\r\n    // only if all tokens are burned:\r\n    event WithdrawalByOwner(uint256 value, address indexed to); //\r\n    function withdrawAllByOwner() public {\r\n        // only owner:\r\n        require(msg.sender == owner);\r\n        // only if all tokens burned:\r\n        require(totalSupply == 0);\r\n\r\n        uint256 sumToWithdraw = address(this).balance;\r\n        owner.transfer(sumToWithdraw);\r\n        emit WithdrawalByOwner(sumToWithdraw, owner);\r\n    }\r\n\r\n    /* --- ERC-20 Functions */\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#methods\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transfer\r\n    function transfer(address _to, uint256 _value) public returns (bool){\r\n        if (_to == address(this)) {\r\n            return takeDividends(_value);\r\n        } else {\r\n            return transferFrom(msg.sender, _to, _value);\r\n        }\r\n    }\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transferfrom\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\r\n\r\n        // Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event (ERC-20)\r\n        require(_value >= 0);\r\n\r\n        // The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism\r\n        require(msg.sender == _from || _value <= allowance[_from][msg.sender]);\r\n\r\n        // check if _from account have required amount\r\n        require(_value <= balanceOf[_from]);\r\n\r\n        // Subtract from the sender\r\n        // balanceOf[_from] = balanceOf[_from] - _value;\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        // Add the same to the recipient\r\n        // balanceOf[_to] = balanceOf[_to] + _value;\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n\r\n        // If allowance used, change allowances correspondingly\r\n        if (_from != msg.sender) {\r\n            // allowance[_from][msg.sender] = allowance[_from][msg.sender] - _value;\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        }\r\n\r\n        // event\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    } // end of transferFrom\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#approve\r\n    // there is and attack, see:\r\n    // https://github.com/CORIONplatform/solidity/issues/6,\r\n    // https://drive.google.com/file/d/0ByMtMw2hul0EN3NCaVFHSFdxRzA/view\r\n    // but this function is required by ERC-20\r\n    function approve(address _spender, uint256 _value) public returns (bool){\r\n        require(_value >= 0);\r\n        allowance[msg.sender][_spender] = _value;\r\n        // event\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*  ---------- Interaction with other contracts  */\r\n\r\n    /* User can allow another smart contract to spend some tokens in his behalf\r\n    *  (this function should be called by user itself)\r\n    *  @param _spender another contract's address\r\n    *  @param _value number of tokens\r\n    *  @param _extraData Data that can be sent from user to another contract to be processed\r\n    *  bytes - dynamically-sized byte array,\r\n    *  see http://solidity.readthedocs.io/en/v0.4.15/types.html#dynamically-sized-byte-array\r\n    *  see possible attack information in comments to function 'approve'\r\n    *  > this may be used, for example, to convert pre-ICO tokens to ICO tokens, or\r\n    *    to convert some tokens to other tokens\r\n    */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool) {\r\n\r\n        approve(_spender, _value);\r\n\r\n        // 'spender' is another contract that implements code as prescribed in 'allowanceRecipient' above\r\n        allowanceRecipient spender = allowanceRecipient(_spender);\r\n\r\n        // our contract calls 'receiveApproval' function of another contract ('allowanceRecipient') to send information about\r\n        // allowance and data sent by user\r\n        // 'this' is this (our) contract address\r\n        if (spender.receiveApproval(msg.sender, _value, this, _extraData)) {\r\n            emit DataSentToAnotherContract(msg.sender, _spender, _extraData);\r\n            return true;\r\n        }\r\n        return false;\r\n    } // end of approveAndCall\r\n\r\n    // for convenience:\r\n    function approveAllAndCall(address _spender, bytes _extraData) public returns (bool success) {\r\n        return approveAndCall(_spender, balanceOf[msg.sender], _extraData);\r\n    }\r\n\r\n    /* https://github.com/ethereum/EIPs/issues/677\r\n    * transfer tokens with additional info to another smart contract, and calls its correspondent function\r\n    * @param address _to - another smart contract address\r\n    * @param uint256 _value - number of tokens\r\n    * @param bytes _extraData - data to send to another contract\r\n    *  > this may be used, for example, to convert pre-ICO tokens to ICO tokens, or\r\n    *    to convert some tokens to other tokens\r\n    */\r\n    function transferAndCall(address _to, uint256 _value, bytes _extraData) public returns (bool success){\r\n\r\n        transferFrom(msg.sender, _to, _value);\r\n\r\n        tokenRecipient receiver = tokenRecipient(_to);\r\n\r\n        if (receiver.tokenFallback(msg.sender, _value, _extraData)) {\r\n            emit DataSentToAnotherContract(msg.sender, _to, _extraData);\r\n            return true;\r\n        }\r\n        return false;\r\n    } // end of transferAndCall\r\n\r\n    // for example for converting ALL tokens on user account to another tokens\r\n    function transferAllAndCall(address _to, bytes _extraData) public returns (bool success){\r\n        return transferAndCall(_to, balanceOf[msg.sender], _extraData);\r\n    }\r\n\r\n    /* ---- (!) Receive payments */\r\n    function() public payable {\r\n        // no code here, so we can use standard transfer function\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"valueInTokens\",\"type\":\"uint256\"}],\"name\":\"takeDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAllAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeOwnerAccept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"transferAllAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_toContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"DataSentToAnotherContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwnerStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sumInWeiPaid\",\"type\":\"uint256\"}],\"name\":\"DividendsPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawalByOwner\",\"type\":\"event\"}]","ContractName":"EthIdTokens","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://605708e85d68827549b4ae80327ce13d26e87f59790602e2900934a07a359c8e"}]}