{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.3;\r\ncontract Game{\r\n    //创建者\r\n    address founder;\r\n\r\n    uint betPhase=6;\r\n\r\n    uint commitPhase=6;\r\n\r\n    uint openPhase=6;\r\n\r\n    uint minValue=0.1 ether;\r\n\r\n\r\n\r\n    uint refund=90;\r\n\r\n    bool finished=true;\r\n\r\n    uint startBlock;\r\n\r\n    uint id=0;\r\n\r\n    struct Participant{\r\n        bytes32 hash;\r\n        bytes32 origin;\r\n        uint value;\r\n        bool committed;\r\n        bool returned;\r\n    }\r\n\r\n\r\n\r\n\r\n    struct Bet{\r\n        uint betPhase;\r\n        uint commitPhase;\r\n        uint openPhase;\r\n        uint minValue;\r\n\r\n        mapping(address=>Participant) participants;\r\n        address[] keys;\r\n        uint totalValue;\r\n        uint valiadValue;\r\n        uint validUsers;\r\n        bytes32 luckNumber;\r\n        address lucky;\r\n        bool prized;\r\n        uint refund;\r\n    }\r\n\r\n    mapping(uint=>Bet) games;\r\n\r\n\r\n    modifier checkGameFinish(){\r\n        if(finished){\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkFounder(){\r\n        if(msg.sender!=founder){\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkPrized(uint id){\r\n        if(games[id].prized){\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkFihished(){\r\n        if(!finished){\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkId(uint i){\r\n        if(id!=i){\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkValue(uint value){\r\n        if(value<minValue){\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkBetPhase(){\r\n        if(block.number>startBlock+betPhase){\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkCommitPhase(){\r\n        if(block.number>startBlock+betPhase+commitPhase){\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkOpen(){\r\n        if(block.number<startBlock+betPhase+commitPhase){\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkUser(address user,uint id){\r\n        if(games[id].participants[user].hash==\"\"){\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkRegister(uint id,address user){\r\n        if(games[id].participants[user].hash!=\"\"){\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function Game() public{\r\n        founder=msg.sender;\r\n    }\r\n\r\n    event StartGame(uint indexed id,uint betPhase,uint commitPhase,uint openPhase,uint betValue,uint refund,uint startBlock);\r\n\r\n\r\n\r\n    function startGame(uint iBetPhase,uint iCommitPhase,uint iOpenPhase,uint betvalue,uint iRefund)\r\n    checkFounder\r\n    checkFihished\r\n    {\r\n        id+=1;\r\n        betPhase=iBetPhase;\r\n        commitPhase=iCommitPhase;\r\n        openPhase=iOpenPhase;\r\n        minValue=(betvalue*1 ether)/100;\r\n        finished=false;\r\n        startBlock=block.number;\r\n        refund=iRefund;\r\n        StartGame(id,betPhase,commitPhase,openPhase,minValue,refund,startBlock);\r\n    }\r\n\r\n    // current total value,hash,id,sid\r\n    event Play(uint indexed value,bytes32 hash,uint id,bytes32 sid,address player);\r\n\r\n    function play(uint id,bytes32 hash,bytes32 sid) public payable\r\n    checkValue(msg.value)\r\n    checkBetPhase\r\n    checkId(id)\r\n    checkRegister(id,msg.sender)\r\n    {\r\n        address user=msg.sender;\r\n        Bet memory tmp=games[id];\r\n        Participant memory participant=Participant({hash:hash,origin:\"\",value:msg.value,committed:false,returned:false});\r\n        uint value;\r\n        if(tmp.keys.length==0){\r\n            Bet storage bet=games[id];\r\n            bet.betPhase=betPhase;\r\n            bet.commitPhase=commitPhase;\r\n            bet.openPhase=openPhase;\r\n            bet.minValue=minValue;\r\n\r\n            bet.keys.push(user);\r\n            bet.participants[user]=participant;\r\n            bet.refund=refund;\r\n            bet.totalValue=msg.value;\r\n            value=msg.value;\r\n        }else{\r\n            games[id].keys.push(user);\r\n            games[id].participants[user]=participant;\r\n            games[id].totalValue+=msg.value;\r\n            value=msg.value;\r\n        }\r\n        var num=games[id].keys.length;\r\n        Play(value,hash,id,sid,msg.sender);\r\n    }\r\n    // origin,valid users\r\n    event CommitOrigin(address indexed user,bytes32 origin,uint num,bytes32 sid,uint id);\r\n\r\n    function commitOrigin(uint id,bytes32 origin,bytes32 sid)\r\n    checkCommitPhase\r\n    checkId(id)\r\n    checkUser(msg.sender,id)\r\n    {\r\n        bytes32 hash=games[id].participants[msg.sender].hash;\r\n        if(sha3(origin)==hash){\r\n            if(games[id].participants[msg.sender].committed!=true){\r\n                games[id].participants[msg.sender].committed=true;\r\n                games[id].participants[msg.sender].origin=origin;\r\n                games[id].valiadValue+=games[id].participants[msg.sender].value;\r\n                games[id].validUsers++;\r\n                CommitOrigin(msg.sender,origin,games[id].validUsers,sid,id);\r\n            }\r\n\r\n        }else{\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function getLuckNumber(Bet storage bet) internal\r\n    returns(bytes32)\r\n    {\r\n        address[] memory users=bet.keys;\r\n        bytes32 random;\r\n        for(uint i=0;i<users.length;i++){\r\n            address key=users[i];\r\n            Participant memory p=bet.participants[key];\r\n\r\n            if(p.committed==true){\r\n                random ^=p.origin;\r\n            }\r\n        }\r\n        return sha3(random);\r\n    }\r\n\r\n    // lucky user,lucky number,random number,prize\r\n    event Open(address indexed user,bytes32 random,uint prize,uint id);\r\n\r\n    function open(uint id)\r\n    checkPrized(id)\r\n    checkFounder\r\n    checkOpen\r\n    checkGameFinish\r\n    {\r\n        bytes32 max=0;\r\n        Bet storage bet=games[id];\r\n        bytes32 random=getLuckNumber(bet);\r\n        address tmp;\r\n        address[] memory users=bet.keys;\r\n        for(uint i=0;i<users.length;i++){\r\n\r\n            address key=users[i];\r\n            Participant storage p=bet.participants[key];\r\n            if(p.committed==true){\r\n                bytes32 distance=random^p.origin;\r\n                if(distance>max){\r\n                    max=distance;\r\n                    tmp=key;\r\n                }\r\n            }else{\r\n                if(p.returned==false){\r\n                    if(key.send(p.value*8/10)){\r\n                        p.returned=true;\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n        bet.lucky=tmp;\r\n        bet.luckNumber=random;\r\n        uint prize=bet.valiadValue*refund/100;\r\n\r\n        founder.send((bet.valiadValue-prize));\r\n        if(tmp.send(prize)){\r\n            bet.prized=true;\r\n            Open(tmp,random,prize,id);\r\n        }\r\n\r\n        finished=true;\r\n    }\r\n\r\n    function getContractBalance() constant returns(uint){\r\n        return this.balance;\r\n    }\r\n\r\n    function withdraw(address user,uint value)\r\n    checkFounder\r\n    {\r\n        user.send(value);\r\n    }\r\n\r\n    function getPlayerCommitted(uint period,address player) constant returns(bool){\r\n        Participant memory p=games[period].participants[player];\r\n        return p.committed;\r\n    }\r\n\r\n    function getPlayerReturned(uint period,address player) constant returns(bool){\r\n        Participant memory p=games[period].participants[player];\r\n        return p.returned;\r\n    }\r\n\r\n    function getPlayerNum(uint period) constant\r\n    returns(uint){\r\n        Bet bet=games[period];\r\n        return bet.keys.length;\r\n    }\r\n\r\n    function getPlayerAddress(uint period,uint offset) constant\r\n    returns(address){\r\n        Bet bet=games[period];\r\n        return bet.keys[offset];\r\n    }\r\n\r\n    function getPlayerOrigin(uint period,uint offset) constant\r\n    returns(bytes32){\r\n        Bet bet=games[period];\r\n        address user=bet.keys[offset];\r\n        return bet.participants[user].origin;\r\n    }\r\n\r\n    function getPlayerHash(uint period,uint offset) constant\r\n    returns(bytes32){\r\n        Bet bet=games[period];\r\n        address user=bet.keys[offset];\r\n        return bet.participants[user].hash;\r\n    }\r\n\r\n    function getPlayerValue(uint period,uint offset) constant\r\n    returns(uint){\r\n        Bet bet=games[period];\r\n        address user=bet.keys[offset];\r\n        return bet.participants[user].value;\r\n    }\r\n\r\n    // public getRandom(uint id) constant{\r\n\r\n    // }\r\n    function getId() constant returns(uint){\r\n        return id;\r\n    }\r\n\r\n    function getRandom(uint id) constant\r\n    checkId(id)\r\n    returns(bytes32){\r\n        return games[id].luckNumber;\r\n    }\r\n\r\n    function getLuckUser(uint id) constant\r\n    checkId(id)\r\n    returns(address){\r\n        return games[id].lucky;\r\n    }\r\n\r\n    function getPrizeAmount(uint id) constant\r\n    checkId(id)\r\n    returns(uint){\r\n        return games[id].totalValue;\r\n    }\r\n\r\n    function getMinAmount(uint id) constant\r\n    checkId(id)\r\n    returns(uint)\r\n    {\r\n        return minValue;\r\n    }\r\n\r\n    function getsha3(bytes32 x) constant\r\n    returns(bytes32){\r\n        return sha3(x);\r\n    }\r\n\r\n    function getGamePeriod() constant\r\n    returns(uint){\r\n        return id;\r\n    }\r\n\r\n\r\n    function getStartBlock() constant\r\n    returns(uint){\r\n        return startBlock;\r\n    }\r\n\r\n    function getBetPhase() constant\r\n    returns(uint){\r\n        return betPhase;\r\n    }\r\n\r\n    function getCommitPhase() constant\r\n    returns(uint){\r\n        return commitPhase;\r\n    }\r\n\r\n    function getFinished() constant\r\n    returns(bool){\r\n        return finished;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerCommitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getPlayerOrigin\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getPlayerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"origin\",\"type\":\"bytes32\"},{\"name\":\"sid\",\"type\":\"bytes32\"}],\"name\":\"commitOrigin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMinAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGamePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getPlayerHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"sid\",\"type\":\"bytes32\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getPlayerValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommitPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLuckUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPrizeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBetPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"iBetPhase\",\"type\":\"uint256\"},{\"name\":\"iCommitPhase\",\"type\":\"uint256\"},{\"name\":\"iOpenPhase\",\"type\":\"uint256\"},{\"name\":\"betvalue\",\"type\":\"uint256\"},{\"name\":\"iRefund\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"getsha3\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getPlayerNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerReturned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betPhase\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commitPhase\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"openPhase\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refund\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startBlock\",\"type\":\"uint256\"}],\"name\":\"StartGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"Play\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"origin\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CommitOrigin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"random\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Open\",\"type\":\"event\"}]","ContractName":"Game","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://906ec758e8a05d51ec0eaccb13be63bfb5d4c479edfa52cdb5bd28421edf9b00"}]}