{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n// File: contracts/interface/IBasicMultiToken.sol\r\n\r\ncontract IBasicMultiToken is ERC20 {\r\n    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\r\n    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\r\n\r\n    ERC20[] public tokens;\r\n\r\n    function tokensCount() public view returns(uint256);\r\n\r\n    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public;\r\n    function bundle(address _beneficiary, uint256 _amount) public;\r\n\r\n    function unbundle(address _beneficiary, uint256 _value) public;\r\n    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public;\r\n\r\n    function disableBundling() public;\r\n    function enableBundling() public;\r\n}\r\n\r\n// File: contracts/interface/IMultiToken.sol\r\n\r\ncontract IMultiToken is IBasicMultiToken {\r\n    event Update();\r\n    event Change(address indexed _fromToken, address indexed _toToken, address indexed _changer, uint256 _amount, uint256 _return);\r\n\r\n    mapping(address => uint256) public weights;\r\n\r\n    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256 returnAmount);\r\n    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256 returnAmount);\r\n\r\n    function disableChanges() public;\r\n}\r\n\r\n// File: contracts/interface/IMultiTokenInfo.sol\r\n\r\ncontract IMultiTokenInfo {\r\n    function allTokens(IBasicMultiToken _mtkn) public view returns(ERC20[] _tokens);\r\n\r\n    function allBalances(IBasicMultiToken _mtkn) public view returns(uint256[] _balances);\r\n\r\n    function allDecimals(IBasicMultiToken _mtkn) public view returns(uint8[] _decimals);\r\n\r\n    function allNames(IBasicMultiToken _mtkn) public view returns(bytes32[] _names);\r\n\r\n    function allSymbols(IBasicMultiToken _mtkn) public view returns(bytes32[] _symbols);\r\n\r\n    function allTokensBalancesDecimalsNamesSymbols(IBasicMultiToken _mtkn) public view returns(\r\n        ERC20[] _tokens,\r\n        uint256[] _balances,\r\n        uint8[] _decimals,\r\n        bytes32[] _names,\r\n        bytes32[] _symbols\r\n        );\r\n\r\n    // MultiToken\r\n\r\n    function allWeights(IMultiToken _mtkn) public view returns(uint256[] _weights);\r\n\r\n    function allTokensBalancesDecimalsNamesSymbolsWeights(IMultiToken _mtkn) public view returns(\r\n        ERC20[] _tokens,\r\n        uint256[] _balances,\r\n        uint8[] _decimals,\r\n        bytes32[] _names,\r\n        bytes32[] _symbols,\r\n        uint256[] _weights\r\n        );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ext/CheckedERC20.sol\r\n\r\nlibrary CheckedERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function isContract(address addr) internal view returns(bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            result := gt(extcodesize(addr), 0)\r\n        }\r\n    }\r\n\r\n    function handleReturnBool() internal pure returns(bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch returndatasize()\r\n            case 0 { // not a std erc20\r\n                result := 1\r\n            }\r\n            case 32 { // std erc20\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n            default { // anything else, should revert for safety\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReturnBytes32() internal pure returns(bytes32 result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            if eq(returndatasize(), 32) { // not a std erc20\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n            if gt(returndatasize(), 32) { // std erc20\r\n                returndatacopy(0, 64, 32)\r\n                result := mload(0)\r\n            }\r\n            if lt(returndatasize(), 32) { // anything else, should revert for safety\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function asmTransfer(address _token, address _to, uint256 _value) internal returns(bool) {\r\n        require(isContract(_token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _value));\r\n        return handleReturnBool();\r\n    }\r\n\r\n    function asmTransferFrom(address _token, address _from, address _to, uint256 _value) internal returns(bool) {\r\n        require(isContract(_token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_token.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), _from, _to, _value));\r\n        return handleReturnBool();\r\n    }\r\n\r\n    function asmApprove(address _token, address _spender, uint256 _value) internal returns(bool) {\r\n        require(isContract(_token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_token.call(bytes4(keccak256(\"approve(address,uint256)\")), _spender, _value));\r\n        return handleReturnBool();\r\n    }\r\n\r\n    //\r\n\r\n    function checkedTransfer(ERC20 _token, address _to, uint256 _value) internal {\r\n        if (_value > 0) {\r\n            uint256 balance = _token.balanceOf(this);\r\n            asmTransfer(_token, _to, _value);\r\n            require(_token.balanceOf(this) == balance.sub(_value), \"checkedTransfer: Final balance didn't match\");\r\n        }\r\n    }\r\n\r\n    function checkedTransferFrom(ERC20 _token, address _from, address _to, uint256 _value) internal {\r\n        if (_value > 0) {\r\n            uint256 toBalance = _token.balanceOf(_to);\r\n            asmTransferFrom(_token, _from, _to, _value);\r\n            require(_token.balanceOf(_to) == toBalance.add(_value), \"checkedTransfer: Final balance didn't match\");\r\n        }\r\n    }\r\n\r\n    //\r\n\r\n    function asmName(address _token) public view returns(bytes32) {\r\n        require(isContract(_token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_token.call(bytes4(keccak256(\"name()\"))));\r\n        return handleReturnBytes32();\r\n    }\r\n\r\n    function asmSymbol(address _token) public view returns(bytes32) {\r\n        require(isContract(_token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_token.call(bytes4(keccak256(\"symbol()\"))));\r\n        return handleReturnBytes32();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"asmSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"asmName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CheckedERC20","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://edc7f9f168c81035a78d3996b2bb7065fb6ef99a243f55d29fb57855217f0c67"}]}